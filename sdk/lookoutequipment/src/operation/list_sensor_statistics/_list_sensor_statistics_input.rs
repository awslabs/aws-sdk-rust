// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSensorStatisticsInput {
    /// <p> The name of the dataset associated with the list of Sensor Statistics. </p>
    pub dataset_name: ::std::option::Option<::std::string::String>,
    /// <p> The ingestion job id associated with the list of Sensor Statistics. To get sensor statistics for a particular ingestion job id, both dataset name and ingestion job id must be submitted as inputs. </p>
    pub ingestion_job_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the maximum number of sensors for which to retrieve statistics. </p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>An opaque pagination token indicating where to continue the listing of sensor statistics. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListSensorStatisticsInput {
    /// <p> The name of the dataset associated with the list of Sensor Statistics. </p>
    pub fn dataset_name(&self) -> ::std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p> The ingestion job id associated with the list of Sensor Statistics. To get sensor statistics for a particular ingestion job id, both dataset name and ingestion job id must be submitted as inputs. </p>
    pub fn ingestion_job_id(&self) -> ::std::option::Option<&str> {
        self.ingestion_job_id.as_deref()
    }
    /// <p>Specifies the maximum number of sensors for which to retrieve statistics. </p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>An opaque pagination token indicating where to continue the listing of sensor statistics. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListSensorStatisticsInput {
    /// Creates a new builder-style object to manufacture [`ListSensorStatisticsInput`](crate::operation::list_sensor_statistics::ListSensorStatisticsInput).
    pub fn builder() -> crate::operation::list_sensor_statistics::builders::ListSensorStatisticsInputBuilder {
        crate::operation::list_sensor_statistics::builders::ListSensorStatisticsInputBuilder::default()
    }
}

/// A builder for [`ListSensorStatisticsInput`](crate::operation::list_sensor_statistics::ListSensorStatisticsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSensorStatisticsInputBuilder {
    pub(crate) dataset_name: ::std::option::Option<::std::string::String>,
    pub(crate) ingestion_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListSensorStatisticsInputBuilder {
    /// <p> The name of the dataset associated with the list of Sensor Statistics. </p>
    /// This field is required.
    pub fn dataset_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the dataset associated with the list of Sensor Statistics. </p>
    pub fn set_dataset_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_name = input;
        self
    }
    /// <p> The name of the dataset associated with the list of Sensor Statistics. </p>
    pub fn get_dataset_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_name
    }
    /// <p> The ingestion job id associated with the list of Sensor Statistics. To get sensor statistics for a particular ingestion job id, both dataset name and ingestion job id must be submitted as inputs. </p>
    pub fn ingestion_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingestion_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ingestion job id associated with the list of Sensor Statistics. To get sensor statistics for a particular ingestion job id, both dataset name and ingestion job id must be submitted as inputs. </p>
    pub fn set_ingestion_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingestion_job_id = input;
        self
    }
    /// <p> The ingestion job id associated with the list of Sensor Statistics. To get sensor statistics for a particular ingestion job id, both dataset name and ingestion job id must be submitted as inputs. </p>
    pub fn get_ingestion_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingestion_job_id
    }
    /// <p>Specifies the maximum number of sensors for which to retrieve statistics. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the maximum number of sensors for which to retrieve statistics. </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Specifies the maximum number of sensors for which to retrieve statistics. </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>An opaque pagination token indicating where to continue the listing of sensor statistics. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An opaque pagination token indicating where to continue the listing of sensor statistics. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An opaque pagination token indicating where to continue the listing of sensor statistics. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListSensorStatisticsInput`](crate::operation::list_sensor_statistics::ListSensorStatisticsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_sensor_statistics::ListSensorStatisticsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_sensor_statistics::ListSensorStatisticsInput {
            dataset_name: self.dataset_name,
            ingestion_job_id: self.ingestion_job_id,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
