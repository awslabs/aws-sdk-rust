// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_model::_create_model_output::CreateModelOutputBuilder;

pub use crate::operation::create_model::_create_model_input::CreateModelInputBuilder;

/// Fluent builder constructing a request to `CreateModel`.
///
/// <p>Creates an ML model for data inference. </p>
/// <p>A machine-learning (ML) model is a mathematical model that finds patterns in your data. In Amazon Lookout for Equipment, the model learns the patterns of normal behavior and detects abnormal behavior that could be potential equipment failure (or maintenance events). The models are made by analyzing normal data and abnormalities in machine behavior that have already occurred.</p>
/// <p>Your model is trained using a portion of the data from your dataset and uses that data to learn patterns of normal behavior and abnormal patterns that lead to equipment failure. Another portion of the data is used to evaluate the model's accuracy. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateModelFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_model::builders::CreateModelInputBuilder,
}
impl CreateModelFluentBuilder {
    /// Creates a new `CreateModel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_model::CreateModel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_model::CreateModelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_model::CreateModelOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_model::CreateModelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name for the ML model to be created.</p>
    pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_name(input.into());
        self
    }
    /// <p>The name for the ML model to be created.</p>
    pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_name(input);
        self
    }
    /// <p>The name of the dataset for the ML model being created. </p>
    pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.dataset_name(input.into());
        self
    }
    /// <p>The name of the dataset for the ML model being created. </p>
    pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_dataset_name(input);
        self
    }
    /// <p>The data schema for the ML model being created. </p>
    pub fn dataset_schema(mut self, input: crate::types::DatasetSchema) -> Self {
        self.inner = self.inner.dataset_schema(input);
        self
    }
    /// <p>The data schema for the ML model being created. </p>
    pub fn set_dataset_schema(
        mut self,
        input: std::option::Option<crate::types::DatasetSchema>,
    ) -> Self {
        self.inner = self.inner.set_dataset_schema(input);
        self
    }
    /// <p>The input configuration for the labels being used for the ML model that's being created. </p>
    pub fn labels_input_configuration(
        mut self,
        input: crate::types::LabelsInputConfiguration,
    ) -> Self {
        self.inner = self.inner.labels_input_configuration(input);
        self
    }
    /// <p>The input configuration for the labels being used for the ML model that's being created. </p>
    pub fn set_labels_input_configuration(
        mut self,
        input: std::option::Option<crate::types::LabelsInputConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_labels_input_configuration(input);
        self
    }
    /// <p>A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Indicates the time reference in the dataset that should be used to begin the subset of training data for the ML model. </p>
    pub fn training_data_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.training_data_start_time(input);
        self
    }
    /// <p>Indicates the time reference in the dataset that should be used to begin the subset of training data for the ML model. </p>
    pub fn set_training_data_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_training_data_start_time(input);
        self
    }
    /// <p>Indicates the time reference in the dataset that should be used to end the subset of training data for the ML model. </p>
    pub fn training_data_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.training_data_end_time(input);
        self
    }
    /// <p>Indicates the time reference in the dataset that should be used to end the subset of training data for the ML model. </p>
    pub fn set_training_data_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_training_data_end_time(input);
        self
    }
    /// <p>Indicates the time reference in the dataset that should be used to begin the subset of evaluation data for the ML model. </p>
    pub fn evaluation_data_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.evaluation_data_start_time(input);
        self
    }
    /// <p>Indicates the time reference in the dataset that should be used to begin the subset of evaluation data for the ML model. </p>
    pub fn set_evaluation_data_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_evaluation_data_start_time(input);
        self
    }
    /// <p> Indicates the time reference in the dataset that should be used to end the subset of evaluation data for the ML model. </p>
    pub fn evaluation_data_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.evaluation_data_end_time(input);
        self
    }
    /// <p> Indicates the time reference in the dataset that should be used to end the subset of evaluation data for the ML model. </p>
    pub fn set_evaluation_data_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_evaluation_data_end_time(input);
        self
    }
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source being used to create the ML model. </p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source being used to create the ML model. </p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p>
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore <i>PT1S</i>, the value for a 15 minute rate is <i>PT15M</i>, and the value for a 1 hour rate is <i>PT1H</i> </p>
    pub fn data_pre_processing_configuration(
        mut self,
        input: crate::types::DataPreProcessingConfiguration,
    ) -> Self {
        self.inner = self.inner.data_pre_processing_configuration(input);
        self
    }
    /// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p>
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore <i>PT1S</i>, the value for a 15 minute rate is <i>PT15M</i>, and the value for a 1 hour rate is <i>PT1H</i> </p>
    pub fn set_data_pre_processing_configuration(
        mut self,
        input: std::option::Option<crate::types::DataPreProcessingConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_data_pre_processing_configuration(input);
        self
    }
    /// <p>Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment. </p>
    pub fn server_side_kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.server_side_kms_key_id(input.into());
        self
    }
    /// <p>Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment. </p>
    pub fn set_server_side_kms_key_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_server_side_kms_key_id(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> Any tags associated with the ML model being created. </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p> Any tags associated with the ML model being created. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.</p>
    pub fn off_condition(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.off_condition(input.into());
        self
    }
    /// <p>Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.</p>
    pub fn set_off_condition(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_off_condition(input);
        self
    }
}
