// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDatasetOutput {
    /// <p>The name of the dataset being described. </p>
    #[doc(hidden)]
    pub dataset_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the dataset being described. </p>
    #[doc(hidden)]
    pub dataset_arn: std::option::Option<std::string::String>,
    /// <p>Specifies the time the dataset was created in Lookout for Equipment. </p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies the time the dataset was last updated, if it was. </p>
    #[doc(hidden)]
    pub last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates the status of the dataset. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::DatasetStatus>,
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    #[doc(hidden)]
    pub schema: std::option::Option<std::string::String>,
    /// <p>Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment. </p>
    #[doc(hidden)]
    pub server_side_kms_key_id: std::option::Option<std::string::String>,
    /// <p>Specifies the S3 location configuration for the data input for the data ingestion job. </p>
    #[doc(hidden)]
    pub ingestion_input_configuration:
        std::option::Option<crate::types::IngestionInputConfiguration>,
    /// <p> Gives statistics associated with the given dataset for the latest successful associated ingestion job id. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps. </p>
    #[doc(hidden)]
    pub data_quality_summary: std::option::Option<crate::types::DataQualitySummary>,
    /// <p> IngestedFilesSummary associated with the given dataset for the latest successful associated ingestion job id. </p>
    #[doc(hidden)]
    pub ingested_files_summary: std::option::Option<crate::types::IngestedFilesSummary>,
    /// <p> The Amazon Resource Name (ARN) of the IAM role that you are using for this the data ingestion job. </p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p> Indicates the earliest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset. </p>
    #[doc(hidden)]
    pub data_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> Indicates the latest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset. </p>
    #[doc(hidden)]
    pub data_end_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeDatasetOutput {
    /// <p>The name of the dataset being described. </p>
    pub fn dataset_name(&self) -> std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset being described. </p>
    pub fn dataset_arn(&self) -> std::option::Option<&str> {
        self.dataset_arn.as_deref()
    }
    /// <p>Specifies the time the dataset was created in Lookout for Equipment. </p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Specifies the time the dataset was last updated, if it was. </p>
    pub fn last_updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>Indicates the status of the dataset. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::DatasetStatus> {
        self.status.as_ref()
    }
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    pub fn schema(&self) -> std::option::Option<&str> {
        self.schema.as_deref()
    }
    /// <p>Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment. </p>
    pub fn server_side_kms_key_id(&self) -> std::option::Option<&str> {
        self.server_side_kms_key_id.as_deref()
    }
    /// <p>Specifies the S3 location configuration for the data input for the data ingestion job. </p>
    pub fn ingestion_input_configuration(
        &self,
    ) -> std::option::Option<&crate::types::IngestionInputConfiguration> {
        self.ingestion_input_configuration.as_ref()
    }
    /// <p> Gives statistics associated with the given dataset for the latest successful associated ingestion job id. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps. </p>
    pub fn data_quality_summary(&self) -> std::option::Option<&crate::types::DataQualitySummary> {
        self.data_quality_summary.as_ref()
    }
    /// <p> IngestedFilesSummary associated with the given dataset for the latest successful associated ingestion job id. </p>
    pub fn ingested_files_summary(
        &self,
    ) -> std::option::Option<&crate::types::IngestedFilesSummary> {
        self.ingested_files_summary.as_ref()
    }
    /// <p> The Amazon Resource Name (ARN) of the IAM role that you are using for this the data ingestion job. </p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p> Indicates the earliest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset. </p>
    pub fn data_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.data_start_time.as_ref()
    }
    /// <p> Indicates the latest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset. </p>
    pub fn data_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.data_end_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeDatasetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDatasetOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDatasetOutput`](crate::operation::describe_dataset::DescribeDatasetOutput).
    pub fn builder() -> crate::operation::describe_dataset::builders::DescribeDatasetOutputBuilder {
        crate::operation::describe_dataset::builders::DescribeDatasetOutputBuilder::default()
    }
}

/// A builder for [`DescribeDatasetOutput`](crate::operation::describe_dataset::DescribeDatasetOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDatasetOutputBuilder {
    pub(crate) dataset_name: std::option::Option<std::string::String>,
    pub(crate) dataset_arn: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::DatasetStatus>,
    pub(crate) schema: std::option::Option<std::string::String>,
    pub(crate) server_side_kms_key_id: std::option::Option<std::string::String>,
    pub(crate) ingestion_input_configuration:
        std::option::Option<crate::types::IngestionInputConfiguration>,
    pub(crate) data_quality_summary: std::option::Option<crate::types::DataQualitySummary>,
    pub(crate) ingested_files_summary: std::option::Option<crate::types::IngestedFilesSummary>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) data_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) data_end_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeDatasetOutputBuilder {
    /// <p>The name of the dataset being described. </p>
    pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_name = Some(input.into());
        self
    }
    /// <p>The name of the dataset being described. </p>
    pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset being described. </p>
    pub fn dataset_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset being described. </p>
    pub fn set_dataset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_arn = input;
        self
    }
    /// <p>Specifies the time the dataset was created in Lookout for Equipment. </p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>Specifies the time the dataset was created in Lookout for Equipment. </p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Specifies the time the dataset was last updated, if it was. </p>
    pub fn last_updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = Some(input);
        self
    }
    /// <p>Specifies the time the dataset was last updated, if it was. </p>
    pub fn set_last_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>Indicates the status of the dataset. </p>
    pub fn status(mut self, input: crate::types::DatasetStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Indicates the status of the dataset. </p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::DatasetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    pub fn schema(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema = Some(input.into());
        self
    }
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    pub fn set_schema(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema = input;
        self
    }
    /// <p>Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment. </p>
    pub fn server_side_kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_side_kms_key_id = Some(input.into());
        self
    }
    /// <p>Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment. </p>
    pub fn set_server_side_kms_key_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.server_side_kms_key_id = input;
        self
    }
    /// <p>Specifies the S3 location configuration for the data input for the data ingestion job. </p>
    pub fn ingestion_input_configuration(
        mut self,
        input: crate::types::IngestionInputConfiguration,
    ) -> Self {
        self.ingestion_input_configuration = Some(input);
        self
    }
    /// <p>Specifies the S3 location configuration for the data input for the data ingestion job. </p>
    pub fn set_ingestion_input_configuration(
        mut self,
        input: std::option::Option<crate::types::IngestionInputConfiguration>,
    ) -> Self {
        self.ingestion_input_configuration = input;
        self
    }
    /// <p> Gives statistics associated with the given dataset for the latest successful associated ingestion job id. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps. </p>
    pub fn data_quality_summary(mut self, input: crate::types::DataQualitySummary) -> Self {
        self.data_quality_summary = Some(input);
        self
    }
    /// <p> Gives statistics associated with the given dataset for the latest successful associated ingestion job id. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps. </p>
    pub fn set_data_quality_summary(
        mut self,
        input: std::option::Option<crate::types::DataQualitySummary>,
    ) -> Self {
        self.data_quality_summary = input;
        self
    }
    /// <p> IngestedFilesSummary associated with the given dataset for the latest successful associated ingestion job id. </p>
    pub fn ingested_files_summary(mut self, input: crate::types::IngestedFilesSummary) -> Self {
        self.ingested_files_summary = Some(input);
        self
    }
    /// <p> IngestedFilesSummary associated with the given dataset for the latest successful associated ingestion job id. </p>
    pub fn set_ingested_files_summary(
        mut self,
        input: std::option::Option<crate::types::IngestedFilesSummary>,
    ) -> Self {
        self.ingested_files_summary = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the IAM role that you are using for this the data ingestion job. </p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the IAM role that you are using for this the data ingestion job. </p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p> Indicates the earliest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset. </p>
    pub fn data_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.data_start_time = Some(input);
        self
    }
    /// <p> Indicates the earliest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset. </p>
    pub fn set_data_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.data_start_time = input;
        self
    }
    /// <p> Indicates the latest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset. </p>
    pub fn data_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.data_end_time = Some(input);
        self
    }
    /// <p> Indicates the latest timestamp corresponding to data that was successfully ingested during the most recent ingestion of this particular dataset. </p>
    pub fn set_data_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.data_end_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDatasetOutput`](crate::operation::describe_dataset::DescribeDatasetOutput).
    pub fn build(self) -> crate::operation::describe_dataset::DescribeDatasetOutput {
        crate::operation::describe_dataset::DescribeDatasetOutput {
            dataset_name: self.dataset_name,
            dataset_arn: self.dataset_arn,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            status: self.status,
            schema: self.schema,
            server_side_kms_key_id: self.server_side_kms_key_id,
            ingestion_input_configuration: self.ingestion_input_configuration,
            data_quality_summary: self.data_quality_summary,
            ingested_files_summary: self.ingested_files_summary,
            role_arn: self.role_arn,
            data_start_time: self.data_start_time,
            data_end_time: self.data_end_time,
            _request_id: self._request_id,
        }
    }
}
