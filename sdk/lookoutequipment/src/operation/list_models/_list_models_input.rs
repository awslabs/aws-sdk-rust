// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListModelsInput {
    /// <p> An opaque pagination token indicating where to continue the listing of ML models. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p> Specifies the maximum number of ML models to list. </p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The status of the ML model. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ModelStatus>,
    /// <p>The beginning of the name of the ML models being listed. </p>
    #[doc(hidden)]
    pub model_name_begins_with: std::option::Option<std::string::String>,
    /// <p>The beginning of the name of the dataset of the ML models to be listed. </p>
    #[doc(hidden)]
    pub dataset_name_begins_with: std::option::Option<std::string::String>,
}
impl ListModelsInput {
    /// <p> An opaque pagination token indicating where to continue the listing of ML models. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> Specifies the maximum number of ML models to list. </p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The status of the ML model. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::ModelStatus> {
        self.status.as_ref()
    }
    /// <p>The beginning of the name of the ML models being listed. </p>
    pub fn model_name_begins_with(&self) -> std::option::Option<&str> {
        self.model_name_begins_with.as_deref()
    }
    /// <p>The beginning of the name of the dataset of the ML models to be listed. </p>
    pub fn dataset_name_begins_with(&self) -> std::option::Option<&str> {
        self.dataset_name_begins_with.as_deref()
    }
}
impl ListModelsInput {
    /// Creates a new builder-style object to manufacture [`ListModelsInput`](crate::operation::list_models::ListModelsInput).
    pub fn builder() -> crate::operation::list_models::builders::ListModelsInputBuilder {
        crate::operation::list_models::builders::ListModelsInputBuilder::default()
    }
}

/// A builder for [`ListModelsInput`](crate::operation::list_models::ListModelsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListModelsInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) status: std::option::Option<crate::types::ModelStatus>,
    pub(crate) model_name_begins_with: std::option::Option<std::string::String>,
    pub(crate) dataset_name_begins_with: std::option::Option<std::string::String>,
}
impl ListModelsInputBuilder {
    /// <p> An opaque pagination token indicating where to continue the listing of ML models. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> An opaque pagination token indicating where to continue the listing of ML models. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> Specifies the maximum number of ML models to list. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p> Specifies the maximum number of ML models to list. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The status of the ML model. </p>
    pub fn status(mut self, input: crate::types::ModelStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the ML model. </p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ModelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The beginning of the name of the ML models being listed. </p>
    pub fn model_name_begins_with(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_name_begins_with = Some(input.into());
        self
    }
    /// <p>The beginning of the name of the ML models being listed. </p>
    pub fn set_model_name_begins_with(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.model_name_begins_with = input;
        self
    }
    /// <p>The beginning of the name of the dataset of the ML models to be listed. </p>
    pub fn dataset_name_begins_with(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_name_begins_with = Some(input.into());
        self
    }
    /// <p>The beginning of the name of the dataset of the ML models to be listed. </p>
    pub fn set_dataset_name_begins_with(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dataset_name_begins_with = input;
        self
    }
    /// Consumes the builder and constructs a [`ListModelsInput`](crate::operation::list_models::ListModelsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_models::ListModelsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_models::ListModelsInput {
            next_token: self.next_token,
            max_results: self.max_results,
            status: self.status,
            model_name_begins_with: self.model_name_begins_with,
            dataset_name_begins_with: self.dataset_name_begins_with,
        })
    }
}
