// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_model_version::_import_model_version_output::ImportModelVersionOutputBuilder;

pub use crate::operation::import_model_version::_import_model_version_input::ImportModelVersionInputBuilder;

impl ImportModelVersionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::import_model_version::ImportModelVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::import_model_version::ImportModelVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.import_model_version();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ImportModelVersion`.
///
/// <p>Imports a model that has been trained successfully.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ImportModelVersionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::import_model_version::builders::ImportModelVersionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::import_model_version::ImportModelVersionOutput,
        crate::operation::import_model_version::ImportModelVersionError,
    > for ImportModelVersionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::import_model_version::ImportModelVersionOutput,
            crate::operation::import_model_version::ImportModelVersionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ImportModelVersionFluentBuilder {
    /// Creates a new `ImportModelVersion`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ImportModelVersion as a reference.
    pub fn as_input(&self) -> &crate::operation::import_model_version::builders::ImportModelVersionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::import_model_version::ImportModelVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::import_model_version::ImportModelVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::import_model_version::ImportModelVersion::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::import_model_version::ImportModelVersion::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::import_model_version::ImportModelVersionOutput,
        crate::operation::import_model_version::ImportModelVersionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model version to import.</p>
    pub fn source_model_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_model_version_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model version to import.</p>
    pub fn set_source_model_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_model_version_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model version to import.</p>
    pub fn get_source_model_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_model_version_arn()
    }
    /// <p>The name for the machine learning model to be created. If the model already exists, Amazon Lookout for Equipment creates a new version. If you do not specify this field, it is filled with the name of the source model.</p>
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.model_name(input.into());
        self
    }
    /// <p>The name for the machine learning model to be created. If the model already exists, Amazon Lookout for Equipment creates a new version. If you do not specify this field, it is filled with the name of the source model.</p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_model_name(input);
        self
    }
    /// <p>The name for the machine learning model to be created. If the model already exists, Amazon Lookout for Equipment creates a new version. If you do not specify this field, it is filled with the name of the source model.</p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_model_name()
    }
    /// <p>The name of the dataset for the machine learning model being imported. </p>
    pub fn dataset_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.dataset_name(input.into());
        self
    }
    /// <p>The name of the dataset for the machine learning model being imported. </p>
    pub fn set_dataset_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_dataset_name(input);
        self
    }
    /// <p>The name of the dataset for the machine learning model being imported. </p>
    pub fn get_dataset_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_dataset_name()
    }
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub fn labels_input_configuration(mut self, input: crate::types::LabelsInputConfiguration) -> Self {
        self.inner = self.inner.labels_input_configuration(input);
        self
    }
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub fn set_labels_input_configuration(mut self, input: ::std::option::Option<crate::types::LabelsInputConfiguration>) -> Self {
        self.inner = self.inner.set_labels_input_configuration(input);
        self
    }
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub fn get_labels_input_configuration(&self) -> &::std::option::Option<crate::types::LabelsInputConfiguration> {
        self.inner.get_labels_input_configuration()
    }
    /// <p>A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The Amazon Resource Name (ARN) of a role with permission to access the data source being used to create the machine learning model. </p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a role with permission to access the data source being used to create the machine learning model. </p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a role with permission to access the data source being used to create the machine learning model. </p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_role_arn()
    }
    /// <p>Provides the identifier of the KMS key key used to encrypt model data by Amazon Lookout for Equipment. </p>
    pub fn server_side_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.server_side_kms_key_id(input.into());
        self
    }
    /// <p>Provides the identifier of the KMS key key used to encrypt model data by Amazon Lookout for Equipment. </p>
    pub fn set_server_side_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_server_side_kms_key_id(input);
        self
    }
    /// <p>Provides the identifier of the KMS key key used to encrypt model data by Amazon Lookout for Equipment. </p>
    pub fn get_server_side_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_server_side_kms_key_id()
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the machine learning model to be created. </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tags associated with the machine learning model to be created. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags associated with the machine learning model to be created. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>Indicates how to import the accumulated inference data when a model version is imported. The possible values are as follows:</p>
    /// <ul>
    /// <li> <p>NO_IMPORT – Don't import the data.</p> </li>
    /// <li> <p>ADD_WHEN_EMPTY – Only import the data from the source model if there is no existing data in the target model.</p> </li>
    /// <li> <p>OVERWRITE – Import the data from the source model and overwrite the existing data in the target model.</p> </li>
    /// </ul>
    pub fn inference_data_import_strategy(mut self, input: crate::types::InferenceDataImportStrategy) -> Self {
        self.inner = self.inner.inference_data_import_strategy(input);
        self
    }
    /// <p>Indicates how to import the accumulated inference data when a model version is imported. The possible values are as follows:</p>
    /// <ul>
    /// <li> <p>NO_IMPORT – Don't import the data.</p> </li>
    /// <li> <p>ADD_WHEN_EMPTY – Only import the data from the source model if there is no existing data in the target model.</p> </li>
    /// <li> <p>OVERWRITE – Import the data from the source model and overwrite the existing data in the target model.</p> </li>
    /// </ul>
    pub fn set_inference_data_import_strategy(mut self, input: ::std::option::Option<crate::types::InferenceDataImportStrategy>) -> Self {
        self.inner = self.inner.set_inference_data_import_strategy(input);
        self
    }
    /// <p>Indicates how to import the accumulated inference data when a model version is imported. The possible values are as follows:</p>
    /// <ul>
    /// <li> <p>NO_IMPORT – Don't import the data.</p> </li>
    /// <li> <p>ADD_WHEN_EMPTY – Only import the data from the source model if there is no existing data in the target model.</p> </li>
    /// <li> <p>OVERWRITE – Import the data from the source model and overwrite the existing data in the target model.</p> </li>
    /// </ul>
    pub fn get_inference_data_import_strategy(&self) -> &::std::option::Option<crate::types::InferenceDataImportStrategy> {
        self.inner.get_inference_data_import_strategy()
    }
}
