// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListInferenceEventsInput {
    /// <p>An opaque pagination token indicating where to continue the listing of inference events.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Specifies the maximum number of inference events to list. </p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The name of the inference scheduler for the inference events listed. </p>
    #[doc(hidden)]
    pub inference_scheduler_name: std::option::Option<std::string::String>,
    /// <p> Lookout for Equipment will return all the inference events with an end time equal to or greater than the start time given.</p>
    #[doc(hidden)]
    pub interval_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Returns all the inference events with an end start time equal to or greater than less than the end time given</p>
    #[doc(hidden)]
    pub interval_end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ListInferenceEventsInput {
    /// <p>An opaque pagination token indicating where to continue the listing of inference events.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specifies the maximum number of inference events to list. </p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The name of the inference scheduler for the inference events listed. </p>
    pub fn inference_scheduler_name(&self) -> std::option::Option<&str> {
        self.inference_scheduler_name.as_deref()
    }
    /// <p> Lookout for Equipment will return all the inference events with an end time equal to or greater than the start time given.</p>
    pub fn interval_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.interval_start_time.as_ref()
    }
    /// <p>Returns all the inference events with an end start time equal to or greater than less than the end time given</p>
    pub fn interval_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.interval_end_time.as_ref()
    }
}
impl ListInferenceEventsInput {
    /// Creates a new builder-style object to manufacture [`ListInferenceEventsInput`](crate::operation::list_inference_events::ListInferenceEventsInput).
    pub fn builder(
    ) -> crate::operation::list_inference_events::builders::ListInferenceEventsInputBuilder {
        crate::operation::list_inference_events::builders::ListInferenceEventsInputBuilder::default(
        )
    }
}

/// A builder for [`ListInferenceEventsInput`](crate::operation::list_inference_events::ListInferenceEventsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListInferenceEventsInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) inference_scheduler_name: std::option::Option<std::string::String>,
    pub(crate) interval_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) interval_end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ListInferenceEventsInputBuilder {
    /// <p>An opaque pagination token indicating where to continue the listing of inference events.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>An opaque pagination token indicating where to continue the listing of inference events.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specifies the maximum number of inference events to list. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>Specifies the maximum number of inference events to list. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The name of the inference scheduler for the inference events listed. </p>
    pub fn inference_scheduler_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inference_scheduler_name = Some(input.into());
        self
    }
    /// <p>The name of the inference scheduler for the inference events listed. </p>
    pub fn set_inference_scheduler_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inference_scheduler_name = input;
        self
    }
    /// <p> Lookout for Equipment will return all the inference events with an end time equal to or greater than the start time given.</p>
    pub fn interval_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.interval_start_time = Some(input);
        self
    }
    /// <p> Lookout for Equipment will return all the inference events with an end time equal to or greater than the start time given.</p>
    pub fn set_interval_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.interval_start_time = input;
        self
    }
    /// <p>Returns all the inference events with an end start time equal to or greater than less than the end time given</p>
    pub fn interval_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.interval_end_time = Some(input);
        self
    }
    /// <p>Returns all the inference events with an end start time equal to or greater than less than the end time given</p>
    pub fn set_interval_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.interval_end_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ListInferenceEventsInput`](crate::operation::list_inference_events::ListInferenceEventsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_inference_events::ListInferenceEventsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_inference_events::ListInferenceEventsInput {
                next_token: self.next_token,
                max_results: self.max_results,
                inference_scheduler_name: self.inference_scheduler_name,
                interval_start_time: self.interval_start_time,
                interval_end_time: self.interval_end_time,
            },
        )
    }
}
