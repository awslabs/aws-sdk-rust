// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p> Specifies configuration information for the output results from for the inference,
/// including KMS key ID and output S3 location. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InferenceOutputConfiguration {
    /// <p> Specifies configuration information for the output results from for the inference,
    /// output S3 location. </p>
    pub s3_output_configuration: std::option::Option<crate::model::InferenceS3OutputConfiguration>,
    /// <p>The ID number for the AWS KMS key used to encrypt the inference output. </p>
    pub kms_key_id: std::option::Option<std::string::String>,
}
impl InferenceOutputConfiguration {
    /// <p> Specifies configuration information for the output results from for the inference,
    /// output S3 location. </p>
    pub fn s3_output_configuration(
        &self,
    ) -> std::option::Option<&crate::model::InferenceS3OutputConfiguration> {
        self.s3_output_configuration.as_ref()
    }
    /// <p>The ID number for the AWS KMS key used to encrypt the inference output. </p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl std::fmt::Debug for InferenceOutputConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InferenceOutputConfiguration");
        formatter.field("s3_output_configuration", &self.s3_output_configuration);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.finish()
    }
}
/// See [`InferenceOutputConfiguration`](crate::model::InferenceOutputConfiguration)
pub mod inference_output_configuration {
    /// A builder for [`InferenceOutputConfiguration`](crate::model::InferenceOutputConfiguration)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) s3_output_configuration:
            std::option::Option<crate::model::InferenceS3OutputConfiguration>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p> Specifies configuration information for the output results from for the inference,
        /// output S3 location. </p>
        pub fn s3_output_configuration(
            mut self,
            input: crate::model::InferenceS3OutputConfiguration,
        ) -> Self {
            self.s3_output_configuration = Some(input);
            self
        }
        /// <p> Specifies configuration information for the output results from for the inference,
        /// output S3 location. </p>
        pub fn set_s3_output_configuration(
            mut self,
            input: std::option::Option<crate::model::InferenceS3OutputConfiguration>,
        ) -> Self {
            self.s3_output_configuration = input;
            self
        }
        /// <p>The ID number for the AWS KMS key used to encrypt the inference output. </p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        /// <p>The ID number for the AWS KMS key used to encrypt the inference output. </p>
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// Consumes the builder and constructs a [`InferenceOutputConfiguration`](crate::model::InferenceOutputConfiguration)
        pub fn build(self) -> crate::model::InferenceOutputConfiguration {
            crate::model::InferenceOutputConfiguration {
                s3_output_configuration: self.s3_output_configuration,
                kms_key_id: self.kms_key_id,
            }
        }
    }
}
impl InferenceOutputConfiguration {
    /// Creates a new builder-style object to manufacture [`InferenceOutputConfiguration`](crate::model::InferenceOutputConfiguration)
    pub fn builder() -> crate::model::inference_output_configuration::Builder {
        crate::model::inference_output_configuration::Builder::default()
    }
}

/// <p> Specifies configuration information for the output results from the inference,
/// including output S3 location. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InferenceS3OutputConfiguration {
    /// <p> The bucket containing the output results from the inference </p>
    pub bucket: std::option::Option<std::string::String>,
    /// <p> The prefix for the S3 bucket used for the output results from the inference. </p>
    pub prefix: std::option::Option<std::string::String>,
}
impl InferenceS3OutputConfiguration {
    /// <p> The bucket containing the output results from the inference </p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p> The prefix for the S3 bucket used for the output results from the inference. </p>
    pub fn prefix(&self) -> std::option::Option<&str> {
        self.prefix.as_deref()
    }
}
impl std::fmt::Debug for InferenceS3OutputConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InferenceS3OutputConfiguration");
        formatter.field("bucket", &self.bucket);
        formatter.field("prefix", &self.prefix);
        formatter.finish()
    }
}
/// See [`InferenceS3OutputConfiguration`](crate::model::InferenceS3OutputConfiguration)
pub mod inference_s3_output_configuration {
    /// A builder for [`InferenceS3OutputConfiguration`](crate::model::InferenceS3OutputConfiguration)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bucket: std::option::Option<std::string::String>,
        pub(crate) prefix: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p> The bucket containing the output results from the inference </p>
        pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.bucket = Some(input.into());
            self
        }
        /// <p> The bucket containing the output results from the inference </p>
        pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.bucket = input;
            self
        }
        /// <p> The prefix for the S3 bucket used for the output results from the inference. </p>
        pub fn prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.prefix = Some(input.into());
            self
        }
        /// <p> The prefix for the S3 bucket used for the output results from the inference. </p>
        pub fn set_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.prefix = input;
            self
        }
        /// Consumes the builder and constructs a [`InferenceS3OutputConfiguration`](crate::model::InferenceS3OutputConfiguration)
        pub fn build(self) -> crate::model::InferenceS3OutputConfiguration {
            crate::model::InferenceS3OutputConfiguration {
                bucket: self.bucket,
                prefix: self.prefix,
            }
        }
    }
}
impl InferenceS3OutputConfiguration {
    /// Creates a new builder-style object to manufacture [`InferenceS3OutputConfiguration`](crate::model::InferenceS3OutputConfiguration)
    pub fn builder() -> crate::model::inference_s3_output_configuration::Builder {
        crate::model::inference_s3_output_configuration::Builder::default()
    }
}

/// <p>Specifies configuration information for the input data for the inference, including S3
/// location of input data.. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InferenceInputConfiguration {
    /// <p> Specifies configuration information for the input data for the inference, including S3
    /// location of input data.. </p>
    pub s3_input_configuration: std::option::Option<crate::model::InferenceS3InputConfiguration>,
    /// <p>Indicates the difference between your time zone and Greenwich Mean Time (GMT). </p>
    pub input_time_zone_offset: std::option::Option<std::string::String>,
    /// <p>Specifies configuration information for the input data for the inference, including
    /// timestamp format and delimiter. </p>
    pub inference_input_name_configuration:
        std::option::Option<crate::model::InferenceInputNameConfiguration>,
}
impl InferenceInputConfiguration {
    /// <p> Specifies configuration information for the input data for the inference, including S3
    /// location of input data.. </p>
    pub fn s3_input_configuration(
        &self,
    ) -> std::option::Option<&crate::model::InferenceS3InputConfiguration> {
        self.s3_input_configuration.as_ref()
    }
    /// <p>Indicates the difference between your time zone and Greenwich Mean Time (GMT). </p>
    pub fn input_time_zone_offset(&self) -> std::option::Option<&str> {
        self.input_time_zone_offset.as_deref()
    }
    /// <p>Specifies configuration information for the input data for the inference, including
    /// timestamp format and delimiter. </p>
    pub fn inference_input_name_configuration(
        &self,
    ) -> std::option::Option<&crate::model::InferenceInputNameConfiguration> {
        self.inference_input_name_configuration.as_ref()
    }
}
impl std::fmt::Debug for InferenceInputConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InferenceInputConfiguration");
        formatter.field("s3_input_configuration", &self.s3_input_configuration);
        formatter.field("input_time_zone_offset", &self.input_time_zone_offset);
        formatter.field(
            "inference_input_name_configuration",
            &self.inference_input_name_configuration,
        );
        formatter.finish()
    }
}
/// See [`InferenceInputConfiguration`](crate::model::InferenceInputConfiguration)
pub mod inference_input_configuration {
    /// A builder for [`InferenceInputConfiguration`](crate::model::InferenceInputConfiguration)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) s3_input_configuration:
            std::option::Option<crate::model::InferenceS3InputConfiguration>,
        pub(crate) input_time_zone_offset: std::option::Option<std::string::String>,
        pub(crate) inference_input_name_configuration:
            std::option::Option<crate::model::InferenceInputNameConfiguration>,
    }
    impl Builder {
        /// <p> Specifies configuration information for the input data for the inference, including S3
        /// location of input data.. </p>
        pub fn s3_input_configuration(
            mut self,
            input: crate::model::InferenceS3InputConfiguration,
        ) -> Self {
            self.s3_input_configuration = Some(input);
            self
        }
        /// <p> Specifies configuration information for the input data for the inference, including S3
        /// location of input data.. </p>
        pub fn set_s3_input_configuration(
            mut self,
            input: std::option::Option<crate::model::InferenceS3InputConfiguration>,
        ) -> Self {
            self.s3_input_configuration = input;
            self
        }
        /// <p>Indicates the difference between your time zone and Greenwich Mean Time (GMT). </p>
        pub fn input_time_zone_offset(mut self, input: impl Into<std::string::String>) -> Self {
            self.input_time_zone_offset = Some(input.into());
            self
        }
        /// <p>Indicates the difference between your time zone and Greenwich Mean Time (GMT). </p>
        pub fn set_input_time_zone_offset(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.input_time_zone_offset = input;
            self
        }
        /// <p>Specifies configuration information for the input data for the inference, including
        /// timestamp format and delimiter. </p>
        pub fn inference_input_name_configuration(
            mut self,
            input: crate::model::InferenceInputNameConfiguration,
        ) -> Self {
            self.inference_input_name_configuration = Some(input);
            self
        }
        /// <p>Specifies configuration information for the input data for the inference, including
        /// timestamp format and delimiter. </p>
        pub fn set_inference_input_name_configuration(
            mut self,
            input: std::option::Option<crate::model::InferenceInputNameConfiguration>,
        ) -> Self {
            self.inference_input_name_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`InferenceInputConfiguration`](crate::model::InferenceInputConfiguration)
        pub fn build(self) -> crate::model::InferenceInputConfiguration {
            crate::model::InferenceInputConfiguration {
                s3_input_configuration: self.s3_input_configuration,
                input_time_zone_offset: self.input_time_zone_offset,
                inference_input_name_configuration: self.inference_input_name_configuration,
            }
        }
    }
}
impl InferenceInputConfiguration {
    /// Creates a new builder-style object to manufacture [`InferenceInputConfiguration`](crate::model::InferenceInputConfiguration)
    pub fn builder() -> crate::model::inference_input_configuration::Builder {
        crate::model::inference_input_configuration::Builder::default()
    }
}

/// <p>Specifies configuration information for the input data for the inference, including
/// timestamp format and delimiter. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InferenceInputNameConfiguration {
    /// <p>The format of the timestamp, whether Epoch time, or standard, with or without hyphens
    /// (-). </p>
    pub timestamp_format: std::option::Option<std::string::String>,
    /// <p>Indicates the delimiter character used between items in the data. </p>
    pub component_timestamp_delimiter: std::option::Option<std::string::String>,
}
impl InferenceInputNameConfiguration {
    /// <p>The format of the timestamp, whether Epoch time, or standard, with or without hyphens
    /// (-). </p>
    pub fn timestamp_format(&self) -> std::option::Option<&str> {
        self.timestamp_format.as_deref()
    }
    /// <p>Indicates the delimiter character used between items in the data. </p>
    pub fn component_timestamp_delimiter(&self) -> std::option::Option<&str> {
        self.component_timestamp_delimiter.as_deref()
    }
}
impl std::fmt::Debug for InferenceInputNameConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InferenceInputNameConfiguration");
        formatter.field("timestamp_format", &self.timestamp_format);
        formatter.field(
            "component_timestamp_delimiter",
            &self.component_timestamp_delimiter,
        );
        formatter.finish()
    }
}
/// See [`InferenceInputNameConfiguration`](crate::model::InferenceInputNameConfiguration)
pub mod inference_input_name_configuration {
    /// A builder for [`InferenceInputNameConfiguration`](crate::model::InferenceInputNameConfiguration)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) timestamp_format: std::option::Option<std::string::String>,
        pub(crate) component_timestamp_delimiter: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The format of the timestamp, whether Epoch time, or standard, with or without hyphens
        /// (-). </p>
        pub fn timestamp_format(mut self, input: impl Into<std::string::String>) -> Self {
            self.timestamp_format = Some(input.into());
            self
        }
        /// <p>The format of the timestamp, whether Epoch time, or standard, with or without hyphens
        /// (-). </p>
        pub fn set_timestamp_format(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.timestamp_format = input;
            self
        }
        /// <p>Indicates the delimiter character used between items in the data. </p>
        pub fn component_timestamp_delimiter(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.component_timestamp_delimiter = Some(input.into());
            self
        }
        /// <p>Indicates the delimiter character used between items in the data. </p>
        pub fn set_component_timestamp_delimiter(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.component_timestamp_delimiter = input;
            self
        }
        /// Consumes the builder and constructs a [`InferenceInputNameConfiguration`](crate::model::InferenceInputNameConfiguration)
        pub fn build(self) -> crate::model::InferenceInputNameConfiguration {
            crate::model::InferenceInputNameConfiguration {
                timestamp_format: self.timestamp_format,
                component_timestamp_delimiter: self.component_timestamp_delimiter,
            }
        }
    }
}
impl InferenceInputNameConfiguration {
    /// Creates a new builder-style object to manufacture [`InferenceInputNameConfiguration`](crate::model::InferenceInputNameConfiguration)
    pub fn builder() -> crate::model::inference_input_name_configuration::Builder {
        crate::model::inference_input_name_configuration::Builder::default()
    }
}

/// <p> Specifies configuration information for the input data for the inference, including
/// input data S3 location. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InferenceS3InputConfiguration {
    /// <p>The bucket containing the input dataset for the inference. </p>
    pub bucket: std::option::Option<std::string::String>,
    /// <p>The prefix for the S3 bucket used for the input data for the inference. </p>
    pub prefix: std::option::Option<std::string::String>,
}
impl InferenceS3InputConfiguration {
    /// <p>The bucket containing the input dataset for the inference. </p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The prefix for the S3 bucket used for the input data for the inference. </p>
    pub fn prefix(&self) -> std::option::Option<&str> {
        self.prefix.as_deref()
    }
}
impl std::fmt::Debug for InferenceS3InputConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InferenceS3InputConfiguration");
        formatter.field("bucket", &self.bucket);
        formatter.field("prefix", &self.prefix);
        formatter.finish()
    }
}
/// See [`InferenceS3InputConfiguration`](crate::model::InferenceS3InputConfiguration)
pub mod inference_s3_input_configuration {
    /// A builder for [`InferenceS3InputConfiguration`](crate::model::InferenceS3InputConfiguration)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bucket: std::option::Option<std::string::String>,
        pub(crate) prefix: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The bucket containing the input dataset for the inference. </p>
        pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.bucket = Some(input.into());
            self
        }
        /// <p>The bucket containing the input dataset for the inference. </p>
        pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.bucket = input;
            self
        }
        /// <p>The prefix for the S3 bucket used for the input data for the inference. </p>
        pub fn prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.prefix = Some(input.into());
            self
        }
        /// <p>The prefix for the S3 bucket used for the input data for the inference. </p>
        pub fn set_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.prefix = input;
            self
        }
        /// Consumes the builder and constructs a [`InferenceS3InputConfiguration`](crate::model::InferenceS3InputConfiguration)
        pub fn build(self) -> crate::model::InferenceS3InputConfiguration {
            crate::model::InferenceS3InputConfiguration {
                bucket: self.bucket,
                prefix: self.prefix,
            }
        }
    }
}
impl InferenceS3InputConfiguration {
    /// Creates a new builder-style object to manufacture [`InferenceS3InputConfiguration`](crate::model::InferenceS3InputConfiguration)
    pub fn builder() -> crate::model::inference_s3_input_configuration::Builder {
        crate::model::inference_s3_input_configuration::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DataUploadFrequency {
    #[allow(missing_docs)] // documentation missing in model
    Pt10M,
    #[allow(missing_docs)] // documentation missing in model
    Pt15M,
    #[allow(missing_docs)] // documentation missing in model
    Pt1H,
    #[allow(missing_docs)] // documentation missing in model
    Pt30M,
    #[allow(missing_docs)] // documentation missing in model
    Pt5M,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for DataUploadFrequency {
    fn from(s: &str) -> Self {
        match s {
            "PT10M" => DataUploadFrequency::Pt10M,
            "PT15M" => DataUploadFrequency::Pt15M,
            "PT1H" => DataUploadFrequency::Pt1H,
            "PT30M" => DataUploadFrequency::Pt30M,
            "PT5M" => DataUploadFrequency::Pt5M,
            other => DataUploadFrequency::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for DataUploadFrequency {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DataUploadFrequency::from(s))
    }
}
impl DataUploadFrequency {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DataUploadFrequency::Pt10M => "PT10M",
            DataUploadFrequency::Pt15M => "PT15M",
            DataUploadFrequency::Pt1H => "PT1H",
            DataUploadFrequency::Pt30M => "PT30M",
            DataUploadFrequency::Pt5M => "PT5M",
            DataUploadFrequency::Unknown(s) => s.as_ref(),
        }
    }
    /// Returns all the `&str` values of the enum members.
    pub fn values() -> &'static [&'static str] {
        &["PT10M", "PT15M", "PT1H", "PT30M", "PT5M"]
    }
}
impl AsRef<str> for DataUploadFrequency {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>A tag is a key-value pair that can be added to a resource as metadata. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Tag {
    /// <p>The key for the specified tag. </p>
    pub key: std::option::Option<std::string::String>,
    /// <p>The value for the specified tag. </p>
    pub value: std::option::Option<std::string::String>,
}
impl Tag {
    /// <p>The key for the specified tag. </p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The value for the specified tag. </p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl std::fmt::Debug for Tag {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Tag");
        formatter.field("key", &self.key);
        formatter.field("value", &self.value);
        formatter.finish()
    }
}
/// See [`Tag`](crate::model::Tag)
pub mod tag {
    /// A builder for [`Tag`](crate::model::Tag)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) key: std::option::Option<std::string::String>,
        pub(crate) value: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The key for the specified tag. </p>
        pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
            self.key = Some(input.into());
            self
        }
        /// <p>The key for the specified tag. </p>
        pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key = input;
            self
        }
        /// <p>The value for the specified tag. </p>
        pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
            self.value = Some(input.into());
            self
        }
        /// <p>The value for the specified tag. </p>
        pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.value = input;
            self
        }
        /// Consumes the builder and constructs a [`Tag`](crate::model::Tag)
        pub fn build(self) -> crate::model::Tag {
            crate::model::Tag {
                key: self.key,
                value: self.value,
            }
        }
    }
}
impl Tag {
    /// Creates a new builder-style object to manufacture [`Tag`](crate::model::Tag)
    pub fn builder() -> crate::model::tag::Builder {
        crate::model::tag::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum InferenceSchedulerStatus {
    #[allow(missing_docs)] // documentation missing in model
    Pending,
    #[allow(missing_docs)] // documentation missing in model
    Running,
    #[allow(missing_docs)] // documentation missing in model
    Stopped,
    #[allow(missing_docs)] // documentation missing in model
    Stopping,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for InferenceSchedulerStatus {
    fn from(s: &str) -> Self {
        match s {
            "PENDING" => InferenceSchedulerStatus::Pending,
            "RUNNING" => InferenceSchedulerStatus::Running,
            "STOPPED" => InferenceSchedulerStatus::Stopped,
            "STOPPING" => InferenceSchedulerStatus::Stopping,
            other => InferenceSchedulerStatus::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for InferenceSchedulerStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(InferenceSchedulerStatus::from(s))
    }
}
impl InferenceSchedulerStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            InferenceSchedulerStatus::Pending => "PENDING",
            InferenceSchedulerStatus::Running => "RUNNING",
            InferenceSchedulerStatus::Stopped => "STOPPED",
            InferenceSchedulerStatus::Stopping => "STOPPING",
            InferenceSchedulerStatus::Unknown(s) => s.as_ref(),
        }
    }
    /// Returns all the `&str` values of the enum members.
    pub fn values() -> &'static [&'static str] {
        &["PENDING", "RUNNING", "STOPPED", "STOPPING"]
    }
}
impl AsRef<str> for InferenceSchedulerStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum IngestionJobStatus {
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    InProgress,
    #[allow(missing_docs)] // documentation missing in model
    Success,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for IngestionJobStatus {
    fn from(s: &str) -> Self {
        match s {
            "FAILED" => IngestionJobStatus::Failed,
            "IN_PROGRESS" => IngestionJobStatus::InProgress,
            "SUCCESS" => IngestionJobStatus::Success,
            other => IngestionJobStatus::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for IngestionJobStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(IngestionJobStatus::from(s))
    }
}
impl IngestionJobStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            IngestionJobStatus::Failed => "FAILED",
            IngestionJobStatus::InProgress => "IN_PROGRESS",
            IngestionJobStatus::Success => "SUCCESS",
            IngestionJobStatus::Unknown(s) => s.as_ref(),
        }
    }
    /// Returns all the `&str` values of the enum members.
    pub fn values() -> &'static [&'static str] {
        &["FAILED", "IN_PROGRESS", "SUCCESS"]
    }
}
impl AsRef<str> for IngestionJobStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p> Specifies configuration information for the input data for the data ingestion job,
/// including input data S3 location. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IngestionInputConfiguration {
    /// <p>The location information for the S3 bucket used for input data for the data ingestion.
    /// </p>
    pub s3_input_configuration: std::option::Option<crate::model::IngestionS3InputConfiguration>,
}
impl IngestionInputConfiguration {
    /// <p>The location information for the S3 bucket used for input data for the data ingestion.
    /// </p>
    pub fn s3_input_configuration(
        &self,
    ) -> std::option::Option<&crate::model::IngestionS3InputConfiguration> {
        self.s3_input_configuration.as_ref()
    }
}
impl std::fmt::Debug for IngestionInputConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("IngestionInputConfiguration");
        formatter.field("s3_input_configuration", &self.s3_input_configuration);
        formatter.finish()
    }
}
/// See [`IngestionInputConfiguration`](crate::model::IngestionInputConfiguration)
pub mod ingestion_input_configuration {
    /// A builder for [`IngestionInputConfiguration`](crate::model::IngestionInputConfiguration)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) s3_input_configuration:
            std::option::Option<crate::model::IngestionS3InputConfiguration>,
    }
    impl Builder {
        /// <p>The location information for the S3 bucket used for input data for the data ingestion.
        /// </p>
        pub fn s3_input_configuration(
            mut self,
            input: crate::model::IngestionS3InputConfiguration,
        ) -> Self {
            self.s3_input_configuration = Some(input);
            self
        }
        /// <p>The location information for the S3 bucket used for input data for the data ingestion.
        /// </p>
        pub fn set_s3_input_configuration(
            mut self,
            input: std::option::Option<crate::model::IngestionS3InputConfiguration>,
        ) -> Self {
            self.s3_input_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`IngestionInputConfiguration`](crate::model::IngestionInputConfiguration)
        pub fn build(self) -> crate::model::IngestionInputConfiguration {
            crate::model::IngestionInputConfiguration {
                s3_input_configuration: self.s3_input_configuration,
            }
        }
    }
}
impl IngestionInputConfiguration {
    /// Creates a new builder-style object to manufacture [`IngestionInputConfiguration`](crate::model::IngestionInputConfiguration)
    pub fn builder() -> crate::model::ingestion_input_configuration::Builder {
        crate::model::ingestion_input_configuration::Builder::default()
    }
}

/// <p> Specifies S3 configuration information for the input data for the data ingestion job.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IngestionS3InputConfiguration {
    /// <p>The name of the S3 bucket used for the input data for the data ingestion. </p>
    pub bucket: std::option::Option<std::string::String>,
    /// <p>The prefix for the S3 location being used for the input data for the data ingestion.
    /// </p>
    pub prefix: std::option::Option<std::string::String>,
}
impl IngestionS3InputConfiguration {
    /// <p>The name of the S3 bucket used for the input data for the data ingestion. </p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The prefix for the S3 location being used for the input data for the data ingestion.
    /// </p>
    pub fn prefix(&self) -> std::option::Option<&str> {
        self.prefix.as_deref()
    }
}
impl std::fmt::Debug for IngestionS3InputConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("IngestionS3InputConfiguration");
        formatter.field("bucket", &self.bucket);
        formatter.field("prefix", &self.prefix);
        formatter.finish()
    }
}
/// See [`IngestionS3InputConfiguration`](crate::model::IngestionS3InputConfiguration)
pub mod ingestion_s3_input_configuration {
    /// A builder for [`IngestionS3InputConfiguration`](crate::model::IngestionS3InputConfiguration)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bucket: std::option::Option<std::string::String>,
        pub(crate) prefix: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the S3 bucket used for the input data for the data ingestion. </p>
        pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.bucket = Some(input.into());
            self
        }
        /// <p>The name of the S3 bucket used for the input data for the data ingestion. </p>
        pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.bucket = input;
            self
        }
        /// <p>The prefix for the S3 location being used for the input data for the data ingestion.
        /// </p>
        pub fn prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.prefix = Some(input.into());
            self
        }
        /// <p>The prefix for the S3 location being used for the input data for the data ingestion.
        /// </p>
        pub fn set_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.prefix = input;
            self
        }
        /// Consumes the builder and constructs a [`IngestionS3InputConfiguration`](crate::model::IngestionS3InputConfiguration)
        pub fn build(self) -> crate::model::IngestionS3InputConfiguration {
            crate::model::IngestionS3InputConfiguration {
                bucket: self.bucket,
                prefix: self.prefix,
            }
        }
    }
}
impl IngestionS3InputConfiguration {
    /// Creates a new builder-style object to manufacture [`IngestionS3InputConfiguration`](crate::model::IngestionS3InputConfiguration)
    pub fn builder() -> crate::model::ingestion_s3_input_configuration::Builder {
        crate::model::ingestion_s3_input_configuration::Builder::default()
    }
}

/// <p>Provides information about the specified ML model, including dataset and model names and
/// ARNs, as well as status. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModelSummary {
    /// <p>The name of the ML model. </p>
    pub model_name: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the ML model. </p>
    pub model_arn: std::option::Option<std::string::String>,
    /// <p>The name of the dataset being used for the ML model. </p>
    pub dataset_name: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the dataset used to create the model. </p>
    pub dataset_arn: std::option::Option<std::string::String>,
    /// <p>Indicates the status of the ML model. </p>
    pub status: std::option::Option<crate::model::ModelStatus>,
    /// <p>The time at which the specific model was created. </p>
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl ModelSummary {
    /// <p>The name of the ML model. </p>
    pub fn model_name(&self) -> std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the ML model. </p>
    pub fn model_arn(&self) -> std::option::Option<&str> {
        self.model_arn.as_deref()
    }
    /// <p>The name of the dataset being used for the ML model. </p>
    pub fn dataset_name(&self) -> std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the dataset used to create the model. </p>
    pub fn dataset_arn(&self) -> std::option::Option<&str> {
        self.dataset_arn.as_deref()
    }
    /// <p>Indicates the status of the ML model. </p>
    pub fn status(&self) -> std::option::Option<&crate::model::ModelStatus> {
        self.status.as_ref()
    }
    /// <p>The time at which the specific model was created. </p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl std::fmt::Debug for ModelSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModelSummary");
        formatter.field("model_name", &self.model_name);
        formatter.field("model_arn", &self.model_arn);
        formatter.field("dataset_name", &self.dataset_name);
        formatter.field("dataset_arn", &self.dataset_arn);
        formatter.field("status", &self.status);
        formatter.field("created_at", &self.created_at);
        formatter.finish()
    }
}
/// See [`ModelSummary`](crate::model::ModelSummary)
pub mod model_summary {
    /// A builder for [`ModelSummary`](crate::model::ModelSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) model_name: std::option::Option<std::string::String>,
        pub(crate) model_arn: std::option::Option<std::string::String>,
        pub(crate) dataset_name: std::option::Option<std::string::String>,
        pub(crate) dataset_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ModelStatus>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>The name of the ML model. </p>
        pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_name = Some(input.into());
            self
        }
        /// <p>The name of the ML model. </p>
        pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.model_name = input;
            self
        }
        /// <p> The Amazon Resource Name (ARN) of the ML model. </p>
        pub fn model_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_arn = Some(input.into());
            self
        }
        /// <p> The Amazon Resource Name (ARN) of the ML model. </p>
        pub fn set_model_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.model_arn = input;
            self
        }
        /// <p>The name of the dataset being used for the ML model. </p>
        pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.dataset_name = Some(input.into());
            self
        }
        /// <p>The name of the dataset being used for the ML model. </p>
        pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dataset_name = input;
            self
        }
        /// <p> The Amazon Resource Name (ARN) of the dataset used to create the model. </p>
        pub fn dataset_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.dataset_arn = Some(input.into());
            self
        }
        /// <p> The Amazon Resource Name (ARN) of the dataset used to create the model. </p>
        pub fn set_dataset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dataset_arn = input;
            self
        }
        /// <p>Indicates the status of the ML model. </p>
        pub fn status(mut self, input: crate::model::ModelStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Indicates the status of the ML model. </p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::ModelStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The time at which the specific model was created. </p>
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// <p>The time at which the specific model was created. </p>
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Consumes the builder and constructs a [`ModelSummary`](crate::model::ModelSummary)
        pub fn build(self) -> crate::model::ModelSummary {
            crate::model::ModelSummary {
                model_name: self.model_name,
                model_arn: self.model_arn,
                dataset_name: self.dataset_name,
                dataset_arn: self.dataset_arn,
                status: self.status,
                created_at: self.created_at,
            }
        }
    }
}
impl ModelSummary {
    /// Creates a new builder-style object to manufacture [`ModelSummary`](crate::model::ModelSummary)
    pub fn builder() -> crate::model::model_summary::Builder {
        crate::model::model_summary::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ModelStatus {
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    InProgress,
    #[allow(missing_docs)] // documentation missing in model
    Success,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for ModelStatus {
    fn from(s: &str) -> Self {
        match s {
            "FAILED" => ModelStatus::Failed,
            "IN_PROGRESS" => ModelStatus::InProgress,
            "SUCCESS" => ModelStatus::Success,
            other => ModelStatus::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for ModelStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ModelStatus::from(s))
    }
}
impl ModelStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ModelStatus::Failed => "FAILED",
            ModelStatus::InProgress => "IN_PROGRESS",
            ModelStatus::Success => "SUCCESS",
            ModelStatus::Unknown(s) => s.as_ref(),
        }
    }
    /// Returns all the `&str` values of the enum members.
    pub fn values() -> &'static [&'static str] {
        &["FAILED", "IN_PROGRESS", "SUCCESS"]
    }
}
impl AsRef<str> for ModelStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Contains information about the specific inference scheduler, including data delay
/// offset, model name and ARN, status, and so on. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InferenceSchedulerSummary {
    /// <p>The name of the ML model used for the inference scheduler. </p>
    pub model_name: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the ML model used by the inference scheduler. </p>
    pub model_arn: std::option::Option<std::string::String>,
    /// <p>The name of the inference scheduler. </p>
    pub inference_scheduler_name: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the inference scheduler. </p>
    pub inference_scheduler_arn: std::option::Option<std::string::String>,
    /// <p>Indicates the status of the inference scheduler. </p>
    pub status: std::option::Option<crate::model::InferenceSchedulerStatus>,
    /// <p>A period of time (in minutes) by which inference on the data is delayed after the data
    /// starts. For instance, if an offset delay time of five minutes was selected, inference will
    /// not begin on the data until the first data measurement after the five minute mark. For example, if
    /// five minutes is selected, the inference scheduler will wake up at the configured frequency with the
    /// additional five minute delay time to check the customer S3 bucket. The customer can upload data at
    /// the same frequency and they don't need to stop and restart the scheduler when uploading new data.
    /// </p>
    pub data_delay_offset_in_minutes: std::option::Option<i64>,
    /// <p>How often data is uploaded to the source S3 bucket for the input data. This value is the
    /// length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment
    /// will upload the real-time data to the source bucket once every 5 minutes. This frequency also
    /// determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this
    /// example, it starts once every 5 minutes. </p>
    pub data_upload_frequency: std::option::Option<crate::model::DataUploadFrequency>,
}
impl InferenceSchedulerSummary {
    /// <p>The name of the ML model used for the inference scheduler. </p>
    pub fn model_name(&self) -> std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the ML model used by the inference scheduler. </p>
    pub fn model_arn(&self) -> std::option::Option<&str> {
        self.model_arn.as_deref()
    }
    /// <p>The name of the inference scheduler. </p>
    pub fn inference_scheduler_name(&self) -> std::option::Option<&str> {
        self.inference_scheduler_name.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the inference scheduler. </p>
    pub fn inference_scheduler_arn(&self) -> std::option::Option<&str> {
        self.inference_scheduler_arn.as_deref()
    }
    /// <p>Indicates the status of the inference scheduler. </p>
    pub fn status(&self) -> std::option::Option<&crate::model::InferenceSchedulerStatus> {
        self.status.as_ref()
    }
    /// <p>A period of time (in minutes) by which inference on the data is delayed after the data
    /// starts. For instance, if an offset delay time of five minutes was selected, inference will
    /// not begin on the data until the first data measurement after the five minute mark. For example, if
    /// five minutes is selected, the inference scheduler will wake up at the configured frequency with the
    /// additional five minute delay time to check the customer S3 bucket. The customer can upload data at
    /// the same frequency and they don't need to stop and restart the scheduler when uploading new data.
    /// </p>
    pub fn data_delay_offset_in_minutes(&self) -> std::option::Option<i64> {
        self.data_delay_offset_in_minutes
    }
    /// <p>How often data is uploaded to the source S3 bucket for the input data. This value is the
    /// length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment
    /// will upload the real-time data to the source bucket once every 5 minutes. This frequency also
    /// determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this
    /// example, it starts once every 5 minutes. </p>
    pub fn data_upload_frequency(&self) -> std::option::Option<&crate::model::DataUploadFrequency> {
        self.data_upload_frequency.as_ref()
    }
}
impl std::fmt::Debug for InferenceSchedulerSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InferenceSchedulerSummary");
        formatter.field("model_name", &self.model_name);
        formatter.field("model_arn", &self.model_arn);
        formatter.field("inference_scheduler_name", &self.inference_scheduler_name);
        formatter.field("inference_scheduler_arn", &self.inference_scheduler_arn);
        formatter.field("status", &self.status);
        formatter.field(
            "data_delay_offset_in_minutes",
            &self.data_delay_offset_in_minutes,
        );
        formatter.field("data_upload_frequency", &self.data_upload_frequency);
        formatter.finish()
    }
}
/// See [`InferenceSchedulerSummary`](crate::model::InferenceSchedulerSummary)
pub mod inference_scheduler_summary {
    /// A builder for [`InferenceSchedulerSummary`](crate::model::InferenceSchedulerSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) model_name: std::option::Option<std::string::String>,
        pub(crate) model_arn: std::option::Option<std::string::String>,
        pub(crate) inference_scheduler_name: std::option::Option<std::string::String>,
        pub(crate) inference_scheduler_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::InferenceSchedulerStatus>,
        pub(crate) data_delay_offset_in_minutes: std::option::Option<i64>,
        pub(crate) data_upload_frequency: std::option::Option<crate::model::DataUploadFrequency>,
    }
    impl Builder {
        /// <p>The name of the ML model used for the inference scheduler. </p>
        pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_name = Some(input.into());
            self
        }
        /// <p>The name of the ML model used for the inference scheduler. </p>
        pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.model_name = input;
            self
        }
        /// <p> The Amazon Resource Name (ARN) of the ML model used by the inference scheduler. </p>
        pub fn model_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_arn = Some(input.into());
            self
        }
        /// <p> The Amazon Resource Name (ARN) of the ML model used by the inference scheduler. </p>
        pub fn set_model_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.model_arn = input;
            self
        }
        /// <p>The name of the inference scheduler. </p>
        pub fn inference_scheduler_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inference_scheduler_name = Some(input.into());
            self
        }
        /// <p>The name of the inference scheduler. </p>
        pub fn set_inference_scheduler_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inference_scheduler_name = input;
            self
        }
        /// <p> The Amazon Resource Name (ARN) of the inference scheduler. </p>
        pub fn inference_scheduler_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inference_scheduler_arn = Some(input.into());
            self
        }
        /// <p> The Amazon Resource Name (ARN) of the inference scheduler. </p>
        pub fn set_inference_scheduler_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inference_scheduler_arn = input;
            self
        }
        /// <p>Indicates the status of the inference scheduler. </p>
        pub fn status(mut self, input: crate::model::InferenceSchedulerStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Indicates the status of the inference scheduler. </p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::InferenceSchedulerStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A period of time (in minutes) by which inference on the data is delayed after the data
        /// starts. For instance, if an offset delay time of five minutes was selected, inference will
        /// not begin on the data until the first data measurement after the five minute mark. For example, if
        /// five minutes is selected, the inference scheduler will wake up at the configured frequency with the
        /// additional five minute delay time to check the customer S3 bucket. The customer can upload data at
        /// the same frequency and they don't need to stop and restart the scheduler when uploading new data.
        /// </p>
        pub fn data_delay_offset_in_minutes(mut self, input: i64) -> Self {
            self.data_delay_offset_in_minutes = Some(input);
            self
        }
        /// <p>A period of time (in minutes) by which inference on the data is delayed after the data
        /// starts. For instance, if an offset delay time of five minutes was selected, inference will
        /// not begin on the data until the first data measurement after the five minute mark. For example, if
        /// five minutes is selected, the inference scheduler will wake up at the configured frequency with the
        /// additional five minute delay time to check the customer S3 bucket. The customer can upload data at
        /// the same frequency and they don't need to stop and restart the scheduler when uploading new data.
        /// </p>
        pub fn set_data_delay_offset_in_minutes(mut self, input: std::option::Option<i64>) -> Self {
            self.data_delay_offset_in_minutes = input;
            self
        }
        /// <p>How often data is uploaded to the source S3 bucket for the input data. This value is the
        /// length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment
        /// will upload the real-time data to the source bucket once every 5 minutes. This frequency also
        /// determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this
        /// example, it starts once every 5 minutes. </p>
        pub fn data_upload_frequency(mut self, input: crate::model::DataUploadFrequency) -> Self {
            self.data_upload_frequency = Some(input);
            self
        }
        /// <p>How often data is uploaded to the source S3 bucket for the input data. This value is the
        /// length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment
        /// will upload the real-time data to the source bucket once every 5 minutes. This frequency also
        /// determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this
        /// example, it starts once every 5 minutes. </p>
        pub fn set_data_upload_frequency(
            mut self,
            input: std::option::Option<crate::model::DataUploadFrequency>,
        ) -> Self {
            self.data_upload_frequency = input;
            self
        }
        /// Consumes the builder and constructs a [`InferenceSchedulerSummary`](crate::model::InferenceSchedulerSummary)
        pub fn build(self) -> crate::model::InferenceSchedulerSummary {
            crate::model::InferenceSchedulerSummary {
                model_name: self.model_name,
                model_arn: self.model_arn,
                inference_scheduler_name: self.inference_scheduler_name,
                inference_scheduler_arn: self.inference_scheduler_arn,
                status: self.status,
                data_delay_offset_in_minutes: self.data_delay_offset_in_minutes,
                data_upload_frequency: self.data_upload_frequency,
            }
        }
    }
}
impl InferenceSchedulerSummary {
    /// Creates a new builder-style object to manufacture [`InferenceSchedulerSummary`](crate::model::InferenceSchedulerSummary)
    pub fn builder() -> crate::model::inference_scheduler_summary::Builder {
        crate::model::inference_scheduler_summary::Builder::default()
    }
}

/// <p>Contains information about the specific inference execution, including input and output
/// data configuration, inference scheduling information, status, and so on. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InferenceExecutionSummary {
    /// <p>The name of the ML model being used for the inference execution. </p>
    pub model_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the ML model used for the inference execution. </p>
    pub model_arn: std::option::Option<std::string::String>,
    /// <p>The name of the inference scheduler being used for the inference execution. </p>
    pub inference_scheduler_name: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the inference scheduler being used for the inference
    /// execution. </p>
    pub inference_scheduler_arn: std::option::Option<std::string::String>,
    /// <p>Indicates the start time at which the inference scheduler began the specific inference
    /// execution. </p>
    pub scheduled_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates the time reference in the dataset at which the inference execution began.
    /// </p>
    pub data_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates the time reference in the dataset at which the inference execution stopped.
    /// </p>
    pub data_end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> Specifies configuration information for the input data for the inference scheduler,
    /// including delimiter, format, and dataset location. </p>
    pub data_input_configuration: std::option::Option<crate::model::InferenceInputConfiguration>,
    /// <p> Specifies configuration information for the output results from for the inference
    /// execution, including the output S3 location. </p>
    pub data_output_configuration: std::option::Option<crate::model::InferenceOutputConfiguration>,
    /// <p>
    /// </p>
    pub customer_result_object: std::option::Option<crate::model::S3Object>,
    /// <p>Indicates the status of the inference execution. </p>
    pub status: std::option::Option<crate::model::InferenceExecutionStatus>,
    /// <p> Specifies the reason for failure when an inference execution has failed. </p>
    pub failed_reason: std::option::Option<std::string::String>,
}
impl InferenceExecutionSummary {
    /// <p>The name of the ML model being used for the inference execution. </p>
    pub fn model_name(&self) -> std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the ML model used for the inference execution. </p>
    pub fn model_arn(&self) -> std::option::Option<&str> {
        self.model_arn.as_deref()
    }
    /// <p>The name of the inference scheduler being used for the inference execution. </p>
    pub fn inference_scheduler_name(&self) -> std::option::Option<&str> {
        self.inference_scheduler_name.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the inference scheduler being used for the inference
    /// execution. </p>
    pub fn inference_scheduler_arn(&self) -> std::option::Option<&str> {
        self.inference_scheduler_arn.as_deref()
    }
    /// <p>Indicates the start time at which the inference scheduler began the specific inference
    /// execution. </p>
    pub fn scheduled_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.scheduled_start_time.as_ref()
    }
    /// <p>Indicates the time reference in the dataset at which the inference execution began.
    /// </p>
    pub fn data_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.data_start_time.as_ref()
    }
    /// <p>Indicates the time reference in the dataset at which the inference execution stopped.
    /// </p>
    pub fn data_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.data_end_time.as_ref()
    }
    /// <p> Specifies configuration information for the input data for the inference scheduler,
    /// including delimiter, format, and dataset location. </p>
    pub fn data_input_configuration(
        &self,
    ) -> std::option::Option<&crate::model::InferenceInputConfiguration> {
        self.data_input_configuration.as_ref()
    }
    /// <p> Specifies configuration information for the output results from for the inference
    /// execution, including the output S3 location. </p>
    pub fn data_output_configuration(
        &self,
    ) -> std::option::Option<&crate::model::InferenceOutputConfiguration> {
        self.data_output_configuration.as_ref()
    }
    /// <p>
    /// </p>
    pub fn customer_result_object(&self) -> std::option::Option<&crate::model::S3Object> {
        self.customer_result_object.as_ref()
    }
    /// <p>Indicates the status of the inference execution. </p>
    pub fn status(&self) -> std::option::Option<&crate::model::InferenceExecutionStatus> {
        self.status.as_ref()
    }
    /// <p> Specifies the reason for failure when an inference execution has failed. </p>
    pub fn failed_reason(&self) -> std::option::Option<&str> {
        self.failed_reason.as_deref()
    }
}
impl std::fmt::Debug for InferenceExecutionSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InferenceExecutionSummary");
        formatter.field("model_name", &self.model_name);
        formatter.field("model_arn", &self.model_arn);
        formatter.field("inference_scheduler_name", &self.inference_scheduler_name);
        formatter.field("inference_scheduler_arn", &self.inference_scheduler_arn);
        formatter.field("scheduled_start_time", &self.scheduled_start_time);
        formatter.field("data_start_time", &self.data_start_time);
        formatter.field("data_end_time", &self.data_end_time);
        formatter.field("data_input_configuration", &self.data_input_configuration);
        formatter.field("data_output_configuration", &self.data_output_configuration);
        formatter.field("customer_result_object", &self.customer_result_object);
        formatter.field("status", &self.status);
        formatter.field("failed_reason", &self.failed_reason);
        formatter.finish()
    }
}
/// See [`InferenceExecutionSummary`](crate::model::InferenceExecutionSummary)
pub mod inference_execution_summary {
    /// A builder for [`InferenceExecutionSummary`](crate::model::InferenceExecutionSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) model_name: std::option::Option<std::string::String>,
        pub(crate) model_arn: std::option::Option<std::string::String>,
        pub(crate) inference_scheduler_name: std::option::Option<std::string::String>,
        pub(crate) inference_scheduler_arn: std::option::Option<std::string::String>,
        pub(crate) scheduled_start_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) data_start_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) data_end_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) data_input_configuration:
            std::option::Option<crate::model::InferenceInputConfiguration>,
        pub(crate) data_output_configuration:
            std::option::Option<crate::model::InferenceOutputConfiguration>,
        pub(crate) customer_result_object: std::option::Option<crate::model::S3Object>,
        pub(crate) status: std::option::Option<crate::model::InferenceExecutionStatus>,
        pub(crate) failed_reason: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the ML model being used for the inference execution. </p>
        pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_name = Some(input.into());
            self
        }
        /// <p>The name of the ML model being used for the inference execution. </p>
        pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.model_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the ML model used for the inference execution. </p>
        pub fn model_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the ML model used for the inference execution. </p>
        pub fn set_model_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.model_arn = input;
            self
        }
        /// <p>The name of the inference scheduler being used for the inference execution. </p>
        pub fn inference_scheduler_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inference_scheduler_name = Some(input.into());
            self
        }
        /// <p>The name of the inference scheduler being used for the inference execution. </p>
        pub fn set_inference_scheduler_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inference_scheduler_name = input;
            self
        }
        /// <p> The Amazon Resource Name (ARN) of the inference scheduler being used for the inference
        /// execution. </p>
        pub fn inference_scheduler_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inference_scheduler_arn = Some(input.into());
            self
        }
        /// <p> The Amazon Resource Name (ARN) of the inference scheduler being used for the inference
        /// execution. </p>
        pub fn set_inference_scheduler_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inference_scheduler_arn = input;
            self
        }
        /// <p>Indicates the start time at which the inference scheduler began the specific inference
        /// execution. </p>
        pub fn scheduled_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.scheduled_start_time = Some(input);
            self
        }
        /// <p>Indicates the start time at which the inference scheduler began the specific inference
        /// execution. </p>
        pub fn set_scheduled_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.scheduled_start_time = input;
            self
        }
        /// <p>Indicates the time reference in the dataset at which the inference execution began.
        /// </p>
        pub fn data_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.data_start_time = Some(input);
            self
        }
        /// <p>Indicates the time reference in the dataset at which the inference execution began.
        /// </p>
        pub fn set_data_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.data_start_time = input;
            self
        }
        /// <p>Indicates the time reference in the dataset at which the inference execution stopped.
        /// </p>
        pub fn data_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.data_end_time = Some(input);
            self
        }
        /// <p>Indicates the time reference in the dataset at which the inference execution stopped.
        /// </p>
        pub fn set_data_end_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.data_end_time = input;
            self
        }
        /// <p> Specifies configuration information for the input data for the inference scheduler,
        /// including delimiter, format, and dataset location. </p>
        pub fn data_input_configuration(
            mut self,
            input: crate::model::InferenceInputConfiguration,
        ) -> Self {
            self.data_input_configuration = Some(input);
            self
        }
        /// <p> Specifies configuration information for the input data for the inference scheduler,
        /// including delimiter, format, and dataset location. </p>
        pub fn set_data_input_configuration(
            mut self,
            input: std::option::Option<crate::model::InferenceInputConfiguration>,
        ) -> Self {
            self.data_input_configuration = input;
            self
        }
        /// <p> Specifies configuration information for the output results from for the inference
        /// execution, including the output S3 location. </p>
        pub fn data_output_configuration(
            mut self,
            input: crate::model::InferenceOutputConfiguration,
        ) -> Self {
            self.data_output_configuration = Some(input);
            self
        }
        /// <p> Specifies configuration information for the output results from for the inference
        /// execution, including the output S3 location. </p>
        pub fn set_data_output_configuration(
            mut self,
            input: std::option::Option<crate::model::InferenceOutputConfiguration>,
        ) -> Self {
            self.data_output_configuration = input;
            self
        }
        /// <p>
        /// </p>
        pub fn customer_result_object(mut self, input: crate::model::S3Object) -> Self {
            self.customer_result_object = Some(input);
            self
        }
        /// <p>
        /// </p>
        pub fn set_customer_result_object(
            mut self,
            input: std::option::Option<crate::model::S3Object>,
        ) -> Self {
            self.customer_result_object = input;
            self
        }
        /// <p>Indicates the status of the inference execution. </p>
        pub fn status(mut self, input: crate::model::InferenceExecutionStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Indicates the status of the inference execution. </p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::InferenceExecutionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p> Specifies the reason for failure when an inference execution has failed. </p>
        pub fn failed_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.failed_reason = Some(input.into());
            self
        }
        /// <p> Specifies the reason for failure when an inference execution has failed. </p>
        pub fn set_failed_reason(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.failed_reason = input;
            self
        }
        /// Consumes the builder and constructs a [`InferenceExecutionSummary`](crate::model::InferenceExecutionSummary)
        pub fn build(self) -> crate::model::InferenceExecutionSummary {
            crate::model::InferenceExecutionSummary {
                model_name: self.model_name,
                model_arn: self.model_arn,
                inference_scheduler_name: self.inference_scheduler_name,
                inference_scheduler_arn: self.inference_scheduler_arn,
                scheduled_start_time: self.scheduled_start_time,
                data_start_time: self.data_start_time,
                data_end_time: self.data_end_time,
                data_input_configuration: self.data_input_configuration,
                data_output_configuration: self.data_output_configuration,
                customer_result_object: self.customer_result_object,
                status: self.status,
                failed_reason: self.failed_reason,
            }
        }
    }
}
impl InferenceExecutionSummary {
    /// Creates a new builder-style object to manufacture [`InferenceExecutionSummary`](crate::model::InferenceExecutionSummary)
    pub fn builder() -> crate::model::inference_execution_summary::Builder {
        crate::model::inference_execution_summary::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum InferenceExecutionStatus {
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    InProgress,
    #[allow(missing_docs)] // documentation missing in model
    Success,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for InferenceExecutionStatus {
    fn from(s: &str) -> Self {
        match s {
            "FAILED" => InferenceExecutionStatus::Failed,
            "IN_PROGRESS" => InferenceExecutionStatus::InProgress,
            "SUCCESS" => InferenceExecutionStatus::Success,
            other => InferenceExecutionStatus::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for InferenceExecutionStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(InferenceExecutionStatus::from(s))
    }
}
impl InferenceExecutionStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            InferenceExecutionStatus::Failed => "FAILED",
            InferenceExecutionStatus::InProgress => "IN_PROGRESS",
            InferenceExecutionStatus::Success => "SUCCESS",
            InferenceExecutionStatus::Unknown(s) => s.as_ref(),
        }
    }
    /// Returns all the `&str` values of the enum members.
    pub fn values() -> &'static [&'static str] {
        &["FAILED", "IN_PROGRESS", "SUCCESS"]
    }
}
impl AsRef<str> for InferenceExecutionStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Contains information about an S3 bucket. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct S3Object {
    /// <p>The name of the specific S3 bucket. </p>
    pub bucket: std::option::Option<std::string::String>,
    /// <p>The AWS Key Management Service (AWS KMS) key being used to encrypt the S3 object.
    /// Without this key, data in the bucket is not accessible. </p>
    pub key: std::option::Option<std::string::String>,
}
impl S3Object {
    /// <p>The name of the specific S3 bucket. </p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The AWS Key Management Service (AWS KMS) key being used to encrypt the S3 object.
    /// Without this key, data in the bucket is not accessible. </p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
}
impl std::fmt::Debug for S3Object {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("S3Object");
        formatter.field("bucket", &self.bucket);
        formatter.field("key", &self.key);
        formatter.finish()
    }
}
/// See [`S3Object`](crate::model::S3Object)
pub mod s3_object {
    /// A builder for [`S3Object`](crate::model::S3Object)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bucket: std::option::Option<std::string::String>,
        pub(crate) key: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the specific S3 bucket. </p>
        pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.bucket = Some(input.into());
            self
        }
        /// <p>The name of the specific S3 bucket. </p>
        pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.bucket = input;
            self
        }
        /// <p>The AWS Key Management Service (AWS KMS) key being used to encrypt the S3 object.
        /// Without this key, data in the bucket is not accessible. </p>
        pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
            self.key = Some(input.into());
            self
        }
        /// <p>The AWS Key Management Service (AWS KMS) key being used to encrypt the S3 object.
        /// Without this key, data in the bucket is not accessible. </p>
        pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key = input;
            self
        }
        /// Consumes the builder and constructs a [`S3Object`](crate::model::S3Object)
        pub fn build(self) -> crate::model::S3Object {
            crate::model::S3Object {
                bucket: self.bucket,
                key: self.key,
            }
        }
    }
}
impl S3Object {
    /// Creates a new builder-style object to manufacture [`S3Object`](crate::model::S3Object)
    pub fn builder() -> crate::model::s3_object::Builder {
        crate::model::s3_object::Builder::default()
    }
}

/// <p>Contains information about the specific data set, including name, ARN, and status.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DatasetSummary {
    /// <p>The name of the dataset. </p>
    pub dataset_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the specified dataset. </p>
    pub dataset_arn: std::option::Option<std::string::String>,
    /// <p>Indicates the status of the dataset. </p>
    pub status: std::option::Option<crate::model::DatasetStatus>,
    /// <p>The time at which the dataset was created in Amazon Lookout for Equipment. </p>
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl DatasetSummary {
    /// <p>The name of the dataset. </p>
    pub fn dataset_name(&self) -> std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the specified dataset. </p>
    pub fn dataset_arn(&self) -> std::option::Option<&str> {
        self.dataset_arn.as_deref()
    }
    /// <p>Indicates the status of the dataset. </p>
    pub fn status(&self) -> std::option::Option<&crate::model::DatasetStatus> {
        self.status.as_ref()
    }
    /// <p>The time at which the dataset was created in Amazon Lookout for Equipment. </p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl std::fmt::Debug for DatasetSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DatasetSummary");
        formatter.field("dataset_name", &self.dataset_name);
        formatter.field("dataset_arn", &self.dataset_arn);
        formatter.field("status", &self.status);
        formatter.field("created_at", &self.created_at);
        formatter.finish()
    }
}
/// See [`DatasetSummary`](crate::model::DatasetSummary)
pub mod dataset_summary {
    /// A builder for [`DatasetSummary`](crate::model::DatasetSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dataset_name: std::option::Option<std::string::String>,
        pub(crate) dataset_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::DatasetStatus>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>The name of the dataset. </p>
        pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.dataset_name = Some(input.into());
            self
        }
        /// <p>The name of the dataset. </p>
        pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dataset_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the specified dataset. </p>
        pub fn dataset_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.dataset_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the specified dataset. </p>
        pub fn set_dataset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dataset_arn = input;
            self
        }
        /// <p>Indicates the status of the dataset. </p>
        pub fn status(mut self, input: crate::model::DatasetStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Indicates the status of the dataset. </p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::DatasetStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The time at which the dataset was created in Amazon Lookout for Equipment. </p>
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// <p>The time at which the dataset was created in Amazon Lookout for Equipment. </p>
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Consumes the builder and constructs a [`DatasetSummary`](crate::model::DatasetSummary)
        pub fn build(self) -> crate::model::DatasetSummary {
            crate::model::DatasetSummary {
                dataset_name: self.dataset_name,
                dataset_arn: self.dataset_arn,
                status: self.status,
                created_at: self.created_at,
            }
        }
    }
}
impl DatasetSummary {
    /// Creates a new builder-style object to manufacture [`DatasetSummary`](crate::model::DatasetSummary)
    pub fn builder() -> crate::model::dataset_summary::Builder {
        crate::model::dataset_summary::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DatasetStatus {
    #[allow(missing_docs)] // documentation missing in model
    Active,
    #[allow(missing_docs)] // documentation missing in model
    Created,
    #[allow(missing_docs)] // documentation missing in model
    IngestionInProgress,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for DatasetStatus {
    fn from(s: &str) -> Self {
        match s {
            "ACTIVE" => DatasetStatus::Active,
            "CREATED" => DatasetStatus::Created,
            "INGESTION_IN_PROGRESS" => DatasetStatus::IngestionInProgress,
            other => DatasetStatus::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for DatasetStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DatasetStatus::from(s))
    }
}
impl DatasetStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DatasetStatus::Active => "ACTIVE",
            DatasetStatus::Created => "CREATED",
            DatasetStatus::IngestionInProgress => "INGESTION_IN_PROGRESS",
            DatasetStatus::Unknown(s) => s.as_ref(),
        }
    }
    /// Returns all the `&str` values of the enum members.
    pub fn values() -> &'static [&'static str] {
        &["ACTIVE", "CREATED", "INGESTION_IN_PROGRESS"]
    }
}
impl AsRef<str> for DatasetStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Provides information about a specified data ingestion job, including dataset
/// information, data ingestion configuration, and status. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DataIngestionJobSummary {
    /// <p>Indicates the job ID of the data ingestion job. </p>
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The name of the dataset used for the data ingestion job. </p>
    pub dataset_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the dataset used in the data ingestion job. </p>
    pub dataset_arn: std::option::Option<std::string::String>,
    /// <p> Specifies information for the input data for the data inference job, including data S3
    /// location parameters. </p>
    pub ingestion_input_configuration:
        std::option::Option<crate::model::IngestionInputConfiguration>,
    /// <p>Indicates the status of the data ingestion job. </p>
    pub status: std::option::Option<crate::model::IngestionJobStatus>,
}
impl DataIngestionJobSummary {
    /// <p>Indicates the job ID of the data ingestion job. </p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The name of the dataset used for the data ingestion job. </p>
    pub fn dataset_name(&self) -> std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset used in the data ingestion job. </p>
    pub fn dataset_arn(&self) -> std::option::Option<&str> {
        self.dataset_arn.as_deref()
    }
    /// <p> Specifies information for the input data for the data inference job, including data S3
    /// location parameters. </p>
    pub fn ingestion_input_configuration(
        &self,
    ) -> std::option::Option<&crate::model::IngestionInputConfiguration> {
        self.ingestion_input_configuration.as_ref()
    }
    /// <p>Indicates the status of the data ingestion job. </p>
    pub fn status(&self) -> std::option::Option<&crate::model::IngestionJobStatus> {
        self.status.as_ref()
    }
}
impl std::fmt::Debug for DataIngestionJobSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DataIngestionJobSummary");
        formatter.field("job_id", &self.job_id);
        formatter.field("dataset_name", &self.dataset_name);
        formatter.field("dataset_arn", &self.dataset_arn);
        formatter.field(
            "ingestion_input_configuration",
            &self.ingestion_input_configuration,
        );
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`DataIngestionJobSummary`](crate::model::DataIngestionJobSummary)
pub mod data_ingestion_job_summary {
    /// A builder for [`DataIngestionJobSummary`](crate::model::DataIngestionJobSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_id: std::option::Option<std::string::String>,
        pub(crate) dataset_name: std::option::Option<std::string::String>,
        pub(crate) dataset_arn: std::option::Option<std::string::String>,
        pub(crate) ingestion_input_configuration:
            std::option::Option<crate::model::IngestionInputConfiguration>,
        pub(crate) status: std::option::Option<crate::model::IngestionJobStatus>,
    }
    impl Builder {
        /// <p>Indicates the job ID of the data ingestion job. </p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_id = Some(input.into());
            self
        }
        /// <p>Indicates the job ID of the data ingestion job. </p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_id = input;
            self
        }
        /// <p>The name of the dataset used for the data ingestion job. </p>
        pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.dataset_name = Some(input.into());
            self
        }
        /// <p>The name of the dataset used for the data ingestion job. </p>
        pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dataset_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset used in the data ingestion job. </p>
        pub fn dataset_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.dataset_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the dataset used in the data ingestion job. </p>
        pub fn set_dataset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dataset_arn = input;
            self
        }
        /// <p> Specifies information for the input data for the data inference job, including data S3
        /// location parameters. </p>
        pub fn ingestion_input_configuration(
            mut self,
            input: crate::model::IngestionInputConfiguration,
        ) -> Self {
            self.ingestion_input_configuration = Some(input);
            self
        }
        /// <p> Specifies information for the input data for the data inference job, including data S3
        /// location parameters. </p>
        pub fn set_ingestion_input_configuration(
            mut self,
            input: std::option::Option<crate::model::IngestionInputConfiguration>,
        ) -> Self {
            self.ingestion_input_configuration = input;
            self
        }
        /// <p>Indicates the status of the data ingestion job. </p>
        pub fn status(mut self, input: crate::model::IngestionJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Indicates the status of the data ingestion job. </p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::IngestionJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`DataIngestionJobSummary`](crate::model::DataIngestionJobSummary)
        pub fn build(self) -> crate::model::DataIngestionJobSummary {
            crate::model::DataIngestionJobSummary {
                job_id: self.job_id,
                dataset_name: self.dataset_name,
                dataset_arn: self.dataset_arn,
                ingestion_input_configuration: self.ingestion_input_configuration,
                status: self.status,
            }
        }
    }
}
impl DataIngestionJobSummary {
    /// Creates a new builder-style object to manufacture [`DataIngestionJobSummary`](crate::model::DataIngestionJobSummary)
    pub fn builder() -> crate::model::data_ingestion_job_summary::Builder {
        crate::model::data_ingestion_job_summary::Builder::default()
    }
}

/// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of
/// the data after post processing by
/// Amazon Lookout for Equipment. For example, if you provide data that
/// has been collected at a 1 second level and you want the system to resample
/// the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p>
/// <p>When providing a value for the <code>TargetSamplingRate</code>, you must
/// attach the prefix "PT" to the rate you want.  The value for a 1 second rate
/// is therefore <i>PT1S</i>, the value for a 15 minute rate
/// is <i>PT15M</i>, and the value for a 1 hour rate
/// is <i>PT1H</i>
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DataPreProcessingConfiguration {
    /// <p>The sampling rate of the data after post processing by Amazon Lookout for Equipment.
    /// For example, if you provide data that has been collected at a 1 second level and
    /// you want the system to resample the data at a 1 minute rate before training,
    /// the <code>TargetSamplingRate</code> is 1 minute.</p>
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach
    /// the prefix "PT" to the rate you want.  The value for a 1 second rate is
    /// therefore <i>PT1S</i>, the value for a 15 minute
    /// rate is <i>PT15M</i>, and the value for a 1 hour rate
    /// is <i>PT1H</i>
    /// </p>
    pub target_sampling_rate: std::option::Option<crate::model::TargetSamplingRate>,
}
impl DataPreProcessingConfiguration {
    /// <p>The sampling rate of the data after post processing by Amazon Lookout for Equipment.
    /// For example, if you provide data that has been collected at a 1 second level and
    /// you want the system to resample the data at a 1 minute rate before training,
    /// the <code>TargetSamplingRate</code> is 1 minute.</p>
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach
    /// the prefix "PT" to the rate you want.  The value for a 1 second rate is
    /// therefore <i>PT1S</i>, the value for a 15 minute
    /// rate is <i>PT15M</i>, and the value for a 1 hour rate
    /// is <i>PT1H</i>
    /// </p>
    pub fn target_sampling_rate(&self) -> std::option::Option<&crate::model::TargetSamplingRate> {
        self.target_sampling_rate.as_ref()
    }
}
impl std::fmt::Debug for DataPreProcessingConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DataPreProcessingConfiguration");
        formatter.field("target_sampling_rate", &self.target_sampling_rate);
        formatter.finish()
    }
}
/// See [`DataPreProcessingConfiguration`](crate::model::DataPreProcessingConfiguration)
pub mod data_pre_processing_configuration {
    /// A builder for [`DataPreProcessingConfiguration`](crate::model::DataPreProcessingConfiguration)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) target_sampling_rate: std::option::Option<crate::model::TargetSamplingRate>,
    }
    impl Builder {
        /// <p>The sampling rate of the data after post processing by Amazon Lookout for Equipment.
        /// For example, if you provide data that has been collected at a 1 second level and
        /// you want the system to resample the data at a 1 minute rate before training,
        /// the <code>TargetSamplingRate</code> is 1 minute.</p>
        /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach
        /// the prefix "PT" to the rate you want.  The value for a 1 second rate is
        /// therefore <i>PT1S</i>, the value for a 15 minute
        /// rate is <i>PT15M</i>, and the value for a 1 hour rate
        /// is <i>PT1H</i>
        /// </p>
        pub fn target_sampling_rate(mut self, input: crate::model::TargetSamplingRate) -> Self {
            self.target_sampling_rate = Some(input);
            self
        }
        /// <p>The sampling rate of the data after post processing by Amazon Lookout for Equipment.
        /// For example, if you provide data that has been collected at a 1 second level and
        /// you want the system to resample the data at a 1 minute rate before training,
        /// the <code>TargetSamplingRate</code> is 1 minute.</p>
        /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach
        /// the prefix "PT" to the rate you want.  The value for a 1 second rate is
        /// therefore <i>PT1S</i>, the value for a 15 minute
        /// rate is <i>PT15M</i>, and the value for a 1 hour rate
        /// is <i>PT1H</i>
        /// </p>
        pub fn set_target_sampling_rate(
            mut self,
            input: std::option::Option<crate::model::TargetSamplingRate>,
        ) -> Self {
            self.target_sampling_rate = input;
            self
        }
        /// Consumes the builder and constructs a [`DataPreProcessingConfiguration`](crate::model::DataPreProcessingConfiguration)
        pub fn build(self) -> crate::model::DataPreProcessingConfiguration {
            crate::model::DataPreProcessingConfiguration {
                target_sampling_rate: self.target_sampling_rate,
            }
        }
    }
}
impl DataPreProcessingConfiguration {
    /// Creates a new builder-style object to manufacture [`DataPreProcessingConfiguration`](crate::model::DataPreProcessingConfiguration)
    pub fn builder() -> crate::model::data_pre_processing_configuration::Builder {
        crate::model::data_pre_processing_configuration::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum TargetSamplingRate {
    #[allow(missing_docs)] // documentation missing in model
    Pt10M,
    #[allow(missing_docs)] // documentation missing in model
    Pt10S,
    #[allow(missing_docs)] // documentation missing in model
    Pt15M,
    #[allow(missing_docs)] // documentation missing in model
    Pt15S,
    #[allow(missing_docs)] // documentation missing in model
    Pt1H,
    #[allow(missing_docs)] // documentation missing in model
    Pt1M,
    #[allow(missing_docs)] // documentation missing in model
    Pt1S,
    #[allow(missing_docs)] // documentation missing in model
    Pt30M,
    #[allow(missing_docs)] // documentation missing in model
    Pt30S,
    #[allow(missing_docs)] // documentation missing in model
    Pt5M,
    #[allow(missing_docs)] // documentation missing in model
    Pt5S,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for TargetSamplingRate {
    fn from(s: &str) -> Self {
        match s {
            "PT10M" => TargetSamplingRate::Pt10M,
            "PT10S" => TargetSamplingRate::Pt10S,
            "PT15M" => TargetSamplingRate::Pt15M,
            "PT15S" => TargetSamplingRate::Pt15S,
            "PT1H" => TargetSamplingRate::Pt1H,
            "PT1M" => TargetSamplingRate::Pt1M,
            "PT1S" => TargetSamplingRate::Pt1S,
            "PT30M" => TargetSamplingRate::Pt30M,
            "PT30S" => TargetSamplingRate::Pt30S,
            "PT5M" => TargetSamplingRate::Pt5M,
            "PT5S" => TargetSamplingRate::Pt5S,
            other => TargetSamplingRate::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for TargetSamplingRate {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(TargetSamplingRate::from(s))
    }
}
impl TargetSamplingRate {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            TargetSamplingRate::Pt10M => "PT10M",
            TargetSamplingRate::Pt10S => "PT10S",
            TargetSamplingRate::Pt15M => "PT15M",
            TargetSamplingRate::Pt15S => "PT15S",
            TargetSamplingRate::Pt1H => "PT1H",
            TargetSamplingRate::Pt1M => "PT1M",
            TargetSamplingRate::Pt1S => "PT1S",
            TargetSamplingRate::Pt30M => "PT30M",
            TargetSamplingRate::Pt30S => "PT30S",
            TargetSamplingRate::Pt5M => "PT5M",
            TargetSamplingRate::Pt5S => "PT5S",
            TargetSamplingRate::Unknown(s) => s.as_ref(),
        }
    }
    /// Returns all the `&str` values of the enum members.
    pub fn values() -> &'static [&'static str] {
        &[
            "PT10M", "PT10S", "PT15M", "PT15S", "PT1H", "PT1M", "PT1S", "PT30M", "PT30S", "PT5M",
            "PT5S",
        ]
    }
}
impl AsRef<str> for TargetSamplingRate {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Contains the configuration information for the S3 location being used to hold label
/// data. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LabelsInputConfiguration {
    /// <p>Contains location information for the S3 location being used for label data. </p>
    pub s3_input_configuration: std::option::Option<crate::model::LabelsS3InputConfiguration>,
}
impl LabelsInputConfiguration {
    /// <p>Contains location information for the S3 location being used for label data. </p>
    pub fn s3_input_configuration(
        &self,
    ) -> std::option::Option<&crate::model::LabelsS3InputConfiguration> {
        self.s3_input_configuration.as_ref()
    }
}
impl std::fmt::Debug for LabelsInputConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("LabelsInputConfiguration");
        formatter.field("s3_input_configuration", &self.s3_input_configuration);
        formatter.finish()
    }
}
/// See [`LabelsInputConfiguration`](crate::model::LabelsInputConfiguration)
pub mod labels_input_configuration {
    /// A builder for [`LabelsInputConfiguration`](crate::model::LabelsInputConfiguration)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) s3_input_configuration:
            std::option::Option<crate::model::LabelsS3InputConfiguration>,
    }
    impl Builder {
        /// <p>Contains location information for the S3 location being used for label data. </p>
        pub fn s3_input_configuration(
            mut self,
            input: crate::model::LabelsS3InputConfiguration,
        ) -> Self {
            self.s3_input_configuration = Some(input);
            self
        }
        /// <p>Contains location information for the S3 location being used for label data. </p>
        pub fn set_s3_input_configuration(
            mut self,
            input: std::option::Option<crate::model::LabelsS3InputConfiguration>,
        ) -> Self {
            self.s3_input_configuration = input;
            self
        }
        /// Consumes the builder and constructs a [`LabelsInputConfiguration`](crate::model::LabelsInputConfiguration)
        pub fn build(self) -> crate::model::LabelsInputConfiguration {
            crate::model::LabelsInputConfiguration {
                s3_input_configuration: self.s3_input_configuration,
            }
        }
    }
}
impl LabelsInputConfiguration {
    /// Creates a new builder-style object to manufacture [`LabelsInputConfiguration`](crate::model::LabelsInputConfiguration)
    pub fn builder() -> crate::model::labels_input_configuration::Builder {
        crate::model::labels_input_configuration::Builder::default()
    }
}

/// <p>The location information (prefix and bucket name) for the s3 location being used for
/// label data. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LabelsS3InputConfiguration {
    /// <p>The name of the S3 bucket holding the label data. </p>
    pub bucket: std::option::Option<std::string::String>,
    /// <p> The prefix for the S3 bucket used for the label data. </p>
    pub prefix: std::option::Option<std::string::String>,
}
impl LabelsS3InputConfiguration {
    /// <p>The name of the S3 bucket holding the label data. </p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p> The prefix for the S3 bucket used for the label data. </p>
    pub fn prefix(&self) -> std::option::Option<&str> {
        self.prefix.as_deref()
    }
}
impl std::fmt::Debug for LabelsS3InputConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("LabelsS3InputConfiguration");
        formatter.field("bucket", &self.bucket);
        formatter.field("prefix", &self.prefix);
        formatter.finish()
    }
}
/// See [`LabelsS3InputConfiguration`](crate::model::LabelsS3InputConfiguration)
pub mod labels_s3_input_configuration {
    /// A builder for [`LabelsS3InputConfiguration`](crate::model::LabelsS3InputConfiguration)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bucket: std::option::Option<std::string::String>,
        pub(crate) prefix: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the S3 bucket holding the label data. </p>
        pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.bucket = Some(input.into());
            self
        }
        /// <p>The name of the S3 bucket holding the label data. </p>
        pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.bucket = input;
            self
        }
        /// <p> The prefix for the S3 bucket used for the label data. </p>
        pub fn prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.prefix = Some(input.into());
            self
        }
        /// <p> The prefix for the S3 bucket used for the label data. </p>
        pub fn set_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.prefix = input;
            self
        }
        /// Consumes the builder and constructs a [`LabelsS3InputConfiguration`](crate::model::LabelsS3InputConfiguration)
        pub fn build(self) -> crate::model::LabelsS3InputConfiguration {
            crate::model::LabelsS3InputConfiguration {
                bucket: self.bucket,
                prefix: self.prefix,
            }
        }
    }
}
impl LabelsS3InputConfiguration {
    /// Creates a new builder-style object to manufacture [`LabelsS3InputConfiguration`](crate::model::LabelsS3InputConfiguration)
    pub fn builder() -> crate::model::labels_s3_input_configuration::Builder {
        crate::model::labels_s3_input_configuration::Builder::default()
    }
}

/// <p>Provides information about the data schema used with the given dataset. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DatasetSchema {
    /// <p>
    /// </p>
    pub inline_data_schema: std::option::Option<std::string::String>,
}
impl DatasetSchema {
    /// <p>
    /// </p>
    pub fn inline_data_schema(&self) -> std::option::Option<&str> {
        self.inline_data_schema.as_deref()
    }
}
impl std::fmt::Debug for DatasetSchema {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DatasetSchema");
        formatter.field("inline_data_schema", &self.inline_data_schema);
        formatter.finish()
    }
}
/// See [`DatasetSchema`](crate::model::DatasetSchema)
pub mod dataset_schema {
    /// A builder for [`DatasetSchema`](crate::model::DatasetSchema)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) inline_data_schema: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>
        /// </p>
        pub fn inline_data_schema(mut self, input: impl Into<std::string::String>) -> Self {
            self.inline_data_schema = Some(input.into());
            self
        }
        /// <p>
        /// </p>
        pub fn set_inline_data_schema(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inline_data_schema = input;
            self
        }
        /// Consumes the builder and constructs a [`DatasetSchema`](crate::model::DatasetSchema)
        pub fn build(self) -> crate::model::DatasetSchema {
            crate::model::DatasetSchema {
                inline_data_schema: self.inline_data_schema,
            }
        }
    }
}
impl DatasetSchema {
    /// Creates a new builder-style object to manufacture [`DatasetSchema`](crate::model::DatasetSchema)
    pub fn builder() -> crate::model::dataset_schema::Builder {
        crate::model::dataset_schema::Builder::default()
    }
}
