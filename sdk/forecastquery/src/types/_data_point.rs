// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The forecast value for a specific date. Part of the <code>Forecast</code> object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataPoint {
    /// <p>The timestamp of the specific forecast.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<std::string::String>,
    /// <p>The forecast value.</p>
    #[doc(hidden)]
    pub value: std::option::Option<f64>,
}
impl DataPoint {
    /// <p>The timestamp of the specific forecast.</p>
    pub fn timestamp(&self) -> std::option::Option<&str> {
        self.timestamp.as_deref()
    }
    /// <p>The forecast value.</p>
    pub fn value(&self) -> std::option::Option<f64> {
        self.value
    }
}
impl DataPoint {
    /// Creates a new builder-style object to manufacture [`DataPoint`](crate::types::DataPoint).
    pub fn builder() -> crate::types::builders::DataPointBuilder {
        crate::types::builders::DataPointBuilder::default()
    }
}

/// A builder for [`DataPoint`](crate::types::DataPoint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataPointBuilder {
    pub(crate) timestamp: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<f64>,
}
impl DataPointBuilder {
    /// <p>The timestamp of the specific forecast.</p>
    pub fn timestamp(mut self, input: impl Into<std::string::String>) -> Self {
        self.timestamp = Some(input.into());
        self
    }
    /// <p>The timestamp of the specific forecast.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The forecast value.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The forecast value.</p>
    pub fn set_value(mut self, input: std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`DataPoint`](crate::types::DataPoint).
    pub fn build(self) -> crate::types::DataPoint {
        crate::types::DataPoint {
            timestamp: self.timestamp,
            value: self.value,
        }
    }
}
