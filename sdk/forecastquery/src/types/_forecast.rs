// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a forecast. Returned as part of the <code>QueryForecast</code> response.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Forecast {
    /// <p>The forecast.</p>
    /// <p>The <i>string</i> of the string-to-array map is one of the following values:</p>
    /// <ul>
    /// <li> <p>p10</p> </li>
    /// <li> <p>p50</p> </li>
    /// <li> <p>p90</p> </li>
    /// </ul>
    /// <p>The default setting is <code>["0.1", "0.5", "0.9"]</code>. Use the optional <code>ForecastTypes</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateForecast.html">CreateForecast</a> operation to change the values. The values will vary depending on how this is set, with a minimum of <code>1</code> and a maximum of <code>5.</code> </p>
    #[doc(hidden)]
    pub predictions: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<crate::types::DataPoint>>,
    >,
}
impl Forecast {
    /// <p>The forecast.</p>
    /// <p>The <i>string</i> of the string-to-array map is one of the following values:</p>
    /// <ul>
    /// <li> <p>p10</p> </li>
    /// <li> <p>p50</p> </li>
    /// <li> <p>p90</p> </li>
    /// </ul>
    /// <p>The default setting is <code>["0.1", "0.5", "0.9"]</code>. Use the optional <code>ForecastTypes</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateForecast.html">CreateForecast</a> operation to change the values. The values will vary depending on how this is set, with a minimum of <code>1</code> and a maximum of <code>5.</code> </p>
    pub fn predictions(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<crate::types::DataPoint>>,
    > {
        self.predictions.as_ref()
    }
}
impl Forecast {
    /// Creates a new builder-style object to manufacture [`Forecast`](crate::types::Forecast).
    pub fn builder() -> crate::types::builders::ForecastBuilder {
        crate::types::builders::ForecastBuilder::default()
    }
}

/// A builder for [`Forecast`](crate::types::Forecast).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ForecastBuilder {
    pub(crate) predictions: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<crate::types::DataPoint>>,
    >,
}
impl ForecastBuilder {
    /// Adds a key-value pair to `predictions`.
    ///
    /// To override the contents of this collection use [`set_predictions`](Self::set_predictions).
    ///
    /// <p>The forecast.</p>
    /// <p>The <i>string</i> of the string-to-array map is one of the following values:</p>
    /// <ul>
    /// <li> <p>p10</p> </li>
    /// <li> <p>p50</p> </li>
    /// <li> <p>p90</p> </li>
    /// </ul>
    /// <p>The default setting is <code>["0.1", "0.5", "0.9"]</code>. Use the optional <code>ForecastTypes</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateForecast.html">CreateForecast</a> operation to change the values. The values will vary depending on how this is set, with a minimum of <code>1</code> and a maximum of <code>5.</code> </p>
    pub fn predictions(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<crate::types::DataPoint>,
    ) -> Self {
        let mut hash_map = self.predictions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.predictions = Some(hash_map);
        self
    }
    /// <p>The forecast.</p>
    /// <p>The <i>string</i> of the string-to-array map is one of the following values:</p>
    /// <ul>
    /// <li> <p>p10</p> </li>
    /// <li> <p>p50</p> </li>
    /// <li> <p>p90</p> </li>
    /// </ul>
    /// <p>The default setting is <code>["0.1", "0.5", "0.9"]</code>. Use the optional <code>ForecastTypes</code> parameter of the <a href="https://docs.aws.amazon.com/forecast/latest/dg/API_CreateForecast.html">CreateForecast</a> operation to change the values. The values will vary depending on how this is set, with a minimum of <code>1</code> and a maximum of <code>5.</code> </p>
    pub fn set_predictions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<crate::types::DataPoint>>,
        >,
    ) -> Self {
        self.predictions = input;
        self
    }
    /// Consumes the builder and constructs a [`Forecast`](crate::types::Forecast).
    pub fn build(self) -> crate::types::Forecast {
        crate::types::Forecast {
            predictions: self.predictions,
        }
    }
}
