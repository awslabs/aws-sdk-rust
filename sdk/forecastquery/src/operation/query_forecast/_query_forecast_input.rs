// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueryForecastInput {
    /// <p>The Amazon Resource Name (ARN) of the forecast to query.</p>
    #[doc(hidden)]
    pub forecast_arn: std::option::Option<std::string::String>,
    /// <p>The start date for the forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T08:00:00.</p>
    #[doc(hidden)]
    pub start_date: std::option::Option<std::string::String>,
    /// <p>The end date for the forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T20:00:00. </p>
    #[doc(hidden)]
    pub end_date: std::option::Option<std::string::String>,
    /// <p>The filtering criteria to apply when retrieving the forecast. For example, to get the forecast for <code>client_21</code> in the electricity usage dataset, specify the following:</p>
    /// <p> <code>{"item_id" : "client_21"}</code> </p>
    /// <p>To get the full forecast, use the <a href="https://docs.aws.amazon.com/en_us/forecast/latest/dg/API_CreateForecastExportJob.html">CreateForecastExportJob</a> operation.</p>
    #[doc(hidden)]
    pub filters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl QueryForecastInput {
    /// <p>The Amazon Resource Name (ARN) of the forecast to query.</p>
    pub fn forecast_arn(&self) -> std::option::Option<&str> {
        self.forecast_arn.as_deref()
    }
    /// <p>The start date for the forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T08:00:00.</p>
    pub fn start_date(&self) -> std::option::Option<&str> {
        self.start_date.as_deref()
    }
    /// <p>The end date for the forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T20:00:00. </p>
    pub fn end_date(&self) -> std::option::Option<&str> {
        self.end_date.as_deref()
    }
    /// <p>The filtering criteria to apply when retrieving the forecast. For example, to get the forecast for <code>client_21</code> in the electricity usage dataset, specify the following:</p>
    /// <p> <code>{"item_id" : "client_21"}</code> </p>
    /// <p>To get the full forecast, use the <a href="https://docs.aws.amazon.com/en_us/forecast/latest/dg/API_CreateForecastExportJob.html">CreateForecastExportJob</a> operation.</p>
    pub fn filters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.filters.as_ref()
    }
    /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl QueryForecastInput {
    /// Creates a new builder-style object to manufacture [`QueryForecastInput`](crate::operation::query_forecast::QueryForecastInput).
    pub fn builder() -> crate::operation::query_forecast::builders::QueryForecastInputBuilder {
        crate::operation::query_forecast::builders::QueryForecastInputBuilder::default()
    }
}

/// A builder for [`QueryForecastInput`](crate::operation::query_forecast::QueryForecastInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QueryForecastInputBuilder {
    pub(crate) forecast_arn: std::option::Option<std::string::String>,
    pub(crate) start_date: std::option::Option<std::string::String>,
    pub(crate) end_date: std::option::Option<std::string::String>,
    pub(crate) filters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl QueryForecastInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the forecast to query.</p>
    pub fn forecast_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.forecast_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the forecast to query.</p>
    pub fn set_forecast_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.forecast_arn = input;
        self
    }
    /// <p>The start date for the forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T08:00:00.</p>
    pub fn start_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.start_date = Some(input.into());
        self
    }
    /// <p>The start date for the forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T08:00:00.</p>
    pub fn set_start_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.start_date = input;
        self
    }
    /// <p>The end date for the forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T20:00:00. </p>
    pub fn end_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.end_date = Some(input.into());
        self
    }
    /// <p>The end date for the forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T20:00:00. </p>
    pub fn set_end_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.end_date = input;
        self
    }
    /// Adds a key-value pair to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filtering criteria to apply when retrieving the forecast. For example, to get the forecast for <code>client_21</code> in the electricity usage dataset, specify the following:</p>
    /// <p> <code>{"item_id" : "client_21"}</code> </p>
    /// <p>To get the full forecast, use the <a href="https://docs.aws.amazon.com/en_us/forecast/latest/dg/API_CreateForecastExportJob.html">CreateForecastExportJob</a> operation.</p>
    pub fn filters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.filters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.filters = Some(hash_map);
        self
    }
    /// <p>The filtering criteria to apply when retrieving the forecast. For example, to get the forecast for <code>client_21</code> in the electricity usage dataset, specify the following:</p>
    /// <p> <code>{"item_id" : "client_21"}</code> </p>
    /// <p>To get the full forecast, use the <a href="https://docs.aws.amazon.com/en_us/forecast/latest/dg/API_CreateForecastExportJob.html">CreateForecastExportJob</a> operation.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`QueryForecastInput`](crate::operation::query_forecast::QueryForecastInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::query_forecast::QueryForecastInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::query_forecast::QueryForecastInput {
            forecast_arn: self.forecast_arn,
            start_date: self.start_date,
            end_date: self.end_date,
            filters: self.filters,
            next_token: self.next_token,
        })
    }
}
