// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueryWhatIfForecastOutput {
    /// <p>Provides information about a forecast. Returned as part of the <code>QueryForecast</code> response.</p>
    #[doc(hidden)]
    pub forecast: std::option::Option<crate::model::Forecast>,
    _request_id: Option<String>,
}
impl QueryWhatIfForecastOutput {
    /// <p>Provides information about a forecast. Returned as part of the <code>QueryForecast</code> response.</p>
    pub fn forecast(&self) -> std::option::Option<&crate::model::Forecast> {
        self.forecast.as_ref()
    }
}
impl aws_http::request_id::RequestId for QueryWhatIfForecastOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`QueryWhatIfForecastOutput`](crate::output::QueryWhatIfForecastOutput).
pub mod query_what_if_forecast_output {

    /// A builder for [`QueryWhatIfForecastOutput`](crate::output::QueryWhatIfForecastOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) forecast: std::option::Option<crate::model::Forecast>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides information about a forecast. Returned as part of the <code>QueryForecast</code> response.</p>
        pub fn forecast(mut self, input: crate::model::Forecast) -> Self {
            self.forecast = Some(input);
            self
        }
        /// <p>Provides information about a forecast. Returned as part of the <code>QueryForecast</code> response.</p>
        pub fn set_forecast(mut self, input: std::option::Option<crate::model::Forecast>) -> Self {
            self.forecast = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`QueryWhatIfForecastOutput`](crate::output::QueryWhatIfForecastOutput).
        pub fn build(self) -> crate::output::QueryWhatIfForecastOutput {
            crate::output::QueryWhatIfForecastOutput {
                forecast: self.forecast,
                _request_id: self._request_id,
            }
        }
    }
}
impl QueryWhatIfForecastOutput {
    /// Creates a new builder-style object to manufacture [`QueryWhatIfForecastOutput`](crate::output::QueryWhatIfForecastOutput).
    pub fn builder() -> crate::output::query_what_if_forecast_output::Builder {
        crate::output::query_what_if_forecast_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueryForecastOutput {
    /// <p>The forecast.</p>
    #[doc(hidden)]
    pub forecast: std::option::Option<crate::model::Forecast>,
    _request_id: Option<String>,
}
impl QueryForecastOutput {
    /// <p>The forecast.</p>
    pub fn forecast(&self) -> std::option::Option<&crate::model::Forecast> {
        self.forecast.as_ref()
    }
}
impl aws_http::request_id::RequestId for QueryForecastOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`QueryForecastOutput`](crate::output::QueryForecastOutput).
pub mod query_forecast_output {

    /// A builder for [`QueryForecastOutput`](crate::output::QueryForecastOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) forecast: std::option::Option<crate::model::Forecast>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The forecast.</p>
        pub fn forecast(mut self, input: crate::model::Forecast) -> Self {
            self.forecast = Some(input);
            self
        }
        /// <p>The forecast.</p>
        pub fn set_forecast(mut self, input: std::option::Option<crate::model::Forecast>) -> Self {
            self.forecast = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`QueryForecastOutput`](crate::output::QueryForecastOutput).
        pub fn build(self) -> crate::output::QueryForecastOutput {
            crate::output::QueryForecastOutput {
                forecast: self.forecast,
                _request_id: self._request_id,
            }
        }
    }
}
impl QueryForecastOutput {
    /// Creates a new builder-style object to manufacture [`QueryForecastOutput`](crate::output::QueryForecastOutput).
    pub fn builder() -> crate::output::query_forecast_output::Builder {
        crate::output::query_forecast_output::Builder::default()
    }
}
