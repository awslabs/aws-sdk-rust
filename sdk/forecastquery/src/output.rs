// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct QueryForecastOutput {
    /// <p>The forecast.</p>
    pub forecast: std::option::Option<crate::model::Forecast>,
}
impl std::fmt::Debug for QueryForecastOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("QueryForecastOutput");
        formatter.field("forecast", &self.forecast);
        formatter.finish()
    }
}
/// See [`QueryForecastOutput`](crate::output::QueryForecastOutput)
pub mod query_forecast_output {
    /// A builder for [`QueryForecastOutput`](crate::output::QueryForecastOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) forecast: std::option::Option<crate::model::Forecast>,
    }
    impl Builder {
        /// <p>The forecast.</p>
        pub fn forecast(mut self, input: crate::model::Forecast) -> Self {
            self.forecast = Some(input);
            self
        }
        /// <p>The forecast.</p>
        pub fn set_forecast(mut self, input: std::option::Option<crate::model::Forecast>) -> Self {
            self.forecast = input;
            self
        }
        /// Consumes the builder and constructs a [`QueryForecastOutput`](crate::output::QueryForecastOutput)
        pub fn build(self) -> crate::output::QueryForecastOutput {
            crate::output::QueryForecastOutput {
                forecast: self.forecast,
            }
        }
    }
}
impl QueryForecastOutput {
    /// Creates a new builder-style object to manufacture [`QueryForecastOutput`](crate::output::QueryForecastOutput)
    pub fn builder() -> crate::output::query_forecast_output::Builder {
        crate::output::query_forecast_output::Builder::default()
    }
}
