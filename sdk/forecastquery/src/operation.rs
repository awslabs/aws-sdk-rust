// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `QueryForecast`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`query_forecast`](crate::client::fluent_builders::QueryForecast).
///
/// `ParseStrictResponse` impl for `QueryForecast`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct QueryForecast {
    _private: (),
}
impl QueryForecast {
    /// Creates a new builder-style object to manufacture [`QueryForecastInput`](crate::input::QueryForecastInput).
    pub fn builder() -> crate::input::query_forecast_input::Builder {
        crate::input::query_forecast_input::Builder::default()
    }
    /// Creates a new `QueryForecast` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for QueryForecast {
    type Output =
        std::result::Result<crate::output::QueryForecastOutput, crate::error::QueryForecastError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_query_forecast::de_query_forecast_http_error(response)
        } else {
            crate::protocol_serde::shape_query_forecast::de_query_forecast_http_response(response)
        }
    }
}

/// Operation shape for `QueryWhatIfForecast`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`query_what_if_forecast`](crate::client::fluent_builders::QueryWhatIfForecast).
///
/// `ParseStrictResponse` impl for `QueryWhatIfForecast`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct QueryWhatIfForecast {
    _private: (),
}
impl QueryWhatIfForecast {
    /// Creates a new builder-style object to manufacture [`QueryWhatIfForecastInput`](crate::input::QueryWhatIfForecastInput).
    pub fn builder() -> crate::input::query_what_if_forecast_input::Builder {
        crate::input::query_what_if_forecast_input::Builder::default()
    }
    /// Creates a new `QueryWhatIfForecast` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for QueryWhatIfForecast {
    type Output = std::result::Result<
        crate::output::QueryWhatIfForecastOutput,
        crate::error::QueryWhatIfForecastError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_query_what_if_forecast::de_query_what_if_forecast_http_error(response)
        } else {
            crate::protocol_serde::shape_query_what_if_forecast::de_query_what_if_forecast_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
