// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Retrieves a forecast for a single item, filtered by the supplied criteria.</p>
/// <p>The criteria is a key-value pair. The key is either <code>item_id</code> (or the
/// equivalent non-timestamp, non-target field) from the <code>TARGET_TIME_SERIES</code> dataset,
/// or one of the forecast dimensions specified as part of the <code>FeaturizationConfig</code>
/// object.</p>
/// <p>By default, <code>QueryForecast</code> returns the complete date range for the filtered
/// forecast. You can request a specific date range.</p>
/// <p>To get the full forecast, use the <a href="https://docs.aws.amazon.com/en_us/forecast/latest/dg/API_CreateForecastExportJob.html">CreateForecastExportJob</a> operation.</p>
/// <note>
/// <p>The forecasts generated by Amazon Forecast are in the same timezone as the dataset that was
/// used to create the predictor.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct QueryForecast {
    _private: (),
}
impl QueryForecast {
    /// Creates a new builder-style object to manufacture [`QueryForecastInput`](crate::input::QueryForecastInput)
    pub fn builder() -> crate::input::query_forecast_input::Builder {
        crate::input::query_forecast_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for QueryForecast {
    type Output =
        std::result::Result<crate::output::QueryForecastOutput, crate::error::QueryForecastError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_query_forecast_error(response)
        } else {
            crate::operation_deser::parse_query_forecast_response(response)
        }
    }
}
