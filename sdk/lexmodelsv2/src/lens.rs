// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_aggregated_utterances_output_next_token(
    input: &crate::operation::list_aggregated_utterances::ListAggregatedUtterancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_bot_aliases_output_next_token(
    input: &crate::operation::list_bot_aliases::ListBotAliasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_bot_locales_output_next_token(
    input: &crate::operation::list_bot_locales::ListBotLocalesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_bot_recommendations_output_next_token(
    input: &crate::operation::list_bot_recommendations::ListBotRecommendationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_bot_versions_output_next_token(
    input: &crate::operation::list_bot_versions::ListBotVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_bots_output_next_token(
    input: &crate::operation::list_bots::ListBotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_built_in_intents_output_next_token(
    input: &crate::operation::list_built_in_intents::ListBuiltInIntentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_built_in_slot_types_output_next_token(
    input: &crate::operation::list_built_in_slot_types::ListBuiltInSlotTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_custom_vocabulary_items_output_next_token(
    input: &crate::operation::list_custom_vocabulary_items::ListCustomVocabularyItemsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_exports_output_next_token(
    input: &crate::operation::list_exports::ListExportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_imports_output_next_token(
    input: &crate::operation::list_imports::ListImportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_intents_output_next_token(
    input: &crate::operation::list_intents::ListIntentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_recommended_intents_output_next_token(
    input: &crate::operation::list_recommended_intents::ListRecommendedIntentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_slot_types_output_next_token(
    input: &crate::operation::list_slot_types::ListSlotTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_slots_output_next_token(
    input: &crate::operation::list_slots::ListSlotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
