// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_export::_create_export_output::CreateExportOutputBuilder;

pub use crate::operation::create_export::_create_export_input::CreateExportInputBuilder;

/// Fluent builder constructing a request to `CreateExport`.
///
/// <p>Creates a zip archive containing the contents of a bot or a bot locale. The archive contains a directory structure that contains JSON files that define the bot.</p>
/// <p>You can create an archive that contains the complete definition of a bot, or you can specify that the archive contain only the definition of a single bot locale.</p>
/// <p>For more information about exporting bots, and about the structure of the export archive, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/importing-exporting.html"> Importing and exporting bots </a> </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateExportFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_export::builders::CreateExportInputBuilder,
}
impl CreateExportFluentBuilder {
    /// Creates a new `CreateExport`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_export::CreateExport,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_export::CreateExportError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_export::CreateExportOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_export::CreateExportError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Specifies the type of resource to export, either a bot or a bot locale. You can only specify one type of resource to export.</p>
    pub fn resource_specification(
        mut self,
        input: crate::types::ExportResourceSpecification,
    ) -> Self {
        self.inner = self.inner.resource_specification(input);
        self
    }
    /// <p>Specifies the type of resource to export, either a bot or a bot locale. You can only specify one type of resource to export.</p>
    pub fn set_resource_specification(
        mut self,
        input: std::option::Option<crate::types::ExportResourceSpecification>,
    ) -> Self {
        self.inner = self.inner.set_resource_specification(input);
        self
    }
    /// <p>The file format of the bot or bot locale definition files.</p>
    pub fn file_format(mut self, input: crate::types::ImportExportFileFormat) -> Self {
        self.inner = self.inner.file_format(input);
        self
    }
    /// <p>The file format of the bot or bot locale definition files.</p>
    pub fn set_file_format(
        mut self,
        input: std::option::Option<crate::types::ImportExportFileFormat>,
    ) -> Self {
        self.inner = self.inner.set_file_format(input);
        self
    }
    /// <p>An password to use to encrypt the exported archive. Using a password is optional, but you should encrypt the archive to protect the data in transit between Amazon Lex and your local computer.</p>
    pub fn file_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.file_password(input.into());
        self
    }
    /// <p>An password to use to encrypt the exported archive. Using a password is optional, but you should encrypt the archive to protect the data in transit between Amazon Lex and your local computer.</p>
    pub fn set_file_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_file_password(input);
        self
    }
}
