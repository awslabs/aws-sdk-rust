// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeIntentOutput {
    /// <p>The unique identifier assigned to the intent when it was created.</p>
    pub intent_id: ::std::option::Option<::std::string::String>,
    /// <p>The name specified for the intent.</p>
    pub intent_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the intent.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the built-in intent that this intent is derived from, if any.</p>
    pub parent_intent_signature: ::std::option::Option<::std::string::String>,
    /// <p>User utterances that trigger this intent.</p>
    pub sample_utterances: ::std::option::Option<::std::vec::Vec<crate::types::SampleUtterance>>,
    /// <p>The Lambda function called during each turn of a conversation with the intent.</p>
    pub dialog_code_hook: ::std::option::Option<crate::types::DialogCodeHookSettings>,
    /// <p>The Lambda function called when the intent is complete and ready for fulfillment.</p>
    pub fulfillment_code_hook: ::std::option::Option<crate::types::FulfillmentCodeHookSettings>,
    /// <p>The list that determines the priority that slots should be elicited from the user.</p>
    pub slot_priorities: ::std::option::Option<::std::vec::Vec<crate::types::SlotPriority>>,
    /// <p>Prompts that Amazon Lex sends to the user to confirm completion of an intent.</p>
    pub intent_confirmation_setting: ::std::option::Option<crate::types::IntentConfirmationSetting>,
    /// <p>The response that Amazon Lex sends to when the intent is closed.</p>
    pub intent_closing_setting: ::std::option::Option<crate::types::IntentClosingSetting>,
    /// <p>A list of contexts that must be active for the intent to be considered for sending to the user.</p>
    pub input_contexts: ::std::option::Option<::std::vec::Vec<crate::types::InputContext>>,
    /// <p>A list of contexts that are activated when the intent is fulfilled.</p>
    pub output_contexts: ::std::option::Option<::std::vec::Vec<crate::types::OutputContext>>,
    /// <p>Configuration information required to use the <code>AMAZON.KendraSearchIntent</code> intent.</p>
    pub kendra_configuration: ::std::option::Option<crate::types::KendraConfiguration>,
    /// <p>The identifier of the bot associated with the intent.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the bot associated with the intent.</p>
    pub bot_version: ::std::option::Option<::std::string::String>,
    /// <p>The language and locale specified for the intent.</p>
    pub locale_id: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp of the date and time that the intent was created.</p>
    pub creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp of the date and time that the intent was last updated.</p>
    pub last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.</p>
    pub initial_response_setting: ::std::option::Option<crate::types::InitialResponseSetting>,
    _request_id: Option<String>,
}
impl DescribeIntentOutput {
    /// <p>The unique identifier assigned to the intent when it was created.</p>
    pub fn intent_id(&self) -> ::std::option::Option<&str> {
        self.intent_id.as_deref()
    }
    /// <p>The name specified for the intent.</p>
    pub fn intent_name(&self) -> ::std::option::Option<&str> {
        self.intent_name.as_deref()
    }
    /// <p>The description of the intent.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The identifier of the built-in intent that this intent is derived from, if any.</p>
    pub fn parent_intent_signature(&self) -> ::std::option::Option<&str> {
        self.parent_intent_signature.as_deref()
    }
    /// <p>User utterances that trigger this intent.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sample_utterances.is_none()`.
    pub fn sample_utterances(&self) -> &[crate::types::SampleUtterance] {
        self.sample_utterances.as_deref().unwrap_or_default()
    }
    /// <p>The Lambda function called during each turn of a conversation with the intent.</p>
    pub fn dialog_code_hook(&self) -> ::std::option::Option<&crate::types::DialogCodeHookSettings> {
        self.dialog_code_hook.as_ref()
    }
    /// <p>The Lambda function called when the intent is complete and ready for fulfillment.</p>
    pub fn fulfillment_code_hook(&self) -> ::std::option::Option<&crate::types::FulfillmentCodeHookSettings> {
        self.fulfillment_code_hook.as_ref()
    }
    /// <p>The list that determines the priority that slots should be elicited from the user.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.slot_priorities.is_none()`.
    pub fn slot_priorities(&self) -> &[crate::types::SlotPriority] {
        self.slot_priorities.as_deref().unwrap_or_default()
    }
    /// <p>Prompts that Amazon Lex sends to the user to confirm completion of an intent.</p>
    pub fn intent_confirmation_setting(&self) -> ::std::option::Option<&crate::types::IntentConfirmationSetting> {
        self.intent_confirmation_setting.as_ref()
    }
    /// <p>The response that Amazon Lex sends to when the intent is closed.</p>
    pub fn intent_closing_setting(&self) -> ::std::option::Option<&crate::types::IntentClosingSetting> {
        self.intent_closing_setting.as_ref()
    }
    /// <p>A list of contexts that must be active for the intent to be considered for sending to the user.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.input_contexts.is_none()`.
    pub fn input_contexts(&self) -> &[crate::types::InputContext] {
        self.input_contexts.as_deref().unwrap_or_default()
    }
    /// <p>A list of contexts that are activated when the intent is fulfilled.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.output_contexts.is_none()`.
    pub fn output_contexts(&self) -> &[crate::types::OutputContext] {
        self.output_contexts.as_deref().unwrap_or_default()
    }
    /// <p>Configuration information required to use the <code>AMAZON.KendraSearchIntent</code> intent.</p>
    pub fn kendra_configuration(&self) -> ::std::option::Option<&crate::types::KendraConfiguration> {
        self.kendra_configuration.as_ref()
    }
    /// <p>The identifier of the bot associated with the intent.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The version of the bot associated with the intent.</p>
    pub fn bot_version(&self) -> ::std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The language and locale specified for the intent.</p>
    pub fn locale_id(&self) -> ::std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p>A timestamp of the date and time that the intent was created.</p>
    pub fn creation_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>A timestamp of the date and time that the intent was last updated.</p>
    pub fn last_updated_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
    /// <p>Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.</p>
    pub fn initial_response_setting(&self) -> ::std::option::Option<&crate::types::InitialResponseSetting> {
        self.initial_response_setting.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeIntentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeIntentOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIntentOutput`](crate::operation::describe_intent::DescribeIntentOutput).
    pub fn builder() -> crate::operation::describe_intent::builders::DescribeIntentOutputBuilder {
        crate::operation::describe_intent::builders::DescribeIntentOutputBuilder::default()
    }
}

/// A builder for [`DescribeIntentOutput`](crate::operation::describe_intent::DescribeIntentOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeIntentOutputBuilder {
    pub(crate) intent_id: ::std::option::Option<::std::string::String>,
    pub(crate) intent_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) parent_intent_signature: ::std::option::Option<::std::string::String>,
    pub(crate) sample_utterances: ::std::option::Option<::std::vec::Vec<crate::types::SampleUtterance>>,
    pub(crate) dialog_code_hook: ::std::option::Option<crate::types::DialogCodeHookSettings>,
    pub(crate) fulfillment_code_hook: ::std::option::Option<crate::types::FulfillmentCodeHookSettings>,
    pub(crate) slot_priorities: ::std::option::Option<::std::vec::Vec<crate::types::SlotPriority>>,
    pub(crate) intent_confirmation_setting: ::std::option::Option<crate::types::IntentConfirmationSetting>,
    pub(crate) intent_closing_setting: ::std::option::Option<crate::types::IntentClosingSetting>,
    pub(crate) input_contexts: ::std::option::Option<::std::vec::Vec<crate::types::InputContext>>,
    pub(crate) output_contexts: ::std::option::Option<::std::vec::Vec<crate::types::OutputContext>>,
    pub(crate) kendra_configuration: ::std::option::Option<crate::types::KendraConfiguration>,
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_version: ::std::option::Option<::std::string::String>,
    pub(crate) locale_id: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) initial_response_setting: ::std::option::Option<crate::types::InitialResponseSetting>,
    _request_id: Option<String>,
}
impl DescribeIntentOutputBuilder {
    /// <p>The unique identifier assigned to the intent when it was created.</p>
    pub fn intent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.intent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier assigned to the intent when it was created.</p>
    pub fn set_intent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.intent_id = input;
        self
    }
    /// <p>The unique identifier assigned to the intent when it was created.</p>
    pub fn get_intent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.intent_id
    }
    /// <p>The name specified for the intent.</p>
    pub fn intent_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.intent_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name specified for the intent.</p>
    pub fn set_intent_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.intent_name = input;
        self
    }
    /// <p>The name specified for the intent.</p>
    pub fn get_intent_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.intent_name
    }
    /// <p>The description of the intent.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the intent.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the intent.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The identifier of the built-in intent that this intent is derived from, if any.</p>
    pub fn parent_intent_signature(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_intent_signature = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the built-in intent that this intent is derived from, if any.</p>
    pub fn set_parent_intent_signature(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_intent_signature = input;
        self
    }
    /// <p>The identifier of the built-in intent that this intent is derived from, if any.</p>
    pub fn get_parent_intent_signature(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_intent_signature
    }
    /// Appends an item to `sample_utterances`.
    ///
    /// To override the contents of this collection use [`set_sample_utterances`](Self::set_sample_utterances).
    ///
    /// <p>User utterances that trigger this intent.</p>
    pub fn sample_utterances(mut self, input: crate::types::SampleUtterance) -> Self {
        let mut v = self.sample_utterances.unwrap_or_default();
        v.push(input);
        self.sample_utterances = ::std::option::Option::Some(v);
        self
    }
    /// <p>User utterances that trigger this intent.</p>
    pub fn set_sample_utterances(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SampleUtterance>>) -> Self {
        self.sample_utterances = input;
        self
    }
    /// <p>User utterances that trigger this intent.</p>
    pub fn get_sample_utterances(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SampleUtterance>> {
        &self.sample_utterances
    }
    /// <p>The Lambda function called during each turn of a conversation with the intent.</p>
    pub fn dialog_code_hook(mut self, input: crate::types::DialogCodeHookSettings) -> Self {
        self.dialog_code_hook = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Lambda function called during each turn of a conversation with the intent.</p>
    pub fn set_dialog_code_hook(mut self, input: ::std::option::Option<crate::types::DialogCodeHookSettings>) -> Self {
        self.dialog_code_hook = input;
        self
    }
    /// <p>The Lambda function called during each turn of a conversation with the intent.</p>
    pub fn get_dialog_code_hook(&self) -> &::std::option::Option<crate::types::DialogCodeHookSettings> {
        &self.dialog_code_hook
    }
    /// <p>The Lambda function called when the intent is complete and ready for fulfillment.</p>
    pub fn fulfillment_code_hook(mut self, input: crate::types::FulfillmentCodeHookSettings) -> Self {
        self.fulfillment_code_hook = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Lambda function called when the intent is complete and ready for fulfillment.</p>
    pub fn set_fulfillment_code_hook(mut self, input: ::std::option::Option<crate::types::FulfillmentCodeHookSettings>) -> Self {
        self.fulfillment_code_hook = input;
        self
    }
    /// <p>The Lambda function called when the intent is complete and ready for fulfillment.</p>
    pub fn get_fulfillment_code_hook(&self) -> &::std::option::Option<crate::types::FulfillmentCodeHookSettings> {
        &self.fulfillment_code_hook
    }
    /// Appends an item to `slot_priorities`.
    ///
    /// To override the contents of this collection use [`set_slot_priorities`](Self::set_slot_priorities).
    ///
    /// <p>The list that determines the priority that slots should be elicited from the user.</p>
    pub fn slot_priorities(mut self, input: crate::types::SlotPriority) -> Self {
        let mut v = self.slot_priorities.unwrap_or_default();
        v.push(input);
        self.slot_priorities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list that determines the priority that slots should be elicited from the user.</p>
    pub fn set_slot_priorities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SlotPriority>>) -> Self {
        self.slot_priorities = input;
        self
    }
    /// <p>The list that determines the priority that slots should be elicited from the user.</p>
    pub fn get_slot_priorities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SlotPriority>> {
        &self.slot_priorities
    }
    /// <p>Prompts that Amazon Lex sends to the user to confirm completion of an intent.</p>
    pub fn intent_confirmation_setting(mut self, input: crate::types::IntentConfirmationSetting) -> Self {
        self.intent_confirmation_setting = ::std::option::Option::Some(input);
        self
    }
    /// <p>Prompts that Amazon Lex sends to the user to confirm completion of an intent.</p>
    pub fn set_intent_confirmation_setting(mut self, input: ::std::option::Option<crate::types::IntentConfirmationSetting>) -> Self {
        self.intent_confirmation_setting = input;
        self
    }
    /// <p>Prompts that Amazon Lex sends to the user to confirm completion of an intent.</p>
    pub fn get_intent_confirmation_setting(&self) -> &::std::option::Option<crate::types::IntentConfirmationSetting> {
        &self.intent_confirmation_setting
    }
    /// <p>The response that Amazon Lex sends to when the intent is closed.</p>
    pub fn intent_closing_setting(mut self, input: crate::types::IntentClosingSetting) -> Self {
        self.intent_closing_setting = ::std::option::Option::Some(input);
        self
    }
    /// <p>The response that Amazon Lex sends to when the intent is closed.</p>
    pub fn set_intent_closing_setting(mut self, input: ::std::option::Option<crate::types::IntentClosingSetting>) -> Self {
        self.intent_closing_setting = input;
        self
    }
    /// <p>The response that Amazon Lex sends to when the intent is closed.</p>
    pub fn get_intent_closing_setting(&self) -> &::std::option::Option<crate::types::IntentClosingSetting> {
        &self.intent_closing_setting
    }
    /// Appends an item to `input_contexts`.
    ///
    /// To override the contents of this collection use [`set_input_contexts`](Self::set_input_contexts).
    ///
    /// <p>A list of contexts that must be active for the intent to be considered for sending to the user.</p>
    pub fn input_contexts(mut self, input: crate::types::InputContext) -> Self {
        let mut v = self.input_contexts.unwrap_or_default();
        v.push(input);
        self.input_contexts = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of contexts that must be active for the intent to be considered for sending to the user.</p>
    pub fn set_input_contexts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputContext>>) -> Self {
        self.input_contexts = input;
        self
    }
    /// <p>A list of contexts that must be active for the intent to be considered for sending to the user.</p>
    pub fn get_input_contexts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputContext>> {
        &self.input_contexts
    }
    /// Appends an item to `output_contexts`.
    ///
    /// To override the contents of this collection use [`set_output_contexts`](Self::set_output_contexts).
    ///
    /// <p>A list of contexts that are activated when the intent is fulfilled.</p>
    pub fn output_contexts(mut self, input: crate::types::OutputContext) -> Self {
        let mut v = self.output_contexts.unwrap_or_default();
        v.push(input);
        self.output_contexts = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of contexts that are activated when the intent is fulfilled.</p>
    pub fn set_output_contexts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OutputContext>>) -> Self {
        self.output_contexts = input;
        self
    }
    /// <p>A list of contexts that are activated when the intent is fulfilled.</p>
    pub fn get_output_contexts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OutputContext>> {
        &self.output_contexts
    }
    /// <p>Configuration information required to use the <code>AMAZON.KendraSearchIntent</code> intent.</p>
    pub fn kendra_configuration(mut self, input: crate::types::KendraConfiguration) -> Self {
        self.kendra_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration information required to use the <code>AMAZON.KendraSearchIntent</code> intent.</p>
    pub fn set_kendra_configuration(mut self, input: ::std::option::Option<crate::types::KendraConfiguration>) -> Self {
        self.kendra_configuration = input;
        self
    }
    /// <p>Configuration information required to use the <code>AMAZON.KendraSearchIntent</code> intent.</p>
    pub fn get_kendra_configuration(&self) -> &::std::option::Option<crate::types::KendraConfiguration> {
        &self.kendra_configuration
    }
    /// <p>The identifier of the bot associated with the intent.</p>
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bot associated with the intent.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The identifier of the bot associated with the intent.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The version of the bot associated with the intent.</p>
    pub fn bot_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the bot associated with the intent.</p>
    pub fn set_bot_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The version of the bot associated with the intent.</p>
    pub fn get_bot_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_version
    }
    /// <p>The language and locale specified for the intent.</p>
    pub fn locale_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language and locale specified for the intent.</p>
    pub fn set_locale_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The language and locale specified for the intent.</p>
    pub fn get_locale_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale_id
    }
    /// <p>A timestamp of the date and time that the intent was created.</p>
    pub fn creation_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp of the date and time that the intent was created.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>A timestamp of the date and time that the intent was created.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date_time
    }
    /// <p>A timestamp of the date and time that the intent was last updated.</p>
    pub fn last_updated_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp of the date and time that the intent was last updated.</p>
    pub fn set_last_updated_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>A timestamp of the date and time that the intent was last updated.</p>
    pub fn get_last_updated_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date_time
    }
    /// <p>Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.</p>
    pub fn initial_response_setting(mut self, input: crate::types::InitialResponseSetting) -> Self {
        self.initial_response_setting = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.</p>
    pub fn set_initial_response_setting(mut self, input: ::std::option::Option<crate::types::InitialResponseSetting>) -> Self {
        self.initial_response_setting = input;
        self
    }
    /// <p>Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.</p>
    pub fn get_initial_response_setting(&self) -> &::std::option::Option<crate::types::InitialResponseSetting> {
        &self.initial_response_setting
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeIntentOutput`](crate::operation::describe_intent::DescribeIntentOutput).
    pub fn build(self) -> crate::operation::describe_intent::DescribeIntentOutput {
        crate::operation::describe_intent::DescribeIntentOutput {
            intent_id: self.intent_id,
            intent_name: self.intent_name,
            description: self.description,
            parent_intent_signature: self.parent_intent_signature,
            sample_utterances: self.sample_utterances,
            dialog_code_hook: self.dialog_code_hook,
            fulfillment_code_hook: self.fulfillment_code_hook,
            slot_priorities: self.slot_priorities,
            intent_confirmation_setting: self.intent_confirmation_setting,
            intent_closing_setting: self.intent_closing_setting,
            input_contexts: self.input_contexts,
            output_contexts: self.output_contexts,
            kendra_configuration: self.kendra_configuration,
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
            creation_date_time: self.creation_date_time,
            last_updated_date_time: self.last_updated_date_time,
            initial_response_setting: self.initial_response_setting,
            _request_id: self._request_id,
        }
    }
}
