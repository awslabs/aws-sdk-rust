// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCustomVocabularyItemsInput {
    /// <p>The identifier of the version of the bot associated with this custom vocabulary.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The bot version of the bot to the list custom vocabulary request.</p>
    pub bot_version: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).</p>
    pub locale_id: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items returned by the list operation.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The nextToken identifier to the list custom vocabulary request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListCustomVocabularyItemsInput {
    /// <p>The identifier of the version of the bot associated with this custom vocabulary.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The bot version of the bot to the list custom vocabulary request.</p>
    pub fn bot_version(&self) -> ::std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).</p>
    pub fn locale_id(&self) -> ::std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p>The maximum number of items returned by the list operation.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The nextToken identifier to the list custom vocabulary request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListCustomVocabularyItemsInput {
    /// Creates a new builder-style object to manufacture [`ListCustomVocabularyItemsInput`](crate::operation::list_custom_vocabulary_items::ListCustomVocabularyItemsInput).
    pub fn builder() -> crate::operation::list_custom_vocabulary_items::builders::ListCustomVocabularyItemsInputBuilder {
        crate::operation::list_custom_vocabulary_items::builders::ListCustomVocabularyItemsInputBuilder::default()
    }
}

/// A builder for [`ListCustomVocabularyItemsInput`](crate::operation::list_custom_vocabulary_items::ListCustomVocabularyItemsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListCustomVocabularyItemsInputBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_version: ::std::option::Option<::std::string::String>,
    pub(crate) locale_id: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListCustomVocabularyItemsInputBuilder {
    /// <p>The identifier of the version of the bot associated with this custom vocabulary.</p>
    /// This field is required.
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the version of the bot associated with this custom vocabulary.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The identifier of the version of the bot associated with this custom vocabulary.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The bot version of the bot to the list custom vocabulary request.</p>
    /// This field is required.
    pub fn bot_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The bot version of the bot to the list custom vocabulary request.</p>
    pub fn set_bot_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The bot version of the bot to the list custom vocabulary request.</p>
    pub fn get_bot_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_version
    }
    /// <p>The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).</p>
    /// This field is required.
    pub fn locale_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).</p>
    pub fn set_locale_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The identifier of the language and locale where this custom vocabulary is used. The string must match one of the supported locales. For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).</p>
    pub fn get_locale_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale_id
    }
    /// <p>The maximum number of items returned by the list operation.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items returned by the list operation.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items returned by the list operation.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The nextToken identifier to the list custom vocabulary request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The nextToken identifier to the list custom vocabulary request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The nextToken identifier to the list custom vocabulary request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListCustomVocabularyItemsInput`](crate::operation::list_custom_vocabulary_items::ListCustomVocabularyItemsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_custom_vocabulary_items::ListCustomVocabularyItemsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_custom_vocabulary_items::ListCustomVocabularyItemsInput {
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
