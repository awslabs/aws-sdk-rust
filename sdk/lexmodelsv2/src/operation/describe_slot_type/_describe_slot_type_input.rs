// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeSlotTypeInput {
    /// <p>The identifier of the slot type.</p>
    pub slot_type_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the bot associated with the slot type.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the bot associated with the slot type.</p>
    pub bot_version: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the language and locale of the slot type to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub locale_id: ::std::option::Option<::std::string::String>,
}
impl DescribeSlotTypeInput {
    /// <p>The identifier of the slot type.</p>
    pub fn slot_type_id(&self) -> ::std::option::Option<&str> {
        self.slot_type_id.as_deref()
    }
    /// <p>The identifier of the bot associated with the slot type.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The version of the bot associated with the slot type.</p>
    pub fn bot_version(&self) -> ::std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The identifier of the language and locale of the slot type to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn locale_id(&self) -> ::std::option::Option<&str> {
        self.locale_id.as_deref()
    }
}
impl DescribeSlotTypeInput {
    /// Creates a new builder-style object to manufacture [`DescribeSlotTypeInput`](crate::operation::describe_slot_type::DescribeSlotTypeInput).
    pub fn builder() -> crate::operation::describe_slot_type::builders::DescribeSlotTypeInputBuilder {
        crate::operation::describe_slot_type::builders::DescribeSlotTypeInputBuilder::default()
    }
}

/// A builder for [`DescribeSlotTypeInput`](crate::operation::describe_slot_type::DescribeSlotTypeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeSlotTypeInputBuilder {
    pub(crate) slot_type_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_version: ::std::option::Option<::std::string::String>,
    pub(crate) locale_id: ::std::option::Option<::std::string::String>,
}
impl DescribeSlotTypeInputBuilder {
    /// <p>The identifier of the slot type.</p>
    /// This field is required.
    pub fn slot_type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slot_type_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the slot type.</p>
    pub fn set_slot_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slot_type_id = input;
        self
    }
    /// <p>The identifier of the slot type.</p>
    pub fn get_slot_type_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slot_type_id
    }
    /// <p>The identifier of the bot associated with the slot type.</p>
    /// This field is required.
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bot associated with the slot type.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The identifier of the bot associated with the slot type.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The version of the bot associated with the slot type.</p>
    /// This field is required.
    pub fn bot_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the bot associated with the slot type.</p>
    pub fn set_bot_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The version of the bot associated with the slot type.</p>
    pub fn get_bot_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_version
    }
    /// <p>The identifier of the language and locale of the slot type to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    /// This field is required.
    pub fn locale_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the language and locale of the slot type to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn set_locale_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The identifier of the language and locale of the slot type to describe. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn get_locale_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale_id
    }
    /// Consumes the builder and constructs a [`DescribeSlotTypeInput`](crate::operation::describe_slot_type::DescribeSlotTypeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_slot_type::DescribeSlotTypeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_slot_type::DescribeSlotTypeInput {
            slot_type_id: self.slot_type_id,
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
        })
    }
}
