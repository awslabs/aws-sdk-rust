// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateExportInput {
    /// <p>The unique identifier Amazon Lex assigned to the export.</p>
    #[doc(hidden)]
    pub export_id: std::option::Option<std::string::String>,
    /// <p>The new password to use to encrypt the export zip archive.</p>
    #[doc(hidden)]
    pub file_password: std::option::Option<std::string::String>,
}
impl UpdateExportInput {
    /// <p>The unique identifier Amazon Lex assigned to the export.</p>
    pub fn export_id(&self) -> std::option::Option<&str> {
        self.export_id.as_deref()
    }
    /// <p>The new password to use to encrypt the export zip archive.</p>
    pub fn file_password(&self) -> std::option::Option<&str> {
        self.file_password.as_deref()
    }
}
impl std::fmt::Debug for UpdateExportInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateExportInput");
        formatter.field("export_id", &self.export_id);
        formatter.field("file_password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateExportInput {
    /// Creates a new builder-style object to manufacture [`UpdateExportInput`](crate::operation::update_export::UpdateExportInput).
    pub fn builder() -> crate::operation::update_export::builders::UpdateExportInputBuilder {
        crate::operation::update_export::builders::UpdateExportInputBuilder::default()
    }
}

/// A builder for [`UpdateExportInput`](crate::operation::update_export::UpdateExportInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateExportInputBuilder {
    pub(crate) export_id: std::option::Option<std::string::String>,
    pub(crate) file_password: std::option::Option<std::string::String>,
}
impl UpdateExportInputBuilder {
    /// <p>The unique identifier Amazon Lex assigned to the export.</p>
    pub fn export_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.export_id = Some(input.into());
        self
    }
    /// <p>The unique identifier Amazon Lex assigned to the export.</p>
    pub fn set_export_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.export_id = input;
        self
    }
    /// <p>The new password to use to encrypt the export zip archive.</p>
    pub fn file_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_password = Some(input.into());
        self
    }
    /// <p>The new password to use to encrypt the export zip archive.</p>
    pub fn set_file_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.file_password = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateExportInput`](crate::operation::update_export::UpdateExportInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_export::UpdateExportInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_export::UpdateExportInput {
            export_id: self.export_id,
            file_password: self.file_password,
        })
    }
}
impl std::fmt::Debug for UpdateExportInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateExportInputBuilder");
        formatter.field("export_id", &self.export_id);
        formatter.field("file_password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
