// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteBotAliasInput {
    /// <p>The unique identifier of the bot alias to delete.</p>
    pub bot_alias_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the bot associated with the alias to delete.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>By default, Amazon Lex checks if any other resource, such as a bot network, is using the bot alias before it is deleted and throws a <code>ResourceInUseException</code> exception if the alias is being used by another resource. Set this parameter to <code>true</code> to skip this check and remove the alias even if it is being used by another resource.</p>
    pub skip_resource_in_use_check: ::std::option::Option<bool>,
}
impl DeleteBotAliasInput {
    /// <p>The unique identifier of the bot alias to delete.</p>
    pub fn bot_alias_id(&self) -> ::std::option::Option<&str> {
        self.bot_alias_id.as_deref()
    }
    /// <p>The unique identifier of the bot associated with the alias to delete.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>By default, Amazon Lex checks if any other resource, such as a bot network, is using the bot alias before it is deleted and throws a <code>ResourceInUseException</code> exception if the alias is being used by another resource. Set this parameter to <code>true</code> to skip this check and remove the alias even if it is being used by another resource.</p>
    pub fn skip_resource_in_use_check(&self) -> ::std::option::Option<bool> {
        self.skip_resource_in_use_check
    }
}
impl DeleteBotAliasInput {
    /// Creates a new builder-style object to manufacture [`DeleteBotAliasInput`](crate::operation::delete_bot_alias::DeleteBotAliasInput).
    pub fn builder() -> crate::operation::delete_bot_alias::builders::DeleteBotAliasInputBuilder {
        crate::operation::delete_bot_alias::builders::DeleteBotAliasInputBuilder::default()
    }
}

/// A builder for [`DeleteBotAliasInput`](crate::operation::delete_bot_alias::DeleteBotAliasInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteBotAliasInputBuilder {
    pub(crate) bot_alias_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) skip_resource_in_use_check: ::std::option::Option<bool>,
}
impl DeleteBotAliasInputBuilder {
    /// <p>The unique identifier of the bot alias to delete.</p>
    /// This field is required.
    pub fn bot_alias_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_alias_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot alias to delete.</p>
    pub fn set_bot_alias_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_alias_id = input;
        self
    }
    /// <p>The unique identifier of the bot alias to delete.</p>
    pub fn get_bot_alias_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_alias_id
    }
    /// <p>The unique identifier of the bot associated with the alias to delete.</p>
    /// This field is required.
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot associated with the alias to delete.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The unique identifier of the bot associated with the alias to delete.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>By default, Amazon Lex checks if any other resource, such as a bot network, is using the bot alias before it is deleted and throws a <code>ResourceInUseException</code> exception if the alias is being used by another resource. Set this parameter to <code>true</code> to skip this check and remove the alias even if it is being used by another resource.</p>
    pub fn skip_resource_in_use_check(mut self, input: bool) -> Self {
        self.skip_resource_in_use_check = ::std::option::Option::Some(input);
        self
    }
    /// <p>By default, Amazon Lex checks if any other resource, such as a bot network, is using the bot alias before it is deleted and throws a <code>ResourceInUseException</code> exception if the alias is being used by another resource. Set this parameter to <code>true</code> to skip this check and remove the alias even if it is being used by another resource.</p>
    pub fn set_skip_resource_in_use_check(mut self, input: ::std::option::Option<bool>) -> Self {
        self.skip_resource_in_use_check = input;
        self
    }
    /// <p>By default, Amazon Lex checks if any other resource, such as a bot network, is using the bot alias before it is deleted and throws a <code>ResourceInUseException</code> exception if the alias is being used by another resource. Set this parameter to <code>true</code> to skip this check and remove the alias even if it is being used by another resource.</p>
    pub fn get_skip_resource_in_use_check(&self) -> &::std::option::Option<bool> {
        &self.skip_resource_in_use_check
    }
    /// Consumes the builder and constructs a [`DeleteBotAliasInput`](crate::operation::delete_bot_alias::DeleteBotAliasInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_bot_alias::DeleteBotAliasInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_bot_alias::DeleteBotAliasInput {
            bot_alias_id: self.bot_alias_id,
            bot_id: self.bot_id,
            skip_resource_in_use_check: self.skip_resource_in_use_check,
        })
    }
}
