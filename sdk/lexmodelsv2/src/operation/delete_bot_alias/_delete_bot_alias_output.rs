// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteBotAliasOutput {
    /// <p>The unique identifier of the bot alias to delete.</p>
    #[doc(hidden)]
    pub bot_alias_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the bot that contains the alias to delete.</p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>The current status of the alias. The status is <code>Deleting</code> while the alias is in the process of being deleted. Once the alias is deleted, it will no longer appear in the list of aliases returned by the <code>ListBotAliases</code> operation.</p>
    #[doc(hidden)]
    pub bot_alias_status: std::option::Option<crate::types::BotAliasStatus>,
    _request_id: Option<String>,
}
impl DeleteBotAliasOutput {
    /// <p>The unique identifier of the bot alias to delete.</p>
    pub fn bot_alias_id(&self) -> std::option::Option<&str> {
        self.bot_alias_id.as_deref()
    }
    /// <p>The unique identifier of the bot that contains the alias to delete.</p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The current status of the alias. The status is <code>Deleting</code> while the alias is in the process of being deleted. Once the alias is deleted, it will no longer appear in the list of aliases returned by the <code>ListBotAliases</code> operation.</p>
    pub fn bot_alias_status(&self) -> std::option::Option<&crate::types::BotAliasStatus> {
        self.bot_alias_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteBotAliasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteBotAliasOutput {
    /// Creates a new builder-style object to manufacture [`DeleteBotAliasOutput`](crate::operation::delete_bot_alias::DeleteBotAliasOutput).
    pub fn builder() -> crate::operation::delete_bot_alias::builders::DeleteBotAliasOutputBuilder {
        crate::operation::delete_bot_alias::builders::DeleteBotAliasOutputBuilder::default()
    }
}

/// A builder for [`DeleteBotAliasOutput`](crate::operation::delete_bot_alias::DeleteBotAliasOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteBotAliasOutputBuilder {
    pub(crate) bot_alias_id: std::option::Option<std::string::String>,
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) bot_alias_status: std::option::Option<crate::types::BotAliasStatus>,
    _request_id: Option<String>,
}
impl DeleteBotAliasOutputBuilder {
    /// <p>The unique identifier of the bot alias to delete.</p>
    pub fn bot_alias_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_alias_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot alias to delete.</p>
    pub fn set_bot_alias_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_alias_id = input;
        self
    }
    /// <p>The unique identifier of the bot that contains the alias to delete.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot that contains the alias to delete.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The current status of the alias. The status is <code>Deleting</code> while the alias is in the process of being deleted. Once the alias is deleted, it will no longer appear in the list of aliases returned by the <code>ListBotAliases</code> operation.</p>
    pub fn bot_alias_status(mut self, input: crate::types::BotAliasStatus) -> Self {
        self.bot_alias_status = Some(input);
        self
    }
    /// <p>The current status of the alias. The status is <code>Deleting</code> while the alias is in the process of being deleted. Once the alias is deleted, it will no longer appear in the list of aliases returned by the <code>ListBotAliases</code> operation.</p>
    pub fn set_bot_alias_status(
        mut self,
        input: std::option::Option<crate::types::BotAliasStatus>,
    ) -> Self {
        self.bot_alias_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteBotAliasOutput`](crate::operation::delete_bot_alias::DeleteBotAliasOutput).
    pub fn build(self) -> crate::operation::delete_bot_alias::DeleteBotAliasOutput {
        crate::operation::delete_bot_alias::DeleteBotAliasOutput {
            bot_alias_id: self.bot_alias_id,
            bot_id: self.bot_id,
            bot_alias_status: self.bot_alias_status,
            _request_id: self._request_id,
        }
    }
}
