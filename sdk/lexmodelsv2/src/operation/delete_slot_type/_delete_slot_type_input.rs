// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSlotTypeInput {
    /// <p>The identifier of the slot type to delete.</p>
    #[doc(hidden)]
    pub slot_type_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the bot associated with the slot type.</p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>The version of the bot associated with the slot type.</p>
    #[doc(hidden)]
    pub bot_version: std::option::Option<std::string::String>,
    /// <p>The identifier of the language and locale that the slot type will be deleted from. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    #[doc(hidden)]
    pub locale_id: std::option::Option<std::string::String>,
    /// <p>By default, the <code>DeleteSlotType</code> operations throws a <code>ResourceInUseException</code> exception if you try to delete a slot type used by a slot. Set the <code>skipResourceInUseCheck</code> parameter to <code>true</code> to skip this check and remove the slot type even if a slot uses it.</p>
    #[doc(hidden)]
    pub skip_resource_in_use_check: bool,
}
impl DeleteSlotTypeInput {
    /// <p>The identifier of the slot type to delete.</p>
    pub fn slot_type_id(&self) -> std::option::Option<&str> {
        self.slot_type_id.as_deref()
    }
    /// <p>The identifier of the bot associated with the slot type.</p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The version of the bot associated with the slot type.</p>
    pub fn bot_version(&self) -> std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The identifier of the language and locale that the slot type will be deleted from. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn locale_id(&self) -> std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p>By default, the <code>DeleteSlotType</code> operations throws a <code>ResourceInUseException</code> exception if you try to delete a slot type used by a slot. Set the <code>skipResourceInUseCheck</code> parameter to <code>true</code> to skip this check and remove the slot type even if a slot uses it.</p>
    pub fn skip_resource_in_use_check(&self) -> bool {
        self.skip_resource_in_use_check
    }
}
impl DeleteSlotTypeInput {
    /// Creates a new builder-style object to manufacture [`DeleteSlotTypeInput`](crate::operation::delete_slot_type::DeleteSlotTypeInput).
    pub fn builder() -> crate::operation::delete_slot_type::builders::DeleteSlotTypeInputBuilder {
        crate::operation::delete_slot_type::builders::DeleteSlotTypeInputBuilder::default()
    }
}

/// A builder for [`DeleteSlotTypeInput`](crate::operation::delete_slot_type::DeleteSlotTypeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteSlotTypeInputBuilder {
    pub(crate) slot_type_id: std::option::Option<std::string::String>,
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) bot_version: std::option::Option<std::string::String>,
    pub(crate) locale_id: std::option::Option<std::string::String>,
    pub(crate) skip_resource_in_use_check: std::option::Option<bool>,
}
impl DeleteSlotTypeInputBuilder {
    /// <p>The identifier of the slot type to delete.</p>
    pub fn slot_type_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.slot_type_id = Some(input.into());
        self
    }
    /// <p>The identifier of the slot type to delete.</p>
    pub fn set_slot_type_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.slot_type_id = input;
        self
    }
    /// <p>The identifier of the bot associated with the slot type.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The identifier of the bot associated with the slot type.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The version of the bot associated with the slot type.</p>
    pub fn bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_version = Some(input.into());
        self
    }
    /// <p>The version of the bot associated with the slot type.</p>
    pub fn set_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The identifier of the language and locale that the slot type will be deleted from. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn locale_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.locale_id = Some(input.into());
        self
    }
    /// <p>The identifier of the language and locale that the slot type will be deleted from. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn set_locale_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>By default, the <code>DeleteSlotType</code> operations throws a <code>ResourceInUseException</code> exception if you try to delete a slot type used by a slot. Set the <code>skipResourceInUseCheck</code> parameter to <code>true</code> to skip this check and remove the slot type even if a slot uses it.</p>
    pub fn skip_resource_in_use_check(mut self, input: bool) -> Self {
        self.skip_resource_in_use_check = Some(input);
        self
    }
    /// <p>By default, the <code>DeleteSlotType</code> operations throws a <code>ResourceInUseException</code> exception if you try to delete a slot type used by a slot. Set the <code>skipResourceInUseCheck</code> parameter to <code>true</code> to skip this check and remove the slot type even if a slot uses it.</p>
    pub fn set_skip_resource_in_use_check(mut self, input: std::option::Option<bool>) -> Self {
        self.skip_resource_in_use_check = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteSlotTypeInput`](crate::operation::delete_slot_type::DeleteSlotTypeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_slot_type::DeleteSlotTypeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_slot_type::DeleteSlotTypeInput {
            slot_type_id: self.slot_type_id,
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
            skip_resource_in_use_check: self.skip_resource_in_use_check.unwrap_or_default(),
        })
    }
}
