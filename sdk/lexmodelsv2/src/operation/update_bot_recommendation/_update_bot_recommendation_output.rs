// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBotRecommendationOutput {
    /// <p>The unique identifier of the bot containing the bot recommendation that has been updated.</p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>The version of the bot containing the bot recommendation that has been updated.</p>
    #[doc(hidden)]
    pub bot_version: std::option::Option<std::string::String>,
    /// <p>The identifier of the language and locale of the bot recommendation to update. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </p>
    #[doc(hidden)]
    pub locale_id: std::option::Option<std::string::String>,
    /// <p>The status of the bot recommendation.</p>
    /// <p>If the status is Failed, then the reasons for the failure are listed in the failureReasons field. </p>
    #[doc(hidden)]
    pub bot_recommendation_status: std::option::Option<crate::types::BotRecommendationStatus>,
    /// <p>The unique identifier of the bot recommendation to be updated.</p>
    #[doc(hidden)]
    pub bot_recommendation_id: std::option::Option<std::string::String>,
    /// <p>A timestamp of the date and time that the bot recommendation was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A timestamp of the date and time that the bot recommendation was last updated.</p>
    #[doc(hidden)]
    pub last_updated_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The object representing the Amazon S3 bucket containing the transcript, as well as the associated metadata.</p>
    #[doc(hidden)]
    pub transcript_source_setting: std::option::Option<crate::types::TranscriptSourceSetting>,
    /// <p>The object representing the passwords that were used to encrypt the data related to the bot recommendation results, as well as the KMS key ARN used to encrypt the associated metadata.</p>
    #[doc(hidden)]
    pub encryption_setting: std::option::Option<crate::types::EncryptionSetting>,
    _request_id: Option<String>,
}
impl UpdateBotRecommendationOutput {
    /// <p>The unique identifier of the bot containing the bot recommendation that has been updated.</p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The version of the bot containing the bot recommendation that has been updated.</p>
    pub fn bot_version(&self) -> std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The identifier of the language and locale of the bot recommendation to update. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </p>
    pub fn locale_id(&self) -> std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p>The status of the bot recommendation.</p>
    /// <p>If the status is Failed, then the reasons for the failure are listed in the failureReasons field. </p>
    pub fn bot_recommendation_status(
        &self,
    ) -> std::option::Option<&crate::types::BotRecommendationStatus> {
        self.bot_recommendation_status.as_ref()
    }
    /// <p>The unique identifier of the bot recommendation to be updated.</p>
    pub fn bot_recommendation_id(&self) -> std::option::Option<&str> {
        self.bot_recommendation_id.as_deref()
    }
    /// <p>A timestamp of the date and time that the bot recommendation was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>A timestamp of the date and time that the bot recommendation was last updated.</p>
    pub fn last_updated_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
    /// <p>The object representing the Amazon S3 bucket containing the transcript, as well as the associated metadata.</p>
    pub fn transcript_source_setting(
        &self,
    ) -> std::option::Option<&crate::types::TranscriptSourceSetting> {
        self.transcript_source_setting.as_ref()
    }
    /// <p>The object representing the passwords that were used to encrypt the data related to the bot recommendation results, as well as the KMS key ARN used to encrypt the associated metadata.</p>
    pub fn encryption_setting(&self) -> std::option::Option<&crate::types::EncryptionSetting> {
        self.encryption_setting.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateBotRecommendationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateBotRecommendationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBotRecommendationOutput`](crate::operation::update_bot_recommendation::UpdateBotRecommendationOutput).
    pub fn builder(
    ) -> crate::operation::update_bot_recommendation::builders::UpdateBotRecommendationOutputBuilder
    {
        crate::operation::update_bot_recommendation::builders::UpdateBotRecommendationOutputBuilder::default()
    }
}

/// A builder for [`UpdateBotRecommendationOutput`](crate::operation::update_bot_recommendation::UpdateBotRecommendationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateBotRecommendationOutputBuilder {
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) bot_version: std::option::Option<std::string::String>,
    pub(crate) locale_id: std::option::Option<std::string::String>,
    pub(crate) bot_recommendation_status:
        std::option::Option<crate::types::BotRecommendationStatus>,
    pub(crate) bot_recommendation_id: std::option::Option<std::string::String>,
    pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) transcript_source_setting:
        std::option::Option<crate::types::TranscriptSourceSetting>,
    pub(crate) encryption_setting: std::option::Option<crate::types::EncryptionSetting>,
    _request_id: Option<String>,
}
impl UpdateBotRecommendationOutputBuilder {
    /// <p>The unique identifier of the bot containing the bot recommendation that has been updated.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot containing the bot recommendation that has been updated.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The version of the bot containing the bot recommendation that has been updated.</p>
    pub fn bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_version = Some(input.into());
        self
    }
    /// <p>The version of the bot containing the bot recommendation that has been updated.</p>
    pub fn set_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The identifier of the language and locale of the bot recommendation to update. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </p>
    pub fn locale_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.locale_id = Some(input.into());
        self
    }
    /// <p>The identifier of the language and locale of the bot recommendation to update. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </p>
    pub fn set_locale_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The status of the bot recommendation.</p>
    /// <p>If the status is Failed, then the reasons for the failure are listed in the failureReasons field. </p>
    pub fn bot_recommendation_status(
        mut self,
        input: crate::types::BotRecommendationStatus,
    ) -> Self {
        self.bot_recommendation_status = Some(input);
        self
    }
    /// <p>The status of the bot recommendation.</p>
    /// <p>If the status is Failed, then the reasons for the failure are listed in the failureReasons field. </p>
    pub fn set_bot_recommendation_status(
        mut self,
        input: std::option::Option<crate::types::BotRecommendationStatus>,
    ) -> Self {
        self.bot_recommendation_status = input;
        self
    }
    /// <p>The unique identifier of the bot recommendation to be updated.</p>
    pub fn bot_recommendation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_recommendation_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot recommendation to be updated.</p>
    pub fn set_bot_recommendation_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.bot_recommendation_id = input;
        self
    }
    /// <p>A timestamp of the date and time that the bot recommendation was created.</p>
    pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = Some(input);
        self
    }
    /// <p>A timestamp of the date and time that the bot recommendation was created.</p>
    pub fn set_creation_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>A timestamp of the date and time that the bot recommendation was last updated.</p>
    pub fn last_updated_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = Some(input);
        self
    }
    /// <p>A timestamp of the date and time that the bot recommendation was last updated.</p>
    pub fn set_last_updated_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>The object representing the Amazon S3 bucket containing the transcript, as well as the associated metadata.</p>
    pub fn transcript_source_setting(
        mut self,
        input: crate::types::TranscriptSourceSetting,
    ) -> Self {
        self.transcript_source_setting = Some(input);
        self
    }
    /// <p>The object representing the Amazon S3 bucket containing the transcript, as well as the associated metadata.</p>
    pub fn set_transcript_source_setting(
        mut self,
        input: std::option::Option<crate::types::TranscriptSourceSetting>,
    ) -> Self {
        self.transcript_source_setting = input;
        self
    }
    /// <p>The object representing the passwords that were used to encrypt the data related to the bot recommendation results, as well as the KMS key ARN used to encrypt the associated metadata.</p>
    pub fn encryption_setting(mut self, input: crate::types::EncryptionSetting) -> Self {
        self.encryption_setting = Some(input);
        self
    }
    /// <p>The object representing the passwords that were used to encrypt the data related to the bot recommendation results, as well as the KMS key ARN used to encrypt the associated metadata.</p>
    pub fn set_encryption_setting(
        mut self,
        input: std::option::Option<crate::types::EncryptionSetting>,
    ) -> Self {
        self.encryption_setting = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateBotRecommendationOutput`](crate::operation::update_bot_recommendation::UpdateBotRecommendationOutput).
    pub fn build(
        self,
    ) -> crate::operation::update_bot_recommendation::UpdateBotRecommendationOutput {
        crate::operation::update_bot_recommendation::UpdateBotRecommendationOutput {
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
            bot_recommendation_status: self.bot_recommendation_status,
            bot_recommendation_id: self.bot_recommendation_id,
            creation_date_time: self.creation_date_time,
            last_updated_date_time: self.last_updated_date_time,
            transcript_source_setting: self.transcript_source_setting,
            encryption_setting: self.encryption_setting,
            _request_id: self._request_id,
        }
    }
}
