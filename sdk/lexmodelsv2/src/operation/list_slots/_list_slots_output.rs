// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSlotsOutput {
    /// <p>The identifier of the bot that contains the slots.</p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>The version of the bot that contains the slots.</p>
    #[doc(hidden)]
    pub bot_version: std::option::Option<std::string::String>,
    /// <p>The language and locale of the slots in the list.</p>
    #[doc(hidden)]
    pub locale_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the intent that contains the slots.</p>
    #[doc(hidden)]
    pub intent_id: std::option::Option<std::string::String>,
    /// <p>Summary information for the slots that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more slots available, the <code>nextToken</code> field contains a token to get the next page of results.</p>
    #[doc(hidden)]
    pub slot_summaries: std::option::Option<std::vec::Vec<crate::types::SlotSummary>>,
    /// <p>A token that indicates whether there are more results to return in a response to the <code>ListSlots</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListSlots</code> operation request to get the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSlotsOutput {
    /// <p>The identifier of the bot that contains the slots.</p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The version of the bot that contains the slots.</p>
    pub fn bot_version(&self) -> std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The language and locale of the slots in the list.</p>
    pub fn locale_id(&self) -> std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p>The identifier of the intent that contains the slots.</p>
    pub fn intent_id(&self) -> std::option::Option<&str> {
        self.intent_id.as_deref()
    }
    /// <p>Summary information for the slots that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more slots available, the <code>nextToken</code> field contains a token to get the next page of results.</p>
    pub fn slot_summaries(&self) -> std::option::Option<&[crate::types::SlotSummary]> {
        self.slot_summaries.as_deref()
    }
    /// <p>A token that indicates whether there are more results to return in a response to the <code>ListSlots</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListSlots</code> operation request to get the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSlotsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSlotsOutput {
    /// Creates a new builder-style object to manufacture [`ListSlotsOutput`](crate::operation::list_slots::ListSlotsOutput).
    pub fn builder() -> crate::operation::list_slots::builders::ListSlotsOutputBuilder {
        crate::operation::list_slots::builders::ListSlotsOutputBuilder::default()
    }
}

/// A builder for [`ListSlotsOutput`](crate::operation::list_slots::ListSlotsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListSlotsOutputBuilder {
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) bot_version: std::option::Option<std::string::String>,
    pub(crate) locale_id: std::option::Option<std::string::String>,
    pub(crate) intent_id: std::option::Option<std::string::String>,
    pub(crate) slot_summaries: std::option::Option<std::vec::Vec<crate::types::SlotSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSlotsOutputBuilder {
    /// <p>The identifier of the bot that contains the slots.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The identifier of the bot that contains the slots.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The version of the bot that contains the slots.</p>
    pub fn bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_version = Some(input.into());
        self
    }
    /// <p>The version of the bot that contains the slots.</p>
    pub fn set_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The language and locale of the slots in the list.</p>
    pub fn locale_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.locale_id = Some(input.into());
        self
    }
    /// <p>The language and locale of the slots in the list.</p>
    pub fn set_locale_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The identifier of the intent that contains the slots.</p>
    pub fn intent_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.intent_id = Some(input.into());
        self
    }
    /// <p>The identifier of the intent that contains the slots.</p>
    pub fn set_intent_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.intent_id = input;
        self
    }
    /// Appends an item to `slot_summaries`.
    ///
    /// To override the contents of this collection use [`set_slot_summaries`](Self::set_slot_summaries).
    ///
    /// <p>Summary information for the slots that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more slots available, the <code>nextToken</code> field contains a token to get the next page of results.</p>
    pub fn slot_summaries(mut self, input: crate::types::SlotSummary) -> Self {
        let mut v = self.slot_summaries.unwrap_or_default();
        v.push(input);
        self.slot_summaries = Some(v);
        self
    }
    /// <p>Summary information for the slots that meet the filter criteria specified in the request. The length of the list is specified in the <code>maxResults</code> parameter of the request. If there are more slots available, the <code>nextToken</code> field contains a token to get the next page of results.</p>
    pub fn set_slot_summaries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SlotSummary>>,
    ) -> Self {
        self.slot_summaries = input;
        self
    }
    /// <p>A token that indicates whether there are more results to return in a response to the <code>ListSlots</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListSlots</code> operation request to get the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token that indicates whether there are more results to return in a response to the <code>ListSlots</code> operation. If the <code>nextToken</code> field is present, you send the contents as the <code>nextToken</code> parameter of a <code>ListSlots</code> operation request to get the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListSlotsOutput`](crate::operation::list_slots::ListSlotsOutput).
    pub fn build(self) -> crate::operation::list_slots::ListSlotsOutput {
        crate::operation::list_slots::ListSlotsOutput {
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
            intent_id: self.intent_id,
            slot_summaries: self.slot_summaries,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
