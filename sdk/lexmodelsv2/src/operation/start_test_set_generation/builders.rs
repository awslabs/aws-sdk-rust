// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_test_set_generation::_start_test_set_generation_output::StartTestSetGenerationOutputBuilder;

pub use crate::operation::start_test_set_generation::_start_test_set_generation_input::StartTestSetGenerationInputBuilder;

impl crate::operation::start_test_set_generation::builders::StartTestSetGenerationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_test_set_generation::StartTestSetGenerationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_test_set_generation::StartTestSetGenerationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_test_set_generation();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartTestSetGeneration`.
///
/// <p>The action to start the generation of test set.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartTestSetGenerationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_test_set_generation::builders::StartTestSetGenerationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_test_set_generation::StartTestSetGenerationOutput,
        crate::operation::start_test_set_generation::StartTestSetGenerationError,
    > for StartTestSetGenerationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_test_set_generation::StartTestSetGenerationOutput,
            crate::operation::start_test_set_generation::StartTestSetGenerationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartTestSetGenerationFluentBuilder {
    /// Creates a new `StartTestSetGeneration`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartTestSetGeneration as a reference.
    pub fn as_input(&self) -> &crate::operation::start_test_set_generation::builders::StartTestSetGenerationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_test_set_generation::StartTestSetGenerationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_test_set_generation::StartTestSetGenerationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_test_set_generation::StartTestSetGeneration::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_test_set_generation::StartTestSetGeneration::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_test_set_generation::StartTestSetGenerationOutput,
        crate::operation::start_test_set_generation::StartTestSetGenerationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The test set name for the test set generation request.</p>
    pub fn test_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.test_set_name(input.into());
        self
    }
    /// <p>The test set name for the test set generation request.</p>
    pub fn set_test_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_test_set_name(input);
        self
    }
    /// <p>The test set name for the test set generation request.</p>
    pub fn get_test_set_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_test_set_name()
    }
    /// <p>The test set description for the test set generation request.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The test set description for the test set generation request.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The test set description for the test set generation request.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The Amazon S3 storage location for the test set generation.</p>
    pub fn storage_location(mut self, input: crate::types::TestSetStorageLocation) -> Self {
        self.inner = self.inner.storage_location(input);
        self
    }
    /// <p>The Amazon S3 storage location for the test set generation.</p>
    pub fn set_storage_location(mut self, input: ::std::option::Option<crate::types::TestSetStorageLocation>) -> Self {
        self.inner = self.inner.set_storage_location(input);
        self
    }
    /// <p>The Amazon S3 storage location for the test set generation.</p>
    pub fn get_storage_location(&self) -> &::std::option::Option<crate::types::TestSetStorageLocation> {
        self.inner.get_storage_location()
    }
    /// <p>The data source for the test set generation.</p>
    pub fn generation_data_source(mut self, input: crate::types::TestSetGenerationDataSource) -> Self {
        self.inner = self.inner.generation_data_source(input);
        self
    }
    /// <p>The data source for the test set generation.</p>
    pub fn set_generation_data_source(mut self, input: ::std::option::Option<crate::types::TestSetGenerationDataSource>) -> Self {
        self.inner = self.inner.set_generation_data_source(input);
        self
    }
    /// <p>The data source for the test set generation.</p>
    pub fn get_generation_data_source(&self) -> &::std::option::Option<crate::types::TestSetGenerationDataSource> {
        self.inner.get_generation_data_source()
    }
    /// <p>The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_role_arn()
    }
    ///
    /// Adds a key-value pair to `testSetTags`.
    ///
    /// To override the contents of this collection use [`set_test_set_tags`](Self::set_test_set_tags).
    ///
    /// <p>A list of tags to add to the test set. You can only add tags when you import/generate a new test set. You can't use the <code>UpdateTestSet</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.</p>
    pub fn test_set_tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.test_set_tags(k.into(), v.into());
        self
    }
    /// <p>A list of tags to add to the test set. You can only add tags when you import/generate a new test set. You can't use the <code>UpdateTestSet</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.</p>
    pub fn set_test_set_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_test_set_tags(input);
        self
    }
    /// <p>A list of tags to add to the test set. You can only add tags when you import/generate a new test set. You can't use the <code>UpdateTestSet</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.</p>
    pub fn get_test_set_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_test_set_tags()
    }
}
