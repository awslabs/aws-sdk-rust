// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeBotAliasOutput {
    /// <p>The identifier of the bot alias.</p>
    pub bot_alias_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the bot alias.</p>
    pub bot_alias_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the bot alias.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The version of the bot associated with the bot alias.</p>
    pub bot_version: ::std::option::Option<::std::string::String>,
    /// <p>The locale settings that are unique to the alias.</p>
    pub bot_alias_locale_settings: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::BotAliasLocaleSettings>>,
    /// <p>Specifics of how Amazon Lex logs text and audio conversations with the bot associated with the alias.</p>
    pub conversation_log_settings: ::std::option::Option<crate::types::ConversationLogSettings>,
    /// <p>Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.</p>
    pub sentiment_analysis_settings: ::std::option::Option<crate::types::SentimentAnalysisSettings>,
    /// <p>A list of events that affect a bot alias. For example, an event is recorded when the version that the alias points to changes.</p>
    pub bot_alias_history_events: ::std::option::Option<::std::vec::Vec<crate::types::BotAliasHistoryEvent>>,
    /// <p>The current status of the alias. When the alias is <code>Available</code>, the alias is ready for use with your bot.</p>
    pub bot_alias_status: ::std::option::Option<crate::types::BotAliasStatus>,
    /// <p>The identifier of the bot associated with the bot alias.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp of the date and time that the alias was created.</p>
    pub creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp of the date and time that the alias was last updated.</p>
    pub last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A list of the networks to which the bot alias you described belongs.</p>
    pub parent_bot_networks: ::std::option::Option<::std::vec::Vec<crate::types::ParentBotNetwork>>,
    _request_id: Option<String>,
}
impl DescribeBotAliasOutput {
    /// <p>The identifier of the bot alias.</p>
    pub fn bot_alias_id(&self) -> ::std::option::Option<&str> {
        self.bot_alias_id.as_deref()
    }
    /// <p>The name of the bot alias.</p>
    pub fn bot_alias_name(&self) -> ::std::option::Option<&str> {
        self.bot_alias_name.as_deref()
    }
    /// <p>The description of the bot alias.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The version of the bot associated with the bot alias.</p>
    pub fn bot_version(&self) -> ::std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The locale settings that are unique to the alias.</p>
    pub fn bot_alias_locale_settings(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::BotAliasLocaleSettings>> {
        self.bot_alias_locale_settings.as_ref()
    }
    /// <p>Specifics of how Amazon Lex logs text and audio conversations with the bot associated with the alias.</p>
    pub fn conversation_log_settings(&self) -> ::std::option::Option<&crate::types::ConversationLogSettings> {
        self.conversation_log_settings.as_ref()
    }
    /// <p>Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.</p>
    pub fn sentiment_analysis_settings(&self) -> ::std::option::Option<&crate::types::SentimentAnalysisSettings> {
        self.sentiment_analysis_settings.as_ref()
    }
    /// <p>A list of events that affect a bot alias. For example, an event is recorded when the version that the alias points to changes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.bot_alias_history_events.is_none()`.
    pub fn bot_alias_history_events(&self) -> &[crate::types::BotAliasHistoryEvent] {
        self.bot_alias_history_events.as_deref().unwrap_or_default()
    }
    /// <p>The current status of the alias. When the alias is <code>Available</code>, the alias is ready for use with your bot.</p>
    pub fn bot_alias_status(&self) -> ::std::option::Option<&crate::types::BotAliasStatus> {
        self.bot_alias_status.as_ref()
    }
    /// <p>The identifier of the bot associated with the bot alias.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>A timestamp of the date and time that the alias was created.</p>
    pub fn creation_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>A timestamp of the date and time that the alias was last updated.</p>
    pub fn last_updated_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
    /// <p>A list of the networks to which the bot alias you described belongs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parent_bot_networks.is_none()`.
    pub fn parent_bot_networks(&self) -> &[crate::types::ParentBotNetwork] {
        self.parent_bot_networks.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeBotAliasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeBotAliasOutput {
    /// Creates a new builder-style object to manufacture [`DescribeBotAliasOutput`](crate::operation::describe_bot_alias::DescribeBotAliasOutput).
    pub fn builder() -> crate::operation::describe_bot_alias::builders::DescribeBotAliasOutputBuilder {
        crate::operation::describe_bot_alias::builders::DescribeBotAliasOutputBuilder::default()
    }
}

/// A builder for [`DescribeBotAliasOutput`](crate::operation::describe_bot_alias::DescribeBotAliasOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeBotAliasOutputBuilder {
    pub(crate) bot_alias_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_alias_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) bot_version: ::std::option::Option<::std::string::String>,
    pub(crate) bot_alias_locale_settings:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::BotAliasLocaleSettings>>,
    pub(crate) conversation_log_settings: ::std::option::Option<crate::types::ConversationLogSettings>,
    pub(crate) sentiment_analysis_settings: ::std::option::Option<crate::types::SentimentAnalysisSettings>,
    pub(crate) bot_alias_history_events: ::std::option::Option<::std::vec::Vec<crate::types::BotAliasHistoryEvent>>,
    pub(crate) bot_alias_status: ::std::option::Option<crate::types::BotAliasStatus>,
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) parent_bot_networks: ::std::option::Option<::std::vec::Vec<crate::types::ParentBotNetwork>>,
    _request_id: Option<String>,
}
impl DescribeBotAliasOutputBuilder {
    /// <p>The identifier of the bot alias.</p>
    pub fn bot_alias_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_alias_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bot alias.</p>
    pub fn set_bot_alias_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_alias_id = input;
        self
    }
    /// <p>The identifier of the bot alias.</p>
    pub fn get_bot_alias_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_alias_id
    }
    /// <p>The name of the bot alias.</p>
    pub fn bot_alias_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_alias_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the bot alias.</p>
    pub fn set_bot_alias_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_alias_name = input;
        self
    }
    /// <p>The name of the bot alias.</p>
    pub fn get_bot_alias_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_alias_name
    }
    /// <p>The description of the bot alias.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the bot alias.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the bot alias.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The version of the bot associated with the bot alias.</p>
    pub fn bot_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the bot associated with the bot alias.</p>
    pub fn set_bot_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The version of the bot associated with the bot alias.</p>
    pub fn get_bot_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_version
    }
    /// Adds a key-value pair to `bot_alias_locale_settings`.
    ///
    /// To override the contents of this collection use [`set_bot_alias_locale_settings`](Self::set_bot_alias_locale_settings).
    ///
    /// <p>The locale settings that are unique to the alias.</p>
    pub fn bot_alias_locale_settings(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::BotAliasLocaleSettings) -> Self {
        let mut hash_map = self.bot_alias_locale_settings.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.bot_alias_locale_settings = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The locale settings that are unique to the alias.</p>
    pub fn set_bot_alias_locale_settings(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::BotAliasLocaleSettings>>,
    ) -> Self {
        self.bot_alias_locale_settings = input;
        self
    }
    /// <p>The locale settings that are unique to the alias.</p>
    pub fn get_bot_alias_locale_settings(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::BotAliasLocaleSettings>> {
        &self.bot_alias_locale_settings
    }
    /// <p>Specifics of how Amazon Lex logs text and audio conversations with the bot associated with the alias.</p>
    pub fn conversation_log_settings(mut self, input: crate::types::ConversationLogSettings) -> Self {
        self.conversation_log_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifics of how Amazon Lex logs text and audio conversations with the bot associated with the alias.</p>
    pub fn set_conversation_log_settings(mut self, input: ::std::option::Option<crate::types::ConversationLogSettings>) -> Self {
        self.conversation_log_settings = input;
        self
    }
    /// <p>Specifics of how Amazon Lex logs text and audio conversations with the bot associated with the alias.</p>
    pub fn get_conversation_log_settings(&self) -> &::std::option::Option<crate::types::ConversationLogSettings> {
        &self.conversation_log_settings
    }
    /// <p>Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.</p>
    pub fn sentiment_analysis_settings(mut self, input: crate::types::SentimentAnalysisSettings) -> Self {
        self.sentiment_analysis_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.</p>
    pub fn set_sentiment_analysis_settings(mut self, input: ::std::option::Option<crate::types::SentimentAnalysisSettings>) -> Self {
        self.sentiment_analysis_settings = input;
        self
    }
    /// <p>Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.</p>
    pub fn get_sentiment_analysis_settings(&self) -> &::std::option::Option<crate::types::SentimentAnalysisSettings> {
        &self.sentiment_analysis_settings
    }
    /// Appends an item to `bot_alias_history_events`.
    ///
    /// To override the contents of this collection use [`set_bot_alias_history_events`](Self::set_bot_alias_history_events).
    ///
    /// <p>A list of events that affect a bot alias. For example, an event is recorded when the version that the alias points to changes.</p>
    pub fn bot_alias_history_events(mut self, input: crate::types::BotAliasHistoryEvent) -> Self {
        let mut v = self.bot_alias_history_events.unwrap_or_default();
        v.push(input);
        self.bot_alias_history_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of events that affect a bot alias. For example, an event is recorded when the version that the alias points to changes.</p>
    pub fn set_bot_alias_history_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BotAliasHistoryEvent>>) -> Self {
        self.bot_alias_history_events = input;
        self
    }
    /// <p>A list of events that affect a bot alias. For example, an event is recorded when the version that the alias points to changes.</p>
    pub fn get_bot_alias_history_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BotAliasHistoryEvent>> {
        &self.bot_alias_history_events
    }
    /// <p>The current status of the alias. When the alias is <code>Available</code>, the alias is ready for use with your bot.</p>
    pub fn bot_alias_status(mut self, input: crate::types::BotAliasStatus) -> Self {
        self.bot_alias_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the alias. When the alias is <code>Available</code>, the alias is ready for use with your bot.</p>
    pub fn set_bot_alias_status(mut self, input: ::std::option::Option<crate::types::BotAliasStatus>) -> Self {
        self.bot_alias_status = input;
        self
    }
    /// <p>The current status of the alias. When the alias is <code>Available</code>, the alias is ready for use with your bot.</p>
    pub fn get_bot_alias_status(&self) -> &::std::option::Option<crate::types::BotAliasStatus> {
        &self.bot_alias_status
    }
    /// <p>The identifier of the bot associated with the bot alias.</p>
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bot associated with the bot alias.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The identifier of the bot associated with the bot alias.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>A timestamp of the date and time that the alias was created.</p>
    pub fn creation_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp of the date and time that the alias was created.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>A timestamp of the date and time that the alias was created.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date_time
    }
    /// <p>A timestamp of the date and time that the alias was last updated.</p>
    pub fn last_updated_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp of the date and time that the alias was last updated.</p>
    pub fn set_last_updated_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>A timestamp of the date and time that the alias was last updated.</p>
    pub fn get_last_updated_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date_time
    }
    /// Appends an item to `parent_bot_networks`.
    ///
    /// To override the contents of this collection use [`set_parent_bot_networks`](Self::set_parent_bot_networks).
    ///
    /// <p>A list of the networks to which the bot alias you described belongs.</p>
    pub fn parent_bot_networks(mut self, input: crate::types::ParentBotNetwork) -> Self {
        let mut v = self.parent_bot_networks.unwrap_or_default();
        v.push(input);
        self.parent_bot_networks = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the networks to which the bot alias you described belongs.</p>
    pub fn set_parent_bot_networks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ParentBotNetwork>>) -> Self {
        self.parent_bot_networks = input;
        self
    }
    /// <p>A list of the networks to which the bot alias you described belongs.</p>
    pub fn get_parent_bot_networks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ParentBotNetwork>> {
        &self.parent_bot_networks
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeBotAliasOutput`](crate::operation::describe_bot_alias::DescribeBotAliasOutput).
    pub fn build(self) -> crate::operation::describe_bot_alias::DescribeBotAliasOutput {
        crate::operation::describe_bot_alias::DescribeBotAliasOutput {
            bot_alias_id: self.bot_alias_id,
            bot_alias_name: self.bot_alias_name,
            description: self.description,
            bot_version: self.bot_version,
            bot_alias_locale_settings: self.bot_alias_locale_settings,
            conversation_log_settings: self.conversation_log_settings,
            sentiment_analysis_settings: self.sentiment_analysis_settings,
            bot_alias_history_events: self.bot_alias_history_events,
            bot_alias_status: self.bot_alias_status,
            bot_id: self.bot_id,
            creation_date_time: self.creation_date_time,
            last_updated_date_time: self.last_updated_date_time,
            parent_bot_networks: self.parent_bot_networks,
            _request_id: self._request_id,
        }
    }
}
