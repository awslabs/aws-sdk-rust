// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListImportsInput {
    /// <p>The unique identifier that Amazon Lex assigned to the bot.</p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>The version of the bot to list imports for.</p>
    #[doc(hidden)]
    pub bot_version: std::option::Option<std::string::String>,
    /// <p>Determines the field that the list of imports is sorted by. You can sort by the <code>LastUpdatedDateTime</code> field in ascending or descending order.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::ImportSortBy>,
    /// <p>Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::ImportFilter>>,
    /// <p>The maximum number of imports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>If the response from the <code>ListImports</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response.</p>
    /// <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListImports</code> request to return the next page of results. For a complete set of results, call the <code>ListImports</code> operation until the <code>nextToken</code> returned in the response is null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Specifies the locale that should be present in the list. If you don't specify a resource type in the <code>filters</code> parameter, the list contains both bot locales and custom vocabularies.</p>
    #[doc(hidden)]
    pub locale_id: std::option::Option<std::string::String>,
}
impl ListImportsInput {
    /// <p>The unique identifier that Amazon Lex assigned to the bot.</p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The version of the bot to list imports for.</p>
    pub fn bot_version(&self) -> std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>Determines the field that the list of imports is sorted by. You can sort by the <code>LastUpdatedDateTime</code> field in ascending or descending order.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::ImportSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::ImportFilter]> {
        self.filters.as_deref()
    }
    /// <p>The maximum number of imports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>If the response from the <code>ListImports</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response.</p>
    /// <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListImports</code> request to return the next page of results. For a complete set of results, call the <code>ListImports</code> operation until the <code>nextToken</code> returned in the response is null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specifies the locale that should be present in the list. If you don't specify a resource type in the <code>filters</code> parameter, the list contains both bot locales and custom vocabularies.</p>
    pub fn locale_id(&self) -> std::option::Option<&str> {
        self.locale_id.as_deref()
    }
}
impl ListImportsInput {
    /// Creates a new builder-style object to manufacture [`ListImportsInput`](crate::operation::list_imports::ListImportsInput).
    pub fn builder() -> crate::operation::list_imports::builders::ListImportsInputBuilder {
        crate::operation::list_imports::builders::ListImportsInputBuilder::default()
    }
}

/// A builder for [`ListImportsInput`](crate::operation::list_imports::ListImportsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListImportsInputBuilder {
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) bot_version: std::option::Option<std::string::String>,
    pub(crate) sort_by: std::option::Option<crate::types::ImportSortBy>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::ImportFilter>>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) locale_id: std::option::Option<std::string::String>,
}
impl ListImportsInputBuilder {
    /// <p>The unique identifier that Amazon Lex assigned to the bot.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The unique identifier that Amazon Lex assigned to the bot.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The version of the bot to list imports for.</p>
    pub fn bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_version = Some(input.into());
        self
    }
    /// <p>The version of the bot to list imports for.</p>
    pub fn set_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>Determines the field that the list of imports is sorted by. You can sort by the <code>LastUpdatedDateTime</code> field in ascending or descending order.</p>
    pub fn sort_by(mut self, input: crate::types::ImportSortBy) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>Determines the field that the list of imports is sorted by. You can sort by the <code>LastUpdatedDateTime</code> field in ascending or descending order.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::types::ImportSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.</p>
    pub fn filters(mut self, input: crate::types::ImportFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ImportFilter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The maximum number of imports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of imports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>If the response from the <code>ListImports</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response.</p>
    /// <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListImports</code> request to return the next page of results. For a complete set of results, call the <code>ListImports</code> operation until the <code>nextToken</code> returned in the response is null.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the response from the <code>ListImports</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response.</p>
    /// <p>Use the returned token in the <code>nextToken</code> parameter of a <code>ListImports</code> request to return the next page of results. For a complete set of results, call the <code>ListImports</code> operation until the <code>nextToken</code> returned in the response is null.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specifies the locale that should be present in the list. If you don't specify a resource type in the <code>filters</code> parameter, the list contains both bot locales and custom vocabularies.</p>
    pub fn locale_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.locale_id = Some(input.into());
        self
    }
    /// <p>Specifies the locale that should be present in the list. If you don't specify a resource type in the <code>filters</code> parameter, the list contains both bot locales and custom vocabularies.</p>
    pub fn set_locale_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ListImportsInput`](crate::operation::list_imports::ListImportsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_imports::ListImportsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_imports::ListImportsInput {
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            sort_by: self.sort_by,
            filters: self.filters,
            max_results: self.max_results,
            next_token: self.next_token,
            locale_id: self.locale_id,
        })
    }
}
