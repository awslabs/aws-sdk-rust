// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BuildBotLocaleInput {
    /// <p>The identifier of the bot to build. The identifier is returned in the response from the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_CreateBot.html">CreateBot</a> operation.</p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>The version of the bot to build. This can only be the draft version of the bot.</p>
    #[doc(hidden)]
    pub bot_version: std::option::Option<std::string::String>,
    /// <p>The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    #[doc(hidden)]
    pub locale_id: std::option::Option<std::string::String>,
}
impl BuildBotLocaleInput {
    /// <p>The identifier of the bot to build. The identifier is returned in the response from the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_CreateBot.html">CreateBot</a> operation.</p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The version of the bot to build. This can only be the draft version of the bot.</p>
    pub fn bot_version(&self) -> std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn locale_id(&self) -> std::option::Option<&str> {
        self.locale_id.as_deref()
    }
}
impl BuildBotLocaleInput {
    /// Creates a new builder-style object to manufacture [`BuildBotLocaleInput`](crate::operation::build_bot_locale::BuildBotLocaleInput).
    pub fn builder() -> crate::operation::build_bot_locale::builders::BuildBotLocaleInputBuilder {
        crate::operation::build_bot_locale::builders::BuildBotLocaleInputBuilder::default()
    }
}

/// A builder for [`BuildBotLocaleInput`](crate::operation::build_bot_locale::BuildBotLocaleInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BuildBotLocaleInputBuilder {
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) bot_version: std::option::Option<std::string::String>,
    pub(crate) locale_id: std::option::Option<std::string::String>,
}
impl BuildBotLocaleInputBuilder {
    /// <p>The identifier of the bot to build. The identifier is returned in the response from the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_CreateBot.html">CreateBot</a> operation.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The identifier of the bot to build. The identifier is returned in the response from the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_CreateBot.html">CreateBot</a> operation.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The version of the bot to build. This can only be the draft version of the bot.</p>
    pub fn bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_version = Some(input.into());
        self
    }
    /// <p>The version of the bot to build. This can only be the draft version of the bot.</p>
    pub fn set_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn locale_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.locale_id = Some(input.into());
        self
    }
    /// <p>The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn set_locale_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// Consumes the builder and constructs a [`BuildBotLocaleInput`](crate::operation::build_bot_locale::BuildBotLocaleInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::build_bot_locale::BuildBotLocaleInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::build_bot_locale::BuildBotLocaleInput {
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
        })
    }
}
