// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSessionMetricsInput {
    /// <p>The identifier for the bot for which you want to retrieve session metrics.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that marks the beginning of the range of time for which you want to see session metrics.</p>
    pub start_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time that marks the end of the range of time for which you want to see session metrics.</p>
    pub end_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.</p>
    pub metrics: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsSessionMetric>>,
    /// <p>A list of objects, each of which contains specifications for organizing the results by time.</p>
    pub bin_by: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsBinBySpecification>>,
    /// <p>A list of objects, each of which specifies how to group the results. You can group by the following criteria:</p>
    /// <ul>
    /// <li> <p> <code>ConversationEndState</code> – The final state of the conversation. The possible end states are detailed in <a href="https://docs.aws.amazon.com/analytics-key-definitions-conversations">Key definitions</a> in the user guide.</p> </li>
    /// <li> <p> <code>LocaleId</code> – The unique identifier of the bot locale.</p> </li>
    /// </ul>
    pub group_by: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsSessionGroupBySpecification>>,
    /// <p>A list of objects, each of which describes a condition by which you want to filter the results.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsSessionFilter>>,
    /// <p>The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>If the response from the ListSessionMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p>
    /// <p>Use the returned token in the nextToken parameter of a ListSessionMetrics request to return the next page of results. For a complete set of results, call the ListSessionMetrics operation until the nextToken returned in the response is null.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListSessionMetricsInput {
    /// <p>The identifier for the bot for which you want to retrieve session metrics.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The date and time that marks the beginning of the range of time for which you want to see session metrics.</p>
    pub fn start_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_date_time.as_ref()
    }
    /// <p>The date and time that marks the end of the range of time for which you want to see session metrics.</p>
    pub fn end_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_date_time.as_ref()
    }
    /// <p>A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metrics.is_none()`.
    pub fn metrics(&self) -> &[crate::types::AnalyticsSessionMetric] {
        self.metrics.as_deref().unwrap_or_default()
    }
    /// <p>A list of objects, each of which contains specifications for organizing the results by time.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.bin_by.is_none()`.
    pub fn bin_by(&self) -> &[crate::types::AnalyticsBinBySpecification] {
        self.bin_by.as_deref().unwrap_or_default()
    }
    /// <p>A list of objects, each of which specifies how to group the results. You can group by the following criteria:</p>
    /// <ul>
    /// <li> <p> <code>ConversationEndState</code> – The final state of the conversation. The possible end states are detailed in <a href="https://docs.aws.amazon.com/analytics-key-definitions-conversations">Key definitions</a> in the user guide.</p> </li>
    /// <li> <p> <code>LocaleId</code> – The unique identifier of the bot locale.</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.group_by.is_none()`.
    pub fn group_by(&self) -> &[crate::types::AnalyticsSessionGroupBySpecification] {
        self.group_by.as_deref().unwrap_or_default()
    }
    /// <p>A list of objects, each of which describes a condition by which you want to filter the results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::AnalyticsSessionFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>If the response from the ListSessionMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p>
    /// <p>Use the returned token in the nextToken parameter of a ListSessionMetrics request to return the next page of results. For a complete set of results, call the ListSessionMetrics operation until the nextToken returned in the response is null.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListSessionMetricsInput {
    /// Creates a new builder-style object to manufacture [`ListSessionMetricsInput`](crate::operation::list_session_metrics::ListSessionMetricsInput).
    pub fn builder() -> crate::operation::list_session_metrics::builders::ListSessionMetricsInputBuilder {
        crate::operation::list_session_metrics::builders::ListSessionMetricsInputBuilder::default()
    }
}

/// A builder for [`ListSessionMetricsInput`](crate::operation::list_session_metrics::ListSessionMetricsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSessionMetricsInputBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) start_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) metrics: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsSessionMetric>>,
    pub(crate) bin_by: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsBinBySpecification>>,
    pub(crate) group_by: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsSessionGroupBySpecification>>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsSessionFilter>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListSessionMetricsInputBuilder {
    /// <p>The identifier for the bot for which you want to retrieve session metrics.</p>
    /// This field is required.
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the bot for which you want to retrieve session metrics.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The identifier for the bot for which you want to retrieve session metrics.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The date and time that marks the beginning of the range of time for which you want to see session metrics.</p>
    /// This field is required.
    pub fn start_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that marks the beginning of the range of time for which you want to see session metrics.</p>
    pub fn set_start_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_date_time = input;
        self
    }
    /// <p>The date and time that marks the beginning of the range of time for which you want to see session metrics.</p>
    pub fn get_start_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_date_time
    }
    /// <p>The date and time that marks the end of the range of time for which you want to see session metrics.</p>
    /// This field is required.
    pub fn end_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that marks the end of the range of time for which you want to see session metrics.</p>
    pub fn set_end_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_date_time = input;
        self
    }
    /// <p>The date and time that marks the end of the range of time for which you want to see session metrics.</p>
    pub fn get_end_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_date_time
    }
    /// Appends an item to `metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.</p>
    pub fn metrics(mut self, input: crate::types::AnalyticsSessionMetric) -> Self {
        let mut v = self.metrics.unwrap_or_default();
        v.push(input);
        self.metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.</p>
    pub fn set_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsSessionMetric>>) -> Self {
        self.metrics = input;
        self
    }
    /// <p>A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.</p>
    pub fn get_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalyticsSessionMetric>> {
        &self.metrics
    }
    /// Appends an item to `bin_by`.
    ///
    /// To override the contents of this collection use [`set_bin_by`](Self::set_bin_by).
    ///
    /// <p>A list of objects, each of which contains specifications for organizing the results by time.</p>
    pub fn bin_by(mut self, input: crate::types::AnalyticsBinBySpecification) -> Self {
        let mut v = self.bin_by.unwrap_or_default();
        v.push(input);
        self.bin_by = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects, each of which contains specifications for organizing the results by time.</p>
    pub fn set_bin_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsBinBySpecification>>) -> Self {
        self.bin_by = input;
        self
    }
    /// <p>A list of objects, each of which contains specifications for organizing the results by time.</p>
    pub fn get_bin_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalyticsBinBySpecification>> {
        &self.bin_by
    }
    /// Appends an item to `group_by`.
    ///
    /// To override the contents of this collection use [`set_group_by`](Self::set_group_by).
    ///
    /// <p>A list of objects, each of which specifies how to group the results. You can group by the following criteria:</p>
    /// <ul>
    /// <li> <p> <code>ConversationEndState</code> – The final state of the conversation. The possible end states are detailed in <a href="https://docs.aws.amazon.com/analytics-key-definitions-conversations">Key definitions</a> in the user guide.</p> </li>
    /// <li> <p> <code>LocaleId</code> – The unique identifier of the bot locale.</p> </li>
    /// </ul>
    pub fn group_by(mut self, input: crate::types::AnalyticsSessionGroupBySpecification) -> Self {
        let mut v = self.group_by.unwrap_or_default();
        v.push(input);
        self.group_by = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects, each of which specifies how to group the results. You can group by the following criteria:</p>
    /// <ul>
    /// <li> <p> <code>ConversationEndState</code> – The final state of the conversation. The possible end states are detailed in <a href="https://docs.aws.amazon.com/analytics-key-definitions-conversations">Key definitions</a> in the user guide.</p> </li>
    /// <li> <p> <code>LocaleId</code> – The unique identifier of the bot locale.</p> </li>
    /// </ul>
    pub fn set_group_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsSessionGroupBySpecification>>) -> Self {
        self.group_by = input;
        self
    }
    /// <p>A list of objects, each of which specifies how to group the results. You can group by the following criteria:</p>
    /// <ul>
    /// <li> <p> <code>ConversationEndState</code> – The final state of the conversation. The possible end states are detailed in <a href="https://docs.aws.amazon.com/analytics-key-definitions-conversations">Key definitions</a> in the user guide.</p> </li>
    /// <li> <p> <code>LocaleId</code> – The unique identifier of the bot locale.</p> </li>
    /// </ul>
    pub fn get_group_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalyticsSessionGroupBySpecification>> {
        &self.group_by
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A list of objects, each of which describes a condition by which you want to filter the results.</p>
    pub fn filters(mut self, input: crate::types::AnalyticsSessionFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects, each of which describes a condition by which you want to filter the results.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsSessionFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>A list of objects, each of which describes a condition by which you want to filter the results.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalyticsSessionFilter>> {
        &self.filters
    }
    /// <p>The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>If the response from the ListSessionMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p>
    /// <p>Use the returned token in the nextToken parameter of a ListSessionMetrics request to return the next page of results. For a complete set of results, call the ListSessionMetrics operation until the nextToken returned in the response is null.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the response from the ListSessionMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p>
    /// <p>Use the returned token in the nextToken parameter of a ListSessionMetrics request to return the next page of results. For a complete set of results, call the ListSessionMetrics operation until the nextToken returned in the response is null.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the response from the ListSessionMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p>
    /// <p>Use the returned token in the nextToken parameter of a ListSessionMetrics request to return the next page of results. For a complete set of results, call the ListSessionMetrics operation until the nextToken returned in the response is null.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListSessionMetricsInput`](crate::operation::list_session_metrics::ListSessionMetricsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_session_metrics::ListSessionMetricsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_session_metrics::ListSessionMetricsInput {
            bot_id: self.bot_id,
            start_date_time: self.start_date_time,
            end_date_time: self.end_date_time,
            metrics: self.metrics,
            bin_by: self.bin_by,
            group_by: self.group_by,
            filters: self.filters,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
