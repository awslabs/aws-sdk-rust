// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSlotTypeInput {
    /// <p>The name for the slot. A slot type name must be unique within the account.</p>
    #[doc(hidden)]
    pub slot_type_name: std::option::Option<std::string::String>,
    /// <p>A description of the slot type. Use the description to help identify the slot type in lists.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A list of <code>SlotTypeValue</code> objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot.</p>
    #[doc(hidden)]
    pub slot_type_values: std::option::Option<std::vec::Vec<crate::types::SlotTypeValue>>,
    /// <p>Determines the strategy that Amazon Lex uses to select a value from the list of possible values. The field can be set to one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>OriginalValue</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li>
    /// <li> <p> <code>TopResolution</code> - If there is a resolution list for the slot, return the first value in the resolution list. If there is no resolution list, return null.</p> </li>
    /// </ul>
    /// <p>If you don't specify the <code>valueSelectionSetting</code> parameter, the default is <code>OriginalValue</code>.</p>
    #[doc(hidden)]
    pub value_selection_setting: std::option::Option<crate::types::SlotValueSelectionSetting>,
    /// <p>The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type.</p>
    /// <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
    #[doc(hidden)]
    pub parent_slot_type_signature: std::option::Option<std::string::String>,
    /// <p>The identifier of the bot associated with this slot type.</p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the bot version associated with this slot type.</p>
    #[doc(hidden)]
    pub bot_version: std::option::Option<std::string::String>,
    /// <p>The identifier of the language and locale that the slot type will be used in. The string must match one of the supported locales. All of the bots, intents, and slots used by the slot type must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    #[doc(hidden)]
    pub locale_id: std::option::Option<std::string::String>,
    /// <p>Sets the type of external information used to create the slot type.</p>
    #[doc(hidden)]
    pub external_source_setting: std::option::Option<crate::types::ExternalSourceSetting>,
    /// <p>Specifications for a composite slot type.</p>
    #[doc(hidden)]
    pub composite_slot_type_setting: std::option::Option<crate::types::CompositeSlotTypeSetting>,
}
impl CreateSlotTypeInput {
    /// <p>The name for the slot. A slot type name must be unique within the account.</p>
    pub fn slot_type_name(&self) -> std::option::Option<&str> {
        self.slot_type_name.as_deref()
    }
    /// <p>A description of the slot type. Use the description to help identify the slot type in lists.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of <code>SlotTypeValue</code> objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot.</p>
    pub fn slot_type_values(&self) -> std::option::Option<&[crate::types::SlotTypeValue]> {
        self.slot_type_values.as_deref()
    }
    /// <p>Determines the strategy that Amazon Lex uses to select a value from the list of possible values. The field can be set to one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>OriginalValue</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li>
    /// <li> <p> <code>TopResolution</code> - If there is a resolution list for the slot, return the first value in the resolution list. If there is no resolution list, return null.</p> </li>
    /// </ul>
    /// <p>If you don't specify the <code>valueSelectionSetting</code> parameter, the default is <code>OriginalValue</code>.</p>
    pub fn value_selection_setting(
        &self,
    ) -> std::option::Option<&crate::types::SlotValueSelectionSetting> {
        self.value_selection_setting.as_ref()
    }
    /// <p>The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type.</p>
    /// <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
    pub fn parent_slot_type_signature(&self) -> std::option::Option<&str> {
        self.parent_slot_type_signature.as_deref()
    }
    /// <p>The identifier of the bot associated with this slot type.</p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The identifier of the bot version associated with this slot type.</p>
    pub fn bot_version(&self) -> std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The identifier of the language and locale that the slot type will be used in. The string must match one of the supported locales. All of the bots, intents, and slots used by the slot type must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn locale_id(&self) -> std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p>Sets the type of external information used to create the slot type.</p>
    pub fn external_source_setting(
        &self,
    ) -> std::option::Option<&crate::types::ExternalSourceSetting> {
        self.external_source_setting.as_ref()
    }
    /// <p>Specifications for a composite slot type.</p>
    pub fn composite_slot_type_setting(
        &self,
    ) -> std::option::Option<&crate::types::CompositeSlotTypeSetting> {
        self.composite_slot_type_setting.as_ref()
    }
}
impl CreateSlotTypeInput {
    /// Creates a new builder-style object to manufacture [`CreateSlotTypeInput`](crate::operation::create_slot_type::CreateSlotTypeInput).
    pub fn builder() -> crate::operation::create_slot_type::builders::CreateSlotTypeInputBuilder {
        crate::operation::create_slot_type::builders::CreateSlotTypeInputBuilder::default()
    }
}

/// A builder for [`CreateSlotTypeInput`](crate::operation::create_slot_type::CreateSlotTypeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateSlotTypeInputBuilder {
    pub(crate) slot_type_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) slot_type_values: std::option::Option<std::vec::Vec<crate::types::SlotTypeValue>>,
    pub(crate) value_selection_setting:
        std::option::Option<crate::types::SlotValueSelectionSetting>,
    pub(crate) parent_slot_type_signature: std::option::Option<std::string::String>,
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) bot_version: std::option::Option<std::string::String>,
    pub(crate) locale_id: std::option::Option<std::string::String>,
    pub(crate) external_source_setting: std::option::Option<crate::types::ExternalSourceSetting>,
    pub(crate) composite_slot_type_setting:
        std::option::Option<crate::types::CompositeSlotTypeSetting>,
}
impl CreateSlotTypeInputBuilder {
    /// <p>The name for the slot. A slot type name must be unique within the account.</p>
    pub fn slot_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.slot_type_name = Some(input.into());
        self
    }
    /// <p>The name for the slot. A slot type name must be unique within the account.</p>
    pub fn set_slot_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.slot_type_name = input;
        self
    }
    /// <p>A description of the slot type. Use the description to help identify the slot type in lists.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the slot type. Use the description to help identify the slot type in lists.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `slot_type_values`.
    ///
    /// To override the contents of this collection use [`set_slot_type_values`](Self::set_slot_type_values).
    ///
    /// <p>A list of <code>SlotTypeValue</code> objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot.</p>
    pub fn slot_type_values(mut self, input: crate::types::SlotTypeValue) -> Self {
        let mut v = self.slot_type_values.unwrap_or_default();
        v.push(input);
        self.slot_type_values = Some(v);
        self
    }
    /// <p>A list of <code>SlotTypeValue</code> objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot.</p>
    pub fn set_slot_type_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SlotTypeValue>>,
    ) -> Self {
        self.slot_type_values = input;
        self
    }
    /// <p>Determines the strategy that Amazon Lex uses to select a value from the list of possible values. The field can be set to one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>OriginalValue</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li>
    /// <li> <p> <code>TopResolution</code> - If there is a resolution list for the slot, return the first value in the resolution list. If there is no resolution list, return null.</p> </li>
    /// </ul>
    /// <p>If you don't specify the <code>valueSelectionSetting</code> parameter, the default is <code>OriginalValue</code>.</p>
    pub fn value_selection_setting(
        mut self,
        input: crate::types::SlotValueSelectionSetting,
    ) -> Self {
        self.value_selection_setting = Some(input);
        self
    }
    /// <p>Determines the strategy that Amazon Lex uses to select a value from the list of possible values. The field can be set to one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>OriginalValue</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li>
    /// <li> <p> <code>TopResolution</code> - If there is a resolution list for the slot, return the first value in the resolution list. If there is no resolution list, return null.</p> </li>
    /// </ul>
    /// <p>If you don't specify the <code>valueSelectionSetting</code> parameter, the default is <code>OriginalValue</code>.</p>
    pub fn set_value_selection_setting(
        mut self,
        input: std::option::Option<crate::types::SlotValueSelectionSetting>,
    ) -> Self {
        self.value_selection_setting = input;
        self
    }
    /// <p>The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type.</p>
    /// <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
    pub fn parent_slot_type_signature(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_slot_type_signature = Some(input.into());
        self
    }
    /// <p>The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type.</p>
    /// <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
    pub fn set_parent_slot_type_signature(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.parent_slot_type_signature = input;
        self
    }
    /// <p>The identifier of the bot associated with this slot type.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The identifier of the bot associated with this slot type.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The identifier of the bot version associated with this slot type.</p>
    pub fn bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_version = Some(input.into());
        self
    }
    /// <p>The identifier of the bot version associated with this slot type.</p>
    pub fn set_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The identifier of the language and locale that the slot type will be used in. The string must match one of the supported locales. All of the bots, intents, and slots used by the slot type must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn locale_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.locale_id = Some(input.into());
        self
    }
    /// <p>The identifier of the language and locale that the slot type will be used in. The string must match one of the supported locales. All of the bots, intents, and slots used by the slot type must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn set_locale_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>Sets the type of external information used to create the slot type.</p>
    pub fn external_source_setting(mut self, input: crate::types::ExternalSourceSetting) -> Self {
        self.external_source_setting = Some(input);
        self
    }
    /// <p>Sets the type of external information used to create the slot type.</p>
    pub fn set_external_source_setting(
        mut self,
        input: std::option::Option<crate::types::ExternalSourceSetting>,
    ) -> Self {
        self.external_source_setting = input;
        self
    }
    /// <p>Specifications for a composite slot type.</p>
    pub fn composite_slot_type_setting(
        mut self,
        input: crate::types::CompositeSlotTypeSetting,
    ) -> Self {
        self.composite_slot_type_setting = Some(input);
        self
    }
    /// <p>Specifications for a composite slot type.</p>
    pub fn set_composite_slot_type_setting(
        mut self,
        input: std::option::Option<crate::types::CompositeSlotTypeSetting>,
    ) -> Self {
        self.composite_slot_type_setting = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateSlotTypeInput`](crate::operation::create_slot_type::CreateSlotTypeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_slot_type::CreateSlotTypeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_slot_type::CreateSlotTypeInput {
            slot_type_name: self.slot_type_name,
            description: self.description,
            slot_type_values: self.slot_type_values,
            value_selection_setting: self.value_selection_setting,
            parent_slot_type_signature: self.parent_slot_type_signature,
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
            external_source_setting: self.external_source_setting,
            composite_slot_type_setting: self.composite_slot_type_setting,
        })
    }
}
