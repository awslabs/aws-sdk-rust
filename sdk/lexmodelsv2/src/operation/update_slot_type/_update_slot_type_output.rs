// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSlotTypeOutput {
    /// <p>The unique identifier of the updated slot type.</p>
    pub slot_type_id: ::std::option::Option<::std::string::String>,
    /// <p>The updated name of the slot type.</p>
    pub slot_type_name: ::std::option::Option<::std::string::String>,
    /// <p>The updated description of the slot type.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The updated values that the slot type provides.</p>
    pub slot_type_values: ::std::option::Option<::std::vec::Vec<crate::types::SlotTypeValue>>,
    /// <p>The updated strategy that Amazon Lex uses to determine which value to select from the slot type.</p>
    pub value_selection_setting: ::std::option::Option<crate::types::SlotValueSelectionSetting>,
    /// <p>The updated signature of the built-in slot type that is the parent of this slot type.</p>
    pub parent_slot_type_signature: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the bot that contains the slot type.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the bot that contains the slot type. This is always <code>DRAFT</code>.</p>
    pub bot_version: ::std::option::Option<::std::string::String>,
    /// <p>The language and locale of the updated slot type.</p>
    pub locale_id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of the date and time that the slot type was created.</p>
    pub creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp of the date and time that the slot type was last updated.</p>
    pub last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Provides information about the external source of the slot type's definition.</p>
    pub external_source_setting: ::std::option::Option<crate::types::ExternalSourceSetting>,
    /// <p>Specifications for a composite slot type.</p>
    pub composite_slot_type_setting: ::std::option::Option<crate::types::CompositeSlotTypeSetting>,
    _request_id: Option<String>,
}
impl UpdateSlotTypeOutput {
    /// <p>The unique identifier of the updated slot type.</p>
    pub fn slot_type_id(&self) -> ::std::option::Option<&str> {
        self.slot_type_id.as_deref()
    }
    /// <p>The updated name of the slot type.</p>
    pub fn slot_type_name(&self) -> ::std::option::Option<&str> {
        self.slot_type_name.as_deref()
    }
    /// <p>The updated description of the slot type.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated values that the slot type provides.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.slot_type_values.is_none()`.
    pub fn slot_type_values(&self) -> &[crate::types::SlotTypeValue] {
        self.slot_type_values.as_deref().unwrap_or_default()
    }
    /// <p>The updated strategy that Amazon Lex uses to determine which value to select from the slot type.</p>
    pub fn value_selection_setting(&self) -> ::std::option::Option<&crate::types::SlotValueSelectionSetting> {
        self.value_selection_setting.as_ref()
    }
    /// <p>The updated signature of the built-in slot type that is the parent of this slot type.</p>
    pub fn parent_slot_type_signature(&self) -> ::std::option::Option<&str> {
        self.parent_slot_type_signature.as_deref()
    }
    /// <p>The identifier of the bot that contains the slot type.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The version of the bot that contains the slot type. This is always <code>DRAFT</code>.</p>
    pub fn bot_version(&self) -> ::std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The language and locale of the updated slot type.</p>
    pub fn locale_id(&self) -> ::std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p>The timestamp of the date and time that the slot type was created.</p>
    pub fn creation_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>A timestamp of the date and time that the slot type was last updated.</p>
    pub fn last_updated_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
    /// <p>Provides information about the external source of the slot type's definition.</p>
    pub fn external_source_setting(&self) -> ::std::option::Option<&crate::types::ExternalSourceSetting> {
        self.external_source_setting.as_ref()
    }
    /// <p>Specifications for a composite slot type.</p>
    pub fn composite_slot_type_setting(&self) -> ::std::option::Option<&crate::types::CompositeSlotTypeSetting> {
        self.composite_slot_type_setting.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for UpdateSlotTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSlotTypeOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSlotTypeOutput`](crate::operation::update_slot_type::UpdateSlotTypeOutput).
    pub fn builder() -> crate::operation::update_slot_type::builders::UpdateSlotTypeOutputBuilder {
        crate::operation::update_slot_type::builders::UpdateSlotTypeOutputBuilder::default()
    }
}

/// A builder for [`UpdateSlotTypeOutput`](crate::operation::update_slot_type::UpdateSlotTypeOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateSlotTypeOutputBuilder {
    pub(crate) slot_type_id: ::std::option::Option<::std::string::String>,
    pub(crate) slot_type_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) slot_type_values: ::std::option::Option<::std::vec::Vec<crate::types::SlotTypeValue>>,
    pub(crate) value_selection_setting: ::std::option::Option<crate::types::SlotValueSelectionSetting>,
    pub(crate) parent_slot_type_signature: ::std::option::Option<::std::string::String>,
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_version: ::std::option::Option<::std::string::String>,
    pub(crate) locale_id: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) external_source_setting: ::std::option::Option<crate::types::ExternalSourceSetting>,
    pub(crate) composite_slot_type_setting: ::std::option::Option<crate::types::CompositeSlotTypeSetting>,
    _request_id: Option<String>,
}
impl UpdateSlotTypeOutputBuilder {
    /// <p>The unique identifier of the updated slot type.</p>
    pub fn slot_type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slot_type_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the updated slot type.</p>
    pub fn set_slot_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slot_type_id = input;
        self
    }
    /// <p>The unique identifier of the updated slot type.</p>
    pub fn get_slot_type_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.slot_type_id
    }
    /// <p>The updated name of the slot type.</p>
    pub fn slot_type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slot_type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated name of the slot type.</p>
    pub fn set_slot_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slot_type_name = input;
        self
    }
    /// <p>The updated name of the slot type.</p>
    pub fn get_slot_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.slot_type_name
    }
    /// <p>The updated description of the slot type.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated description of the slot type.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated description of the slot type.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `slot_type_values`.
    ///
    /// To override the contents of this collection use [`set_slot_type_values`](Self::set_slot_type_values).
    ///
    /// <p>The updated values that the slot type provides.</p>
    pub fn slot_type_values(mut self, input: crate::types::SlotTypeValue) -> Self {
        let mut v = self.slot_type_values.unwrap_or_default();
        v.push(input);
        self.slot_type_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated values that the slot type provides.</p>
    pub fn set_slot_type_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SlotTypeValue>>) -> Self {
        self.slot_type_values = input;
        self
    }
    /// <p>The updated values that the slot type provides.</p>
    pub fn get_slot_type_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SlotTypeValue>> {
        &self.slot_type_values
    }
    /// <p>The updated strategy that Amazon Lex uses to determine which value to select from the slot type.</p>
    pub fn value_selection_setting(mut self, input: crate::types::SlotValueSelectionSetting) -> Self {
        self.value_selection_setting = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated strategy that Amazon Lex uses to determine which value to select from the slot type.</p>
    pub fn set_value_selection_setting(mut self, input: ::std::option::Option<crate::types::SlotValueSelectionSetting>) -> Self {
        self.value_selection_setting = input;
        self
    }
    /// <p>The updated strategy that Amazon Lex uses to determine which value to select from the slot type.</p>
    pub fn get_value_selection_setting(&self) -> &::std::option::Option<crate::types::SlotValueSelectionSetting> {
        &self.value_selection_setting
    }
    /// <p>The updated signature of the built-in slot type that is the parent of this slot type.</p>
    pub fn parent_slot_type_signature(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_slot_type_signature = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated signature of the built-in slot type that is the parent of this slot type.</p>
    pub fn set_parent_slot_type_signature(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_slot_type_signature = input;
        self
    }
    /// <p>The updated signature of the built-in slot type that is the parent of this slot type.</p>
    pub fn get_parent_slot_type_signature(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_slot_type_signature
    }
    /// <p>The identifier of the bot that contains the slot type.</p>
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bot that contains the slot type.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The identifier of the bot that contains the slot type.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The version of the bot that contains the slot type. This is always <code>DRAFT</code>.</p>
    pub fn bot_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the bot that contains the slot type. This is always <code>DRAFT</code>.</p>
    pub fn set_bot_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The version of the bot that contains the slot type. This is always <code>DRAFT</code>.</p>
    pub fn get_bot_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_version
    }
    /// <p>The language and locale of the updated slot type.</p>
    pub fn locale_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language and locale of the updated slot type.</p>
    pub fn set_locale_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The language and locale of the updated slot type.</p>
    pub fn get_locale_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale_id
    }
    /// <p>The timestamp of the date and time that the slot type was created.</p>
    pub fn creation_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the date and time that the slot type was created.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The timestamp of the date and time that the slot type was created.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date_time
    }
    /// <p>A timestamp of the date and time that the slot type was last updated.</p>
    pub fn last_updated_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp of the date and time that the slot type was last updated.</p>
    pub fn set_last_updated_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>A timestamp of the date and time that the slot type was last updated.</p>
    pub fn get_last_updated_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date_time
    }
    /// <p>Provides information about the external source of the slot type's definition.</p>
    pub fn external_source_setting(mut self, input: crate::types::ExternalSourceSetting) -> Self {
        self.external_source_setting = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides information about the external source of the slot type's definition.</p>
    pub fn set_external_source_setting(mut self, input: ::std::option::Option<crate::types::ExternalSourceSetting>) -> Self {
        self.external_source_setting = input;
        self
    }
    /// <p>Provides information about the external source of the slot type's definition.</p>
    pub fn get_external_source_setting(&self) -> &::std::option::Option<crate::types::ExternalSourceSetting> {
        &self.external_source_setting
    }
    /// <p>Specifications for a composite slot type.</p>
    pub fn composite_slot_type_setting(mut self, input: crate::types::CompositeSlotTypeSetting) -> Self {
        self.composite_slot_type_setting = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifications for a composite slot type.</p>
    pub fn set_composite_slot_type_setting(mut self, input: ::std::option::Option<crate::types::CompositeSlotTypeSetting>) -> Self {
        self.composite_slot_type_setting = input;
        self
    }
    /// <p>Specifications for a composite slot type.</p>
    pub fn get_composite_slot_type_setting(&self) -> &::std::option::Option<crate::types::CompositeSlotTypeSetting> {
        &self.composite_slot_type_setting
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateSlotTypeOutput`](crate::operation::update_slot_type::UpdateSlotTypeOutput).
    pub fn build(self) -> crate::operation::update_slot_type::UpdateSlotTypeOutput {
        crate::operation::update_slot_type::UpdateSlotTypeOutput {
            slot_type_id: self.slot_type_id,
            slot_type_name: self.slot_type_name,
            description: self.description,
            slot_type_values: self.slot_type_values,
            value_selection_setting: self.value_selection_setting,
            parent_slot_type_signature: self.parent_slot_type_signature,
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
            creation_date_time: self.creation_date_time,
            last_updated_date_time: self.last_updated_date_time,
            external_source_setting: self.external_source_setting,
            composite_slot_type_setting: self.composite_slot_type_setting,
            _request_id: self._request_id,
        }
    }
}
