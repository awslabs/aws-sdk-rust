// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateUploadUrlOutput {
    /// <p>An identifier for a unique import job. Use it when you call the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_StartImport.html">StartImport</a> operation.</p>
    #[doc(hidden)]
    pub import_id: std::option::Option<std::string::String>,
    /// <p>A pre-signed S3 write URL. Upload the zip archive file that contains the definition of your bot or bot locale.</p>
    #[doc(hidden)]
    pub upload_url: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateUploadUrlOutput {
    /// <p>An identifier for a unique import job. Use it when you call the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_StartImport.html">StartImport</a> operation.</p>
    pub fn import_id(&self) -> std::option::Option<&str> {
        self.import_id.as_deref()
    }
    /// <p>A pre-signed S3 write URL. Upload the zip archive file that contains the definition of your bot or bot locale.</p>
    pub fn upload_url(&self) -> std::option::Option<&str> {
        self.upload_url.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateUploadUrlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateUploadUrlOutput {
    /// Creates a new builder-style object to manufacture [`CreateUploadUrlOutput`](crate::operation::create_upload_url::CreateUploadUrlOutput).
    pub fn builder() -> crate::operation::create_upload_url::builders::CreateUploadUrlOutputBuilder
    {
        crate::operation::create_upload_url::builders::CreateUploadUrlOutputBuilder::default()
    }
}

/// A builder for [`CreateUploadUrlOutput`](crate::operation::create_upload_url::CreateUploadUrlOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateUploadUrlOutputBuilder {
    pub(crate) import_id: std::option::Option<std::string::String>,
    pub(crate) upload_url: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateUploadUrlOutputBuilder {
    /// <p>An identifier for a unique import job. Use it when you call the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_StartImport.html">StartImport</a> operation.</p>
    pub fn import_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.import_id = Some(input.into());
        self
    }
    /// <p>An identifier for a unique import job. Use it when you call the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_StartImport.html">StartImport</a> operation.</p>
    pub fn set_import_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.import_id = input;
        self
    }
    /// <p>A pre-signed S3 write URL. Upload the zip archive file that contains the definition of your bot or bot locale.</p>
    pub fn upload_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.upload_url = Some(input.into());
        self
    }
    /// <p>A pre-signed S3 write URL. Upload the zip archive file that contains the definition of your bot or bot locale.</p>
    pub fn set_upload_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.upload_url = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateUploadUrlOutput`](crate::operation::create_upload_url::CreateUploadUrlOutput).
    pub fn build(self) -> crate::operation::create_upload_url::CreateUploadUrlOutput {
        crate::operation::create_upload_url::CreateUploadUrlOutput {
            import_id: self.import_id,
            upload_url: self.upload_url,
            _request_id: self._request_id,
        }
    }
}
