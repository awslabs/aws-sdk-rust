// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTestSetRecordsOutput {
    /// <p>The list of records from the test set.</p>
    pub test_set_records: ::std::option::Option<::std::vec::Vec<crate::types::TestSetTurnRecord>>,
    /// <p>A token that indicates whether there are more records to return in a response to the ListTestSetRecords operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListTestSetRecords operation request to get the next page of records.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListTestSetRecordsOutput {
    /// <p>The list of records from the test set.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.test_set_records.is_none()`.
    pub fn test_set_records(&self) -> &[crate::types::TestSetTurnRecord] {
        self.test_set_records.as_deref().unwrap_or_default()
    }
    /// <p>A token that indicates whether there are more records to return in a response to the ListTestSetRecords operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListTestSetRecords operation request to get the next page of records.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListTestSetRecordsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTestSetRecordsOutput {
    /// Creates a new builder-style object to manufacture [`ListTestSetRecordsOutput`](crate::operation::list_test_set_records::ListTestSetRecordsOutput).
    pub fn builder() -> crate::operation::list_test_set_records::builders::ListTestSetRecordsOutputBuilder {
        crate::operation::list_test_set_records::builders::ListTestSetRecordsOutputBuilder::default()
    }
}

/// A builder for [`ListTestSetRecordsOutput`](crate::operation::list_test_set_records::ListTestSetRecordsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListTestSetRecordsOutputBuilder {
    pub(crate) test_set_records: ::std::option::Option<::std::vec::Vec<crate::types::TestSetTurnRecord>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListTestSetRecordsOutputBuilder {
    /// Appends an item to `test_set_records`.
    ///
    /// To override the contents of this collection use [`set_test_set_records`](Self::set_test_set_records).
    ///
    /// <p>The list of records from the test set.</p>
    pub fn test_set_records(mut self, input: crate::types::TestSetTurnRecord) -> Self {
        let mut v = self.test_set_records.unwrap_or_default();
        v.push(input);
        self.test_set_records = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of records from the test set.</p>
    pub fn set_test_set_records(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TestSetTurnRecord>>) -> Self {
        self.test_set_records = input;
        self
    }
    /// <p>The list of records from the test set.</p>
    pub fn get_test_set_records(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TestSetTurnRecord>> {
        &self.test_set_records
    }
    /// <p>A token that indicates whether there are more records to return in a response to the ListTestSetRecords operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListTestSetRecords operation request to get the next page of records.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that indicates whether there are more records to return in a response to the ListTestSetRecords operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListTestSetRecords operation request to get the next page of records.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token that indicates whether there are more records to return in a response to the ListTestSetRecords operation. If the nextToken field is present, you send the contents as the nextToken parameter of a ListTestSetRecords operation request to get the next page of records.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListTestSetRecordsOutput`](crate::operation::list_test_set_records::ListTestSetRecordsOutput).
    pub fn build(self) -> crate::operation::list_test_set_records::ListTestSetRecordsOutput {
        crate::operation::list_test_set_records::ListTestSetRecordsOutput {
            test_set_records: self.test_set_records,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
