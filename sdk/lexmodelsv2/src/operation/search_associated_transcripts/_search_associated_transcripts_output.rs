// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchAssociatedTranscriptsOutput {
    /// <p>The unique identifier of the bot associated with the transcripts that you are searching.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the bot containing the transcripts that you are searching.</p>
    pub bot_version: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </p>
    pub locale_id: ::std::option::Option<::std::string::String>,
    /// <p> The unique identifier of the bot recommendation associated with the transcripts to search.</p>
    pub bot_recommendation_id: ::std::option::Option<::std::string::String>,
    /// <p>A index that indicates whether there are more results to return in a response to the SearchAssociatedTranscripts operation. If the nextIndex field is present, you send the contents as the nextIndex parameter of a SearchAssociatedTranscriptsRequest operation to get the next page of results.</p>
    pub next_index: ::std::option::Option<i32>,
    /// <p>The object that contains the associated transcript that meet the criteria you specified.</p>
    pub associated_transcripts: ::std::option::Option<::std::vec::Vec<crate::types::AssociatedTranscript>>,
    /// <p>The total number of transcripts returned by the search.</p>
    pub total_results: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl SearchAssociatedTranscriptsOutput {
    /// <p>The unique identifier of the bot associated with the transcripts that you are searching.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The version of the bot containing the transcripts that you are searching.</p>
    pub fn bot_version(&self) -> ::std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </p>
    pub fn locale_id(&self) -> ::std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p> The unique identifier of the bot recommendation associated with the transcripts to search.</p>
    pub fn bot_recommendation_id(&self) -> ::std::option::Option<&str> {
        self.bot_recommendation_id.as_deref()
    }
    /// <p>A index that indicates whether there are more results to return in a response to the SearchAssociatedTranscripts operation. If the nextIndex field is present, you send the contents as the nextIndex parameter of a SearchAssociatedTranscriptsRequest operation to get the next page of results.</p>
    pub fn next_index(&self) -> ::std::option::Option<i32> {
        self.next_index
    }
    /// <p>The object that contains the associated transcript that meet the criteria you specified.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.associated_transcripts.is_none()`.
    pub fn associated_transcripts(&self) -> &[crate::types::AssociatedTranscript] {
        self.associated_transcripts.as_deref().unwrap_or_default()
    }
    /// <p>The total number of transcripts returned by the search.</p>
    pub fn total_results(&self) -> ::std::option::Option<i32> {
        self.total_results
    }
}
impl ::aws_http::request_id::RequestId for SearchAssociatedTranscriptsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchAssociatedTranscriptsOutput {
    /// Creates a new builder-style object to manufacture [`SearchAssociatedTranscriptsOutput`](crate::operation::search_associated_transcripts::SearchAssociatedTranscriptsOutput).
    pub fn builder() -> crate::operation::search_associated_transcripts::builders::SearchAssociatedTranscriptsOutputBuilder {
        crate::operation::search_associated_transcripts::builders::SearchAssociatedTranscriptsOutputBuilder::default()
    }
}

/// A builder for [`SearchAssociatedTranscriptsOutput`](crate::operation::search_associated_transcripts::SearchAssociatedTranscriptsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchAssociatedTranscriptsOutputBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_version: ::std::option::Option<::std::string::String>,
    pub(crate) locale_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_recommendation_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_index: ::std::option::Option<i32>,
    pub(crate) associated_transcripts: ::std::option::Option<::std::vec::Vec<crate::types::AssociatedTranscript>>,
    pub(crate) total_results: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl SearchAssociatedTranscriptsOutputBuilder {
    /// <p>The unique identifier of the bot associated with the transcripts that you are searching.</p>
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot associated with the transcripts that you are searching.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The unique identifier of the bot associated with the transcripts that you are searching.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The version of the bot containing the transcripts that you are searching.</p>
    pub fn bot_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the bot containing the transcripts that you are searching.</p>
    pub fn set_bot_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The version of the bot containing the transcripts that you are searching.</p>
    pub fn get_bot_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_version
    }
    /// <p>The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </p>
    pub fn locale_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </p>
    pub fn set_locale_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </p>
    pub fn get_locale_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale_id
    }
    /// <p> The unique identifier of the bot recommendation associated with the transcripts to search.</p>
    pub fn bot_recommendation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_recommendation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique identifier of the bot recommendation associated with the transcripts to search.</p>
    pub fn set_bot_recommendation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_recommendation_id = input;
        self
    }
    /// <p> The unique identifier of the bot recommendation associated with the transcripts to search.</p>
    pub fn get_bot_recommendation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_recommendation_id
    }
    /// <p>A index that indicates whether there are more results to return in a response to the SearchAssociatedTranscripts operation. If the nextIndex field is present, you send the contents as the nextIndex parameter of a SearchAssociatedTranscriptsRequest operation to get the next page of results.</p>
    pub fn next_index(mut self, input: i32) -> Self {
        self.next_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>A index that indicates whether there are more results to return in a response to the SearchAssociatedTranscripts operation. If the nextIndex field is present, you send the contents as the nextIndex parameter of a SearchAssociatedTranscriptsRequest operation to get the next page of results.</p>
    pub fn set_next_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.next_index = input;
        self
    }
    /// <p>A index that indicates whether there are more results to return in a response to the SearchAssociatedTranscripts operation. If the nextIndex field is present, you send the contents as the nextIndex parameter of a SearchAssociatedTranscriptsRequest operation to get the next page of results.</p>
    pub fn get_next_index(&self) -> &::std::option::Option<i32> {
        &self.next_index
    }
    /// Appends an item to `associated_transcripts`.
    ///
    /// To override the contents of this collection use [`set_associated_transcripts`](Self::set_associated_transcripts).
    ///
    /// <p>The object that contains the associated transcript that meet the criteria you specified.</p>
    pub fn associated_transcripts(mut self, input: crate::types::AssociatedTranscript) -> Self {
        let mut v = self.associated_transcripts.unwrap_or_default();
        v.push(input);
        self.associated_transcripts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The object that contains the associated transcript that meet the criteria you specified.</p>
    pub fn set_associated_transcripts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssociatedTranscript>>) -> Self {
        self.associated_transcripts = input;
        self
    }
    /// <p>The object that contains the associated transcript that meet the criteria you specified.</p>
    pub fn get_associated_transcripts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssociatedTranscript>> {
        &self.associated_transcripts
    }
    /// <p>The total number of transcripts returned by the search.</p>
    pub fn total_results(mut self, input: i32) -> Self {
        self.total_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of transcripts returned by the search.</p>
    pub fn set_total_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_results = input;
        self
    }
    /// <p>The total number of transcripts returned by the search.</p>
    pub fn get_total_results(&self) -> &::std::option::Option<i32> {
        &self.total_results
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SearchAssociatedTranscriptsOutput`](crate::operation::search_associated_transcripts::SearchAssociatedTranscriptsOutput).
    pub fn build(self) -> crate::operation::search_associated_transcripts::SearchAssociatedTranscriptsOutput {
        crate::operation::search_associated_transcripts::SearchAssociatedTranscriptsOutput {
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
            bot_recommendation_id: self.bot_recommendation_id,
            next_index: self.next_index,
            associated_transcripts: self.associated_transcripts,
            total_results: self.total_results,
            _request_id: self._request_id,
        }
    }
}
