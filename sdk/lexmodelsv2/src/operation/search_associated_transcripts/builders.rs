// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::search_associated_transcripts::_search_associated_transcripts_output::SearchAssociatedTranscriptsOutputBuilder;

pub use crate::operation::search_associated_transcripts::_search_associated_transcripts_input::SearchAssociatedTranscriptsInputBuilder;

/// Fluent builder constructing a request to `SearchAssociatedTranscripts`.
///
/// <p>Search for associated transcripts that meet the specified criteria.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SearchAssociatedTranscriptsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::search_associated_transcripts::builders::SearchAssociatedTranscriptsInputBuilder
            }
impl SearchAssociatedTranscriptsFluentBuilder {
    /// Creates a new `SearchAssociatedTranscripts`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::search_associated_transcripts::SearchAssociatedTranscripts,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::search_associated_transcripts::SearchAssociatedTranscriptsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::search_associated_transcripts::SearchAssociatedTranscriptsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::search_associated_transcripts::SearchAssociatedTranscriptsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the bot associated with the transcripts that you are searching.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bot_id(input.into());
        self
    }
    /// <p>The unique identifier of the bot associated with the transcripts that you are searching.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_bot_id(input);
        self
    }
    /// <p>The version of the bot containing the transcripts that you are searching.</p>
    pub fn bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bot_version(input.into());
        self
    }
    /// <p>The version of the bot containing the transcripts that you are searching.</p>
    pub fn set_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_bot_version(input);
        self
    }
    /// <p>The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </p>
    pub fn locale_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.locale_id(input.into());
        self
    }
    /// <p>The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> </p>
    pub fn set_locale_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_locale_id(input);
        self
    }
    /// <p>The unique identifier of the bot recommendation associated with the transcripts to search.</p>
    pub fn bot_recommendation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bot_recommendation_id(input.into());
        self
    }
    /// <p>The unique identifier of the bot recommendation associated with the transcripts to search.</p>
    pub fn set_bot_recommendation_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_bot_recommendation_id(input);
        self
    }
    /// <p>How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.</p>
    pub fn search_order(mut self, input: crate::types::SearchOrder) -> Self {
        self.inner = self.inner.search_order(input);
        self
    }
    /// <p>How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.</p>
    pub fn set_search_order(
        mut self,
        input: std::option::Option<crate::types::SearchOrder>,
    ) -> Self {
        self.inner = self.inner.set_search_order(input);
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A list of filter objects.</p>
    pub fn filters(mut self, input: crate::types::AssociatedTranscriptFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A list of filter objects.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssociatedTranscriptFilter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the response from the SearchAssociatedTranscriptsRequest operation contains more results than specified in the maxResults parameter, an index is returned in the response. Use that index in the nextIndex parameter to return the next page of results.</p>
    pub fn next_index(mut self, input: i32) -> Self {
        self.inner = self.inner.next_index(input);
        self
    }
    /// <p>If the response from the SearchAssociatedTranscriptsRequest operation contains more results than specified in the maxResults parameter, an index is returned in the response. Use that index in the nextIndex parameter to return the next page of results.</p>
    pub fn set_next_index(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_next_index(input);
        self
    }
}
