// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateResourcePolicyInput {
    /// <p>The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html"> IAM JSON policy reference </a>. </p>
    /// <p>If the policy isn't valid, Amazon Lex returns a validation exception.</p>
    #[doc(hidden)]
    pub policy: std::option::Option<std::string::String>,
    /// <p>The identifier of the revision of the policy to update. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.</p>
    /// <p>If you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.</p>
    #[doc(hidden)]
    pub expected_revision_id: std::option::Option<std::string::String>,
}
impl UpdateResourcePolicyInput {
    /// <p>The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html"> IAM JSON policy reference </a>. </p>
    /// <p>If the policy isn't valid, Amazon Lex returns a validation exception.</p>
    pub fn policy(&self) -> std::option::Option<&str> {
        self.policy.as_deref()
    }
    /// <p>The identifier of the revision of the policy to update. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.</p>
    /// <p>If you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.</p>
    pub fn expected_revision_id(&self) -> std::option::Option<&str> {
        self.expected_revision_id.as_deref()
    }
}
impl UpdateResourcePolicyInput {
    /// Creates a new builder-style object to manufacture [`UpdateResourcePolicyInput`](crate::operation::update_resource_policy::UpdateResourcePolicyInput).
    pub fn builder(
    ) -> crate::operation::update_resource_policy::builders::UpdateResourcePolicyInputBuilder {
        crate::operation::update_resource_policy::builders::UpdateResourcePolicyInputBuilder::default()
    }
}

/// A builder for [`UpdateResourcePolicyInput`](crate::operation::update_resource_policy::UpdateResourcePolicyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateResourcePolicyInputBuilder {
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) policy: std::option::Option<std::string::String>,
    pub(crate) expected_revision_id: std::option::Option<std::string::String>,
}
impl UpdateResourcePolicyInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html"> IAM JSON policy reference </a>. </p>
    /// <p>If the policy isn't valid, Amazon Lex returns a validation exception.</p>
    pub fn policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy = Some(input.into());
        self
    }
    /// <p>A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html"> IAM JSON policy reference </a>. </p>
    /// <p>If the policy isn't valid, Amazon Lex returns a validation exception.</p>
    pub fn set_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy = input;
        self
    }
    /// <p>The identifier of the revision of the policy to update. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.</p>
    /// <p>If you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.</p>
    pub fn expected_revision_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.expected_revision_id = Some(input.into());
        self
    }
    /// <p>The identifier of the revision of the policy to update. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.</p>
    /// <p>If you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.</p>
    pub fn set_expected_revision_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.expected_revision_id = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateResourcePolicyInput`](crate::operation::update_resource_policy::UpdateResourcePolicyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_resource_policy::UpdateResourcePolicyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_resource_policy::UpdateResourcePolicyInput {
                resource_arn: self.resource_arn,
                policy: self.policy,
                expected_revision_id: self.expected_revision_id,
            },
        )
    }
}
