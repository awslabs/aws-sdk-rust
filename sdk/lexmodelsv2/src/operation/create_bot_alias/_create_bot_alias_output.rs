// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBotAliasOutput {
    /// <p>The unique identifier of the bot alias.</p>
    #[doc(hidden)]
    pub bot_alias_id: std::option::Option<std::string::String>,
    /// <p>The name specified for the bot alias.</p>
    #[doc(hidden)]
    pub bot_alias_name: std::option::Option<std::string::String>,
    /// <p>The description specified for the bot alias.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The version of the bot associated with this alias.</p>
    #[doc(hidden)]
    pub bot_version: std::option::Option<std::string::String>,
    /// <p>Configuration information for a specific locale.</p>
    #[doc(hidden)]
    pub bot_alias_locale_settings: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::BotAliasLocaleSettings>,
    >,
    /// <p>The conversation log settings specified for the alias.</p>
    #[doc(hidden)]
    pub conversation_log_settings: std::option::Option<crate::types::ConversationLogSettings>,
    /// <p>Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.</p>
    #[doc(hidden)]
    pub sentiment_analysis_settings: std::option::Option<crate::types::SentimentAnalysisSettings>,
    /// <p>The current status of the alias. The alias is first put into the <code>Creating</code> state. When the alias is ready to be used, it is put into the <code>Available</code> state. You can use the <code>DescribeBotAlias</code> operation to get the current state of an alias.</p>
    #[doc(hidden)]
    pub bot_alias_status: std::option::Option<crate::types::BotAliasStatus>,
    /// <p>The unique identifier of the bot that this alias applies to.</p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>A Unix timestamp indicating the date and time that the bot alias was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A list of tags associated with the bot alias.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateBotAliasOutput {
    /// <p>The unique identifier of the bot alias.</p>
    pub fn bot_alias_id(&self) -> std::option::Option<&str> {
        self.bot_alias_id.as_deref()
    }
    /// <p>The name specified for the bot alias.</p>
    pub fn bot_alias_name(&self) -> std::option::Option<&str> {
        self.bot_alias_name.as_deref()
    }
    /// <p>The description specified for the bot alias.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The version of the bot associated with this alias.</p>
    pub fn bot_version(&self) -> std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>Configuration information for a specific locale.</p>
    pub fn bot_alias_locale_settings(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::BotAliasLocaleSettings>,
    > {
        self.bot_alias_locale_settings.as_ref()
    }
    /// <p>The conversation log settings specified for the alias.</p>
    pub fn conversation_log_settings(
        &self,
    ) -> std::option::Option<&crate::types::ConversationLogSettings> {
        self.conversation_log_settings.as_ref()
    }
    /// <p>Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.</p>
    pub fn sentiment_analysis_settings(
        &self,
    ) -> std::option::Option<&crate::types::SentimentAnalysisSettings> {
        self.sentiment_analysis_settings.as_ref()
    }
    /// <p>The current status of the alias. The alias is first put into the <code>Creating</code> state. When the alias is ready to be used, it is put into the <code>Available</code> state. You can use the <code>DescribeBotAlias</code> operation to get the current state of an alias.</p>
    pub fn bot_alias_status(&self) -> std::option::Option<&crate::types::BotAliasStatus> {
        self.bot_alias_status.as_ref()
    }
    /// <p>The unique identifier of the bot that this alias applies to.</p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>A Unix timestamp indicating the date and time that the bot alias was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>A list of tags associated with the bot alias.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateBotAliasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateBotAliasOutput {
    /// Creates a new builder-style object to manufacture [`CreateBotAliasOutput`](crate::operation::create_bot_alias::CreateBotAliasOutput).
    pub fn builder() -> crate::operation::create_bot_alias::builders::CreateBotAliasOutputBuilder {
        crate::operation::create_bot_alias::builders::CreateBotAliasOutputBuilder::default()
    }
}

/// A builder for [`CreateBotAliasOutput`](crate::operation::create_bot_alias::CreateBotAliasOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateBotAliasOutputBuilder {
    pub(crate) bot_alias_id: std::option::Option<std::string::String>,
    pub(crate) bot_alias_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) bot_version: std::option::Option<std::string::String>,
    pub(crate) bot_alias_locale_settings: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::BotAliasLocaleSettings>,
    >,
    pub(crate) conversation_log_settings:
        std::option::Option<crate::types::ConversationLogSettings>,
    pub(crate) sentiment_analysis_settings:
        std::option::Option<crate::types::SentimentAnalysisSettings>,
    pub(crate) bot_alias_status: std::option::Option<crate::types::BotAliasStatus>,
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateBotAliasOutputBuilder {
    /// <p>The unique identifier of the bot alias.</p>
    pub fn bot_alias_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_alias_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot alias.</p>
    pub fn set_bot_alias_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_alias_id = input;
        self
    }
    /// <p>The name specified for the bot alias.</p>
    pub fn bot_alias_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_alias_name = Some(input.into());
        self
    }
    /// <p>The name specified for the bot alias.</p>
    pub fn set_bot_alias_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_alias_name = input;
        self
    }
    /// <p>The description specified for the bot alias.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description specified for the bot alias.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The version of the bot associated with this alias.</p>
    pub fn bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_version = Some(input.into());
        self
    }
    /// <p>The version of the bot associated with this alias.</p>
    pub fn set_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// Adds a key-value pair to `bot_alias_locale_settings`.
    ///
    /// To override the contents of this collection use [`set_bot_alias_locale_settings`](Self::set_bot_alias_locale_settings).
    ///
    /// <p>Configuration information for a specific locale.</p>
    pub fn bot_alias_locale_settings(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::BotAliasLocaleSettings,
    ) -> Self {
        let mut hash_map = self.bot_alias_locale_settings.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.bot_alias_locale_settings = Some(hash_map);
        self
    }
    /// <p>Configuration information for a specific locale.</p>
    pub fn set_bot_alias_locale_settings(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::BotAliasLocaleSettings>,
        >,
    ) -> Self {
        self.bot_alias_locale_settings = input;
        self
    }
    /// <p>The conversation log settings specified for the alias.</p>
    pub fn conversation_log_settings(
        mut self,
        input: crate::types::ConversationLogSettings,
    ) -> Self {
        self.conversation_log_settings = Some(input);
        self
    }
    /// <p>The conversation log settings specified for the alias.</p>
    pub fn set_conversation_log_settings(
        mut self,
        input: std::option::Option<crate::types::ConversationLogSettings>,
    ) -> Self {
        self.conversation_log_settings = input;
        self
    }
    /// <p>Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.</p>
    pub fn sentiment_analysis_settings(
        mut self,
        input: crate::types::SentimentAnalysisSettings,
    ) -> Self {
        self.sentiment_analysis_settings = Some(input);
        self
    }
    /// <p>Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.</p>
    pub fn set_sentiment_analysis_settings(
        mut self,
        input: std::option::Option<crate::types::SentimentAnalysisSettings>,
    ) -> Self {
        self.sentiment_analysis_settings = input;
        self
    }
    /// <p>The current status of the alias. The alias is first put into the <code>Creating</code> state. When the alias is ready to be used, it is put into the <code>Available</code> state. You can use the <code>DescribeBotAlias</code> operation to get the current state of an alias.</p>
    pub fn bot_alias_status(mut self, input: crate::types::BotAliasStatus) -> Self {
        self.bot_alias_status = Some(input);
        self
    }
    /// <p>The current status of the alias. The alias is first put into the <code>Creating</code> state. When the alias is ready to be used, it is put into the <code>Available</code> state. You can use the <code>DescribeBotAlias</code> operation to get the current state of an alias.</p>
    pub fn set_bot_alias_status(
        mut self,
        input: std::option::Option<crate::types::BotAliasStatus>,
    ) -> Self {
        self.bot_alias_status = input;
        self
    }
    /// <p>The unique identifier of the bot that this alias applies to.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot that this alias applies to.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>A Unix timestamp indicating the date and time that the bot alias was created.</p>
    pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = Some(input);
        self
    }
    /// <p>A Unix timestamp indicating the date and time that the bot alias was created.</p>
    pub fn set_creation_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date_time = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags associated with the bot alias.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A list of tags associated with the bot alias.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateBotAliasOutput`](crate::operation::create_bot_alias::CreateBotAliasOutput).
    pub fn build(self) -> crate::operation::create_bot_alias::CreateBotAliasOutput {
        crate::operation::create_bot_alias::CreateBotAliasOutput {
            bot_alias_id: self.bot_alias_id,
            bot_alias_name: self.bot_alias_name,
            description: self.description,
            bot_version: self.bot_version,
            bot_alias_locale_settings: self.bot_alias_locale_settings,
            conversation_log_settings: self.conversation_log_settings,
            sentiment_analysis_settings: self.sentiment_analysis_settings,
            bot_alias_status: self.bot_alias_status,
            bot_id: self.bot_id,
            creation_date_time: self.creation_date_time,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
