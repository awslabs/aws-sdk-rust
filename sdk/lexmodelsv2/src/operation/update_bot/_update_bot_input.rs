// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBotInput {
    /// <p>The unique identifier of the bot to update. This identifier is returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_CreateBot.html">CreateBot</a> operation.</p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>The new name of the bot. The name must be unique in the account that creates the bot.</p>
    #[doc(hidden)]
    pub bot_name: std::option::Option<std::string::String>,
    /// <p>A description of the bot.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>Provides information on additional privacy protections Amazon Lex should use with the bot's data.</p>
    #[doc(hidden)]
    pub data_privacy: std::option::Option<crate::types::DataPrivacy>,
    /// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p>
    /// <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
    #[doc(hidden)]
    pub idle_session_ttl_in_seconds: std::option::Option<i32>,
}
impl UpdateBotInput {
    /// <p>The unique identifier of the bot to update. This identifier is returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_CreateBot.html">CreateBot</a> operation.</p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The new name of the bot. The name must be unique in the account that creates the bot.</p>
    pub fn bot_name(&self) -> std::option::Option<&str> {
        self.bot_name.as_deref()
    }
    /// <p>A description of the bot.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Provides information on additional privacy protections Amazon Lex should use with the bot's data.</p>
    pub fn data_privacy(&self) -> std::option::Option<&crate::types::DataPrivacy> {
        self.data_privacy.as_ref()
    }
    /// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p>
    /// <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
    pub fn idle_session_ttl_in_seconds(&self) -> std::option::Option<i32> {
        self.idle_session_ttl_in_seconds
    }
}
impl UpdateBotInput {
    /// Creates a new builder-style object to manufacture [`UpdateBotInput`](crate::operation::update_bot::UpdateBotInput).
    pub fn builder() -> crate::operation::update_bot::builders::UpdateBotInputBuilder {
        crate::operation::update_bot::builders::UpdateBotInputBuilder::default()
    }
}

/// A builder for [`UpdateBotInput`](crate::operation::update_bot::UpdateBotInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateBotInputBuilder {
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) bot_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) data_privacy: std::option::Option<crate::types::DataPrivacy>,
    pub(crate) idle_session_ttl_in_seconds: std::option::Option<i32>,
}
impl UpdateBotInputBuilder {
    /// <p>The unique identifier of the bot to update. This identifier is returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_CreateBot.html">CreateBot</a> operation.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot to update. This identifier is returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_CreateBot.html">CreateBot</a> operation.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The new name of the bot. The name must be unique in the account that creates the bot.</p>
    pub fn bot_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_name = Some(input.into());
        self
    }
    /// <p>The new name of the bot. The name must be unique in the account that creates the bot.</p>
    pub fn set_bot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_name = input;
        self
    }
    /// <p>A description of the bot.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the bot.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>Provides information on additional privacy protections Amazon Lex should use with the bot's data.</p>
    pub fn data_privacy(mut self, input: crate::types::DataPrivacy) -> Self {
        self.data_privacy = Some(input);
        self
    }
    /// <p>Provides information on additional privacy protections Amazon Lex should use with the bot's data.</p>
    pub fn set_data_privacy(
        mut self,
        input: std::option::Option<crate::types::DataPrivacy>,
    ) -> Self {
        self.data_privacy = input;
        self
    }
    /// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p>
    /// <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
    pub fn idle_session_ttl_in_seconds(mut self, input: i32) -> Self {
        self.idle_session_ttl_in_seconds = Some(input);
        self
    }
    /// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p>
    /// <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
    pub fn set_idle_session_ttl_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.idle_session_ttl_in_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateBotInput`](crate::operation::update_bot::UpdateBotInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_bot::UpdateBotInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_bot::UpdateBotInput {
            bot_id: self.bot_id,
            bot_name: self.bot_name,
            description: self.description,
            role_arn: self.role_arn,
            data_privacy: self.data_privacy,
            idle_session_ttl_in_seconds: self.idle_session_ttl_in_seconds,
        })
    }
}
