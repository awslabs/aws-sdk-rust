// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateBotInput {
    /// <p>The unique identifier of the bot to update. This identifier is returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html">CreateBot</a> operation.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The new name of the bot. The name must be unique in the account that creates the bot.</p>
    pub bot_name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the bot.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Provides information on additional privacy protections Amazon Lex should use with the bot's data.</p>
    pub data_privacy: ::std::option::Option<crate::types::DataPrivacy>,
    /// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p>
    /// <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
    pub idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    /// <p>The type of the bot to be updated.</p>
    pub bot_type: ::std::option::Option<crate::types::BotType>,
    /// <p>The list of bot members in the network associated with the update action.</p>
    pub bot_members: ::std::option::Option<::std::vec::Vec<crate::types::BotMember>>,
}
impl UpdateBotInput {
    /// <p>The unique identifier of the bot to update. This identifier is returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html">CreateBot</a> operation.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The new name of the bot. The name must be unique in the account that creates the bot.</p>
    pub fn bot_name(&self) -> ::std::option::Option<&str> {
        self.bot_name.as_deref()
    }
    /// <p>A description of the bot.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Provides information on additional privacy protections Amazon Lex should use with the bot's data.</p>
    pub fn data_privacy(&self) -> ::std::option::Option<&crate::types::DataPrivacy> {
        self.data_privacy.as_ref()
    }
    /// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p>
    /// <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
    pub fn idle_session_ttl_in_seconds(&self) -> ::std::option::Option<i32> {
        self.idle_session_ttl_in_seconds
    }
    /// <p>The type of the bot to be updated.</p>
    pub fn bot_type(&self) -> ::std::option::Option<&crate::types::BotType> {
        self.bot_type.as_ref()
    }
    /// <p>The list of bot members in the network associated with the update action.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.bot_members.is_none()`.
    pub fn bot_members(&self) -> &[crate::types::BotMember] {
        self.bot_members.as_deref().unwrap_or_default()
    }
}
impl UpdateBotInput {
    /// Creates a new builder-style object to manufacture [`UpdateBotInput`](crate::operation::update_bot::UpdateBotInput).
    pub fn builder() -> crate::operation::update_bot::builders::UpdateBotInputBuilder {
        crate::operation::update_bot::builders::UpdateBotInputBuilder::default()
    }
}

/// A builder for [`UpdateBotInput`](crate::operation::update_bot::UpdateBotInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateBotInputBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) data_privacy: ::std::option::Option<crate::types::DataPrivacy>,
    pub(crate) idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    pub(crate) bot_type: ::std::option::Option<crate::types::BotType>,
    pub(crate) bot_members: ::std::option::Option<::std::vec::Vec<crate::types::BotMember>>,
}
impl UpdateBotInputBuilder {
    /// <p>The unique identifier of the bot to update. This identifier is returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html">CreateBot</a> operation.</p>
    /// This field is required.
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot to update. This identifier is returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html">CreateBot</a> operation.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The unique identifier of the bot to update. This identifier is returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html">CreateBot</a> operation.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The new name of the bot. The name must be unique in the account that creates the bot.</p>
    /// This field is required.
    pub fn bot_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new name of the bot. The name must be unique in the account that creates the bot.</p>
    pub fn set_bot_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_name = input;
        self
    }
    /// <p>The new name of the bot. The name must be unique in the account that creates the bot.</p>
    pub fn get_bot_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_name
    }
    /// <p>A description of the bot.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the bot.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the bot.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Provides information on additional privacy protections Amazon Lex should use with the bot's data.</p>
    /// This field is required.
    pub fn data_privacy(mut self, input: crate::types::DataPrivacy) -> Self {
        self.data_privacy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides information on additional privacy protections Amazon Lex should use with the bot's data.</p>
    pub fn set_data_privacy(mut self, input: ::std::option::Option<crate::types::DataPrivacy>) -> Self {
        self.data_privacy = input;
        self
    }
    /// <p>Provides information on additional privacy protections Amazon Lex should use with the bot's data.</p>
    pub fn get_data_privacy(&self) -> &::std::option::Option<crate::types::DataPrivacy> {
        &self.data_privacy
    }
    /// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p>
    /// <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
    /// This field is required.
    pub fn idle_session_ttl_in_seconds(mut self, input: i32) -> Self {
        self.idle_session_ttl_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p>
    /// <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
    pub fn set_idle_session_ttl_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_session_ttl_in_seconds = input;
        self
    }
    /// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p>
    /// <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
    pub fn get_idle_session_ttl_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.idle_session_ttl_in_seconds
    }
    /// <p>The type of the bot to be updated.</p>
    pub fn bot_type(mut self, input: crate::types::BotType) -> Self {
        self.bot_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the bot to be updated.</p>
    pub fn set_bot_type(mut self, input: ::std::option::Option<crate::types::BotType>) -> Self {
        self.bot_type = input;
        self
    }
    /// <p>The type of the bot to be updated.</p>
    pub fn get_bot_type(&self) -> &::std::option::Option<crate::types::BotType> {
        &self.bot_type
    }
    /// Appends an item to `bot_members`.
    ///
    /// To override the contents of this collection use [`set_bot_members`](Self::set_bot_members).
    ///
    /// <p>The list of bot members in the network associated with the update action.</p>
    pub fn bot_members(mut self, input: crate::types::BotMember) -> Self {
        let mut v = self.bot_members.unwrap_or_default();
        v.push(input);
        self.bot_members = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of bot members in the network associated with the update action.</p>
    pub fn set_bot_members(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BotMember>>) -> Self {
        self.bot_members = input;
        self
    }
    /// <p>The list of bot members in the network associated with the update action.</p>
    pub fn get_bot_members(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BotMember>> {
        &self.bot_members
    }
    /// Consumes the builder and constructs a [`UpdateBotInput`](crate::operation::update_bot::UpdateBotInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_bot::UpdateBotInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_bot::UpdateBotInput {
            bot_id: self.bot_id,
            bot_name: self.bot_name,
            description: self.description,
            role_arn: self.role_arn,
            data_privacy: self.data_privacy,
            idle_session_ttl_in_seconds: self.idle_session_ttl_in_seconds,
            bot_type: self.bot_type,
            bot_members: self.bot_members,
        })
    }
}
