// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_intent_paths::_list_intent_paths_output::ListIntentPathsOutputBuilder;

pub use crate::operation::list_intent_paths::_list_intent_paths_input::ListIntentPathsInputBuilder;

impl crate::operation::list_intent_paths::builders::ListIntentPathsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_intent_paths::ListIntentPathsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_intent_paths::ListIntentPathsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_intent_paths();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListIntentPaths`.
///
/// <p>Retrieves summary statistics for a path of intents that users take over sessions with your bot. The following fields are required:</p>
/// <ul>
/// <li>
/// <p><code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p></li>
/// <li>
/// <p><code>intentPath</code> – Define an order of intents for which you want to retrieve metrics. Separate intents in the path with a forward slash. For example, populate the <code>intentPath</code> field with <code>/BookCar/BookHotel</code> to see details about how many times users invoked the <code>BookCar</code> and <code>BookHotel</code> intents in that order.</p></li>
/// </ul>
/// <p>Use the optional <code>filters</code> field to filter the results.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListIntentPathsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_intent_paths::builders::ListIntentPathsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_intent_paths::ListIntentPathsOutput,
        crate::operation::list_intent_paths::ListIntentPathsError,
    > for ListIntentPathsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_intent_paths::ListIntentPathsOutput,
            crate::operation::list_intent_paths::ListIntentPathsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListIntentPathsFluentBuilder {
    /// Creates a new `ListIntentPaths`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListIntentPaths as a reference.
    pub fn as_input(&self) -> &crate::operation::list_intent_paths::builders::ListIntentPathsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_intent_paths::ListIntentPathsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_intent_paths::ListIntentPathsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_intent_paths::ListIntentPaths::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_intent_paths::ListIntentPaths::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_intent_paths::ListIntentPathsOutput,
        crate::operation::list_intent_paths::ListIntentPathsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier for the bot for which you want to retrieve intent path metrics.</p>
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.bot_id(input.into());
        self
    }
    /// <p>The identifier for the bot for which you want to retrieve intent path metrics.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_bot_id(input);
        self
    }
    /// <p>The identifier for the bot for which you want to retrieve intent path metrics.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_bot_id()
    }
    /// <p>The date and time that marks the beginning of the range of time for which you want to see intent path metrics.</p>
    pub fn start_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_date_time(input);
        self
    }
    /// <p>The date and time that marks the beginning of the range of time for which you want to see intent path metrics.</p>
    pub fn set_start_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_start_date_time(input);
        self
    }
    /// <p>The date and time that marks the beginning of the range of time for which you want to see intent path metrics.</p>
    pub fn get_start_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_start_date_time()
    }
    /// <p>The date and time that marks the end of the range of time for which you want to see intent path metrics.</p>
    pub fn end_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_date_time(input);
        self
    }
    /// <p>The date and time that marks the end of the range of time for which you want to see intent path metrics.</p>
    pub fn set_end_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_date_time(input);
        self
    }
    /// <p>The date and time that marks the end of the range of time for which you want to see intent path metrics.</p>
    pub fn get_end_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_end_date_time()
    }
    /// <p>The intent path for which you want to retrieve metrics. Use a forward slash to separate intents in the path. For example:</p>
    /// <ul>
    /// <li>
    /// <p>/BookCar</p></li>
    /// <li>
    /// <p>/BookCar/BookHotel</p></li>
    /// <li>
    /// <p>/BookHotel/BookCar</p></li>
    /// </ul>
    pub fn intent_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.intent_path(input.into());
        self
    }
    /// <p>The intent path for which you want to retrieve metrics. Use a forward slash to separate intents in the path. For example:</p>
    /// <ul>
    /// <li>
    /// <p>/BookCar</p></li>
    /// <li>
    /// <p>/BookCar/BookHotel</p></li>
    /// <li>
    /// <p>/BookHotel/BookCar</p></li>
    /// </ul>
    pub fn set_intent_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_intent_path(input);
        self
    }
    /// <p>The intent path for which you want to retrieve metrics. Use a forward slash to separate intents in the path. For example:</p>
    /// <ul>
    /// <li>
    /// <p>/BookCar</p></li>
    /// <li>
    /// <p>/BookCar/BookHotel</p></li>
    /// <li>
    /// <p>/BookHotel/BookCar</p></li>
    /// </ul>
    pub fn get_intent_path(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_intent_path()
    }
    ///
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A list of objects, each describes a condition by which you want to filter the results.</p>
    pub fn filters(mut self, input: crate::types::AnalyticsPathFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A list of objects, each describes a condition by which you want to filter the results.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsPathFilter>>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>A list of objects, each describes a condition by which you want to filter the results.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalyticsPathFilter>> {
        self.inner.get_filters()
    }
}
