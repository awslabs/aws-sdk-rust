// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchUpdateCustomVocabularyItemOutput {
    /// <p>The unique identifier of the bot to the batch update response for the custom vocabulary item.</p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>The bot version of the bot to the batch update response for the custom vocabulary item.</p>
    #[doc(hidden)]
    pub bot_version: std::option::Option<std::string::String>,
    /// <p>The locale identifier of the bot to the batch update response for the custom vocabulary item.</p>
    #[doc(hidden)]
    pub locale_id: std::option::Option<std::string::String>,
    /// <p>The errors of the action to batch update response for the custom vocabulary item.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::types::FailedCustomVocabularyItem>>,
    /// <p>The resources of the action to batch update response for the custom vocabulary item.</p>
    #[doc(hidden)]
    pub resources: std::option::Option<std::vec::Vec<crate::types::CustomVocabularyItem>>,
    _request_id: Option<String>,
}
impl BatchUpdateCustomVocabularyItemOutput {
    /// <p>The unique identifier of the bot to the batch update response for the custom vocabulary item.</p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The bot version of the bot to the batch update response for the custom vocabulary item.</p>
    pub fn bot_version(&self) -> std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The locale identifier of the bot to the batch update response for the custom vocabulary item.</p>
    pub fn locale_id(&self) -> std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p>The errors of the action to batch update response for the custom vocabulary item.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::types::FailedCustomVocabularyItem]> {
        self.errors.as_deref()
    }
    /// <p>The resources of the action to batch update response for the custom vocabulary item.</p>
    pub fn resources(&self) -> std::option::Option<&[crate::types::CustomVocabularyItem]> {
        self.resources.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchUpdateCustomVocabularyItemOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchUpdateCustomVocabularyItemOutput {
    /// Creates a new builder-style object to manufacture [`BatchUpdateCustomVocabularyItemOutput`](crate::operation::batch_update_custom_vocabulary_item::BatchUpdateCustomVocabularyItemOutput).
    pub fn builder() -> crate::operation::batch_update_custom_vocabulary_item::builders::BatchUpdateCustomVocabularyItemOutputBuilder{
        crate::operation::batch_update_custom_vocabulary_item::builders::BatchUpdateCustomVocabularyItemOutputBuilder::default()
    }
}

/// A builder for [`BatchUpdateCustomVocabularyItemOutput`](crate::operation::batch_update_custom_vocabulary_item::BatchUpdateCustomVocabularyItemOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchUpdateCustomVocabularyItemOutputBuilder {
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) bot_version: std::option::Option<std::string::String>,
    pub(crate) locale_id: std::option::Option<std::string::String>,
    pub(crate) errors: std::option::Option<std::vec::Vec<crate::types::FailedCustomVocabularyItem>>,
    pub(crate) resources: std::option::Option<std::vec::Vec<crate::types::CustomVocabularyItem>>,
    _request_id: Option<String>,
}
impl BatchUpdateCustomVocabularyItemOutputBuilder {
    /// <p>The unique identifier of the bot to the batch update response for the custom vocabulary item.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the bot to the batch update response for the custom vocabulary item.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The bot version of the bot to the batch update response for the custom vocabulary item.</p>
    pub fn bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_version = Some(input.into());
        self
    }
    /// <p>The bot version of the bot to the batch update response for the custom vocabulary item.</p>
    pub fn set_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The locale identifier of the bot to the batch update response for the custom vocabulary item.</p>
    pub fn locale_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.locale_id = Some(input.into());
        self
    }
    /// <p>The locale identifier of the bot to the batch update response for the custom vocabulary item.</p>
    pub fn set_locale_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>The errors of the action to batch update response for the custom vocabulary item.</p>
    pub fn errors(mut self, input: crate::types::FailedCustomVocabularyItem) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = Some(v);
        self
    }
    /// <p>The errors of the action to batch update response for the custom vocabulary item.</p>
    pub fn set_errors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FailedCustomVocabularyItem>>,
    ) -> Self {
        self.errors = input;
        self
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>The resources of the action to batch update response for the custom vocabulary item.</p>
    pub fn resources(mut self, input: crate::types::CustomVocabularyItem) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input);
        self.resources = Some(v);
        self
    }
    /// <p>The resources of the action to batch update response for the custom vocabulary item.</p>
    pub fn set_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CustomVocabularyItem>>,
    ) -> Self {
        self.resources = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchUpdateCustomVocabularyItemOutput`](crate::operation::batch_update_custom_vocabulary_item::BatchUpdateCustomVocabularyItemOutput).
    pub fn build(
        self,
    ) -> crate::operation::batch_update_custom_vocabulary_item::BatchUpdateCustomVocabularyItemOutput
    {
        crate::operation::batch_update_custom_vocabulary_item::BatchUpdateCustomVocabularyItemOutput {
            bot_id: self.bot_id
            ,
            bot_version: self.bot_version
            ,
            locale_id: self.locale_id
            ,
            errors: self.errors
            ,
            resources: self.resources
            ,
            _request_id: self._request_id,
        }
    }
}
