// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteBotInput {
    /// <p>The identifier of the bot to delete. </p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>When <code>true</code>, Amazon Lex doesn't check to see if another resource, such as an alias, is using the bot before it is deleted.</p>
    #[doc(hidden)]
    pub skip_resource_in_use_check: bool,
}
impl DeleteBotInput {
    /// <p>The identifier of the bot to delete. </p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>When <code>true</code>, Amazon Lex doesn't check to see if another resource, such as an alias, is using the bot before it is deleted.</p>
    pub fn skip_resource_in_use_check(&self) -> bool {
        self.skip_resource_in_use_check
    }
}
impl DeleteBotInput {
    /// Creates a new builder-style object to manufacture [`DeleteBotInput`](crate::operation::delete_bot::DeleteBotInput).
    pub fn builder() -> crate::operation::delete_bot::builders::DeleteBotInputBuilder {
        crate::operation::delete_bot::builders::DeleteBotInputBuilder::default()
    }
}

/// A builder for [`DeleteBotInput`](crate::operation::delete_bot::DeleteBotInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteBotInputBuilder {
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) skip_resource_in_use_check: std::option::Option<bool>,
}
impl DeleteBotInputBuilder {
    /// <p>The identifier of the bot to delete. </p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The identifier of the bot to delete. </p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>When <code>true</code>, Amazon Lex doesn't check to see if another resource, such as an alias, is using the bot before it is deleted.</p>
    pub fn skip_resource_in_use_check(mut self, input: bool) -> Self {
        self.skip_resource_in_use_check = Some(input);
        self
    }
    /// <p>When <code>true</code>, Amazon Lex doesn't check to see if another resource, such as an alias, is using the bot before it is deleted.</p>
    pub fn set_skip_resource_in_use_check(mut self, input: std::option::Option<bool>) -> Self {
        self.skip_resource_in_use_check = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteBotInput`](crate::operation::delete_bot::DeleteBotInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_bot::DeleteBotInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_bot::DeleteBotInput {
            bot_id: self.bot_id,
            skip_resource_in_use_check: self.skip_resource_in_use_check.unwrap_or_default(),
        })
    }
}
