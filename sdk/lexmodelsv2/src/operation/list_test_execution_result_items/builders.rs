// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_test_execution_result_items::_list_test_execution_result_items_output::ListTestExecutionResultItemsOutputBuilder;

pub use crate::operation::list_test_execution_result_items::_list_test_execution_result_items_input::ListTestExecutionResultItemsInputBuilder;

impl ListTestExecutionResultItemsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_test_execution_result_items();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListTestExecutionResultItems`.
///
/// <p>Gets a list of test execution result items.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListTestExecutionResultItemsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_test_execution_result_items::builders::ListTestExecutionResultItemsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsOutput,
        crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsError,
    > for ListTestExecutionResultItemsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsOutput,
            crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListTestExecutionResultItemsFluentBuilder {
    /// Creates a new `ListTestExecutionResultItems`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListTestExecutionResultItems as a reference.
    pub fn as_input(&self) -> &crate::operation::list_test_execution_result_items::builders::ListTestExecutionResultItemsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_test_execution_result_items::ListTestExecutionResultItems::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_test_execution_result_items::ListTestExecutionResultItems::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsOutput,
        crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_test_execution_result_items::paginator::ListTestExecutionResultItemsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_test_execution_result_items::paginator::ListTestExecutionResultItemsPaginator {
        crate::operation::list_test_execution_result_items::paginator::ListTestExecutionResultItemsPaginator::new(self.handle, self.inner)
    }
    /// <p>The unique identifier of the test execution to list the result items.</p>
    pub fn test_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.test_execution_id(input.into());
        self
    }
    /// <p>The unique identifier of the test execution to list the result items.</p>
    pub fn set_test_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_test_execution_id(input);
        self
    }
    /// <p>The unique identifier of the test execution to list the result items.</p>
    pub fn get_test_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_test_execution_id()
    }
    /// <p>The filter for the list of results from the test set execution.</p>
    pub fn result_filter_by(mut self, input: crate::types::TestExecutionResultFilterBy) -> Self {
        self.inner = self.inner.result_filter_by(input);
        self
    }
    /// <p>The filter for the list of results from the test set execution.</p>
    pub fn set_result_filter_by(mut self, input: ::std::option::Option<crate::types::TestExecutionResultFilterBy>) -> Self {
        self.inner = self.inner.set_result_filter_by(input);
        self
    }
    /// <p>The filter for the list of results from the test set execution.</p>
    pub fn get_result_filter_by(&self) -> &::std::option::Option<crate::types::TestExecutionResultFilterBy> {
        self.inner.get_result_filter_by()
    }
    /// <p>The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>If the response from the <code>ListTestExecutionResultItems</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the response from the <code>ListTestExecutionResultItems</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>If the response from the <code>ListTestExecutionResultItems</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
