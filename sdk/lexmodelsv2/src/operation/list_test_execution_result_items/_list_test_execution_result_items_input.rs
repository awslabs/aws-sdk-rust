// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTestExecutionResultItemsInput {
    /// <p>The unique identifier of the test execution to list the result items.</p>
    pub test_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The filter for the list of results from the test set execution.</p>
    pub result_filter_by: ::std::option::Option<crate::types::TestExecutionResultFilterBy>,
    /// <p>The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>If the response from the <code>ListTestExecutionResultItems</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListTestExecutionResultItemsInput {
    /// <p>The unique identifier of the test execution to list the result items.</p>
    pub fn test_execution_id(&self) -> ::std::option::Option<&str> {
        self.test_execution_id.as_deref()
    }
    /// <p>The filter for the list of results from the test set execution.</p>
    pub fn result_filter_by(&self) -> ::std::option::Option<&crate::types::TestExecutionResultFilterBy> {
        self.result_filter_by.as_ref()
    }
    /// <p>The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>If the response from the <code>ListTestExecutionResultItems</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListTestExecutionResultItemsInput {
    /// Creates a new builder-style object to manufacture [`ListTestExecutionResultItemsInput`](crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsInput).
    pub fn builder() -> crate::operation::list_test_execution_result_items::builders::ListTestExecutionResultItemsInputBuilder {
        crate::operation::list_test_execution_result_items::builders::ListTestExecutionResultItemsInputBuilder::default()
    }
}

/// A builder for [`ListTestExecutionResultItemsInput`](crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListTestExecutionResultItemsInputBuilder {
    pub(crate) test_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) result_filter_by: ::std::option::Option<crate::types::TestExecutionResultFilterBy>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListTestExecutionResultItemsInputBuilder {
    /// <p>The unique identifier of the test execution to list the result items.</p>
    /// This field is required.
    pub fn test_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the test execution to list the result items.</p>
    pub fn set_test_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_execution_id = input;
        self
    }
    /// <p>The unique identifier of the test execution to list the result items.</p>
    pub fn get_test_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_execution_id
    }
    /// <p>The filter for the list of results from the test set execution.</p>
    /// This field is required.
    pub fn result_filter_by(mut self, input: crate::types::TestExecutionResultFilterBy) -> Self {
        self.result_filter_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter for the list of results from the test set execution.</p>
    pub fn set_result_filter_by(mut self, input: ::std::option::Option<crate::types::TestExecutionResultFilterBy>) -> Self {
        self.result_filter_by = input;
        self
    }
    /// <p>The filter for the list of results from the test set execution.</p>
    pub fn get_result_filter_by(&self) -> &::std::option::Option<crate::types::TestExecutionResultFilterBy> {
        &self.result_filter_by
    }
    /// <p>The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>If the response from the <code>ListTestExecutionResultItems</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the response from the <code>ListTestExecutionResultItems</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the response from the <code>ListTestExecutionResultItems</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListTestExecutionResultItemsInput`](crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_test_execution_result_items::ListTestExecutionResultItemsInput {
            test_execution_id: self.test_execution_id,
            result_filter_by: self.result_filter_by,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
