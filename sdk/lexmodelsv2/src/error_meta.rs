// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again. </p>
    ConflictException(crate::error::ConflictException),
    /// <p>The service encountered an unexpected condition. Try your request again.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.</p>
    PreconditionFailedException(crate::error::PreconditionFailedException),
    /// <p>You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>You have reached a quota for your bot. </p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>Your request rate is too high. Reduce the frequency of requests.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>One of the input parameters in your request isn't valid. Check the parameters and try your request again.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::PreconditionFailedException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::BatchCreateCustomVocabularyItemError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::BatchCreateCustomVocabularyItemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchCreateCustomVocabularyItemError> for Error {
    fn from(err: crate::error::BatchCreateCustomVocabularyItemError) -> Self {
        match err {
            crate::error::BatchCreateCustomVocabularyItemError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchCreateCustomVocabularyItemError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::BatchCreateCustomVocabularyItemError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::BatchCreateCustomVocabularyItemError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchCreateCustomVocabularyItemError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchCreateCustomVocabularyItemError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::BatchDeleteCustomVocabularyItemError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::BatchDeleteCustomVocabularyItemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDeleteCustomVocabularyItemError> for Error {
    fn from(err: crate::error::BatchDeleteCustomVocabularyItemError) -> Self {
        match err {
            crate::error::BatchDeleteCustomVocabularyItemError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchDeleteCustomVocabularyItemError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::BatchDeleteCustomVocabularyItemError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::BatchDeleteCustomVocabularyItemError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchDeleteCustomVocabularyItemError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchDeleteCustomVocabularyItemError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::BatchUpdateCustomVocabularyItemError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::BatchUpdateCustomVocabularyItemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchUpdateCustomVocabularyItemError> for Error {
    fn from(err: crate::error::BatchUpdateCustomVocabularyItemError) -> Self {
        match err {
            crate::error::BatchUpdateCustomVocabularyItemError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchUpdateCustomVocabularyItemError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::BatchUpdateCustomVocabularyItemError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::BatchUpdateCustomVocabularyItemError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchUpdateCustomVocabularyItemError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchUpdateCustomVocabularyItemError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BuildBotLocaleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BuildBotLocaleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BuildBotLocaleError> for Error {
    fn from(err: crate::error::BuildBotLocaleError) -> Self {
        match err {
            crate::error::BuildBotLocaleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::BuildBotLocaleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BuildBotLocaleError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::BuildBotLocaleError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::BuildBotLocaleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BuildBotLocaleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BuildBotLocaleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBotError> for Error {
    fn from(err: crate::error::CreateBotError) -> Self {
        match err {
            crate::error::CreateBotError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateBotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateBotError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::CreateBotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateBotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateBotError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBotAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateBotAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBotAliasError> for Error {
    fn from(err: crate::error::CreateBotAliasError) -> Self {
        match err {
            crate::error::CreateBotAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateBotAliasError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateBotAliasError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::CreateBotAliasError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateBotAliasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateBotAliasError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateBotAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBotLocaleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateBotLocaleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBotLocaleError> for Error {
    fn from(err: crate::error::CreateBotLocaleError) -> Self {
        match err {
            crate::error::CreateBotLocaleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateBotLocaleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateBotLocaleError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::CreateBotLocaleError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateBotLocaleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateBotLocaleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateBotLocaleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBotVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBotVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBotVersionError> for Error {
    fn from(err: crate::error::CreateBotVersionError) -> Self {
        match err {
            crate::error::CreateBotVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateBotVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateBotVersionError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::CreateBotVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateBotVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateBotVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateBotVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateExportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateExportError> for Error {
    fn from(err: crate::error::CreateExportError) -> Self {
        match err {
            crate::error::CreateExportError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateExportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateExportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateExportError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateExportError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateExportError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateIntentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateIntentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateIntentError> for Error {
    fn from(err: crate::error::CreateIntentError) -> Self {
        match err {
            crate::error::CreateIntentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateIntentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateIntentError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::CreateIntentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateIntentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateIntentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateIntentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateResourcePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateResourcePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateResourcePolicyError> for Error {
    fn from(err: crate::error::CreateResourcePolicyError) -> Self {
        match err {
            crate::error::CreateResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateResourcePolicyError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::CreateResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateResourcePolicyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateResourcePolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateResourcePolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateResourcePolicyStatementError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateResourcePolicyStatementError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateResourcePolicyStatementError> for Error {
    fn from(err: crate::error::CreateResourcePolicyStatementError) -> Self {
        match err {
            crate::error::CreateResourcePolicyStatementError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateResourcePolicyStatementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateResourcePolicyStatementError::PreconditionFailedException(
                inner,
            ) => Error::PreconditionFailedException(inner),
            crate::error::CreateResourcePolicyStatementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateResourcePolicyStatementError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateResourcePolicyStatementError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateResourcePolicyStatementError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateResourcePolicyStatementError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSlotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSlotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSlotError> for Error {
    fn from(err: crate::error::CreateSlotError) -> Self {
        match err {
            crate::error::CreateSlotError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateSlotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateSlotError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::CreateSlotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateSlotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateSlotError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateSlotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSlotTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSlotTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSlotTypeError> for Error {
    fn from(err: crate::error::CreateSlotTypeError) -> Self {
        match err {
            crate::error::CreateSlotTypeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateSlotTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateSlotTypeError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::CreateSlotTypeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateSlotTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateSlotTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateSlotTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUploadUrlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUploadUrlError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUploadUrlError> for Error {
    fn from(err: crate::error::CreateUploadUrlError) -> Self {
        match err {
            crate::error::CreateUploadUrlError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateUploadUrlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateUploadUrlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateUploadUrlError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateUploadUrlError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateUploadUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBotError> for Error {
    fn from(err: crate::error::DeleteBotError) -> Self {
        match err {
            crate::error::DeleteBotError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteBotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteBotError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::DeleteBotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteBotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteBotError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBotAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBotAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBotAliasError> for Error {
    fn from(err: crate::error::DeleteBotAliasError) -> Self {
        match err {
            crate::error::DeleteBotAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteBotAliasError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteBotAliasError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::DeleteBotAliasError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteBotAliasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteBotAliasError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteBotAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBotLocaleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBotLocaleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBotLocaleError> for Error {
    fn from(err: crate::error::DeleteBotLocaleError) -> Self {
        match err {
            crate::error::DeleteBotLocaleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteBotLocaleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteBotLocaleError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::DeleteBotLocaleError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteBotLocaleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteBotLocaleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteBotLocaleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBotVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBotVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBotVersionError> for Error {
    fn from(err: crate::error::DeleteBotVersionError) -> Self {
        match err {
            crate::error::DeleteBotVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteBotVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteBotVersionError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::DeleteBotVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteBotVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteBotVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteBotVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCustomVocabularyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCustomVocabularyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCustomVocabularyError> for Error {
    fn from(err: crate::error::DeleteCustomVocabularyError) -> Self {
        match err {
            crate::error::DeleteCustomVocabularyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteCustomVocabularyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteCustomVocabularyError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::DeleteCustomVocabularyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteCustomVocabularyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteCustomVocabularyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteCustomVocabularyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteExportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteExportError> for Error {
    fn from(err: crate::error::DeleteExportError) -> Self {
        match err {
            crate::error::DeleteExportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteExportError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::DeleteExportError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteExportError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteExportError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteImportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteImportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteImportError> for Error {
    fn from(err: crate::error::DeleteImportError) -> Self {
        match err {
            crate::error::DeleteImportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteImportError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::DeleteImportError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteImportError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteImportError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteImportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIntentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteIntentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteIntentError> for Error {
    fn from(err: crate::error::DeleteIntentError) -> Self {
        match err {
            crate::error::DeleteIntentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteIntentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteIntentError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::DeleteIntentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteIntentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteIntentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteIntentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResourcePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteResourcePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResourcePolicyError> for Error {
    fn from(err: crate::error::DeleteResourcePolicyError) -> Self {
        match err {
            crate::error::DeleteResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteResourcePolicyError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::DeleteResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteResourcePolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResourcePolicyStatementError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteResourcePolicyStatementError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResourcePolicyStatementError> for Error {
    fn from(err: crate::error::DeleteResourcePolicyStatementError) -> Self {
        match err {
            crate::error::DeleteResourcePolicyStatementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteResourcePolicyStatementError::PreconditionFailedException(
                inner,
            ) => Error::PreconditionFailedException(inner),
            crate::error::DeleteResourcePolicyStatementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteResourcePolicyStatementError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteResourcePolicyStatementError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSlotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSlotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSlotError> for Error {
    fn from(err: crate::error::DeleteSlotError) -> Self {
        match err {
            crate::error::DeleteSlotError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSlotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteSlotError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::DeleteSlotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteSlotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteSlotError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteSlotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSlotTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSlotTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSlotTypeError> for Error {
    fn from(err: crate::error::DeleteSlotTypeError) -> Self {
        match err {
            crate::error::DeleteSlotTypeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSlotTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteSlotTypeError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::DeleteSlotTypeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteSlotTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteSlotTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteSlotTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUtterancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteUtterancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUtterancesError> for Error {
    fn from(err: crate::error::DeleteUtterancesError) -> Self {
        match err {
            crate::error::DeleteUtterancesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteUtterancesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteUtterancesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteUtterancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBotError> for Error {
    fn from(err: crate::error::DescribeBotError) -> Self {
        match err {
            crate::error::DescribeBotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeBotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeBotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DescribeBotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBotError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBotAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeBotAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBotAliasError> for Error {
    fn from(err: crate::error::DescribeBotAliasError) -> Self {
        match err {
            crate::error::DescribeBotAliasError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeBotAliasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeBotAliasError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DescribeBotAliasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBotAliasError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeBotAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBotLocaleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeBotLocaleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBotLocaleError> for Error {
    fn from(err: crate::error::DescribeBotLocaleError) -> Self {
        match err {
            crate::error::DescribeBotLocaleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeBotLocaleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeBotLocaleError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DescribeBotLocaleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBotLocaleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeBotLocaleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBotRecommendationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeBotRecommendationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBotRecommendationError> for Error {
    fn from(err: crate::error::DescribeBotRecommendationError) -> Self {
        match err {
            crate::error::DescribeBotRecommendationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeBotRecommendationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeBotRecommendationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBotRecommendationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeBotRecommendationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBotVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeBotVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBotVersionError> for Error {
    fn from(err: crate::error::DescribeBotVersionError) -> Self {
        match err {
            crate::error::DescribeBotVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeBotVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeBotVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DescribeBotVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBotVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeBotVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeCustomVocabularyMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeCustomVocabularyMetadataError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCustomVocabularyMetadataError> for Error {
    fn from(err: crate::error::DescribeCustomVocabularyMetadataError) -> Self {
        match err {
            crate::error::DescribeCustomVocabularyMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeCustomVocabularyMetadataError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeCustomVocabularyMetadataError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::DescribeCustomVocabularyMetadataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeCustomVocabularyMetadataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeCustomVocabularyMetadataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeExportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeExportError> for Error {
    fn from(err: crate::error::DescribeExportError) -> Self {
        match err {
            crate::error::DescribeExportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeExportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeExportError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeExportError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeImportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeImportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeImportError> for Error {
    fn from(err: crate::error::DescribeImportError) -> Self {
        match err {
            crate::error::DescribeImportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeImportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeImportError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeImportError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeImportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeIntentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeIntentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeIntentError> for Error {
    fn from(err: crate::error::DescribeIntentError) -> Self {
        match err {
            crate::error::DescribeIntentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeIntentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeIntentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DescribeIntentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeIntentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeIntentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeResourcePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeResourcePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeResourcePolicyError> for Error {
    fn from(err: crate::error::DescribeResourcePolicyError) -> Self {
        match err {
            crate::error::DescribeResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeResourcePolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSlotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeSlotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSlotError> for Error {
    fn from(err: crate::error::DescribeSlotError) -> Self {
        match err {
            crate::error::DescribeSlotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeSlotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeSlotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DescribeSlotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeSlotError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeSlotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSlotTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSlotTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSlotTypeError> for Error {
    fn from(err: crate::error::DescribeSlotTypeError) -> Self {
        match err {
            crate::error::DescribeSlotTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeSlotTypeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeSlotTypeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DescribeSlotTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeSlotTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeSlotTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAggregatedUtterancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAggregatedUtterancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAggregatedUtterancesError> for Error {
    fn from(err: crate::error::ListAggregatedUtterancesError) -> Self {
        match err {
            crate::error::ListAggregatedUtterancesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListAggregatedUtterancesError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::ListAggregatedUtterancesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListAggregatedUtterancesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAggregatedUtterancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBotAliasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListBotAliasesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBotAliasesError> for Error {
    fn from(err: crate::error::ListBotAliasesError) -> Self {
        match err {
            crate::error::ListBotAliasesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListBotAliasesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListBotAliasesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListBotAliasesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListBotAliasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBotLocalesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListBotLocalesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBotLocalesError> for Error {
    fn from(err: crate::error::ListBotLocalesError) -> Self {
        match err {
            crate::error::ListBotLocalesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListBotLocalesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListBotLocalesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListBotLocalesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListBotLocalesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBotRecommendationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListBotRecommendationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBotRecommendationsError> for Error {
    fn from(err: crate::error::ListBotRecommendationsError) -> Self {
        match err {
            crate::error::ListBotRecommendationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListBotRecommendationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListBotRecommendationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListBotRecommendationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListBotRecommendationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListBotsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBotsError> for Error {
    fn from(err: crate::error::ListBotsError) -> Self {
        match err {
            crate::error::ListBotsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListBotsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListBotsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListBotsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListBotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBotVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListBotVersionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBotVersionsError> for Error {
    fn from(err: crate::error::ListBotVersionsError) -> Self {
        match err {
            crate::error::ListBotVersionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListBotVersionsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListBotVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListBotVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListBotVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBuiltInIntentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListBuiltInIntentsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBuiltInIntentsError> for Error {
    fn from(err: crate::error::ListBuiltInIntentsError) -> Self {
        match err {
            crate::error::ListBuiltInIntentsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListBuiltInIntentsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListBuiltInIntentsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListBuiltInIntentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListBuiltInIntentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBuiltInSlotTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListBuiltInSlotTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBuiltInSlotTypesError> for Error {
    fn from(err: crate::error::ListBuiltInSlotTypesError) -> Self {
        match err {
            crate::error::ListBuiltInSlotTypesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListBuiltInSlotTypesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListBuiltInSlotTypesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListBuiltInSlotTypesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListBuiltInSlotTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCustomVocabularyItemsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCustomVocabularyItemsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCustomVocabularyItemsError> for Error {
    fn from(err: crate::error::ListCustomVocabularyItemsError) -> Self {
        match err {
            crate::error::ListCustomVocabularyItemsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListCustomVocabularyItemsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListCustomVocabularyItemsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListCustomVocabularyItemsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListCustomVocabularyItemsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListCustomVocabularyItemsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListExportsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListExportsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListExportsError> for Error {
    fn from(err: crate::error::ListExportsError) -> Self {
        match err {
            crate::error::ListExportsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListExportsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListExportsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListExportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListImportsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListImportsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListImportsError> for Error {
    fn from(err: crate::error::ListImportsError) -> Self {
        match err {
            crate::error::ListImportsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListImportsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListImportsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListImportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListIntentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListIntentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListIntentsError> for Error {
    fn from(err: crate::error::ListIntentsError) -> Self {
        match err {
            crate::error::ListIntentsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListIntentsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListIntentsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListIntentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListIntentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRecommendedIntentsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRecommendedIntentsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRecommendedIntentsError> for Error {
    fn from(err: crate::error::ListRecommendedIntentsError) -> Self {
        match err {
            crate::error::ListRecommendedIntentsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListRecommendedIntentsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListRecommendedIntentsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListRecommendedIntentsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListRecommendedIntentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListRecommendedIntentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSlotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSlotsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSlotsError> for Error {
    fn from(err: crate::error::ListSlotsError) -> Self {
        match err {
            crate::error::ListSlotsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListSlotsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListSlotsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListSlotsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListSlotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSlotTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSlotTypesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSlotTypesError> for Error {
    fn from(err: crate::error::ListSlotTypesError) -> Self {
        match err {
            crate::error::ListSlotTypesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListSlotTypesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListSlotTypesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListSlotTypesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListSlotTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchAssociatedTranscriptsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchAssociatedTranscriptsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchAssociatedTranscriptsError> for Error {
    fn from(err: crate::error::SearchAssociatedTranscriptsError) -> Self {
        match err {
            crate::error::SearchAssociatedTranscriptsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SearchAssociatedTranscriptsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchAssociatedTranscriptsError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::SearchAssociatedTranscriptsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchAssociatedTranscriptsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SearchAssociatedTranscriptsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartBotRecommendationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartBotRecommendationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartBotRecommendationError> for Error {
    fn from(err: crate::error::StartBotRecommendationError) -> Self {
        match err {
            crate::error::StartBotRecommendationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::StartBotRecommendationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartBotRecommendationError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::StartBotRecommendationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartBotRecommendationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::StartBotRecommendationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartBotRecommendationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartBotRecommendationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartImportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartImportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartImportError> for Error {
    fn from(err: crate::error::StartImportError) -> Self {
        match err {
            crate::error::StartImportError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::StartImportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartImportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartImportError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::StartImportError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartImportError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartImportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopBotRecommendationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopBotRecommendationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopBotRecommendationError> for Error {
    fn from(err: crate::error::StopBotRecommendationError) -> Self {
        match err {
            crate::error::StopBotRecommendationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::StopBotRecommendationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopBotRecommendationError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::StopBotRecommendationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopBotRecommendationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::StopBotRecommendationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StopBotRecommendationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StopBotRecommendationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBotError> for Error {
    fn from(err: crate::error::UpdateBotError) -> Self {
        match err {
            crate::error::UpdateBotError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateBotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateBotError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::UpdateBotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateBotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateBotError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBotAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateBotAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBotAliasError> for Error {
    fn from(err: crate::error::UpdateBotAliasError) -> Self {
        match err {
            crate::error::UpdateBotAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateBotAliasError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateBotAliasError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::UpdateBotAliasError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateBotAliasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateBotAliasError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateBotAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBotLocaleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateBotLocaleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBotLocaleError> for Error {
    fn from(err: crate::error::UpdateBotLocaleError) -> Self {
        match err {
            crate::error::UpdateBotLocaleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateBotLocaleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateBotLocaleError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::UpdateBotLocaleError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateBotLocaleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateBotLocaleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateBotLocaleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBotRecommendationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBotRecommendationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBotRecommendationError> for Error {
    fn from(err: crate::error::UpdateBotRecommendationError) -> Self {
        match err {
            crate::error::UpdateBotRecommendationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateBotRecommendationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateBotRecommendationError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::UpdateBotRecommendationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateBotRecommendationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateBotRecommendationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateBotRecommendationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateBotRecommendationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateExportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateExportError> for Error {
    fn from(err: crate::error::UpdateExportError) -> Self {
        match err {
            crate::error::UpdateExportError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateExportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateExportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateExportError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateExportError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateExportError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateIntentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateIntentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateIntentError> for Error {
    fn from(err: crate::error::UpdateIntentError) -> Self {
        match err {
            crate::error::UpdateIntentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateIntentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateIntentError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::UpdateIntentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateIntentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateIntentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateIntentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateResourcePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateResourcePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResourcePolicyError> for Error {
    fn from(err: crate::error::UpdateResourcePolicyError) -> Self {
        match err {
            crate::error::UpdateResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateResourcePolicyError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::UpdateResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateResourcePolicyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateResourcePolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateResourcePolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSlotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSlotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSlotError> for Error {
    fn from(err: crate::error::UpdateSlotError) -> Self {
        match err {
            crate::error::UpdateSlotError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateSlotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateSlotError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::UpdateSlotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateSlotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateSlotError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateSlotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSlotTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSlotTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSlotTypeError> for Error {
    fn from(err: crate::error::UpdateSlotTypeError) -> Self {
        match err {
            crate::error::UpdateSlotTypeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateSlotTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateSlotTypeError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::UpdateSlotTypeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateSlotTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateSlotTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateSlotTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::PreconditionFailedException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
