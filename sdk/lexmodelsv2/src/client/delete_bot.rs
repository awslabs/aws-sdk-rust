// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteBot`](crate::operation::delete_bot::builders::DeleteBotFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`bot_id(impl Into<String>)`](crate::operation::delete_bot::builders::DeleteBotFluentBuilder::bot_id) / [`set_bot_id(Option<String>)`](crate::operation::delete_bot::builders::DeleteBotFluentBuilder::set_bot_id): <p>The identifier of the bot to delete. </p>
    ///   - [`skip_resource_in_use_check(bool)`](crate::operation::delete_bot::builders::DeleteBotFluentBuilder::skip_resource_in_use_check) / [`set_skip_resource_in_use_check(bool)`](crate::operation::delete_bot::builders::DeleteBotFluentBuilder::set_skip_resource_in_use_check): <p>When <code>true</code>, Amazon Lex doesn't check to see if another resource, such as an alias, is using the bot before it is deleted.</p>
    /// - On success, responds with [`DeleteBotOutput`](crate::operation::delete_bot::DeleteBotOutput) with field(s):
    ///   - [`bot_id(Option<String>)`](crate::operation::delete_bot::DeleteBotOutput::bot_id): <p>The unique identifier of the bot that Amazon Lex is deleting.</p>
    ///   - [`bot_status(Option<BotStatus>)`](crate::operation::delete_bot::DeleteBotOutput::bot_status): <p>The current status of the bot. The status is <code>Deleting</code> while the bot and its associated resources are being deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteBotError>`](crate::operation::delete_bot::DeleteBotError)
    pub fn delete_bot(&self) -> crate::operation::delete_bot::builders::DeleteBotFluentBuilder {
        crate::operation::delete_bot::builders::DeleteBotFluentBuilder::new(self.handle.clone())
    }
}
