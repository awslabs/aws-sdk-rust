// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteResourcePolicy`](crate::operation::delete_resource_policy::builders::DeleteResourcePolicyFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::operation::delete_resource_policy::builders::DeleteResourcePolicyFluentBuilder::resource_arn) / [`set_resource_arn(Option<String>)`](crate::operation::delete_resource_policy::builders::DeleteResourcePolicyFluentBuilder::set_resource_arn): <p>The Amazon Resource Name (ARN) of the bot or bot alias that has the resource policy attached.</p>
    ///   - [`expected_revision_id(impl Into<String>)`](crate::operation::delete_resource_policy::builders::DeleteResourcePolicyFluentBuilder::expected_revision_id) / [`set_expected_revision_id(Option<String>)`](crate::operation::delete_resource_policy::builders::DeleteResourcePolicyFluentBuilder::set_expected_revision_id): <p>The identifier of the revision to edit. If this ID doesn't match the current revision number, Amazon Lex returns an exception</p>  <p>If you don't specify a revision ID, Amazon Lex will delete the current policy.</p>
    /// - On success, responds with [`DeleteResourcePolicyOutput`](crate::operation::delete_resource_policy::DeleteResourcePolicyOutput) with field(s):
    ///   - [`resource_arn(Option<String>)`](crate::operation::delete_resource_policy::DeleteResourcePolicyOutput::resource_arn): <p>The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy was deleted from.</p>
    ///   - [`revision_id(Option<String>)`](crate::operation::delete_resource_policy::DeleteResourcePolicyOutput::revision_id): <p>The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.</p>
    /// - On failure, responds with [`SdkError<DeleteResourcePolicyError>`](crate::operation::delete_resource_policy::DeleteResourcePolicyError)
    pub fn delete_resource_policy(
        &self,
    ) -> crate::operation::delete_resource_policy::builders::DeleteResourcePolicyFluentBuilder {
        crate::operation::delete_resource_policy::builders::DeleteResourcePolicyFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
