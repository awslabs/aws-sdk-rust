// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteResourcePolicyStatement`](crate::client::fluent_builders::DeleteResourcePolicyStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteResourcePolicyStatement::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::DeleteResourcePolicyStatement::set_resource_arn): <p>The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.</p>
    ///   - [`statement_id(impl Into<String>)`](crate::client::fluent_builders::DeleteResourcePolicyStatement::statement_id) / [`set_statement_id(Option<String>)`](crate::client::fluent_builders::DeleteResourcePolicyStatement::set_statement_id): <p>The name of the statement (SID) to delete from the policy.</p>
    ///   - [`expected_revision_id(impl Into<String>)`](crate::client::fluent_builders::DeleteResourcePolicyStatement::expected_revision_id) / [`set_expected_revision_id(Option<String>)`](crate::client::fluent_builders::DeleteResourcePolicyStatement::set_expected_revision_id): <p>The identifier of the revision of the policy to delete the statement from. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.</p>  <p>If you don't specify a revision, Amazon Lex removes the current contents of the statement. </p>
    /// - On success, responds with [`DeleteResourcePolicyStatementOutput`](crate::output::DeleteResourcePolicyStatementOutput) with field(s):
    ///   - [`resource_arn(Option<String>)`](crate::output::DeleteResourcePolicyStatementOutput::resource_arn): <p>The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy statement was removed from.</p>
    ///   - [`revision_id(Option<String>)`](crate::output::DeleteResourcePolicyStatementOutput::revision_id): <p>The current revision of the resource policy. Use the revision ID to make sure that you are updating the most current version of a resource policy when you add a policy statement to a resource, delete a resource, or update a resource.</p>
    /// - On failure, responds with [`SdkError<DeleteResourcePolicyStatementError>`](crate::error::DeleteResourcePolicyStatementError)
    pub fn delete_resource_policy_statement(
        &self,
    ) -> crate::client::fluent_builders::DeleteResourcePolicyStatement {
        crate::client::fluent_builders::DeleteResourcePolicyStatement::new(self.handle.clone())
    }
}
