// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateIntent`](crate::operation::create_intent::builders::CreateIntentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`intent_name(impl Into<String>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::intent_name) / [`set_intent_name(Option<String>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_intent_name): <p>The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_description): <p>A description of the intent. Use the description to help identify the intent in lists.</p>
    ///   - [`parent_intent_signature(impl Into<String>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::parent_intent_signature) / [`set_parent_intent_signature(Option<String>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_parent_intent_signature): <p>A unique identifier for the built-in intent to base this intent on.</p>
    ///   - [`sample_utterances(Vec<SampleUtterance>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::sample_utterances) / [`set_sample_utterances(Option<Vec<SampleUtterance>>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_sample_utterances): <p>An array of strings that a user might say to signal the intent. For example, "I want a pizza", or "I want a {PizzaSize} pizza". </p>  <p>In an utterance, slot names are enclosed in curly braces ("{", "}") to indicate where they should be displayed in the utterance shown to the user.. </p>
    ///   - [`dialog_code_hook(DialogCodeHookSettings)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::dialog_code_hook) / [`set_dialog_code_hook(Option<DialogCodeHookSettings>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_dialog_code_hook): <p>Specifies that Amazon Lex invokes the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction.</p>  <p>For example, suppose that your bot determines that the user's name is John. You Lambda function might retrieve John's information from a backend database and prepopulate some of the values. For example, if you find that John is gluten intolerant, you might set the corresponding intent slot, <code>glutenIntolerant</code> to <code>true</code>. You might find John's phone number and set the corresponding session attribute.</p>
    ///   - [`fulfillment_code_hook(FulfillmentCodeHookSettings)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::fulfillment_code_hook) / [`set_fulfillment_code_hook(Option<FulfillmentCodeHookSettings>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_fulfillment_code_hook): <p>Specifies that Amazon Lex invokes the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user.</p>  <p>For example, in a pizza ordering bot, the Lambda function can look up the closest pizza restaurant to the customer's location and then place an order on the customer's behalf.</p>
    ///   - [`intent_confirmation_setting(IntentConfirmationSetting)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::intent_confirmation_setting) / [`set_intent_confirmation_setting(Option<IntentConfirmationSetting>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_intent_confirmation_setting): <p>Provides prompts that Amazon Lex sends to the user to confirm the completion of an intent. If the user answers "no," the settings contain a statement that is sent to the user to end the intent.</p>
    ///   - [`intent_closing_setting(IntentClosingSetting)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::intent_closing_setting) / [`set_intent_closing_setting(Option<IntentClosingSetting>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_intent_closing_setting): <p>Sets the response that Amazon Lex sends to the user when the intent is closed.</p>
    ///   - [`input_contexts(Vec<InputContext>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::input_contexts) / [`set_input_contexts(Option<Vec<InputContext>>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_input_contexts): <p>A list of contexts that must be active for this intent to be considered by Amazon Lex.</p>  <p>When an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent.</p>  <p>A context can be automatically activated using the <code>outputContexts</code> property or it can be set at runtime.</p>  <p> For example, if there are two intents with different input contexts that respond to the same utterances, only the intent with the active context will respond.</p>  <p>An intent may have up to 5 input contexts. If an intent has multiple input contexts, all of the contexts must be active to consider the intent.</p>
    ///   - [`output_contexts(Vec<OutputContext>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::output_contexts) / [`set_output_contexts(Option<Vec<OutputContext>>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_output_contexts): <p>A lists of contexts that the intent activates when it is fulfilled.</p>  <p>You can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer. </p>  <p>When you use the <code>outputContextsList</code> property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active.</p>
    ///   - [`kendra_configuration(KendraConfiguration)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::kendra_configuration) / [`set_kendra_configuration(Option<KendraConfiguration>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_kendra_configuration): <p>Configuration information required to use the <code>AMAZON.KendraSearchIntent</code> intent to connect to an Amazon Kendra index. The <code>AMAZON.KendraSearchIntent</code> intent is called when Amazon Lex can't determine another intent to invoke.</p>
    ///   - [`bot_id(impl Into<String>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::bot_id) / [`set_bot_id(Option<String>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_bot_id): <p>The identifier of the bot associated with this intent.</p>
    ///   - [`bot_version(impl Into<String>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::bot_version) / [`set_bot_version(Option<String>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_bot_version): <p>The identifier of the version of the bot associated with this intent.</p>
    ///   - [`locale_id(impl Into<String>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::locale_id) / [`set_locale_id(Option<String>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_locale_id): <p>The identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    ///   - [`initial_response_setting(InitialResponseSetting)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::initial_response_setting) / [`set_initial_response_setting(Option<InitialResponseSetting>)`](crate::operation::create_intent::builders::CreateIntentFluentBuilder::set_initial_response_setting): <p>Configuration settings for the response that is sent to the user at the beginning of a conversation, before eliciting slot values.</p>
    /// - On success, responds with [`CreateIntentOutput`](crate::operation::create_intent::CreateIntentOutput) with field(s):
    ///   - [`intent_id(Option<String>)`](crate::operation::create_intent::CreateIntentOutput::intent_id): <p>A unique identifier for the intent.</p>
    ///   - [`intent_name(Option<String>)`](crate::operation::create_intent::CreateIntentOutput::intent_name): <p>The name specified for the intent.</p>
    ///   - [`description(Option<String>)`](crate::operation::create_intent::CreateIntentOutput::description): <p>The description specified for the intent.</p>
    ///   - [`parent_intent_signature(Option<String>)`](crate::operation::create_intent::CreateIntentOutput::parent_intent_signature): <p>The signature of the parent intent specified for the intent.</p>
    ///   - [`sample_utterances(Option<Vec<SampleUtterance>>)`](crate::operation::create_intent::CreateIntentOutput::sample_utterances): <p>The sample utterances specified for the intent.</p>
    ///   - [`dialog_code_hook(Option<DialogCodeHookSettings>)`](crate::operation::create_intent::CreateIntentOutput::dialog_code_hook): <p>The dialog Lambda function specified for the intent.</p>
    ///   - [`fulfillment_code_hook(Option<FulfillmentCodeHookSettings>)`](crate::operation::create_intent::CreateIntentOutput::fulfillment_code_hook): <p>The fulfillment Lambda function specified for the intent.</p>
    ///   - [`intent_confirmation_setting(Option<IntentConfirmationSetting>)`](crate::operation::create_intent::CreateIntentOutput::intent_confirmation_setting): <p>The confirmation setting specified for the intent.</p>
    ///   - [`intent_closing_setting(Option<IntentClosingSetting>)`](crate::operation::create_intent::CreateIntentOutput::intent_closing_setting): <p>The closing setting specified for the intent.</p>
    ///   - [`input_contexts(Option<Vec<InputContext>>)`](crate::operation::create_intent::CreateIntentOutput::input_contexts): <p>The list of input contexts specified for the intent.</p>
    ///   - [`output_contexts(Option<Vec<OutputContext>>)`](crate::operation::create_intent::CreateIntentOutput::output_contexts): <p>The list of output contexts specified for the intent.</p>
    ///   - [`kendra_configuration(Option<KendraConfiguration>)`](crate::operation::create_intent::CreateIntentOutput::kendra_configuration): <p>Configuration for searching a Amazon Kendra index specified for the intent.</p>
    ///   - [`bot_id(Option<String>)`](crate::operation::create_intent::CreateIntentOutput::bot_id): <p>The identifier of the bot associated with the intent.</p>
    ///   - [`bot_version(Option<String>)`](crate::operation::create_intent::CreateIntentOutput::bot_version): <p>The identifier of the version of the bot associated with the intent.</p>
    ///   - [`locale_id(Option<String>)`](crate::operation::create_intent::CreateIntentOutput::locale_id): <p>The locale that the intent is specified to use.</p>
    ///   - [`creation_date_time(Option<DateTime>)`](crate::operation::create_intent::CreateIntentOutput::creation_date_time): <p>A timestamp of the date and time that the intent was created.</p>
    ///   - [`initial_response_setting(Option<InitialResponseSetting>)`](crate::operation::create_intent::CreateIntentOutput::initial_response_setting): <p>Configuration settings for the response that is sent to the user at the beginning of a conversation, before eliciting slot values.</p>
    /// - On failure, responds with [`SdkError<CreateIntentError>`](crate::operation::create_intent::CreateIntentError)
    pub fn create_intent(
        &self,
    ) -> crate::operation::create_intent::builders::CreateIntentFluentBuilder {
        crate::operation::create_intent::builders::CreateIntentFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
