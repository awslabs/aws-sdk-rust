// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.bot_name {
        object.key("botName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.bot_tags {
        let mut object_3 = object.key("botTags").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4).string(value_5.as_str());
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.data_privacy {
        let mut object_7 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_privacy(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.role_arn {
        object.key("roleArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.test_bot_alias_tags {
        let mut object_12 = object.key("testBotAliasTags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bot_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.bot_alias_locale_settings {
        let mut object_16 = object.key("botAliasLocaleSettings").start_object();
        for (key_17, value_18) in var_15 {
            {
                let mut object_19 = object_16.key(key_17).start_object();
                crate::json_ser::serialize_structure_crate_model_bot_alias_locale_settings(
                    &mut object_19,
                    value_18,
                )?;
                object_19.finish();
            }
        }
        object_16.finish();
    }
    if let Some(var_20) = &input.bot_alias_name {
        object.key("botAliasName").string(var_20.as_str());
    }
    if let Some(var_21) = &input.bot_version {
        object.key("botVersion").string(var_21.as_str());
    }
    if let Some(var_22) = &input.conversation_log_settings {
        let mut object_23 = object.key("conversationLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_conversation_log_settings(
            &mut object_23,
            var_22,
        )?;
        object_23.finish();
    }
    if let Some(var_24) = &input.description {
        object.key("description").string(var_24.as_str());
    }
    if let Some(var_25) = &input.sentiment_analysis_settings {
        let mut object_26 = object.key("sentimentAnalysisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sentiment_analysis_settings(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.tags {
        let mut object_28 = object.key("tags").start_object();
        for (key_29, value_30) in var_27 {
            {
                object_28.key(key_29).string(value_30.as_str());
            }
        }
        object_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bot_locale_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotLocaleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.description {
        object.key("description").string(var_31.as_str());
    }
    if let Some(var_32) = &input.locale_id {
        object.key("localeId").string(var_32.as_str());
    }
    if let Some(var_33) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_33).into()),
        );
    }
    if let Some(var_34) = &input.voice_settings {
        let mut object_35 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_settings(&mut object_35, var_34)?;
        object_35.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bot_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.bot_version_locale_specification {
        let mut object_37 = object.key("botVersionLocaleSpecification").start_object();
        for (key_38, value_39) in var_36 {
            {
                let mut object_40 = object_37.key(key_38).start_object();
                crate::json_ser::serialize_structure_crate_model_bot_version_locale_details(
                    &mut object_40,
                    value_39,
                )?;
                object_40.finish();
            }
        }
        object_37.finish();
    }
    if let Some(var_41) = &input.description {
        object.key("description").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_export_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.file_format {
        object.key("fileFormat").string(var_42.as_str());
    }
    if let Some(var_43) = &input.file_password {
        object.key("filePassword").string(var_43.as_str());
    }
    if let Some(var_44) = &input.resource_specification {
        let mut object_45 = object.key("resourceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_export_resource_specification(
            &mut object_45,
            var_44,
        )?;
        object_45.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_intent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIntentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.description {
        object.key("description").string(var_46.as_str());
    }
    if let Some(var_47) = &input.dialog_code_hook {
        let mut object_48 = object.key("dialogCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_settings(
            &mut object_48,
            var_47,
        )?;
        object_48.finish();
    }
    if let Some(var_49) = &input.fulfillment_code_hook {
        let mut object_50 = object.key("fulfillmentCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_code_hook_settings(
            &mut object_50,
            var_49,
        )?;
        object_50.finish();
    }
    if let Some(var_51) = &input.input_contexts {
        let mut array_52 = object.key("inputContexts").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_context(
                    &mut object_54,
                    item_53,
                )?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    if let Some(var_55) = &input.intent_closing_setting {
        let mut object_56 = object.key("intentClosingSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_closing_setting(
            &mut object_56,
            var_55,
        )?;
        object_56.finish();
    }
    if let Some(var_57) = &input.intent_confirmation_setting {
        let mut object_58 = object.key("intentConfirmationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_confirmation_setting(
            &mut object_58,
            var_57,
        )?;
        object_58.finish();
    }
    if let Some(var_59) = &input.intent_name {
        object.key("intentName").string(var_59.as_str());
    }
    if let Some(var_60) = &input.kendra_configuration {
        let mut object_61 = object.key("kendraConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_kendra_configuration(
            &mut object_61,
            var_60,
        )?;
        object_61.finish();
    }
    if let Some(var_62) = &input.output_contexts {
        let mut array_63 = object.key("outputContexts").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_context(
                    &mut object_65,
                    item_64,
                )?;
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if let Some(var_66) = &input.parent_intent_signature {
        object.key("parentIntentSignature").string(var_66.as_str());
    }
    if let Some(var_67) = &input.sample_utterances {
        let mut array_68 = object.key("sampleUtterances").start_array();
        for item_69 in var_67 {
            {
                let mut object_70 = array_68.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_70,
                    item_69,
                )?;
                object_70.finish();
            }
        }
        array_68.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.policy {
        object.key("policy").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_policy_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourcePolicyStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.action {
        let mut array_73 = object.key("action").start_array();
        for item_74 in var_72 {
            {
                array_73.value().string(item_74.as_str());
            }
        }
        array_73.finish();
    }
    if let Some(var_75) = &input.condition {
        let mut object_76 = object.key("condition").start_object();
        for (key_77, value_78) in var_75 {
            {
                let mut object_79 = object_76.key(key_77).start_object();
                for (key_80, value_81) in value_78 {
                    {
                        object_79.key(key_80).string(value_81.as_str());
                    }
                }
                object_79.finish();
            }
        }
        object_76.finish();
    }
    if let Some(var_82) = &input.effect {
        object.key("effect").string(var_82.as_str());
    }
    if let Some(var_83) = &input.principal {
        let mut array_84 = object.key("principal").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_86,
                    item_85,
                )?;
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.statement_id {
        object.key("statementId").string(var_87.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_slot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSlotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.description {
        object.key("description").string(var_88.as_str());
    }
    if let Some(var_89) = &input.multiple_values_setting {
        let mut object_90 = object.key("multipleValuesSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_multiple_values_setting(
            &mut object_90,
            var_89,
        )?;
        object_90.finish();
    }
    if let Some(var_91) = &input.obfuscation_setting {
        let mut object_92 = object.key("obfuscationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_obfuscation_setting(
            &mut object_92,
            var_91,
        )?;
        object_92.finish();
    }
    if let Some(var_93) = &input.slot_name {
        object.key("slotName").string(var_93.as_str());
    }
    if let Some(var_94) = &input.slot_type_id {
        object.key("slotTypeId").string(var_94.as_str());
    }
    if let Some(var_95) = &input.value_elicitation_setting {
        let mut object_96 = object.key("valueElicitationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_elicitation_setting(
            &mut object_96,
            var_95,
        )?;
        object_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_slot_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSlotTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.description {
        object.key("description").string(var_97.as_str());
    }
    if let Some(var_98) = &input.external_source_setting {
        let mut object_99 = object.key("externalSourceSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_external_source_setting(
            &mut object_99,
            var_98,
        )?;
        object_99.finish();
    }
    if let Some(var_100) = &input.parent_slot_type_signature {
        object
            .key("parentSlotTypeSignature")
            .string(var_100.as_str());
    }
    if let Some(var_101) = &input.slot_type_name {
        object.key("slotTypeName").string(var_101.as_str());
    }
    if let Some(var_102) = &input.slot_type_values {
        let mut array_103 = object.key("slotTypeValues").start_array();
        for item_104 in var_102 {
            {
                let mut object_105 = array_103.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_type_value(
                    &mut object_105,
                    item_104,
                )?;
                object_105.finish();
            }
        }
        array_103.finish();
    }
    if let Some(var_106) = &input.value_selection_setting {
        let mut object_107 = object.key("valueSelectionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_selection_setting(
            &mut object_107,
            var_106,
        )?;
        object_107.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_aggregated_utterances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAggregatedUtterancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.aggregation_duration {
        let mut object_109 = object.key("aggregationDuration").start_object();
        crate::json_ser::serialize_structure_crate_model_utterance_aggregation_duration(
            &mut object_109,
            var_108,
        )?;
        object_109.finish();
    }
    if let Some(var_110) = &input.bot_alias_id {
        object.key("botAliasId").string(var_110.as_str());
    }
    if let Some(var_111) = &input.bot_version {
        object.key("botVersion").string(var_111.as_str());
    }
    if let Some(var_112) = &input.filters {
        let mut array_113 = object.key("filters").start_array();
        for item_114 in var_112 {
            {
                let mut object_115 = array_113.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aggregated_utterances_filter(
                    &mut object_115,
                    item_114,
                )?;
                object_115.finish();
            }
        }
        array_113.finish();
    }
    if let Some(var_116) = &input.locale_id {
        object.key("localeId").string(var_116.as_str());
    }
    if let Some(var_117) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_117).into()),
        );
    }
    if let Some(var_118) = &input.next_token {
        object.key("nextToken").string(var_118.as_str());
    }
    if let Some(var_119) = &input.sort_by {
        let mut object_120 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregated_utterances_sort_by(
            &mut object_120,
            var_119,
        )?;
        object_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_121).into()),
        );
    }
    if let Some(var_122) = &input.next_token {
        object.key("nextToken").string(var_122.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_locales_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotLocalesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.filters {
        let mut array_124 = object.key("filters").start_array();
        for item_125 in var_123 {
            {
                let mut object_126 = array_124.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bot_locale_filter(
                    &mut object_126,
                    item_125,
                )?;
                object_126.finish();
            }
        }
        array_124.finish();
    }
    if let Some(var_127) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_127).into()),
        );
    }
    if let Some(var_128) = &input.next_token {
        object.key("nextToken").string(var_128.as_str());
    }
    if let Some(var_129) = &input.sort_by {
        let mut object_130 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_locale_sort_by(
            &mut object_130,
            var_129,
        )?;
        object_130.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_recommendations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotRecommendationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_131).into()),
        );
    }
    if let Some(var_132) = &input.next_token {
        object.key("nextToken").string(var_132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.filters {
        let mut array_134 = object.key("filters").start_array();
        for item_135 in var_133 {
            {
                let mut object_136 = array_134.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bot_filter(
                    &mut object_136,
                    item_135,
                )?;
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_137).into()),
        );
    }
    if let Some(var_138) = &input.next_token {
        object.key("nextToken").string(var_138.as_str());
    }
    if let Some(var_139) = &input.sort_by {
        let mut object_140 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_sort_by(&mut object_140, var_139)?;
        object_140.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_141) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    if let Some(var_142) = &input.next_token {
        object.key("nextToken").string(var_142.as_str());
    }
    if let Some(var_143) = &input.sort_by {
        let mut object_144 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_version_sort_by(
            &mut object_144,
            var_143,
        )?;
        object_144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_built_in_intents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBuiltInIntentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_145).into()),
        );
    }
    if let Some(var_146) = &input.next_token {
        object.key("nextToken").string(var_146.as_str());
    }
    if let Some(var_147) = &input.sort_by {
        let mut object_148 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_built_in_intent_sort_by(
            &mut object_148,
            var_147,
        )?;
        object_148.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_built_in_slot_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBuiltInSlotTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_149).into()),
        );
    }
    if let Some(var_150) = &input.next_token {
        object.key("nextToken").string(var_150.as_str());
    }
    if let Some(var_151) = &input.sort_by {
        let mut object_152 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_built_in_slot_type_sort_by(
            &mut object_152,
            var_151,
        )?;
        object_152.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_exports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExportsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.bot_id {
        object.key("botId").string(var_153.as_str());
    }
    if let Some(var_154) = &input.bot_version {
        object.key("botVersion").string(var_154.as_str());
    }
    if let Some(var_155) = &input.filters {
        let mut array_156 = object.key("filters").start_array();
        for item_157 in var_155 {
            {
                let mut object_158 = array_156.value().start_object();
                crate::json_ser::serialize_structure_crate_model_export_filter(
                    &mut object_158,
                    item_157,
                )?;
                object_158.finish();
            }
        }
        array_156.finish();
    }
    if let Some(var_159) = &input.locale_id {
        object.key("localeId").string(var_159.as_str());
    }
    if let Some(var_160) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    if let Some(var_161) = &input.next_token {
        object.key("nextToken").string(var_161.as_str());
    }
    if let Some(var_162) = &input.sort_by {
        let mut object_163 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_export_sort_by(&mut object_163, var_162)?;
        object_163.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_imports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImportsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.bot_id {
        object.key("botId").string(var_164.as_str());
    }
    if let Some(var_165) = &input.bot_version {
        object.key("botVersion").string(var_165.as_str());
    }
    if let Some(var_166) = &input.filters {
        let mut array_167 = object.key("filters").start_array();
        for item_168 in var_166 {
            {
                let mut object_169 = array_167.value().start_object();
                crate::json_ser::serialize_structure_crate_model_import_filter(
                    &mut object_169,
                    item_168,
                )?;
                object_169.finish();
            }
        }
        array_167.finish();
    }
    if let Some(var_170) = &input.locale_id {
        object.key("localeId").string(var_170.as_str());
    }
    if let Some(var_171) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_171).into()),
        );
    }
    if let Some(var_172) = &input.next_token {
        object.key("nextToken").string(var_172.as_str());
    }
    if let Some(var_173) = &input.sort_by {
        let mut object_174 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_import_sort_by(&mut object_174, var_173)?;
        object_174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_intents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIntentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.filters {
        let mut array_176 = object.key("filters").start_array();
        for item_177 in var_175 {
            {
                let mut object_178 = array_176.value().start_object();
                crate::json_ser::serialize_structure_crate_model_intent_filter(
                    &mut object_178,
                    item_177,
                )?;
                object_178.finish();
            }
        }
        array_176.finish();
    }
    if let Some(var_179) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_179).into()),
        );
    }
    if let Some(var_180) = &input.next_token {
        object.key("nextToken").string(var_180.as_str());
    }
    if let Some(var_181) = &input.sort_by {
        let mut object_182 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_sort_by(&mut object_182, var_181)?;
        object_182.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_recommended_intents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRecommendedIntentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_183) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    if let Some(var_184) = &input.next_token {
        object.key("nextToken").string(var_184.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_slots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSlotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.filters {
        let mut array_186 = object.key("filters").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_filter(
                    &mut object_188,
                    item_187,
                )?;
                object_188.finish();
            }
        }
        array_186.finish();
    }
    if let Some(var_189) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    if let Some(var_190) = &input.next_token {
        object.key("nextToken").string(var_190.as_str());
    }
    if let Some(var_191) = &input.sort_by {
        let mut object_192 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_sort_by(&mut object_192, var_191)?;
        object_192.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_slot_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSlotTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_193) = &input.filters {
        let mut array_194 = object.key("filters").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_type_filter(
                    &mut object_196,
                    item_195,
                )?;
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_197).into()),
        );
    }
    if let Some(var_198) = &input.next_token {
        object.key("nextToken").string(var_198.as_str());
    }
    if let Some(var_199) = &input.sort_by {
        let mut object_200 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_type_sort_by(
            &mut object_200,
            var_199,
        )?;
        object_200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_associated_transcripts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchAssociatedTranscriptsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.filters {
        let mut array_202 = object.key("filters").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_crate_model_associated_transcript_filter(
                    &mut object_204,
                    item_203,
                )?;
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    if let Some(var_206) = &input.next_index {
        object.key("nextIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_206).into()),
        );
    }
    if let Some(var_207) = &input.search_order {
        object.key("searchOrder").string(var_207.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_bot_recommendation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBotRecommendationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_208) = &input.encryption_setting {
        let mut object_209 = object.key("encryptionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_setting(
            &mut object_209,
            var_208,
        )?;
        object_209.finish();
    }
    if let Some(var_210) = &input.transcript_source_setting {
        let mut object_211 = object.key("transcriptSourceSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_transcript_source_setting(
            &mut object_211,
            var_210,
        )?;
        object_211.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.file_password {
        object.key("filePassword").string(var_212.as_str());
    }
    if let Some(var_213) = &input.import_id {
        object.key("importId").string(var_213.as_str());
    }
    if let Some(var_214) = &input.merge_strategy {
        object.key("mergeStrategy").string(var_214.as_str());
    }
    if let Some(var_215) = &input.resource_specification {
        let mut object_216 = object.key("resourceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_import_resource_specification(
            &mut object_216,
            var_215,
        )?;
        object_216.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_217) = &input.tags {
        let mut object_218 = object.key("tags").start_object();
        for (key_219, value_220) in var_217 {
            {
                object_218.key(key_219).string(value_220.as_str());
            }
        }
        object_218.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.bot_name {
        object.key("botName").string(var_221.as_str());
    }
    if let Some(var_222) = &input.data_privacy {
        let mut object_223 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_privacy(&mut object_223, var_222)?;
        object_223.finish();
    }
    if let Some(var_224) = &input.description {
        object.key("description").string(var_224.as_str());
    }
    if let Some(var_225) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_225).into()),
        );
    }
    if let Some(var_226) = &input.role_arn {
        object.key("roleArn").string(var_226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.bot_alias_locale_settings {
        let mut object_228 = object.key("botAliasLocaleSettings").start_object();
        for (key_229, value_230) in var_227 {
            {
                let mut object_231 = object_228.key(key_229).start_object();
                crate::json_ser::serialize_structure_crate_model_bot_alias_locale_settings(
                    &mut object_231,
                    value_230,
                )?;
                object_231.finish();
            }
        }
        object_228.finish();
    }
    if let Some(var_232) = &input.bot_alias_name {
        object.key("botAliasName").string(var_232.as_str());
    }
    if let Some(var_233) = &input.bot_version {
        object.key("botVersion").string(var_233.as_str());
    }
    if let Some(var_234) = &input.conversation_log_settings {
        let mut object_235 = object.key("conversationLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_conversation_log_settings(
            &mut object_235,
            var_234,
        )?;
        object_235.finish();
    }
    if let Some(var_236) = &input.description {
        object.key("description").string(var_236.as_str());
    }
    if let Some(var_237) = &input.sentiment_analysis_settings {
        let mut object_238 = object.key("sentimentAnalysisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sentiment_analysis_settings(
            &mut object_238,
            var_237,
        )?;
        object_238.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_locale_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotLocaleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_239) = &input.description {
        object.key("description").string(var_239.as_str());
    }
    if let Some(var_240) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_240).into()),
        );
    }
    if let Some(var_241) = &input.voice_settings {
        let mut object_242 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_settings(&mut object_242, var_241)?;
        object_242.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_recommendation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotRecommendationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.encryption_setting {
        let mut object_244 = object.key("encryptionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_setting(
            &mut object_244,
            var_243,
        )?;
        object_244.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_export_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_245) = &input.file_password {
        object.key("filePassword").string(var_245.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_intent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIntentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.description {
        object.key("description").string(var_246.as_str());
    }
    if let Some(var_247) = &input.dialog_code_hook {
        let mut object_248 = object.key("dialogCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_settings(
            &mut object_248,
            var_247,
        )?;
        object_248.finish();
    }
    if let Some(var_249) = &input.fulfillment_code_hook {
        let mut object_250 = object.key("fulfillmentCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_code_hook_settings(
            &mut object_250,
            var_249,
        )?;
        object_250.finish();
    }
    if let Some(var_251) = &input.input_contexts {
        let mut array_252 = object.key("inputContexts").start_array();
        for item_253 in var_251 {
            {
                let mut object_254 = array_252.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_context(
                    &mut object_254,
                    item_253,
                )?;
                object_254.finish();
            }
        }
        array_252.finish();
    }
    if let Some(var_255) = &input.intent_closing_setting {
        let mut object_256 = object.key("intentClosingSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_closing_setting(
            &mut object_256,
            var_255,
        )?;
        object_256.finish();
    }
    if let Some(var_257) = &input.intent_confirmation_setting {
        let mut object_258 = object.key("intentConfirmationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_confirmation_setting(
            &mut object_258,
            var_257,
        )?;
        object_258.finish();
    }
    if let Some(var_259) = &input.intent_name {
        object.key("intentName").string(var_259.as_str());
    }
    if let Some(var_260) = &input.kendra_configuration {
        let mut object_261 = object.key("kendraConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_kendra_configuration(
            &mut object_261,
            var_260,
        )?;
        object_261.finish();
    }
    if let Some(var_262) = &input.output_contexts {
        let mut array_263 = object.key("outputContexts").start_array();
        for item_264 in var_262 {
            {
                let mut object_265 = array_263.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_context(
                    &mut object_265,
                    item_264,
                )?;
                object_265.finish();
            }
        }
        array_263.finish();
    }
    if let Some(var_266) = &input.parent_intent_signature {
        object.key("parentIntentSignature").string(var_266.as_str());
    }
    if let Some(var_267) = &input.sample_utterances {
        let mut array_268 = object.key("sampleUtterances").start_array();
        for item_269 in var_267 {
            {
                let mut object_270 = array_268.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_270,
                    item_269,
                )?;
                object_270.finish();
            }
        }
        array_268.finish();
    }
    if let Some(var_271) = &input.slot_priorities {
        let mut array_272 = object.key("slotPriorities").start_array();
        for item_273 in var_271 {
            {
                let mut object_274 = array_272.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_priority(
                    &mut object_274,
                    item_273,
                )?;
                object_274.finish();
            }
        }
        array_272.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.policy {
        object.key("policy").string(var_275.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_slot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSlotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_276) = &input.description {
        object.key("description").string(var_276.as_str());
    }
    if let Some(var_277) = &input.multiple_values_setting {
        let mut object_278 = object.key("multipleValuesSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_multiple_values_setting(
            &mut object_278,
            var_277,
        )?;
        object_278.finish();
    }
    if let Some(var_279) = &input.obfuscation_setting {
        let mut object_280 = object.key("obfuscationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_obfuscation_setting(
            &mut object_280,
            var_279,
        )?;
        object_280.finish();
    }
    if let Some(var_281) = &input.slot_name {
        object.key("slotName").string(var_281.as_str());
    }
    if let Some(var_282) = &input.slot_type_id {
        object.key("slotTypeId").string(var_282.as_str());
    }
    if let Some(var_283) = &input.value_elicitation_setting {
        let mut object_284 = object.key("valueElicitationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_elicitation_setting(
            &mut object_284,
            var_283,
        )?;
        object_284.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_slot_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSlotTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.description {
        object.key("description").string(var_285.as_str());
    }
    if let Some(var_286) = &input.external_source_setting {
        let mut object_287 = object.key("externalSourceSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_external_source_setting(
            &mut object_287,
            var_286,
        )?;
        object_287.finish();
    }
    if let Some(var_288) = &input.parent_slot_type_signature {
        object
            .key("parentSlotTypeSignature")
            .string(var_288.as_str());
    }
    if let Some(var_289) = &input.slot_type_name {
        object.key("slotTypeName").string(var_289.as_str());
    }
    if let Some(var_290) = &input.slot_type_values {
        let mut array_291 = object.key("slotTypeValues").start_array();
        for item_292 in var_290 {
            {
                let mut object_293 = array_291.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_type_value(
                    &mut object_293,
                    item_292,
                )?;
                object_293.finish();
            }
        }
        array_291.finish();
    }
    if let Some(var_294) = &input.value_selection_setting {
        let mut object_295 = object.key("valueSelectionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_selection_setting(
            &mut object_295,
            var_294,
        )?;
        object_295.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_privacy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataPrivacy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("childDirected").boolean(input.child_directed);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_alias_locale_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotAliasLocaleSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_296) = &input.code_hook_specification {
        let mut object_297 = object.key("codeHookSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_code_hook_specification(
            &mut object_297,
            var_296,
        )?;
        object_297.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conversation_log_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConversationLogSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.text_log_settings {
        let mut array_299 = object.key("textLogSettings").start_array();
        for item_300 in var_298 {
            {
                let mut object_301 = array_299.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_log_setting(
                    &mut object_301,
                    item_300,
                )?;
                object_301.finish();
            }
        }
        array_299.finish();
    }
    if let Some(var_302) = &input.audio_log_settings {
        let mut array_303 = object.key("audioLogSettings").start_array();
        for item_304 in var_302 {
            {
                let mut object_305 = array_303.value().start_object();
                crate::json_ser::serialize_structure_crate_model_audio_log_setting(
                    &mut object_305,
                    item_304,
                )?;
                object_305.finish();
            }
        }
        array_303.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sentiment_analysis_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SentimentAnalysisSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("detectSentiment")
            .boolean(input.detect_sentiment);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_voice_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_306) = &input.voice_id {
        object.key("voiceId").string(var_306.as_str());
    }
    if let Some(var_307) = &input.engine {
        object.key("engine").string(var_307.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_version_locale_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotVersionLocaleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_308) = &input.source_bot_version {
        object.key("sourceBotVersion").string(var_308.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_resource_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportResourceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_309) = &input.bot_export_specification {
        let mut object_310 = object.key("botExportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_export_specification(
            &mut object_310,
            var_309,
        )?;
        object_310.finish();
    }
    if let Some(var_311) = &input.bot_locale_export_specification {
        let mut object_312 = object.key("botLocaleExportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_locale_export_specification(
            &mut object_312,
            var_311,
        )?;
        object_312.finish();
    }
    if let Some(var_313) = &input.custom_vocabulary_export_specification {
        let mut object_314 = object
            .key("customVocabularyExportSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_vocabulary_export_specification(
            &mut object_314,
            var_313,
        )?;
        object_314.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dialog_code_hook_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DialogCodeHookSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_code_hook_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentCodeHookSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_315) = &input.post_fulfillment_status_specification {
        let mut object_316 = object
            .key("postFulfillmentStatusSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_post_fulfillment_status_specification(
            &mut object_316,
            var_315,
        )?;
        object_316.finish();
    }
    if let Some(var_317) = &input.fulfillment_updates_specification {
        let mut object_318 = object.key("fulfillmentUpdatesSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_updates_specification(
            &mut object_318,
            var_317,
        )?;
        object_318.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.name {
        object.key("name").string(var_319.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_closing_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentClosingSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_320) = &input.closing_response {
        let mut object_321 = object.key("closingResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_321,
            var_320,
        )?;
        object_321.finish();
    }
    if let Some(var_322) = &input.active {
        object.key("active").boolean(*var_322);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_confirmation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentConfirmationSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_323) = &input.prompt_specification {
        let mut object_324 = object.key("promptSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_prompt_specification(
            &mut object_324,
            var_323,
        )?;
        object_324.finish();
    }
    if let Some(var_325) = &input.declination_response {
        let mut object_326 = object.key("declinationResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_326,
            var_325,
        )?;
        object_326.finish();
    }
    if let Some(var_327) = &input.active {
        object.key("active").boolean(*var_327);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kendra_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KendraConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_328) = &input.kendra_index {
        object.key("kendraIndex").string(var_328.as_str());
    }
    if input.query_filter_string_enabled {
        object
            .key("queryFilterStringEnabled")
            .boolean(input.query_filter_string_enabled);
    }
    if let Some(var_329) = &input.query_filter_string {
        object.key("queryFilterString").string(var_329.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_330) = &input.name {
        object.key("name").string(var_330.as_str());
    }
    if let Some(var_331) = &input.time_to_live_in_seconds {
        object.key("timeToLiveInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_331).into()),
        );
    }
    if let Some(var_332) = &input.turns_to_live {
        object.key("turnsToLive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_332).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sample_utterance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleUtterance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.utterance {
        object.key("utterance").string(var_333.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.service {
        object.key("service").string(var_334.as_str());
    }
    if let Some(var_335) = &input.arn {
        object.key("arn").string(var_335.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_multiple_values_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultipleValuesSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_multiple_values {
        object
            .key("allowMultipleValues")
            .boolean(input.allow_multiple_values);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_obfuscation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObfuscationSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.obfuscation_setting_type {
        object
            .key("obfuscationSettingType")
            .string(var_336.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_elicitation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueElicitationSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.default_value_specification {
        let mut object_338 = object.key("defaultValueSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_default_value_specification(
            &mut object_338,
            var_337,
        )?;
        object_338.finish();
    }
    if let Some(var_339) = &input.slot_constraint {
        object.key("slotConstraint").string(var_339.as_str());
    }
    if let Some(var_340) = &input.prompt_specification {
        let mut object_341 = object.key("promptSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_prompt_specification(
            &mut object_341,
            var_340,
        )?;
        object_341.finish();
    }
    if let Some(var_342) = &input.sample_utterances {
        let mut array_343 = object.key("sampleUtterances").start_array();
        for item_344 in var_342 {
            {
                let mut object_345 = array_343.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_345,
                    item_344,
                )?;
                object_345.finish();
            }
        }
        array_343.finish();
    }
    if let Some(var_346) = &input.wait_and_continue_specification {
        let mut object_347 = object.key("waitAndContinueSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_wait_and_continue_specification(
            &mut object_347,
            var_346,
        )?;
        object_347.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_external_source_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExternalSourceSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_348) = &input.grammar_slot_type_setting {
        let mut object_349 = object.key("grammarSlotTypeSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_grammar_slot_type_setting(
            &mut object_349,
            var_348,
        )?;
        object_349.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_type_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_350) = &input.sample_value {
        let mut object_351 = object.key("sampleValue").start_object();
        crate::json_ser::serialize_structure_crate_model_sample_value(&mut object_351, var_350)?;
        object_351.finish();
    }
    if let Some(var_352) = &input.synonyms {
        let mut array_353 = object.key("synonyms").start_array();
        for item_354 in var_352 {
            {
                let mut object_355 = array_353.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_value(
                    &mut object_355,
                    item_354,
                )?;
                object_355.finish();
            }
        }
        array_353.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_selection_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueSelectionSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.resolution_strategy {
        object.key("resolutionStrategy").string(var_356.as_str());
    }
    if let Some(var_357) = &input.regex_filter {
        let mut object_358 = object.key("regexFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_regex_filter(
            &mut object_358,
            var_357,
        )?;
        object_358.finish();
    }
    if let Some(var_359) = &input.advanced_recognition_setting {
        let mut object_360 = object.key("advancedRecognitionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_advanced_recognition_setting(
            &mut object_360,
            var_359,
        )?;
        object_360.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_utterance_aggregation_duration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UtteranceAggregationDuration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_361) = &input.relative_aggregation_duration {
        let mut object_362 = object.key("relativeAggregationDuration").start_object();
        crate::json_ser::serialize_structure_crate_model_relative_aggregation_duration(
            &mut object_362,
            var_361,
        )?;
        object_362.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregated_utterances_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregatedUtterancesFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_363) = &input.name {
        object.key("name").string(var_363.as_str());
    }
    if let Some(var_364) = &input.values {
        let mut array_365 = object.key("values").start_array();
        for item_366 in var_364 {
            {
                array_365.value().string(item_366.as_str());
            }
        }
        array_365.finish();
    }
    if let Some(var_367) = &input.operator {
        object.key("operator").string(var_367.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregated_utterances_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregatedUtterancesSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.attribute {
        object.key("attribute").string(var_368.as_str());
    }
    if let Some(var_369) = &input.order {
        object.key("order").string(var_369.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.name {
        object.key("name").string(var_370.as_str());
    }
    if let Some(var_371) = &input.values {
        let mut array_372 = object.key("values").start_array();
        for item_373 in var_371 {
            {
                array_372.value().string(item_373.as_str());
            }
        }
        array_372.finish();
    }
    if let Some(var_374) = &input.operator {
        object.key("operator").string(var_374.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.attribute {
        object.key("attribute").string(var_375.as_str());
    }
    if let Some(var_376) = &input.order {
        object.key("order").string(var_376.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.name {
        object.key("name").string(var_377.as_str());
    }
    if let Some(var_378) = &input.values {
        let mut array_379 = object.key("values").start_array();
        for item_380 in var_378 {
            {
                array_379.value().string(item_380.as_str());
            }
        }
        array_379.finish();
    }
    if let Some(var_381) = &input.operator {
        object.key("operator").string(var_381.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.attribute {
        object.key("attribute").string(var_382.as_str());
    }
    if let Some(var_383) = &input.order {
        object.key("order").string(var_383.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_version_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotVersionSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.attribute {
        object.key("attribute").string(var_384.as_str());
    }
    if let Some(var_385) = &input.order {
        object.key("order").string(var_385.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_built_in_intent_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BuiltInIntentSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.attribute {
        object.key("attribute").string(var_386.as_str());
    }
    if let Some(var_387) = &input.order {
        object.key("order").string(var_387.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_built_in_slot_type_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BuiltInSlotTypeSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_388) = &input.attribute {
        object.key("attribute").string(var_388.as_str());
    }
    if let Some(var_389) = &input.order {
        object.key("order").string(var_389.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_390) = &input.name {
        object.key("name").string(var_390.as_str());
    }
    if let Some(var_391) = &input.values {
        let mut array_392 = object.key("values").start_array();
        for item_393 in var_391 {
            {
                array_392.value().string(item_393.as_str());
            }
        }
        array_392.finish();
    }
    if let Some(var_394) = &input.operator {
        object.key("operator").string(var_394.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.attribute {
        object.key("attribute").string(var_395.as_str());
    }
    if let Some(var_396) = &input.order {
        object.key("order").string(var_396.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_397) = &input.name {
        object.key("name").string(var_397.as_str());
    }
    if let Some(var_398) = &input.values {
        let mut array_399 = object.key("values").start_array();
        for item_400 in var_398 {
            {
                array_399.value().string(item_400.as_str());
            }
        }
        array_399.finish();
    }
    if let Some(var_401) = &input.operator {
        object.key("operator").string(var_401.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_402) = &input.attribute {
        object.key("attribute").string(var_402.as_str());
    }
    if let Some(var_403) = &input.order {
        object.key("order").string(var_403.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_404) = &input.name {
        object.key("name").string(var_404.as_str());
    }
    if let Some(var_405) = &input.values {
        let mut array_406 = object.key("values").start_array();
        for item_407 in var_405 {
            {
                array_406.value().string(item_407.as_str());
            }
        }
        array_406.finish();
    }
    if let Some(var_408) = &input.operator {
        object.key("operator").string(var_408.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_409) = &input.attribute {
        object.key("attribute").string(var_409.as_str());
    }
    if let Some(var_410) = &input.order {
        object.key("order").string(var_410.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_411) = &input.name {
        object.key("name").string(var_411.as_str());
    }
    if let Some(var_412) = &input.values {
        let mut array_413 = object.key("values").start_array();
        for item_414 in var_412 {
            {
                array_413.value().string(item_414.as_str());
            }
        }
        array_413.finish();
    }
    if let Some(var_415) = &input.operator {
        object.key("operator").string(var_415.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_416) = &input.attribute {
        object.key("attribute").string(var_416.as_str());
    }
    if let Some(var_417) = &input.order {
        object.key("order").string(var_417.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_type_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.name {
        object.key("name").string(var_418.as_str());
    }
    if let Some(var_419) = &input.values {
        let mut array_420 = object.key("values").start_array();
        for item_421 in var_419 {
            {
                array_420.value().string(item_421.as_str());
            }
        }
        array_420.finish();
    }
    if let Some(var_422) = &input.operator {
        object.key("operator").string(var_422.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_type_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.attribute {
        object.key("attribute").string(var_423.as_str());
    }
    if let Some(var_424) = &input.order {
        object.key("order").string(var_424.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_associated_transcript_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociatedTranscriptFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.name {
        object.key("name").string(var_425.as_str());
    }
    if let Some(var_426) = &input.values {
        let mut array_427 = object.key("values").start_array();
        for item_428 in var_426 {
            {
                array_427.value().string(item_428.as_str());
            }
        }
        array_427.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_429) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_429.as_str());
    }
    if let Some(var_430) = &input.bot_locale_export_password {
        object
            .key("botLocaleExportPassword")
            .string(var_430.as_str());
    }
    if let Some(var_431) = &input.associated_transcripts_password {
        object
            .key("associatedTranscriptsPassword")
            .string(var_431.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transcript_source_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TranscriptSourceSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.s3_bucket_transcript_source {
        let mut object_433 = object.key("s3BucketTranscriptSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_bucket_transcript_source(
            &mut object_433,
            var_432,
        )?;
        object_433.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_resource_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportResourceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_434) = &input.bot_import_specification {
        let mut object_435 = object.key("botImportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_import_specification(
            &mut object_435,
            var_434,
        )?;
        object_435.finish();
    }
    if let Some(var_436) = &input.bot_locale_import_specification {
        let mut object_437 = object.key("botLocaleImportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_locale_import_specification(
            &mut object_437,
            var_436,
        )?;
        object_437.finish();
    }
    if let Some(var_438) = &input.custom_vocabulary_import_specification {
        let mut object_439 = object
            .key("customVocabularyImportSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_vocabulary_import_specification(
            &mut object_439,
            var_438,
        )?;
        object_439.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_priority(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotPriority,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_440).into()),
        );
    }
    if let Some(var_441) = &input.slot_id {
        object.key("slotId").string(var_441.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_hook_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeHookSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_442) = &input.lambda_code_hook {
        let mut object_443 = object.key("lambdaCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_code_hook(
            &mut object_443,
            var_442,
        )?;
        object_443.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_text_log_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextLogSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_444) = &input.destination {
        let mut object_445 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_text_log_destination(
            &mut object_445,
            var_444,
        )?;
        object_445.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_log_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioLogSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_446) = &input.destination {
        let mut object_447 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_log_destination(
            &mut object_447,
            var_446,
        )?;
        object_447.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_export_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotExportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_448) = &input.bot_id {
        object.key("botId").string(var_448.as_str());
    }
    if let Some(var_449) = &input.bot_version {
        object.key("botVersion").string(var_449.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_export_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleExportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_450) = &input.bot_id {
        object.key("botId").string(var_450.as_str());
    }
    if let Some(var_451) = &input.bot_version {
        object.key("botVersion").string(var_451.as_str());
    }
    if let Some(var_452) = &input.locale_id {
        object.key("localeId").string(var_452.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_vocabulary_export_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomVocabularyExportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_453) = &input.bot_id {
        object.key("botId").string(var_453.as_str());
    }
    if let Some(var_454) = &input.bot_version {
        object.key("botVersion").string(var_454.as_str());
    }
    if let Some(var_455) = &input.locale_id {
        object.key("localeId").string(var_455.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_post_fulfillment_status_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostFulfillmentStatusSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.success_response {
        let mut object_457 = object.key("successResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_457,
            var_456,
        )?;
        object_457.finish();
    }
    if let Some(var_458) = &input.failure_response {
        let mut object_459 = object.key("failureResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_459,
            var_458,
        )?;
        object_459.finish();
    }
    if let Some(var_460) = &input.timeout_response {
        let mut object_461 = object.key("timeoutResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_461,
            var_460,
        )?;
        object_461.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_updates_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentUpdatesSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_462) = &input.active {
        object.key("active").boolean(*var_462);
    }
    if let Some(var_463) = &input.start_response {
        let mut object_464 = object.key("startResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_start_response_specification(
            &mut object_464,
            var_463,
        )?;
        object_464.finish();
    }
    if let Some(var_465) = &input.update_response {
        let mut object_466 = object.key("updateResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_update_response_specification(
            &mut object_466,
            var_465,
        )?;
        object_466.finish();
    }
    if let Some(var_467) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_467).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResponseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_468) = &input.message_groups {
        let mut array_469 = object.key("messageGroups").start_array();
        for item_470 in var_468 {
            {
                let mut object_471 = array_469.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_471,
                    item_470,
                )?;
                object_471.finish();
            }
        }
        array_469.finish();
    }
    if let Some(var_472) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_472);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_prompt_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PromptSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.message_groups {
        let mut array_474 = object.key("messageGroups").start_array();
        for item_475 in var_473 {
            {
                let mut object_476 = array_474.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_476,
                    item_475,
                )?;
                object_476.finish();
            }
        }
        array_474.finish();
    }
    if let Some(var_477) = &input.max_retries {
        object.key("maxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_477).into()),
        );
    }
    if let Some(var_478) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_478);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_default_value_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotDefaultValueSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_479) = &input.default_value_list {
        let mut array_480 = object.key("defaultValueList").start_array();
        for item_481 in var_479 {
            {
                let mut object_482 = array_480.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_default_value(
                    &mut object_482,
                    item_481,
                )?;
                object_482.finish();
            }
        }
        array_480.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wait_and_continue_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WaitAndContinueSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_483) = &input.waiting_response {
        let mut object_484 = object.key("waitingResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_484,
            var_483,
        )?;
        object_484.finish();
    }
    if let Some(var_485) = &input.continue_response {
        let mut object_486 = object.key("continueResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_486,
            var_485,
        )?;
        object_486.finish();
    }
    if let Some(var_487) = &input.still_waiting_response {
        let mut object_488 = object.key("stillWaitingResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_still_waiting_response_specification(
            &mut object_488,
            var_487,
        )?;
        object_488.finish();
    }
    if let Some(var_489) = &input.active {
        object.key("active").boolean(*var_489);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grammar_slot_type_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrammarSlotTypeSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_490) = &input.source {
        let mut object_491 = object.key("source").start_object();
        crate::json_ser::serialize_structure_crate_model_grammar_slot_type_source(
            &mut object_491,
            var_490,
        )?;
        object_491.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sample_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_492) = &input.value {
        object.key("value").string(var_492.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_regex_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueRegexFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_493) = &input.pattern {
        object.key("pattern").string(var_493.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_advanced_recognition_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdvancedRecognitionSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_494) = &input.audio_recognition_strategy {
        object
            .key("audioRecognitionStrategy")
            .string(var_494.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relative_aggregation_duration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelativeAggregationDuration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_495) = &input.time_dimension {
        object.key("timeDimension").string(var_495.as_str());
    }
    {
        object.key("timeValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.time_value).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_transcript_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3BucketTranscriptSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_496) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_496.as_str());
    }
    if let Some(var_497) = &input.path_format {
        let mut object_498 = object.key("pathFormat").start_object();
        crate::json_ser::serialize_structure_crate_model_path_format(&mut object_498, var_497)?;
        object_498.finish();
    }
    if let Some(var_499) = &input.transcript_format {
        object.key("transcriptFormat").string(var_499.as_str());
    }
    if let Some(var_500) = &input.transcript_filter {
        let mut object_501 = object.key("transcriptFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_transcript_filter(
            &mut object_501,
            var_500,
        )?;
        object_501.finish();
    }
    if let Some(var_502) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_502.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_import_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotImportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_503) = &input.bot_name {
        object.key("botName").string(var_503.as_str());
    }
    if let Some(var_504) = &input.role_arn {
        object.key("roleArn").string(var_504.as_str());
    }
    if let Some(var_505) = &input.data_privacy {
        let mut object_506 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_privacy(&mut object_506, var_505)?;
        object_506.finish();
    }
    if let Some(var_507) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_507).into()),
        );
    }
    if let Some(var_508) = &input.bot_tags {
        let mut object_509 = object.key("botTags").start_object();
        for (key_510, value_511) in var_508 {
            {
                object_509.key(key_510).string(value_511.as_str());
            }
        }
        object_509.finish();
    }
    if let Some(var_512) = &input.test_bot_alias_tags {
        let mut object_513 = object.key("testBotAliasTags").start_object();
        for (key_514, value_515) in var_512 {
            {
                object_513.key(key_514).string(value_515.as_str());
            }
        }
        object_513.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_import_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleImportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_516) = &input.bot_id {
        object.key("botId").string(var_516.as_str());
    }
    if let Some(var_517) = &input.bot_version {
        object.key("botVersion").string(var_517.as_str());
    }
    if let Some(var_518) = &input.locale_id {
        object.key("localeId").string(var_518.as_str());
    }
    if let Some(var_519) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_519).into()),
        );
    }
    if let Some(var_520) = &input.voice_settings {
        let mut object_521 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_settings(&mut object_521, var_520)?;
        object_521.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_vocabulary_import_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomVocabularyImportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_522) = &input.bot_id {
        object.key("botId").string(var_522.as_str());
    }
    if let Some(var_523) = &input.bot_version {
        object.key("botVersion").string(var_523.as_str());
    }
    if let Some(var_524) = &input.locale_id {
        object.key("localeId").string(var_524.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_code_hook(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaCodeHook,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_525) = &input.lambda_arn {
        object.key("lambdaARN").string(var_525.as_str());
    }
    if let Some(var_526) = &input.code_hook_interface_version {
        object
            .key("codeHookInterfaceVersion")
            .string(var_526.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_text_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextLogDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_527) = &input.cloud_watch {
        let mut object_528 = object.key("cloudWatch").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_log_group_log_destination(
            &mut object_528,
            var_527,
        )?;
        object_528.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioLogDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_529) = &input.s3_bucket {
        let mut object_530 = object.key("s3Bucket").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_bucket_log_destination(
            &mut object_530,
            var_529,
        )?;
        object_530.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_start_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentStartResponseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_531) = &input.delay_in_seconds {
        object.key("delayInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_531).into()),
        );
    }
    if let Some(var_532) = &input.message_groups {
        let mut array_533 = object.key("messageGroups").start_array();
        for item_534 in var_532 {
            {
                let mut object_535 = array_533.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_535,
                    item_534,
                )?;
                object_535.finish();
            }
        }
        array_533.finish();
    }
    if let Some(var_536) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_536);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_update_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentUpdateResponseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_537) = &input.frequency_in_seconds {
        object.key("frequencyInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_537).into()),
        );
    }
    if let Some(var_538) = &input.message_groups {
        let mut array_539 = object.key("messageGroups").start_array();
        for item_540 in var_538 {
            {
                let mut object_541 = array_539.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_541,
                    item_540,
                )?;
                object_541.finish();
            }
        }
        array_539.finish();
    }
    if let Some(var_542) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_542);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MessageGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_543) = &input.message {
        let mut object_544 = object.key("message").start_object();
        crate::json_ser::serialize_structure_crate_model_message(&mut object_544, var_543)?;
        object_544.finish();
    }
    if let Some(var_545) = &input.variations {
        let mut array_546 = object.key("variations").start_array();
        for item_547 in var_545 {
            {
                let mut object_548 = array_546.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message(
                    &mut object_548,
                    item_547,
                )?;
                object_548.finish();
            }
        }
        array_546.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_default_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotDefaultValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_549) = &input.default_value {
        object.key("defaultValue").string(var_549.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_still_waiting_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StillWaitingResponseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_550) = &input.message_groups {
        let mut array_551 = object.key("messageGroups").start_array();
        for item_552 in var_550 {
            {
                let mut object_553 = array_551.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_553,
                    item_552,
                )?;
                object_553.finish();
            }
        }
        array_551.finish();
    }
    if let Some(var_554) = &input.frequency_in_seconds {
        object.key("frequencyInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_554).into()),
        );
    }
    if let Some(var_555) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_555).into()),
        );
    }
    if let Some(var_556) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_556);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grammar_slot_type_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrammarSlotTypeSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_557) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_557.as_str());
    }
    if let Some(var_558) = &input.s3_object_key {
        object.key("s3ObjectKey").string(var_558.as_str());
    }
    if let Some(var_559) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_559.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_path_format(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PathFormat,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_560) = &input.object_prefixes {
        let mut array_561 = object.key("objectPrefixes").start_array();
        for item_562 in var_560 {
            {
                array_561.value().string(item_562.as_str());
            }
        }
        array_561.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transcript_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TranscriptFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_563) = &input.lex_transcript_filter {
        let mut object_564 = object.key("lexTranscriptFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_transcript_filter(
            &mut object_564,
            var_563,
        )?;
        object_564.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_log_group_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchLogGroupLogDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_565) = &input.cloud_watch_log_group_arn {
        object.key("cloudWatchLogGroupArn").string(var_565.as_str());
    }
    if let Some(var_566) = &input.log_prefix {
        object.key("logPrefix").string(var_566.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3BucketLogDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_567) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_567.as_str());
    }
    if let Some(var_568) = &input.s3_bucket_arn {
        object.key("s3BucketArn").string(var_568.as_str());
    }
    if let Some(var_569) = &input.log_prefix {
        object.key("logPrefix").string(var_569.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Message,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_570) = &input.plain_text_message {
        let mut object_571 = object.key("plainTextMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_plain_text_message(
            &mut object_571,
            var_570,
        )?;
        object_571.finish();
    }
    if let Some(var_572) = &input.custom_payload {
        let mut object_573 = object.key("customPayload").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_payload(&mut object_573, var_572)?;
        object_573.finish();
    }
    if let Some(var_574) = &input.ssml_message {
        let mut object_575 = object.key("ssmlMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_ssml_message(&mut object_575, var_574)?;
        object_575.finish();
    }
    if let Some(var_576) = &input.image_response_card {
        let mut object_577 = object.key("imageResponseCard").start_object();
        crate::json_ser::serialize_structure_crate_model_image_response_card(
            &mut object_577,
            var_576,
        )?;
        object_577.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_transcript_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LexTranscriptFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_578) = &input.date_range_filter {
        let mut object_579 = object.key("dateRangeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_date_range_filter(
            &mut object_579,
            var_578,
        )?;
        object_579.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_plain_text_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlainTextMessage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_580) = &input.value {
        object.key("value").string(var_580.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_payload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomPayload,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_581) = &input.value {
        object.key("value").string(var_581.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ssml_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SsmlMessage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_582) = &input.value {
        object.key("value").string(var_582.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_response_card(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageResponseCard,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_583) = &input.title {
        object.key("title").string(var_583.as_str());
    }
    if let Some(var_584) = &input.subtitle {
        object.key("subtitle").string(var_584.as_str());
    }
    if let Some(var_585) = &input.image_url {
        object.key("imageUrl").string(var_585.as_str());
    }
    if let Some(var_586) = &input.buttons {
        let mut array_587 = object.key("buttons").start_array();
        for item_588 in var_586 {
            {
                let mut object_589 = array_587.value().start_object();
                crate::json_ser::serialize_structure_crate_model_button(&mut object_589, item_588)?;
                object_589.finish();
            }
        }
        array_587.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_range_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateRangeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_590) = &input.start_date_time {
        object
            .key("startDateTime")
            .date_time(var_590, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_591) = &input.end_date_time {
        object
            .key("endDateTime")
            .date_time(var_591, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_button(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Button,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_592) = &input.text {
        object.key("text").string(var_592.as_str());
    }
    if let Some(var_593) = &input.value {
        object.key("value").string(var_593.as_str());
    }
    Ok(())
}
