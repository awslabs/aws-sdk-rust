// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.bot_name {
        object.key("botName").string(var_1);
    }
    if let Some(var_2) = &input.bot_tags {
        let mut object_3 = object.key("botTags").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4).string(value_5);
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.data_privacy {
        let mut object_7 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_privacy(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8);
    }
    if let Some(var_9) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.role_arn {
        object.key("roleArn").string(var_10);
    }
    if let Some(var_11) = &input.test_bot_alias_tags {
        let mut object_12 = object.key("testBotAliasTags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14);
            }
        }
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bot_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.bot_alias_locale_settings {
        let mut object_16 = object.key("botAliasLocaleSettings").start_object();
        for (key_17, value_18) in var_15 {
            {
                let mut object_19 = object_16.key(key_17).start_object();
                crate::json_ser::serialize_structure_crate_model_bot_alias_locale_settings(
                    &mut object_19,
                    value_18,
                )?;
                object_19.finish();
            }
        }
        object_16.finish();
    }
    if let Some(var_20) = &input.bot_alias_name {
        object.key("botAliasName").string(var_20);
    }
    if let Some(var_21) = &input.bot_version {
        object.key("botVersion").string(var_21);
    }
    if let Some(var_22) = &input.conversation_log_settings {
        let mut object_23 = object.key("conversationLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_conversation_log_settings(
            &mut object_23,
            var_22,
        )?;
        object_23.finish();
    }
    if let Some(var_24) = &input.description {
        object.key("description").string(var_24);
    }
    if let Some(var_25) = &input.sentiment_analysis_settings {
        let mut object_26 = object.key("sentimentAnalysisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sentiment_analysis_settings(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.tags {
        let mut object_28 = object.key("tags").start_object();
        for (key_29, value_30) in var_27 {
            {
                object_28.key(key_29).string(value_30);
            }
        }
        object_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bot_locale_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotLocaleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.description {
        object.key("description").string(var_31);
    }
    if let Some(var_32) = &input.locale_id {
        object.key("localeId").string(var_32);
    }
    if let Some(var_33) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_33).into()),
        );
    }
    if let Some(var_34) = &input.voice_settings {
        let mut object_35 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_settings(&mut object_35, var_34)?;
        object_35.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bot_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.bot_version_locale_specification {
        let mut object_37 = object.key("botVersionLocaleSpecification").start_object();
        for (key_38, value_39) in var_36 {
            {
                let mut object_40 = object_37.key(key_38).start_object();
                crate::json_ser::serialize_structure_crate_model_bot_version_locale_details(
                    &mut object_40,
                    value_39,
                )?;
                object_40.finish();
            }
        }
        object_37.finish();
    }
    if let Some(var_41) = &input.description {
        object.key("description").string(var_41);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_export_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.file_format {
        object.key("fileFormat").string(var_42.as_str());
    }
    if let Some(var_43) = &input.file_password {
        object.key("filePassword").string(var_43);
    }
    if let Some(var_44) = &input.resource_specification {
        let mut object_45 = object.key("resourceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_export_resource_specification(
            &mut object_45,
            var_44,
        )?;
        object_45.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_intent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIntentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.description {
        object.key("description").string(var_46);
    }
    if let Some(var_47) = &input.dialog_code_hook {
        let mut object_48 = object.key("dialogCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_settings(
            &mut object_48,
            var_47,
        )?;
        object_48.finish();
    }
    if let Some(var_49) = &input.fulfillment_code_hook {
        let mut object_50 = object.key("fulfillmentCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_code_hook_settings(
            &mut object_50,
            var_49,
        )?;
        object_50.finish();
    }
    if let Some(var_51) = &input.input_contexts {
        let mut array_52 = object.key("inputContexts").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_context(
                    &mut object_54,
                    item_53,
                )?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    if let Some(var_55) = &input.intent_closing_setting {
        let mut object_56 = object.key("intentClosingSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_closing_setting(
            &mut object_56,
            var_55,
        )?;
        object_56.finish();
    }
    if let Some(var_57) = &input.intent_confirmation_setting {
        let mut object_58 = object.key("intentConfirmationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_confirmation_setting(
            &mut object_58,
            var_57,
        )?;
        object_58.finish();
    }
    if let Some(var_59) = &input.intent_name {
        object.key("intentName").string(var_59);
    }
    if let Some(var_60) = &input.kendra_configuration {
        let mut object_61 = object.key("kendraConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_kendra_configuration(
            &mut object_61,
            var_60,
        )?;
        object_61.finish();
    }
    if let Some(var_62) = &input.output_contexts {
        let mut array_63 = object.key("outputContexts").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_context(
                    &mut object_65,
                    item_64,
                )?;
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if let Some(var_66) = &input.parent_intent_signature {
        object.key("parentIntentSignature").string(var_66);
    }
    if let Some(var_67) = &input.sample_utterances {
        let mut array_68 = object.key("sampleUtterances").start_array();
        for item_69 in var_67 {
            {
                let mut object_70 = array_68.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_70,
                    item_69,
                )?;
                object_70.finish();
            }
        }
        array_68.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.policy {
        object.key("policy").string(var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_policy_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourcePolicyStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.action {
        let mut array_73 = object.key("action").start_array();
        for item_74 in var_72 {
            {
                array_73.value().string(item_74);
            }
        }
        array_73.finish();
    }
    if let Some(var_75) = &input.condition {
        let mut object_76 = object.key("condition").start_object();
        for (key_77, value_78) in var_75 {
            {
                let mut object_79 = object_76.key(key_77).start_object();
                for (key_80, value_81) in value_78 {
                    {
                        object_79.key(key_80).string(value_81);
                    }
                }
                object_79.finish();
            }
        }
        object_76.finish();
    }
    if let Some(var_82) = &input.effect {
        object.key("effect").string(var_82.as_str());
    }
    if let Some(var_83) = &input.principal {
        let mut array_84 = object.key("principal").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_86,
                    item_85,
                )?;
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.statement_id {
        object.key("statementId").string(var_87);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_slot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSlotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.description {
        object.key("description").string(var_88);
    }
    if let Some(var_89) = &input.multiple_values_setting {
        let mut object_90 = object.key("multipleValuesSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_multiple_values_setting(
            &mut object_90,
            var_89,
        )?;
        object_90.finish();
    }
    if let Some(var_91) = &input.obfuscation_setting {
        let mut object_92 = object.key("obfuscationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_obfuscation_setting(
            &mut object_92,
            var_91,
        )?;
        object_92.finish();
    }
    if let Some(var_93) = &input.slot_name {
        object.key("slotName").string(var_93);
    }
    if let Some(var_94) = &input.slot_type_id {
        object.key("slotTypeId").string(var_94);
    }
    if let Some(var_95) = &input.value_elicitation_setting {
        let mut object_96 = object.key("valueElicitationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_elicitation_setting(
            &mut object_96,
            var_95,
        )?;
        object_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_slot_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSlotTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.description {
        object.key("description").string(var_97);
    }
    if let Some(var_98) = &input.parent_slot_type_signature {
        object.key("parentSlotTypeSignature").string(var_98);
    }
    if let Some(var_99) = &input.slot_type_name {
        object.key("slotTypeName").string(var_99);
    }
    if let Some(var_100) = &input.slot_type_values {
        let mut array_101 = object.key("slotTypeValues").start_array();
        for item_102 in var_100 {
            {
                let mut object_103 = array_101.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_type_value(
                    &mut object_103,
                    item_102,
                )?;
                object_103.finish();
            }
        }
        array_101.finish();
    }
    if let Some(var_104) = &input.value_selection_setting {
        let mut object_105 = object.key("valueSelectionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_selection_setting(
            &mut object_105,
            var_104,
        )?;
        object_105.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_aggregated_utterances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAggregatedUtterancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.aggregation_duration {
        let mut object_107 = object.key("aggregationDuration").start_object();
        crate::json_ser::serialize_structure_crate_model_utterance_aggregation_duration(
            &mut object_107,
            var_106,
        )?;
        object_107.finish();
    }
    if let Some(var_108) = &input.bot_alias_id {
        object.key("botAliasId").string(var_108);
    }
    if let Some(var_109) = &input.bot_version {
        object.key("botVersion").string(var_109);
    }
    if let Some(var_110) = &input.filters {
        let mut array_111 = object.key("filters").start_array();
        for item_112 in var_110 {
            {
                let mut object_113 = array_111.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aggregated_utterances_filter(
                    &mut object_113,
                    item_112,
                )?;
                object_113.finish();
            }
        }
        array_111.finish();
    }
    if let Some(var_114) = &input.locale_id {
        object.key("localeId").string(var_114);
    }
    if let Some(var_115) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_115).into()),
        );
    }
    if let Some(var_116) = &input.next_token {
        object.key("nextToken").string(var_116);
    }
    if let Some(var_117) = &input.sort_by {
        let mut object_118 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregated_utterances_sort_by(
            &mut object_118,
            var_117,
        )?;
        object_118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_119).into()),
        );
    }
    if let Some(var_120) = &input.next_token {
        object.key("nextToken").string(var_120);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_locales_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotLocalesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.filters {
        let mut array_122 = object.key("filters").start_array();
        for item_123 in var_121 {
            {
                let mut object_124 = array_122.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bot_locale_filter(
                    &mut object_124,
                    item_123,
                )?;
                object_124.finish();
            }
        }
        array_122.finish();
    }
    if let Some(var_125) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_125).into()),
        );
    }
    if let Some(var_126) = &input.next_token {
        object.key("nextToken").string(var_126);
    }
    if let Some(var_127) = &input.sort_by {
        let mut object_128 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_locale_sort_by(
            &mut object_128,
            var_127,
        )?;
        object_128.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.filters {
        let mut array_130 = object.key("filters").start_array();
        for item_131 in var_129 {
            {
                let mut object_132 = array_130.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bot_filter(
                    &mut object_132,
                    item_131,
                )?;
                object_132.finish();
            }
        }
        array_130.finish();
    }
    if let Some(var_133) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_133).into()),
        );
    }
    if let Some(var_134) = &input.next_token {
        object.key("nextToken").string(var_134);
    }
    if let Some(var_135) = &input.sort_by {
        let mut object_136 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_sort_by(&mut object_136, var_135)?;
        object_136.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_137) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_137).into()),
        );
    }
    if let Some(var_138) = &input.next_token {
        object.key("nextToken").string(var_138);
    }
    if let Some(var_139) = &input.sort_by {
        let mut object_140 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_version_sort_by(
            &mut object_140,
            var_139,
        )?;
        object_140.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_built_in_intents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBuiltInIntentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_141) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    if let Some(var_142) = &input.next_token {
        object.key("nextToken").string(var_142);
    }
    if let Some(var_143) = &input.sort_by {
        let mut object_144 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_built_in_intent_sort_by(
            &mut object_144,
            var_143,
        )?;
        object_144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_built_in_slot_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBuiltInSlotTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_145).into()),
        );
    }
    if let Some(var_146) = &input.next_token {
        object.key("nextToken").string(var_146);
    }
    if let Some(var_147) = &input.sort_by {
        let mut object_148 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_built_in_slot_type_sort_by(
            &mut object_148,
            var_147,
        )?;
        object_148.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_exports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExportsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.bot_id {
        object.key("botId").string(var_149);
    }
    if let Some(var_150) = &input.bot_version {
        object.key("botVersion").string(var_150);
    }
    if let Some(var_151) = &input.filters {
        let mut array_152 = object.key("filters").start_array();
        for item_153 in var_151 {
            {
                let mut object_154 = array_152.value().start_object();
                crate::json_ser::serialize_structure_crate_model_export_filter(
                    &mut object_154,
                    item_153,
                )?;
                object_154.finish();
            }
        }
        array_152.finish();
    }
    if let Some(var_155) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_155).into()),
        );
    }
    if let Some(var_156) = &input.next_token {
        object.key("nextToken").string(var_156);
    }
    if let Some(var_157) = &input.sort_by {
        let mut object_158 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_export_sort_by(&mut object_158, var_157)?;
        object_158.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_imports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImportsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_159) = &input.bot_id {
        object.key("botId").string(var_159);
    }
    if let Some(var_160) = &input.bot_version {
        object.key("botVersion").string(var_160);
    }
    if let Some(var_161) = &input.filters {
        let mut array_162 = object.key("filters").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_import_filter(
                    &mut object_164,
                    item_163,
                )?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_165).into()),
        );
    }
    if let Some(var_166) = &input.next_token {
        object.key("nextToken").string(var_166);
    }
    if let Some(var_167) = &input.sort_by {
        let mut object_168 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_import_sort_by(&mut object_168, var_167)?;
        object_168.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_intents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIntentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.filters {
        let mut array_170 = object.key("filters").start_array();
        for item_171 in var_169 {
            {
                let mut object_172 = array_170.value().start_object();
                crate::json_ser::serialize_structure_crate_model_intent_filter(
                    &mut object_172,
                    item_171,
                )?;
                object_172.finish();
            }
        }
        array_170.finish();
    }
    if let Some(var_173) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    if let Some(var_174) = &input.next_token {
        object.key("nextToken").string(var_174);
    }
    if let Some(var_175) = &input.sort_by {
        let mut object_176 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_sort_by(&mut object_176, var_175)?;
        object_176.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_slots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSlotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_177) = &input.filters {
        let mut array_178 = object.key("filters").start_array();
        for item_179 in var_177 {
            {
                let mut object_180 = array_178.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_filter(
                    &mut object_180,
                    item_179,
                )?;
                object_180.finish();
            }
        }
        array_178.finish();
    }
    if let Some(var_181) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_181).into()),
        );
    }
    if let Some(var_182) = &input.next_token {
        object.key("nextToken").string(var_182);
    }
    if let Some(var_183) = &input.sort_by {
        let mut object_184 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_sort_by(&mut object_184, var_183)?;
        object_184.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_slot_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSlotTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.filters {
        let mut array_186 = object.key("filters").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_type_filter(
                    &mut object_188,
                    item_187,
                )?;
                object_188.finish();
            }
        }
        array_186.finish();
    }
    if let Some(var_189) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    if let Some(var_190) = &input.next_token {
        object.key("nextToken").string(var_190);
    }
    if let Some(var_191) = &input.sort_by {
        let mut object_192 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_type_sort_by(
            &mut object_192,
            var_191,
        )?;
        object_192.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_193) = &input.file_password {
        object.key("filePassword").string(var_193);
    }
    if let Some(var_194) = &input.import_id {
        object.key("importId").string(var_194);
    }
    if let Some(var_195) = &input.merge_strategy {
        object.key("mergeStrategy").string(var_195.as_str());
    }
    if let Some(var_196) = &input.resource_specification {
        let mut object_197 = object.key("resourceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_import_resource_specification(
            &mut object_197,
            var_196,
        )?;
        object_197.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.tags {
        let mut object_199 = object.key("tags").start_object();
        for (key_200, value_201) in var_198 {
            {
                object_199.key(key_200).string(value_201);
            }
        }
        object_199.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.bot_name {
        object.key("botName").string(var_202);
    }
    if let Some(var_203) = &input.data_privacy {
        let mut object_204 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_privacy(&mut object_204, var_203)?;
        object_204.finish();
    }
    if let Some(var_205) = &input.description {
        object.key("description").string(var_205);
    }
    if let Some(var_206) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_206).into()),
        );
    }
    if let Some(var_207) = &input.role_arn {
        object.key("roleArn").string(var_207);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_208) = &input.bot_alias_locale_settings {
        let mut object_209 = object.key("botAliasLocaleSettings").start_object();
        for (key_210, value_211) in var_208 {
            {
                let mut object_212 = object_209.key(key_210).start_object();
                crate::json_ser::serialize_structure_crate_model_bot_alias_locale_settings(
                    &mut object_212,
                    value_211,
                )?;
                object_212.finish();
            }
        }
        object_209.finish();
    }
    if let Some(var_213) = &input.bot_alias_name {
        object.key("botAliasName").string(var_213);
    }
    if let Some(var_214) = &input.bot_version {
        object.key("botVersion").string(var_214);
    }
    if let Some(var_215) = &input.conversation_log_settings {
        let mut object_216 = object.key("conversationLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_conversation_log_settings(
            &mut object_216,
            var_215,
        )?;
        object_216.finish();
    }
    if let Some(var_217) = &input.description {
        object.key("description").string(var_217);
    }
    if let Some(var_218) = &input.sentiment_analysis_settings {
        let mut object_219 = object.key("sentimentAnalysisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sentiment_analysis_settings(
            &mut object_219,
            var_218,
        )?;
        object_219.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_locale_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotLocaleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.description {
        object.key("description").string(var_220);
    }
    if let Some(var_221) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_221).into()),
        );
    }
    if let Some(var_222) = &input.voice_settings {
        let mut object_223 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_settings(&mut object_223, var_222)?;
        object_223.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_export_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.file_password {
        object.key("filePassword").string(var_224);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_intent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIntentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.description {
        object.key("description").string(var_225);
    }
    if let Some(var_226) = &input.dialog_code_hook {
        let mut object_227 = object.key("dialogCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_settings(
            &mut object_227,
            var_226,
        )?;
        object_227.finish();
    }
    if let Some(var_228) = &input.fulfillment_code_hook {
        let mut object_229 = object.key("fulfillmentCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_code_hook_settings(
            &mut object_229,
            var_228,
        )?;
        object_229.finish();
    }
    if let Some(var_230) = &input.input_contexts {
        let mut array_231 = object.key("inputContexts").start_array();
        for item_232 in var_230 {
            {
                let mut object_233 = array_231.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_context(
                    &mut object_233,
                    item_232,
                )?;
                object_233.finish();
            }
        }
        array_231.finish();
    }
    if let Some(var_234) = &input.intent_closing_setting {
        let mut object_235 = object.key("intentClosingSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_closing_setting(
            &mut object_235,
            var_234,
        )?;
        object_235.finish();
    }
    if let Some(var_236) = &input.intent_confirmation_setting {
        let mut object_237 = object.key("intentConfirmationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_confirmation_setting(
            &mut object_237,
            var_236,
        )?;
        object_237.finish();
    }
    if let Some(var_238) = &input.intent_name {
        object.key("intentName").string(var_238);
    }
    if let Some(var_239) = &input.kendra_configuration {
        let mut object_240 = object.key("kendraConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_kendra_configuration(
            &mut object_240,
            var_239,
        )?;
        object_240.finish();
    }
    if let Some(var_241) = &input.output_contexts {
        let mut array_242 = object.key("outputContexts").start_array();
        for item_243 in var_241 {
            {
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_context(
                    &mut object_244,
                    item_243,
                )?;
                object_244.finish();
            }
        }
        array_242.finish();
    }
    if let Some(var_245) = &input.parent_intent_signature {
        object.key("parentIntentSignature").string(var_245);
    }
    if let Some(var_246) = &input.sample_utterances {
        let mut array_247 = object.key("sampleUtterances").start_array();
        for item_248 in var_246 {
            {
                let mut object_249 = array_247.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_249,
                    item_248,
                )?;
                object_249.finish();
            }
        }
        array_247.finish();
    }
    if let Some(var_250) = &input.slot_priorities {
        let mut array_251 = object.key("slotPriorities").start_array();
        for item_252 in var_250 {
            {
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_priority(
                    &mut object_253,
                    item_252,
                )?;
                object_253.finish();
            }
        }
        array_251.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_254) = &input.policy {
        object.key("policy").string(var_254);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_slot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSlotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.description {
        object.key("description").string(var_255);
    }
    if let Some(var_256) = &input.multiple_values_setting {
        let mut object_257 = object.key("multipleValuesSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_multiple_values_setting(
            &mut object_257,
            var_256,
        )?;
        object_257.finish();
    }
    if let Some(var_258) = &input.obfuscation_setting {
        let mut object_259 = object.key("obfuscationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_obfuscation_setting(
            &mut object_259,
            var_258,
        )?;
        object_259.finish();
    }
    if let Some(var_260) = &input.slot_name {
        object.key("slotName").string(var_260);
    }
    if let Some(var_261) = &input.slot_type_id {
        object.key("slotTypeId").string(var_261);
    }
    if let Some(var_262) = &input.value_elicitation_setting {
        let mut object_263 = object.key("valueElicitationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_elicitation_setting(
            &mut object_263,
            var_262,
        )?;
        object_263.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_slot_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSlotTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.description {
        object.key("description").string(var_264);
    }
    if let Some(var_265) = &input.parent_slot_type_signature {
        object.key("parentSlotTypeSignature").string(var_265);
    }
    if let Some(var_266) = &input.slot_type_name {
        object.key("slotTypeName").string(var_266);
    }
    if let Some(var_267) = &input.slot_type_values {
        let mut array_268 = object.key("slotTypeValues").start_array();
        for item_269 in var_267 {
            {
                let mut object_270 = array_268.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_type_value(
                    &mut object_270,
                    item_269,
                )?;
                object_270.finish();
            }
        }
        array_268.finish();
    }
    if let Some(var_271) = &input.value_selection_setting {
        let mut object_272 = object.key("valueSelectionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_selection_setting(
            &mut object_272,
            var_271,
        )?;
        object_272.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_privacy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataPrivacy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("childDirected").boolean(input.child_directed);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_alias_locale_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotAliasLocaleSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_273) = &input.code_hook_specification {
        let mut object_274 = object.key("codeHookSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_code_hook_specification(
            &mut object_274,
            var_273,
        )?;
        object_274.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conversation_log_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConversationLogSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.text_log_settings {
        let mut array_276 = object.key("textLogSettings").start_array();
        for item_277 in var_275 {
            {
                let mut object_278 = array_276.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_log_setting(
                    &mut object_278,
                    item_277,
                )?;
                object_278.finish();
            }
        }
        array_276.finish();
    }
    if let Some(var_279) = &input.audio_log_settings {
        let mut array_280 = object.key("audioLogSettings").start_array();
        for item_281 in var_279 {
            {
                let mut object_282 = array_280.value().start_object();
                crate::json_ser::serialize_structure_crate_model_audio_log_setting(
                    &mut object_282,
                    item_281,
                )?;
                object_282.finish();
            }
        }
        array_280.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sentiment_analysis_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SentimentAnalysisSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("detectSentiment")
            .boolean(input.detect_sentiment);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_voice_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.voice_id {
        object.key("voiceId").string(var_283);
    }
    if let Some(var_284) = &input.engine {
        object.key("engine").string(var_284.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_version_locale_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotVersionLocaleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.source_bot_version {
        object.key("sourceBotVersion").string(var_285);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_resource_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportResourceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_286) = &input.bot_export_specification {
        let mut object_287 = object.key("botExportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_export_specification(
            &mut object_287,
            var_286,
        )?;
        object_287.finish();
    }
    if let Some(var_288) = &input.bot_locale_export_specification {
        let mut object_289 = object.key("botLocaleExportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_locale_export_specification(
            &mut object_289,
            var_288,
        )?;
        object_289.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dialog_code_hook_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DialogCodeHookSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_code_hook_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentCodeHookSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_290) = &input.post_fulfillment_status_specification {
        let mut object_291 = object
            .key("postFulfillmentStatusSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_post_fulfillment_status_specification(
            &mut object_291,
            var_290,
        )?;
        object_291.finish();
    }
    if let Some(var_292) = &input.fulfillment_updates_specification {
        let mut object_293 = object.key("fulfillmentUpdatesSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_updates_specification(
            &mut object_293,
            var_292,
        )?;
        object_293.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_294) = &input.name {
        object.key("name").string(var_294);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_closing_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentClosingSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_295) = &input.closing_response {
        let mut object_296 = object.key("closingResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_296,
            var_295,
        )?;
        object_296.finish();
    }
    if let Some(var_297) = &input.active {
        object.key("active").boolean(*var_297);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_confirmation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentConfirmationSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.prompt_specification {
        let mut object_299 = object.key("promptSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_prompt_specification(
            &mut object_299,
            var_298,
        )?;
        object_299.finish();
    }
    if let Some(var_300) = &input.declination_response {
        let mut object_301 = object.key("declinationResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_301,
            var_300,
        )?;
        object_301.finish();
    }
    if let Some(var_302) = &input.active {
        object.key("active").boolean(*var_302);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kendra_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KendraConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_303) = &input.kendra_index {
        object.key("kendraIndex").string(var_303);
    }
    if input.query_filter_string_enabled {
        object
            .key("queryFilterStringEnabled")
            .boolean(input.query_filter_string_enabled);
    }
    if let Some(var_304) = &input.query_filter_string {
        object.key("queryFilterString").string(var_304);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.name {
        object.key("name").string(var_305);
    }
    if let Some(var_306) = &input.time_to_live_in_seconds {
        object.key("timeToLiveInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_306).into()),
        );
    }
    if let Some(var_307) = &input.turns_to_live {
        object.key("turnsToLive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_307).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sample_utterance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleUtterance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_308) = &input.utterance {
        object.key("utterance").string(var_308);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_309) = &input.service {
        object.key("service").string(var_309);
    }
    if let Some(var_310) = &input.arn {
        object.key("arn").string(var_310);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_multiple_values_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultipleValuesSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_multiple_values {
        object
            .key("allowMultipleValues")
            .boolean(input.allow_multiple_values);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_obfuscation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObfuscationSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.obfuscation_setting_type {
        object
            .key("obfuscationSettingType")
            .string(var_311.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_elicitation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueElicitationSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.default_value_specification {
        let mut object_313 = object.key("defaultValueSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_default_value_specification(
            &mut object_313,
            var_312,
        )?;
        object_313.finish();
    }
    if let Some(var_314) = &input.slot_constraint {
        object.key("slotConstraint").string(var_314.as_str());
    }
    if let Some(var_315) = &input.prompt_specification {
        let mut object_316 = object.key("promptSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_prompt_specification(
            &mut object_316,
            var_315,
        )?;
        object_316.finish();
    }
    if let Some(var_317) = &input.sample_utterances {
        let mut array_318 = object.key("sampleUtterances").start_array();
        for item_319 in var_317 {
            {
                let mut object_320 = array_318.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_320,
                    item_319,
                )?;
                object_320.finish();
            }
        }
        array_318.finish();
    }
    if let Some(var_321) = &input.wait_and_continue_specification {
        let mut object_322 = object.key("waitAndContinueSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_wait_and_continue_specification(
            &mut object_322,
            var_321,
        )?;
        object_322.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_type_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_323) = &input.sample_value {
        let mut object_324 = object.key("sampleValue").start_object();
        crate::json_ser::serialize_structure_crate_model_sample_value(&mut object_324, var_323)?;
        object_324.finish();
    }
    if let Some(var_325) = &input.synonyms {
        let mut array_326 = object.key("synonyms").start_array();
        for item_327 in var_325 {
            {
                let mut object_328 = array_326.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_value(
                    &mut object_328,
                    item_327,
                )?;
                object_328.finish();
            }
        }
        array_326.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_selection_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueSelectionSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_329) = &input.resolution_strategy {
        object.key("resolutionStrategy").string(var_329.as_str());
    }
    if let Some(var_330) = &input.regex_filter {
        let mut object_331 = object.key("regexFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_regex_filter(
            &mut object_331,
            var_330,
        )?;
        object_331.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_utterance_aggregation_duration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UtteranceAggregationDuration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_332) = &input.relative_aggregation_duration {
        let mut object_333 = object.key("relativeAggregationDuration").start_object();
        crate::json_ser::serialize_structure_crate_model_relative_aggregation_duration(
            &mut object_333,
            var_332,
        )?;
        object_333.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregated_utterances_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregatedUtterancesFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.name {
        object.key("name").string(var_334.as_str());
    }
    if let Some(var_335) = &input.values {
        let mut array_336 = object.key("values").start_array();
        for item_337 in var_335 {
            {
                array_336.value().string(item_337);
            }
        }
        array_336.finish();
    }
    if let Some(var_338) = &input.operator {
        object.key("operator").string(var_338.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregated_utterances_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregatedUtterancesSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_339) = &input.attribute {
        object.key("attribute").string(var_339.as_str());
    }
    if let Some(var_340) = &input.order {
        object.key("order").string(var_340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_341) = &input.name {
        object.key("name").string(var_341.as_str());
    }
    if let Some(var_342) = &input.values {
        let mut array_343 = object.key("values").start_array();
        for item_344 in var_342 {
            {
                array_343.value().string(item_344);
            }
        }
        array_343.finish();
    }
    if let Some(var_345) = &input.operator {
        object.key("operator").string(var_345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_346) = &input.attribute {
        object.key("attribute").string(var_346.as_str());
    }
    if let Some(var_347) = &input.order {
        object.key("order").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_348) = &input.name {
        object.key("name").string(var_348.as_str());
    }
    if let Some(var_349) = &input.values {
        let mut array_350 = object.key("values").start_array();
        for item_351 in var_349 {
            {
                array_350.value().string(item_351);
            }
        }
        array_350.finish();
    }
    if let Some(var_352) = &input.operator {
        object.key("operator").string(var_352.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_353) = &input.attribute {
        object.key("attribute").string(var_353.as_str());
    }
    if let Some(var_354) = &input.order {
        object.key("order").string(var_354.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_version_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotVersionSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_355) = &input.attribute {
        object.key("attribute").string(var_355.as_str());
    }
    if let Some(var_356) = &input.order {
        object.key("order").string(var_356.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_built_in_intent_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BuiltInIntentSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_357) = &input.attribute {
        object.key("attribute").string(var_357.as_str());
    }
    if let Some(var_358) = &input.order {
        object.key("order").string(var_358.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_built_in_slot_type_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BuiltInSlotTypeSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_359) = &input.attribute {
        object.key("attribute").string(var_359.as_str());
    }
    if let Some(var_360) = &input.order {
        object.key("order").string(var_360.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_361) = &input.name {
        object.key("name").string(var_361.as_str());
    }
    if let Some(var_362) = &input.values {
        let mut array_363 = object.key("values").start_array();
        for item_364 in var_362 {
            {
                array_363.value().string(item_364);
            }
        }
        array_363.finish();
    }
    if let Some(var_365) = &input.operator {
        object.key("operator").string(var_365.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.attribute {
        object.key("attribute").string(var_366.as_str());
    }
    if let Some(var_367) = &input.order {
        object.key("order").string(var_367.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.name {
        object.key("name").string(var_368.as_str());
    }
    if let Some(var_369) = &input.values {
        let mut array_370 = object.key("values").start_array();
        for item_371 in var_369 {
            {
                array_370.value().string(item_371);
            }
        }
        array_370.finish();
    }
    if let Some(var_372) = &input.operator {
        object.key("operator").string(var_372.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_373) = &input.attribute {
        object.key("attribute").string(var_373.as_str());
    }
    if let Some(var_374) = &input.order {
        object.key("order").string(var_374.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.name {
        object.key("name").string(var_375.as_str());
    }
    if let Some(var_376) = &input.values {
        let mut array_377 = object.key("values").start_array();
        for item_378 in var_376 {
            {
                array_377.value().string(item_378);
            }
        }
        array_377.finish();
    }
    if let Some(var_379) = &input.operator {
        object.key("operator").string(var_379.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.attribute {
        object.key("attribute").string(var_380.as_str());
    }
    if let Some(var_381) = &input.order {
        object.key("order").string(var_381.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.name {
        object.key("name").string(var_382.as_str());
    }
    if let Some(var_383) = &input.values {
        let mut array_384 = object.key("values").start_array();
        for item_385 in var_383 {
            {
                array_384.value().string(item_385);
            }
        }
        array_384.finish();
    }
    if let Some(var_386) = &input.operator {
        object.key("operator").string(var_386.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.attribute {
        object.key("attribute").string(var_387.as_str());
    }
    if let Some(var_388) = &input.order {
        object.key("order").string(var_388.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_type_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.name {
        object.key("name").string(var_389.as_str());
    }
    if let Some(var_390) = &input.values {
        let mut array_391 = object.key("values").start_array();
        for item_392 in var_390 {
            {
                array_391.value().string(item_392);
            }
        }
        array_391.finish();
    }
    if let Some(var_393) = &input.operator {
        object.key("operator").string(var_393.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_type_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_394) = &input.attribute {
        object.key("attribute").string(var_394.as_str());
    }
    if let Some(var_395) = &input.order {
        object.key("order").string(var_395.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_resource_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportResourceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_396) = &input.bot_import_specification {
        let mut object_397 = object.key("botImportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_import_specification(
            &mut object_397,
            var_396,
        )?;
        object_397.finish();
    }
    if let Some(var_398) = &input.bot_locale_import_specification {
        let mut object_399 = object.key("botLocaleImportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_locale_import_specification(
            &mut object_399,
            var_398,
        )?;
        object_399.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_priority(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotPriority,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_400) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_400).into()),
        );
    }
    if let Some(var_401) = &input.slot_id {
        object.key("slotId").string(var_401);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_hook_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeHookSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_402) = &input.lambda_code_hook {
        let mut object_403 = object.key("lambdaCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_code_hook(
            &mut object_403,
            var_402,
        )?;
        object_403.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_text_log_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextLogSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_404) = &input.destination {
        let mut object_405 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_text_log_destination(
            &mut object_405,
            var_404,
        )?;
        object_405.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_log_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioLogSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_406) = &input.destination {
        let mut object_407 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_log_destination(
            &mut object_407,
            var_406,
        )?;
        object_407.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_export_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotExportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_408) = &input.bot_id {
        object.key("botId").string(var_408);
    }
    if let Some(var_409) = &input.bot_version {
        object.key("botVersion").string(var_409);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_export_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleExportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_410) = &input.bot_id {
        object.key("botId").string(var_410);
    }
    if let Some(var_411) = &input.bot_version {
        object.key("botVersion").string(var_411);
    }
    if let Some(var_412) = &input.locale_id {
        object.key("localeId").string(var_412);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_post_fulfillment_status_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostFulfillmentStatusSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_413) = &input.success_response {
        let mut object_414 = object.key("successResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_414,
            var_413,
        )?;
        object_414.finish();
    }
    if let Some(var_415) = &input.failure_response {
        let mut object_416 = object.key("failureResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_416,
            var_415,
        )?;
        object_416.finish();
    }
    if let Some(var_417) = &input.timeout_response {
        let mut object_418 = object.key("timeoutResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_418,
            var_417,
        )?;
        object_418.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_updates_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentUpdatesSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.active {
        object.key("active").boolean(*var_419);
    }
    if let Some(var_420) = &input.start_response {
        let mut object_421 = object.key("startResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_start_response_specification(
            &mut object_421,
            var_420,
        )?;
        object_421.finish();
    }
    if let Some(var_422) = &input.update_response {
        let mut object_423 = object.key("updateResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_update_response_specification(
            &mut object_423,
            var_422,
        )?;
        object_423.finish();
    }
    if let Some(var_424) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_424).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResponseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.message_groups {
        let mut array_426 = object.key("messageGroups").start_array();
        for item_427 in var_425 {
            {
                let mut object_428 = array_426.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_428,
                    item_427,
                )?;
                object_428.finish();
            }
        }
        array_426.finish();
    }
    if let Some(var_429) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_429);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_prompt_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PromptSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_430) = &input.message_groups {
        let mut array_431 = object.key("messageGroups").start_array();
        for item_432 in var_430 {
            {
                let mut object_433 = array_431.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_433,
                    item_432,
                )?;
                object_433.finish();
            }
        }
        array_431.finish();
    }
    if let Some(var_434) = &input.max_retries {
        object.key("maxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_434).into()),
        );
    }
    if let Some(var_435) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_435);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_default_value_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotDefaultValueSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_436) = &input.default_value_list {
        let mut array_437 = object.key("defaultValueList").start_array();
        for item_438 in var_436 {
            {
                let mut object_439 = array_437.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_default_value(
                    &mut object_439,
                    item_438,
                )?;
                object_439.finish();
            }
        }
        array_437.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wait_and_continue_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WaitAndContinueSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.waiting_response {
        let mut object_441 = object.key("waitingResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_441,
            var_440,
        )?;
        object_441.finish();
    }
    if let Some(var_442) = &input.continue_response {
        let mut object_443 = object.key("continueResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_443,
            var_442,
        )?;
        object_443.finish();
    }
    if let Some(var_444) = &input.still_waiting_response {
        let mut object_445 = object.key("stillWaitingResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_still_waiting_response_specification(
            &mut object_445,
            var_444,
        )?;
        object_445.finish();
    }
    if let Some(var_446) = &input.active {
        object.key("active").boolean(*var_446);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sample_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_447) = &input.value {
        object.key("value").string(var_447);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_regex_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueRegexFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_448) = &input.pattern {
        object.key("pattern").string(var_448);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relative_aggregation_duration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelativeAggregationDuration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_449) = &input.time_dimension {
        object.key("timeDimension").string(var_449.as_str());
    }
    {
        object.key("timeValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.time_value).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_import_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotImportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_450) = &input.bot_name {
        object.key("botName").string(var_450);
    }
    if let Some(var_451) = &input.role_arn {
        object.key("roleArn").string(var_451);
    }
    if let Some(var_452) = &input.data_privacy {
        let mut object_453 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_privacy(&mut object_453, var_452)?;
        object_453.finish();
    }
    if let Some(var_454) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_454).into()),
        );
    }
    if let Some(var_455) = &input.bot_tags {
        let mut object_456 = object.key("botTags").start_object();
        for (key_457, value_458) in var_455 {
            {
                object_456.key(key_457).string(value_458);
            }
        }
        object_456.finish();
    }
    if let Some(var_459) = &input.test_bot_alias_tags {
        let mut object_460 = object.key("testBotAliasTags").start_object();
        for (key_461, value_462) in var_459 {
            {
                object_460.key(key_461).string(value_462);
            }
        }
        object_460.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_import_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleImportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_463) = &input.bot_id {
        object.key("botId").string(var_463);
    }
    if let Some(var_464) = &input.bot_version {
        object.key("botVersion").string(var_464);
    }
    if let Some(var_465) = &input.locale_id {
        object.key("localeId").string(var_465);
    }
    if let Some(var_466) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_466).into()),
        );
    }
    if let Some(var_467) = &input.voice_settings {
        let mut object_468 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_settings(&mut object_468, var_467)?;
        object_468.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_code_hook(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaCodeHook,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_469) = &input.lambda_arn {
        object.key("lambdaARN").string(var_469);
    }
    if let Some(var_470) = &input.code_hook_interface_version {
        object.key("codeHookInterfaceVersion").string(var_470);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_text_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextLogDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_471) = &input.cloud_watch {
        let mut object_472 = object.key("cloudWatch").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_log_group_log_destination(
            &mut object_472,
            var_471,
        )?;
        object_472.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioLogDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.s3_bucket {
        let mut object_474 = object.key("s3Bucket").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_bucket_log_destination(
            &mut object_474,
            var_473,
        )?;
        object_474.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_start_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentStartResponseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_475) = &input.delay_in_seconds {
        object.key("delayInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_475).into()),
        );
    }
    if let Some(var_476) = &input.message_groups {
        let mut array_477 = object.key("messageGroups").start_array();
        for item_478 in var_476 {
            {
                let mut object_479 = array_477.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_479,
                    item_478,
                )?;
                object_479.finish();
            }
        }
        array_477.finish();
    }
    if let Some(var_480) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_480);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_update_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentUpdateResponseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_481) = &input.frequency_in_seconds {
        object.key("frequencyInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_481).into()),
        );
    }
    if let Some(var_482) = &input.message_groups {
        let mut array_483 = object.key("messageGroups").start_array();
        for item_484 in var_482 {
            {
                let mut object_485 = array_483.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_485,
                    item_484,
                )?;
                object_485.finish();
            }
        }
        array_483.finish();
    }
    if let Some(var_486) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_486);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MessageGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_487) = &input.message {
        let mut object_488 = object.key("message").start_object();
        crate::json_ser::serialize_structure_crate_model_message(&mut object_488, var_487)?;
        object_488.finish();
    }
    if let Some(var_489) = &input.variations {
        let mut array_490 = object.key("variations").start_array();
        for item_491 in var_489 {
            {
                let mut object_492 = array_490.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message(
                    &mut object_492,
                    item_491,
                )?;
                object_492.finish();
            }
        }
        array_490.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_default_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotDefaultValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_493) = &input.default_value {
        object.key("defaultValue").string(var_493);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_still_waiting_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StillWaitingResponseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_494) = &input.message_groups {
        let mut array_495 = object.key("messageGroups").start_array();
        for item_496 in var_494 {
            {
                let mut object_497 = array_495.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_497,
                    item_496,
                )?;
                object_497.finish();
            }
        }
        array_495.finish();
    }
    if let Some(var_498) = &input.frequency_in_seconds {
        object.key("frequencyInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_498).into()),
        );
    }
    if let Some(var_499) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_499).into()),
        );
    }
    if let Some(var_500) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_500);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_log_group_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchLogGroupLogDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_501) = &input.cloud_watch_log_group_arn {
        object.key("cloudWatchLogGroupArn").string(var_501);
    }
    if let Some(var_502) = &input.log_prefix {
        object.key("logPrefix").string(var_502);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3BucketLogDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_503) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_503);
    }
    if let Some(var_504) = &input.s3_bucket_arn {
        object.key("s3BucketArn").string(var_504);
    }
    if let Some(var_505) = &input.log_prefix {
        object.key("logPrefix").string(var_505);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Message,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_506) = &input.plain_text_message {
        let mut object_507 = object.key("plainTextMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_plain_text_message(
            &mut object_507,
            var_506,
        )?;
        object_507.finish();
    }
    if let Some(var_508) = &input.custom_payload {
        let mut object_509 = object.key("customPayload").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_payload(&mut object_509, var_508)?;
        object_509.finish();
    }
    if let Some(var_510) = &input.ssml_message {
        let mut object_511 = object.key("ssmlMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_ssml_message(&mut object_511, var_510)?;
        object_511.finish();
    }
    if let Some(var_512) = &input.image_response_card {
        let mut object_513 = object.key("imageResponseCard").start_object();
        crate::json_ser::serialize_structure_crate_model_image_response_card(
            &mut object_513,
            var_512,
        )?;
        object_513.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_plain_text_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlainTextMessage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_514) = &input.value {
        object.key("value").string(var_514);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_payload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomPayload,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_515) = &input.value {
        object.key("value").string(var_515);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ssml_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SsmlMessage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_516) = &input.value {
        object.key("value").string(var_516);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_response_card(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageResponseCard,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_517) = &input.title {
        object.key("title").string(var_517);
    }
    if let Some(var_518) = &input.subtitle {
        object.key("subtitle").string(var_518);
    }
    if let Some(var_519) = &input.image_url {
        object.key("imageUrl").string(var_519);
    }
    if let Some(var_520) = &input.buttons {
        let mut array_521 = object.key("buttons").start_array();
        for item_522 in var_520 {
            {
                let mut object_523 = array_521.value().start_object();
                crate::json_ser::serialize_structure_crate_model_button(&mut object_523, item_522)?;
                object_523.finish();
            }
        }
        array_521.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_button(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Button,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_524) = &input.text {
        object.key("text").string(var_524);
    }
    if let Some(var_525) = &input.value {
        object.key("value").string(var_525);
    }
    Ok(())
}
