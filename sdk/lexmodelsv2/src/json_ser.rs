// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_bot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotInput,
) {
    if let Some(var_1) = &input.bot_name {
        object.key("botName").string(var_1);
    }
    if let Some(var_2) = &input.bot_tags {
        let mut object_3 = object.key("botTags").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4).string(value_5);
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.data_privacy {
        let mut object_7 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_data_privacy(&mut object_7, var_6);
        object_7.finish();
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8);
    }
    if let Some(var_9) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.role_arn {
        object.key("roleArn").string(var_10);
    }
    if let Some(var_11) = &input.test_bot_alias_tags {
        let mut object_12 = object.key("testBotAliasTags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14);
            }
        }
        object_12.finish();
    }
}

pub fn serialize_structure_create_bot_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotAliasInput,
) {
    if let Some(var_15) = &input.bot_alias_locale_settings {
        let mut object_16 = object.key("botAliasLocaleSettings").start_object();
        for (key_17, value_18) in var_15 {
            {
                let mut object_19 = object_16.key(key_17).start_object();
                crate::json_ser::serialize_structure_bot_alias_locale_settings(
                    &mut object_19,
                    value_18,
                );
                object_19.finish();
            }
        }
        object_16.finish();
    }
    if let Some(var_20) = &input.bot_alias_name {
        object.key("botAliasName").string(var_20);
    }
    if let Some(var_21) = &input.bot_version {
        object.key("botVersion").string(var_21);
    }
    if let Some(var_22) = &input.conversation_log_settings {
        let mut object_23 = object.key("conversationLogSettings").start_object();
        crate::json_ser::serialize_structure_conversation_log_settings(&mut object_23, var_22);
        object_23.finish();
    }
    if let Some(var_24) = &input.description {
        object.key("description").string(var_24);
    }
    if let Some(var_25) = &input.sentiment_analysis_settings {
        let mut object_26 = object.key("sentimentAnalysisSettings").start_object();
        crate::json_ser::serialize_structure_sentiment_analysis_settings(&mut object_26, var_25);
        object_26.finish();
    }
    if let Some(var_27) = &input.tags {
        let mut object_28 = object.key("tags").start_object();
        for (key_29, value_30) in var_27 {
            {
                object_28.key(key_29).string(value_30);
            }
        }
        object_28.finish();
    }
}

pub fn serialize_structure_create_bot_locale_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotLocaleInput,
) {
    if let Some(var_31) = &input.description {
        object.key("description").string(var_31);
    }
    if let Some(var_32) = &input.locale_id {
        object.key("localeId").string(var_32);
    }
    if let Some(var_33) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_33).into()),
        );
    }
    if let Some(var_34) = &input.voice_settings {
        let mut object_35 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_voice_settings(&mut object_35, var_34);
        object_35.finish();
    }
}

pub fn serialize_structure_create_bot_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotVersionInput,
) {
    if let Some(var_36) = &input.bot_version_locale_specification {
        let mut object_37 = object.key("botVersionLocaleSpecification").start_object();
        for (key_38, value_39) in var_36 {
            {
                let mut object_40 = object_37.key(key_38).start_object();
                crate::json_ser::serialize_structure_bot_version_locale_details(
                    &mut object_40,
                    value_39,
                );
                object_40.finish();
            }
        }
        object_37.finish();
    }
    if let Some(var_41) = &input.description {
        object.key("description").string(var_41);
    }
}

pub fn serialize_structure_create_export_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExportInput,
) {
    if let Some(var_42) = &input.file_format {
        object.key("fileFormat").string(var_42.as_str());
    }
    if let Some(var_43) = &input.file_password {
        object.key("filePassword").string(var_43);
    }
    if let Some(var_44) = &input.resource_specification {
        let mut object_45 = object.key("resourceSpecification").start_object();
        crate::json_ser::serialize_structure_export_resource_specification(&mut object_45, var_44);
        object_45.finish();
    }
}

pub fn serialize_structure_create_intent_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIntentInput,
) {
    if let Some(var_46) = &input.description {
        object.key("description").string(var_46);
    }
    if let Some(var_47) = &input.dialog_code_hook {
        let mut object_48 = object.key("dialogCodeHook").start_object();
        crate::json_ser::serialize_structure_dialog_code_hook_settings(&mut object_48, var_47);
        object_48.finish();
    }
    if let Some(var_49) = &input.fulfillment_code_hook {
        let mut object_50 = object.key("fulfillmentCodeHook").start_object();
        crate::json_ser::serialize_structure_fulfillment_code_hook_settings(&mut object_50, var_49);
        object_50.finish();
    }
    if let Some(var_51) = &input.input_contexts {
        let mut array_52 = object.key("inputContexts").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_input_context(&mut object_54, item_53);
                object_54.finish();
            }
        }
        array_52.finish();
    }
    if let Some(var_55) = &input.intent_closing_setting {
        let mut object_56 = object.key("intentClosingSetting").start_object();
        crate::json_ser::serialize_structure_intent_closing_setting(&mut object_56, var_55);
        object_56.finish();
    }
    if let Some(var_57) = &input.intent_confirmation_setting {
        let mut object_58 = object.key("intentConfirmationSetting").start_object();
        crate::json_ser::serialize_structure_intent_confirmation_setting(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.intent_name {
        object.key("intentName").string(var_59);
    }
    if let Some(var_60) = &input.kendra_configuration {
        let mut object_61 = object.key("kendraConfiguration").start_object();
        crate::json_ser::serialize_structure_kendra_configuration(&mut object_61, var_60);
        object_61.finish();
    }
    if let Some(var_62) = &input.output_contexts {
        let mut array_63 = object.key("outputContexts").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_output_context(&mut object_65, item_64);
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if let Some(var_66) = &input.parent_intent_signature {
        object.key("parentIntentSignature").string(var_66);
    }
    if let Some(var_67) = &input.sample_utterances {
        let mut array_68 = object.key("sampleUtterances").start_array();
        for item_69 in var_67 {
            {
                let mut object_70 = array_68.value().start_object();
                crate::json_ser::serialize_structure_sample_utterance(&mut object_70, item_69);
                object_70.finish();
            }
        }
        array_68.finish();
    }
}

pub fn serialize_structure_create_resource_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourcePolicyInput,
) {
    if let Some(var_71) = &input.policy {
        object.key("policy").string(var_71);
    }
}

pub fn serialize_structure_create_resource_policy_statement_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourcePolicyStatementInput,
) {
    if let Some(var_72) = &input.action {
        let mut array_73 = object.key("action").start_array();
        for item_74 in var_72 {
            {
                array_73.value().string(item_74);
            }
        }
        array_73.finish();
    }
    if let Some(var_75) = &input.condition {
        let mut object_76 = object.key("condition").start_object();
        for (key_77, value_78) in var_75 {
            {
                let mut object_79 = object_76.key(key_77).start_object();
                for (key_80, value_81) in value_78 {
                    {
                        object_79.key(key_80).string(value_81);
                    }
                }
                object_79.finish();
            }
        }
        object_76.finish();
    }
    if let Some(var_82) = &input.effect {
        object.key("effect").string(var_82.as_str());
    }
    if let Some(var_83) = &input.principal {
        let mut array_84 = object.key("principal").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_principal(&mut object_86, item_85);
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.statement_id {
        object.key("statementId").string(var_87);
    }
}

pub fn serialize_structure_create_slot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSlotInput,
) {
    if let Some(var_88) = &input.description {
        object.key("description").string(var_88);
    }
    if let Some(var_89) = &input.multiple_values_setting {
        let mut object_90 = object.key("multipleValuesSetting").start_object();
        crate::json_ser::serialize_structure_multiple_values_setting(&mut object_90, var_89);
        object_90.finish();
    }
    if let Some(var_91) = &input.obfuscation_setting {
        let mut object_92 = object.key("obfuscationSetting").start_object();
        crate::json_ser::serialize_structure_obfuscation_setting(&mut object_92, var_91);
        object_92.finish();
    }
    if let Some(var_93) = &input.slot_name {
        object.key("slotName").string(var_93);
    }
    if let Some(var_94) = &input.slot_type_id {
        object.key("slotTypeId").string(var_94);
    }
    if let Some(var_95) = &input.value_elicitation_setting {
        let mut object_96 = object.key("valueElicitationSetting").start_object();
        crate::json_ser::serialize_structure_slot_value_elicitation_setting(&mut object_96, var_95);
        object_96.finish();
    }
}

pub fn serialize_structure_create_slot_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSlotTypeInput,
) {
    if let Some(var_97) = &input.description {
        object.key("description").string(var_97);
    }
    if let Some(var_98) = &input.parent_slot_type_signature {
        object.key("parentSlotTypeSignature").string(var_98);
    }
    if let Some(var_99) = &input.slot_type_name {
        object.key("slotTypeName").string(var_99);
    }
    if let Some(var_100) = &input.slot_type_values {
        let mut array_101 = object.key("slotTypeValues").start_array();
        for item_102 in var_100 {
            {
                let mut object_103 = array_101.value().start_object();
                crate::json_ser::serialize_structure_slot_type_value(&mut object_103, item_102);
                object_103.finish();
            }
        }
        array_101.finish();
    }
    if let Some(var_104) = &input.value_selection_setting {
        let mut object_105 = object.key("valueSelectionSetting").start_object();
        crate::json_ser::serialize_structure_slot_value_selection_setting(&mut object_105, var_104);
        object_105.finish();
    }
}

pub fn serialize_structure_list_bot_aliases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotAliasesInput,
) {
    if let Some(var_106) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_106).into()),
        );
    }
    if let Some(var_107) = &input.next_token {
        object.key("nextToken").string(var_107);
    }
}

pub fn serialize_structure_list_bot_locales_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotLocalesInput,
) {
    if let Some(var_108) = &input.filters {
        let mut array_109 = object.key("filters").start_array();
        for item_110 in var_108 {
            {
                let mut object_111 = array_109.value().start_object();
                crate::json_ser::serialize_structure_bot_locale_filter(&mut object_111, item_110);
                object_111.finish();
            }
        }
        array_109.finish();
    }
    if let Some(var_112) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_112).into()),
        );
    }
    if let Some(var_113) = &input.next_token {
        object.key("nextToken").string(var_113);
    }
    if let Some(var_114) = &input.sort_by {
        let mut object_115 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_bot_locale_sort_by(&mut object_115, var_114);
        object_115.finish();
    }
}

pub fn serialize_structure_list_bots_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotsInput,
) {
    if let Some(var_116) = &input.filters {
        let mut array_117 = object.key("filters").start_array();
        for item_118 in var_116 {
            {
                let mut object_119 = array_117.value().start_object();
                crate::json_ser::serialize_structure_bot_filter(&mut object_119, item_118);
                object_119.finish();
            }
        }
        array_117.finish();
    }
    if let Some(var_120) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_120).into()),
        );
    }
    if let Some(var_121) = &input.next_token {
        object.key("nextToken").string(var_121);
    }
    if let Some(var_122) = &input.sort_by {
        let mut object_123 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_bot_sort_by(&mut object_123, var_122);
        object_123.finish();
    }
}

pub fn serialize_structure_list_bot_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotVersionsInput,
) {
    if let Some(var_124) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_124).into()),
        );
    }
    if let Some(var_125) = &input.next_token {
        object.key("nextToken").string(var_125);
    }
    if let Some(var_126) = &input.sort_by {
        let mut object_127 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_bot_version_sort_by(&mut object_127, var_126);
        object_127.finish();
    }
}

pub fn serialize_structure_list_built_in_intents_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBuiltInIntentsInput,
) {
    if let Some(var_128) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_128).into()),
        );
    }
    if let Some(var_129) = &input.next_token {
        object.key("nextToken").string(var_129);
    }
    if let Some(var_130) = &input.sort_by {
        let mut object_131 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_built_in_intent_sort_by(&mut object_131, var_130);
        object_131.finish();
    }
}

pub fn serialize_structure_list_built_in_slot_types_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBuiltInSlotTypesInput,
) {
    if let Some(var_132) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_132).into()),
        );
    }
    if let Some(var_133) = &input.next_token {
        object.key("nextToken").string(var_133);
    }
    if let Some(var_134) = &input.sort_by {
        let mut object_135 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_built_in_slot_type_sort_by(&mut object_135, var_134);
        object_135.finish();
    }
}

pub fn serialize_structure_list_exports_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExportsInput,
) {
    if let Some(var_136) = &input.bot_id {
        object.key("botId").string(var_136);
    }
    if let Some(var_137) = &input.bot_version {
        object.key("botVersion").string(var_137);
    }
    if let Some(var_138) = &input.filters {
        let mut array_139 = object.key("filters").start_array();
        for item_140 in var_138 {
            {
                let mut object_141 = array_139.value().start_object();
                crate::json_ser::serialize_structure_export_filter(&mut object_141, item_140);
                object_141.finish();
            }
        }
        array_139.finish();
    }
    if let Some(var_142) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    if let Some(var_143) = &input.next_token {
        object.key("nextToken").string(var_143);
    }
    if let Some(var_144) = &input.sort_by {
        let mut object_145 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_export_sort_by(&mut object_145, var_144);
        object_145.finish();
    }
}

pub fn serialize_structure_list_imports_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImportsInput,
) {
    if let Some(var_146) = &input.bot_id {
        object.key("botId").string(var_146);
    }
    if let Some(var_147) = &input.bot_version {
        object.key("botVersion").string(var_147);
    }
    if let Some(var_148) = &input.filters {
        let mut array_149 = object.key("filters").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_import_filter(&mut object_151, item_150);
                object_151.finish();
            }
        }
        array_149.finish();
    }
    if let Some(var_152) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_152).into()),
        );
    }
    if let Some(var_153) = &input.next_token {
        object.key("nextToken").string(var_153);
    }
    if let Some(var_154) = &input.sort_by {
        let mut object_155 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_import_sort_by(&mut object_155, var_154);
        object_155.finish();
    }
}

pub fn serialize_structure_list_intents_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIntentsInput,
) {
    if let Some(var_156) = &input.filters {
        let mut array_157 = object.key("filters").start_array();
        for item_158 in var_156 {
            {
                let mut object_159 = array_157.value().start_object();
                crate::json_ser::serialize_structure_intent_filter(&mut object_159, item_158);
                object_159.finish();
            }
        }
        array_157.finish();
    }
    if let Some(var_160) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    if let Some(var_161) = &input.next_token {
        object.key("nextToken").string(var_161);
    }
    if let Some(var_162) = &input.sort_by {
        let mut object_163 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_intent_sort_by(&mut object_163, var_162);
        object_163.finish();
    }
}

pub fn serialize_structure_list_slots_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSlotsInput,
) {
    if let Some(var_164) = &input.filters {
        let mut array_165 = object.key("filters").start_array();
        for item_166 in var_164 {
            {
                let mut object_167 = array_165.value().start_object();
                crate::json_ser::serialize_structure_slot_filter(&mut object_167, item_166);
                object_167.finish();
            }
        }
        array_165.finish();
    }
    if let Some(var_168) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    if let Some(var_169) = &input.next_token {
        object.key("nextToken").string(var_169);
    }
    if let Some(var_170) = &input.sort_by {
        let mut object_171 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_slot_sort_by(&mut object_171, var_170);
        object_171.finish();
    }
}

pub fn serialize_structure_list_slot_types_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSlotTypesInput,
) {
    if let Some(var_172) = &input.filters {
        let mut array_173 = object.key("filters").start_array();
        for item_174 in var_172 {
            {
                let mut object_175 = array_173.value().start_object();
                crate::json_ser::serialize_structure_slot_type_filter(&mut object_175, item_174);
                object_175.finish();
            }
        }
        array_173.finish();
    }
    if let Some(var_176) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_176).into()),
        );
    }
    if let Some(var_177) = &input.next_token {
        object.key("nextToken").string(var_177);
    }
    if let Some(var_178) = &input.sort_by {
        let mut object_179 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_slot_type_sort_by(&mut object_179, var_178);
        object_179.finish();
    }
}

pub fn serialize_structure_start_import_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportInput,
) {
    if let Some(var_180) = &input.file_password {
        object.key("filePassword").string(var_180);
    }
    if let Some(var_181) = &input.import_id {
        object.key("importId").string(var_181);
    }
    if let Some(var_182) = &input.merge_strategy {
        object.key("mergeStrategy").string(var_182.as_str());
    }
    if let Some(var_183) = &input.resource_specification {
        let mut object_184 = object.key("resourceSpecification").start_object();
        crate::json_ser::serialize_structure_import_resource_specification(
            &mut object_184,
            var_183,
        );
        object_184.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_185) = &input.tags {
        let mut object_186 = object.key("tags").start_object();
        for (key_187, value_188) in var_185 {
            {
                object_186.key(key_187).string(value_188);
            }
        }
        object_186.finish();
    }
}

pub fn serialize_structure_update_bot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotInput,
) {
    if let Some(var_189) = &input.bot_name {
        object.key("botName").string(var_189);
    }
    if let Some(var_190) = &input.data_privacy {
        let mut object_191 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_data_privacy(&mut object_191, var_190);
        object_191.finish();
    }
    if let Some(var_192) = &input.description {
        object.key("description").string(var_192);
    }
    if let Some(var_193) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_193).into()),
        );
    }
    if let Some(var_194) = &input.role_arn {
        object.key("roleArn").string(var_194);
    }
}

pub fn serialize_structure_update_bot_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotAliasInput,
) {
    if let Some(var_195) = &input.bot_alias_locale_settings {
        let mut object_196 = object.key("botAliasLocaleSettings").start_object();
        for (key_197, value_198) in var_195 {
            {
                let mut object_199 = object_196.key(key_197).start_object();
                crate::json_ser::serialize_structure_bot_alias_locale_settings(
                    &mut object_199,
                    value_198,
                );
                object_199.finish();
            }
        }
        object_196.finish();
    }
    if let Some(var_200) = &input.bot_alias_name {
        object.key("botAliasName").string(var_200);
    }
    if let Some(var_201) = &input.bot_version {
        object.key("botVersion").string(var_201);
    }
    if let Some(var_202) = &input.conversation_log_settings {
        let mut object_203 = object.key("conversationLogSettings").start_object();
        crate::json_ser::serialize_structure_conversation_log_settings(&mut object_203, var_202);
        object_203.finish();
    }
    if let Some(var_204) = &input.description {
        object.key("description").string(var_204);
    }
    if let Some(var_205) = &input.sentiment_analysis_settings {
        let mut object_206 = object.key("sentimentAnalysisSettings").start_object();
        crate::json_ser::serialize_structure_sentiment_analysis_settings(&mut object_206, var_205);
        object_206.finish();
    }
}

pub fn serialize_structure_update_bot_locale_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotLocaleInput,
) {
    if let Some(var_207) = &input.description {
        object.key("description").string(var_207);
    }
    if let Some(var_208) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_208).into()),
        );
    }
    if let Some(var_209) = &input.voice_settings {
        let mut object_210 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_voice_settings(&mut object_210, var_209);
        object_210.finish();
    }
}

pub fn serialize_structure_update_export_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExportInput,
) {
    if let Some(var_211) = &input.file_password {
        object.key("filePassword").string(var_211);
    }
}

pub fn serialize_structure_update_intent_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIntentInput,
) {
    if let Some(var_212) = &input.description {
        object.key("description").string(var_212);
    }
    if let Some(var_213) = &input.dialog_code_hook {
        let mut object_214 = object.key("dialogCodeHook").start_object();
        crate::json_ser::serialize_structure_dialog_code_hook_settings(&mut object_214, var_213);
        object_214.finish();
    }
    if let Some(var_215) = &input.fulfillment_code_hook {
        let mut object_216 = object.key("fulfillmentCodeHook").start_object();
        crate::json_ser::serialize_structure_fulfillment_code_hook_settings(
            &mut object_216,
            var_215,
        );
        object_216.finish();
    }
    if let Some(var_217) = &input.input_contexts {
        let mut array_218 = object.key("inputContexts").start_array();
        for item_219 in var_217 {
            {
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_input_context(&mut object_220, item_219);
                object_220.finish();
            }
        }
        array_218.finish();
    }
    if let Some(var_221) = &input.intent_closing_setting {
        let mut object_222 = object.key("intentClosingSetting").start_object();
        crate::json_ser::serialize_structure_intent_closing_setting(&mut object_222, var_221);
        object_222.finish();
    }
    if let Some(var_223) = &input.intent_confirmation_setting {
        let mut object_224 = object.key("intentConfirmationSetting").start_object();
        crate::json_ser::serialize_structure_intent_confirmation_setting(&mut object_224, var_223);
        object_224.finish();
    }
    if let Some(var_225) = &input.intent_name {
        object.key("intentName").string(var_225);
    }
    if let Some(var_226) = &input.kendra_configuration {
        let mut object_227 = object.key("kendraConfiguration").start_object();
        crate::json_ser::serialize_structure_kendra_configuration(&mut object_227, var_226);
        object_227.finish();
    }
    if let Some(var_228) = &input.output_contexts {
        let mut array_229 = object.key("outputContexts").start_array();
        for item_230 in var_228 {
            {
                let mut object_231 = array_229.value().start_object();
                crate::json_ser::serialize_structure_output_context(&mut object_231, item_230);
                object_231.finish();
            }
        }
        array_229.finish();
    }
    if let Some(var_232) = &input.parent_intent_signature {
        object.key("parentIntentSignature").string(var_232);
    }
    if let Some(var_233) = &input.sample_utterances {
        let mut array_234 = object.key("sampleUtterances").start_array();
        for item_235 in var_233 {
            {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_sample_utterance(&mut object_236, item_235);
                object_236.finish();
            }
        }
        array_234.finish();
    }
    if let Some(var_237) = &input.slot_priorities {
        let mut array_238 = object.key("slotPriorities").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_slot_priority(&mut object_240, item_239);
                object_240.finish();
            }
        }
        array_238.finish();
    }
}

pub fn serialize_structure_update_resource_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourcePolicyInput,
) {
    if let Some(var_241) = &input.policy {
        object.key("policy").string(var_241);
    }
}

pub fn serialize_structure_update_slot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSlotInput,
) {
    if let Some(var_242) = &input.description {
        object.key("description").string(var_242);
    }
    if let Some(var_243) = &input.multiple_values_setting {
        let mut object_244 = object.key("multipleValuesSetting").start_object();
        crate::json_ser::serialize_structure_multiple_values_setting(&mut object_244, var_243);
        object_244.finish();
    }
    if let Some(var_245) = &input.obfuscation_setting {
        let mut object_246 = object.key("obfuscationSetting").start_object();
        crate::json_ser::serialize_structure_obfuscation_setting(&mut object_246, var_245);
        object_246.finish();
    }
    if let Some(var_247) = &input.slot_name {
        object.key("slotName").string(var_247);
    }
    if let Some(var_248) = &input.slot_type_id {
        object.key("slotTypeId").string(var_248);
    }
    if let Some(var_249) = &input.value_elicitation_setting {
        let mut object_250 = object.key("valueElicitationSetting").start_object();
        crate::json_ser::serialize_structure_slot_value_elicitation_setting(
            &mut object_250,
            var_249,
        );
        object_250.finish();
    }
}

pub fn serialize_structure_update_slot_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSlotTypeInput,
) {
    if let Some(var_251) = &input.description {
        object.key("description").string(var_251);
    }
    if let Some(var_252) = &input.parent_slot_type_signature {
        object.key("parentSlotTypeSignature").string(var_252);
    }
    if let Some(var_253) = &input.slot_type_name {
        object.key("slotTypeName").string(var_253);
    }
    if let Some(var_254) = &input.slot_type_values {
        let mut array_255 = object.key("slotTypeValues").start_array();
        for item_256 in var_254 {
            {
                let mut object_257 = array_255.value().start_object();
                crate::json_ser::serialize_structure_slot_type_value(&mut object_257, item_256);
                object_257.finish();
            }
        }
        array_255.finish();
    }
    if let Some(var_258) = &input.value_selection_setting {
        let mut object_259 = object.key("valueSelectionSetting").start_object();
        crate::json_ser::serialize_structure_slot_value_selection_setting(&mut object_259, var_258);
        object_259.finish();
    }
}

pub fn serialize_structure_data_privacy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataPrivacy,
) {
    {
        object.key("childDirected").boolean(input.child_directed);
    }
}

pub fn serialize_structure_bot_alias_locale_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotAliasLocaleSettings,
) {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_260) = &input.code_hook_specification {
        let mut object_261 = object.key("codeHookSpecification").start_object();
        crate::json_ser::serialize_structure_code_hook_specification(&mut object_261, var_260);
        object_261.finish();
    }
}

pub fn serialize_structure_conversation_log_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConversationLogSettings,
) {
    if let Some(var_262) = &input.text_log_settings {
        let mut array_263 = object.key("textLogSettings").start_array();
        for item_264 in var_262 {
            {
                let mut object_265 = array_263.value().start_object();
                crate::json_ser::serialize_structure_text_log_setting(&mut object_265, item_264);
                object_265.finish();
            }
        }
        array_263.finish();
    }
    if let Some(var_266) = &input.audio_log_settings {
        let mut array_267 = object.key("audioLogSettings").start_array();
        for item_268 in var_266 {
            {
                let mut object_269 = array_267.value().start_object();
                crate::json_ser::serialize_structure_audio_log_setting(&mut object_269, item_268);
                object_269.finish();
            }
        }
        array_267.finish();
    }
}

pub fn serialize_structure_sentiment_analysis_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SentimentAnalysisSettings,
) {
    {
        object
            .key("detectSentiment")
            .boolean(input.detect_sentiment);
    }
}

pub fn serialize_structure_voice_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceSettings,
) {
    if let Some(var_270) = &input.voice_id {
        object.key("voiceId").string(var_270);
    }
}

pub fn serialize_structure_bot_version_locale_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotVersionLocaleDetails,
) {
    if let Some(var_271) = &input.source_bot_version {
        object.key("sourceBotVersion").string(var_271);
    }
}

pub fn serialize_structure_export_resource_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportResourceSpecification,
) {
    if let Some(var_272) = &input.bot_export_specification {
        let mut object_273 = object.key("botExportSpecification").start_object();
        crate::json_ser::serialize_structure_bot_export_specification(&mut object_273, var_272);
        object_273.finish();
    }
    if let Some(var_274) = &input.bot_locale_export_specification {
        let mut object_275 = object.key("botLocaleExportSpecification").start_object();
        crate::json_ser::serialize_structure_bot_locale_export_specification(
            &mut object_275,
            var_274,
        );
        object_275.finish();
    }
}

pub fn serialize_structure_dialog_code_hook_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DialogCodeHookSettings,
) {
    {
        object.key("enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_fulfillment_code_hook_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentCodeHookSettings,
) {
    {
        object.key("enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_input_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputContext,
) {
    if let Some(var_276) = &input.name {
        object.key("name").string(var_276);
    }
}

pub fn serialize_structure_intent_closing_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentClosingSetting,
) {
    if let Some(var_277) = &input.closing_response {
        let mut object_278 = object.key("closingResponse").start_object();
        crate::json_ser::serialize_structure_response_specification(&mut object_278, var_277);
        object_278.finish();
    }
}

pub fn serialize_structure_intent_confirmation_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentConfirmationSetting,
) {
    if let Some(var_279) = &input.prompt_specification {
        let mut object_280 = object.key("promptSpecification").start_object();
        crate::json_ser::serialize_structure_prompt_specification(&mut object_280, var_279);
        object_280.finish();
    }
    if let Some(var_281) = &input.declination_response {
        let mut object_282 = object.key("declinationResponse").start_object();
        crate::json_ser::serialize_structure_response_specification(&mut object_282, var_281);
        object_282.finish();
    }
}

pub fn serialize_structure_kendra_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KendraConfiguration,
) {
    if let Some(var_283) = &input.kendra_index {
        object.key("kendraIndex").string(var_283);
    }
    if input.query_filter_string_enabled {
        object
            .key("queryFilterStringEnabled")
            .boolean(input.query_filter_string_enabled);
    }
    if let Some(var_284) = &input.query_filter_string {
        object.key("queryFilterString").string(var_284);
    }
}

pub fn serialize_structure_output_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputContext,
) {
    if let Some(var_285) = &input.name {
        object.key("name").string(var_285);
    }
    if let Some(var_286) = &input.time_to_live_in_seconds {
        object.key("timeToLiveInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_286).into()),
        );
    }
    if let Some(var_287) = &input.turns_to_live {
        object.key("turnsToLive").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_287).into()),
        );
    }
}

pub fn serialize_structure_sample_utterance(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleUtterance,
) {
    if let Some(var_288) = &input.utterance {
        object.key("utterance").string(var_288);
    }
}

pub fn serialize_structure_principal(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) {
    if let Some(var_289) = &input.service {
        object.key("service").string(var_289);
    }
    if let Some(var_290) = &input.arn {
        object.key("arn").string(var_290);
    }
}

pub fn serialize_structure_multiple_values_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultipleValuesSetting,
) {
    if input.allow_multiple_values {
        object
            .key("allowMultipleValues")
            .boolean(input.allow_multiple_values);
    }
}

pub fn serialize_structure_obfuscation_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObfuscationSetting,
) {
    if let Some(var_291) = &input.obfuscation_setting_type {
        object
            .key("obfuscationSettingType")
            .string(var_291.as_str());
    }
}

pub fn serialize_structure_slot_value_elicitation_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueElicitationSetting,
) {
    if let Some(var_292) = &input.default_value_specification {
        let mut object_293 = object.key("defaultValueSpecification").start_object();
        crate::json_ser::serialize_structure_slot_default_value_specification(
            &mut object_293,
            var_292,
        );
        object_293.finish();
    }
    if let Some(var_294) = &input.slot_constraint {
        object.key("slotConstraint").string(var_294.as_str());
    }
    if let Some(var_295) = &input.prompt_specification {
        let mut object_296 = object.key("promptSpecification").start_object();
        crate::json_ser::serialize_structure_prompt_specification(&mut object_296, var_295);
        object_296.finish();
    }
    if let Some(var_297) = &input.sample_utterances {
        let mut array_298 = object.key("sampleUtterances").start_array();
        for item_299 in var_297 {
            {
                let mut object_300 = array_298.value().start_object();
                crate::json_ser::serialize_structure_sample_utterance(&mut object_300, item_299);
                object_300.finish();
            }
        }
        array_298.finish();
    }
    if let Some(var_301) = &input.wait_and_continue_specification {
        let mut object_302 = object.key("waitAndContinueSpecification").start_object();
        crate::json_ser::serialize_structure_wait_and_continue_specification(
            &mut object_302,
            var_301,
        );
        object_302.finish();
    }
}

pub fn serialize_structure_slot_type_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeValue,
) {
    if let Some(var_303) = &input.sample_value {
        let mut object_304 = object.key("sampleValue").start_object();
        crate::json_ser::serialize_structure_sample_value(&mut object_304, var_303);
        object_304.finish();
    }
    if let Some(var_305) = &input.synonyms {
        let mut array_306 = object.key("synonyms").start_array();
        for item_307 in var_305 {
            {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_sample_value(&mut object_308, item_307);
                object_308.finish();
            }
        }
        array_306.finish();
    }
}

pub fn serialize_structure_slot_value_selection_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueSelectionSetting,
) {
    if let Some(var_309) = &input.resolution_strategy {
        object.key("resolutionStrategy").string(var_309.as_str());
    }
    if let Some(var_310) = &input.regex_filter {
        let mut object_311 = object.key("regexFilter").start_object();
        crate::json_ser::serialize_structure_slot_value_regex_filter(&mut object_311, var_310);
        object_311.finish();
    }
}

pub fn serialize_structure_bot_locale_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleFilter,
) {
    if let Some(var_312) = &input.name {
        object.key("name").string(var_312.as_str());
    }
    if let Some(var_313) = &input.values {
        let mut array_314 = object.key("values").start_array();
        for item_315 in var_313 {
            {
                array_314.value().string(item_315);
            }
        }
        array_314.finish();
    }
    if let Some(var_316) = &input.operator {
        object.key("operator").string(var_316.as_str());
    }
}

pub fn serialize_structure_bot_locale_sort_by(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleSortBy,
) {
    if let Some(var_317) = &input.attribute {
        object.key("attribute").string(var_317.as_str());
    }
    if let Some(var_318) = &input.order {
        object.key("order").string(var_318.as_str());
    }
}

pub fn serialize_structure_bot_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotFilter,
) {
    if let Some(var_319) = &input.name {
        object.key("name").string(var_319.as_str());
    }
    if let Some(var_320) = &input.values {
        let mut array_321 = object.key("values").start_array();
        for item_322 in var_320 {
            {
                array_321.value().string(item_322);
            }
        }
        array_321.finish();
    }
    if let Some(var_323) = &input.operator {
        object.key("operator").string(var_323.as_str());
    }
}

pub fn serialize_structure_bot_sort_by(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotSortBy,
) {
    if let Some(var_324) = &input.attribute {
        object.key("attribute").string(var_324.as_str());
    }
    if let Some(var_325) = &input.order {
        object.key("order").string(var_325.as_str());
    }
}

pub fn serialize_structure_bot_version_sort_by(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotVersionSortBy,
) {
    if let Some(var_326) = &input.attribute {
        object.key("attribute").string(var_326.as_str());
    }
    if let Some(var_327) = &input.order {
        object.key("order").string(var_327.as_str());
    }
}

pub fn serialize_structure_built_in_intent_sort_by(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BuiltInIntentSortBy,
) {
    if let Some(var_328) = &input.attribute {
        object.key("attribute").string(var_328.as_str());
    }
    if let Some(var_329) = &input.order {
        object.key("order").string(var_329.as_str());
    }
}

pub fn serialize_structure_built_in_slot_type_sort_by(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BuiltInSlotTypeSortBy,
) {
    if let Some(var_330) = &input.attribute {
        object.key("attribute").string(var_330.as_str());
    }
    if let Some(var_331) = &input.order {
        object.key("order").string(var_331.as_str());
    }
}

pub fn serialize_structure_export_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportFilter,
) {
    if let Some(var_332) = &input.name {
        object.key("name").string(var_332.as_str());
    }
    if let Some(var_333) = &input.values {
        let mut array_334 = object.key("values").start_array();
        for item_335 in var_333 {
            {
                array_334.value().string(item_335);
            }
        }
        array_334.finish();
    }
    if let Some(var_336) = &input.operator {
        object.key("operator").string(var_336.as_str());
    }
}

pub fn serialize_structure_export_sort_by(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportSortBy,
) {
    if let Some(var_337) = &input.attribute {
        object.key("attribute").string(var_337.as_str());
    }
    if let Some(var_338) = &input.order {
        object.key("order").string(var_338.as_str());
    }
}

pub fn serialize_structure_import_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportFilter,
) {
    if let Some(var_339) = &input.name {
        object.key("name").string(var_339.as_str());
    }
    if let Some(var_340) = &input.values {
        let mut array_341 = object.key("values").start_array();
        for item_342 in var_340 {
            {
                array_341.value().string(item_342);
            }
        }
        array_341.finish();
    }
    if let Some(var_343) = &input.operator {
        object.key("operator").string(var_343.as_str());
    }
}

pub fn serialize_structure_import_sort_by(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportSortBy,
) {
    if let Some(var_344) = &input.attribute {
        object.key("attribute").string(var_344.as_str());
    }
    if let Some(var_345) = &input.order {
        object.key("order").string(var_345.as_str());
    }
}

pub fn serialize_structure_intent_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentFilter,
) {
    if let Some(var_346) = &input.name {
        object.key("name").string(var_346.as_str());
    }
    if let Some(var_347) = &input.values {
        let mut array_348 = object.key("values").start_array();
        for item_349 in var_347 {
            {
                array_348.value().string(item_349);
            }
        }
        array_348.finish();
    }
    if let Some(var_350) = &input.operator {
        object.key("operator").string(var_350.as_str());
    }
}

pub fn serialize_structure_intent_sort_by(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentSortBy,
) {
    if let Some(var_351) = &input.attribute {
        object.key("attribute").string(var_351.as_str());
    }
    if let Some(var_352) = &input.order {
        object.key("order").string(var_352.as_str());
    }
}

pub fn serialize_structure_slot_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotFilter,
) {
    if let Some(var_353) = &input.name {
        object.key("name").string(var_353.as_str());
    }
    if let Some(var_354) = &input.values {
        let mut array_355 = object.key("values").start_array();
        for item_356 in var_354 {
            {
                array_355.value().string(item_356);
            }
        }
        array_355.finish();
    }
    if let Some(var_357) = &input.operator {
        object.key("operator").string(var_357.as_str());
    }
}

pub fn serialize_structure_slot_sort_by(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotSortBy,
) {
    if let Some(var_358) = &input.attribute {
        object.key("attribute").string(var_358.as_str());
    }
    if let Some(var_359) = &input.order {
        object.key("order").string(var_359.as_str());
    }
}

pub fn serialize_structure_slot_type_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeFilter,
) {
    if let Some(var_360) = &input.name {
        object.key("name").string(var_360.as_str());
    }
    if let Some(var_361) = &input.values {
        let mut array_362 = object.key("values").start_array();
        for item_363 in var_361 {
            {
                array_362.value().string(item_363);
            }
        }
        array_362.finish();
    }
    if let Some(var_364) = &input.operator {
        object.key("operator").string(var_364.as_str());
    }
}

pub fn serialize_structure_slot_type_sort_by(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeSortBy,
) {
    if let Some(var_365) = &input.attribute {
        object.key("attribute").string(var_365.as_str());
    }
    if let Some(var_366) = &input.order {
        object.key("order").string(var_366.as_str());
    }
}

pub fn serialize_structure_import_resource_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportResourceSpecification,
) {
    if let Some(var_367) = &input.bot_import_specification {
        let mut object_368 = object.key("botImportSpecification").start_object();
        crate::json_ser::serialize_structure_bot_import_specification(&mut object_368, var_367);
        object_368.finish();
    }
    if let Some(var_369) = &input.bot_locale_import_specification {
        let mut object_370 = object.key("botLocaleImportSpecification").start_object();
        crate::json_ser::serialize_structure_bot_locale_import_specification(
            &mut object_370,
            var_369,
        );
        object_370.finish();
    }
}

pub fn serialize_structure_slot_priority(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotPriority,
) {
    if let Some(var_371) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_371).into()),
        );
    }
    if let Some(var_372) = &input.slot_id {
        object.key("slotId").string(var_372);
    }
}

pub fn serialize_structure_code_hook_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeHookSpecification,
) {
    if let Some(var_373) = &input.lambda_code_hook {
        let mut object_374 = object.key("lambdaCodeHook").start_object();
        crate::json_ser::serialize_structure_lambda_code_hook(&mut object_374, var_373);
        object_374.finish();
    }
}

pub fn serialize_structure_text_log_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextLogSetting,
) {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_375) = &input.destination {
        let mut object_376 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_text_log_destination(&mut object_376, var_375);
        object_376.finish();
    }
}

pub fn serialize_structure_audio_log_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioLogSetting,
) {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_377) = &input.destination {
        let mut object_378 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_audio_log_destination(&mut object_378, var_377);
        object_378.finish();
    }
}

pub fn serialize_structure_bot_export_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotExportSpecification,
) {
    if let Some(var_379) = &input.bot_id {
        object.key("botId").string(var_379);
    }
    if let Some(var_380) = &input.bot_version {
        object.key("botVersion").string(var_380);
    }
}

pub fn serialize_structure_bot_locale_export_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleExportSpecification,
) {
    if let Some(var_381) = &input.bot_id {
        object.key("botId").string(var_381);
    }
    if let Some(var_382) = &input.bot_version {
        object.key("botVersion").string(var_382);
    }
    if let Some(var_383) = &input.locale_id {
        object.key("localeId").string(var_383);
    }
}

pub fn serialize_structure_response_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResponseSpecification,
) {
    if let Some(var_384) = &input.message_groups {
        let mut array_385 = object.key("messageGroups").start_array();
        for item_386 in var_384 {
            {
                let mut object_387 = array_385.value().start_object();
                crate::json_ser::serialize_structure_message_group(&mut object_387, item_386);
                object_387.finish();
            }
        }
        array_385.finish();
    }
    if let Some(var_388) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_388);
    }
}

pub fn serialize_structure_prompt_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PromptSpecification,
) {
    if let Some(var_389) = &input.message_groups {
        let mut array_390 = object.key("messageGroups").start_array();
        for item_391 in var_389 {
            {
                let mut object_392 = array_390.value().start_object();
                crate::json_ser::serialize_structure_message_group(&mut object_392, item_391);
                object_392.finish();
            }
        }
        array_390.finish();
    }
    if let Some(var_393) = &input.max_retries {
        object.key("maxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_393).into()),
        );
    }
    if let Some(var_394) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_394);
    }
}

pub fn serialize_structure_slot_default_value_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotDefaultValueSpecification,
) {
    if let Some(var_395) = &input.default_value_list {
        let mut array_396 = object.key("defaultValueList").start_array();
        for item_397 in var_395 {
            {
                let mut object_398 = array_396.value().start_object();
                crate::json_ser::serialize_structure_slot_default_value(&mut object_398, item_397);
                object_398.finish();
            }
        }
        array_396.finish();
    }
}

pub fn serialize_structure_wait_and_continue_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WaitAndContinueSpecification,
) {
    if let Some(var_399) = &input.waiting_response {
        let mut object_400 = object.key("waitingResponse").start_object();
        crate::json_ser::serialize_structure_response_specification(&mut object_400, var_399);
        object_400.finish();
    }
    if let Some(var_401) = &input.continue_response {
        let mut object_402 = object.key("continueResponse").start_object();
        crate::json_ser::serialize_structure_response_specification(&mut object_402, var_401);
        object_402.finish();
    }
    if let Some(var_403) = &input.still_waiting_response {
        let mut object_404 = object.key("stillWaitingResponse").start_object();
        crate::json_ser::serialize_structure_still_waiting_response_specification(
            &mut object_404,
            var_403,
        );
        object_404.finish();
    }
}

pub fn serialize_structure_sample_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleValue,
) {
    if let Some(var_405) = &input.value {
        object.key("value").string(var_405);
    }
}

pub fn serialize_structure_slot_value_regex_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueRegexFilter,
) {
    if let Some(var_406) = &input.pattern {
        object.key("pattern").string(var_406);
    }
}

pub fn serialize_structure_bot_import_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotImportSpecification,
) {
    if let Some(var_407) = &input.bot_name {
        object.key("botName").string(var_407);
    }
    if let Some(var_408) = &input.role_arn {
        object.key("roleArn").string(var_408);
    }
    if let Some(var_409) = &input.data_privacy {
        let mut object_410 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_data_privacy(&mut object_410, var_409);
        object_410.finish();
    }
    if let Some(var_411) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_411).into()),
        );
    }
    if let Some(var_412) = &input.bot_tags {
        let mut object_413 = object.key("botTags").start_object();
        for (key_414, value_415) in var_412 {
            {
                object_413.key(key_414).string(value_415);
            }
        }
        object_413.finish();
    }
    if let Some(var_416) = &input.test_bot_alias_tags {
        let mut object_417 = object.key("testBotAliasTags").start_object();
        for (key_418, value_419) in var_416 {
            {
                object_417.key(key_418).string(value_419);
            }
        }
        object_417.finish();
    }
}

pub fn serialize_structure_bot_locale_import_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleImportSpecification,
) {
    if let Some(var_420) = &input.bot_id {
        object.key("botId").string(var_420);
    }
    if let Some(var_421) = &input.bot_version {
        object.key("botVersion").string(var_421);
    }
    if let Some(var_422) = &input.locale_id {
        object.key("localeId").string(var_422);
    }
    if let Some(var_423) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_423).into()),
        );
    }
    if let Some(var_424) = &input.voice_settings {
        let mut object_425 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_voice_settings(&mut object_425, var_424);
        object_425.finish();
    }
}

pub fn serialize_structure_lambda_code_hook(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaCodeHook,
) {
    if let Some(var_426) = &input.lambda_arn {
        object.key("lambdaARN").string(var_426);
    }
    if let Some(var_427) = &input.code_hook_interface_version {
        object.key("codeHookInterfaceVersion").string(var_427);
    }
}

pub fn serialize_structure_text_log_destination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextLogDestination,
) {
    if let Some(var_428) = &input.cloud_watch {
        let mut object_429 = object.key("cloudWatch").start_object();
        crate::json_ser::serialize_structure_cloud_watch_log_group_log_destination(
            &mut object_429,
            var_428,
        );
        object_429.finish();
    }
}

pub fn serialize_structure_audio_log_destination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioLogDestination,
) {
    if let Some(var_430) = &input.s3_bucket {
        let mut object_431 = object.key("s3Bucket").start_object();
        crate::json_ser::serialize_structure_s3_bucket_log_destination(&mut object_431, var_430);
        object_431.finish();
    }
}

pub fn serialize_structure_message_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MessageGroup,
) {
    if let Some(var_432) = &input.message {
        let mut object_433 = object.key("message").start_object();
        crate::json_ser::serialize_structure_message(&mut object_433, var_432);
        object_433.finish();
    }
    if let Some(var_434) = &input.variations {
        let mut array_435 = object.key("variations").start_array();
        for item_436 in var_434 {
            {
                let mut object_437 = array_435.value().start_object();
                crate::json_ser::serialize_structure_message(&mut object_437, item_436);
                object_437.finish();
            }
        }
        array_435.finish();
    }
}

pub fn serialize_structure_slot_default_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotDefaultValue,
) {
    if let Some(var_438) = &input.default_value {
        object.key("defaultValue").string(var_438);
    }
}

pub fn serialize_structure_still_waiting_response_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StillWaitingResponseSpecification,
) {
    if let Some(var_439) = &input.message_groups {
        let mut array_440 = object.key("messageGroups").start_array();
        for item_441 in var_439 {
            {
                let mut object_442 = array_440.value().start_object();
                crate::json_ser::serialize_structure_message_group(&mut object_442, item_441);
                object_442.finish();
            }
        }
        array_440.finish();
    }
    if let Some(var_443) = &input.frequency_in_seconds {
        object.key("frequencyInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_443).into()),
        );
    }
    if let Some(var_444) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_444).into()),
        );
    }
    if let Some(var_445) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_445);
    }
}

pub fn serialize_structure_cloud_watch_log_group_log_destination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchLogGroupLogDestination,
) {
    if let Some(var_446) = &input.cloud_watch_log_group_arn {
        object.key("cloudWatchLogGroupArn").string(var_446);
    }
    if let Some(var_447) = &input.log_prefix {
        object.key("logPrefix").string(var_447);
    }
}

pub fn serialize_structure_s3_bucket_log_destination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3BucketLogDestination,
) {
    if let Some(var_448) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_448);
    }
    if let Some(var_449) = &input.s3_bucket_arn {
        object.key("s3BucketArn").string(var_449);
    }
    if let Some(var_450) = &input.log_prefix {
        object.key("logPrefix").string(var_450);
    }
}

pub fn serialize_structure_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Message,
) {
    if let Some(var_451) = &input.plain_text_message {
        let mut object_452 = object.key("plainTextMessage").start_object();
        crate::json_ser::serialize_structure_plain_text_message(&mut object_452, var_451);
        object_452.finish();
    }
    if let Some(var_453) = &input.custom_payload {
        let mut object_454 = object.key("customPayload").start_object();
        crate::json_ser::serialize_structure_custom_payload(&mut object_454, var_453);
        object_454.finish();
    }
    if let Some(var_455) = &input.ssml_message {
        let mut object_456 = object.key("ssmlMessage").start_object();
        crate::json_ser::serialize_structure_ssml_message(&mut object_456, var_455);
        object_456.finish();
    }
    if let Some(var_457) = &input.image_response_card {
        let mut object_458 = object.key("imageResponseCard").start_object();
        crate::json_ser::serialize_structure_image_response_card(&mut object_458, var_457);
        object_458.finish();
    }
}

pub fn serialize_structure_plain_text_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlainTextMessage,
) {
    if let Some(var_459) = &input.value {
        object.key("value").string(var_459);
    }
}

pub fn serialize_structure_custom_payload(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomPayload,
) {
    if let Some(var_460) = &input.value {
        object.key("value").string(var_460);
    }
}

pub fn serialize_structure_ssml_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SsmlMessage,
) {
    if let Some(var_461) = &input.value {
        object.key("value").string(var_461);
    }
}

pub fn serialize_structure_image_response_card(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageResponseCard,
) {
    if let Some(var_462) = &input.title {
        object.key("title").string(var_462);
    }
    if let Some(var_463) = &input.subtitle {
        object.key("subtitle").string(var_463);
    }
    if let Some(var_464) = &input.image_url {
        object.key("imageUrl").string(var_464);
    }
    if let Some(var_465) = &input.buttons {
        let mut array_466 = object.key("buttons").start_array();
        for item_467 in var_465 {
            {
                let mut object_468 = array_466.value().start_object();
                crate::json_ser::serialize_structure_button(&mut object_468, item_467);
                object_468.finish();
            }
        }
        array_466.finish();
    }
}

pub fn serialize_structure_button(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Button,
) {
    if let Some(var_469) = &input.text {
        object.key("text").string(var_469);
    }
    if let Some(var_470) = &input.value {
        object.key("value").string(var_470);
    }
}
