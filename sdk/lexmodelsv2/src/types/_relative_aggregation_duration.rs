// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the time window that utterance statistics are returned for. The time window is always relative to the last time that the that utterances were aggregated. For example, if the <code>ListAggregatedUtterances</code> operation is called at 1600, the time window is set to 1 hour, and the last refresh time was 1530, only utterances made between 1430 and 1530 are returned.</p>
/// <p>You can choose the time window that statistics should be returned for.</p>
/// <ul>
/// <li> <p> <b>Hours</b> - You can request utterance statistics for 1, 3, 6, 12, or 24 hour time windows. Statistics are refreshed every half hour for 1 hour time windows, and hourly for the other time windows.</p> </li>
/// <li> <p> <b>Days</b> - You can request utterance statistics for 3 days. Statistics are refreshed every 6 hours.</p> </li>
/// <li> <p> <b>Weeks</b> - You can see statistics for one or two weeks. Statistics are refreshed every 12 hours for one week time windows, and once per day for two week time windows.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RelativeAggregationDuration {
    /// <p>The type of time period that the <code>timeValue</code> field represents. </p>
    #[doc(hidden)]
    pub time_dimension: std::option::Option<crate::types::TimeDimension>,
    /// <p>The period of the time window to gather statistics for. The valid value depends on the setting of the <code>timeDimension</code> field.</p>
    /// <ul>
    /// <li> <p> <code>Hours</code> - 1/3/6/12/24</p> </li>
    /// <li> <p> <code>Days</code> - 3</p> </li>
    /// <li> <p> <code>Weeks</code> - 1/2</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub time_value: i32,
}
impl RelativeAggregationDuration {
    /// <p>The type of time period that the <code>timeValue</code> field represents. </p>
    pub fn time_dimension(&self) -> std::option::Option<&crate::types::TimeDimension> {
        self.time_dimension.as_ref()
    }
    /// <p>The period of the time window to gather statistics for. The valid value depends on the setting of the <code>timeDimension</code> field.</p>
    /// <ul>
    /// <li> <p> <code>Hours</code> - 1/3/6/12/24</p> </li>
    /// <li> <p> <code>Days</code> - 3</p> </li>
    /// <li> <p> <code>Weeks</code> - 1/2</p> </li>
    /// </ul>
    pub fn time_value(&self) -> i32 {
        self.time_value
    }
}
impl RelativeAggregationDuration {
    /// Creates a new builder-style object to manufacture [`RelativeAggregationDuration`](crate::types::RelativeAggregationDuration).
    pub fn builder() -> crate::types::builders::RelativeAggregationDurationBuilder {
        crate::types::builders::RelativeAggregationDurationBuilder::default()
    }
}

/// A builder for [`RelativeAggregationDuration`](crate::types::RelativeAggregationDuration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RelativeAggregationDurationBuilder {
    pub(crate) time_dimension: std::option::Option<crate::types::TimeDimension>,
    pub(crate) time_value: std::option::Option<i32>,
}
impl RelativeAggregationDurationBuilder {
    /// <p>The type of time period that the <code>timeValue</code> field represents. </p>
    pub fn time_dimension(mut self, input: crate::types::TimeDimension) -> Self {
        self.time_dimension = Some(input);
        self
    }
    /// <p>The type of time period that the <code>timeValue</code> field represents. </p>
    pub fn set_time_dimension(
        mut self,
        input: std::option::Option<crate::types::TimeDimension>,
    ) -> Self {
        self.time_dimension = input;
        self
    }
    /// <p>The period of the time window to gather statistics for. The valid value depends on the setting of the <code>timeDimension</code> field.</p>
    /// <ul>
    /// <li> <p> <code>Hours</code> - 1/3/6/12/24</p> </li>
    /// <li> <p> <code>Days</code> - 3</p> </li>
    /// <li> <p> <code>Weeks</code> - 1/2</p> </li>
    /// </ul>
    pub fn time_value(mut self, input: i32) -> Self {
        self.time_value = Some(input);
        self
    }
    /// <p>The period of the time window to gather statistics for. The valid value depends on the setting of the <code>timeDimension</code> field.</p>
    /// <ul>
    /// <li> <p> <code>Hours</code> - 1/3/6/12/24</p> </li>
    /// <li> <p> <code>Days</code> - 3</p> </li>
    /// <li> <p> <code>Weeks</code> - 1/2</p> </li>
    /// </ul>
    pub fn set_time_value(mut self, input: std::option::Option<i32>) -> Self {
        self.time_value = input;
        self
    }
    /// Consumes the builder and constructs a [`RelativeAggregationDuration`](crate::types::RelativeAggregationDuration).
    pub fn build(self) -> crate::types::RelativeAggregationDuration {
        crate::types::RelativeAggregationDuration {
            time_dimension: self.time_dimension,
            time_value: self.time_value.unwrap_or_default(),
        }
    }
}
