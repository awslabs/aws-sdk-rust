// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The selected data source to filter the conversation log.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConversationLogsDataSourceFilterBy {
    /// <p>The start time for the conversation log.</p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p>The end time for the conversation log.</p>
    pub end_time: ::aws_smithy_types::DateTime,
    /// <p>The selection to filter by input mode for the conversation logs. </p>
    pub input_mode: crate::types::ConversationLogsInputModeFilter,
}
impl ConversationLogsDataSourceFilterBy {
    /// <p>The start time for the conversation log.</p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p>The end time for the conversation log.</p>
    pub fn end_time(&self) -> &::aws_smithy_types::DateTime {
        &self.end_time
    }
    /// <p>The selection to filter by input mode for the conversation logs. </p>
    pub fn input_mode(&self) -> &crate::types::ConversationLogsInputModeFilter {
        &self.input_mode
    }
}
impl ConversationLogsDataSourceFilterBy {
    /// Creates a new builder-style object to manufacture [`ConversationLogsDataSourceFilterBy`](crate::types::ConversationLogsDataSourceFilterBy).
    pub fn builder() -> crate::types::builders::ConversationLogsDataSourceFilterByBuilder {
        crate::types::builders::ConversationLogsDataSourceFilterByBuilder::default()
    }
}

/// A builder for [`ConversationLogsDataSourceFilterBy`](crate::types::ConversationLogsDataSourceFilterBy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConversationLogsDataSourceFilterByBuilder {
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) input_mode: ::std::option::Option<crate::types::ConversationLogsInputModeFilter>,
}
impl ConversationLogsDataSourceFilterByBuilder {
    /// <p>The start time for the conversation log.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time for the conversation log.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time for the conversation log.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end time for the conversation log.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time for the conversation log.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time for the conversation log.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The selection to filter by input mode for the conversation logs. </p>
    /// This field is required.
    pub fn input_mode(mut self, input: crate::types::ConversationLogsInputModeFilter) -> Self {
        self.input_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The selection to filter by input mode for the conversation logs. </p>
    pub fn set_input_mode(mut self, input: ::std::option::Option<crate::types::ConversationLogsInputModeFilter>) -> Self {
        self.input_mode = input;
        self
    }
    /// <p>The selection to filter by input mode for the conversation logs. </p>
    pub fn get_input_mode(&self) -> &::std::option::Option<crate::types::ConversationLogsInputModeFilter> {
        &self.input_mode
    }
    /// Consumes the builder and constructs a [`ConversationLogsDataSourceFilterBy`](crate::types::ConversationLogsDataSourceFilterBy).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_time`](crate::types::builders::ConversationLogsDataSourceFilterByBuilder::start_time)
    /// - [`end_time`](crate::types::builders::ConversationLogsDataSourceFilterByBuilder::end_time)
    /// - [`input_mode`](crate::types::builders::ConversationLogsDataSourceFilterByBuilder::input_mode)
    pub fn build(self) -> ::std::result::Result<crate::types::ConversationLogsDataSourceFilterBy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConversationLogsDataSourceFilterBy {
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building ConversationLogsDataSourceFilterBy",
                )
            })?,
            end_time: self.end_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_time",
                    "end_time was not specified but it is required when building ConversationLogsDataSourceFilterBy",
                )
            })?,
            input_mode: self.input_mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "input_mode",
                    "input_mode was not specified but it is required when building ConversationLogsDataSourceFilterBy",
                )
            })?,
        })
    }
}
