// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the overall results for a test execution result.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OverallTestResultItem {
    /// <p>Indicates whether the conversation contains multiple turns or not.</p>
    pub multi_turn_conversation: bool,
    /// <p>The total number of overall results in the result of the test execution.</p>
    pub total_result_count: i32,
    /// <p>The number of speech transcription results in the overall test.</p>
    pub speech_transcription_result_counts: ::std::option::Option<::std::collections::HashMap<crate::types::TestResultMatchStatus, i32>>,
    /// <p>The number of results that succeeded.</p>
    pub end_to_end_result_counts: ::std::collections::HashMap<crate::types::TestResultMatchStatus, i32>,
}
impl OverallTestResultItem {
    /// <p>Indicates whether the conversation contains multiple turns or not.</p>
    pub fn multi_turn_conversation(&self) -> bool {
        self.multi_turn_conversation
    }
    /// <p>The total number of overall results in the result of the test execution.</p>
    pub fn total_result_count(&self) -> i32 {
        self.total_result_count
    }
    /// <p>The number of speech transcription results in the overall test.</p>
    pub fn speech_transcription_result_counts(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<crate::types::TestResultMatchStatus, i32>> {
        self.speech_transcription_result_counts.as_ref()
    }
    /// <p>The number of results that succeeded.</p>
    pub fn end_to_end_result_counts(&self) -> &::std::collections::HashMap<crate::types::TestResultMatchStatus, i32> {
        &self.end_to_end_result_counts
    }
}
impl OverallTestResultItem {
    /// Creates a new builder-style object to manufacture [`OverallTestResultItem`](crate::types::OverallTestResultItem).
    pub fn builder() -> crate::types::builders::OverallTestResultItemBuilder {
        crate::types::builders::OverallTestResultItemBuilder::default()
    }
}

/// A builder for [`OverallTestResultItem`](crate::types::OverallTestResultItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OverallTestResultItemBuilder {
    pub(crate) multi_turn_conversation: ::std::option::Option<bool>,
    pub(crate) total_result_count: ::std::option::Option<i32>,
    pub(crate) speech_transcription_result_counts: ::std::option::Option<::std::collections::HashMap<crate::types::TestResultMatchStatus, i32>>,
    pub(crate) end_to_end_result_counts: ::std::option::Option<::std::collections::HashMap<crate::types::TestResultMatchStatus, i32>>,
}
impl OverallTestResultItemBuilder {
    /// <p>Indicates whether the conversation contains multiple turns or not.</p>
    /// This field is required.
    pub fn multi_turn_conversation(mut self, input: bool) -> Self {
        self.multi_turn_conversation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the conversation contains multiple turns or not.</p>
    pub fn set_multi_turn_conversation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.multi_turn_conversation = input;
        self
    }
    /// <p>Indicates whether the conversation contains multiple turns or not.</p>
    pub fn get_multi_turn_conversation(&self) -> &::std::option::Option<bool> {
        &self.multi_turn_conversation
    }
    /// <p>The total number of overall results in the result of the test execution.</p>
    /// This field is required.
    pub fn total_result_count(mut self, input: i32) -> Self {
        self.total_result_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of overall results in the result of the test execution.</p>
    pub fn set_total_result_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_result_count = input;
        self
    }
    /// <p>The total number of overall results in the result of the test execution.</p>
    pub fn get_total_result_count(&self) -> &::std::option::Option<i32> {
        &self.total_result_count
    }
    /// Adds a key-value pair to `speech_transcription_result_counts`.
    ///
    /// To override the contents of this collection use [`set_speech_transcription_result_counts`](Self::set_speech_transcription_result_counts).
    ///
    /// <p>The number of speech transcription results in the overall test.</p>
    pub fn speech_transcription_result_counts(mut self, k: crate::types::TestResultMatchStatus, v: i32) -> Self {
        let mut hash_map = self.speech_transcription_result_counts.unwrap_or_default();
        hash_map.insert(k, v);
        self.speech_transcription_result_counts = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The number of speech transcription results in the overall test.</p>
    pub fn set_speech_transcription_result_counts(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::TestResultMatchStatus, i32>>,
    ) -> Self {
        self.speech_transcription_result_counts = input;
        self
    }
    /// <p>The number of speech transcription results in the overall test.</p>
    pub fn get_speech_transcription_result_counts(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::TestResultMatchStatus, i32>> {
        &self.speech_transcription_result_counts
    }
    /// Adds a key-value pair to `end_to_end_result_counts`.
    ///
    /// To override the contents of this collection use [`set_end_to_end_result_counts`](Self::set_end_to_end_result_counts).
    ///
    /// <p>The number of results that succeeded.</p>
    pub fn end_to_end_result_counts(mut self, k: crate::types::TestResultMatchStatus, v: i32) -> Self {
        let mut hash_map = self.end_to_end_result_counts.unwrap_or_default();
        hash_map.insert(k, v);
        self.end_to_end_result_counts = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The number of results that succeeded.</p>
    pub fn set_end_to_end_result_counts(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::TestResultMatchStatus, i32>>,
    ) -> Self {
        self.end_to_end_result_counts = input;
        self
    }
    /// <p>The number of results that succeeded.</p>
    pub fn get_end_to_end_result_counts(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::TestResultMatchStatus, i32>> {
        &self.end_to_end_result_counts
    }
    /// Consumes the builder and constructs a [`OverallTestResultItem`](crate::types::OverallTestResultItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`total_result_count`](crate::types::builders::OverallTestResultItemBuilder::total_result_count)
    /// - [`end_to_end_result_counts`](crate::types::builders::OverallTestResultItemBuilder::end_to_end_result_counts)
    pub fn build(self) -> ::std::result::Result<crate::types::OverallTestResultItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OverallTestResultItem {
            multi_turn_conversation: self.multi_turn_conversation.unwrap_or_default(),
            total_result_count: self.total_result_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "total_result_count",
                    "total_result_count was not specified but it is required when building OverallTestResultItem",
                )
            })?,
            speech_transcription_result_counts: self.speech_transcription_result_counts,
            end_to_end_result_counts: self.end_to_end_result_counts.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_to_end_result_counts",
                    "end_to_end_result_counts was not specified but it is required when building OverallTestResultItem",
                )
            })?,
        })
    }
}
