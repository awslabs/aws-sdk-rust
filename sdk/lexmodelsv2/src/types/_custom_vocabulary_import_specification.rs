// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the parameters required for importing a custom vocabulary.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomVocabularyImportSpecification {
    /// <p>The identifier of the bot to import the custom vocabulary to.</p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>The version of the bot to import the custom vocabulary to.</p>
    #[doc(hidden)]
    pub bot_version: std::option::Option<std::string::String>,
    /// <p>The identifier of the local to import the custom vocabulary to. The value must be <code>en_GB</code>.</p>
    #[doc(hidden)]
    pub locale_id: std::option::Option<std::string::String>,
}
impl CustomVocabularyImportSpecification {
    /// <p>The identifier of the bot to import the custom vocabulary to.</p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The version of the bot to import the custom vocabulary to.</p>
    pub fn bot_version(&self) -> std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The identifier of the local to import the custom vocabulary to. The value must be <code>en_GB</code>.</p>
    pub fn locale_id(&self) -> std::option::Option<&str> {
        self.locale_id.as_deref()
    }
}
impl CustomVocabularyImportSpecification {
    /// Creates a new builder-style object to manufacture [`CustomVocabularyImportSpecification`](crate::types::CustomVocabularyImportSpecification).
    pub fn builder() -> crate::types::builders::CustomVocabularyImportSpecificationBuilder {
        crate::types::builders::CustomVocabularyImportSpecificationBuilder::default()
    }
}

/// A builder for [`CustomVocabularyImportSpecification`](crate::types::CustomVocabularyImportSpecification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomVocabularyImportSpecificationBuilder {
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) bot_version: std::option::Option<std::string::String>,
    pub(crate) locale_id: std::option::Option<std::string::String>,
}
impl CustomVocabularyImportSpecificationBuilder {
    /// <p>The identifier of the bot to import the custom vocabulary to.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The identifier of the bot to import the custom vocabulary to.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The version of the bot to import the custom vocabulary to.</p>
    pub fn bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_version = Some(input.into());
        self
    }
    /// <p>The version of the bot to import the custom vocabulary to.</p>
    pub fn set_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The identifier of the local to import the custom vocabulary to. The value must be <code>en_GB</code>.</p>
    pub fn locale_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.locale_id = Some(input.into());
        self
    }
    /// <p>The identifier of the local to import the custom vocabulary to. The value must be <code>en_GB</code>.</p>
    pub fn set_locale_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomVocabularyImportSpecification`](crate::types::CustomVocabularyImportSpecification).
    pub fn build(self) -> crate::types::CustomVocabularyImportSpecification {
        crate::types::CustomVocabularyImportSpecification {
            bot_id: self.bot_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
        }
    }
}
