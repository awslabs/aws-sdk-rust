// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the parameters required for importing a custom vocabulary.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomVocabularyImportSpecification {
    /// <p>The identifier of the bot to import the custom vocabulary to.</p>
    pub bot_id: ::std::string::String,
    /// <p>The version of the bot to import the custom vocabulary to.</p>
    pub bot_version: ::std::string::String,
    /// <p>The identifier of the local to import the custom vocabulary to. The value must be <code>en_GB</code>.</p>
    pub locale_id: ::std::string::String,
}
impl CustomVocabularyImportSpecification {
    /// <p>The identifier of the bot to import the custom vocabulary to.</p>
    pub fn bot_id(&self) -> &str {
        use std::ops::Deref;
        self.bot_id.deref()
    }
    /// <p>The version of the bot to import the custom vocabulary to.</p>
    pub fn bot_version(&self) -> &str {
        use std::ops::Deref;
        self.bot_version.deref()
    }
    /// <p>The identifier of the local to import the custom vocabulary to. The value must be <code>en_GB</code>.</p>
    pub fn locale_id(&self) -> &str {
        use std::ops::Deref;
        self.locale_id.deref()
    }
}
impl CustomVocabularyImportSpecification {
    /// Creates a new builder-style object to manufacture [`CustomVocabularyImportSpecification`](crate::types::CustomVocabularyImportSpecification).
    pub fn builder() -> crate::types::builders::CustomVocabularyImportSpecificationBuilder {
        crate::types::builders::CustomVocabularyImportSpecificationBuilder::default()
    }
}

/// A builder for [`CustomVocabularyImportSpecification`](crate::types::CustomVocabularyImportSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomVocabularyImportSpecificationBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_version: ::std::option::Option<::std::string::String>,
    pub(crate) locale_id: ::std::option::Option<::std::string::String>,
}
impl CustomVocabularyImportSpecificationBuilder {
    /// <p>The identifier of the bot to import the custom vocabulary to.</p>
    /// This field is required.
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bot to import the custom vocabulary to.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The identifier of the bot to import the custom vocabulary to.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The version of the bot to import the custom vocabulary to.</p>
    /// This field is required.
    pub fn bot_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the bot to import the custom vocabulary to.</p>
    pub fn set_bot_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The version of the bot to import the custom vocabulary to.</p>
    pub fn get_bot_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_version
    }
    /// <p>The identifier of the local to import the custom vocabulary to. The value must be <code>en_GB</code>.</p>
    /// This field is required.
    pub fn locale_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the local to import the custom vocabulary to. The value must be <code>en_GB</code>.</p>
    pub fn set_locale_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The identifier of the local to import the custom vocabulary to. The value must be <code>en_GB</code>.</p>
    pub fn get_locale_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale_id
    }
    /// Consumes the builder and constructs a [`CustomVocabularyImportSpecification`](crate::types::CustomVocabularyImportSpecification).
    /// This method will fail if any of the following fields are not set:
    /// - [`bot_id`](crate::types::builders::CustomVocabularyImportSpecificationBuilder::bot_id)
    /// - [`bot_version`](crate::types::builders::CustomVocabularyImportSpecificationBuilder::bot_version)
    /// - [`locale_id`](crate::types::builders::CustomVocabularyImportSpecificationBuilder::locale_id)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomVocabularyImportSpecification, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomVocabularyImportSpecification {
            bot_id: self.bot_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bot_id",
                    "bot_id was not specified but it is required when building CustomVocabularyImportSpecification",
                )
            })?,
            bot_version: self.bot_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bot_version",
                    "bot_version was not specified but it is required when building CustomVocabularyImportSpecification",
                )
            })?,
            locale_id: self.locale_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "locale_id",
                    "locale_id was not specified but it is required when building CustomVocabularyImportSpecification",
                )
            })?,
        })
    }
}
