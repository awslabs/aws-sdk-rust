// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains fields describing a condition by which to filter the intent stages. The expression may be understood as <code>name</code> <code>operator</code> <code>values</code>. For example:</p>
/// <ul>
/// <li> <p> <code>IntentName CO Book</code> – The intent name contains the string "Book."</p> </li>
/// <li> <p> <code>BotVersion EQ 2</code> – The bot version is equal to two.</p> </li>
/// </ul>
/// <p>The operators that each filter supports are listed below:</p>
/// <ul>
/// <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li>
/// <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li>
/// <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li>
/// <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li>
/// <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li>
/// <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li>
/// <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li>
/// <li> <p> <code>IntentName</code> – <code>EQ</code>, <code>CO</code>.</p> </li>
/// <li> <p> <code>IntentStageName</code> – <code>EQ</code>, <code>CO</code>.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsIntentStageFilter {
    /// <p>The category by which to filter the intent stages. The descriptions for each option are as follows:</p>
    /// <ul>
    /// <li> <p> <code>BotAlias</code> – The name of the bot alias.</p> </li>
    /// <li> <p> <code>BotVersion</code> – The version of the bot.</p> </li>
    /// <li> <p> <code>LocaleId</code> – The locale of the bot.</p> </li>
    /// <li> <p> <code>Modality</code> – The modality of the session with the bot (audio, DTMF, or text).</p> </li>
    /// <li> <p> <code>Channel</code> – The channel that the bot is integrated with.</p> </li>
    /// <li> <p> <code>SessionId</code> – The identifier of the session with the bot.</p> </li>
    /// <li> <p> <code>OriginatingRequestId</code> – The identifier of the first request in a session.</p> </li>
    /// <li> <p> <code>IntentName</code> – The name of the intent.</p> </li>
    /// <li> <p> <code>IntentStageName</code> – The stage in the intent.</p> </li>
    /// </ul>
    pub name: crate::types::AnalyticsIntentStageFilterName,
    /// <p>The operation by which to filter the category. The following operations are possible:</p>
    /// <ul>
    /// <li> <p> <code>CO</code> – Contains</p> </li>
    /// <li> <p> <code>EQ</code> – Equals</p> </li>
    /// <li> <p> <code>GT</code> – Greater than</p> </li>
    /// <li> <p> <code>LT</code> – Less than</p> </li>
    /// </ul>
    /// <p>The operators that each filter supports are listed below:</p>
    /// <ul>
    /// <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>IntentName</code> – <code>EQ</code>, <code>CO</code>.</p> </li>
    /// <li> <p> <code>IntentStageName</code> – <code>EQ</code>, <code>CO</code>.</p> </li>
    /// </ul>
    pub operator: crate::types::AnalyticsFilterOperator,
    /// <p>An array containing the values of the category by which to apply the operator to filter the results. You can provide multiple values if the operator is <code>EQ</code> or <code>CO</code>. If you provide multiple values, you filter for results that equal/contain any of the values. For example, if the <code>name</code>, <code>operator</code>, and <code>values</code> fields are <code>Modality</code>, <code>EQ</code>, and <code>[Speech, Text]</code>, the operation filters for results where the modality was either <code>Speech</code> or <code>Text</code>.</p>
    pub values: ::std::vec::Vec<::std::string::String>,
}
impl AnalyticsIntentStageFilter {
    /// <p>The category by which to filter the intent stages. The descriptions for each option are as follows:</p>
    /// <ul>
    /// <li> <p> <code>BotAlias</code> – The name of the bot alias.</p> </li>
    /// <li> <p> <code>BotVersion</code> – The version of the bot.</p> </li>
    /// <li> <p> <code>LocaleId</code> – The locale of the bot.</p> </li>
    /// <li> <p> <code>Modality</code> – The modality of the session with the bot (audio, DTMF, or text).</p> </li>
    /// <li> <p> <code>Channel</code> – The channel that the bot is integrated with.</p> </li>
    /// <li> <p> <code>SessionId</code> – The identifier of the session with the bot.</p> </li>
    /// <li> <p> <code>OriginatingRequestId</code> – The identifier of the first request in a session.</p> </li>
    /// <li> <p> <code>IntentName</code> – The name of the intent.</p> </li>
    /// <li> <p> <code>IntentStageName</code> – The stage in the intent.</p> </li>
    /// </ul>
    pub fn name(&self) -> &crate::types::AnalyticsIntentStageFilterName {
        &self.name
    }
    /// <p>The operation by which to filter the category. The following operations are possible:</p>
    /// <ul>
    /// <li> <p> <code>CO</code> – Contains</p> </li>
    /// <li> <p> <code>EQ</code> – Equals</p> </li>
    /// <li> <p> <code>GT</code> – Greater than</p> </li>
    /// <li> <p> <code>LT</code> – Less than</p> </li>
    /// </ul>
    /// <p>The operators that each filter supports are listed below:</p>
    /// <ul>
    /// <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>IntentName</code> – <code>EQ</code>, <code>CO</code>.</p> </li>
    /// <li> <p> <code>IntentStageName</code> – <code>EQ</code>, <code>CO</code>.</p> </li>
    /// </ul>
    pub fn operator(&self) -> &crate::types::AnalyticsFilterOperator {
        &self.operator
    }
    /// <p>An array containing the values of the category by which to apply the operator to filter the results. You can provide multiple values if the operator is <code>EQ</code> or <code>CO</code>. If you provide multiple values, you filter for results that equal/contain any of the values. For example, if the <code>name</code>, <code>operator</code>, and <code>values</code> fields are <code>Modality</code>, <code>EQ</code>, and <code>[Speech, Text]</code>, the operation filters for results where the modality was either <code>Speech</code> or <code>Text</code>.</p>
    pub fn values(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.values.deref()
    }
}
impl AnalyticsIntentStageFilter {
    /// Creates a new builder-style object to manufacture [`AnalyticsIntentStageFilter`](crate::types::AnalyticsIntentStageFilter).
    pub fn builder() -> crate::types::builders::AnalyticsIntentStageFilterBuilder {
        crate::types::builders::AnalyticsIntentStageFilterBuilder::default()
    }
}

/// A builder for [`AnalyticsIntentStageFilter`](crate::types::AnalyticsIntentStageFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnalyticsIntentStageFilterBuilder {
    pub(crate) name: ::std::option::Option<crate::types::AnalyticsIntentStageFilterName>,
    pub(crate) operator: ::std::option::Option<crate::types::AnalyticsFilterOperator>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AnalyticsIntentStageFilterBuilder {
    /// <p>The category by which to filter the intent stages. The descriptions for each option are as follows:</p>
    /// <ul>
    /// <li> <p> <code>BotAlias</code> – The name of the bot alias.</p> </li>
    /// <li> <p> <code>BotVersion</code> – The version of the bot.</p> </li>
    /// <li> <p> <code>LocaleId</code> – The locale of the bot.</p> </li>
    /// <li> <p> <code>Modality</code> – The modality of the session with the bot (audio, DTMF, or text).</p> </li>
    /// <li> <p> <code>Channel</code> – The channel that the bot is integrated with.</p> </li>
    /// <li> <p> <code>SessionId</code> – The identifier of the session with the bot.</p> </li>
    /// <li> <p> <code>OriginatingRequestId</code> – The identifier of the first request in a session.</p> </li>
    /// <li> <p> <code>IntentName</code> – The name of the intent.</p> </li>
    /// <li> <p> <code>IntentStageName</code> – The stage in the intent.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn name(mut self, input: crate::types::AnalyticsIntentStageFilterName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The category by which to filter the intent stages. The descriptions for each option are as follows:</p>
    /// <ul>
    /// <li> <p> <code>BotAlias</code> – The name of the bot alias.</p> </li>
    /// <li> <p> <code>BotVersion</code> – The version of the bot.</p> </li>
    /// <li> <p> <code>LocaleId</code> – The locale of the bot.</p> </li>
    /// <li> <p> <code>Modality</code> – The modality of the session with the bot (audio, DTMF, or text).</p> </li>
    /// <li> <p> <code>Channel</code> – The channel that the bot is integrated with.</p> </li>
    /// <li> <p> <code>SessionId</code> – The identifier of the session with the bot.</p> </li>
    /// <li> <p> <code>OriginatingRequestId</code> – The identifier of the first request in a session.</p> </li>
    /// <li> <p> <code>IntentName</code> – The name of the intent.</p> </li>
    /// <li> <p> <code>IntentStageName</code> – The stage in the intent.</p> </li>
    /// </ul>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AnalyticsIntentStageFilterName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The category by which to filter the intent stages. The descriptions for each option are as follows:</p>
    /// <ul>
    /// <li> <p> <code>BotAlias</code> – The name of the bot alias.</p> </li>
    /// <li> <p> <code>BotVersion</code> – The version of the bot.</p> </li>
    /// <li> <p> <code>LocaleId</code> – The locale of the bot.</p> </li>
    /// <li> <p> <code>Modality</code> – The modality of the session with the bot (audio, DTMF, or text).</p> </li>
    /// <li> <p> <code>Channel</code> – The channel that the bot is integrated with.</p> </li>
    /// <li> <p> <code>SessionId</code> – The identifier of the session with the bot.</p> </li>
    /// <li> <p> <code>OriginatingRequestId</code> – The identifier of the first request in a session.</p> </li>
    /// <li> <p> <code>IntentName</code> – The name of the intent.</p> </li>
    /// <li> <p> <code>IntentStageName</code> – The stage in the intent.</p> </li>
    /// </ul>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AnalyticsIntentStageFilterName> {
        &self.name
    }
    /// <p>The operation by which to filter the category. The following operations are possible:</p>
    /// <ul>
    /// <li> <p> <code>CO</code> – Contains</p> </li>
    /// <li> <p> <code>EQ</code> – Equals</p> </li>
    /// <li> <p> <code>GT</code> – Greater than</p> </li>
    /// <li> <p> <code>LT</code> – Less than</p> </li>
    /// </ul>
    /// <p>The operators that each filter supports are listed below:</p>
    /// <ul>
    /// <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>IntentName</code> – <code>EQ</code>, <code>CO</code>.</p> </li>
    /// <li> <p> <code>IntentStageName</code> – <code>EQ</code>, <code>CO</code>.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::AnalyticsFilterOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operation by which to filter the category. The following operations are possible:</p>
    /// <ul>
    /// <li> <p> <code>CO</code> – Contains</p> </li>
    /// <li> <p> <code>EQ</code> – Equals</p> </li>
    /// <li> <p> <code>GT</code> – Greater than</p> </li>
    /// <li> <p> <code>LT</code> – Less than</p> </li>
    /// </ul>
    /// <p>The operators that each filter supports are listed below:</p>
    /// <ul>
    /// <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>IntentName</code> – <code>EQ</code>, <code>CO</code>.</p> </li>
    /// <li> <p> <code>IntentStageName</code> – <code>EQ</code>, <code>CO</code>.</p> </li>
    /// </ul>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::AnalyticsFilterOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The operation by which to filter the category. The following operations are possible:</p>
    /// <ul>
    /// <li> <p> <code>CO</code> – Contains</p> </li>
    /// <li> <p> <code>EQ</code> – Equals</p> </li>
    /// <li> <p> <code>GT</code> – Greater than</p> </li>
    /// <li> <p> <code>LT</code> – Less than</p> </li>
    /// </ul>
    /// <p>The operators that each filter supports are listed below:</p>
    /// <ul>
    /// <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li>
    /// <li> <p> <code>IntentName</code> – <code>EQ</code>, <code>CO</code>.</p> </li>
    /// <li> <p> <code>IntentStageName</code> – <code>EQ</code>, <code>CO</code>.</p> </li>
    /// </ul>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::AnalyticsFilterOperator> {
        &self.operator
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>An array containing the values of the category by which to apply the operator to filter the results. You can provide multiple values if the operator is <code>EQ</code> or <code>CO</code>. If you provide multiple values, you filter for results that equal/contain any of the values. For example, if the <code>name</code>, <code>operator</code>, and <code>values</code> fields are <code>Modality</code>, <code>EQ</code>, and <code>[Speech, Text]</code>, the operation filters for results where the modality was either <code>Speech</code> or <code>Text</code>.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array containing the values of the category by which to apply the operator to filter the results. You can provide multiple values if the operator is <code>EQ</code> or <code>CO</code>. If you provide multiple values, you filter for results that equal/contain any of the values. For example, if the <code>name</code>, <code>operator</code>, and <code>values</code> fields are <code>Modality</code>, <code>EQ</code>, and <code>[Speech, Text]</code>, the operation filters for results where the modality was either <code>Speech</code> or <code>Text</code>.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>An array containing the values of the category by which to apply the operator to filter the results. You can provide multiple values if the operator is <code>EQ</code> or <code>CO</code>. If you provide multiple values, you filter for results that equal/contain any of the values. For example, if the <code>name</code>, <code>operator</code>, and <code>values</code> fields are <code>Modality</code>, <code>EQ</code>, and <code>[Speech, Text]</code>, the operation filters for results where the modality was either <code>Speech</code> or <code>Text</code>.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`AnalyticsIntentStageFilter`](crate::types::AnalyticsIntentStageFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AnalyticsIntentStageFilterBuilder::name)
    /// - [`operator`](crate::types::builders::AnalyticsIntentStageFilterBuilder::operator)
    /// - [`values`](crate::types::builders::AnalyticsIntentStageFilterBuilder::values)
    pub fn build(self) -> ::std::result::Result<crate::types::AnalyticsIntentStageFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnalyticsIntentStageFilter {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AnalyticsIntentStageFilter",
                )
            })?,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building AnalyticsIntentStageFilter",
                )
            })?,
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building AnalyticsIntentStageFilter",
                )
            })?,
        })
    }
}
