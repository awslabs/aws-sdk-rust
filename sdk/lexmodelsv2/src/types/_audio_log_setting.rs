// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for logging audio of conversations between Amazon Lex and a user. You specify whether to log audio and the Amazon S3 bucket where the audio file is stored.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AudioLogSetting {
    /// <p>Determines whether audio logging in enabled for the bot.</p>
    #[doc(hidden)]
    pub enabled: bool,
    /// <p>The location of audio log files collected when conversation logging is enabled for a bot.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<crate::types::AudioLogDestination>,
}
impl AudioLogSetting {
    /// <p>Determines whether audio logging in enabled for the bot.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The location of audio log files collected when conversation logging is enabled for a bot.</p>
    pub fn destination(&self) -> std::option::Option<&crate::types::AudioLogDestination> {
        self.destination.as_ref()
    }
}
impl AudioLogSetting {
    /// Creates a new builder-style object to manufacture [`AudioLogSetting`](crate::types::AudioLogSetting).
    pub fn builder() -> crate::types::builders::AudioLogSettingBuilder {
        crate::types::builders::AudioLogSettingBuilder::default()
    }
}

/// A builder for [`AudioLogSetting`](crate::types::AudioLogSetting).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AudioLogSettingBuilder {
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) destination: std::option::Option<crate::types::AudioLogDestination>,
}
impl AudioLogSettingBuilder {
    /// <p>Determines whether audio logging in enabled for the bot.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Determines whether audio logging in enabled for the bot.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The location of audio log files collected when conversation logging is enabled for a bot.</p>
    pub fn destination(mut self, input: crate::types::AudioLogDestination) -> Self {
        self.destination = Some(input);
        self
    }
    /// <p>The location of audio log files collected when conversation logging is enabled for a bot.</p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::AudioLogDestination>,
    ) -> Self {
        self.destination = input;
        self
    }
    /// Consumes the builder and constructs a [`AudioLogSetting`](crate::types::AudioLogSetting).
    pub fn build(self) -> crate::types::AudioLogSetting {
        crate::types::AudioLogSetting {
            enabled: self.enabled.unwrap_or_default(),
            destination: self.destination,
        }
    }
}
