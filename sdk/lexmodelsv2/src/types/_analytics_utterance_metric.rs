// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the metric and the summary statistic you want to calculate, and the order in which to sort the results, for the utterances across the user sessions with the bot.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsUtteranceMetric {
    /// <p>The metric for which you want to get utterance summary statistics.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of utterances.</p> </li>
    /// <li> <p> <code>Missed</code> – The number of utterances that Amazon Lex failed to recognize.</p> </li>
    /// <li> <p> <code>Detected</code> – The number of utterances that Amazon Lex managed to detect.</p> </li>
    /// <li> <p> <code>UtteranceTimestamp</code> – The date and time of the utterance.</p> </li>
    /// </ul>
    pub name: crate::types::AnalyticsUtteranceMetricName,
    /// <p>The summary statistic to calculate.</p>
    /// <ul>
    /// <li> <p> <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Average</code> – The total count divided by the number of utterances in the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Max</code> – The highest count in the category you provide in <code>name</code>.</p> </li>
    /// </ul>
    pub statistic: crate::types::AnalyticsMetricStatistic,
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub order: ::std::option::Option<crate::types::AnalyticsSortOrder>,
}
impl AnalyticsUtteranceMetric {
    /// <p>The metric for which you want to get utterance summary statistics.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of utterances.</p> </li>
    /// <li> <p> <code>Missed</code> – The number of utterances that Amazon Lex failed to recognize.</p> </li>
    /// <li> <p> <code>Detected</code> – The number of utterances that Amazon Lex managed to detect.</p> </li>
    /// <li> <p> <code>UtteranceTimestamp</code> – The date and time of the utterance.</p> </li>
    /// </ul>
    pub fn name(&self) -> &crate::types::AnalyticsUtteranceMetricName {
        &self.name
    }
    /// <p>The summary statistic to calculate.</p>
    /// <ul>
    /// <li> <p> <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Average</code> – The total count divided by the number of utterances in the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Max</code> – The highest count in the category you provide in <code>name</code>.</p> </li>
    /// </ul>
    pub fn statistic(&self) -> &crate::types::AnalyticsMetricStatistic {
        &self.statistic
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn order(&self) -> ::std::option::Option<&crate::types::AnalyticsSortOrder> {
        self.order.as_ref()
    }
}
impl AnalyticsUtteranceMetric {
    /// Creates a new builder-style object to manufacture [`AnalyticsUtteranceMetric`](crate::types::AnalyticsUtteranceMetric).
    pub fn builder() -> crate::types::builders::AnalyticsUtteranceMetricBuilder {
        crate::types::builders::AnalyticsUtteranceMetricBuilder::default()
    }
}

/// A builder for [`AnalyticsUtteranceMetric`](crate::types::AnalyticsUtteranceMetric).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnalyticsUtteranceMetricBuilder {
    pub(crate) name: ::std::option::Option<crate::types::AnalyticsUtteranceMetricName>,
    pub(crate) statistic: ::std::option::Option<crate::types::AnalyticsMetricStatistic>,
    pub(crate) order: ::std::option::Option<crate::types::AnalyticsSortOrder>,
}
impl AnalyticsUtteranceMetricBuilder {
    /// <p>The metric for which you want to get utterance summary statistics.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of utterances.</p> </li>
    /// <li> <p> <code>Missed</code> – The number of utterances that Amazon Lex failed to recognize.</p> </li>
    /// <li> <p> <code>Detected</code> – The number of utterances that Amazon Lex managed to detect.</p> </li>
    /// <li> <p> <code>UtteranceTimestamp</code> – The date and time of the utterance.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn name(mut self, input: crate::types::AnalyticsUtteranceMetricName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metric for which you want to get utterance summary statistics.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of utterances.</p> </li>
    /// <li> <p> <code>Missed</code> – The number of utterances that Amazon Lex failed to recognize.</p> </li>
    /// <li> <p> <code>Detected</code> – The number of utterances that Amazon Lex managed to detect.</p> </li>
    /// <li> <p> <code>UtteranceTimestamp</code> – The date and time of the utterance.</p> </li>
    /// </ul>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AnalyticsUtteranceMetricName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The metric for which you want to get utterance summary statistics.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of utterances.</p> </li>
    /// <li> <p> <code>Missed</code> – The number of utterances that Amazon Lex failed to recognize.</p> </li>
    /// <li> <p> <code>Detected</code> – The number of utterances that Amazon Lex managed to detect.</p> </li>
    /// <li> <p> <code>UtteranceTimestamp</code> – The date and time of the utterance.</p> </li>
    /// </ul>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AnalyticsUtteranceMetricName> {
        &self.name
    }
    /// <p>The summary statistic to calculate.</p>
    /// <ul>
    /// <li> <p> <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Average</code> – The total count divided by the number of utterances in the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Max</code> – The highest count in the category you provide in <code>name</code>.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn statistic(mut self, input: crate::types::AnalyticsMetricStatistic) -> Self {
        self.statistic = ::std::option::Option::Some(input);
        self
    }
    /// <p>The summary statistic to calculate.</p>
    /// <ul>
    /// <li> <p> <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Average</code> – The total count divided by the number of utterances in the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Max</code> – The highest count in the category you provide in <code>name</code>.</p> </li>
    /// </ul>
    pub fn set_statistic(mut self, input: ::std::option::Option<crate::types::AnalyticsMetricStatistic>) -> Self {
        self.statistic = input;
        self
    }
    /// <p>The summary statistic to calculate.</p>
    /// <ul>
    /// <li> <p> <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Average</code> – The total count divided by the number of utterances in the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Max</code> – The highest count in the category you provide in <code>name</code>.</p> </li>
    /// </ul>
    pub fn get_statistic(&self) -> &::std::option::Option<crate::types::AnalyticsMetricStatistic> {
        &self.statistic
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn order(mut self, input: crate::types::AnalyticsSortOrder) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::AnalyticsSortOrder>) -> Self {
        self.order = input;
        self
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn get_order(&self) -> &::std::option::Option<crate::types::AnalyticsSortOrder> {
        &self.order
    }
    /// Consumes the builder and constructs a [`AnalyticsUtteranceMetric`](crate::types::AnalyticsUtteranceMetric).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AnalyticsUtteranceMetricBuilder::name)
    /// - [`statistic`](crate::types::builders::AnalyticsUtteranceMetricBuilder::statistic)
    pub fn build(self) -> ::std::result::Result<crate::types::AnalyticsUtteranceMetric, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnalyticsUtteranceMetric {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AnalyticsUtteranceMetric",
                )
            })?,
            statistic: self.statistic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "statistic",
                    "statistic was not specified but it is required when building AnalyticsUtteranceMetric",
                )
            })?,
            order: self.order,
        })
    }
}
