// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Subslot type composition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SubSlotTypeComposition {
    /// <p>Name of a constituent sub slot inside a composite slot.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The unique identifier assigned to a slot type. This refers to either a built-in slot type or the unique slotTypeId of a custom slot type.</p>
    #[doc(hidden)]
    pub slot_type_id: std::option::Option<std::string::String>,
}
impl SubSlotTypeComposition {
    /// <p>Name of a constituent sub slot inside a composite slot.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The unique identifier assigned to a slot type. This refers to either a built-in slot type or the unique slotTypeId of a custom slot type.</p>
    pub fn slot_type_id(&self) -> std::option::Option<&str> {
        self.slot_type_id.as_deref()
    }
}
impl SubSlotTypeComposition {
    /// Creates a new builder-style object to manufacture [`SubSlotTypeComposition`](crate::types::SubSlotTypeComposition).
    pub fn builder() -> crate::types::builders::SubSlotTypeCompositionBuilder {
        crate::types::builders::SubSlotTypeCompositionBuilder::default()
    }
}

/// A builder for [`SubSlotTypeComposition`](crate::types::SubSlotTypeComposition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubSlotTypeCompositionBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) slot_type_id: std::option::Option<std::string::String>,
}
impl SubSlotTypeCompositionBuilder {
    /// <p>Name of a constituent sub slot inside a composite slot.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Name of a constituent sub slot inside a composite slot.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The unique identifier assigned to a slot type. This refers to either a built-in slot type or the unique slotTypeId of a custom slot type.</p>
    pub fn slot_type_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.slot_type_id = Some(input.into());
        self
    }
    /// <p>The unique identifier assigned to a slot type. This refers to either a built-in slot type or the unique slotTypeId of a custom slot type.</p>
    pub fn set_slot_type_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.slot_type_id = input;
        self
    }
    /// Consumes the builder and constructs a [`SubSlotTypeComposition`](crate::types::SubSlotTypeComposition).
    pub fn build(self) -> crate::types::SubSlotTypeComposition {
        crate::types::SubSlotTypeComposition {
            name: self.name,
            slot_type_id: self.slot_type_id,
        }
    }
}
