// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Override settings to configure the intent state.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IntentOverride {
    /// <p>The name of the intent. Only required when you're switching intents.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,</p>
    #[doc(hidden)]
    pub slots: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::SlotValueOverride>,
    >,
}
impl IntentOverride {
    /// <p>The name of the intent. Only required when you're switching intents.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,</p>
    pub fn slots(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::SlotValueOverride>,
    > {
        self.slots.as_ref()
    }
}
impl IntentOverride {
    /// Creates a new builder-style object to manufacture [`IntentOverride`](crate::types::IntentOverride).
    pub fn builder() -> crate::types::builders::IntentOverrideBuilder {
        crate::types::builders::IntentOverrideBuilder::default()
    }
}

/// A builder for [`IntentOverride`](crate::types::IntentOverride).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IntentOverrideBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) slots: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::SlotValueOverride>,
    >,
}
impl IntentOverrideBuilder {
    /// <p>The name of the intent. Only required when you're switching intents.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the intent. Only required when you're switching intents.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Adds a key-value pair to `slots`.
    ///
    /// To override the contents of this collection use [`set_slots`](Self::set_slots).
    ///
    /// <p>A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,</p>
    pub fn slots(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::SlotValueOverride,
    ) -> Self {
        let mut hash_map = self.slots.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.slots = Some(hash_map);
        self
    }
    /// <p>A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,</p>
    pub fn set_slots(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::SlotValueOverride>,
        >,
    ) -> Self {
        self.slots = input;
        self
    }
    /// Consumes the builder and constructs a [`IntentOverride`](crate::types::IntentOverride).
    pub fn build(self) -> crate::types::IntentOverride {
        crate::types::IntentOverride {
            name: self.name,
            slots: self.slots,
        }
    }
}
