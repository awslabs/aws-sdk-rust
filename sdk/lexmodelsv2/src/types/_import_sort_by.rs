// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information for sorting a list of imports.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportSortBy {
    /// <p>The export field to use for sorting.</p>
    #[doc(hidden)]
    pub attribute: std::option::Option<crate::types::ImportSortAttribute>,
    /// <p>The order to sort the list.</p>
    #[doc(hidden)]
    pub order: std::option::Option<crate::types::SortOrder>,
}
impl ImportSortBy {
    /// <p>The export field to use for sorting.</p>
    pub fn attribute(&self) -> std::option::Option<&crate::types::ImportSortAttribute> {
        self.attribute.as_ref()
    }
    /// <p>The order to sort the list.</p>
    pub fn order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.order.as_ref()
    }
}
impl ImportSortBy {
    /// Creates a new builder-style object to manufacture [`ImportSortBy`](crate::types::ImportSortBy).
    pub fn builder() -> crate::types::builders::ImportSortByBuilder {
        crate::types::builders::ImportSortByBuilder::default()
    }
}

/// A builder for [`ImportSortBy`](crate::types::ImportSortBy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImportSortByBuilder {
    pub(crate) attribute: std::option::Option<crate::types::ImportSortAttribute>,
    pub(crate) order: std::option::Option<crate::types::SortOrder>,
}
impl ImportSortByBuilder {
    /// <p>The export field to use for sorting.</p>
    pub fn attribute(mut self, input: crate::types::ImportSortAttribute) -> Self {
        self.attribute = Some(input);
        self
    }
    /// <p>The export field to use for sorting.</p>
    pub fn set_attribute(
        mut self,
        input: std::option::Option<crate::types::ImportSortAttribute>,
    ) -> Self {
        self.attribute = input;
        self
    }
    /// <p>The order to sort the list.</p>
    pub fn order(mut self, input: crate::types::SortOrder) -> Self {
        self.order = Some(input);
        self
    }
    /// <p>The order to sort the list.</p>
    pub fn set_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.order = input;
        self
    }
    /// Consumes the builder and constructs a [`ImportSortBy`](crate::types::ImportSortBy).
    pub fn build(self) -> crate::types::ImportSortBy {
        crate::types::ImportSortBy {
            attribute: self.attribute,
            order: self.order,
        }
    }
}
