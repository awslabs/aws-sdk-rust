// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the action that the bot executes at runtime when the conversation reaches this step.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DialogAction {
    /// <p>The action that the bot should execute. </p>
    pub r#type: crate::types::DialogActionType,
    /// <p>If the dialog action is <code>ElicitSlot</code>, defines the slot to elicit from the user.</p>
    pub slot_to_elicit: ::std::option::Option<::std::string::String>,
    /// <p>When true the next message for the intent is not used.</p>
    pub suppress_next_message: ::std::option::Option<bool>,
}
impl DialogAction {
    /// <p>The action that the bot should execute. </p>
    pub fn r#type(&self) -> &crate::types::DialogActionType {
        &self.r#type
    }
    /// <p>If the dialog action is <code>ElicitSlot</code>, defines the slot to elicit from the user.</p>
    pub fn slot_to_elicit(&self) -> ::std::option::Option<&str> {
        self.slot_to_elicit.as_deref()
    }
    /// <p>When true the next message for the intent is not used.</p>
    pub fn suppress_next_message(&self) -> ::std::option::Option<bool> {
        self.suppress_next_message
    }
}
impl DialogAction {
    /// Creates a new builder-style object to manufacture [`DialogAction`](crate::types::DialogAction).
    pub fn builder() -> crate::types::builders::DialogActionBuilder {
        crate::types::builders::DialogActionBuilder::default()
    }
}

/// A builder for [`DialogAction`](crate::types::DialogAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DialogActionBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::DialogActionType>,
    pub(crate) slot_to_elicit: ::std::option::Option<::std::string::String>,
    pub(crate) suppress_next_message: ::std::option::Option<bool>,
}
impl DialogActionBuilder {
    /// <p>The action that the bot should execute. </p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DialogActionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action that the bot should execute. </p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DialogActionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The action that the bot should execute. </p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DialogActionType> {
        &self.r#type
    }
    /// <p>If the dialog action is <code>ElicitSlot</code>, defines the slot to elicit from the user.</p>
    pub fn slot_to_elicit(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slot_to_elicit = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the dialog action is <code>ElicitSlot</code>, defines the slot to elicit from the user.</p>
    pub fn set_slot_to_elicit(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slot_to_elicit = input;
        self
    }
    /// <p>If the dialog action is <code>ElicitSlot</code>, defines the slot to elicit from the user.</p>
    pub fn get_slot_to_elicit(&self) -> &::std::option::Option<::std::string::String> {
        &self.slot_to_elicit
    }
    /// <p>When true the next message for the intent is not used.</p>
    pub fn suppress_next_message(mut self, input: bool) -> Self {
        self.suppress_next_message = ::std::option::Option::Some(input);
        self
    }
    /// <p>When true the next message for the intent is not used.</p>
    pub fn set_suppress_next_message(mut self, input: ::std::option::Option<bool>) -> Self {
        self.suppress_next_message = input;
        self
    }
    /// <p>When true the next message for the intent is not used.</p>
    pub fn get_suppress_next_message(&self) -> &::std::option::Option<bool> {
        &self.suppress_next_message
    }
    /// Consumes the builder and constructs a [`DialogAction`](crate::types::DialogAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::DialogActionBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::DialogAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DialogAction {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building DialogAction",
                )
            })?,
            slot_to_elicit: self.slot_to_elicit,
            suppress_next_message: self.suppress_next_message,
        })
    }
}
