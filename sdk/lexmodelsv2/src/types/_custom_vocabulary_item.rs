// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The unique custom vocabulary item from the custom vocabulary list.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomVocabularyItem {
    /// <p>The unique item identifer for the custom vocabulary item from the custom vocabulary list.</p>
    pub item_id: ::std::string::String,
    /// <p>The unique phrase for the custom vocabulary item from the custom vocabulary list.</p>
    pub phrase: ::std::string::String,
    /// <p>The weight assigned for the custom vocabulary item from the custom vocabulary list.</p>
    pub weight: ::std::option::Option<i32>,
    /// <p>The DisplayAs value for the custom vocabulary item from the custom vocabulary list.</p>
    pub display_as: ::std::option::Option<::std::string::String>,
}
impl CustomVocabularyItem {
    /// <p>The unique item identifer for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn item_id(&self) -> &str {
        use std::ops::Deref;
        self.item_id.deref()
    }
    /// <p>The unique phrase for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn phrase(&self) -> &str {
        use std::ops::Deref;
        self.phrase.deref()
    }
    /// <p>The weight assigned for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn weight(&self) -> ::std::option::Option<i32> {
        self.weight
    }
    /// <p>The DisplayAs value for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn display_as(&self) -> ::std::option::Option<&str> {
        self.display_as.as_deref()
    }
}
impl CustomVocabularyItem {
    /// Creates a new builder-style object to manufacture [`CustomVocabularyItem`](crate::types::CustomVocabularyItem).
    pub fn builder() -> crate::types::builders::CustomVocabularyItemBuilder {
        crate::types::builders::CustomVocabularyItemBuilder::default()
    }
}

/// A builder for [`CustomVocabularyItem`](crate::types::CustomVocabularyItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomVocabularyItemBuilder {
    pub(crate) item_id: ::std::option::Option<::std::string::String>,
    pub(crate) phrase: ::std::option::Option<::std::string::String>,
    pub(crate) weight: ::std::option::Option<i32>,
    pub(crate) display_as: ::std::option::Option<::std::string::String>,
}
impl CustomVocabularyItemBuilder {
    /// <p>The unique item identifer for the custom vocabulary item from the custom vocabulary list.</p>
    /// This field is required.
    pub fn item_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.item_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique item identifer for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn set_item_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.item_id = input;
        self
    }
    /// <p>The unique item identifer for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn get_item_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.item_id
    }
    /// <p>The unique phrase for the custom vocabulary item from the custom vocabulary list.</p>
    /// This field is required.
    pub fn phrase(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phrase = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique phrase for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn set_phrase(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phrase = input;
        self
    }
    /// <p>The unique phrase for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn get_phrase(&self) -> &::std::option::Option<::std::string::String> {
        &self.phrase
    }
    /// <p>The weight assigned for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn weight(mut self, input: i32) -> Self {
        self.weight = ::std::option::Option::Some(input);
        self
    }
    /// <p>The weight assigned for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn set_weight(mut self, input: ::std::option::Option<i32>) -> Self {
        self.weight = input;
        self
    }
    /// <p>The weight assigned for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn get_weight(&self) -> &::std::option::Option<i32> {
        &self.weight
    }
    /// <p>The DisplayAs value for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn display_as(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_as = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DisplayAs value for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn set_display_as(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_as = input;
        self
    }
    /// <p>The DisplayAs value for the custom vocabulary item from the custom vocabulary list.</p>
    pub fn get_display_as(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_as
    }
    /// Consumes the builder and constructs a [`CustomVocabularyItem`](crate::types::CustomVocabularyItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`item_id`](crate::types::builders::CustomVocabularyItemBuilder::item_id)
    /// - [`phrase`](crate::types::builders::CustomVocabularyItemBuilder::phrase)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomVocabularyItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomVocabularyItem {
            item_id: self.item_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "item_id",
                    "item_id was not specified but it is required when building CustomVocabularyItem",
                )
            })?,
            phrase: self.phrase.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "phrase",
                    "phrase was not specified but it is required when building CustomVocabularyItem",
                )
            })?,
            weight: self.weight,
            display_as: self.display_as,
        })
    }
}
