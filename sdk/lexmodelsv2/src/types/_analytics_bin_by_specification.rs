// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the time metric, interval, and method by which to bin the analytics data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsBinBySpecification {
    /// <p>Specifies the time metric by which to bin the analytics data.</p>
    pub name: crate::types::AnalyticsBinByName,
    /// <p>Specifies the interval of time by which to bin the analytics data.</p>
    pub interval: crate::types::AnalyticsInterval,
    /// <p>Specifies whether to bin the analytics data in ascending or descending order. If this field is left blank, the default order is by the key of the bin in descending order.</p>
    pub order: ::std::option::Option<crate::types::AnalyticsSortOrder>,
}
impl AnalyticsBinBySpecification {
    /// <p>Specifies the time metric by which to bin the analytics data.</p>
    pub fn name(&self) -> &crate::types::AnalyticsBinByName {
        &self.name
    }
    /// <p>Specifies the interval of time by which to bin the analytics data.</p>
    pub fn interval(&self) -> &crate::types::AnalyticsInterval {
        &self.interval
    }
    /// <p>Specifies whether to bin the analytics data in ascending or descending order. If this field is left blank, the default order is by the key of the bin in descending order.</p>
    pub fn order(&self) -> ::std::option::Option<&crate::types::AnalyticsSortOrder> {
        self.order.as_ref()
    }
}
impl AnalyticsBinBySpecification {
    /// Creates a new builder-style object to manufacture [`AnalyticsBinBySpecification`](crate::types::AnalyticsBinBySpecification).
    pub fn builder() -> crate::types::builders::AnalyticsBinBySpecificationBuilder {
        crate::types::builders::AnalyticsBinBySpecificationBuilder::default()
    }
}

/// A builder for [`AnalyticsBinBySpecification`](crate::types::AnalyticsBinBySpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnalyticsBinBySpecificationBuilder {
    pub(crate) name: ::std::option::Option<crate::types::AnalyticsBinByName>,
    pub(crate) interval: ::std::option::Option<crate::types::AnalyticsInterval>,
    pub(crate) order: ::std::option::Option<crate::types::AnalyticsSortOrder>,
}
impl AnalyticsBinBySpecificationBuilder {
    /// <p>Specifies the time metric by which to bin the analytics data.</p>
    /// This field is required.
    pub fn name(mut self, input: crate::types::AnalyticsBinByName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the time metric by which to bin the analytics data.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AnalyticsBinByName>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specifies the time metric by which to bin the analytics data.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AnalyticsBinByName> {
        &self.name
    }
    /// <p>Specifies the interval of time by which to bin the analytics data.</p>
    /// This field is required.
    pub fn interval(mut self, input: crate::types::AnalyticsInterval) -> Self {
        self.interval = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the interval of time by which to bin the analytics data.</p>
    pub fn set_interval(mut self, input: ::std::option::Option<crate::types::AnalyticsInterval>) -> Self {
        self.interval = input;
        self
    }
    /// <p>Specifies the interval of time by which to bin the analytics data.</p>
    pub fn get_interval(&self) -> &::std::option::Option<crate::types::AnalyticsInterval> {
        &self.interval
    }
    /// <p>Specifies whether to bin the analytics data in ascending or descending order. If this field is left blank, the default order is by the key of the bin in descending order.</p>
    pub fn order(mut self, input: crate::types::AnalyticsSortOrder) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to bin the analytics data in ascending or descending order. If this field is left blank, the default order is by the key of the bin in descending order.</p>
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::AnalyticsSortOrder>) -> Self {
        self.order = input;
        self
    }
    /// <p>Specifies whether to bin the analytics data in ascending or descending order. If this field is left blank, the default order is by the key of the bin in descending order.</p>
    pub fn get_order(&self) -> &::std::option::Option<crate::types::AnalyticsSortOrder> {
        &self.order
    }
    /// Consumes the builder and constructs a [`AnalyticsBinBySpecification`](crate::types::AnalyticsBinBySpecification).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AnalyticsBinBySpecificationBuilder::name)
    /// - [`interval`](crate::types::builders::AnalyticsBinBySpecificationBuilder::interval)
    pub fn build(self) -> ::std::result::Result<crate::types::AnalyticsBinBySpecification, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnalyticsBinBySpecification {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AnalyticsBinBySpecification",
                )
            })?,
            interval: self.interval.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "interval",
                    "interval was not specified but it is required when building AnalyticsBinBySpecification",
                )
            })?,
            order: self.order,
        })
    }
}
