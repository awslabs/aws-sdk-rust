// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SentimentAnalysisSettings {
    /// <p>Sets whether Amazon Lex uses Amazon Comprehend to detect the sentiment of user utterances.</p>
    #[doc(hidden)]
    pub detect_sentiment: bool,
}
impl SentimentAnalysisSettings {
    /// <p>Sets whether Amazon Lex uses Amazon Comprehend to detect the sentiment of user utterances.</p>
    pub fn detect_sentiment(&self) -> bool {
        self.detect_sentiment
    }
}
impl SentimentAnalysisSettings {
    /// Creates a new builder-style object to manufacture [`SentimentAnalysisSettings`](crate::types::SentimentAnalysisSettings).
    pub fn builder() -> crate::types::builders::SentimentAnalysisSettingsBuilder {
        crate::types::builders::SentimentAnalysisSettingsBuilder::default()
    }
}

/// A builder for [`SentimentAnalysisSettings`](crate::types::SentimentAnalysisSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SentimentAnalysisSettingsBuilder {
    pub(crate) detect_sentiment: std::option::Option<bool>,
}
impl SentimentAnalysisSettingsBuilder {
    /// <p>Sets whether Amazon Lex uses Amazon Comprehend to detect the sentiment of user utterances.</p>
    pub fn detect_sentiment(mut self, input: bool) -> Self {
        self.detect_sentiment = Some(input);
        self
    }
    /// <p>Sets whether Amazon Lex uses Amazon Comprehend to detect the sentiment of user utterances.</p>
    pub fn set_detect_sentiment(mut self, input: std::option::Option<bool>) -> Self {
        self.detect_sentiment = input;
        self
    }
    /// Consumes the builder and constructs a [`SentimentAnalysisSettings`](crate::types::SentimentAnalysisSettings).
    pub fn build(self) -> crate::types::SentimentAnalysisSettings {
        crate::types::SentimentAnalysisSettings {
            detect_sentiment: self.detect_sentiment.unwrap_or_default(),
        }
    }
}
