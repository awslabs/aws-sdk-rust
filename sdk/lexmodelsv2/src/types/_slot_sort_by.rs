// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies attributes for sorting a list of bots.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SlotSortBy {
    /// <p>The attribute to use to sort the list.</p>
    pub attribute: crate::types::SlotSortAttribute,
    /// <p>The order to sort the list. You can choose ascending or descending.</p>
    pub order: crate::types::SortOrder,
}
impl SlotSortBy {
    /// <p>The attribute to use to sort the list.</p>
    pub fn attribute(&self) -> &crate::types::SlotSortAttribute {
        &self.attribute
    }
    /// <p>The order to sort the list. You can choose ascending or descending.</p>
    pub fn order(&self) -> &crate::types::SortOrder {
        &self.order
    }
}
impl SlotSortBy {
    /// Creates a new builder-style object to manufacture [`SlotSortBy`](crate::types::SlotSortBy).
    pub fn builder() -> crate::types::builders::SlotSortByBuilder {
        crate::types::builders::SlotSortByBuilder::default()
    }
}

/// A builder for [`SlotSortBy`](crate::types::SlotSortBy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SlotSortByBuilder {
    pub(crate) attribute: ::std::option::Option<crate::types::SlotSortAttribute>,
    pub(crate) order: ::std::option::Option<crate::types::SortOrder>,
}
impl SlotSortByBuilder {
    /// <p>The attribute to use to sort the list.</p>
    /// This field is required.
    pub fn attribute(mut self, input: crate::types::SlotSortAttribute) -> Self {
        self.attribute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attribute to use to sort the list.</p>
    pub fn set_attribute(mut self, input: ::std::option::Option<crate::types::SlotSortAttribute>) -> Self {
        self.attribute = input;
        self
    }
    /// <p>The attribute to use to sort the list.</p>
    pub fn get_attribute(&self) -> &::std::option::Option<crate::types::SlotSortAttribute> {
        &self.attribute
    }
    /// <p>The order to sort the list. You can choose ascending or descending.</p>
    /// This field is required.
    pub fn order(mut self, input: crate::types::SortOrder) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The order to sort the list. You can choose ascending or descending.</p>
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.order = input;
        self
    }
    /// <p>The order to sort the list. You can choose ascending or descending.</p>
    pub fn get_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.order
    }
    /// Consumes the builder and constructs a [`SlotSortBy`](crate::types::SlotSortBy).
    /// This method will fail if any of the following fields are not set:
    /// - [`attribute`](crate::types::builders::SlotSortByBuilder::attribute)
    /// - [`order`](crate::types::builders::SlotSortByBuilder::order)
    pub fn build(self) -> ::std::result::Result<crate::types::SlotSortBy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SlotSortBy {
            attribute: self.attribute.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attribute",
                    "attribute was not specified but it is required when building SlotSortBy",
                )
            })?,
            order: self.order.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "order",
                    "order was not specified but it is required when building SlotSortBy",
                )
            })?,
        })
    }
}
