// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides configuration information for the <code>AMAZON.KendraSearchIntent</code> intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KendraConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the <code>AMAZON.KendraSearchIntent</code> intent to search. The index must be in the same account and Region as the Amazon Lex bot.</p>
    pub kendra_index: ::std::string::String,
    /// <p>Determines whether the <code>AMAZON.KendraSearchIntent</code> intent uses a custom query string to query the Amazon Kendra index.</p>
    pub query_filter_string_enabled: bool,
    /// <p>A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html">Filtering queries</a>.</p>
    pub query_filter_string: ::std::option::Option<::std::string::String>,
}
impl KendraConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the <code>AMAZON.KendraSearchIntent</code> intent to search. The index must be in the same account and Region as the Amazon Lex bot.</p>
    pub fn kendra_index(&self) -> &str {
        use std::ops::Deref;
        self.kendra_index.deref()
    }
    /// <p>Determines whether the <code>AMAZON.KendraSearchIntent</code> intent uses a custom query string to query the Amazon Kendra index.</p>
    pub fn query_filter_string_enabled(&self) -> bool {
        self.query_filter_string_enabled
    }
    /// <p>A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html">Filtering queries</a>.</p>
    pub fn query_filter_string(&self) -> ::std::option::Option<&str> {
        self.query_filter_string.as_deref()
    }
}
impl KendraConfiguration {
    /// Creates a new builder-style object to manufacture [`KendraConfiguration`](crate::types::KendraConfiguration).
    pub fn builder() -> crate::types::builders::KendraConfigurationBuilder {
        crate::types::builders::KendraConfigurationBuilder::default()
    }
}

/// A builder for [`KendraConfiguration`](crate::types::KendraConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KendraConfigurationBuilder {
    pub(crate) kendra_index: ::std::option::Option<::std::string::String>,
    pub(crate) query_filter_string_enabled: ::std::option::Option<bool>,
    pub(crate) query_filter_string: ::std::option::Option<::std::string::String>,
}
impl KendraConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the <code>AMAZON.KendraSearchIntent</code> intent to search. The index must be in the same account and Region as the Amazon Lex bot.</p>
    /// This field is required.
    pub fn kendra_index(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kendra_index = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the <code>AMAZON.KendraSearchIntent</code> intent to search. The index must be in the same account and Region as the Amazon Lex bot.</p>
    pub fn set_kendra_index(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kendra_index = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the <code>AMAZON.KendraSearchIntent</code> intent to search. The index must be in the same account and Region as the Amazon Lex bot.</p>
    pub fn get_kendra_index(&self) -> &::std::option::Option<::std::string::String> {
        &self.kendra_index
    }
    /// <p>Determines whether the <code>AMAZON.KendraSearchIntent</code> intent uses a custom query string to query the Amazon Kendra index.</p>
    pub fn query_filter_string_enabled(mut self, input: bool) -> Self {
        self.query_filter_string_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether the <code>AMAZON.KendraSearchIntent</code> intent uses a custom query string to query the Amazon Kendra index.</p>
    pub fn set_query_filter_string_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.query_filter_string_enabled = input;
        self
    }
    /// <p>Determines whether the <code>AMAZON.KendraSearchIntent</code> intent uses a custom query string to query the Amazon Kendra index.</p>
    pub fn get_query_filter_string_enabled(&self) -> &::std::option::Option<bool> {
        &self.query_filter_string_enabled
    }
    /// <p>A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html">Filtering queries</a>.</p>
    pub fn query_filter_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_filter_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html">Filtering queries</a>.</p>
    pub fn set_query_filter_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_filter_string = input;
        self
    }
    /// <p>A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html">Filtering queries</a>.</p>
    pub fn get_query_filter_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_filter_string
    }
    /// Consumes the builder and constructs a [`KendraConfiguration`](crate::types::KendraConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`kendra_index`](crate::types::builders::KendraConfigurationBuilder::kendra_index)
    pub fn build(self) -> ::std::result::Result<crate::types::KendraConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KendraConfiguration {
            kendra_index: self.kendra_index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "kendra_index",
                    "kendra_index was not specified but it is required when building KendraConfiguration",
                )
            })?,
            query_filter_string_enabled: self.query_filter_string_enabled.unwrap_or_default(),
            query_filter_string: self.query_filter_string,
        })
    }
}
