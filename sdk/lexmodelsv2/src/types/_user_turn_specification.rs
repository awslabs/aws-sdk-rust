// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the expected and input values for the user turn.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserTurnSpecification {
    /// <p>Contains information about the user messages in the turn in the input.</p>
    pub input: ::std::option::Option<crate::types::UserTurnInputSpecification>,
    /// <p>Contains results about the expected output for the user turn.</p>
    pub expected: ::std::option::Option<crate::types::UserTurnOutputSpecification>,
}
impl UserTurnSpecification {
    /// <p>Contains information about the user messages in the turn in the input.</p>
    pub fn input(&self) -> ::std::option::Option<&crate::types::UserTurnInputSpecification> {
        self.input.as_ref()
    }
    /// <p>Contains results about the expected output for the user turn.</p>
    pub fn expected(&self) -> ::std::option::Option<&crate::types::UserTurnOutputSpecification> {
        self.expected.as_ref()
    }
}
impl UserTurnSpecification {
    /// Creates a new builder-style object to manufacture [`UserTurnSpecification`](crate::types::UserTurnSpecification).
    pub fn builder() -> crate::types::builders::UserTurnSpecificationBuilder {
        crate::types::builders::UserTurnSpecificationBuilder::default()
    }
}

/// A builder for [`UserTurnSpecification`](crate::types::UserTurnSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserTurnSpecificationBuilder {
    pub(crate) input: ::std::option::Option<crate::types::UserTurnInputSpecification>,
    pub(crate) expected: ::std::option::Option<crate::types::UserTurnOutputSpecification>,
}
impl UserTurnSpecificationBuilder {
    /// <p>Contains information about the user messages in the turn in the input.</p>
    /// This field is required.
    pub fn input(mut self, input: crate::types::UserTurnInputSpecification) -> Self {
        self.input = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the user messages in the turn in the input.</p>
    pub fn set_input(mut self, input: ::std::option::Option<crate::types::UserTurnInputSpecification>) -> Self {
        self.input = input;
        self
    }
    /// <p>Contains information about the user messages in the turn in the input.</p>
    pub fn get_input(&self) -> &::std::option::Option<crate::types::UserTurnInputSpecification> {
        &self.input
    }
    /// <p>Contains results about the expected output for the user turn.</p>
    /// This field is required.
    pub fn expected(mut self, input: crate::types::UserTurnOutputSpecification) -> Self {
        self.expected = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains results about the expected output for the user turn.</p>
    pub fn set_expected(mut self, input: ::std::option::Option<crate::types::UserTurnOutputSpecification>) -> Self {
        self.expected = input;
        self
    }
    /// <p>Contains results about the expected output for the user turn.</p>
    pub fn get_expected(&self) -> &::std::option::Option<crate::types::UserTurnOutputSpecification> {
        &self.expected
    }
    /// Consumes the builder and constructs a [`UserTurnSpecification`](crate::types::UserTurnSpecification).
    pub fn build(self) -> crate::types::UserTurnSpecification {
        crate::types::UserTurnSpecification {
            input: self.input,
            expected: self.expected,
        }
    }
}
