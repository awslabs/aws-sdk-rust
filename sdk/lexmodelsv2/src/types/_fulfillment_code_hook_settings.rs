// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines if a Lambda function should be invoked for a specific intent.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FulfillmentCodeHookSettings {
    /// <p>Indicates whether a Lambda function should be invoked to fulfill a specific intent.</p>
    pub enabled: bool,
    /// <p>Provides settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations.</p>
    pub post_fulfillment_status_specification: ::std::option::Option<crate::types::PostFulfillmentStatusSpecification>,
    /// <p>Provides settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations.</p>
    pub fulfillment_updates_specification: ::std::option::Option<crate::types::FulfillmentUpdatesSpecification>,
    /// <p>Determines whether the fulfillment code hook is used. When <code>active</code> is false, the code hook doesn't run.</p>
    pub active: ::std::option::Option<bool>,
}
impl FulfillmentCodeHookSettings {
    /// <p>Indicates whether a Lambda function should be invoked to fulfill a specific intent.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>Provides settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations.</p>
    pub fn post_fulfillment_status_specification(&self) -> ::std::option::Option<&crate::types::PostFulfillmentStatusSpecification> {
        self.post_fulfillment_status_specification.as_ref()
    }
    /// <p>Provides settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations.</p>
    pub fn fulfillment_updates_specification(&self) -> ::std::option::Option<&crate::types::FulfillmentUpdatesSpecification> {
        self.fulfillment_updates_specification.as_ref()
    }
    /// <p>Determines whether the fulfillment code hook is used. When <code>active</code> is false, the code hook doesn't run.</p>
    pub fn active(&self) -> ::std::option::Option<bool> {
        self.active
    }
}
impl FulfillmentCodeHookSettings {
    /// Creates a new builder-style object to manufacture [`FulfillmentCodeHookSettings`](crate::types::FulfillmentCodeHookSettings).
    pub fn builder() -> crate::types::builders::FulfillmentCodeHookSettingsBuilder {
        crate::types::builders::FulfillmentCodeHookSettingsBuilder::default()
    }
}

/// A builder for [`FulfillmentCodeHookSettings`](crate::types::FulfillmentCodeHookSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FulfillmentCodeHookSettingsBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) post_fulfillment_status_specification: ::std::option::Option<crate::types::PostFulfillmentStatusSpecification>,
    pub(crate) fulfillment_updates_specification: ::std::option::Option<crate::types::FulfillmentUpdatesSpecification>,
    pub(crate) active: ::std::option::Option<bool>,
}
impl FulfillmentCodeHookSettingsBuilder {
    /// <p>Indicates whether a Lambda function should be invoked to fulfill a specific intent.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether a Lambda function should be invoked to fulfill a specific intent.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether a Lambda function should be invoked to fulfill a specific intent.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>Provides settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations.</p>
    pub fn post_fulfillment_status_specification(mut self, input: crate::types::PostFulfillmentStatusSpecification) -> Self {
        self.post_fulfillment_status_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations.</p>
    pub fn set_post_fulfillment_status_specification(
        mut self,
        input: ::std::option::Option<crate::types::PostFulfillmentStatusSpecification>,
    ) -> Self {
        self.post_fulfillment_status_specification = input;
        self
    }
    /// <p>Provides settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations.</p>
    pub fn get_post_fulfillment_status_specification(&self) -> &::std::option::Option<crate::types::PostFulfillmentStatusSpecification> {
        &self.post_fulfillment_status_specification
    }
    /// <p>Provides settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations.</p>
    pub fn fulfillment_updates_specification(mut self, input: crate::types::FulfillmentUpdatesSpecification) -> Self {
        self.fulfillment_updates_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations.</p>
    pub fn set_fulfillment_updates_specification(mut self, input: ::std::option::Option<crate::types::FulfillmentUpdatesSpecification>) -> Self {
        self.fulfillment_updates_specification = input;
        self
    }
    /// <p>Provides settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations.</p>
    pub fn get_fulfillment_updates_specification(&self) -> &::std::option::Option<crate::types::FulfillmentUpdatesSpecification> {
        &self.fulfillment_updates_specification
    }
    /// <p>Determines whether the fulfillment code hook is used. When <code>active</code> is false, the code hook doesn't run.</p>
    pub fn active(mut self, input: bool) -> Self {
        self.active = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether the fulfillment code hook is used. When <code>active</code> is false, the code hook doesn't run.</p>
    pub fn set_active(mut self, input: ::std::option::Option<bool>) -> Self {
        self.active = input;
        self
    }
    /// <p>Determines whether the fulfillment code hook is used. When <code>active</code> is false, the code hook doesn't run.</p>
    pub fn get_active(&self) -> &::std::option::Option<bool> {
        &self.active
    }
    /// Consumes the builder and constructs a [`FulfillmentCodeHookSettings`](crate::types::FulfillmentCodeHookSettings).
    pub fn build(self) -> crate::types::FulfillmentCodeHookSettings {
        crate::types::FulfillmentCodeHookSettings {
            enabled: self.enabled.unwrap_or_default(),
            post_fulfillment_status_specification: self.post_fulfillment_status_specification,
            fulfillment_updates_specification: self.fulfillment_updates_specification,
            active: self.active,
        }
    }
}
