// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides an expression that evaluates to true or false. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Condition {
    /// <p>The expression string that is evaluated. </p>
    #[doc(hidden)]
    pub expression_string: std::option::Option<std::string::String>,
}
impl Condition {
    /// <p>The expression string that is evaluated. </p>
    pub fn expression_string(&self) -> std::option::Option<&str> {
        self.expression_string.as_deref()
    }
}
impl Condition {
    /// Creates a new builder-style object to manufacture [`Condition`](crate::types::Condition).
    pub fn builder() -> crate::types::builders::ConditionBuilder {
        crate::types::builders::ConditionBuilder::default()
    }
}

/// A builder for [`Condition`](crate::types::Condition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConditionBuilder {
    pub(crate) expression_string: std::option::Option<std::string::String>,
}
impl ConditionBuilder {
    /// <p>The expression string that is evaluated. </p>
    pub fn expression_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.expression_string = Some(input.into());
        self
    }
    /// <p>The expression string that is evaluated. </p>
    pub fn set_expression_string(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.expression_string = input;
        self
    }
    /// Consumes the builder and constructs a [`Condition`](crate::types::Condition).
    pub fn build(self) -> crate::types::Condition {
        crate::types::Condition {
            expression_string: self.expression_string,
        }
    }
}
