// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides settings for a message that is sent to the user when a fulfillment Lambda function starts running.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FulfillmentStartResponseSpecification {
    /// <p>The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.</p>
    #[doc(hidden)]
    pub delay_in_seconds: std::option::Option<i32>,
    /// <p>One to 5 message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user.</p>
    #[doc(hidden)]
    pub message_groups: std::option::Option<std::vec::Vec<crate::types::MessageGroup>>,
    /// <p>Determines whether the user can interrupt the start message while it is playing.</p>
    #[doc(hidden)]
    pub allow_interrupt: std::option::Option<bool>,
}
impl FulfillmentStartResponseSpecification {
    /// <p>The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.</p>
    pub fn delay_in_seconds(&self) -> std::option::Option<i32> {
        self.delay_in_seconds
    }
    /// <p>One to 5 message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user.</p>
    pub fn message_groups(&self) -> std::option::Option<&[crate::types::MessageGroup]> {
        self.message_groups.as_deref()
    }
    /// <p>Determines whether the user can interrupt the start message while it is playing.</p>
    pub fn allow_interrupt(&self) -> std::option::Option<bool> {
        self.allow_interrupt
    }
}
impl FulfillmentStartResponseSpecification {
    /// Creates a new builder-style object to manufacture [`FulfillmentStartResponseSpecification`](crate::types::FulfillmentStartResponseSpecification).
    pub fn builder() -> crate::types::builders::FulfillmentStartResponseSpecificationBuilder {
        crate::types::builders::FulfillmentStartResponseSpecificationBuilder::default()
    }
}

/// A builder for [`FulfillmentStartResponseSpecification`](crate::types::FulfillmentStartResponseSpecification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FulfillmentStartResponseSpecificationBuilder {
    pub(crate) delay_in_seconds: std::option::Option<i32>,
    pub(crate) message_groups: std::option::Option<std::vec::Vec<crate::types::MessageGroup>>,
    pub(crate) allow_interrupt: std::option::Option<bool>,
}
impl FulfillmentStartResponseSpecificationBuilder {
    /// <p>The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.</p>
    pub fn delay_in_seconds(mut self, input: i32) -> Self {
        self.delay_in_seconds = Some(input);
        self
    }
    /// <p>The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.</p>
    pub fn set_delay_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.delay_in_seconds = input;
        self
    }
    /// Appends an item to `message_groups`.
    ///
    /// To override the contents of this collection use [`set_message_groups`](Self::set_message_groups).
    ///
    /// <p>One to 5 message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user.</p>
    pub fn message_groups(mut self, input: crate::types::MessageGroup) -> Self {
        let mut v = self.message_groups.unwrap_or_default();
        v.push(input);
        self.message_groups = Some(v);
        self
    }
    /// <p>One to 5 message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user.</p>
    pub fn set_message_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MessageGroup>>,
    ) -> Self {
        self.message_groups = input;
        self
    }
    /// <p>Determines whether the user can interrupt the start message while it is playing.</p>
    pub fn allow_interrupt(mut self, input: bool) -> Self {
        self.allow_interrupt = Some(input);
        self
    }
    /// <p>Determines whether the user can interrupt the start message while it is playing.</p>
    pub fn set_allow_interrupt(mut self, input: std::option::Option<bool>) -> Self {
        self.allow_interrupt = input;
        self
    }
    /// Consumes the builder and constructs a [`FulfillmentStartResponseSpecification`](crate::types::FulfillmentStartResponseSpecification).
    pub fn build(self) -> crate::types::FulfillmentStartResponseSpecification {
        crate::types::FulfillmentStartResponseSpecification {
            delay_in_seconds: self.delay_in_seconds,
            message_groups: self.message_groups,
            allow_interrupt: self.allow_interrupt,
        }
    }
}
