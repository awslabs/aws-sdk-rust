// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A composite slot is a combination of two or more slots that capture multiple pieces of information in a single user input.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CompositeSlotTypeSetting {
    /// <p>Subslots in the composite slot.</p>
    #[doc(hidden)]
    pub sub_slots: std::option::Option<std::vec::Vec<crate::types::SubSlotTypeComposition>>,
}
impl CompositeSlotTypeSetting {
    /// <p>Subslots in the composite slot.</p>
    pub fn sub_slots(&self) -> std::option::Option<&[crate::types::SubSlotTypeComposition]> {
        self.sub_slots.as_deref()
    }
}
impl CompositeSlotTypeSetting {
    /// Creates a new builder-style object to manufacture [`CompositeSlotTypeSetting`](crate::types::CompositeSlotTypeSetting).
    pub fn builder() -> crate::types::builders::CompositeSlotTypeSettingBuilder {
        crate::types::builders::CompositeSlotTypeSettingBuilder::default()
    }
}

/// A builder for [`CompositeSlotTypeSetting`](crate::types::CompositeSlotTypeSetting).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CompositeSlotTypeSettingBuilder {
    pub(crate) sub_slots: std::option::Option<std::vec::Vec<crate::types::SubSlotTypeComposition>>,
}
impl CompositeSlotTypeSettingBuilder {
    /// Appends an item to `sub_slots`.
    ///
    /// To override the contents of this collection use [`set_sub_slots`](Self::set_sub_slots).
    ///
    /// <p>Subslots in the composite slot.</p>
    pub fn sub_slots(mut self, input: crate::types::SubSlotTypeComposition) -> Self {
        let mut v = self.sub_slots.unwrap_or_default();
        v.push(input);
        self.sub_slots = Some(v);
        self
    }
    /// <p>Subslots in the composite slot.</p>
    pub fn set_sub_slots(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SubSlotTypeComposition>>,
    ) -> Self {
        self.sub_slots = input;
        self
    }
    /// Consumes the builder and constructs a [`CompositeSlotTypeSetting`](crate::types::CompositeSlotTypeSetting).
    pub fn build(self) -> crate::types::CompositeSlotTypeSetting {
        crate::types::CompositeSlotTypeSetting {
            sub_slots: self.sub_slots,
        }
    }
}
