// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object specifying the measure and method by which to sort the utterance data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UtteranceDataSortBy {
    /// <p>The measure by which to sort the utterance analytics data.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of utterances.</p> </li>
    /// <li> <p> <code>UtteranceTimestamp</code> – The date and time of the utterance.</p> </li>
    /// </ul>
    pub name: crate::types::AnalyticsUtteranceSortByName,
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub order: crate::types::AnalyticsSortOrder,
}
impl UtteranceDataSortBy {
    /// <p>The measure by which to sort the utterance analytics data.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of utterances.</p> </li>
    /// <li> <p> <code>UtteranceTimestamp</code> – The date and time of the utterance.</p> </li>
    /// </ul>
    pub fn name(&self) -> &crate::types::AnalyticsUtteranceSortByName {
        &self.name
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn order(&self) -> &crate::types::AnalyticsSortOrder {
        &self.order
    }
}
impl UtteranceDataSortBy {
    /// Creates a new builder-style object to manufacture [`UtteranceDataSortBy`](crate::types::UtteranceDataSortBy).
    pub fn builder() -> crate::types::builders::UtteranceDataSortByBuilder {
        crate::types::builders::UtteranceDataSortByBuilder::default()
    }
}

/// A builder for [`UtteranceDataSortBy`](crate::types::UtteranceDataSortBy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UtteranceDataSortByBuilder {
    pub(crate) name: ::std::option::Option<crate::types::AnalyticsUtteranceSortByName>,
    pub(crate) order: ::std::option::Option<crate::types::AnalyticsSortOrder>,
}
impl UtteranceDataSortByBuilder {
    /// <p>The measure by which to sort the utterance analytics data.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of utterances.</p> </li>
    /// <li> <p> <code>UtteranceTimestamp</code> – The date and time of the utterance.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn name(mut self, input: crate::types::AnalyticsUtteranceSortByName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The measure by which to sort the utterance analytics data.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of utterances.</p> </li>
    /// <li> <p> <code>UtteranceTimestamp</code> – The date and time of the utterance.</p> </li>
    /// </ul>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AnalyticsUtteranceSortByName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The measure by which to sort the utterance analytics data.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of utterances.</p> </li>
    /// <li> <p> <code>UtteranceTimestamp</code> – The date and time of the utterance.</p> </li>
    /// </ul>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AnalyticsUtteranceSortByName> {
        &self.name
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    /// This field is required.
    pub fn order(mut self, input: crate::types::AnalyticsSortOrder) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::AnalyticsSortOrder>) -> Self {
        self.order = input;
        self
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn get_order(&self) -> &::std::option::Option<crate::types::AnalyticsSortOrder> {
        &self.order
    }
    /// Consumes the builder and constructs a [`UtteranceDataSortBy`](crate::types::UtteranceDataSortBy).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::UtteranceDataSortByBuilder::name)
    /// - [`order`](crate::types::builders::UtteranceDataSortByBuilder::order)
    pub fn build(self) -> ::std::result::Result<crate::types::UtteranceDataSortBy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UtteranceDataSortBy {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building UtteranceDataSortBy",
                )
            })?,
            order: self.order.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "order",
                    "order was not specified but it is required when building UtteranceDataSortBy",
                )
            })?,
        })
    }
}
