// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon CloudWatch Logs log group where the text and metadata logs are delivered. The log group must exist before you enable logging.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudWatchLogGroupLogDestination {
    /// <p>The Amazon Resource Name (ARN) of the log group where text and metadata logs are delivered.</p>
    pub cloud_watch_log_group_arn: ::std::string::String,
    /// <p>The prefix of the log stream name within the log group that you specified </p>
    pub log_prefix: ::std::string::String,
}
impl CloudWatchLogGroupLogDestination {
    /// <p>The Amazon Resource Name (ARN) of the log group where text and metadata logs are delivered.</p>
    pub fn cloud_watch_log_group_arn(&self) -> &str {
        use std::ops::Deref;
        self.cloud_watch_log_group_arn.deref()
    }
    /// <p>The prefix of the log stream name within the log group that you specified </p>
    pub fn log_prefix(&self) -> &str {
        use std::ops::Deref;
        self.log_prefix.deref()
    }
}
impl CloudWatchLogGroupLogDestination {
    /// Creates a new builder-style object to manufacture [`CloudWatchLogGroupLogDestination`](crate::types::CloudWatchLogGroupLogDestination).
    pub fn builder() -> crate::types::builders::CloudWatchLogGroupLogDestinationBuilder {
        crate::types::builders::CloudWatchLogGroupLogDestinationBuilder::default()
    }
}

/// A builder for [`CloudWatchLogGroupLogDestination`](crate::types::CloudWatchLogGroupLogDestination).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CloudWatchLogGroupLogDestinationBuilder {
    pub(crate) cloud_watch_log_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) log_prefix: ::std::option::Option<::std::string::String>,
}
impl CloudWatchLogGroupLogDestinationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the log group where text and metadata logs are delivered.</p>
    /// This field is required.
    pub fn cloud_watch_log_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_watch_log_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the log group where text and metadata logs are delivered.</p>
    pub fn set_cloud_watch_log_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_watch_log_group_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the log group where text and metadata logs are delivered.</p>
    pub fn get_cloud_watch_log_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_watch_log_group_arn
    }
    /// <p>The prefix of the log stream name within the log group that you specified </p>
    /// This field is required.
    pub fn log_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prefix of the log stream name within the log group that you specified </p>
    pub fn set_log_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_prefix = input;
        self
    }
    /// <p>The prefix of the log stream name within the log group that you specified </p>
    pub fn get_log_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_prefix
    }
    /// Consumes the builder and constructs a [`CloudWatchLogGroupLogDestination`](crate::types::CloudWatchLogGroupLogDestination).
    /// This method will fail if any of the following fields are not set:
    /// - [`cloud_watch_log_group_arn`](crate::types::builders::CloudWatchLogGroupLogDestinationBuilder::cloud_watch_log_group_arn)
    /// - [`log_prefix`](crate::types::builders::CloudWatchLogGroupLogDestinationBuilder::log_prefix)
    pub fn build(self) -> ::std::result::Result<crate::types::CloudWatchLogGroupLogDestination, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CloudWatchLogGroupLogDestination {
            cloud_watch_log_group_arn: self.cloud_watch_log_group_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cloud_watch_log_group_arn",
                    "cloud_watch_log_group_arn was not specified but it is required when building CloudWatchLogGroupLogDestination",
                )
            })?,
            log_prefix: self.log_prefix.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "log_prefix",
                    "log_prefix was not specified but it is required when building CloudWatchLogGroupLogDestination",
                )
            })?,
        })
    }
}
