// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The object representing the filter that Amazon Lex will use to select the appropriate transcript.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TranscriptFilter {
    /// <p>The object representing the filter that Amazon Lex will use to select the appropriate transcript when the transcript format is the Amazon Lex format.</p>
    #[doc(hidden)]
    pub lex_transcript_filter: std::option::Option<crate::types::LexTranscriptFilter>,
}
impl TranscriptFilter {
    /// <p>The object representing the filter that Amazon Lex will use to select the appropriate transcript when the transcript format is the Amazon Lex format.</p>
    pub fn lex_transcript_filter(&self) -> std::option::Option<&crate::types::LexTranscriptFilter> {
        self.lex_transcript_filter.as_ref()
    }
}
impl TranscriptFilter {
    /// Creates a new builder-style object to manufacture [`TranscriptFilter`](crate::types::TranscriptFilter).
    pub fn builder() -> crate::types::builders::TranscriptFilterBuilder {
        crate::types::builders::TranscriptFilterBuilder::default()
    }
}

/// A builder for [`TranscriptFilter`](crate::types::TranscriptFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TranscriptFilterBuilder {
    pub(crate) lex_transcript_filter: std::option::Option<crate::types::LexTranscriptFilter>,
}
impl TranscriptFilterBuilder {
    /// <p>The object representing the filter that Amazon Lex will use to select the appropriate transcript when the transcript format is the Amazon Lex format.</p>
    pub fn lex_transcript_filter(mut self, input: crate::types::LexTranscriptFilter) -> Self {
        self.lex_transcript_filter = Some(input);
        self
    }
    /// <p>The object representing the filter that Amazon Lex will use to select the appropriate transcript when the transcript format is the Amazon Lex format.</p>
    pub fn set_lex_transcript_filter(
        mut self,
        input: std::option::Option<crate::types::LexTranscriptFilter>,
    ) -> Self {
        self.lex_transcript_filter = input;
        self
    }
    /// Consumes the builder and constructs a [`TranscriptFilter`](crate::types::TranscriptFilter).
    pub fn build(self) -> crate::types::TranscriptFilter {
        crate::types::TranscriptFilter {
            lex_transcript_filter: self.lex_transcript_filter,
        }
    }
}
