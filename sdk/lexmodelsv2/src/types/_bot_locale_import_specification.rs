// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the bot locale parameters required for importing a bot locale.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BotLocaleImportSpecification {
    /// <p>The identifier of the bot to import the locale to.</p>
    pub bot_id: ::std::string::String,
    /// <p>The version of the bot to import the locale to. This can only be the <code>DRAFT</code> version of the bot.</p>
    pub bot_version: ::std::string::String,
    /// <p>The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub locale_id: ::std::string::String,
    /// <p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot. </p>
    /// <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>PostText</code> operation would be:</p>
    /// <ul>
    /// <li> <p> <code>AMAZON.FallbackIntent</code> </p> </li>
    /// <li> <p> <code>IntentA</code> </p> </li>
    /// <li> <p> <code>IntentB</code> </p> </li>
    /// <li> <p> <code>IntentC</code> </p> </li>
    /// </ul>
    pub nlu_intent_confidence_threshold: ::std::option::Option<f64>,
    /// <p>Defines settings for using an Amazon Polly voice to communicate with a user.</p>
    pub voice_settings: ::std::option::Option<crate::types::VoiceSettings>,
}
impl BotLocaleImportSpecification {
    /// <p>The identifier of the bot to import the locale to.</p>
    pub fn bot_id(&self) -> &str {
        use std::ops::Deref;
        self.bot_id.deref()
    }
    /// <p>The version of the bot to import the locale to. This can only be the <code>DRAFT</code> version of the bot.</p>
    pub fn bot_version(&self) -> &str {
        use std::ops::Deref;
        self.bot_version.deref()
    }
    /// <p>The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn locale_id(&self) -> &str {
        use std::ops::Deref;
        self.locale_id.deref()
    }
    /// <p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot. </p>
    /// <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>PostText</code> operation would be:</p>
    /// <ul>
    /// <li> <p> <code>AMAZON.FallbackIntent</code> </p> </li>
    /// <li> <p> <code>IntentA</code> </p> </li>
    /// <li> <p> <code>IntentB</code> </p> </li>
    /// <li> <p> <code>IntentC</code> </p> </li>
    /// </ul>
    pub fn nlu_intent_confidence_threshold(&self) -> ::std::option::Option<f64> {
        self.nlu_intent_confidence_threshold
    }
    /// <p>Defines settings for using an Amazon Polly voice to communicate with a user.</p>
    pub fn voice_settings(&self) -> ::std::option::Option<&crate::types::VoiceSettings> {
        self.voice_settings.as_ref()
    }
}
impl BotLocaleImportSpecification {
    /// Creates a new builder-style object to manufacture [`BotLocaleImportSpecification`](crate::types::BotLocaleImportSpecification).
    pub fn builder() -> crate::types::builders::BotLocaleImportSpecificationBuilder {
        crate::types::builders::BotLocaleImportSpecificationBuilder::default()
    }
}

/// A builder for [`BotLocaleImportSpecification`](crate::types::BotLocaleImportSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BotLocaleImportSpecificationBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_version: ::std::option::Option<::std::string::String>,
    pub(crate) locale_id: ::std::option::Option<::std::string::String>,
    pub(crate) nlu_intent_confidence_threshold: ::std::option::Option<f64>,
    pub(crate) voice_settings: ::std::option::Option<crate::types::VoiceSettings>,
}
impl BotLocaleImportSpecificationBuilder {
    /// <p>The identifier of the bot to import the locale to.</p>
    /// This field is required.
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bot to import the locale to.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The identifier of the bot to import the locale to.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The version of the bot to import the locale to. This can only be the <code>DRAFT</code> version of the bot.</p>
    /// This field is required.
    pub fn bot_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the bot to import the locale to. This can only be the <code>DRAFT</code> version of the bot.</p>
    pub fn set_bot_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The version of the bot to import the locale to. This can only be the <code>DRAFT</code> version of the bot.</p>
    pub fn get_bot_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_version
    }
    /// <p>The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    /// This field is required.
    pub fn locale_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn set_locale_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    pub fn get_locale_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale_id
    }
    /// <p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot. </p>
    /// <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>PostText</code> operation would be:</p>
    /// <ul>
    /// <li> <p> <code>AMAZON.FallbackIntent</code> </p> </li>
    /// <li> <p> <code>IntentA</code> </p> </li>
    /// <li> <p> <code>IntentB</code> </p> </li>
    /// <li> <p> <code>IntentC</code> </p> </li>
    /// </ul>
    pub fn nlu_intent_confidence_threshold(mut self, input: f64) -> Self {
        self.nlu_intent_confidence_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot. </p>
    /// <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>PostText</code> operation would be:</p>
    /// <ul>
    /// <li> <p> <code>AMAZON.FallbackIntent</code> </p> </li>
    /// <li> <p> <code>IntentA</code> </p> </li>
    /// <li> <p> <code>IntentB</code> </p> </li>
    /// <li> <p> <code>IntentC</code> </p> </li>
    /// </ul>
    pub fn set_nlu_intent_confidence_threshold(mut self, input: ::std::option::Option<f64>) -> Self {
        self.nlu_intent_confidence_threshold = input;
        self
    }
    /// <p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot. </p>
    /// <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>PostText</code> operation would be:</p>
    /// <ul>
    /// <li> <p> <code>AMAZON.FallbackIntent</code> </p> </li>
    /// <li> <p> <code>IntentA</code> </p> </li>
    /// <li> <p> <code>IntentB</code> </p> </li>
    /// <li> <p> <code>IntentC</code> </p> </li>
    /// </ul>
    pub fn get_nlu_intent_confidence_threshold(&self) -> &::std::option::Option<f64> {
        &self.nlu_intent_confidence_threshold
    }
    /// <p>Defines settings for using an Amazon Polly voice to communicate with a user.</p>
    pub fn voice_settings(mut self, input: crate::types::VoiceSettings) -> Self {
        self.voice_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines settings for using an Amazon Polly voice to communicate with a user.</p>
    pub fn set_voice_settings(mut self, input: ::std::option::Option<crate::types::VoiceSettings>) -> Self {
        self.voice_settings = input;
        self
    }
    /// <p>Defines settings for using an Amazon Polly voice to communicate with a user.</p>
    pub fn get_voice_settings(&self) -> &::std::option::Option<crate::types::VoiceSettings> {
        &self.voice_settings
    }
    /// Consumes the builder and constructs a [`BotLocaleImportSpecification`](crate::types::BotLocaleImportSpecification).
    /// This method will fail if any of the following fields are not set:
    /// - [`bot_id`](crate::types::builders::BotLocaleImportSpecificationBuilder::bot_id)
    /// - [`bot_version`](crate::types::builders::BotLocaleImportSpecificationBuilder::bot_version)
    /// - [`locale_id`](crate::types::builders::BotLocaleImportSpecificationBuilder::locale_id)
    pub fn build(self) -> ::std::result::Result<crate::types::BotLocaleImportSpecification, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BotLocaleImportSpecification {
            bot_id: self.bot_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bot_id",
                    "bot_id was not specified but it is required when building BotLocaleImportSpecification",
                )
            })?,
            bot_version: self.bot_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bot_version",
                    "bot_version was not specified but it is required when building BotLocaleImportSpecification",
                )
            })?,
            locale_id: self.locale_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "locale_id",
                    "locale_id was not specified but it is required when building BotLocaleImportSpecification",
                )
            })?,
            nlu_intent_confidence_threshold: self.nlu_intent_confidence_threshold,
            voice_settings: self.voice_settings,
        })
    }
}
