// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about an event that occurred affecting the bot locale.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BotLocaleHistoryEvent {
    /// <p>A description of the event that occurred.</p>
    pub event: ::std::string::String,
    /// <p>A timestamp of the date and time that the event occurred.</p>
    pub event_date: ::aws_smithy_types::DateTime,
}
impl BotLocaleHistoryEvent {
    /// <p>A description of the event that occurred.</p>
    pub fn event(&self) -> &str {
        use std::ops::Deref;
        self.event.deref()
    }
    /// <p>A timestamp of the date and time that the event occurred.</p>
    pub fn event_date(&self) -> &::aws_smithy_types::DateTime {
        &self.event_date
    }
}
impl BotLocaleHistoryEvent {
    /// Creates a new builder-style object to manufacture [`BotLocaleHistoryEvent`](crate::types::BotLocaleHistoryEvent).
    pub fn builder() -> crate::types::builders::BotLocaleHistoryEventBuilder {
        crate::types::builders::BotLocaleHistoryEventBuilder::default()
    }
}

/// A builder for [`BotLocaleHistoryEvent`](crate::types::BotLocaleHistoryEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BotLocaleHistoryEventBuilder {
    pub(crate) event: ::std::option::Option<::std::string::String>,
    pub(crate) event_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BotLocaleHistoryEventBuilder {
    /// <p>A description of the event that occurred.</p>
    /// This field is required.
    pub fn event(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the event that occurred.</p>
    pub fn set_event(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event = input;
        self
    }
    /// <p>A description of the event that occurred.</p>
    pub fn get_event(&self) -> &::std::option::Option<::std::string::String> {
        &self.event
    }
    /// <p>A timestamp of the date and time that the event occurred.</p>
    /// This field is required.
    pub fn event_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp of the date and time that the event occurred.</p>
    pub fn set_event_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_date = input;
        self
    }
    /// <p>A timestamp of the date and time that the event occurred.</p>
    pub fn get_event_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_date
    }
    /// Consumes the builder and constructs a [`BotLocaleHistoryEvent`](crate::types::BotLocaleHistoryEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`event`](crate::types::builders::BotLocaleHistoryEventBuilder::event)
    /// - [`event_date`](crate::types::builders::BotLocaleHistoryEventBuilder::event_date)
    pub fn build(self) -> ::std::result::Result<crate::types::BotLocaleHistoryEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BotLocaleHistoryEvent {
            event: self.event.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event",
                    "event was not specified but it is required when building BotLocaleHistoryEvent",
                )
            })?,
            event_date: self.event_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_date",
                    "event_date was not specified but it is required when building BotLocaleHistoryEvent",
                )
            })?,
        })
    }
}
