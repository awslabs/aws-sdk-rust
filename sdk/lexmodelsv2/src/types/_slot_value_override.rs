// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The slot values that Amazon Lex uses when it sets slot values in a dialog step.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SlotValueOverride {
    /// <p>When the shape value is <code>List</code>, it indicates that the <code>values</code> field contains a list of slot values. When the value is <code>Scalar</code>, it indicates that the <code>value</code> field contains a single value.</p>
    pub shape: ::std::option::Option<crate::types::SlotShape>,
    /// <p>The current value of the slot.</p>
    pub value: ::std::option::Option<crate::types::SlotValue>,
    /// <p>A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."</p>
    pub values: ::std::option::Option<::std::vec::Vec<crate::types::SlotValueOverride>>,
}
impl SlotValueOverride {
    /// <p>When the shape value is <code>List</code>, it indicates that the <code>values</code> field contains a list of slot values. When the value is <code>Scalar</code>, it indicates that the <code>value</code> field contains a single value.</p>
    pub fn shape(&self) -> ::std::option::Option<&crate::types::SlotShape> {
        self.shape.as_ref()
    }
    /// <p>The current value of the slot.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::SlotValue> {
        self.value.as_ref()
    }
    /// <p>A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[crate::types::SlotValueOverride] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl SlotValueOverride {
    /// Creates a new builder-style object to manufacture [`SlotValueOverride`](crate::types::SlotValueOverride).
    pub fn builder() -> crate::types::builders::SlotValueOverrideBuilder {
        crate::types::builders::SlotValueOverrideBuilder::default()
    }
}

/// A builder for [`SlotValueOverride`](crate::types::SlotValueOverride).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SlotValueOverrideBuilder {
    pub(crate) shape: ::std::option::Option<crate::types::SlotShape>,
    pub(crate) value: ::std::option::Option<crate::types::SlotValue>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<crate::types::SlotValueOverride>>,
}
impl SlotValueOverrideBuilder {
    /// <p>When the shape value is <code>List</code>, it indicates that the <code>values</code> field contains a list of slot values. When the value is <code>Scalar</code>, it indicates that the <code>value</code> field contains a single value.</p>
    pub fn shape(mut self, input: crate::types::SlotShape) -> Self {
        self.shape = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the shape value is <code>List</code>, it indicates that the <code>values</code> field contains a list of slot values. When the value is <code>Scalar</code>, it indicates that the <code>value</code> field contains a single value.</p>
    pub fn set_shape(mut self, input: ::std::option::Option<crate::types::SlotShape>) -> Self {
        self.shape = input;
        self
    }
    /// <p>When the shape value is <code>List</code>, it indicates that the <code>values</code> field contains a list of slot values. When the value is <code>Scalar</code>, it indicates that the <code>value</code> field contains a single value.</p>
    pub fn get_shape(&self) -> &::std::option::Option<crate::types::SlotShape> {
        &self.shape
    }
    /// <p>The current value of the slot.</p>
    pub fn value(mut self, input: crate::types::SlotValue) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current value of the slot.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::SlotValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>The current value of the slot.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::SlotValue> {
        &self.value
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."</p>
    pub fn values(mut self, input: crate::types::SlotValueOverride) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SlotValueOverride>>) -> Self {
        self.values = input;
        self
    }
    /// <p>A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SlotValueOverride>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`SlotValueOverride`](crate::types::SlotValueOverride).
    pub fn build(self) -> crate::types::SlotValueOverride {
        crate::types::SlotValueOverride {
            shape: self.shape,
            value: self.value,
            values: self.values,
        }
    }
}
