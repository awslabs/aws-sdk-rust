// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates whether a slot can return multiple values.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MultipleValuesSetting {
    /// <p>Indicates whether a slot can return multiple values. When <code>true</code>, the slot may return more than one value in a response. When <code>false</code>, the slot returns only a single value.</p>
    /// <p>Multi-value slots are only available in the en-US locale. If you set this value to <code>true</code> in any other locale, Amazon Lex throws a <code>ValidationException</code>.</p>
    /// <p>If the <code>allowMutlipleValues</code> is not set, the default value is <code>false</code>.</p>
    #[doc(hidden)]
    pub allow_multiple_values: bool,
}
impl MultipleValuesSetting {
    /// <p>Indicates whether a slot can return multiple values. When <code>true</code>, the slot may return more than one value in a response. When <code>false</code>, the slot returns only a single value.</p>
    /// <p>Multi-value slots are only available in the en-US locale. If you set this value to <code>true</code> in any other locale, Amazon Lex throws a <code>ValidationException</code>.</p>
    /// <p>If the <code>allowMutlipleValues</code> is not set, the default value is <code>false</code>.</p>
    pub fn allow_multiple_values(&self) -> bool {
        self.allow_multiple_values
    }
}
impl MultipleValuesSetting {
    /// Creates a new builder-style object to manufacture [`MultipleValuesSetting`](crate::types::MultipleValuesSetting).
    pub fn builder() -> crate::types::builders::MultipleValuesSettingBuilder {
        crate::types::builders::MultipleValuesSettingBuilder::default()
    }
}

/// A builder for [`MultipleValuesSetting`](crate::types::MultipleValuesSetting).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MultipleValuesSettingBuilder {
    pub(crate) allow_multiple_values: std::option::Option<bool>,
}
impl MultipleValuesSettingBuilder {
    /// <p>Indicates whether a slot can return multiple values. When <code>true</code>, the slot may return more than one value in a response. When <code>false</code>, the slot returns only a single value.</p>
    /// <p>Multi-value slots are only available in the en-US locale. If you set this value to <code>true</code> in any other locale, Amazon Lex throws a <code>ValidationException</code>.</p>
    /// <p>If the <code>allowMutlipleValues</code> is not set, the default value is <code>false</code>.</p>
    pub fn allow_multiple_values(mut self, input: bool) -> Self {
        self.allow_multiple_values = Some(input);
        self
    }
    /// <p>Indicates whether a slot can return multiple values. When <code>true</code>, the slot may return more than one value in a response. When <code>false</code>, the slot returns only a single value.</p>
    /// <p>Multi-value slots are only available in the en-US locale. If you set this value to <code>true</code> in any other locale, Amazon Lex throws a <code>ValidationException</code>.</p>
    /// <p>If the <code>allowMutlipleValues</code> is not set, the default value is <code>false</code>.</p>
    pub fn set_allow_multiple_values(mut self, input: std::option::Option<bool>) -> Self {
        self.allow_multiple_values = input;
        self
    }
    /// Consumes the builder and constructs a [`MultipleValuesSetting`](crate::types::MultipleValuesSetting).
    pub fn build(self) -> crate::types::MultipleValuesSetting {
        crate::types::MultipleValuesSetting {
            allow_multiple_values: self.allow_multiple_values.unwrap_or_default(),
        }
    }
}
