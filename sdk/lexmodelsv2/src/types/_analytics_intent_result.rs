// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing the results for the intent metrics you requested and the bin and/or group(s) they refer to, if applicable.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsIntentResult {
    /// <p>A list of objects containing the criteria you requested for binning results and the values of the bins.</p>
    pub bin_keys: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsBinKey>>,
    /// <p>A list of objects containing the criteria you requested for grouping results and the values of the groups.</p>
    pub group_by_keys: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsIntentGroupByKey>>,
    /// <p>A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.</p>
    pub metrics_results: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsIntentMetricResult>>,
}
impl AnalyticsIntentResult {
    /// <p>A list of objects containing the criteria you requested for binning results and the values of the bins.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.bin_keys.is_none()`.
    pub fn bin_keys(&self) -> &[crate::types::AnalyticsBinKey] {
        self.bin_keys.as_deref().unwrap_or_default()
    }
    /// <p>A list of objects containing the criteria you requested for grouping results and the values of the groups.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.group_by_keys.is_none()`.
    pub fn group_by_keys(&self) -> &[crate::types::AnalyticsIntentGroupByKey] {
        self.group_by_keys.as_deref().unwrap_or_default()
    }
    /// <p>A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metrics_results.is_none()`.
    pub fn metrics_results(&self) -> &[crate::types::AnalyticsIntentMetricResult] {
        self.metrics_results.as_deref().unwrap_or_default()
    }
}
impl AnalyticsIntentResult {
    /// Creates a new builder-style object to manufacture [`AnalyticsIntentResult`](crate::types::AnalyticsIntentResult).
    pub fn builder() -> crate::types::builders::AnalyticsIntentResultBuilder {
        crate::types::builders::AnalyticsIntentResultBuilder::default()
    }
}

/// A builder for [`AnalyticsIntentResult`](crate::types::AnalyticsIntentResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnalyticsIntentResultBuilder {
    pub(crate) bin_keys: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsBinKey>>,
    pub(crate) group_by_keys: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsIntentGroupByKey>>,
    pub(crate) metrics_results: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsIntentMetricResult>>,
}
impl AnalyticsIntentResultBuilder {
    /// Appends an item to `bin_keys`.
    ///
    /// To override the contents of this collection use [`set_bin_keys`](Self::set_bin_keys).
    ///
    /// <p>A list of objects containing the criteria you requested for binning results and the values of the bins.</p>
    pub fn bin_keys(mut self, input: crate::types::AnalyticsBinKey) -> Self {
        let mut v = self.bin_keys.unwrap_or_default();
        v.push(input);
        self.bin_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects containing the criteria you requested for binning results and the values of the bins.</p>
    pub fn set_bin_keys(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsBinKey>>) -> Self {
        self.bin_keys = input;
        self
    }
    /// <p>A list of objects containing the criteria you requested for binning results and the values of the bins.</p>
    pub fn get_bin_keys(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalyticsBinKey>> {
        &self.bin_keys
    }
    /// Appends an item to `group_by_keys`.
    ///
    /// To override the contents of this collection use [`set_group_by_keys`](Self::set_group_by_keys).
    ///
    /// <p>A list of objects containing the criteria you requested for grouping results and the values of the groups.</p>
    pub fn group_by_keys(mut self, input: crate::types::AnalyticsIntentGroupByKey) -> Self {
        let mut v = self.group_by_keys.unwrap_or_default();
        v.push(input);
        self.group_by_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects containing the criteria you requested for grouping results and the values of the groups.</p>
    pub fn set_group_by_keys(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsIntentGroupByKey>>) -> Self {
        self.group_by_keys = input;
        self
    }
    /// <p>A list of objects containing the criteria you requested for grouping results and the values of the groups.</p>
    pub fn get_group_by_keys(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalyticsIntentGroupByKey>> {
        &self.group_by_keys
    }
    /// Appends an item to `metrics_results`.
    ///
    /// To override the contents of this collection use [`set_metrics_results`](Self::set_metrics_results).
    ///
    /// <p>A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.</p>
    pub fn metrics_results(mut self, input: crate::types::AnalyticsIntentMetricResult) -> Self {
        let mut v = self.metrics_results.unwrap_or_default();
        v.push(input);
        self.metrics_results = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.</p>
    pub fn set_metrics_results(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalyticsIntentMetricResult>>) -> Self {
        self.metrics_results = input;
        self
    }
    /// <p>A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.</p>
    pub fn get_metrics_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalyticsIntentMetricResult>> {
        &self.metrics_results
    }
    /// Consumes the builder and constructs a [`AnalyticsIntentResult`](crate::types::AnalyticsIntentResult).
    pub fn build(self) -> crate::types::AnalyticsIntentResult {
        crate::types::AnalyticsIntentResult {
            bin_keys: self.bin_keys,
            group_by_keys: self.group_by_keys,
            metrics_results: self.metrics_results,
        }
    }
}
