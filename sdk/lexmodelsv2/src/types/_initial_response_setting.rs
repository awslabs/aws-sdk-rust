// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InitialResponseSetting {
    /// <p>Specifies a list of message groups that Amazon Lex uses to respond the user input.</p>
    #[doc(hidden)]
    pub initial_response: std::option::Option<crate::types::ResponseSpecification>,
    /// <p>The next step in the conversation.</p>
    #[doc(hidden)]
    pub next_step: std::option::Option<crate::types::DialogState>,
    /// <p>Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.</p>
    #[doc(hidden)]
    pub conditional: std::option::Option<crate::types::ConditionalSpecification>,
    /// <p> Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation. </p>
    #[doc(hidden)]
    pub code_hook: std::option::Option<crate::types::DialogCodeHookInvocationSetting>,
}
impl InitialResponseSetting {
    /// <p>Specifies a list of message groups that Amazon Lex uses to respond the user input.</p>
    pub fn initial_response(&self) -> std::option::Option<&crate::types::ResponseSpecification> {
        self.initial_response.as_ref()
    }
    /// <p>The next step in the conversation.</p>
    pub fn next_step(&self) -> std::option::Option<&crate::types::DialogState> {
        self.next_step.as_ref()
    }
    /// <p>Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.</p>
    pub fn conditional(&self) -> std::option::Option<&crate::types::ConditionalSpecification> {
        self.conditional.as_ref()
    }
    /// <p> Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation. </p>
    pub fn code_hook(&self) -> std::option::Option<&crate::types::DialogCodeHookInvocationSetting> {
        self.code_hook.as_ref()
    }
}
impl InitialResponseSetting {
    /// Creates a new builder-style object to manufacture [`InitialResponseSetting`](crate::types::InitialResponseSetting).
    pub fn builder() -> crate::types::builders::InitialResponseSettingBuilder {
        crate::types::builders::InitialResponseSettingBuilder::default()
    }
}

/// A builder for [`InitialResponseSetting`](crate::types::InitialResponseSetting).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InitialResponseSettingBuilder {
    pub(crate) initial_response: std::option::Option<crate::types::ResponseSpecification>,
    pub(crate) next_step: std::option::Option<crate::types::DialogState>,
    pub(crate) conditional: std::option::Option<crate::types::ConditionalSpecification>,
    pub(crate) code_hook: std::option::Option<crate::types::DialogCodeHookInvocationSetting>,
}
impl InitialResponseSettingBuilder {
    /// <p>Specifies a list of message groups that Amazon Lex uses to respond the user input.</p>
    pub fn initial_response(mut self, input: crate::types::ResponseSpecification) -> Self {
        self.initial_response = Some(input);
        self
    }
    /// <p>Specifies a list of message groups that Amazon Lex uses to respond the user input.</p>
    pub fn set_initial_response(
        mut self,
        input: std::option::Option<crate::types::ResponseSpecification>,
    ) -> Self {
        self.initial_response = input;
        self
    }
    /// <p>The next step in the conversation.</p>
    pub fn next_step(mut self, input: crate::types::DialogState) -> Self {
        self.next_step = Some(input);
        self
    }
    /// <p>The next step in the conversation.</p>
    pub fn set_next_step(mut self, input: std::option::Option<crate::types::DialogState>) -> Self {
        self.next_step = input;
        self
    }
    /// <p>Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.</p>
    pub fn conditional(mut self, input: crate::types::ConditionalSpecification) -> Self {
        self.conditional = Some(input);
        self
    }
    /// <p>Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.</p>
    pub fn set_conditional(
        mut self,
        input: std::option::Option<crate::types::ConditionalSpecification>,
    ) -> Self {
        self.conditional = input;
        self
    }
    /// <p> Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation. </p>
    pub fn code_hook(mut self, input: crate::types::DialogCodeHookInvocationSetting) -> Self {
        self.code_hook = Some(input);
        self
    }
    /// <p> Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation. </p>
    pub fn set_code_hook(
        mut self,
        input: std::option::Option<crate::types::DialogCodeHookInvocationSetting>,
    ) -> Self {
        self.code_hook = input;
        self
    }
    /// Consumes the builder and constructs a [`InitialResponseSetting`](crate::types::InitialResponseSetting).
    pub fn build(self) -> crate::types::InitialResponseSetting {
        crate::types::InitialResponseSetting {
            initial_response: self.initial_response,
            next_step: self.next_step,
            conditional: self.conditional,
            code_hook: self.code_hook,
        }
    }
}
