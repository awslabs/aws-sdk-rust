// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies settings that are unique to a locale. For example, you can use different Lambda function depending on the bot's locale.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BotAliasLocaleSettings {
    /// <p>Determines whether the locale is enabled for the bot. If the value is <code>false</code>, the locale isn't available for use.</p>
    pub enabled: bool,
    /// <p>Specifies the Lambda function that should be used in the locale.</p>
    pub code_hook_specification: ::std::option::Option<crate::types::CodeHookSpecification>,
}
impl BotAliasLocaleSettings {
    /// <p>Determines whether the locale is enabled for the bot. If the value is <code>false</code>, the locale isn't available for use.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>Specifies the Lambda function that should be used in the locale.</p>
    pub fn code_hook_specification(&self) -> ::std::option::Option<&crate::types::CodeHookSpecification> {
        self.code_hook_specification.as_ref()
    }
}
impl BotAliasLocaleSettings {
    /// Creates a new builder-style object to manufacture [`BotAliasLocaleSettings`](crate::types::BotAliasLocaleSettings).
    pub fn builder() -> crate::types::builders::BotAliasLocaleSettingsBuilder {
        crate::types::builders::BotAliasLocaleSettingsBuilder::default()
    }
}

/// A builder for [`BotAliasLocaleSettings`](crate::types::BotAliasLocaleSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BotAliasLocaleSettingsBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) code_hook_specification: ::std::option::Option<crate::types::CodeHookSpecification>,
}
impl BotAliasLocaleSettingsBuilder {
    /// <p>Determines whether the locale is enabled for the bot. If the value is <code>false</code>, the locale isn't available for use.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether the locale is enabled for the bot. If the value is <code>false</code>, the locale isn't available for use.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Determines whether the locale is enabled for the bot. If the value is <code>false</code>, the locale isn't available for use.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>Specifies the Lambda function that should be used in the locale.</p>
    pub fn code_hook_specification(mut self, input: crate::types::CodeHookSpecification) -> Self {
        self.code_hook_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the Lambda function that should be used in the locale.</p>
    pub fn set_code_hook_specification(mut self, input: ::std::option::Option<crate::types::CodeHookSpecification>) -> Self {
        self.code_hook_specification = input;
        self
    }
    /// <p>Specifies the Lambda function that should be used in the locale.</p>
    pub fn get_code_hook_specification(&self) -> &::std::option::Option<crate::types::CodeHookSpecification> {
        &self.code_hook_specification
    }
    /// Consumes the builder and constructs a [`BotAliasLocaleSettings`](crate::types::BotAliasLocaleSettings).
    pub fn build(self) -> crate::types::BotAliasLocaleSettings {
        crate::types::BotAliasLocaleSettings {
            enabled: self.enabled.unwrap_or_default(),
            code_hook_specification: self.code_hook_specification,
        }
    }
}
