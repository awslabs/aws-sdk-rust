// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the overall test results.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OverallTestResults {
    /// <p>A list of the overall test results.</p>
    pub items: ::std::vec::Vec<crate::types::OverallTestResultItem>,
}
impl OverallTestResults {
    /// <p>A list of the overall test results.</p>
    pub fn items(&self) -> &[crate::types::OverallTestResultItem] {
        use std::ops::Deref;
        self.items.deref()
    }
}
impl OverallTestResults {
    /// Creates a new builder-style object to manufacture [`OverallTestResults`](crate::types::OverallTestResults).
    pub fn builder() -> crate::types::builders::OverallTestResultsBuilder {
        crate::types::builders::OverallTestResultsBuilder::default()
    }
}

/// A builder for [`OverallTestResults`](crate::types::OverallTestResults).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OverallTestResultsBuilder {
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::OverallTestResultItem>>,
}
impl OverallTestResultsBuilder {
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>A list of the overall test results.</p>
    pub fn items(mut self, input: crate::types::OverallTestResultItem) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the overall test results.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OverallTestResultItem>>) -> Self {
        self.items = input;
        self
    }
    /// <p>A list of the overall test results.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OverallTestResultItem>> {
        &self.items
    }
    /// Consumes the builder and constructs a [`OverallTestResults`](crate::types::OverallTestResults).
    /// This method will fail if any of the following fields are not set:
    /// - [`items`](crate::types::builders::OverallTestResultsBuilder::items)
    pub fn build(self) -> ::std::result::Result<crate::types::OverallTestResults, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OverallTestResults {
            items: self.items.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "items",
                    "items was not specified but it is required when building OverallTestResults",
                )
            })?,
        })
    }
}
