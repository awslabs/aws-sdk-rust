// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The version of a bot used for a bot locale.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BotVersionLocaleDetails {
    /// <p>The version of a bot used for a bot locale.</p>
    #[doc(hidden)]
    pub source_bot_version: std::option::Option<std::string::String>,
}
impl BotVersionLocaleDetails {
    /// <p>The version of a bot used for a bot locale.</p>
    pub fn source_bot_version(&self) -> std::option::Option<&str> {
        self.source_bot_version.as_deref()
    }
}
impl BotVersionLocaleDetails {
    /// Creates a new builder-style object to manufacture [`BotVersionLocaleDetails`](crate::types::BotVersionLocaleDetails).
    pub fn builder() -> crate::types::builders::BotVersionLocaleDetailsBuilder {
        crate::types::builders::BotVersionLocaleDetailsBuilder::default()
    }
}

/// A builder for [`BotVersionLocaleDetails`](crate::types::BotVersionLocaleDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BotVersionLocaleDetailsBuilder {
    pub(crate) source_bot_version: std::option::Option<std::string::String>,
}
impl BotVersionLocaleDetailsBuilder {
    /// <p>The version of a bot used for a bot locale.</p>
    pub fn source_bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_bot_version = Some(input.into());
        self
    }
    /// <p>The version of a bot used for a bot locale.</p>
    pub fn set_source_bot_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_bot_version = input;
        self
    }
    /// Consumes the builder and constructs a [`BotVersionLocaleDetails`](crate::types::BotVersionLocaleDetails).
    pub fn build(self) -> crate::types::BotVersionLocaleDetails {
        crate::types::BotVersionLocaleDetails {
            source_bot_version: self.source_bot_version,
        }
    }
}
