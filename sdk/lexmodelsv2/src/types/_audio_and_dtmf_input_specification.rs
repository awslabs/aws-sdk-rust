// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the audio and DTMF input specification.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudioAndDtmfInputSpecification {
    /// <p>Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.</p>
    pub start_timeout_ms: i32,
    /// <p>Specifies the settings on audio input.</p>
    pub audio_specification: ::std::option::Option<crate::types::AudioSpecification>,
    /// <p>Specifies the settings on DTMF input.</p>
    pub dtmf_specification: ::std::option::Option<crate::types::DtmfSpecification>,
}
impl AudioAndDtmfInputSpecification {
    /// <p>Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.</p>
    pub fn start_timeout_ms(&self) -> i32 {
        self.start_timeout_ms
    }
    /// <p>Specifies the settings on audio input.</p>
    pub fn audio_specification(&self) -> ::std::option::Option<&crate::types::AudioSpecification> {
        self.audio_specification.as_ref()
    }
    /// <p>Specifies the settings on DTMF input.</p>
    pub fn dtmf_specification(&self) -> ::std::option::Option<&crate::types::DtmfSpecification> {
        self.dtmf_specification.as_ref()
    }
}
impl AudioAndDtmfInputSpecification {
    /// Creates a new builder-style object to manufacture [`AudioAndDtmfInputSpecification`](crate::types::AudioAndDtmfInputSpecification).
    pub fn builder() -> crate::types::builders::AudioAndDtmfInputSpecificationBuilder {
        crate::types::builders::AudioAndDtmfInputSpecificationBuilder::default()
    }
}

/// A builder for [`AudioAndDtmfInputSpecification`](crate::types::AudioAndDtmfInputSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AudioAndDtmfInputSpecificationBuilder {
    pub(crate) start_timeout_ms: ::std::option::Option<i32>,
    pub(crate) audio_specification: ::std::option::Option<crate::types::AudioSpecification>,
    pub(crate) dtmf_specification: ::std::option::Option<crate::types::DtmfSpecification>,
}
impl AudioAndDtmfInputSpecificationBuilder {
    /// <p>Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.</p>
    /// This field is required.
    pub fn start_timeout_ms(mut self, input: i32) -> Self {
        self.start_timeout_ms = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.</p>
    pub fn set_start_timeout_ms(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_timeout_ms = input;
        self
    }
    /// <p>Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.</p>
    pub fn get_start_timeout_ms(&self) -> &::std::option::Option<i32> {
        &self.start_timeout_ms
    }
    /// <p>Specifies the settings on audio input.</p>
    pub fn audio_specification(mut self, input: crate::types::AudioSpecification) -> Self {
        self.audio_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the settings on audio input.</p>
    pub fn set_audio_specification(mut self, input: ::std::option::Option<crate::types::AudioSpecification>) -> Self {
        self.audio_specification = input;
        self
    }
    /// <p>Specifies the settings on audio input.</p>
    pub fn get_audio_specification(&self) -> &::std::option::Option<crate::types::AudioSpecification> {
        &self.audio_specification
    }
    /// <p>Specifies the settings on DTMF input.</p>
    pub fn dtmf_specification(mut self, input: crate::types::DtmfSpecification) -> Self {
        self.dtmf_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the settings on DTMF input.</p>
    pub fn set_dtmf_specification(mut self, input: ::std::option::Option<crate::types::DtmfSpecification>) -> Self {
        self.dtmf_specification = input;
        self
    }
    /// <p>Specifies the settings on DTMF input.</p>
    pub fn get_dtmf_specification(&self) -> &::std::option::Option<crate::types::DtmfSpecification> {
        &self.dtmf_specification
    }
    /// Consumes the builder and constructs a [`AudioAndDtmfInputSpecification`](crate::types::AudioAndDtmfInputSpecification).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_timeout_ms`](crate::types::builders::AudioAndDtmfInputSpecificationBuilder::start_timeout_ms)
    pub fn build(self) -> ::std::result::Result<crate::types::AudioAndDtmfInputSpecification, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AudioAndDtmfInputSpecification {
            start_timeout_ms: self.start_timeout_ms.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_timeout_ms",
                    "start_timeout_ms was not specified but it is required when building AudioAndDtmfInputSpecification",
                )
            })?,
            audio_specification: self.audio_specification,
            dtmf_specification: self.dtmf_specification,
        })
    }
}
