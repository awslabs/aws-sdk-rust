// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filters the response form the <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_ListExports.html">ListExports</a> operation</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportFilter {
    /// <p>The name of the field to use for filtering.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::ExportFilterName>,
    /// <p>The values to use to filter the response. The values must be <code>Bot</code>, <code>BotLocale</code>, or <code>CustomVocabulary</code>.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The operator to use for the filter. Specify EQ when the <code>ListExports</code> operation should return only resource types that equal the specified value. Specify CO when the <code>ListExports</code> operation should return resource types that contain the specified value.</p>
    #[doc(hidden)]
    pub operator: std::option::Option<crate::types::ExportFilterOperator>,
}
impl ExportFilter {
    /// <p>The name of the field to use for filtering.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::ExportFilterName> {
        self.name.as_ref()
    }
    /// <p>The values to use to filter the response. The values must be <code>Bot</code>, <code>BotLocale</code>, or <code>CustomVocabulary</code>.</p>
    pub fn values(&self) -> std::option::Option<&[std::string::String]> {
        self.values.as_deref()
    }
    /// <p>The operator to use for the filter. Specify EQ when the <code>ListExports</code> operation should return only resource types that equal the specified value. Specify CO when the <code>ListExports</code> operation should return resource types that contain the specified value.</p>
    pub fn operator(&self) -> std::option::Option<&crate::types::ExportFilterOperator> {
        self.operator.as_ref()
    }
}
impl ExportFilter {
    /// Creates a new builder-style object to manufacture [`ExportFilter`](crate::types::ExportFilter).
    pub fn builder() -> crate::types::builders::ExportFilterBuilder {
        crate::types::builders::ExportFilterBuilder::default()
    }
}

/// A builder for [`ExportFilter`](crate::types::ExportFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExportFilterBuilder {
    pub(crate) name: std::option::Option<crate::types::ExportFilterName>,
    pub(crate) values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) operator: std::option::Option<crate::types::ExportFilterOperator>,
}
impl ExportFilterBuilder {
    /// <p>The name of the field to use for filtering.</p>
    pub fn name(mut self, input: crate::types::ExportFilterName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The name of the field to use for filtering.</p>
    pub fn set_name(mut self, input: std::option::Option<crate::types::ExportFilterName>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values to use to filter the response. The values must be <code>Bot</code>, <code>BotLocale</code>, or <code>CustomVocabulary</code>.</p>
    pub fn values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = Some(v);
        self
    }
    /// <p>The values to use to filter the response. The values must be <code>Bot</code>, <code>BotLocale</code>, or <code>CustomVocabulary</code>.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// <p>The operator to use for the filter. Specify EQ when the <code>ListExports</code> operation should return only resource types that equal the specified value. Specify CO when the <code>ListExports</code> operation should return resource types that contain the specified value.</p>
    pub fn operator(mut self, input: crate::types::ExportFilterOperator) -> Self {
        self.operator = Some(input);
        self
    }
    /// <p>The operator to use for the filter. Specify EQ when the <code>ListExports</code> operation should return only resource types that equal the specified value. Specify CO when the <code>ListExports</code> operation should return resource types that contain the specified value.</p>
    pub fn set_operator(
        mut self,
        input: std::option::Option<crate::types::ExportFilterOperator>,
    ) -> Self {
        self.operator = input;
        self
    }
    /// Consumes the builder and constructs a [`ExportFilter`](crate::types::ExportFilter).
    pub fn build(self) -> crate::types::ExportFilter {
        crate::types::ExportFilter {
            name: self.name,
            values: self.values,
            operator: self.operator,
        }
    }
}
