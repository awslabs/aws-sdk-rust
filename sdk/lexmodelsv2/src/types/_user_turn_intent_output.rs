// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the intent that is output for the turn by the test execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserTurnIntentOutput {
    /// <p>The name of the intent.</p>
    pub name: ::std::string::String,
    /// <p>The slots associated with the intent.</p>
    pub slots: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::UserTurnSlotOutput>>,
}
impl UserTurnIntentOutput {
    /// <p>The name of the intent.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The slots associated with the intent.</p>
    pub fn slots(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::UserTurnSlotOutput>> {
        self.slots.as_ref()
    }
}
impl UserTurnIntentOutput {
    /// Creates a new builder-style object to manufacture [`UserTurnIntentOutput`](crate::types::UserTurnIntentOutput).
    pub fn builder() -> crate::types::builders::UserTurnIntentOutputBuilder {
        crate::types::builders::UserTurnIntentOutputBuilder::default()
    }
}

/// A builder for [`UserTurnIntentOutput`](crate::types::UserTurnIntentOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserTurnIntentOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) slots: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::UserTurnSlotOutput>>,
}
impl UserTurnIntentOutputBuilder {
    /// <p>The name of the intent.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the intent.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the intent.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Adds a key-value pair to `slots`.
    ///
    /// To override the contents of this collection use [`set_slots`](Self::set_slots).
    ///
    /// <p>The slots associated with the intent.</p>
    pub fn slots(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::UserTurnSlotOutput) -> Self {
        let mut hash_map = self.slots.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.slots = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The slots associated with the intent.</p>
    pub fn set_slots(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::UserTurnSlotOutput>>,
    ) -> Self {
        self.slots = input;
        self
    }
    /// <p>The slots associated with the intent.</p>
    pub fn get_slots(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::UserTurnSlotOutput>> {
        &self.slots
    }
    /// Consumes the builder and constructs a [`UserTurnIntentOutput`](crate::types::UserTurnIntentOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::UserTurnIntentOutputBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::UserTurnIntentOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UserTurnIntentOutput {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building UserTurnIntentOutput",
                )
            })?,
            slots: self.slots,
        })
    }
}
