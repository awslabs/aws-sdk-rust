// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The information about the agent turn in a test set execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgentTurnResult {
    /// <p>The expected agent prompt for the agent turn in a test set execution.</p>
    pub expected_agent_prompt: ::std::string::String,
    /// <p>The actual agent prompt for the agent turn in a test set execution.</p>
    pub actual_agent_prompt: ::std::option::Option<::std::string::String>,
    /// <p>Details about an error in an execution of a test set.</p>
    pub error_details: ::std::option::Option<crate::types::ExecutionErrorDetails>,
    /// <p>The actual elicited slot for the agent turn in a test set execution.</p>
    pub actual_elicited_slot: ::std::option::Option<::std::string::String>,
    /// <p>The actual intent for the agent turn in a test set execution.</p>
    pub actual_intent: ::std::option::Option<::std::string::String>,
}
impl AgentTurnResult {
    /// <p>The expected agent prompt for the agent turn in a test set execution.</p>
    pub fn expected_agent_prompt(&self) -> &str {
        use std::ops::Deref;
        self.expected_agent_prompt.deref()
    }
    /// <p>The actual agent prompt for the agent turn in a test set execution.</p>
    pub fn actual_agent_prompt(&self) -> ::std::option::Option<&str> {
        self.actual_agent_prompt.as_deref()
    }
    /// <p>Details about an error in an execution of a test set.</p>
    pub fn error_details(&self) -> ::std::option::Option<&crate::types::ExecutionErrorDetails> {
        self.error_details.as_ref()
    }
    /// <p>The actual elicited slot for the agent turn in a test set execution.</p>
    pub fn actual_elicited_slot(&self) -> ::std::option::Option<&str> {
        self.actual_elicited_slot.as_deref()
    }
    /// <p>The actual intent for the agent turn in a test set execution.</p>
    pub fn actual_intent(&self) -> ::std::option::Option<&str> {
        self.actual_intent.as_deref()
    }
}
impl AgentTurnResult {
    /// Creates a new builder-style object to manufacture [`AgentTurnResult`](crate::types::AgentTurnResult).
    pub fn builder() -> crate::types::builders::AgentTurnResultBuilder {
        crate::types::builders::AgentTurnResultBuilder::default()
    }
}

/// A builder for [`AgentTurnResult`](crate::types::AgentTurnResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AgentTurnResultBuilder {
    pub(crate) expected_agent_prompt: ::std::option::Option<::std::string::String>,
    pub(crate) actual_agent_prompt: ::std::option::Option<::std::string::String>,
    pub(crate) error_details: ::std::option::Option<crate::types::ExecutionErrorDetails>,
    pub(crate) actual_elicited_slot: ::std::option::Option<::std::string::String>,
    pub(crate) actual_intent: ::std::option::Option<::std::string::String>,
}
impl AgentTurnResultBuilder {
    /// <p>The expected agent prompt for the agent turn in a test set execution.</p>
    /// This field is required.
    pub fn expected_agent_prompt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expected_agent_prompt = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expected agent prompt for the agent turn in a test set execution.</p>
    pub fn set_expected_agent_prompt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expected_agent_prompt = input;
        self
    }
    /// <p>The expected agent prompt for the agent turn in a test set execution.</p>
    pub fn get_expected_agent_prompt(&self) -> &::std::option::Option<::std::string::String> {
        &self.expected_agent_prompt
    }
    /// <p>The actual agent prompt for the agent turn in a test set execution.</p>
    pub fn actual_agent_prompt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.actual_agent_prompt = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The actual agent prompt for the agent turn in a test set execution.</p>
    pub fn set_actual_agent_prompt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.actual_agent_prompt = input;
        self
    }
    /// <p>The actual agent prompt for the agent turn in a test set execution.</p>
    pub fn get_actual_agent_prompt(&self) -> &::std::option::Option<::std::string::String> {
        &self.actual_agent_prompt
    }
    /// <p>Details about an error in an execution of a test set.</p>
    pub fn error_details(mut self, input: crate::types::ExecutionErrorDetails) -> Self {
        self.error_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about an error in an execution of a test set.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<crate::types::ExecutionErrorDetails>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>Details about an error in an execution of a test set.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<crate::types::ExecutionErrorDetails> {
        &self.error_details
    }
    /// <p>The actual elicited slot for the agent turn in a test set execution.</p>
    pub fn actual_elicited_slot(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.actual_elicited_slot = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The actual elicited slot for the agent turn in a test set execution.</p>
    pub fn set_actual_elicited_slot(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.actual_elicited_slot = input;
        self
    }
    /// <p>The actual elicited slot for the agent turn in a test set execution.</p>
    pub fn get_actual_elicited_slot(&self) -> &::std::option::Option<::std::string::String> {
        &self.actual_elicited_slot
    }
    /// <p>The actual intent for the agent turn in a test set execution.</p>
    pub fn actual_intent(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.actual_intent = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The actual intent for the agent turn in a test set execution.</p>
    pub fn set_actual_intent(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.actual_intent = input;
        self
    }
    /// <p>The actual intent for the agent turn in a test set execution.</p>
    pub fn get_actual_intent(&self) -> &::std::option::Option<::std::string::String> {
        &self.actual_intent
    }
    /// Consumes the builder and constructs a [`AgentTurnResult`](crate::types::AgentTurnResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`expected_agent_prompt`](crate::types::builders::AgentTurnResultBuilder::expected_agent_prompt)
    pub fn build(self) -> ::std::result::Result<crate::types::AgentTurnResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AgentTurnResult {
            expected_agent_prompt: self.expected_agent_prompt.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expected_agent_prompt",
                    "expected_agent_prompt was not specified but it is required when building AgentTurnResult",
                )
            })?,
            actual_agent_prompt: self.actual_agent_prompt,
            error_details: self.error_details,
            actual_elicited_slot: self.actual_elicited_slot,
            actual_intent: self.actual_intent,
        })
    }
}
