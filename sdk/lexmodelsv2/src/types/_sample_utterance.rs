// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A sample utterance that invokes an intent or respond to a slot elicitation prompt.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SampleUtterance {
    /// <p>The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.</p>
    pub utterance: ::std::string::String,
}
impl SampleUtterance {
    /// <p>The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.</p>
    pub fn utterance(&self) -> &str {
        use std::ops::Deref;
        self.utterance.deref()
    }
}
impl SampleUtterance {
    /// Creates a new builder-style object to manufacture [`SampleUtterance`](crate::types::SampleUtterance).
    pub fn builder() -> crate::types::builders::SampleUtteranceBuilder {
        crate::types::builders::SampleUtteranceBuilder::default()
    }
}

/// A builder for [`SampleUtterance`](crate::types::SampleUtterance).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SampleUtteranceBuilder {
    pub(crate) utterance: ::std::option::Option<::std::string::String>,
}
impl SampleUtteranceBuilder {
    /// <p>The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.</p>
    /// This field is required.
    pub fn utterance(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.utterance = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.</p>
    pub fn set_utterance(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.utterance = input;
        self
    }
    /// <p>The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.</p>
    pub fn get_utterance(&self) -> &::std::option::Option<::std::string::String> {
        &self.utterance
    }
    /// Consumes the builder and constructs a [`SampleUtterance`](crate::types::SampleUtterance).
    /// This method will fail if any of the following fields are not set:
    /// - [`utterance`](crate::types::builders::SampleUtteranceBuilder::utterance)
    pub fn build(self) -> ::std::result::Result<crate::types::SampleUtterance, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SampleUtterance {
            utterance: self.utterance.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "utterance",
                    "utterance was not specified but it is required when building SampleUtterance",
                )
            })?,
        })
    }
}
