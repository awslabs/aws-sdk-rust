// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the metric and the summary statistic you want to calculate, and the order in which to sort the results, for the intent stages across the user sessions with the bot.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsIntentStageMetric {
    /// <p>The metric for which you want to get intent stage summary statistics. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/analytics-key-definitions.html">Key definitions</a> for more details about these metrics.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of times the intent stage occurred.</p> </li>
    /// <li> <p> <code>Success</code> – The number of times the intent stage succeeded.</p> </li>
    /// <li> <p> <code>Failure</code> – The number of times the intent stage failed.</p> </li>
    /// <li> <p> <code>Dropped</code> – The number of times the user dropped the intent stage.</p> </li>
    /// <li> <p> <code>Retry</code> – The number of times the bot tried to elicit a response from the user at this stage.</p> </li>
    /// </ul>
    pub name: crate::types::AnalyticsIntentStageMetricName,
    /// <p>The summary statistic to calculate.</p>
    /// <ul>
    /// <li> <p> <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Average</code> – The total count divided by the number of intent stages in the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Max</code> – The highest count in the category you provide in <code>name</code>.</p> </li>
    /// </ul>
    pub statistic: crate::types::AnalyticsMetricStatistic,
    /// <p>Specifies whether to sort the results in ascending or descending order of the summary statistic (<code>value</code> in the response).</p>
    pub order: ::std::option::Option<crate::types::AnalyticsSortOrder>,
}
impl AnalyticsIntentStageMetric {
    /// <p>The metric for which you want to get intent stage summary statistics. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/analytics-key-definitions.html">Key definitions</a> for more details about these metrics.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of times the intent stage occurred.</p> </li>
    /// <li> <p> <code>Success</code> – The number of times the intent stage succeeded.</p> </li>
    /// <li> <p> <code>Failure</code> – The number of times the intent stage failed.</p> </li>
    /// <li> <p> <code>Dropped</code> – The number of times the user dropped the intent stage.</p> </li>
    /// <li> <p> <code>Retry</code> – The number of times the bot tried to elicit a response from the user at this stage.</p> </li>
    /// </ul>
    pub fn name(&self) -> &crate::types::AnalyticsIntentStageMetricName {
        &self.name
    }
    /// <p>The summary statistic to calculate.</p>
    /// <ul>
    /// <li> <p> <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Average</code> – The total count divided by the number of intent stages in the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Max</code> – The highest count in the category you provide in <code>name</code>.</p> </li>
    /// </ul>
    pub fn statistic(&self) -> &crate::types::AnalyticsMetricStatistic {
        &self.statistic
    }
    /// <p>Specifies whether to sort the results in ascending or descending order of the summary statistic (<code>value</code> in the response).</p>
    pub fn order(&self) -> ::std::option::Option<&crate::types::AnalyticsSortOrder> {
        self.order.as_ref()
    }
}
impl AnalyticsIntentStageMetric {
    /// Creates a new builder-style object to manufacture [`AnalyticsIntentStageMetric`](crate::types::AnalyticsIntentStageMetric).
    pub fn builder() -> crate::types::builders::AnalyticsIntentStageMetricBuilder {
        crate::types::builders::AnalyticsIntentStageMetricBuilder::default()
    }
}

/// A builder for [`AnalyticsIntentStageMetric`](crate::types::AnalyticsIntentStageMetric).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnalyticsIntentStageMetricBuilder {
    pub(crate) name: ::std::option::Option<crate::types::AnalyticsIntentStageMetricName>,
    pub(crate) statistic: ::std::option::Option<crate::types::AnalyticsMetricStatistic>,
    pub(crate) order: ::std::option::Option<crate::types::AnalyticsSortOrder>,
}
impl AnalyticsIntentStageMetricBuilder {
    /// <p>The metric for which you want to get intent stage summary statistics. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/analytics-key-definitions.html">Key definitions</a> for more details about these metrics.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of times the intent stage occurred.</p> </li>
    /// <li> <p> <code>Success</code> – The number of times the intent stage succeeded.</p> </li>
    /// <li> <p> <code>Failure</code> – The number of times the intent stage failed.</p> </li>
    /// <li> <p> <code>Dropped</code> – The number of times the user dropped the intent stage.</p> </li>
    /// <li> <p> <code>Retry</code> – The number of times the bot tried to elicit a response from the user at this stage.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn name(mut self, input: crate::types::AnalyticsIntentStageMetricName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metric for which you want to get intent stage summary statistics. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/analytics-key-definitions.html">Key definitions</a> for more details about these metrics.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of times the intent stage occurred.</p> </li>
    /// <li> <p> <code>Success</code> – The number of times the intent stage succeeded.</p> </li>
    /// <li> <p> <code>Failure</code> – The number of times the intent stage failed.</p> </li>
    /// <li> <p> <code>Dropped</code> – The number of times the user dropped the intent stage.</p> </li>
    /// <li> <p> <code>Retry</code> – The number of times the bot tried to elicit a response from the user at this stage.</p> </li>
    /// </ul>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AnalyticsIntentStageMetricName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The metric for which you want to get intent stage summary statistics. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/analytics-key-definitions.html">Key definitions</a> for more details about these metrics.</p>
    /// <ul>
    /// <li> <p> <code>Count</code> – The number of times the intent stage occurred.</p> </li>
    /// <li> <p> <code>Success</code> – The number of times the intent stage succeeded.</p> </li>
    /// <li> <p> <code>Failure</code> – The number of times the intent stage failed.</p> </li>
    /// <li> <p> <code>Dropped</code> – The number of times the user dropped the intent stage.</p> </li>
    /// <li> <p> <code>Retry</code> – The number of times the bot tried to elicit a response from the user at this stage.</p> </li>
    /// </ul>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AnalyticsIntentStageMetricName> {
        &self.name
    }
    /// <p>The summary statistic to calculate.</p>
    /// <ul>
    /// <li> <p> <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Average</code> – The total count divided by the number of intent stages in the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Max</code> – The highest count in the category you provide in <code>name</code>.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn statistic(mut self, input: crate::types::AnalyticsMetricStatistic) -> Self {
        self.statistic = ::std::option::Option::Some(input);
        self
    }
    /// <p>The summary statistic to calculate.</p>
    /// <ul>
    /// <li> <p> <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Average</code> – The total count divided by the number of intent stages in the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Max</code> – The highest count in the category you provide in <code>name</code>.</p> </li>
    /// </ul>
    pub fn set_statistic(mut self, input: ::std::option::Option<crate::types::AnalyticsMetricStatistic>) -> Self {
        self.statistic = input;
        self
    }
    /// <p>The summary statistic to calculate.</p>
    /// <ul>
    /// <li> <p> <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Average</code> – The total count divided by the number of intent stages in the category you provide in <code>name</code>.</p> </li>
    /// <li> <p> <code>Max</code> – The highest count in the category you provide in <code>name</code>.</p> </li>
    /// </ul>
    pub fn get_statistic(&self) -> &::std::option::Option<crate::types::AnalyticsMetricStatistic> {
        &self.statistic
    }
    /// <p>Specifies whether to sort the results in ascending or descending order of the summary statistic (<code>value</code> in the response).</p>
    pub fn order(mut self, input: crate::types::AnalyticsSortOrder) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to sort the results in ascending or descending order of the summary statistic (<code>value</code> in the response).</p>
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::AnalyticsSortOrder>) -> Self {
        self.order = input;
        self
    }
    /// <p>Specifies whether to sort the results in ascending or descending order of the summary statistic (<code>value</code> in the response).</p>
    pub fn get_order(&self) -> &::std::option::Option<crate::types::AnalyticsSortOrder> {
        &self.order
    }
    /// Consumes the builder and constructs a [`AnalyticsIntentStageMetric`](crate::types::AnalyticsIntentStageMetric).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AnalyticsIntentStageMetricBuilder::name)
    /// - [`statistic`](crate::types::builders::AnalyticsIntentStageMetricBuilder::statistic)
    pub fn build(self) -> ::std::result::Result<crate::types::AnalyticsIntentStageMetric, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnalyticsIntentStageMetric {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AnalyticsIntentStageMetric",
                )
            })?,
            statistic: self.statistic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "statistic",
                    "statistic was not specified but it is required when building AnalyticsIntentStageMetric",
                )
            })?,
            order: self.order,
        })
    }
}
