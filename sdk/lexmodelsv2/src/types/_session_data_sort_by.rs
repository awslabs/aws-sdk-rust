// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object specifying the measure and method by which to sort the session analytics data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SessionDataSortBy {
    /// <p>The measure by which to sort the session analytics data.</p>
    /// <ul>
    /// <li> <p> <code>conversationStartTime</code> – The date and time when the conversation began. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p> </li>
    /// <li> <p> <code>numberOfTurns</code> – The number of turns that the session took.</p> </li>
    /// <li> <p> <code>conversationDurationSeconds</code> – The duration of the conversation in seconds.</p> </li>
    /// </ul>
    pub name: crate::types::AnalyticsSessionSortByName,
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub order: crate::types::AnalyticsSortOrder,
}
impl SessionDataSortBy {
    /// <p>The measure by which to sort the session analytics data.</p>
    /// <ul>
    /// <li> <p> <code>conversationStartTime</code> – The date and time when the conversation began. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p> </li>
    /// <li> <p> <code>numberOfTurns</code> – The number of turns that the session took.</p> </li>
    /// <li> <p> <code>conversationDurationSeconds</code> – The duration of the conversation in seconds.</p> </li>
    /// </ul>
    pub fn name(&self) -> &crate::types::AnalyticsSessionSortByName {
        &self.name
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn order(&self) -> &crate::types::AnalyticsSortOrder {
        &self.order
    }
}
impl SessionDataSortBy {
    /// Creates a new builder-style object to manufacture [`SessionDataSortBy`](crate::types::SessionDataSortBy).
    pub fn builder() -> crate::types::builders::SessionDataSortByBuilder {
        crate::types::builders::SessionDataSortByBuilder::default()
    }
}

/// A builder for [`SessionDataSortBy`](crate::types::SessionDataSortBy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SessionDataSortByBuilder {
    pub(crate) name: ::std::option::Option<crate::types::AnalyticsSessionSortByName>,
    pub(crate) order: ::std::option::Option<crate::types::AnalyticsSortOrder>,
}
impl SessionDataSortByBuilder {
    /// <p>The measure by which to sort the session analytics data.</p>
    /// <ul>
    /// <li> <p> <code>conversationStartTime</code> – The date and time when the conversation began. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p> </li>
    /// <li> <p> <code>numberOfTurns</code> – The number of turns that the session took.</p> </li>
    /// <li> <p> <code>conversationDurationSeconds</code> – The duration of the conversation in seconds.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn name(mut self, input: crate::types::AnalyticsSessionSortByName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The measure by which to sort the session analytics data.</p>
    /// <ul>
    /// <li> <p> <code>conversationStartTime</code> – The date and time when the conversation began. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p> </li>
    /// <li> <p> <code>numberOfTurns</code> – The number of turns that the session took.</p> </li>
    /// <li> <p> <code>conversationDurationSeconds</code> – The duration of the conversation in seconds.</p> </li>
    /// </ul>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AnalyticsSessionSortByName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The measure by which to sort the session analytics data.</p>
    /// <ul>
    /// <li> <p> <code>conversationStartTime</code> – The date and time when the conversation began. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p> </li>
    /// <li> <p> <code>numberOfTurns</code> – The number of turns that the session took.</p> </li>
    /// <li> <p> <code>conversationDurationSeconds</code> – The duration of the conversation in seconds.</p> </li>
    /// </ul>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AnalyticsSessionSortByName> {
        &self.name
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    /// This field is required.
    pub fn order(mut self, input: crate::types::AnalyticsSortOrder) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::AnalyticsSortOrder>) -> Self {
        self.order = input;
        self
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn get_order(&self) -> &::std::option::Option<crate::types::AnalyticsSortOrder> {
        &self.order
    }
    /// Consumes the builder and constructs a [`SessionDataSortBy`](crate::types::SessionDataSortBy).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::SessionDataSortByBuilder::name)
    /// - [`order`](crate::types::builders::SessionDataSortByBuilder::order)
    pub fn build(self) -> ::std::result::Result<crate::types::SessionDataSortBy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SessionDataSortBy {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building SessionDataSortBy",
                )
            })?,
            order: self.order.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "order",
                    "order was not specified but it is required when building SessionDataSortBy",
                )
            })?,
        })
    }
}
