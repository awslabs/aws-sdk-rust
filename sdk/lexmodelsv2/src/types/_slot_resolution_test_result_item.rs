// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the success and failure rate of slot resolution in the results of a test execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SlotResolutionTestResultItem {
    /// <p>The name of the slot.</p>
    pub slot_name: ::std::string::String,
    /// <p>A result for slot resolution in the results of a test execution.</p>
    pub result_counts: ::std::option::Option<crate::types::SlotResolutionTestResultItemCounts>,
}
impl SlotResolutionTestResultItem {
    /// <p>The name of the slot.</p>
    pub fn slot_name(&self) -> &str {
        use std::ops::Deref;
        self.slot_name.deref()
    }
    /// <p>A result for slot resolution in the results of a test execution.</p>
    pub fn result_counts(&self) -> ::std::option::Option<&crate::types::SlotResolutionTestResultItemCounts> {
        self.result_counts.as_ref()
    }
}
impl SlotResolutionTestResultItem {
    /// Creates a new builder-style object to manufacture [`SlotResolutionTestResultItem`](crate::types::SlotResolutionTestResultItem).
    pub fn builder() -> crate::types::builders::SlotResolutionTestResultItemBuilder {
        crate::types::builders::SlotResolutionTestResultItemBuilder::default()
    }
}

/// A builder for [`SlotResolutionTestResultItem`](crate::types::SlotResolutionTestResultItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SlotResolutionTestResultItemBuilder {
    pub(crate) slot_name: ::std::option::Option<::std::string::String>,
    pub(crate) result_counts: ::std::option::Option<crate::types::SlotResolutionTestResultItemCounts>,
}
impl SlotResolutionTestResultItemBuilder {
    /// <p>The name of the slot.</p>
    /// This field is required.
    pub fn slot_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slot_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the slot.</p>
    pub fn set_slot_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slot_name = input;
        self
    }
    /// <p>The name of the slot.</p>
    pub fn get_slot_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.slot_name
    }
    /// <p>A result for slot resolution in the results of a test execution.</p>
    /// This field is required.
    pub fn result_counts(mut self, input: crate::types::SlotResolutionTestResultItemCounts) -> Self {
        self.result_counts = ::std::option::Option::Some(input);
        self
    }
    /// <p>A result for slot resolution in the results of a test execution.</p>
    pub fn set_result_counts(mut self, input: ::std::option::Option<crate::types::SlotResolutionTestResultItemCounts>) -> Self {
        self.result_counts = input;
        self
    }
    /// <p>A result for slot resolution in the results of a test execution.</p>
    pub fn get_result_counts(&self) -> &::std::option::Option<crate::types::SlotResolutionTestResultItemCounts> {
        &self.result_counts
    }
    /// Consumes the builder and constructs a [`SlotResolutionTestResultItem`](crate::types::SlotResolutionTestResultItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`slot_name`](crate::types::builders::SlotResolutionTestResultItemBuilder::slot_name)
    pub fn build(self) -> ::std::result::Result<crate::types::SlotResolutionTestResultItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SlotResolutionTestResultItem {
            slot_name: self.slot_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "slot_name",
                    "slot_name was not specified but it is required when building SlotResolutionTestResultItem",
                )
            })?,
            result_counts: self.result_counts,
        })
    }
}
