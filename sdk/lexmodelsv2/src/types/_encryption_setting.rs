// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The object representing the passwords that were used to encrypt the data related to the bot recommendation, as well as the KMS key ARN used to encrypt the associated metadata.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EncryptionSetting {
    /// <p>The KMS key ARN used to encrypt the metadata associated with the bot recommendation.</p>
    #[doc(hidden)]
    pub kms_key_arn: std::option::Option<std::string::String>,
    /// <p>The password used to encrypt the recommended bot recommendation file.</p>
    #[doc(hidden)]
    pub bot_locale_export_password: std::option::Option<std::string::String>,
    /// <p>The password used to encrypt the associated transcript file.</p>
    #[doc(hidden)]
    pub associated_transcripts_password: std::option::Option<std::string::String>,
}
impl EncryptionSetting {
    /// <p>The KMS key ARN used to encrypt the metadata associated with the bot recommendation.</p>
    pub fn kms_key_arn(&self) -> std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The password used to encrypt the recommended bot recommendation file.</p>
    pub fn bot_locale_export_password(&self) -> std::option::Option<&str> {
        self.bot_locale_export_password.as_deref()
    }
    /// <p>The password used to encrypt the associated transcript file.</p>
    pub fn associated_transcripts_password(&self) -> std::option::Option<&str> {
        self.associated_transcripts_password.as_deref()
    }
}
impl std::fmt::Debug for EncryptionSetting {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EncryptionSetting");
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.field(
            "bot_locale_export_password",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.field(
            "associated_transcripts_password",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.finish()
    }
}
impl EncryptionSetting {
    /// Creates a new builder-style object to manufacture [`EncryptionSetting`](crate::types::EncryptionSetting).
    pub fn builder() -> crate::types::builders::EncryptionSettingBuilder {
        crate::types::builders::EncryptionSettingBuilder::default()
    }
}

/// A builder for [`EncryptionSetting`](crate::types::EncryptionSetting).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct EncryptionSettingBuilder {
    pub(crate) kms_key_arn: std::option::Option<std::string::String>,
    pub(crate) bot_locale_export_password: std::option::Option<std::string::String>,
    pub(crate) associated_transcripts_password: std::option::Option<std::string::String>,
}
impl EncryptionSettingBuilder {
    /// <p>The KMS key ARN used to encrypt the metadata associated with the bot recommendation.</p>
    pub fn kms_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_arn = Some(input.into());
        self
    }
    /// <p>The KMS key ARN used to encrypt the metadata associated with the bot recommendation.</p>
    pub fn set_kms_key_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The password used to encrypt the recommended bot recommendation file.</p>
    pub fn bot_locale_export_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_locale_export_password = Some(input.into());
        self
    }
    /// <p>The password used to encrypt the recommended bot recommendation file.</p>
    pub fn set_bot_locale_export_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.bot_locale_export_password = input;
        self
    }
    /// <p>The password used to encrypt the associated transcript file.</p>
    pub fn associated_transcripts_password(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.associated_transcripts_password = Some(input.into());
        self
    }
    /// <p>The password used to encrypt the associated transcript file.</p>
    pub fn set_associated_transcripts_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.associated_transcripts_password = input;
        self
    }
    /// Consumes the builder and constructs a [`EncryptionSetting`](crate::types::EncryptionSetting).
    pub fn build(self) -> crate::types::EncryptionSetting {
        crate::types::EncryptionSetting {
            kms_key_arn: self.kms_key_arn,
            bot_locale_export_password: self.bot_locale_export_password,
            associated_transcripts_password: self.associated_transcripts_password,
        }
    }
}
impl std::fmt::Debug for EncryptionSettingBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EncryptionSettingBuilder");
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.field(
            "bot_locale_export_password",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.field(
            "associated_transcripts_password",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.finish()
    }
}
