// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Each slot type can have a set of values. Each <code>SlotTypeValue</code> represents a value that the slot type can take.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SlotTypeValue {
    /// <p>The value of the slot type entry.</p>
    pub sample_value: ::std::option::Option<crate::types::SampleValue>,
    /// <p>Additional values related to the slot type entry.</p>
    pub synonyms: ::std::option::Option<::std::vec::Vec<crate::types::SampleValue>>,
}
impl SlotTypeValue {
    /// <p>The value of the slot type entry.</p>
    pub fn sample_value(&self) -> ::std::option::Option<&crate::types::SampleValue> {
        self.sample_value.as_ref()
    }
    /// <p>Additional values related to the slot type entry.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.synonyms.is_none()`.
    pub fn synonyms(&self) -> &[crate::types::SampleValue] {
        self.synonyms.as_deref().unwrap_or_default()
    }
}
impl SlotTypeValue {
    /// Creates a new builder-style object to manufacture [`SlotTypeValue`](crate::types::SlotTypeValue).
    pub fn builder() -> crate::types::builders::SlotTypeValueBuilder {
        crate::types::builders::SlotTypeValueBuilder::default()
    }
}

/// A builder for [`SlotTypeValue`](crate::types::SlotTypeValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SlotTypeValueBuilder {
    pub(crate) sample_value: ::std::option::Option<crate::types::SampleValue>,
    pub(crate) synonyms: ::std::option::Option<::std::vec::Vec<crate::types::SampleValue>>,
}
impl SlotTypeValueBuilder {
    /// <p>The value of the slot type entry.</p>
    pub fn sample_value(mut self, input: crate::types::SampleValue) -> Self {
        self.sample_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the slot type entry.</p>
    pub fn set_sample_value(mut self, input: ::std::option::Option<crate::types::SampleValue>) -> Self {
        self.sample_value = input;
        self
    }
    /// <p>The value of the slot type entry.</p>
    pub fn get_sample_value(&self) -> &::std::option::Option<crate::types::SampleValue> {
        &self.sample_value
    }
    /// Appends an item to `synonyms`.
    ///
    /// To override the contents of this collection use [`set_synonyms`](Self::set_synonyms).
    ///
    /// <p>Additional values related to the slot type entry.</p>
    pub fn synonyms(mut self, input: crate::types::SampleValue) -> Self {
        let mut v = self.synonyms.unwrap_or_default();
        v.push(input);
        self.synonyms = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional values related to the slot type entry.</p>
    pub fn set_synonyms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SampleValue>>) -> Self {
        self.synonyms = input;
        self
    }
    /// <p>Additional values related to the slot type entry.</p>
    pub fn get_synonyms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SampleValue>> {
        &self.synonyms
    }
    /// Consumes the builder and constructs a [`SlotTypeValue`](crate::types::SlotTypeValue).
    pub fn build(self) -> crate::types::SlotTypeValue {
        crate::types::SlotTypeValue {
            sample_value: self.sample_value,
            synonyms: self.synonyms,
        }
    }
}
