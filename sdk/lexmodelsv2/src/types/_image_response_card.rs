// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p>
/// <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImageResponseCard {
    /// <p>The title to display on the response card. The format of the title is determined by the platform displaying the response card.</p>
    #[doc(hidden)]
    pub title: std::option::Option<std::string::String>,
    /// <p>The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.</p>
    #[doc(hidden)]
    pub subtitle: std::option::Option<std::string::String>,
    /// <p>The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.</p>
    #[doc(hidden)]
    pub image_url: std::option::Option<std::string::String>,
    /// <p>A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.</p>
    #[doc(hidden)]
    pub buttons: std::option::Option<std::vec::Vec<crate::types::Button>>,
}
impl ImageResponseCard {
    /// <p>The title to display on the response card. The format of the title is determined by the platform displaying the response card.</p>
    pub fn title(&self) -> std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.</p>
    pub fn subtitle(&self) -> std::option::Option<&str> {
        self.subtitle.as_deref()
    }
    /// <p>The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.</p>
    pub fn image_url(&self) -> std::option::Option<&str> {
        self.image_url.as_deref()
    }
    /// <p>A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.</p>
    pub fn buttons(&self) -> std::option::Option<&[crate::types::Button]> {
        self.buttons.as_deref()
    }
}
impl ImageResponseCard {
    /// Creates a new builder-style object to manufacture [`ImageResponseCard`](crate::types::ImageResponseCard).
    pub fn builder() -> crate::types::builders::ImageResponseCardBuilder {
        crate::types::builders::ImageResponseCardBuilder::default()
    }
}

/// A builder for [`ImageResponseCard`](crate::types::ImageResponseCard).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageResponseCardBuilder {
    pub(crate) title: std::option::Option<std::string::String>,
    pub(crate) subtitle: std::option::Option<std::string::String>,
    pub(crate) image_url: std::option::Option<std::string::String>,
    pub(crate) buttons: std::option::Option<std::vec::Vec<crate::types::Button>>,
}
impl ImageResponseCardBuilder {
    /// <p>The title to display on the response card. The format of the title is determined by the platform displaying the response card.</p>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.title = Some(input.into());
        self
    }
    /// <p>The title to display on the response card. The format of the title is determined by the platform displaying the response card.</p>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.</p>
    pub fn subtitle(mut self, input: impl Into<std::string::String>) -> Self {
        self.subtitle = Some(input.into());
        self
    }
    /// <p>The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.</p>
    pub fn set_subtitle(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subtitle = input;
        self
    }
    /// <p>The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.</p>
    pub fn image_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_url = Some(input.into());
        self
    }
    /// <p>The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.</p>
    pub fn set_image_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_url = input;
        self
    }
    /// Appends an item to `buttons`.
    ///
    /// To override the contents of this collection use [`set_buttons`](Self::set_buttons).
    ///
    /// <p>A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.</p>
    pub fn buttons(mut self, input: crate::types::Button) -> Self {
        let mut v = self.buttons.unwrap_or_default();
        v.push(input);
        self.buttons = Some(v);
        self
    }
    /// <p>A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.</p>
    pub fn set_buttons(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Button>>,
    ) -> Self {
        self.buttons = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageResponseCard`](crate::types::ImageResponseCard).
    pub fn build(self) -> crate::types::ImageResponseCard {
        crate::types::ImageResponseCard {
            title: self.title,
            subtitle: self.subtitle,
            image_url: self.image_url,
            buttons: self.buttons,
        }
    }
}
