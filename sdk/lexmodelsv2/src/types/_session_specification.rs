// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing information about a specific session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SessionSpecification {
    /// <p>The identifier of the alias of the bot that the session was held with.</p>
    pub bot_alias_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the bot that the session was held with.</p>
    pub bot_version: ::std::option::Option<::std::string::String>,
    /// <p>The locale of the bot that the session was held with.</p>
    pub locale_id: ::std::option::Option<::std::string::String>,
    /// <p>The channel that is integrated with the bot that the session was held with.</p>
    pub channel: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the session.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the conversation began. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub conversation_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the conversation ended. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub conversation_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The duration of the conversation in seconds. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub conversation_duration_seconds: ::std::option::Option<i64>,
    /// <p>The final state of the conversation. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub conversation_end_state: ::std::option::Option<crate::types::ConversationEndState>,
    /// <p>The mode of the session. The possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>Speech</code> – The session was spoken.</p> </li>
    /// <li> <p> <code>Text</code> – The session was written.</p> </li>
    /// <li> <p> <code>DTMF</code> – The session used a touch-tone keypad (Dual Tone Multi-Frequency).</p> </li>
    /// <li> <p> <code>MultiMode</code> – The session used multiple modes.</p> </li>
    /// </ul>
    pub mode: ::std::option::Option<crate::types::AnalyticsModality>,
    /// <p>The number of turns that the session took.</p>
    pub number_of_turns: ::std::option::Option<i64>,
    /// <p>A list of objects containing the name of an intent that was invoked.</p>
    pub invoked_intent_samples: ::std::option::Option<::std::vec::Vec<crate::types::InvokedIntentSample>>,
    /// <p>The identifier of the first request in a session.</p>
    pub originating_request_id: ::std::option::Option<::std::string::String>,
}
impl SessionSpecification {
    /// <p>The identifier of the alias of the bot that the session was held with.</p>
    pub fn bot_alias_id(&self) -> ::std::option::Option<&str> {
        self.bot_alias_id.as_deref()
    }
    /// <p>The version of the bot that the session was held with.</p>
    pub fn bot_version(&self) -> ::std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>The locale of the bot that the session was held with.</p>
    pub fn locale_id(&self) -> ::std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p>The channel that is integrated with the bot that the session was held with.</p>
    pub fn channel(&self) -> ::std::option::Option<&str> {
        self.channel.as_deref()
    }
    /// <p>The identifier of the session.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The date and time when the conversation began. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn conversation_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.conversation_start_time.as_ref()
    }
    /// <p>The date and time when the conversation ended. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn conversation_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.conversation_end_time.as_ref()
    }
    /// <p>The duration of the conversation in seconds. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn conversation_duration_seconds(&self) -> ::std::option::Option<i64> {
        self.conversation_duration_seconds
    }
    /// <p>The final state of the conversation. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn conversation_end_state(&self) -> ::std::option::Option<&crate::types::ConversationEndState> {
        self.conversation_end_state.as_ref()
    }
    /// <p>The mode of the session. The possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>Speech</code> – The session was spoken.</p> </li>
    /// <li> <p> <code>Text</code> – The session was written.</p> </li>
    /// <li> <p> <code>DTMF</code> – The session used a touch-tone keypad (Dual Tone Multi-Frequency).</p> </li>
    /// <li> <p> <code>MultiMode</code> – The session used multiple modes.</p> </li>
    /// </ul>
    pub fn mode(&self) -> ::std::option::Option<&crate::types::AnalyticsModality> {
        self.mode.as_ref()
    }
    /// <p>The number of turns that the session took.</p>
    pub fn number_of_turns(&self) -> ::std::option::Option<i64> {
        self.number_of_turns
    }
    /// <p>A list of objects containing the name of an intent that was invoked.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.invoked_intent_samples.is_none()`.
    pub fn invoked_intent_samples(&self) -> &[crate::types::InvokedIntentSample] {
        self.invoked_intent_samples.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the first request in a session.</p>
    pub fn originating_request_id(&self) -> ::std::option::Option<&str> {
        self.originating_request_id.as_deref()
    }
}
impl SessionSpecification {
    /// Creates a new builder-style object to manufacture [`SessionSpecification`](crate::types::SessionSpecification).
    pub fn builder() -> crate::types::builders::SessionSpecificationBuilder {
        crate::types::builders::SessionSpecificationBuilder::default()
    }
}

/// A builder for [`SessionSpecification`](crate::types::SessionSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SessionSpecificationBuilder {
    pub(crate) bot_alias_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_version: ::std::option::Option<::std::string::String>,
    pub(crate) locale_id: ::std::option::Option<::std::string::String>,
    pub(crate) channel: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) conversation_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) conversation_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) conversation_duration_seconds: ::std::option::Option<i64>,
    pub(crate) conversation_end_state: ::std::option::Option<crate::types::ConversationEndState>,
    pub(crate) mode: ::std::option::Option<crate::types::AnalyticsModality>,
    pub(crate) number_of_turns: ::std::option::Option<i64>,
    pub(crate) invoked_intent_samples: ::std::option::Option<::std::vec::Vec<crate::types::InvokedIntentSample>>,
    pub(crate) originating_request_id: ::std::option::Option<::std::string::String>,
}
impl SessionSpecificationBuilder {
    /// <p>The identifier of the alias of the bot that the session was held with.</p>
    pub fn bot_alias_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_alias_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the alias of the bot that the session was held with.</p>
    pub fn set_bot_alias_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_alias_id = input;
        self
    }
    /// <p>The identifier of the alias of the bot that the session was held with.</p>
    pub fn get_bot_alias_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_alias_id
    }
    /// <p>The version of the bot that the session was held with.</p>
    pub fn bot_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the bot that the session was held with.</p>
    pub fn set_bot_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The version of the bot that the session was held with.</p>
    pub fn get_bot_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_version
    }
    /// <p>The locale of the bot that the session was held with.</p>
    pub fn locale_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The locale of the bot that the session was held with.</p>
    pub fn set_locale_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The locale of the bot that the session was held with.</p>
    pub fn get_locale_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale_id
    }
    /// <p>The channel that is integrated with the bot that the session was held with.</p>
    pub fn channel(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The channel that is integrated with the bot that the session was held with.</p>
    pub fn set_channel(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel = input;
        self
    }
    /// <p>The channel that is integrated with the bot that the session was held with.</p>
    pub fn get_channel(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel
    }
    /// <p>The identifier of the session.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The identifier of the session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The date and time when the conversation began. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn conversation_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.conversation_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the conversation began. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn set_conversation_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.conversation_start_time = input;
        self
    }
    /// <p>The date and time when the conversation began. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn get_conversation_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.conversation_start_time
    }
    /// <p>The date and time when the conversation ended. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn conversation_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.conversation_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the conversation ended. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn set_conversation_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.conversation_end_time = input;
        self
    }
    /// <p>The date and time when the conversation ended. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn get_conversation_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.conversation_end_time
    }
    /// <p>The duration of the conversation in seconds. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn conversation_duration_seconds(mut self, input: i64) -> Self {
        self.conversation_duration_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration of the conversation in seconds. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn set_conversation_duration_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.conversation_duration_seconds = input;
        self
    }
    /// <p>The duration of the conversation in seconds. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn get_conversation_duration_seconds(&self) -> &::std::option::Option<i64> {
        &self.conversation_duration_seconds
    }
    /// <p>The final state of the conversation. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn conversation_end_state(mut self, input: crate::types::ConversationEndState) -> Self {
        self.conversation_end_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The final state of the conversation. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn set_conversation_end_state(mut self, input: ::std::option::Option<crate::types::ConversationEndState>) -> Self {
        self.conversation_end_state = input;
        self
    }
    /// <p>The final state of the conversation. A conversation is defined as a unique combination of a <code>sessionId</code> and an <code>originatingRequestId</code>.</p>
    pub fn get_conversation_end_state(&self) -> &::std::option::Option<crate::types::ConversationEndState> {
        &self.conversation_end_state
    }
    /// <p>The mode of the session. The possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>Speech</code> – The session was spoken.</p> </li>
    /// <li> <p> <code>Text</code> – The session was written.</p> </li>
    /// <li> <p> <code>DTMF</code> – The session used a touch-tone keypad (Dual Tone Multi-Frequency).</p> </li>
    /// <li> <p> <code>MultiMode</code> – The session used multiple modes.</p> </li>
    /// </ul>
    pub fn mode(mut self, input: crate::types::AnalyticsModality) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode of the session. The possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>Speech</code> – The session was spoken.</p> </li>
    /// <li> <p> <code>Text</code> – The session was written.</p> </li>
    /// <li> <p> <code>DTMF</code> – The session used a touch-tone keypad (Dual Tone Multi-Frequency).</p> </li>
    /// <li> <p> <code>MultiMode</code> – The session used multiple modes.</p> </li>
    /// </ul>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::AnalyticsModality>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The mode of the session. The possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>Speech</code> – The session was spoken.</p> </li>
    /// <li> <p> <code>Text</code> – The session was written.</p> </li>
    /// <li> <p> <code>DTMF</code> – The session used a touch-tone keypad (Dual Tone Multi-Frequency).</p> </li>
    /// <li> <p> <code>MultiMode</code> – The session used multiple modes.</p> </li>
    /// </ul>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::AnalyticsModality> {
        &self.mode
    }
    /// <p>The number of turns that the session took.</p>
    pub fn number_of_turns(mut self, input: i64) -> Self {
        self.number_of_turns = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of turns that the session took.</p>
    pub fn set_number_of_turns(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_turns = input;
        self
    }
    /// <p>The number of turns that the session took.</p>
    pub fn get_number_of_turns(&self) -> &::std::option::Option<i64> {
        &self.number_of_turns
    }
    /// Appends an item to `invoked_intent_samples`.
    ///
    /// To override the contents of this collection use [`set_invoked_intent_samples`](Self::set_invoked_intent_samples).
    ///
    /// <p>A list of objects containing the name of an intent that was invoked.</p>
    pub fn invoked_intent_samples(mut self, input: crate::types::InvokedIntentSample) -> Self {
        let mut v = self.invoked_intent_samples.unwrap_or_default();
        v.push(input);
        self.invoked_intent_samples = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects containing the name of an intent that was invoked.</p>
    pub fn set_invoked_intent_samples(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InvokedIntentSample>>) -> Self {
        self.invoked_intent_samples = input;
        self
    }
    /// <p>A list of objects containing the name of an intent that was invoked.</p>
    pub fn get_invoked_intent_samples(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InvokedIntentSample>> {
        &self.invoked_intent_samples
    }
    /// <p>The identifier of the first request in a session.</p>
    pub fn originating_request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.originating_request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the first request in a session.</p>
    pub fn set_originating_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.originating_request_id = input;
        self
    }
    /// <p>The identifier of the first request in a session.</p>
    pub fn get_originating_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.originating_request_id
    }
    /// Consumes the builder and constructs a [`SessionSpecification`](crate::types::SessionSpecification).
    pub fn build(self) -> crate::types::SessionSpecification {
        crate::types::SessionSpecification {
            bot_alias_id: self.bot_alias_id,
            bot_version: self.bot_version,
            locale_id: self.locale_id,
            channel: self.channel,
            session_id: self.session_id,
            conversation_start_time: self.conversation_start_time,
            conversation_end_time: self.conversation_end_time,
            conversation_duration_seconds: self.conversation_duration_seconds,
            conversation_end_state: self.conversation_end_state,
            mode: self.mode,
            number_of_turns: self.number_of_turns,
            invoked_intent_samples: self.invoked_intent_samples,
            originating_request_id: self.originating_request_id,
        }
    }
}
