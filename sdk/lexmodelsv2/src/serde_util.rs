// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn data_privacy_correct_errors(mut builder: crate::types::builders::DataPrivacyBuilder) -> crate::types::builders::DataPrivacyBuilder {
    if builder.child_directed.is_none() {
        builder.child_directed = Some(Default::default())
    }
    builder
}

pub(crate) fn dialog_code_hook_settings_correct_errors(
    mut builder: crate::types::builders::DialogCodeHookSettingsBuilder,
) -> crate::types::builders::DialogCodeHookSettingsBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn fulfillment_code_hook_settings_correct_errors(
    mut builder: crate::types::builders::FulfillmentCodeHookSettingsBuilder,
) -> crate::types::builders::FulfillmentCodeHookSettingsBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn intent_confirmation_setting_correct_errors(
    mut builder: crate::types::builders::IntentConfirmationSettingBuilder,
) -> crate::types::builders::IntentConfirmationSettingBuilder {
    if builder.prompt_specification.is_none() {
        builder.prompt_specification = {
            let builder = crate::types::builders::PromptSpecificationBuilder::default();
            crate::serde_util::prompt_specification_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn kendra_configuration_correct_errors(
    mut builder: crate::types::builders::KendraConfigurationBuilder,
) -> crate::types::builders::KendraConfigurationBuilder {
    if builder.kendra_index.is_none() {
        builder.kendra_index = Some(Default::default())
    }
    builder
}

pub(crate) fn obfuscation_setting_correct_errors(
    mut builder: crate::types::builders::ObfuscationSettingBuilder,
) -> crate::types::builders::ObfuscationSettingBuilder {
    if builder.obfuscation_setting_type.is_none() {
        builder.obfuscation_setting_type = "no value was set".parse::<crate::types::ObfuscationSettingType>().ok()
    }
    builder
}

pub(crate) fn sentiment_analysis_settings_correct_errors(
    mut builder: crate::types::builders::SentimentAnalysisSettingsBuilder,
) -> crate::types::builders::SentimentAnalysisSettingsBuilder {
    if builder.detect_sentiment.is_none() {
        builder.detect_sentiment = Some(Default::default())
    }
    builder
}

pub(crate) fn slot_value_elicitation_setting_correct_errors(
    mut builder: crate::types::builders::SlotValueElicitationSettingBuilder,
) -> crate::types::builders::SlotValueElicitationSettingBuilder {
    if builder.slot_constraint.is_none() {
        builder.slot_constraint = "no value was set".parse::<crate::types::SlotConstraint>().ok()
    }
    builder
}

pub(crate) fn slot_value_selection_setting_correct_errors(
    mut builder: crate::types::builders::SlotValueSelectionSettingBuilder,
) -> crate::types::builders::SlotValueSelectionSettingBuilder {
    if builder.resolution_strategy.is_none() {
        builder.resolution_strategy = "no value was set".parse::<crate::types::SlotValueResolutionStrategy>().ok()
    }
    builder
}

pub(crate) fn test_set_discrepancy_errors_correct_errors(
    mut builder: crate::types::builders::TestSetDiscrepancyErrorsBuilder,
) -> crate::types::builders::TestSetDiscrepancyErrorsBuilder {
    if builder.intent_discrepancies.is_none() {
        builder.intent_discrepancies = Some(Default::default())
    }
    if builder.slot_discrepancies.is_none() {
        builder.slot_discrepancies = Some(Default::default())
    }
    builder
}

pub(crate) fn test_set_storage_location_correct_errors(
    mut builder: crate::types::builders::TestSetStorageLocationBuilder,
) -> crate::types::builders::TestSetStorageLocationBuilder {
    if builder.s3_bucket_name.is_none() {
        builder.s3_bucket_name = Some(Default::default())
    }
    if builder.s3_path.is_none() {
        builder.s3_path = Some(Default::default())
    }
    builder
}

pub(crate) fn utterance_aggregation_duration_correct_errors(
    mut builder: crate::types::builders::UtteranceAggregationDurationBuilder,
) -> crate::types::builders::UtteranceAggregationDurationBuilder {
    if builder.relative_aggregation_duration.is_none() {
        builder.relative_aggregation_duration = {
            let builder = crate::types::builders::RelativeAggregationDurationBuilder::default();
            crate::serde_util::relative_aggregation_duration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn voice_settings_correct_errors(
    mut builder: crate::types::builders::VoiceSettingsBuilder,
) -> crate::types::builders::VoiceSettingsBuilder {
    if builder.voice_id.is_none() {
        builder.voice_id = Some(Default::default())
    }
    builder
}

pub(crate) fn bot_alias_locale_settings_correct_errors(
    mut builder: crate::types::builders::BotAliasLocaleSettingsBuilder,
) -> crate::types::builders::BotAliasLocaleSettingsBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn bot_alias_test_execution_target_correct_errors(
    mut builder: crate::types::builders::BotAliasTestExecutionTargetBuilder,
) -> crate::types::builders::BotAliasTestExecutionTargetBuilder {
    if builder.bot_id.is_none() {
        builder.bot_id = Some(Default::default())
    }
    if builder.bot_alias_id.is_none() {
        builder.bot_alias_id = Some(Default::default())
    }
    if builder.locale_id.is_none() {
        builder.locale_id = Some(Default::default())
    }
    builder
}

pub(crate) fn bot_export_specification_correct_errors(
    mut builder: crate::types::builders::BotExportSpecificationBuilder,
) -> crate::types::builders::BotExportSpecificationBuilder {
    if builder.bot_id.is_none() {
        builder.bot_id = Some(Default::default())
    }
    if builder.bot_version.is_none() {
        builder.bot_version = Some(Default::default())
    }
    builder
}

pub(crate) fn bot_import_specification_correct_errors(
    mut builder: crate::types::builders::BotImportSpecificationBuilder,
) -> crate::types::builders::BotImportSpecificationBuilder {
    if builder.bot_name.is_none() {
        builder.bot_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.data_privacy.is_none() {
        builder.data_privacy = {
            let builder = crate::types::builders::DataPrivacyBuilder::default();
            Some(crate::serde_util::data_privacy_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn bot_locale_export_specification_correct_errors(
    mut builder: crate::types::builders::BotLocaleExportSpecificationBuilder,
) -> crate::types::builders::BotLocaleExportSpecificationBuilder {
    if builder.bot_id.is_none() {
        builder.bot_id = Some(Default::default())
    }
    if builder.bot_version.is_none() {
        builder.bot_version = Some(Default::default())
    }
    if builder.locale_id.is_none() {
        builder.locale_id = Some(Default::default())
    }
    builder
}

pub(crate) fn bot_locale_history_event_correct_errors(
    mut builder: crate::types::builders::BotLocaleHistoryEventBuilder,
) -> crate::types::builders::BotLocaleHistoryEventBuilder {
    if builder.event.is_none() {
        builder.event = Some(Default::default())
    }
    if builder.event_date.is_none() {
        builder.event_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn bot_locale_import_specification_correct_errors(
    mut builder: crate::types::builders::BotLocaleImportSpecificationBuilder,
) -> crate::types::builders::BotLocaleImportSpecificationBuilder {
    if builder.bot_id.is_none() {
        builder.bot_id = Some(Default::default())
    }
    if builder.bot_version.is_none() {
        builder.bot_version = Some(Default::default())
    }
    if builder.locale_id.is_none() {
        builder.locale_id = Some(Default::default())
    }
    builder
}

pub(crate) fn bot_member_correct_errors(mut builder: crate::types::builders::BotMemberBuilder) -> crate::types::builders::BotMemberBuilder {
    if builder.bot_member_id.is_none() {
        builder.bot_member_id = Some(Default::default())
    }
    if builder.bot_member_name.is_none() {
        builder.bot_member_name = Some(Default::default())
    }
    if builder.bot_member_alias_id.is_none() {
        builder.bot_member_alias_id = Some(Default::default())
    }
    if builder.bot_member_alias_name.is_none() {
        builder.bot_member_alias_name = Some(Default::default())
    }
    if builder.bot_member_version.is_none() {
        builder.bot_member_version = Some(Default::default())
    }
    builder
}

pub(crate) fn bot_recommendation_summary_correct_errors(
    mut builder: crate::types::builders::BotRecommendationSummaryBuilder,
) -> crate::types::builders::BotRecommendationSummaryBuilder {
    if builder.bot_recommendation_status.is_none() {
        builder.bot_recommendation_status = "no value was set".parse::<crate::types::BotRecommendationStatus>().ok()
    }
    if builder.bot_recommendation_id.is_none() {
        builder.bot_recommendation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn bot_version_locale_details_correct_errors(
    mut builder: crate::types::builders::BotVersionLocaleDetailsBuilder,
) -> crate::types::builders::BotVersionLocaleDetailsBuilder {
    if builder.source_bot_version.is_none() {
        builder.source_bot_version = Some(Default::default())
    }
    builder
}

pub(crate) fn conditional_specification_correct_errors(
    mut builder: crate::types::builders::ConditionalSpecificationBuilder,
) -> crate::types::builders::ConditionalSpecificationBuilder {
    if builder.active.is_none() {
        builder.active = Some(Default::default())
    }
    if builder.conditional_branches.is_none() {
        builder.conditional_branches = Some(Default::default())
    }
    if builder.default_branch.is_none() {
        builder.default_branch = {
            let builder = crate::types::builders::DefaultConditionalBranchBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn conversation_level_test_results_correct_errors(
    mut builder: crate::types::builders::ConversationLevelTestResultsBuilder,
) -> crate::types::builders::ConversationLevelTestResultsBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn conversation_logs_data_source_correct_errors(
    mut builder: crate::types::builders::ConversationLogsDataSourceBuilder,
) -> crate::types::builders::ConversationLogsDataSourceBuilder {
    if builder.bot_id.is_none() {
        builder.bot_id = Some(Default::default())
    }
    if builder.bot_alias_id.is_none() {
        builder.bot_alias_id = Some(Default::default())
    }
    if builder.locale_id.is_none() {
        builder.locale_id = Some(Default::default())
    }
    if builder.filter.is_none() {
        builder.filter = {
            let builder = crate::types::builders::ConversationLogsDataSourceFilterByBuilder::default();
            crate::serde_util::conversation_logs_data_source_filter_by_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn custom_vocabulary_export_specification_correct_errors(
    mut builder: crate::types::builders::CustomVocabularyExportSpecificationBuilder,
) -> crate::types::builders::CustomVocabularyExportSpecificationBuilder {
    if builder.bot_id.is_none() {
        builder.bot_id = Some(Default::default())
    }
    if builder.bot_version.is_none() {
        builder.bot_version = Some(Default::default())
    }
    if builder.locale_id.is_none() {
        builder.locale_id = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_vocabulary_import_specification_correct_errors(
    mut builder: crate::types::builders::CustomVocabularyImportSpecificationBuilder,
) -> crate::types::builders::CustomVocabularyImportSpecificationBuilder {
    if builder.bot_id.is_none() {
        builder.bot_id = Some(Default::default())
    }
    if builder.bot_version.is_none() {
        builder.bot_version = Some(Default::default())
    }
    if builder.locale_id.is_none() {
        builder.locale_id = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_vocabulary_item_correct_errors(
    mut builder: crate::types::builders::CustomVocabularyItemBuilder,
) -> crate::types::builders::CustomVocabularyItemBuilder {
    if builder.item_id.is_none() {
        builder.item_id = Some(Default::default())
    }
    if builder.phrase.is_none() {
        builder.phrase = Some(Default::default())
    }
    builder
}

pub(crate) fn dialog_code_hook_invocation_setting_correct_errors(
    mut builder: crate::types::builders::DialogCodeHookInvocationSettingBuilder,
) -> crate::types::builders::DialogCodeHookInvocationSettingBuilder {
    if builder.enable_code_hook_invocation.is_none() {
        builder.enable_code_hook_invocation = Some(Default::default())
    }
    if builder.active.is_none() {
        builder.active = Some(Default::default())
    }
    if builder.post_code_hook_specification.is_none() {
        builder.post_code_hook_specification = {
            let builder = crate::types::builders::PostDialogCodeHookInvocationSpecificationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn elicitation_code_hook_invocation_setting_correct_errors(
    mut builder: crate::types::builders::ElicitationCodeHookInvocationSettingBuilder,
) -> crate::types::builders::ElicitationCodeHookInvocationSettingBuilder {
    if builder.enable_code_hook_invocation.is_none() {
        builder.enable_code_hook_invocation = Some(Default::default())
    }
    builder
}

pub(crate) fn fulfillment_updates_specification_correct_errors(
    mut builder: crate::types::builders::FulfillmentUpdatesSpecificationBuilder,
) -> crate::types::builders::FulfillmentUpdatesSpecificationBuilder {
    if builder.active.is_none() {
        builder.active = Some(Default::default())
    }
    builder
}

pub(crate) fn input_context_correct_errors(mut builder: crate::types::builders::InputContextBuilder) -> crate::types::builders::InputContextBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn intent_classification_test_results_correct_errors(
    mut builder: crate::types::builders::IntentClassificationTestResultsBuilder,
) -> crate::types::builders::IntentClassificationTestResultsBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn intent_level_slot_resolution_test_results_correct_errors(
    mut builder: crate::types::builders::IntentLevelSlotResolutionTestResultsBuilder,
) -> crate::types::builders::IntentLevelSlotResolutionTestResultsBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn output_context_correct_errors(
    mut builder: crate::types::builders::OutputContextBuilder,
) -> crate::types::builders::OutputContextBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.time_to_live_in_seconds.is_none() {
        builder.time_to_live_in_seconds = Some(Default::default())
    }
    if builder.turns_to_live.is_none() {
        builder.turns_to_live = Some(Default::default())
    }
    builder
}

pub(crate) fn overall_test_results_correct_errors(
    mut builder: crate::types::builders::OverallTestResultsBuilder,
) -> crate::types::builders::OverallTestResultsBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn parent_bot_network_correct_errors(
    mut builder: crate::types::builders::ParentBotNetworkBuilder,
) -> crate::types::builders::ParentBotNetworkBuilder {
    if builder.bot_id.is_none() {
        builder.bot_id = Some(Default::default())
    }
    if builder.bot_version.is_none() {
        builder.bot_version = Some(Default::default())
    }
    builder
}

pub(crate) fn prompt_specification_correct_errors(
    mut builder: crate::types::builders::PromptSpecificationBuilder,
) -> crate::types::builders::PromptSpecificationBuilder {
    if builder.message_groups.is_none() {
        builder.message_groups = Some(Default::default())
    }
    if builder.max_retries.is_none() {
        builder.max_retries = Some(Default::default())
    }
    builder
}

pub(crate) fn relative_aggregation_duration_correct_errors(
    mut builder: crate::types::builders::RelativeAggregationDurationBuilder,
) -> crate::types::builders::RelativeAggregationDurationBuilder {
    if builder.time_dimension.is_none() {
        builder.time_dimension = "no value was set".parse::<crate::types::TimeDimension>().ok()
    }
    if builder.time_value.is_none() {
        builder.time_value = Some(Default::default())
    }
    builder
}

pub(crate) fn response_specification_correct_errors(
    mut builder: crate::types::builders::ResponseSpecificationBuilder,
) -> crate::types::builders::ResponseSpecificationBuilder {
    if builder.message_groups.is_none() {
        builder.message_groups = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_bucket_transcript_source_correct_errors(
    mut builder: crate::types::builders::S3BucketTranscriptSourceBuilder,
) -> crate::types::builders::S3BucketTranscriptSourceBuilder {
    if builder.s3_bucket_name.is_none() {
        builder.s3_bucket_name = Some(Default::default())
    }
    if builder.transcript_format.is_none() {
        builder.transcript_format = "no value was set".parse::<crate::types::TranscriptFormat>().ok()
    }
    builder
}

pub(crate) fn sample_utterance_correct_errors(
    mut builder: crate::types::builders::SampleUtteranceBuilder,
) -> crate::types::builders::SampleUtteranceBuilder {
    if builder.utterance.is_none() {
        builder.utterance = Some(Default::default())
    }
    builder
}

pub(crate) fn slot_default_value_specification_correct_errors(
    mut builder: crate::types::builders::SlotDefaultValueSpecificationBuilder,
) -> crate::types::builders::SlotDefaultValueSpecificationBuilder {
    if builder.default_value_list.is_none() {
        builder.default_value_list = Some(Default::default())
    }
    builder
}

pub(crate) fn slot_priority_correct_errors(mut builder: crate::types::builders::SlotPriorityBuilder) -> crate::types::builders::SlotPriorityBuilder {
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    if builder.slot_id.is_none() {
        builder.slot_id = Some(Default::default())
    }
    builder
}

pub(crate) fn slot_value_regex_filter_correct_errors(
    mut builder: crate::types::builders::SlotValueRegexFilterBuilder,
) -> crate::types::builders::SlotValueRegexFilterBuilder {
    if builder.pattern.is_none() {
        builder.pattern = Some(Default::default())
    }
    builder
}

pub(crate) fn test_set_discrepancy_report_bot_alias_target_correct_errors(
    mut builder: crate::types::builders::TestSetDiscrepancyReportBotAliasTargetBuilder,
) -> crate::types::builders::TestSetDiscrepancyReportBotAliasTargetBuilder {
    if builder.bot_id.is_none() {
        builder.bot_id = Some(Default::default())
    }
    if builder.bot_alias_id.is_none() {
        builder.bot_alias_id = Some(Default::default())
    }
    if builder.locale_id.is_none() {
        builder.locale_id = Some(Default::default())
    }
    builder
}

pub(crate) fn test_set_export_specification_correct_errors(
    mut builder: crate::types::builders::TestSetExportSpecificationBuilder,
) -> crate::types::builders::TestSetExportSpecificationBuilder {
    if builder.test_set_id.is_none() {
        builder.test_set_id = Some(Default::default())
    }
    builder
}

pub(crate) fn test_set_import_resource_specification_correct_errors(
    mut builder: crate::types::builders::TestSetImportResourceSpecificationBuilder,
) -> crate::types::builders::TestSetImportResourceSpecificationBuilder {
    if builder.test_set_name.is_none() {
        builder.test_set_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.storage_location.is_none() {
        builder.storage_location = {
            let builder = crate::types::builders::TestSetStorageLocationBuilder::default();
            crate::serde_util::test_set_storage_location_correct_errors(builder).build().ok()
        }
    }
    if builder.import_input_location.is_none() {
        builder.import_input_location = {
            let builder = crate::types::builders::TestSetImportInputLocationBuilder::default();
            crate::serde_util::test_set_import_input_location_correct_errors(builder).build().ok()
        }
    }
    if builder.modality.is_none() {
        builder.modality = "no value was set".parse::<crate::types::TestSetModality>().ok()
    }
    builder
}

pub(crate) fn test_set_turn_record_correct_errors(
    mut builder: crate::types::builders::TestSetTurnRecordBuilder,
) -> crate::types::builders::TestSetTurnRecordBuilder {
    if builder.record_number.is_none() {
        builder.record_number = Some(Default::default())
    }
    if builder.turn_specification.is_none() {
        builder.turn_specification = {
            let builder = crate::types::builders::TurnSpecificationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn utterance_level_test_results_correct_errors(
    mut builder: crate::types::builders::UtteranceLevelTestResultsBuilder,
) -> crate::types::builders::UtteranceLevelTestResultsBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn wait_and_continue_specification_correct_errors(
    mut builder: crate::types::builders::WaitAndContinueSpecificationBuilder,
) -> crate::types::builders::WaitAndContinueSpecificationBuilder {
    if builder.waiting_response.is_none() {
        builder.waiting_response = {
            let builder = crate::types::builders::ResponseSpecificationBuilder::default();
            crate::serde_util::response_specification_correct_errors(builder).build().ok()
        }
    }
    if builder.continue_response.is_none() {
        builder.continue_response = {
            let builder = crate::types::builders::ResponseSpecificationBuilder::default();
            crate::serde_util::response_specification_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn audio_log_setting_correct_errors(
    mut builder: crate::types::builders::AudioLogSettingBuilder,
) -> crate::types::builders::AudioLogSettingBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::AudioLogDestinationBuilder::default();
            Some(crate::serde_util::audio_log_destination_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn code_hook_specification_correct_errors(
    mut builder: crate::types::builders::CodeHookSpecificationBuilder,
) -> crate::types::builders::CodeHookSpecificationBuilder {
    if builder.lambda_code_hook.is_none() {
        builder.lambda_code_hook = {
            let builder = crate::types::builders::LambdaCodeHookBuilder::default();
            crate::serde_util::lambda_code_hook_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn conversation_logs_data_source_filter_by_correct_errors(
    mut builder: crate::types::builders::ConversationLogsDataSourceFilterByBuilder,
) -> crate::types::builders::ConversationLogsDataSourceFilterByBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.input_mode.is_none() {
        builder.input_mode = "no value was set".parse::<crate::types::ConversationLogsInputModeFilter>().ok()
    }
    builder
}

pub(crate) fn dialog_action_correct_errors(mut builder: crate::types::builders::DialogActionBuilder) -> crate::types::builders::DialogActionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DialogActionType>().ok()
    }
    builder
}

pub(crate) fn fulfillment_start_response_specification_correct_errors(
    mut builder: crate::types::builders::FulfillmentStartResponseSpecificationBuilder,
) -> crate::types::builders::FulfillmentStartResponseSpecificationBuilder {
    if builder.delay_in_seconds.is_none() {
        builder.delay_in_seconds = Some(Default::default())
    }
    if builder.message_groups.is_none() {
        builder.message_groups = Some(Default::default())
    }
    builder
}

pub(crate) fn fulfillment_update_response_specification_correct_errors(
    mut builder: crate::types::builders::FulfillmentUpdateResponseSpecificationBuilder,
) -> crate::types::builders::FulfillmentUpdateResponseSpecificationBuilder {
    if builder.frequency_in_seconds.is_none() {
        builder.frequency_in_seconds = Some(Default::default())
    }
    if builder.message_groups.is_none() {
        builder.message_groups = Some(Default::default())
    }
    builder
}

pub(crate) fn grammar_slot_type_source_correct_errors(
    mut builder: crate::types::builders::GrammarSlotTypeSourceBuilder,
) -> crate::types::builders::GrammarSlotTypeSourceBuilder {
    if builder.s3_bucket_name.is_none() {
        builder.s3_bucket_name = Some(Default::default())
    }
    if builder.s3_object_key.is_none() {
        builder.s3_object_key = Some(Default::default())
    }
    builder
}

pub(crate) fn sample_value_correct_errors(mut builder: crate::types::builders::SampleValueBuilder) -> crate::types::builders::SampleValueBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn specifications_correct_errors(
    mut builder: crate::types::builders::SpecificationsBuilder,
) -> crate::types::builders::SpecificationsBuilder {
    if builder.slot_type_id.is_none() {
        builder.slot_type_id = Some(Default::default())
    }
    if builder.value_elicitation_setting.is_none() {
        builder.value_elicitation_setting = {
            let builder = crate::types::builders::SubSlotValueElicitationSettingBuilder::default();
            Some(crate::serde_util::sub_slot_value_elicitation_setting_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn still_waiting_response_specification_correct_errors(
    mut builder: crate::types::builders::StillWaitingResponseSpecificationBuilder,
) -> crate::types::builders::StillWaitingResponseSpecificationBuilder {
    if builder.message_groups.is_none() {
        builder.message_groups = Some(Default::default())
    }
    if builder.frequency_in_seconds.is_none() {
        builder.frequency_in_seconds = Some(Default::default())
    }
    if builder.timeout_in_seconds.is_none() {
        builder.timeout_in_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn sub_slot_type_composition_correct_errors(
    mut builder: crate::types::builders::SubSlotTypeCompositionBuilder,
) -> crate::types::builders::SubSlotTypeCompositionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.slot_type_id.is_none() {
        builder.slot_type_id = Some(Default::default())
    }
    builder
}

pub(crate) fn test_set_import_input_location_correct_errors(
    mut builder: crate::types::builders::TestSetImportInputLocationBuilder,
) -> crate::types::builders::TestSetImportInputLocationBuilder {
    if builder.s3_bucket_name.is_none() {
        builder.s3_bucket_name = Some(Default::default())
    }
    if builder.s3_path.is_none() {
        builder.s3_path = Some(Default::default())
    }
    builder
}

pub(crate) fn test_set_intent_discrepancy_item_correct_errors(
    mut builder: crate::types::builders::TestSetIntentDiscrepancyItemBuilder,
) -> crate::types::builders::TestSetIntentDiscrepancyItemBuilder {
    if builder.intent_name.is_none() {
        builder.intent_name = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn test_set_slot_discrepancy_item_correct_errors(
    mut builder: crate::types::builders::TestSetSlotDiscrepancyItemBuilder,
) -> crate::types::builders::TestSetSlotDiscrepancyItemBuilder {
    if builder.intent_name.is_none() {
        builder.intent_name = Some(Default::default())
    }
    if builder.slot_name.is_none() {
        builder.slot_name = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn text_log_setting_correct_errors(
    mut builder: crate::types::builders::TextLogSettingBuilder,
) -> crate::types::builders::TextLogSettingBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::TextLogDestinationBuilder::default();
            Some(crate::serde_util::text_log_destination_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn agent_turn_specification_correct_errors(
    mut builder: crate::types::builders::AgentTurnSpecificationBuilder,
) -> crate::types::builders::AgentTurnSpecificationBuilder {
    if builder.agent_prompt.is_none() {
        builder.agent_prompt = Some(Default::default())
    }
    builder
}

pub(crate) fn audio_log_destination_correct_errors(
    mut builder: crate::types::builders::AudioLogDestinationBuilder,
) -> crate::types::builders::AudioLogDestinationBuilder {
    if builder.s3_bucket.is_none() {
        builder.s3_bucket = {
            let builder = crate::types::builders::S3BucketLogDestinationBuilder::default();
            crate::serde_util::s3_bucket_log_destination_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn conditional_branch_correct_errors(
    mut builder: crate::types::builders::ConditionalBranchBuilder,
) -> crate::types::builders::ConditionalBranchBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.condition.is_none() {
        builder.condition = {
            let builder = crate::types::builders::ConditionBuilder::default();
            crate::serde_util::condition_correct_errors(builder).build().ok()
        }
    }
    if builder.next_step.is_none() {
        builder.next_step = {
            let builder = crate::types::builders::DialogStateBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn conversation_level_test_result_item_correct_errors(
    mut builder: crate::types::builders::ConversationLevelTestResultItemBuilder,
) -> crate::types::builders::ConversationLevelTestResultItemBuilder {
    if builder.conversation_id.is_none() {
        builder.conversation_id = Some(Default::default())
    }
    if builder.end_to_end_result.is_none() {
        builder.end_to_end_result = "no value was set".parse::<crate::types::TestResultMatchStatus>().ok()
    }
    if builder.intent_classification_results.is_none() {
        builder.intent_classification_results = Some(Default::default())
    }
    if builder.slot_resolution_results.is_none() {
        builder.slot_resolution_results = Some(Default::default())
    }
    builder
}

pub(crate) fn intent_classification_test_result_item_correct_errors(
    mut builder: crate::types::builders::IntentClassificationTestResultItemBuilder,
) -> crate::types::builders::IntentClassificationTestResultItemBuilder {
    if builder.intent_name.is_none() {
        builder.intent_name = Some(Default::default())
    }
    if builder.multi_turn_conversation.is_none() {
        builder.multi_turn_conversation = Some(Default::default())
    }
    if builder.result_counts.is_none() {
        builder.result_counts = {
            let builder = crate::types::builders::IntentClassificationTestResultItemCountsBuilder::default();
            crate::serde_util::intent_classification_test_result_item_counts_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn intent_level_slot_resolution_test_result_item_correct_errors(
    mut builder: crate::types::builders::IntentLevelSlotResolutionTestResultItemBuilder,
) -> crate::types::builders::IntentLevelSlotResolutionTestResultItemBuilder {
    if builder.intent_name.is_none() {
        builder.intent_name = Some(Default::default())
    }
    if builder.multi_turn_conversation.is_none() {
        builder.multi_turn_conversation = Some(Default::default())
    }
    if builder.slot_resolution_results.is_none() {
        builder.slot_resolution_results = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_code_hook_correct_errors(
    mut builder: crate::types::builders::LambdaCodeHookBuilder,
) -> crate::types::builders::LambdaCodeHookBuilder {
    if builder.lambda_arn.is_none() {
        builder.lambda_arn = Some(Default::default())
    }
    if builder.code_hook_interface_version.is_none() {
        builder.code_hook_interface_version = Some(Default::default())
    }
    builder
}

pub(crate) fn message_group_correct_errors(mut builder: crate::types::builders::MessageGroupBuilder) -> crate::types::builders::MessageGroupBuilder {
    if builder.message.is_none() {
        builder.message = {
            let builder = crate::types::builders::MessageBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn overall_test_result_item_correct_errors(
    mut builder: crate::types::builders::OverallTestResultItemBuilder,
) -> crate::types::builders::OverallTestResultItemBuilder {
    if builder.multi_turn_conversation.is_none() {
        builder.multi_turn_conversation = Some(Default::default())
    }
    if builder.total_result_count.is_none() {
        builder.total_result_count = Some(Default::default())
    }
    if builder.end_to_end_result_counts.is_none() {
        builder.end_to_end_result_counts = Some(Default::default())
    }
    builder
}

pub(crate) fn prompt_attempt_specification_correct_errors(
    mut builder: crate::types::builders::PromptAttemptSpecificationBuilder,
) -> crate::types::builders::PromptAttemptSpecificationBuilder {
    if builder.allowed_input_types.is_none() {
        builder.allowed_input_types = {
            let builder = crate::types::builders::AllowedInputTypesBuilder::default();
            crate::serde_util::allowed_input_types_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn slot_default_value_correct_errors(
    mut builder: crate::types::builders::SlotDefaultValueBuilder,
) -> crate::types::builders::SlotDefaultValueBuilder {
    if builder.default_value.is_none() {
        builder.default_value = Some(Default::default())
    }
    builder
}

pub(crate) fn sub_slot_value_elicitation_setting_correct_errors(
    mut builder: crate::types::builders::SubSlotValueElicitationSettingBuilder,
) -> crate::types::builders::SubSlotValueElicitationSettingBuilder {
    if builder.prompt_specification.is_none() {
        builder.prompt_specification = {
            let builder = crate::types::builders::PromptSpecificationBuilder::default();
            crate::serde_util::prompt_specification_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn text_log_destination_correct_errors(
    mut builder: crate::types::builders::TextLogDestinationBuilder,
) -> crate::types::builders::TextLogDestinationBuilder {
    if builder.cloud_watch.is_none() {
        builder.cloud_watch = {
            let builder = crate::types::builders::CloudWatchLogGroupLogDestinationBuilder::default();
            crate::serde_util::cloud_watch_log_group_log_destination_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn user_turn_specification_correct_errors(
    mut builder: crate::types::builders::UserTurnSpecificationBuilder,
) -> crate::types::builders::UserTurnSpecificationBuilder {
    if builder.input.is_none() {
        builder.input = {
            let builder = crate::types::builders::UserTurnInputSpecificationBuilder::default();
            Some(crate::serde_util::user_turn_input_specification_correct_errors(builder).build())
        }
    }
    if builder.expected.is_none() {
        builder.expected = {
            let builder = crate::types::builders::UserTurnOutputSpecificationBuilder::default();
            Some(crate::serde_util::user_turn_output_specification_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn utterance_level_test_result_item_correct_errors(
    mut builder: crate::types::builders::UtteranceLevelTestResultItemBuilder,
) -> crate::types::builders::UtteranceLevelTestResultItemBuilder {
    if builder.record_number.is_none() {
        builder.record_number = Some(Default::default())
    }
    if builder.turn_result.is_none() {
        builder.turn_result = {
            let builder = crate::types::builders::TestSetTurnResultBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn allowed_input_types_correct_errors(
    mut builder: crate::types::builders::AllowedInputTypesBuilder,
) -> crate::types::builders::AllowedInputTypesBuilder {
    if builder.allow_audio_input.is_none() {
        builder.allow_audio_input = Some(Default::default())
    }
    if builder.allow_dtmf_input.is_none() {
        builder.allow_dtmf_input = Some(Default::default())
    }
    builder
}

pub(crate) fn audio_and_dtmf_input_specification_correct_errors(
    mut builder: crate::types::builders::AudioAndDtmfInputSpecificationBuilder,
) -> crate::types::builders::AudioAndDtmfInputSpecificationBuilder {
    if builder.start_timeout_ms.is_none() {
        builder.start_timeout_ms = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_log_group_log_destination_correct_errors(
    mut builder: crate::types::builders::CloudWatchLogGroupLogDestinationBuilder,
) -> crate::types::builders::CloudWatchLogGroupLogDestinationBuilder {
    if builder.cloud_watch_log_group_arn.is_none() {
        builder.cloud_watch_log_group_arn = Some(Default::default())
    }
    if builder.log_prefix.is_none() {
        builder.log_prefix = Some(Default::default())
    }
    builder
}

pub(crate) fn condition_correct_errors(mut builder: crate::types::builders::ConditionBuilder) -> crate::types::builders::ConditionBuilder {
    if builder.expression_string.is_none() {
        builder.expression_string = Some(Default::default())
    }
    builder
}

pub(crate) fn date_range_filter_correct_errors(
    mut builder: crate::types::builders::DateRangeFilterBuilder,
) -> crate::types::builders::DateRangeFilterBuilder {
    if builder.start_date_time.is_none() {
        builder.start_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_date_time.is_none() {
        builder.end_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn image_response_card_correct_errors(
    mut builder: crate::types::builders::ImageResponseCardBuilder,
) -> crate::types::builders::ImageResponseCardBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    builder
}

pub(crate) fn intent_classification_test_result_item_counts_correct_errors(
    mut builder: crate::types::builders::IntentClassificationTestResultItemCountsBuilder,
) -> crate::types::builders::IntentClassificationTestResultItemCountsBuilder {
    if builder.total_result_count.is_none() {
        builder.total_result_count = Some(Default::default())
    }
    if builder.intent_match_result_counts.is_none() {
        builder.intent_match_result_counts = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_bucket_log_destination_correct_errors(
    mut builder: crate::types::builders::S3BucketLogDestinationBuilder,
) -> crate::types::builders::S3BucketLogDestinationBuilder {
    if builder.s3_bucket_arn.is_none() {
        builder.s3_bucket_arn = Some(Default::default())
    }
    if builder.log_prefix.is_none() {
        builder.log_prefix = Some(Default::default())
    }
    builder
}

pub(crate) fn text_input_specification_correct_errors(
    mut builder: crate::types::builders::TextInputSpecificationBuilder,
) -> crate::types::builders::TextInputSpecificationBuilder {
    if builder.start_timeout_ms.is_none() {
        builder.start_timeout_ms = Some(Default::default())
    }
    builder
}

pub(crate) fn user_turn_input_specification_correct_errors(
    mut builder: crate::types::builders::UserTurnInputSpecificationBuilder,
) -> crate::types::builders::UserTurnInputSpecificationBuilder {
    if builder.utterance_input.is_none() {
        builder.utterance_input = {
            let builder = crate::types::builders::UtteranceInputSpecificationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn user_turn_output_specification_correct_errors(
    mut builder: crate::types::builders::UserTurnOutputSpecificationBuilder,
) -> crate::types::builders::UserTurnOutputSpecificationBuilder {
    if builder.intent.is_none() {
        builder.intent = {
            let builder = crate::types::builders::UserTurnIntentOutputBuilder::default();
            crate::serde_util::user_turn_intent_output_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn agent_turn_result_correct_errors(
    mut builder: crate::types::builders::AgentTurnResultBuilder,
) -> crate::types::builders::AgentTurnResultBuilder {
    if builder.expected_agent_prompt.is_none() {
        builder.expected_agent_prompt = Some(Default::default())
    }
    builder
}

pub(crate) fn audio_specification_correct_errors(
    mut builder: crate::types::builders::AudioSpecificationBuilder,
) -> crate::types::builders::AudioSpecificationBuilder {
    if builder.max_length_ms.is_none() {
        builder.max_length_ms = Some(Default::default())
    }
    if builder.end_timeout_ms.is_none() {
        builder.end_timeout_ms = Some(Default::default())
    }
    builder
}

pub(crate) fn conversation_level_intent_classification_result_item_correct_errors(
    mut builder: crate::types::builders::ConversationLevelIntentClassificationResultItemBuilder,
) -> crate::types::builders::ConversationLevelIntentClassificationResultItemBuilder {
    if builder.intent_name.is_none() {
        builder.intent_name = Some(Default::default())
    }
    if builder.match_result.is_none() {
        builder.match_result = "no value was set".parse::<crate::types::TestResultMatchStatus>().ok()
    }
    builder
}

pub(crate) fn conversation_level_slot_resolution_result_item_correct_errors(
    mut builder: crate::types::builders::ConversationLevelSlotResolutionResultItemBuilder,
) -> crate::types::builders::ConversationLevelSlotResolutionResultItemBuilder {
    if builder.intent_name.is_none() {
        builder.intent_name = Some(Default::default())
    }
    if builder.slot_name.is_none() {
        builder.slot_name = Some(Default::default())
    }
    if builder.match_result.is_none() {
        builder.match_result = "no value was set".parse::<crate::types::TestResultMatchStatus>().ok()
    }
    builder
}

pub(crate) fn custom_payload_correct_errors(
    mut builder: crate::types::builders::CustomPayloadBuilder,
) -> crate::types::builders::CustomPayloadBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn dtmf_specification_correct_errors(
    mut builder: crate::types::builders::DtmfSpecificationBuilder,
) -> crate::types::builders::DtmfSpecificationBuilder {
    if builder.max_length.is_none() {
        builder.max_length = Some(Default::default())
    }
    if builder.end_timeout_ms.is_none() {
        builder.end_timeout_ms = Some(Default::default())
    }
    if builder.deletion_character.is_none() {
        builder.deletion_character = Some(Default::default())
    }
    if builder.end_character.is_none() {
        builder.end_character = Some(Default::default())
    }
    builder
}

pub(crate) fn plain_text_message_correct_errors(
    mut builder: crate::types::builders::PlainTextMessageBuilder,
) -> crate::types::builders::PlainTextMessageBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn slot_resolution_test_result_item_correct_errors(
    mut builder: crate::types::builders::SlotResolutionTestResultItemBuilder,
) -> crate::types::builders::SlotResolutionTestResultItemBuilder {
    if builder.slot_name.is_none() {
        builder.slot_name = Some(Default::default())
    }
    if builder.result_counts.is_none() {
        builder.result_counts = {
            let builder = crate::types::builders::SlotResolutionTestResultItemCountsBuilder::default();
            crate::serde_util::slot_resolution_test_result_item_counts_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn ssml_message_correct_errors(mut builder: crate::types::builders::SsmlMessageBuilder) -> crate::types::builders::SsmlMessageBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn user_turn_intent_output_correct_errors(
    mut builder: crate::types::builders::UserTurnIntentOutputBuilder,
) -> crate::types::builders::UserTurnIntentOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn user_turn_result_correct_errors(
    mut builder: crate::types::builders::UserTurnResultBuilder,
) -> crate::types::builders::UserTurnResultBuilder {
    if builder.input.is_none() {
        builder.input = {
            let builder = crate::types::builders::UserTurnInputSpecificationBuilder::default();
            Some(crate::serde_util::user_turn_input_specification_correct_errors(builder).build())
        }
    }
    if builder.expected_output.is_none() {
        builder.expected_output = {
            let builder = crate::types::builders::UserTurnOutputSpecificationBuilder::default();
            Some(crate::serde_util::user_turn_output_specification_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn active_context_correct_errors(
    mut builder: crate::types::builders::ActiveContextBuilder,
) -> crate::types::builders::ActiveContextBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn button_correct_errors(mut builder: crate::types::builders::ButtonBuilder) -> crate::types::builders::ButtonBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn conversation_level_result_detail_correct_errors(
    mut builder: crate::types::builders::ConversationLevelResultDetailBuilder,
) -> crate::types::builders::ConversationLevelResultDetailBuilder {
    if builder.end_to_end_result.is_none() {
        builder.end_to_end_result = "no value was set".parse::<crate::types::TestResultMatchStatus>().ok()
    }
    builder
}

pub(crate) fn execution_error_details_correct_errors(
    mut builder: crate::types::builders::ExecutionErrorDetailsBuilder,
) -> crate::types::builders::ExecutionErrorDetailsBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn slot_resolution_test_result_item_counts_correct_errors(
    mut builder: crate::types::builders::SlotResolutionTestResultItemCountsBuilder,
) -> crate::types::builders::SlotResolutionTestResultItemCountsBuilder {
    if builder.total_result_count.is_none() {
        builder.total_result_count = Some(Default::default())
    }
    if builder.slot_match_result_counts.is_none() {
        builder.slot_match_result_counts = Some(Default::default())
    }
    builder
}

pub(crate) fn utterance_audio_input_specification_correct_errors(
    mut builder: crate::types::builders::UtteranceAudioInputSpecificationBuilder,
) -> crate::types::builders::UtteranceAudioInputSpecificationBuilder {
    if builder.audio_file_s3_location.is_none() {
        builder.audio_file_s3_location = Some(Default::default())
    }
    builder
}

pub(crate) fn runtime_hint_value_correct_errors(
    mut builder: crate::types::builders::RuntimeHintValueBuilder,
) -> crate::types::builders::RuntimeHintValueBuilder {
    if builder.phrase.is_none() {
        builder.phrase = Some(Default::default())
    }
    builder
}
