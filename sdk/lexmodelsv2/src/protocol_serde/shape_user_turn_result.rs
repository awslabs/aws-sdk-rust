// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_user_turn_result<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::UserTurnResult>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::UserTurnResultBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "input" => {
                            builder = builder
                                .set_input(crate::protocol_serde::shape_user_turn_input_specification::de_user_turn_input_specification(tokens)?);
                        }
                        "expectedOutput" => {
                            builder = builder.set_expected_output(
                                crate::protocol_serde::shape_user_turn_output_specification::de_user_turn_output_specification(tokens)?,
                            );
                        }
                        "actualOutput" => {
                            builder = builder.set_actual_output(
                                crate::protocol_serde::shape_user_turn_output_specification::de_user_turn_output_specification(tokens)?,
                            );
                        }
                        "errorDetails" => {
                            builder =
                                builder.set_error_details(crate::protocol_serde::shape_execution_error_details::de_execution_error_details(tokens)?);
                        }
                        "endToEndResult" => {
                            builder = builder.set_end_to_end_result(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TestResultMatchStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "intentMatchResult" => {
                            builder = builder.set_intent_match_result(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TestResultMatchStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "slotMatchResult" => {
                            builder = builder.set_slot_match_result(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TestResultMatchStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "speechTranscriptionResult" => {
                            builder = builder.set_speech_transcription_result(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TestResultMatchStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "conversationLevelResult" => {
                            builder = builder.set_conversation_level_result(
                                crate::protocol_serde::shape_conversation_level_result_detail::de_conversation_level_result_detail(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::user_turn_result_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
