// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_imports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_imports::ListImportsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.bot_id {
        object.key("botId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.bot_version {
        object.key("botVersion").string(var_2.as_str());
    }
    if let Some(var_3) = &input.filters {
        let mut array_4 = object.key("filters").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_import_filter::ser_import_filter(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.locale_id {
        object.key("localeId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.next_token {
        object.key("nextToken").string(var_9.as_str());
    }
    if let Some(var_10) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_11 = object.key("sortBy").start_object();
        crate::protocol_serde::shape_import_sort_by::ser_import_sort_by(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
