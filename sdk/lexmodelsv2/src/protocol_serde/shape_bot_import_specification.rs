// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_bot_import_specification<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::BotImportSpecification>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::BotImportSpecificationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "botName" => {
                            builder = builder.set_bot_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "roleArn" => {
                            builder = builder.set_role_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "dataPrivacy" => {
                            builder = builder.set_data_privacy(crate::protocol_serde::shape_data_privacy::de_data_privacy(tokens)?);
                        }
                        "errorLogSettings" => {
                            builder = builder.set_error_log_settings(crate::protocol_serde::shape_error_log_settings::de_error_log_settings(tokens)?);
                        }
                        "idleSessionTTLInSeconds" => {
                            builder = builder.set_idle_session_ttl_in_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "botTags" => {
                            builder = builder.set_bot_tags(crate::protocol_serde::shape_tag_map::de_tag_map(tokens)?);
                        }
                        "testBotAliasTags" => {
                            builder = builder.set_test_bot_alias_tags(crate::protocol_serde::shape_tag_map::de_tag_map(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::bot_import_specification_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_bot_import_specification(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BotImportSpecification,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("botName").string(input.bot_name.as_str());
    }
    {
        object.key("roleArn").string(input.role_arn.as_str());
    }
    if let Some(var_1) = &input.data_privacy {
        #[allow(unused_mut)]
        let mut object_2 = object.key("dataPrivacy").start_object();
        crate::protocol_serde::shape_data_privacy::ser_data_privacy(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.error_log_settings {
        #[allow(unused_mut)]
        let mut object_4 = object.key("errorLogSettings").start_object();
        crate::protocol_serde::shape_error_log_settings::ser_error_log_settings(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.bot_tags {
        #[allow(unused_mut)]
        let mut object_7 = object.key("botTags").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.test_bot_alias_tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("testBotAliasTags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    Ok(())
}
