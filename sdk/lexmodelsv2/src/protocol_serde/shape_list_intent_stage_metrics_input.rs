// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_intent_stage_metrics_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_intent_stage_metrics::ListIntentStageMetricsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.bin_by {
        let mut array_2 = object.key("binBy").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_analytics_bin_by_specification::ser_analytics_bin_by_specification(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.end_date_time {
        object
            .key("endDateTime")
            .date_time(var_5, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_6) = &input.filters {
        let mut array_7 = object.key("filters").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_analytics_intent_stage_filter::ser_analytics_intent_stage_filter(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.group_by {
        let mut array_11 = object.key("groupBy").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_analytics_intent_stage_group_by_specification::ser_analytics_intent_stage_group_by_specification(
                    &mut object_13,
                    item_12,
                )?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.metrics {
        let mut array_16 = object.key("metrics").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_analytics_intent_stage_metric::ser_analytics_intent_stage_metric(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.next_token {
        object.key("nextToken").string(var_19.as_str());
    }
    if let Some(var_20) = &input.start_date_time {
        object
            .key("startDateTime")
            .date_time(var_20, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}
