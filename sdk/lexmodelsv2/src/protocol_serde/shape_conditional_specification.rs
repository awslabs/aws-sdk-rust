// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_conditional_specification<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::ConditionalSpecification>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ConditionalSpecificationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "active" => {
                                builder = builder.set_active(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "conditionalBranches" => {
                                builder = builder.set_conditional_branches(
                                    crate::protocol_serde::shape_conditional_branches::de_conditional_branches(tokens)?
                                );
                            }
                            "defaultBranch" => {
                                builder = builder.set_default_branch(
                                    crate::protocol_serde::shape_default_conditional_branch::de_default_conditional_branch(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}

pub fn ser_conditional_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ConditionalSpecification,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.active {
        object.key("active").boolean(*var_1);
    }
    if let Some(var_2) = &input.conditional_branches {
        let mut array_3 = object.key("conditionalBranches").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_conditional_branch::ser_conditional_branch(
                    &mut object_5,
                    item_4,
                )?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.default_branch {
        #[allow(unused_mut)]
        let mut object_7 = object.key("defaultBranch").start_object();
        crate::protocol_serde::shape_default_conditional_branch::ser_default_conditional_branch(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    Ok(())
}
