// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_resource_policy_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_resource_policy_statement::CreateResourcePolicyStatementInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.action {
        let mut array_2 = object.key("action").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.condition {
        #[allow(unused_mut)]
        let mut object_5 = object.key("condition").start_object();
        for (key_6, value_7) in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_8 = object_5.key(key_6.as_str()).start_object();
                for (key_9, value_10) in value_7 {
                    {
                        object_8.key(key_9.as_str()).string(value_10.as_str());
                    }
                }
                object_8.finish();
            }
        }
        object_5.finish();
    }
    if let Some(var_11) = &input.effect {
        object.key("effect").string(var_11.as_str());
    }
    if let Some(var_12) = &input.principal {
        let mut array_13 = object.key("principal").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_principal::ser_principal(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.statement_id {
        object.key("statementId").string(var_16.as_str());
    }
    Ok(())
}
