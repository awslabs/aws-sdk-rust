// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_prompt_specification<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::PromptSpecification>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PromptSpecificationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "messageGroups" => {
                            builder = builder.set_message_groups(crate::protocol_serde::shape_message_groups_list::de_message_groups_list(tokens)?);
                        }
                        "maxRetries" => {
                            builder = builder.set_max_retries(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "allowInterrupt" => {
                            builder = builder.set_allow_interrupt(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "messageSelectionStrategy" => {
                            builder = builder.set_message_selection_strategy(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::MessageSelectionStrategy::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "promptAttemptsSpecification" => {
                            builder = builder.set_prompt_attempts_specification(
                                crate::protocol_serde::shape_prompt_attempts_specification_map::de_prompt_attempts_specification_map(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::prompt_specification_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_prompt_specification(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PromptSpecification,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        let mut array_1 = object.key("messageGroups").start_array();
        for item_2 in &input.message_groups {
            {
                #[allow(unused_mut)]
                let mut object_3 = array_1.value().start_object();
                crate::protocol_serde::shape_message_group::ser_message_group(&mut object_3, item_2)?;
                object_3.finish();
            }
        }
        array_1.finish();
    }
    {
        object.key("maxRetries").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if let Some(var_4) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_4);
    }
    if let Some(var_5) = &input.message_selection_strategy {
        object.key("messageSelectionStrategy").string(var_5.as_str());
    }
    if let Some(var_6) = &input.prompt_attempts_specification {
        #[allow(unused_mut)]
        let mut object_7 = object.key("promptAttemptsSpecification").start_object();
        for (key_8, value_9) in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_10 = object_7.key(key_8.as_str()).start_object();
                crate::protocol_serde::shape_prompt_attempt_specification::ser_prompt_attempt_specification(&mut object_10, value_9)?;
                object_10.finish();
            }
        }
        object_7.finish();
    }
    Ok(())
}
