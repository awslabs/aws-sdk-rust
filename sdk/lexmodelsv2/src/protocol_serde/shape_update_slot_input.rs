// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_slot_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_slot::UpdateSlotInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.multiple_values_setting {
        #[allow(unused_mut)]
        let mut object_3 = object.key("multipleValuesSetting").start_object();
        crate::protocol_serde::shape_multiple_values_setting::ser_multiple_values_setting(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.obfuscation_setting {
        #[allow(unused_mut)]
        let mut object_5 = object.key("obfuscationSetting").start_object();
        crate::protocol_serde::shape_obfuscation_setting::ser_obfuscation_setting(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.slot_name {
        object.key("slotName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.slot_type_id {
        object.key("slotTypeId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.sub_slot_setting {
        #[allow(unused_mut)]
        let mut object_9 = object.key("subSlotSetting").start_object();
        crate::protocol_serde::shape_sub_slot_setting::ser_sub_slot_setting(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.value_elicitation_setting {
        #[allow(unused_mut)]
        let mut object_11 = object.key("valueElicitationSetting").start_object();
        crate::protocol_serde::shape_slot_value_elicitation_setting::ser_slot_value_elicitation_setting(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
