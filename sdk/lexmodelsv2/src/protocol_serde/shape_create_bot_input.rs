// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_bot_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_bot::CreateBotInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.bot_members {
        let mut array_2 = object.key("botMembers").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_bot_member::ser_bot_member(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.bot_name {
        object.key("botName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.bot_tags {
        #[allow(unused_mut)]
        let mut object_7 = object.key("botTags").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.bot_type {
        object.key("botType").string(var_10.as_str());
    }
    if let Some(var_11) = &input.data_privacy {
        #[allow(unused_mut)]
        let mut object_12 = object.key("dataPrivacy").start_object();
        crate::protocol_serde::shape_data_privacy::ser_data_privacy(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.description {
        object.key("description").string(var_13.as_str());
    }
    if let Some(var_14) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.role_arn {
        object.key("roleArn").string(var_15.as_str());
    }
    if let Some(var_16) = &input.test_bot_alias_tags {
        #[allow(unused_mut)]
        let mut object_17 = object.key("testBotAliasTags").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    Ok(())
}
