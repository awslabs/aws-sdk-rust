// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_intent_confirmation_setting<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::IntentConfirmationSetting>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::IntentConfirmationSettingBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "promptSpecification" => {
                                builder = builder.set_prompt_specification(
                                    crate::protocol_serde::shape_prompt_specification::de_prompt_specification(tokens)?
                                );
                            }
                            "declinationResponse" => {
                                builder = builder.set_declination_response(
                                    crate::protocol_serde::shape_response_specification::de_response_specification(tokens)?
                                );
                            }
                            "active" => {
                                builder = builder.set_active(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "confirmationResponse" => {
                                builder = builder.set_confirmation_response(
                                    crate::protocol_serde::shape_response_specification::de_response_specification(tokens)?
                                );
                            }
                            "confirmationNextStep" => {
                                builder = builder.set_confirmation_next_step(
                                    crate::protocol_serde::shape_dialog_state::de_dialog_state(
                                        tokens,
                                    )?,
                                );
                            }
                            "confirmationConditional" => {
                                builder = builder.set_confirmation_conditional(
                                    crate::protocol_serde::shape_conditional_specification::de_conditional_specification(tokens)?
                                );
                            }
                            "declinationNextStep" => {
                                builder = builder.set_declination_next_step(
                                    crate::protocol_serde::shape_dialog_state::de_dialog_state(
                                        tokens,
                                    )?,
                                );
                            }
                            "declinationConditional" => {
                                builder = builder.set_declination_conditional(
                                    crate::protocol_serde::shape_conditional_specification::de_conditional_specification(tokens)?
                                );
                            }
                            "failureResponse" => {
                                builder = builder.set_failure_response(
                                    crate::protocol_serde::shape_response_specification::de_response_specification(tokens)?
                                );
                            }
                            "failureNextStep" => {
                                builder = builder.set_failure_next_step(
                                    crate::protocol_serde::shape_dialog_state::de_dialog_state(
                                        tokens,
                                    )?,
                                );
                            }
                            "failureConditional" => {
                                builder = builder.set_failure_conditional(
                                    crate::protocol_serde::shape_conditional_specification::de_conditional_specification(tokens)?
                                );
                            }
                            "codeHook" => {
                                builder = builder.set_code_hook(
                                    crate::protocol_serde::shape_dialog_code_hook_invocation_setting::de_dialog_code_hook_invocation_setting(tokens)?
                                );
                            }
                            "elicitationCodeHook" => {
                                builder = builder.set_elicitation_code_hook(
                                    crate::protocol_serde::shape_elicitation_code_hook_invocation_setting::de_elicitation_code_hook_invocation_setting(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}

pub fn ser_intent_confirmation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::IntentConfirmationSetting,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.prompt_specification {
        #[allow(unused_mut)]
        let mut object_2 = object.key("promptSpecification").start_object();
        crate::protocol_serde::shape_prompt_specification::ser_prompt_specification(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.declination_response {
        #[allow(unused_mut)]
        let mut object_4 = object.key("declinationResponse").start_object();
        crate::protocol_serde::shape_response_specification::ser_response_specification(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.active {
        object.key("active").boolean(*var_5);
    }
    if let Some(var_6) = &input.confirmation_response {
        #[allow(unused_mut)]
        let mut object_7 = object.key("confirmationResponse").start_object();
        crate::protocol_serde::shape_response_specification::ser_response_specification(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.confirmation_next_step {
        #[allow(unused_mut)]
        let mut object_9 = object.key("confirmationNextStep").start_object();
        crate::protocol_serde::shape_dialog_state::ser_dialog_state(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.confirmation_conditional {
        #[allow(unused_mut)]
        let mut object_11 = object.key("confirmationConditional").start_object();
        crate::protocol_serde::shape_conditional_specification::ser_conditional_specification(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.declination_next_step {
        #[allow(unused_mut)]
        let mut object_13 = object.key("declinationNextStep").start_object();
        crate::protocol_serde::shape_dialog_state::ser_dialog_state(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.declination_conditional {
        #[allow(unused_mut)]
        let mut object_15 = object.key("declinationConditional").start_object();
        crate::protocol_serde::shape_conditional_specification::ser_conditional_specification(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    if let Some(var_16) = &input.failure_response {
        #[allow(unused_mut)]
        let mut object_17 = object.key("failureResponse").start_object();
        crate::protocol_serde::shape_response_specification::ser_response_specification(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if let Some(var_18) = &input.failure_next_step {
        #[allow(unused_mut)]
        let mut object_19 = object.key("failureNextStep").start_object();
        crate::protocol_serde::shape_dialog_state::ser_dialog_state(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.failure_conditional {
        #[allow(unused_mut)]
        let mut object_21 = object.key("failureConditional").start_object();
        crate::protocol_serde::shape_conditional_specification::ser_conditional_specification(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    if let Some(var_22) = &input.code_hook {
        #[allow(unused_mut)]
        let mut object_23 = object.key("codeHook").start_object();
        crate::protocol_serde::shape_dialog_code_hook_invocation_setting::ser_dialog_code_hook_invocation_setting(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.elicitation_code_hook {
        #[allow(unused_mut)]
        let mut object_25 = object.key("elicitationCodeHook").start_object();
        crate::protocol_serde::shape_elicitation_code_hook_invocation_setting::ser_elicitation_code_hook_invocation_setting(&mut object_25, var_24)?;
        object_25.finish();
    }
    Ok(())
}
