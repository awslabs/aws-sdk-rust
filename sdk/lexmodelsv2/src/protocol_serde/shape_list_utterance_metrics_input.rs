// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_utterance_metrics_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_utterance_metrics::ListUtteranceMetricsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.attributes {
        let mut array_2 = object.key("attributes").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_analytics_utterance_attribute::ser_analytics_utterance_attribute(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.bin_by {
        let mut array_6 = object.key("binBy").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_analytics_bin_by_specification::ser_analytics_bin_by_specification(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.end_date_time {
        object
            .key("endDateTime")
            .date_time(var_9, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_10) = &input.filters {
        let mut array_11 = object.key("filters").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_analytics_utterance_filter::ser_analytics_utterance_filter(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.group_by {
        let mut array_15 = object.key("groupBy").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_analytics_utterance_group_by_specification::ser_analytics_utterance_group_by_specification(
                    &mut object_17,
                    item_16,
                )?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.metrics {
        let mut array_20 = object.key("metrics").start_array();
        for item_21 in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::protocol_serde::shape_analytics_utterance_metric::ser_analytics_utterance_metric(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    if let Some(var_23) = &input.next_token {
        object.key("nextToken").string(var_23.as_str());
    }
    if let Some(var_24) = &input.start_date_time {
        object
            .key("startDateTime")
            .date_time(var_24, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}
