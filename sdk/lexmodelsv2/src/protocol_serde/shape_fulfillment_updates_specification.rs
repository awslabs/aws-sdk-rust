// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_fulfillment_updates_specification<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::FulfillmentUpdatesSpecification>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::FulfillmentUpdatesSpecificationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "active" => {
                                builder = builder.set_active(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                            }
                            "startResponse" => {
                                builder = builder.set_start_response(
                                    crate::protocol_serde::shape_fulfillment_start_response_specification::de_fulfillment_start_response_specification(tokens)?
                                );
                            }
                            "updateResponse" => {
                                builder = builder.set_update_response(
                                    crate::protocol_serde::shape_fulfillment_update_response_specification::de_fulfillment_update_response_specification(tokens)?
                                );
                            }
                            "timeoutInSeconds" => {
                                builder = builder.set_timeout_in_seconds(
                                    ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                        .map(i32::try_from)
                                        .transpose()?,
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::fulfillment_updates_specification_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_fulfillment_updates_specification(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FulfillmentUpdatesSpecification,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("active").boolean(input.active);
    }
    if let Some(var_1) = &input.start_response {
        #[allow(unused_mut)]
        let mut object_2 = object.key("startResponse").start_object();
        crate::protocol_serde::shape_fulfillment_start_response_specification::ser_fulfillment_start_response_specification(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.update_response {
        #[allow(unused_mut)]
        let mut object_4 = object.key("updateResponse").start_object();
        crate::protocol_serde::shape_fulfillment_update_response_specification::ser_fulfillment_update_response_specification(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    Ok(())
}
