// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateProfileResourceAssociationInput {
    /// <p>ID of the resource association.</p>
    pub profile_resource_association_id: ::std::option::Option<::std::string::String>,
    /// <p>Name of the resource association.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>If you are adding a DNS Firewall rule group, include also a priority in this format:</p>
    /// <p><code>Key=FirewallRuleGroupPriority,Value=100</code>.</p>
    pub resource_properties: ::std::option::Option<::std::string::String>,
}
impl UpdateProfileResourceAssociationInput {
    /// <p>ID of the resource association.</p>
    pub fn profile_resource_association_id(&self) -> ::std::option::Option<&str> {
        self.profile_resource_association_id.as_deref()
    }
    /// <p>Name of the resource association.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>If you are adding a DNS Firewall rule group, include also a priority in this format:</p>
    /// <p><code>Key=FirewallRuleGroupPriority,Value=100</code>.</p>
    pub fn resource_properties(&self) -> ::std::option::Option<&str> {
        self.resource_properties.as_deref()
    }
}
impl UpdateProfileResourceAssociationInput {
    /// Creates a new builder-style object to manufacture [`UpdateProfileResourceAssociationInput`](crate::operation::update_profile_resource_association::UpdateProfileResourceAssociationInput).
    pub fn builder() -> crate::operation::update_profile_resource_association::builders::UpdateProfileResourceAssociationInputBuilder {
        crate::operation::update_profile_resource_association::builders::UpdateProfileResourceAssociationInputBuilder::default()
    }
}

/// A builder for [`UpdateProfileResourceAssociationInput`](crate::operation::update_profile_resource_association::UpdateProfileResourceAssociationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateProfileResourceAssociationInputBuilder {
    pub(crate) profile_resource_association_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) resource_properties: ::std::option::Option<::std::string::String>,
}
impl UpdateProfileResourceAssociationInputBuilder {
    /// <p>ID of the resource association.</p>
    /// This field is required.
    pub fn profile_resource_association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_resource_association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the resource association.</p>
    pub fn set_profile_resource_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_resource_association_id = input;
        self
    }
    /// <p>ID of the resource association.</p>
    pub fn get_profile_resource_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_resource_association_id
    }
    /// <p>Name of the resource association.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the resource association.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the resource association.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>If you are adding a DNS Firewall rule group, include also a priority in this format:</p>
    /// <p><code>Key=FirewallRuleGroupPriority,Value=100</code>.</p>
    pub fn resource_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_properties = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If you are adding a DNS Firewall rule group, include also a priority in this format:</p>
    /// <p><code>Key=FirewallRuleGroupPriority,Value=100</code>.</p>
    pub fn set_resource_properties(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_properties = input;
        self
    }
    /// <p>If you are adding a DNS Firewall rule group, include also a priority in this format:</p>
    /// <p><code>Key=FirewallRuleGroupPriority,Value=100</code>.</p>
    pub fn get_resource_properties(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_properties
    }
    /// Consumes the builder and constructs a [`UpdateProfileResourceAssociationInput`](crate::operation::update_profile_resource_association::UpdateProfileResourceAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_profile_resource_association::UpdateProfileResourceAssociationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_profile_resource_association::UpdateProfileResourceAssociationInput {
                profile_resource_association_id: self.profile_resource_association_id,
                name: self.name,
                resource_properties: self.resource_properties,
            },
        )
    }
}
