// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateResourceToProfileInput {
    /// <p>ID of the Profile.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>Amazon resource number, ARN, of the DNS resource.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>Name for the resource association.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>If you are adding a DNS Firewall rule group, include also a priority in this format:</p>
    /// <p><code>Key=FirewallRuleGroupPriority,Value=100</code></p>
    pub resource_properties: ::std::option::Option<::std::string::String>,
}
impl AssociateResourceToProfileInput {
    /// <p>ID of the Profile.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>Amazon resource number, ARN, of the DNS resource.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>Name for the resource association.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>If you are adding a DNS Firewall rule group, include also a priority in this format:</p>
    /// <p><code>Key=FirewallRuleGroupPriority,Value=100</code></p>
    pub fn resource_properties(&self) -> ::std::option::Option<&str> {
        self.resource_properties.as_deref()
    }
}
impl AssociateResourceToProfileInput {
    /// Creates a new builder-style object to manufacture [`AssociateResourceToProfileInput`](crate::operation::associate_resource_to_profile::AssociateResourceToProfileInput).
    pub fn builder() -> crate::operation::associate_resource_to_profile::builders::AssociateResourceToProfileInputBuilder {
        crate::operation::associate_resource_to_profile::builders::AssociateResourceToProfileInputBuilder::default()
    }
}

/// A builder for [`AssociateResourceToProfileInput`](crate::operation::associate_resource_to_profile::AssociateResourceToProfileInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociateResourceToProfileInputBuilder {
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) resource_properties: ::std::option::Option<::std::string::String>,
}
impl AssociateResourceToProfileInputBuilder {
    /// <p>ID of the Profile.</p>
    /// This field is required.
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the Profile.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>ID of the Profile.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>Amazon resource number, ARN, of the DNS resource.</p>
    /// This field is required.
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon resource number, ARN, of the DNS resource.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>Amazon resource number, ARN, of the DNS resource.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>Name for the resource association.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name for the resource association.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name for the resource association.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>If you are adding a DNS Firewall rule group, include also a priority in this format:</p>
    /// <p><code>Key=FirewallRuleGroupPriority,Value=100</code></p>
    pub fn resource_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_properties = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If you are adding a DNS Firewall rule group, include also a priority in this format:</p>
    /// <p><code>Key=FirewallRuleGroupPriority,Value=100</code></p>
    pub fn set_resource_properties(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_properties = input;
        self
    }
    /// <p>If you are adding a DNS Firewall rule group, include also a priority in this format:</p>
    /// <p><code>Key=FirewallRuleGroupPriority,Value=100</code></p>
    pub fn get_resource_properties(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_properties
    }
    /// Consumes the builder and constructs a [`AssociateResourceToProfileInput`](crate::operation::associate_resource_to_profile::AssociateResourceToProfileInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_resource_to_profile::AssociateResourceToProfileInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::associate_resource_to_profile::AssociateResourceToProfileInput {
            profile_id: self.profile_id,
            resource_arn: self.resource_arn,
            name: self.name,
            resource_properties: self.resource_properties,
        })
    }
}
