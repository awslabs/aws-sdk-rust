// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The association between a Route 53 Profile and resources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProfileResourceAssociation {
    /// <p>ID of the Profile resource association.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Name of the Profile resource association.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Web Services account ID of the Profile resource association owner.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>Profile ID of the Profile that the resources are associated with.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the resource association.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>Resource type, such as a private hosted zone, or DNS Firewall rule group.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>If the DNS resource is a DNS Firewall rule group, this indicates the priority.</p>
    pub resource_properties: ::std::option::Option<::std::string::String>,
    /// <p>Status of the Profile resource association.</p>
    pub status: ::std::option::Option<crate::types::ProfileStatus>,
    /// <p>Additional information about the Profile resource association.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the Profile resource association was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time that the Profile resource association was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ProfileResourceAssociation {
    /// <p>ID of the Profile resource association.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Name of the Profile resource association.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Amazon Web Services account ID of the Profile resource association owner.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>Profile ID of the Profile that the resources are associated with.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the resource association.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>Resource type, such as a private hosted zone, or DNS Firewall rule group.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>If the DNS resource is a DNS Firewall rule group, this indicates the priority.</p>
    pub fn resource_properties(&self) -> ::std::option::Option<&str> {
        self.resource_properties.as_deref()
    }
    /// <p>Status of the Profile resource association.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ProfileStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about the Profile resource association.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The date and time that the Profile resource association was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time that the Profile resource association was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn modification_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modification_time.as_ref()
    }
}
impl ProfileResourceAssociation {
    /// Creates a new builder-style object to manufacture [`ProfileResourceAssociation`](crate::types::ProfileResourceAssociation).
    pub fn builder() -> crate::types::builders::ProfileResourceAssociationBuilder {
        crate::types::builders::ProfileResourceAssociationBuilder::default()
    }
}

/// A builder for [`ProfileResourceAssociation`](crate::types::ProfileResourceAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProfileResourceAssociationBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) resource_properties: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ProfileStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ProfileResourceAssociationBuilder {
    /// <p>ID of the Profile resource association.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the Profile resource association.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>ID of the Profile resource association.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Name of the Profile resource association.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the Profile resource association.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the Profile resource association.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Amazon Web Services account ID of the Profile resource association owner.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Web Services account ID of the Profile resource association owner.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>Amazon Web Services account ID of the Profile resource association owner.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>Profile ID of the Profile that the resources are associated with.</p>
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Profile ID of the Profile that the resources are associated with.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>Profile ID of the Profile that the resources are associated with.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>The Amazon Resource Name (ARN) of the resource association.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource association.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource association.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>Resource type, such as a private hosted zone, or DNS Firewall rule group.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Resource type, such as a private hosted zone, or DNS Firewall rule group.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Resource type, such as a private hosted zone, or DNS Firewall rule group.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>If the DNS resource is a DNS Firewall rule group, this indicates the priority.</p>
    pub fn resource_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_properties = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the DNS resource is a DNS Firewall rule group, this indicates the priority.</p>
    pub fn set_resource_properties(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_properties = input;
        self
    }
    /// <p>If the DNS resource is a DNS Firewall rule group, this indicates the priority.</p>
    pub fn get_resource_properties(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_properties
    }
    /// <p>Status of the Profile resource association.</p>
    pub fn status(mut self, input: crate::types::ProfileStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the Profile resource association.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ProfileStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the Profile resource association.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ProfileStatus> {
        &self.status
    }
    /// <p>Additional information about the Profile resource association.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the Profile resource association.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Additional information about the Profile resource association.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The date and time that the Profile resource association was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the Profile resource association was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time that the Profile resource association was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The date and time that the Profile resource association was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn modification_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modification_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the Profile resource association was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn set_modification_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modification_time = input;
        self
    }
    /// <p>The date and time that the Profile resource association was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn get_modification_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modification_time
    }
    /// Consumes the builder and constructs a [`ProfileResourceAssociation`](crate::types::ProfileResourceAssociation).
    pub fn build(self) -> crate::types::ProfileResourceAssociation {
        crate::types::ProfileResourceAssociation {
            id: self.id,
            name: self.name,
            owner_id: self.owner_id,
            profile_id: self.profile_id,
            resource_arn: self.resource_arn,
            resource_type: self.resource_type,
            resource_properties: self.resource_properties,
            status: self.status,
            status_message: self.status_message,
            creation_time: self.creation_time,
            modification_time: self.modification_time,
        }
    }
}
