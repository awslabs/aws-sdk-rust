// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An association between a Route 53 Profile and a VPC.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProfileAssociation {
    /// <p>ID of the Profile association.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Name of the Profile association.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Web Services account ID of the Profile association owner.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>ID of the Profile.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the VPC.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>Status of the Profile association.</p>
    pub status: ::std::option::Option<crate::types::ProfileStatus>,
    /// <p>Additional information about the Profile association.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the Profile association was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time that the Profile association was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ProfileAssociation {
    /// <p>ID of the Profile association.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Name of the Profile association.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Amazon Web Services account ID of the Profile association owner.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>ID of the Profile.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the VPC.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>Status of the Profile association.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ProfileStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about the Profile association.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The date and time that the Profile association was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time that the Profile association was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn modification_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modification_time.as_ref()
    }
}
impl ProfileAssociation {
    /// Creates a new builder-style object to manufacture [`ProfileAssociation`](crate::types::ProfileAssociation).
    pub fn builder() -> crate::types::builders::ProfileAssociationBuilder {
        crate::types::builders::ProfileAssociationBuilder::default()
    }
}

/// A builder for [`ProfileAssociation`](crate::types::ProfileAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProfileAssociationBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ProfileStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ProfileAssociationBuilder {
    /// <p>ID of the Profile association.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the Profile association.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>ID of the Profile association.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Name of the Profile association.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the Profile association.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the Profile association.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Amazon Web Services account ID of the Profile association owner.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Web Services account ID of the Profile association owner.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>Amazon Web Services account ID of the Profile association owner.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>ID of the Profile.</p>
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the Profile.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>ID of the Profile.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>The Amazon Resource Name (ARN) of the VPC.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the VPC.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the VPC.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>Status of the Profile association.</p>
    pub fn status(mut self, input: crate::types::ProfileStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the Profile association.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ProfileStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the Profile association.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ProfileStatus> {
        &self.status
    }
    /// <p>Additional information about the Profile association.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the Profile association.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Additional information about the Profile association.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The date and time that the Profile association was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the Profile association was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time that the Profile association was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The date and time that the Profile association was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn modification_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modification_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the Profile association was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn set_modification_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modification_time = input;
        self
    }
    /// <p>The date and time that the Profile association was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn get_modification_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modification_time
    }
    /// Consumes the builder and constructs a [`ProfileAssociation`](crate::types::ProfileAssociation).
    pub fn build(self) -> crate::types::ProfileAssociation {
        crate::types::ProfileAssociation {
            id: self.id,
            name: self.name,
            owner_id: self.owner_id,
            profile_id: self.profile_id,
            resource_id: self.resource_id,
            status: self.status,
            status_message: self.status_message,
            creation_time: self.creation_time,
            modification_time: self.modification_time,
        }
    }
}
