// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that includes settings for a Route 53 Profile.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Profile {
    /// <p>ID of the Profile.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Profile.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Name of the Profile.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Web Services account ID of the Profile owner.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The status for the Profile.</p>
    pub status: ::std::option::Option<crate::types::ProfileStatus>,
    /// <p>Status message that includes additiona information about the Profile.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>Sharing status for the Profile.</p>
    pub share_status: ::std::option::Option<crate::types::ShareStatus>,
    /// <p>The date and time that the Profile was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time that the Profile was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The <code>ClientToken</code> value that was assigned when the Profile was created.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl Profile {
    /// <p>ID of the Profile.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Profile.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Name of the Profile.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Amazon Web Services account ID of the Profile owner.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The status for the Profile.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ProfileStatus> {
        self.status.as_ref()
    }
    /// <p>Status message that includes additiona information about the Profile.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>Sharing status for the Profile.</p>
    pub fn share_status(&self) -> ::std::option::Option<&crate::types::ShareStatus> {
        self.share_status.as_ref()
    }
    /// <p>The date and time that the Profile was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time that the Profile was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn modification_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modification_time.as_ref()
    }
    /// <p>The <code>ClientToken</code> value that was assigned when the Profile was created.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl Profile {
    /// Creates a new builder-style object to manufacture [`Profile`](crate::types::Profile).
    pub fn builder() -> crate::types::builders::ProfileBuilder {
        crate::types::builders::ProfileBuilder::default()
    }
}

/// A builder for [`Profile`](crate::types::Profile).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProfileBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ProfileStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) share_status: ::std::option::Option<crate::types::ShareStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl ProfileBuilder {
    /// <p>ID of the Profile.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the Profile.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>ID of the Profile.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the Profile.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Profile.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Profile.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Name of the Profile.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the Profile.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the Profile.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Amazon Web Services account ID of the Profile owner.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Web Services account ID of the Profile owner.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>Amazon Web Services account ID of the Profile owner.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The status for the Profile.</p>
    pub fn status(mut self, input: crate::types::ProfileStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status for the Profile.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ProfileStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status for the Profile.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ProfileStatus> {
        &self.status
    }
    /// <p>Status message that includes additiona information about the Profile.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Status message that includes additiona information about the Profile.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Status message that includes additiona information about the Profile.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>Sharing status for the Profile.</p>
    pub fn share_status(mut self, input: crate::types::ShareStatus) -> Self {
        self.share_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sharing status for the Profile.</p>
    pub fn set_share_status(mut self, input: ::std::option::Option<crate::types::ShareStatus>) -> Self {
        self.share_status = input;
        self
    }
    /// <p>Sharing status for the Profile.</p>
    pub fn get_share_status(&self) -> &::std::option::Option<crate::types::ShareStatus> {
        &self.share_status
    }
    /// <p>The date and time that the Profile was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the Profile was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time that the Profile was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The date and time that the Profile was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn modification_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modification_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the Profile was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn set_modification_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modification_time = input;
        self
    }
    /// <p>The date and time that the Profile was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn get_modification_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modification_time
    }
    /// <p>The <code>ClientToken</code> value that was assigned when the Profile was created.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>ClientToken</code> value that was assigned when the Profile was created.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The <code>ClientToken</code> value that was assigned when the Profile was created.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`Profile`](crate::types::Profile).
    pub fn build(self) -> crate::types::Profile {
        crate::types::Profile {
            id: self.id,
            arn: self.arn,
            name: self.name,
            owner_id: self.owner_id,
            status: self.status,
            status_message: self.status_message,
            share_status: self.share_status,
            creation_time: self.creation_time,
            modification_time: self.modification_time,
            client_token: self.client_token,
        }
    }
}
