// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UntagInput {
    /// <p>The ARN of the resource group from which to remove tags. The command removed both the specified keys and any values associated with those keys.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The keys of the tags to be removed.</p>
    pub keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UntagInput {
    /// <p>The ARN of the resource group from which to remove tags. The command removed both the specified keys and any values associated with those keys.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The keys of the tags to be removed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.keys.is_none()`.
    pub fn keys(&self) -> &[::std::string::String] {
        self.keys.as_deref().unwrap_or_default()
    }
}
impl UntagInput {
    /// Creates a new builder-style object to manufacture [`UntagInput`](crate::operation::untag::UntagInput).
    pub fn builder() -> crate::operation::untag::builders::UntagInputBuilder {
        crate::operation::untag::builders::UntagInputBuilder::default()
    }
}

/// A builder for [`UntagInput`](crate::operation::untag::UntagInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UntagInputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UntagInputBuilder {
    /// <p>The ARN of the resource group from which to remove tags. The command removed both the specified keys and any values associated with those keys.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the resource group from which to remove tags. The command removed both the specified keys and any values associated with those keys.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the resource group from which to remove tags. The command removed both the specified keys and any values associated with those keys.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Appends an item to `keys`.
    ///
    /// To override the contents of this collection use [`set_keys`](Self::set_keys).
    ///
    /// <p>The keys of the tags to be removed.</p>
    pub fn keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.keys.unwrap_or_default();
        v.push(input.into());
        self.keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>The keys of the tags to be removed.</p>
    pub fn set_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.keys = input;
        self
    }
    /// <p>The keys of the tags to be removed.</p>
    pub fn get_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.keys
    }
    /// Consumes the builder and constructs a [`UntagInput`](crate::operation::untag::UntagInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::untag::UntagInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::untag::UntagInput {
            arn: self.arn,
            keys: self.keys,
        })
    }
}
