// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GroupResourcesOutput {
    /// <p>A list of ARNs of the resources that this operation successfully added to the group.</p>
    #[doc(hidden)]
    pub succeeded: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of ARNs of any resources that this operation failed to add to the group.</p>
    #[doc(hidden)]
    pub failed: std::option::Option<std::vec::Vec<crate::types::FailedResource>>,
    /// <p>A list of ARNs of any resources that this operation is still in the process adding to the group. These pending additions continue asynchronously. You can check the status of pending additions by using the <code> <code>ListGroupResources</code> </code> operation, and checking the <code>Resources</code> array in the response and the <code>Status</code> field of each object in that array. </p>
    #[doc(hidden)]
    pub pending: std::option::Option<std::vec::Vec<crate::types::PendingResource>>,
    _request_id: Option<String>,
}
impl GroupResourcesOutput {
    /// <p>A list of ARNs of the resources that this operation successfully added to the group.</p>
    pub fn succeeded(&self) -> std::option::Option<&[std::string::String]> {
        self.succeeded.as_deref()
    }
    /// <p>A list of ARNs of any resources that this operation failed to add to the group.</p>
    pub fn failed(&self) -> std::option::Option<&[crate::types::FailedResource]> {
        self.failed.as_deref()
    }
    /// <p>A list of ARNs of any resources that this operation is still in the process adding to the group. These pending additions continue asynchronously. You can check the status of pending additions by using the <code> <code>ListGroupResources</code> </code> operation, and checking the <code>Resources</code> array in the response and the <code>Status</code> field of each object in that array. </p>
    pub fn pending(&self) -> std::option::Option<&[crate::types::PendingResource]> {
        self.pending.as_deref()
    }
}
impl aws_http::request_id::RequestId for GroupResourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GroupResourcesOutput {
    /// Creates a new builder-style object to manufacture [`GroupResourcesOutput`](crate::operation::group_resources::GroupResourcesOutput).
    pub fn builder() -> crate::operation::group_resources::builders::GroupResourcesOutputBuilder {
        crate::operation::group_resources::builders::GroupResourcesOutputBuilder::default()
    }
}

/// A builder for [`GroupResourcesOutput`](crate::operation::group_resources::GroupResourcesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GroupResourcesOutputBuilder {
    pub(crate) succeeded: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) failed: std::option::Option<std::vec::Vec<crate::types::FailedResource>>,
    pub(crate) pending: std::option::Option<std::vec::Vec<crate::types::PendingResource>>,
    _request_id: Option<String>,
}
impl GroupResourcesOutputBuilder {
    /// Appends an item to `succeeded`.
    ///
    /// To override the contents of this collection use [`set_succeeded`](Self::set_succeeded).
    ///
    /// <p>A list of ARNs of the resources that this operation successfully added to the group.</p>
    pub fn succeeded(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.succeeded.unwrap_or_default();
        v.push(input.into());
        self.succeeded = Some(v);
        self
    }
    /// <p>A list of ARNs of the resources that this operation successfully added to the group.</p>
    pub fn set_succeeded(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.succeeded = input;
        self
    }
    /// Appends an item to `failed`.
    ///
    /// To override the contents of this collection use [`set_failed`](Self::set_failed).
    ///
    /// <p>A list of ARNs of any resources that this operation failed to add to the group.</p>
    pub fn failed(mut self, input: crate::types::FailedResource) -> Self {
        let mut v = self.failed.unwrap_or_default();
        v.push(input);
        self.failed = Some(v);
        self
    }
    /// <p>A list of ARNs of any resources that this operation failed to add to the group.</p>
    pub fn set_failed(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FailedResource>>,
    ) -> Self {
        self.failed = input;
        self
    }
    /// Appends an item to `pending`.
    ///
    /// To override the contents of this collection use [`set_pending`](Self::set_pending).
    ///
    /// <p>A list of ARNs of any resources that this operation is still in the process adding to the group. These pending additions continue asynchronously. You can check the status of pending additions by using the <code> <code>ListGroupResources</code> </code> operation, and checking the <code>Resources</code> array in the response and the <code>Status</code> field of each object in that array. </p>
    pub fn pending(mut self, input: crate::types::PendingResource) -> Self {
        let mut v = self.pending.unwrap_or_default();
        v.push(input);
        self.pending = Some(v);
        self
    }
    /// <p>A list of ARNs of any resources that this operation is still in the process adding to the group. These pending additions continue asynchronously. You can check the status of pending additions by using the <code> <code>ListGroupResources</code> </code> operation, and checking the <code>Resources</code> array in the response and the <code>Status</code> field of each object in that array. </p>
    pub fn set_pending(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PendingResource>>,
    ) -> Self {
        self.pending = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GroupResourcesOutput`](crate::operation::group_resources::GroupResourcesOutput).
    pub fn build(self) -> crate::operation::group_resources::GroupResourcesOutput {
        crate::operation::group_resources::GroupResourcesOutput {
            succeeded: self.succeeded,
            failed: self.failed,
            pending: self.pending,
            _request_id: self._request_id,
        }
    }
}
