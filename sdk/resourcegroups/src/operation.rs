// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Creates a resource group with the specified name and description. You can optionally
/// include a resource query, or a service configuration. For more information about
/// constructing a resource query, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create a tag-based group in Resource Groups</a>. For more
/// information about service configurations, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
/// groups</a>.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:CreateGroup</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGroup {
    _private: (),
}
impl CreateGroup {
    /// Creates a new builder-style object to manufacture [`CreateGroupInput`](crate::input::CreateGroupInput)
    pub fn builder() -> crate::input::create_group_input::Builder {
        crate::input::create_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateGroup {
    type Output =
        std::result::Result<crate::output::CreateGroupOutput, crate::error::CreateGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_group_error(response)
        } else {
            crate::operation_deser::parse_create_group_response(response)
        }
    }
}

/// <p>Deletes the specified resource group. Deleting a resource group does not delete any
/// resources that are members of the group; it only deletes the group structure.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:DeleteGroup</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteGroup {
    _private: (),
}
impl DeleteGroup {
    /// Creates a new builder-style object to manufacture [`DeleteGroupInput`](crate::input::DeleteGroupInput)
    pub fn builder() -> crate::input::delete_group_input::Builder {
        crate::input::delete_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteGroup {
    type Output =
        std::result::Result<crate::output::DeleteGroupOutput, crate::error::DeleteGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_group_error(response)
        } else {
            crate::operation_deser::parse_delete_group_response(response)
        }
    }
}

/// <p>Returns information about a specified resource group.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:GetGroup</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroup {
    _private: (),
}
impl GetGroup {
    /// Creates a new builder-style object to manufacture [`GetGroupInput`](crate::input::GetGroupInput)
    pub fn builder() -> crate::input::get_group_input::Builder {
        crate::input::get_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetGroup {
    type Output = std::result::Result<crate::output::GetGroupOutput, crate::error::GetGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_group_error(response)
        } else {
            crate::operation_deser::parse_get_group_response(response)
        }
    }
}

/// <p>Returns the service configuration associated with the specified resource group. For
/// details about the service configuration syntax, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
/// groups</a>.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:GetGroupConfiguration</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroupConfiguration {
    _private: (),
}
impl GetGroupConfiguration {
    /// Creates a new builder-style object to manufacture [`GetGroupConfigurationInput`](crate::input::GetGroupConfigurationInput)
    pub fn builder() -> crate::input::get_group_configuration_input::Builder {
        crate::input::get_group_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetGroupConfiguration {
    type Output = std::result::Result<
        crate::output::GetGroupConfigurationOutput,
        crate::error::GetGroupConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_group_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_group_configuration_response(response)
        }
    }
}

/// <p>Retrieves the resource query associated with the specified resource group. For more
/// information about resource queries, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create
/// a tag-based group in Resource Groups</a>.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:GetGroupQuery</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroupQuery {
    _private: (),
}
impl GetGroupQuery {
    /// Creates a new builder-style object to manufacture [`GetGroupQueryInput`](crate::input::GetGroupQueryInput)
    pub fn builder() -> crate::input::get_group_query_input::Builder {
        crate::input::get_group_query_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetGroupQuery {
    type Output =
        std::result::Result<crate::output::GetGroupQueryOutput, crate::error::GetGroupQueryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_group_query_error(response)
        } else {
            crate::operation_deser::parse_get_group_query_response(response)
        }
    }
}

/// <p>Returns a list of tags that are associated with a resource group, specified by an
/// ARN.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:GetTags</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTags {
    _private: (),
}
impl GetTags {
    /// Creates a new builder-style object to manufacture [`GetTagsInput`](crate::input::GetTagsInput)
    pub fn builder() -> crate::input::get_tags_input::Builder {
        crate::input::get_tags_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetTags {
    type Output = std::result::Result<crate::output::GetTagsOutput, crate::error::GetTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_tags_error(response)
        } else {
            crate::operation_deser::parse_get_tags_response(response)
        }
    }
}

/// <p>Adds the specified resources to the specified group.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:GroupResources</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GroupResources {
    _private: (),
}
impl GroupResources {
    /// Creates a new builder-style object to manufacture [`GroupResourcesInput`](crate::input::GroupResourcesInput)
    pub fn builder() -> crate::input::group_resources_input::Builder {
        crate::input::group_resources_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GroupResources {
    type Output =
        std::result::Result<crate::output::GroupResourcesOutput, crate::error::GroupResourcesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_group_resources_error(response)
        } else {
            crate::operation_deser::parse_group_resources_response(response)
        }
    }
}

/// <p>Returns a list of ARNs of the resources that are members of a specified resource
/// group.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:ListGroupResources</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>cloudformation:DescribeStacks</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>cloudformation:ListStackResources</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>tag:GetResources</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListGroupResources {
    _private: (),
}
impl ListGroupResources {
    /// Creates a new builder-style object to manufacture [`ListGroupResourcesInput`](crate::input::ListGroupResourcesInput)
    pub fn builder() -> crate::input::list_group_resources_input::Builder {
        crate::input::list_group_resources_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListGroupResources {
    type Output = std::result::Result<
        crate::output::ListGroupResourcesOutput,
        crate::error::ListGroupResourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_group_resources_error(response)
        } else {
            crate::operation_deser::parse_list_group_resources_response(response)
        }
    }
}

/// <p>Returns a list of existing resource groups in your account.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:ListGroups</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListGroups {
    _private: (),
}
impl ListGroups {
    /// Creates a new builder-style object to manufacture [`ListGroupsInput`](crate::input::ListGroupsInput)
    pub fn builder() -> crate::input::list_groups_input::Builder {
        crate::input::list_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListGroups {
    type Output =
        std::result::Result<crate::output::ListGroupsOutput, crate::error::ListGroupsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_groups_error(response)
        } else {
            crate::operation_deser::parse_list_groups_response(response)
        }
    }
}

/// <p>Attaches a service configuration to the specified group. This occurs asynchronously,
/// and can take time to complete. You can use <a>GetGroupConfiguration</a> to
/// check the status of the update.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:PutGroupConfiguration</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutGroupConfiguration {
    _private: (),
}
impl PutGroupConfiguration {
    /// Creates a new builder-style object to manufacture [`PutGroupConfigurationInput`](crate::input::PutGroupConfigurationInput)
    pub fn builder() -> crate::input::put_group_configuration_input::Builder {
        crate::input::put_group_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutGroupConfiguration {
    type Output = std::result::Result<
        crate::output::PutGroupConfigurationOutput,
        crate::error::PutGroupConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_put_group_configuration_error(response)
        } else {
            crate::operation_deser::parse_put_group_configuration_response(response)
        }
    }
}

/// <p>Returns a list of AWS resource identifiers that matches the specified query. The
/// query uses the same format as a resource query in a CreateGroup or UpdateGroupQuery
/// operation.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:SearchResources</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>cloudformation:DescribeStacks</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>cloudformation:ListStackResources</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>tag:GetResources</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchResources {
    _private: (),
}
impl SearchResources {
    /// Creates a new builder-style object to manufacture [`SearchResourcesInput`](crate::input::SearchResourcesInput)
    pub fn builder() -> crate::input::search_resources_input::Builder {
        crate::input::search_resources_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchResources {
    type Output = std::result::Result<
        crate::output::SearchResourcesOutput,
        crate::error::SearchResourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_resources_error(response)
        } else {
            crate::operation_deser::parse_search_resources_response(response)
        }
    }
}

/// <p>Adds tags to a resource group with the specified ARN. Existing tags on a resource
/// group are not changed if they are not specified in the request parameters.</p>
/// <important>
/// <p>Do not store personally identifiable information (PII) or other confidential or
/// sensitive information in tags. We use tags to provide you with billing and
/// administration services. Tags are not intended to be used for private or sensitive
/// data.</p>
/// </important>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:Tag</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct Tag {
    _private: (),
}
impl Tag {
    /// Creates a new builder-style object to manufacture [`TagInput`](crate::input::TagInput)
    pub fn builder() -> crate::input::tag_input::Builder {
        crate::input::tag_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for Tag {
    type Output = std::result::Result<crate::output::TagOutput, crate::error::TagError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_error(response)
        } else {
            crate::operation_deser::parse_tag_response(response)
        }
    }
}

/// <p>Removes the specified resources from the specified group.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:UngroupResources</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UngroupResources {
    _private: (),
}
impl UngroupResources {
    /// Creates a new builder-style object to manufacture [`UngroupResourcesInput`](crate::input::UngroupResourcesInput)
    pub fn builder() -> crate::input::ungroup_resources_input::Builder {
        crate::input::ungroup_resources_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UngroupResources {
    type Output = std::result::Result<
        crate::output::UngroupResourcesOutput,
        crate::error::UngroupResourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_ungroup_resources_error(response)
        } else {
            crate::operation_deser::parse_ungroup_resources_response(response)
        }
    }
}

/// <p>Deletes tags from a specified resource group.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:Untag</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct Untag {
    _private: (),
}
impl Untag {
    /// Creates a new builder-style object to manufacture [`UntagInput`](crate::input::UntagInput)
    pub fn builder() -> crate::input::untag_input::Builder {
        crate::input::untag_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for Untag {
    type Output = std::result::Result<crate::output::UntagOutput, crate::error::UntagError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_error(response)
        } else {
            crate::operation_deser::parse_untag_response(response)
        }
    }
}

/// <p>Updates the description for an existing group. You cannot update the name of a
/// resource group.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:UpdateGroup</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGroup {
    _private: (),
}
impl UpdateGroup {
    /// Creates a new builder-style object to manufacture [`UpdateGroupInput`](crate::input::UpdateGroupInput)
    pub fn builder() -> crate::input::update_group_input::Builder {
        crate::input::update_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateGroup {
    type Output =
        std::result::Result<crate::output::UpdateGroupOutput, crate::error::UpdateGroupError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_group_error(response)
        } else {
            crate::operation_deser::parse_update_group_response(response)
        }
    }
}

/// <p>Updates the resource query of a group. For more information about resource queries,
/// see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create a tag-based group in Resource Groups</a>.</p>
/// <p>
/// <b>Minimum permissions</b>
/// </p>
/// <p>To run this command, you must have the following permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>resource-groups:UpdateGroupQuery</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGroupQuery {
    _private: (),
}
impl UpdateGroupQuery {
    /// Creates a new builder-style object to manufacture [`UpdateGroupQueryInput`](crate::input::UpdateGroupQueryInput)
    pub fn builder() -> crate::input::update_group_query_input::Builder {
        crate::input::update_group_query_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateGroupQuery {
    type Output = std::result::Result<
        crate::output::UpdateGroupQueryOutput,
        crate::error::UpdateGroupQueryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_group_query_error(response)
        } else {
            crate::operation_deser::parse_update_group_query_response(response)
        }
    }
}
