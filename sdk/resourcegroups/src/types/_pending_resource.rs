// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that identifies a resource that is currently pending addition to the group as a member. Adding a resource to a resource group happens asynchronously as a background task and this one isn't completed yet.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PendingResource {
    /// <p>The Amazon resource name (ARN) of the resource that's in a pending state.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
}
impl PendingResource {
    /// <p>The Amazon resource name (ARN) of the resource that's in a pending state.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
}
impl PendingResource {
    /// Creates a new builder-style object to manufacture [`PendingResource`](crate::types::PendingResource).
    pub fn builder() -> crate::types::builders::PendingResourceBuilder {
        crate::types::builders::PendingResourceBuilder::default()
    }
}

/// A builder for [`PendingResource`](crate::types::PendingResource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PendingResourceBuilder {
    pub(crate) resource_arn: std::option::Option<std::string::String>,
}
impl PendingResourceBuilder {
    /// <p>The Amazon resource name (ARN) of the resource that's in a pending state.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The Amazon resource name (ARN) of the resource that's in a pending state.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`PendingResource`](crate::types::PendingResource).
    pub fn build(self) -> crate::types::PendingResource {
        crate::types::PendingResource {
            resource_arn: self.resource_arn,
        }
    }
}
