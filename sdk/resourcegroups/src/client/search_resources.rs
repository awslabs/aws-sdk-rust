// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SearchResources`](crate::operation::search_resources::builders::SearchResourcesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::search_resources::builders::SearchResourcesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_query(ResourceQuery)`](crate::operation::search_resources::builders::SearchResourcesFluentBuilder::resource_query) / [`set_resource_query(Option<ResourceQuery>)`](crate::operation::search_resources::builders::SearchResourcesFluentBuilder::set_resource_query): <p>The search query, using the same formats that are supported for resource group definition. For more information, see <code>CreateGroup</code>.</p>
    ///   - [`max_results(i32)`](crate::operation::search_resources::builders::SearchResourcesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::search_resources::builders::SearchResourcesFluentBuilder::set_max_results): <p>The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code> response element is present and has a value (is not null). Include that value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::search_resources::builders::SearchResourcesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::search_resources::builders::SearchResourcesFluentBuilder::set_next_token): <p>The parameter for receiving additional results if you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value provided by a previous call's <code>NextToken</code> response to indicate where the output should continue from.</p>
    /// - On success, responds with [`SearchResourcesOutput`](crate::operation::search_resources::SearchResourcesOutput) with field(s):
    ///   - [`resource_identifiers(Option<Vec<ResourceIdentifier>>)`](crate::operation::search_resources::SearchResourcesOutput::resource_identifiers): <p>The ARNs and resource types of resources that are members of the group that you specified.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::search_resources::SearchResourcesOutput::next_token): <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    ///   - [`query_errors(Option<Vec<QueryError>>)`](crate::operation::search_resources::SearchResourcesOutput::query_errors): <p>A list of <code>QueryError</code> objects. Each error is an object that contains <code>ErrorCode</code> and <code>Message</code> structures.</p>  <p>Possible values for <code>ErrorCode</code>:</p>  <ul>   <li> <p> <code>CLOUDFORMATION_STACK_INACTIVE</code> </p> </li>   <li> <p> <code>CLOUDFORMATION_STACK_NOT_EXISTING</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<SearchResourcesError>`](crate::operation::search_resources::SearchResourcesError)
    pub fn search_resources(
        &self,
    ) -> crate::operation::search_resources::builders::SearchResourcesFluentBuilder {
        crate::operation::search_resources::builders::SearchResourcesFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
