// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The request includes one or more parameters that violate validation rules.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>The caller isn't authorized to make the request. Check permissions.</p>
    ForbiddenException(crate::error::ForbiddenException),
    /// <p>An internal error occurred while processing the request. Try again later.</p>
    InternalServerErrorException(crate::error::InternalServerErrorException),
    /// <p>The request uses an HTTP method that isn't allowed for the specified resource.</p>
    MethodNotAllowedException(crate::error::MethodNotAllowedException),
    /// <p>One or more of the specified resources don't exist.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>You've exceeded throttling limits by making too many requests in a period of time.</p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>The request was rejected because it doesn't have valid credentials for the target resource.</p>
    UnauthorizedException(crate::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::MethodNotAllowedException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGroupError> for Error {
    fn from(err: crate::error::CreateGroupError) -> Self {
        match err {
            crate::error::CreateGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateGroupError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreateGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGroupError> for Error {
    fn from(err: crate::error::DeleteGroupError) -> Self {
        match err {
            crate::error::DeleteGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteGroupError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccountSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAccountSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccountSettingsError> for Error {
    fn from(err: crate::error::GetAccountSettingsError) -> Self {
        match err {
            crate::error::GetAccountSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAccountSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetAccountSettingsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetAccountSettingsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetAccountSettingsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGroupError> for Error {
    fn from(err: crate::error::GetGroupError) -> Self {
        match err {
            crate::error::GetGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetGroupError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGroupConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetGroupConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGroupConfigurationError> for Error {
    fn from(err: crate::error::GetGroupConfigurationError) -> Self {
        match err {
            crate::error::GetGroupConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetGroupConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetGroupConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetGroupConfigurationError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetGroupConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetGroupConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetGroupConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGroupQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGroupQueryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGroupQueryError> for Error {
    fn from(err: crate::error::GetGroupQueryError) -> Self {
        match err {
            crate::error::GetGroupQueryError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetGroupQueryError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetGroupQueryError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetGroupQueryError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetGroupQueryError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetGroupQueryError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetGroupQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTagsError> for Error {
    fn from(err: crate::error::GetTagsError) -> Self {
        match err {
            crate::error::GetTagsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetTagsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetTagsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetTagsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetTagsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetTagsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GroupResourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GroupResourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GroupResourcesError> for Error {
    fn from(err: crate::error::GroupResourcesError) -> Self {
        match err {
            crate::error::GroupResourcesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GroupResourcesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GroupResourcesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GroupResourcesError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GroupResourcesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GroupResourcesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GroupResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupResourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListGroupResourcesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGroupResourcesError> for Error {
    fn from(err: crate::error::ListGroupResourcesError) -> Self {
        match err {
            crate::error::ListGroupResourcesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListGroupResourcesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListGroupResourcesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListGroupResourcesError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::ListGroupResourcesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListGroupResourcesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListGroupResourcesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListGroupResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGroupsError> for Error {
    fn from(err: crate::error::ListGroupsError) -> Self {
        match err {
            crate::error::ListGroupsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListGroupsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListGroupsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListGroupsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::ListGroupsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutGroupConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutGroupConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutGroupConfigurationError> for Error {
    fn from(err: crate::error::PutGroupConfigurationError) -> Self {
        match err {
            crate::error::PutGroupConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutGroupConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutGroupConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::PutGroupConfigurationError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::PutGroupConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutGroupConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PutGroupConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchResourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchResourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchResourcesError> for Error {
    fn from(err: crate::error::SearchResourcesError) -> Self {
        match err {
            crate::error::SearchResourcesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::SearchResourcesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::SearchResourcesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::SearchResourcesError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::SearchResourcesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::SearchResourcesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::SearchResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagError> for Error {
    fn from(err: crate::error::TagError) -> Self {
        match err {
            crate::error::TagError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::TagError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::TagError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::TagError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::TagError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::TagError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::TagError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UngroupResourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UngroupResourcesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UngroupResourcesError> for Error {
    fn from(err: crate::error::UngroupResourcesError) -> Self {
        match err {
            crate::error::UngroupResourcesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UngroupResourcesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UngroupResourcesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UngroupResourcesError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UngroupResourcesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UngroupResourcesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UngroupResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagError> for Error {
    fn from(err: crate::error::UntagError) -> Self {
        match err {
            crate::error::UntagError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UntagError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::UntagError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UntagError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UntagError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::UntagError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UntagError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAccountSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAccountSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAccountSettingsError> for Error {
    fn from(err: crate::error::UpdateAccountSettingsError) -> Self {
        match err {
            crate::error::UpdateAccountSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateAccountSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateAccountSettingsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateAccountSettingsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateAccountSettingsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGroupError> for Error {
    fn from(err: crate::error::UpdateGroupError) -> Self {
        match err {
            crate::error::UpdateGroupError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateGroupError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateGroupError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGroupQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGroupQueryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGroupQueryError> for Error {
    fn from(err: crate::error::UpdateGroupQueryError) -> Self {
        match err {
            crate::error::UpdateGroupQueryError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateGroupQueryError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateGroupQueryError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateGroupQueryError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateGroupQueryError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateGroupQueryError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateGroupQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::MethodNotAllowedException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
