// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#![cfg(smoketests)]
//!
//! The tests in this module run against live AWS services. As such,
//! they are disabled by default. To enable them, run the tests with
//!
//! ```sh
//! RUSTFLAGS="--cfg smoketests" cargo test
//! ```
//!
use aws_sdk_ssmquicksetup::{config, Client};
/// Smoke tests for the `get_configuration_manager` operation
#[::tokio::test]
async fn test_get_configuration_manager_failure() {
    let config = ::aws_config::load_defaults(config::BehaviorVersion::latest()).await;
    let conf = config::Config::from(&config)
        .to_builder()
        .region(::aws_types::region::Region::new("us-east-1"))
        .use_dual_stack(false)
        .use_fips(false)
        .build();
    let client = Client::from_conf(conf);
    let res = client
        .get_configuration_manager()
        .set_manager_arn(::std::option::Option::Some(
            "arn:aws:ssm-quicksetup:us-east-1:602768233532:configuration-manager/7cac1a1b-64a9-4c9a-97e8-8c68928b8f13".to_owned(),
        ))
        .send()
        .await;
    let err = res.expect_err("request should fail");
    let err = err.into_service_error();
    assert!(err.is_access_denied_exception())
}
/// Smoke tests for the `list_configuration_managers` operation
#[::tokio::test]
async fn test_list_configuration_managers_success() {
    let config = ::aws_config::load_defaults(config::BehaviorVersion::latest()).await;
    let conf = config::Config::from(&config)
        .to_builder()
        .region(::aws_types::region::Region::new("us-east-1"))
        .use_dual_stack(false)
        .use_fips(false)
        .build();
    let client = Client::from_conf(conf);
    let res = client.list_configuration_managers().send().await;
    res.expect("request should succeed");
}
/// Smoke tests for the `list_quick_setup_types` operation
#[::tokio::test]
async fn test_list_quick_setup_types_success() {
    let config = ::aws_config::load_defaults(config::BehaviorVersion::latest()).await;
    let conf = config::Config::from(&config)
        .to_builder()
        .region(::aws_types::region::Region::new("us-east-1"))
        .use_dual_stack(false)
        .use_fips(false)
        .build();
    let client = Client::from_conf(conf);
    let res = client.list_quick_setup_types().send().await;
    res.expect("request should succeed");
}
