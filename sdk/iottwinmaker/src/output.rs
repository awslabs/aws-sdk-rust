// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkspaceOutput {
    /// <p>The date and time of the current update.</p>
    #[doc(hidden)]
    pub update_date_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdateWorkspaceOutput {
    /// <p>The date and time of the current update.</p>
    pub fn update_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateWorkspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateWorkspaceOutput`](crate::output::UpdateWorkspaceOutput).
pub mod update_workspace_output {

    /// A builder for [`UpdateWorkspaceOutput`](crate::output::UpdateWorkspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) update_date_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The date and time of the current update.</p>
        pub fn update_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_date_time = Some(input);
            self
        }
        /// <p>The date and time of the current update.</p>
        pub fn set_update_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_date_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateWorkspaceOutput`](crate::output::UpdateWorkspaceOutput).
        pub fn build(self) -> crate::output::UpdateWorkspaceOutput {
            crate::output::UpdateWorkspaceOutput {
                update_date_time: self.update_date_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateWorkspaceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspaceOutput`](crate::output::UpdateWorkspaceOutput).
    pub fn builder() -> crate::output::update_workspace_output::Builder {
        crate::output::update_workspace_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSceneOutput {
    /// <p>The date and time when the scene was last updated.</p>
    #[doc(hidden)]
    pub update_date_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdateSceneOutput {
    /// <p>The date and time when the scene was last updated.</p>
    pub fn update_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateSceneOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateSceneOutput`](crate::output::UpdateSceneOutput).
pub mod update_scene_output {

    /// A builder for [`UpdateSceneOutput`](crate::output::UpdateSceneOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) update_date_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The date and time when the scene was last updated.</p>
        pub fn update_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_date_time = Some(input);
            self
        }
        /// <p>The date and time when the scene was last updated.</p>
        pub fn set_update_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_date_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSceneOutput`](crate::output::UpdateSceneOutput).
        pub fn build(self) -> crate::output::UpdateSceneOutput {
            crate::output::UpdateSceneOutput {
                update_date_time: self.update_date_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateSceneOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSceneOutput`](crate::output::UpdateSceneOutput).
    pub fn builder() -> crate::output::update_scene_output::Builder {
        crate::output::update_scene_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePricingPlanOutput {
    /// <p>Update the current pricing plan.</p>
    #[doc(hidden)]
    pub current_pricing_plan: std::option::Option<crate::model::PricingPlan>,
    /// <p>Update the pending pricing plan.</p>
    #[doc(hidden)]
    pub pending_pricing_plan: std::option::Option<crate::model::PricingPlan>,
    _request_id: Option<String>,
}
impl UpdatePricingPlanOutput {
    /// <p>Update the current pricing plan.</p>
    pub fn current_pricing_plan(&self) -> std::option::Option<&crate::model::PricingPlan> {
        self.current_pricing_plan.as_ref()
    }
    /// <p>Update the pending pricing plan.</p>
    pub fn pending_pricing_plan(&self) -> std::option::Option<&crate::model::PricingPlan> {
        self.pending_pricing_plan.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdatePricingPlanOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdatePricingPlanOutput`](crate::output::UpdatePricingPlanOutput).
pub mod update_pricing_plan_output {

    /// A builder for [`UpdatePricingPlanOutput`](crate::output::UpdatePricingPlanOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) current_pricing_plan: std::option::Option<crate::model::PricingPlan>,
        pub(crate) pending_pricing_plan: std::option::Option<crate::model::PricingPlan>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Update the current pricing plan.</p>
        pub fn current_pricing_plan(mut self, input: crate::model::PricingPlan) -> Self {
            self.current_pricing_plan = Some(input);
            self
        }
        /// <p>Update the current pricing plan.</p>
        pub fn set_current_pricing_plan(
            mut self,
            input: std::option::Option<crate::model::PricingPlan>,
        ) -> Self {
            self.current_pricing_plan = input;
            self
        }
        /// <p>Update the pending pricing plan.</p>
        pub fn pending_pricing_plan(mut self, input: crate::model::PricingPlan) -> Self {
            self.pending_pricing_plan = Some(input);
            self
        }
        /// <p>Update the pending pricing plan.</p>
        pub fn set_pending_pricing_plan(
            mut self,
            input: std::option::Option<crate::model::PricingPlan>,
        ) -> Self {
            self.pending_pricing_plan = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdatePricingPlanOutput`](crate::output::UpdatePricingPlanOutput).
        pub fn build(self) -> crate::output::UpdatePricingPlanOutput {
            crate::output::UpdatePricingPlanOutput {
                current_pricing_plan: self.current_pricing_plan,
                pending_pricing_plan: self.pending_pricing_plan,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdatePricingPlanOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePricingPlanOutput`](crate::output::UpdatePricingPlanOutput).
    pub fn builder() -> crate::output::update_pricing_plan_output::Builder {
        crate::output::update_pricing_plan_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateEntityOutput {
    /// <p>The date and time when the entity was last updated.</p>
    #[doc(hidden)]
    pub update_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current state of the entity update.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::State>,
    _request_id: Option<String>,
}
impl UpdateEntityOutput {
    /// <p>The date and time when the entity was last updated.</p>
    pub fn update_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
    /// <p>The current state of the entity update.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::State> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateEntityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateEntityOutput`](crate::output::UpdateEntityOutput).
pub mod update_entity_output {

    /// A builder for [`UpdateEntityOutput`](crate::output::UpdateEntityOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) update_date_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) state: std::option::Option<crate::model::State>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The date and time when the entity was last updated.</p>
        pub fn update_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_date_time = Some(input);
            self
        }
        /// <p>The date and time when the entity was last updated.</p>
        pub fn set_update_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_date_time = input;
            self
        }
        /// <p>The current state of the entity update.</p>
        pub fn state(mut self, input: crate::model::State) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The current state of the entity update.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::State>) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateEntityOutput`](crate::output::UpdateEntityOutput).
        pub fn build(self) -> crate::output::UpdateEntityOutput {
            crate::output::UpdateEntityOutput {
                update_date_time: self.update_date_time,
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateEntityOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEntityOutput`](crate::output::UpdateEntityOutput).
    pub fn builder() -> crate::output::update_entity_output::Builder {
        crate::output::update_entity_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateComponentTypeOutput {
    /// <p>The ID of the workspace that contains the component type.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>The ARN of the component type.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the component type.</p>
    #[doc(hidden)]
    pub component_type_id: std::option::Option<std::string::String>,
    /// <p>The current state of the component type.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::State>,
    _request_id: Option<String>,
}
impl UpdateComponentTypeOutput {
    /// <p>The ID of the workspace that contains the component type.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The ARN of the component type.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the component type.</p>
    pub fn component_type_id(&self) -> std::option::Option<&str> {
        self.component_type_id.as_deref()
    }
    /// <p>The current state of the component type.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::State> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateComponentTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateComponentTypeOutput`](crate::output::UpdateComponentTypeOutput).
pub mod update_component_type_output {

    /// A builder for [`UpdateComponentTypeOutput`](crate::output::UpdateComponentTypeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace_id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) component_type_id: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::State>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the workspace that contains the component type.</p>
        pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workspace_id = Some(input.into());
            self
        }
        /// <p>The ID of the workspace that contains the component type.</p>
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workspace_id = input;
            self
        }
        /// <p>The ARN of the component type.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the component type.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The ID of the component type.</p>
        pub fn component_type_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.component_type_id = Some(input.into());
            self
        }
        /// <p>The ID of the component type.</p>
        pub fn set_component_type_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.component_type_id = input;
            self
        }
        /// <p>The current state of the component type.</p>
        pub fn state(mut self, input: crate::model::State) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The current state of the component type.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::State>) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateComponentTypeOutput`](crate::output::UpdateComponentTypeOutput).
        pub fn build(self) -> crate::output::UpdateComponentTypeOutput {
            crate::output::UpdateComponentTypeOutput {
                workspace_id: self.workspace_id,
                arn: self.arn,
                component_type_id: self.component_type_id,
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateComponentTypeOutput {
    /// Creates a new builder-style object to manufacture [`UpdateComponentTypeOutput`](crate::output::UpdateComponentTypeOutput).
    pub fn builder() -> crate::output::update_component_type_output::Builder {
        crate::output::update_component_type_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorkspacesOutput {
    /// <p>A list of objects that contain information about the workspaces.</p>
    #[doc(hidden)]
    pub workspace_summaries: std::option::Option<std::vec::Vec<crate::model::WorkspaceSummary>>,
    /// <p>The string that specifies the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkspacesOutput {
    /// <p>A list of objects that contain information about the workspaces.</p>
    pub fn workspace_summaries(&self) -> std::option::Option<&[crate::model::WorkspaceSummary]> {
        self.workspace_summaries.as_deref()
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListWorkspacesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput).
pub mod list_workspaces_output {

    /// A builder for [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace_summaries:
            std::option::Option<std::vec::Vec<crate::model::WorkspaceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `workspace_summaries`.
        ///
        /// To override the contents of this collection use [`set_workspace_summaries`](Self::set_workspace_summaries).
        ///
        /// <p>A list of objects that contain information about the workspaces.</p>
        pub fn workspace_summaries(mut self, input: crate::model::WorkspaceSummary) -> Self {
            let mut v = self.workspace_summaries.unwrap_or_default();
            v.push(input);
            self.workspace_summaries = Some(v);
            self
        }
        /// <p>A list of objects that contain information about the workspaces.</p>
        pub fn set_workspace_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WorkspaceSummary>>,
        ) -> Self {
            self.workspace_summaries = input;
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput).
        pub fn build(self) -> crate::output::ListWorkspacesOutput {
            crate::output::ListWorkspacesOutput {
                workspace_summaries: self.workspace_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListWorkspacesOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput).
    pub fn builder() -> crate::output::list_workspaces_output::Builder {
        crate::output::list_workspaces_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>Metadata that you can use to manage a resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The string that specifies the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>Metadata that you can use to manage a resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Metadata that you can use to manage a resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>Metadata that you can use to manage a resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSyncResourcesOutput {
    /// <p>The sync resources.</p>
    #[doc(hidden)]
    pub sync_resources: std::option::Option<std::vec::Vec<crate::model::SyncResourceSummary>>,
    /// <p>The string that specifies the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSyncResourcesOutput {
    /// <p>The sync resources.</p>
    pub fn sync_resources(&self) -> std::option::Option<&[crate::model::SyncResourceSummary]> {
        self.sync_resources.as_deref()
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSyncResourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListSyncResourcesOutput`](crate::output::ListSyncResourcesOutput).
pub mod list_sync_resources_output {

    /// A builder for [`ListSyncResourcesOutput`](crate::output::ListSyncResourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sync_resources:
            std::option::Option<std::vec::Vec<crate::model::SyncResourceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `sync_resources`.
        ///
        /// To override the contents of this collection use [`set_sync_resources`](Self::set_sync_resources).
        ///
        /// <p>The sync resources.</p>
        pub fn sync_resources(mut self, input: crate::model::SyncResourceSummary) -> Self {
            let mut v = self.sync_resources.unwrap_or_default();
            v.push(input);
            self.sync_resources = Some(v);
            self
        }
        /// <p>The sync resources.</p>
        pub fn set_sync_resources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SyncResourceSummary>>,
        ) -> Self {
            self.sync_resources = input;
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSyncResourcesOutput`](crate::output::ListSyncResourcesOutput).
        pub fn build(self) -> crate::output::ListSyncResourcesOutput {
            crate::output::ListSyncResourcesOutput {
                sync_resources: self.sync_resources,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListSyncResourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListSyncResourcesOutput`](crate::output::ListSyncResourcesOutput).
    pub fn builder() -> crate::output::list_sync_resources_output::Builder {
        crate::output::list_sync_resources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSyncJobsOutput {
    /// <p>The listed SyncJob summaries.</p>
    #[doc(hidden)]
    pub sync_job_summaries: std::option::Option<std::vec::Vec<crate::model::SyncJobSummary>>,
    /// <p>The string that specifies the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSyncJobsOutput {
    /// <p>The listed SyncJob summaries.</p>
    pub fn sync_job_summaries(&self) -> std::option::Option<&[crate::model::SyncJobSummary]> {
        self.sync_job_summaries.as_deref()
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSyncJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListSyncJobsOutput`](crate::output::ListSyncJobsOutput).
pub mod list_sync_jobs_output {

    /// A builder for [`ListSyncJobsOutput`](crate::output::ListSyncJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sync_job_summaries:
            std::option::Option<std::vec::Vec<crate::model::SyncJobSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `sync_job_summaries`.
        ///
        /// To override the contents of this collection use [`set_sync_job_summaries`](Self::set_sync_job_summaries).
        ///
        /// <p>The listed SyncJob summaries.</p>
        pub fn sync_job_summaries(mut self, input: crate::model::SyncJobSummary) -> Self {
            let mut v = self.sync_job_summaries.unwrap_or_default();
            v.push(input);
            self.sync_job_summaries = Some(v);
            self
        }
        /// <p>The listed SyncJob summaries.</p>
        pub fn set_sync_job_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SyncJobSummary>>,
        ) -> Self {
            self.sync_job_summaries = input;
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSyncJobsOutput`](crate::output::ListSyncJobsOutput).
        pub fn build(self) -> crate::output::ListSyncJobsOutput {
            crate::output::ListSyncJobsOutput {
                sync_job_summaries: self.sync_job_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListSyncJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListSyncJobsOutput`](crate::output::ListSyncJobsOutput).
    pub fn builder() -> crate::output::list_sync_jobs_output::Builder {
        crate::output::list_sync_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListScenesOutput {
    /// <p>A list of objects that contain information about the scenes.</p>
    #[doc(hidden)]
    pub scene_summaries: std::option::Option<std::vec::Vec<crate::model::SceneSummary>>,
    /// <p>The string that specifies the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListScenesOutput {
    /// <p>A list of objects that contain information about the scenes.</p>
    pub fn scene_summaries(&self) -> std::option::Option<&[crate::model::SceneSummary]> {
        self.scene_summaries.as_deref()
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListScenesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListScenesOutput`](crate::output::ListScenesOutput).
pub mod list_scenes_output {

    /// A builder for [`ListScenesOutput`](crate::output::ListScenesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scene_summaries: std::option::Option<std::vec::Vec<crate::model::SceneSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `scene_summaries`.
        ///
        /// To override the contents of this collection use [`set_scene_summaries`](Self::set_scene_summaries).
        ///
        /// <p>A list of objects that contain information about the scenes.</p>
        pub fn scene_summaries(mut self, input: crate::model::SceneSummary) -> Self {
            let mut v = self.scene_summaries.unwrap_or_default();
            v.push(input);
            self.scene_summaries = Some(v);
            self
        }
        /// <p>A list of objects that contain information about the scenes.</p>
        pub fn set_scene_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SceneSummary>>,
        ) -> Self {
            self.scene_summaries = input;
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListScenesOutput`](crate::output::ListScenesOutput).
        pub fn build(self) -> crate::output::ListScenesOutput {
            crate::output::ListScenesOutput {
                scene_summaries: self.scene_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListScenesOutput {
    /// Creates a new builder-style object to manufacture [`ListScenesOutput`](crate::output::ListScenesOutput).
    pub fn builder() -> crate::output::list_scenes_output::Builder {
        crate::output::list_scenes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListEntitiesOutput {
    /// <p>A list of objects that contain information about the entities.</p>
    #[doc(hidden)]
    pub entity_summaries: std::option::Option<std::vec::Vec<crate::model::EntitySummary>>,
    /// <p>The string that specifies the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListEntitiesOutput {
    /// <p>A list of objects that contain information about the entities.</p>
    pub fn entity_summaries(&self) -> std::option::Option<&[crate::model::EntitySummary]> {
        self.entity_summaries.as_deref()
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListEntitiesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListEntitiesOutput`](crate::output::ListEntitiesOutput).
pub mod list_entities_output {

    /// A builder for [`ListEntitiesOutput`](crate::output::ListEntitiesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entity_summaries:
            std::option::Option<std::vec::Vec<crate::model::EntitySummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `entity_summaries`.
        ///
        /// To override the contents of this collection use [`set_entity_summaries`](Self::set_entity_summaries).
        ///
        /// <p>A list of objects that contain information about the entities.</p>
        pub fn entity_summaries(mut self, input: crate::model::EntitySummary) -> Self {
            let mut v = self.entity_summaries.unwrap_or_default();
            v.push(input);
            self.entity_summaries = Some(v);
            self
        }
        /// <p>A list of objects that contain information about the entities.</p>
        pub fn set_entity_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EntitySummary>>,
        ) -> Self {
            self.entity_summaries = input;
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListEntitiesOutput`](crate::output::ListEntitiesOutput).
        pub fn build(self) -> crate::output::ListEntitiesOutput {
            crate::output::ListEntitiesOutput {
                entity_summaries: self.entity_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListEntitiesOutput {
    /// Creates a new builder-style object to manufacture [`ListEntitiesOutput`](crate::output::ListEntitiesOutput).
    pub fn builder() -> crate::output::list_entities_output::Builder {
        crate::output::list_entities_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListComponentTypesOutput {
    /// <p>The ID of the workspace.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>A list of objects that contain information about the component types.</p>
    #[doc(hidden)]
    pub component_type_summaries:
        std::option::Option<std::vec::Vec<crate::model::ComponentTypeSummary>>,
    /// <p>The string that specifies the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Specifies the maximum number of results to display.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl ListComponentTypesOutput {
    /// <p>The ID of the workspace.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>A list of objects that contain information about the component types.</p>
    pub fn component_type_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::ComponentTypeSummary]> {
        self.component_type_summaries.as_deref()
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specifies the maximum number of results to display.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl aws_http::request_id::RequestId for ListComponentTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListComponentTypesOutput`](crate::output::ListComponentTypesOutput).
pub mod list_component_types_output {

    /// A builder for [`ListComponentTypesOutput`](crate::output::ListComponentTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace_id: std::option::Option<std::string::String>,
        pub(crate) component_type_summaries:
            std::option::Option<std::vec::Vec<crate::model::ComponentTypeSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) max_results: std::option::Option<i32>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the workspace.</p>
        pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workspace_id = Some(input.into());
            self
        }
        /// <p>The ID of the workspace.</p>
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workspace_id = input;
            self
        }
        /// Appends an item to `component_type_summaries`.
        ///
        /// To override the contents of this collection use [`set_component_type_summaries`](Self::set_component_type_summaries).
        ///
        /// <p>A list of objects that contain information about the component types.</p>
        pub fn component_type_summaries(
            mut self,
            input: crate::model::ComponentTypeSummary,
        ) -> Self {
            let mut v = self.component_type_summaries.unwrap_or_default();
            v.push(input);
            self.component_type_summaries = Some(v);
            self
        }
        /// <p>A list of objects that contain information about the component types.</p>
        pub fn set_component_type_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ComponentTypeSummary>>,
        ) -> Self {
            self.component_type_summaries = input;
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>Specifies the maximum number of results to display.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.max_results = Some(input);
            self
        }
        /// <p>Specifies the maximum number of results to display.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.max_results = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListComponentTypesOutput`](crate::output::ListComponentTypesOutput).
        pub fn build(self) -> crate::output::ListComponentTypesOutput {
            crate::output::ListComponentTypesOutput {
                workspace_id: self.workspace_id,
                component_type_summaries: self.component_type_summaries,
                next_token: self.next_token,
                max_results: self.max_results,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListComponentTypesOutput {
    /// Creates a new builder-style object to manufacture [`ListComponentTypesOutput`](crate::output::ListComponentTypesOutput).
    pub fn builder() -> crate::output::list_component_types_output::Builder {
        crate::output::list_component_types_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetWorkspaceOutput {
    /// <p>The ID of the workspace.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>The ARN of the workspace.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The description of the workspace.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ARN of the S3 bucket where resources associated with the workspace are stored.</p>
    #[doc(hidden)]
    pub s3_location: std::option::Option<std::string::String>,
    /// <p>The ARN of the execution role associated with the workspace.</p>
    #[doc(hidden)]
    pub role: std::option::Option<std::string::String>,
    /// <p>The date and time when the workspace was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the workspace was last updated.</p>
    #[doc(hidden)]
    pub update_date_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetWorkspaceOutput {
    /// <p>The ID of the workspace.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The ARN of the workspace.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The description of the workspace.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ARN of the S3 bucket where resources associated with the workspace are stored.</p>
    pub fn s3_location(&self) -> std::option::Option<&str> {
        self.s3_location.as_deref()
    }
    /// <p>The ARN of the execution role associated with the workspace.</p>
    pub fn role(&self) -> std::option::Option<&str> {
        self.role.as_deref()
    }
    /// <p>The date and time when the workspace was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The date and time when the workspace was last updated.</p>
    pub fn update_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetWorkspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetWorkspaceOutput`](crate::output::GetWorkspaceOutput).
pub mod get_workspace_output {

    /// A builder for [`GetWorkspaceOutput`](crate::output::GetWorkspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace_id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) s3_location: std::option::Option<std::string::String>,
        pub(crate) role: std::option::Option<std::string::String>,
        pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) update_date_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the workspace.</p>
        pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workspace_id = Some(input.into());
            self
        }
        /// <p>The ID of the workspace.</p>
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workspace_id = input;
            self
        }
        /// <p>The ARN of the workspace.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the workspace.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The description of the workspace.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the workspace.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The ARN of the S3 bucket where resources associated with the workspace are stored.</p>
        pub fn s3_location(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_location = Some(input.into());
            self
        }
        /// <p>The ARN of the S3 bucket where resources associated with the workspace are stored.</p>
        pub fn set_s3_location(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_location = input;
            self
        }
        /// <p>The ARN of the execution role associated with the workspace.</p>
        pub fn role(mut self, input: impl Into<std::string::String>) -> Self {
            self.role = Some(input.into());
            self
        }
        /// <p>The ARN of the execution role associated with the workspace.</p>
        pub fn set_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role = input;
            self
        }
        /// <p>The date and time when the workspace was created.</p>
        pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_date_time = Some(input);
            self
        }
        /// <p>The date and time when the workspace was created.</p>
        pub fn set_creation_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_date_time = input;
            self
        }
        /// <p>The date and time when the workspace was last updated.</p>
        pub fn update_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_date_time = Some(input);
            self
        }
        /// <p>The date and time when the workspace was last updated.</p>
        pub fn set_update_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_date_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetWorkspaceOutput`](crate::output::GetWorkspaceOutput).
        pub fn build(self) -> crate::output::GetWorkspaceOutput {
            crate::output::GetWorkspaceOutput {
                workspace_id: self.workspace_id,
                arn: self.arn,
                description: self.description,
                s3_location: self.s3_location,
                role: self.role,
                creation_date_time: self.creation_date_time,
                update_date_time: self.update_date_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetWorkspaceOutput {
    /// Creates a new builder-style object to manufacture [`GetWorkspaceOutput`](crate::output::GetWorkspaceOutput).
    pub fn builder() -> crate::output::get_workspace_output::Builder {
        crate::output::get_workspace_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSyncJobOutput {
    /// <p>The sync job ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the workspace that contains the sync job.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>The sync soucre.</p> <note>
    /// <p>Currently the only supported syncSoucre is <code>SITEWISE </code>.</p>
    /// </note>
    #[doc(hidden)]
    pub sync_source: std::option::Option<std::string::String>,
    /// <p>The sync IAM role.</p>
    #[doc(hidden)]
    pub sync_role: std::option::Option<std::string::String>,
    /// <p>The SyncJob response status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::SyncJobStatus>,
    /// <p>The creation date and time.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The update date and time.</p>
    #[doc(hidden)]
    pub update_date_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetSyncJobOutput {
    /// <p>The sync job ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the workspace that contains the sync job.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The sync soucre.</p> <note>
    /// <p>Currently the only supported syncSoucre is <code>SITEWISE </code>.</p>
    /// </note>
    pub fn sync_source(&self) -> std::option::Option<&str> {
        self.sync_source.as_deref()
    }
    /// <p>The sync IAM role.</p>
    pub fn sync_role(&self) -> std::option::Option<&str> {
        self.sync_role.as_deref()
    }
    /// <p>The SyncJob response status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::SyncJobStatus> {
        self.status.as_ref()
    }
    /// <p>The creation date and time.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The update date and time.</p>
    pub fn update_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSyncJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetSyncJobOutput`](crate::output::GetSyncJobOutput).
pub mod get_sync_job_output {

    /// A builder for [`GetSyncJobOutput`](crate::output::GetSyncJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) workspace_id: std::option::Option<std::string::String>,
        pub(crate) sync_source: std::option::Option<std::string::String>,
        pub(crate) sync_role: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::SyncJobStatus>,
        pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) update_date_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The sync job ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The sync job ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The ID of the workspace that contains the sync job.</p>
        pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workspace_id = Some(input.into());
            self
        }
        /// <p>The ID of the workspace that contains the sync job.</p>
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workspace_id = input;
            self
        }
        /// <p>The sync soucre.</p> <note>
        /// <p>Currently the only supported syncSoucre is <code>SITEWISE </code>.</p>
        /// </note>
        pub fn sync_source(mut self, input: impl Into<std::string::String>) -> Self {
            self.sync_source = Some(input.into());
            self
        }
        /// <p>The sync soucre.</p> <note>
        /// <p>Currently the only supported syncSoucre is <code>SITEWISE </code>.</p>
        /// </note>
        pub fn set_sync_source(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.sync_source = input;
            self
        }
        /// <p>The sync IAM role.</p>
        pub fn sync_role(mut self, input: impl Into<std::string::String>) -> Self {
            self.sync_role = Some(input.into());
            self
        }
        /// <p>The sync IAM role.</p>
        pub fn set_sync_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.sync_role = input;
            self
        }
        /// <p>The SyncJob response status.</p>
        pub fn status(mut self, input: crate::model::SyncJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The SyncJob response status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::SyncJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The creation date and time.</p>
        pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_date_time = Some(input);
            self
        }
        /// <p>The creation date and time.</p>
        pub fn set_creation_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_date_time = input;
            self
        }
        /// <p>The update date and time.</p>
        pub fn update_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_date_time = Some(input);
            self
        }
        /// <p>The update date and time.</p>
        pub fn set_update_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_date_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSyncJobOutput`](crate::output::GetSyncJobOutput).
        pub fn build(self) -> crate::output::GetSyncJobOutput {
            crate::output::GetSyncJobOutput {
                arn: self.arn,
                workspace_id: self.workspace_id,
                sync_source: self.sync_source,
                sync_role: self.sync_role,
                status: self.status,
                creation_date_time: self.creation_date_time,
                update_date_time: self.update_date_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetSyncJobOutput {
    /// Creates a new builder-style object to manufacture [`GetSyncJobOutput`](crate::output::GetSyncJobOutput).
    pub fn builder() -> crate::output::get_sync_job_output::Builder {
        crate::output::get_sync_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSceneOutput {
    /// <p>The ID of the workspace that contains the scene.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>The ID of the scene.</p>
    #[doc(hidden)]
    pub scene_id: std::option::Option<std::string::String>,
    /// <p>The relative path that specifies the location of the content definition file.</p>
    #[doc(hidden)]
    pub content_location: std::option::Option<std::string::String>,
    /// <p>The ARN of the scene.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The date and time when the scene was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the scene was last updated.</p>
    #[doc(hidden)]
    pub update_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The description of the scene.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A list of capabilities that the scene uses to render.</p>
    #[doc(hidden)]
    pub capabilities: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl GetSceneOutput {
    /// <p>The ID of the workspace that contains the scene.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The ID of the scene.</p>
    pub fn scene_id(&self) -> std::option::Option<&str> {
        self.scene_id.as_deref()
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub fn content_location(&self) -> std::option::Option<&str> {
        self.content_location.as_deref()
    }
    /// <p>The ARN of the scene.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date and time when the scene was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The date and time when the scene was last updated.</p>
    pub fn update_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
    /// <p>The description of the scene.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of capabilities that the scene uses to render.</p>
    pub fn capabilities(&self) -> std::option::Option<&[std::string::String]> {
        self.capabilities.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetSceneOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetSceneOutput`](crate::output::GetSceneOutput).
pub mod get_scene_output {

    /// A builder for [`GetSceneOutput`](crate::output::GetSceneOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace_id: std::option::Option<std::string::String>,
        pub(crate) scene_id: std::option::Option<std::string::String>,
        pub(crate) content_location: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) update_date_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) capabilities: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the workspace that contains the scene.</p>
        pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workspace_id = Some(input.into());
            self
        }
        /// <p>The ID of the workspace that contains the scene.</p>
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workspace_id = input;
            self
        }
        /// <p>The ID of the scene.</p>
        pub fn scene_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.scene_id = Some(input.into());
            self
        }
        /// <p>The ID of the scene.</p>
        pub fn set_scene_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.scene_id = input;
            self
        }
        /// <p>The relative path that specifies the location of the content definition file.</p>
        pub fn content_location(mut self, input: impl Into<std::string::String>) -> Self {
            self.content_location = Some(input.into());
            self
        }
        /// <p>The relative path that specifies the location of the content definition file.</p>
        pub fn set_content_location(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.content_location = input;
            self
        }
        /// <p>The ARN of the scene.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the scene.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The date and time when the scene was created.</p>
        pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_date_time = Some(input);
            self
        }
        /// <p>The date and time when the scene was created.</p>
        pub fn set_creation_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_date_time = input;
            self
        }
        /// <p>The date and time when the scene was last updated.</p>
        pub fn update_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_date_time = Some(input);
            self
        }
        /// <p>The date and time when the scene was last updated.</p>
        pub fn set_update_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_date_time = input;
            self
        }
        /// <p>The description of the scene.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the scene.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// Appends an item to `capabilities`.
        ///
        /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
        ///
        /// <p>A list of capabilities that the scene uses to render.</p>
        pub fn capabilities(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.capabilities.unwrap_or_default();
            v.push(input.into());
            self.capabilities = Some(v);
            self
        }
        /// <p>A list of capabilities that the scene uses to render.</p>
        pub fn set_capabilities(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.capabilities = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSceneOutput`](crate::output::GetSceneOutput).
        pub fn build(self) -> crate::output::GetSceneOutput {
            crate::output::GetSceneOutput {
                workspace_id: self.workspace_id,
                scene_id: self.scene_id,
                content_location: self.content_location,
                arn: self.arn,
                creation_date_time: self.creation_date_time,
                update_date_time: self.update_date_time,
                description: self.description,
                capabilities: self.capabilities,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetSceneOutput {
    /// Creates a new builder-style object to manufacture [`GetSceneOutput`](crate::output::GetSceneOutput).
    pub fn builder() -> crate::output::get_scene_output::Builder {
        crate::output::get_scene_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPropertyValueHistoryOutput {
    /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
    #[doc(hidden)]
    pub property_values: std::option::Option<std::vec::Vec<crate::model::PropertyValueHistory>>,
    /// <p>The string that specifies the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetPropertyValueHistoryOutput {
    /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn property_values(&self) -> std::option::Option<&[crate::model::PropertyValueHistory]> {
        self.property_values.as_deref()
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetPropertyValueHistoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetPropertyValueHistoryOutput`](crate::output::GetPropertyValueHistoryOutput).
pub mod get_property_value_history_output {

    /// A builder for [`GetPropertyValueHistoryOutput`](crate::output::GetPropertyValueHistoryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) property_values:
            std::option::Option<std::vec::Vec<crate::model::PropertyValueHistory>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `property_values`.
        ///
        /// To override the contents of this collection use [`set_property_values`](Self::set_property_values).
        ///
        /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
        pub fn property_values(mut self, input: crate::model::PropertyValueHistory) -> Self {
            let mut v = self.property_values.unwrap_or_default();
            v.push(input);
            self.property_values = Some(v);
            self
        }
        /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
        pub fn set_property_values(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PropertyValueHistory>>,
        ) -> Self {
            self.property_values = input;
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetPropertyValueHistoryOutput`](crate::output::GetPropertyValueHistoryOutput).
        pub fn build(self) -> crate::output::GetPropertyValueHistoryOutput {
            crate::output::GetPropertyValueHistoryOutput {
                property_values: self.property_values,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetPropertyValueHistoryOutput {
    /// Creates a new builder-style object to manufacture [`GetPropertyValueHistoryOutput`](crate::output::GetPropertyValueHistoryOutput).
    pub fn builder() -> crate::output::get_property_value_history_output::Builder {
        crate::output::get_property_value_history_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPropertyValueOutput {
    /// <p>An object that maps strings to the properties and latest property values in the response. Each string in the mapping must be unique to this object.</p>
    #[doc(hidden)]
    pub property_values: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::PropertyLatestValue>,
    >,
    /// <p>The string that specifies the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A table of property values.</p>
    #[doc(hidden)]
    pub tabular_property_values: std::option::Option<
        std::vec::Vec<
            std::vec::Vec<std::collections::HashMap<std::string::String, crate::model::DataValue>>,
        >,
    >,
    _request_id: Option<String>,
}
impl GetPropertyValueOutput {
    /// <p>An object that maps strings to the properties and latest property values in the response. Each string in the mapping must be unique to this object.</p>
    pub fn property_values(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::PropertyLatestValue>,
    > {
        self.property_values.as_ref()
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A table of property values.</p>
    pub fn tabular_property_values(
        &self,
    ) -> std::option::Option<
        &[std::vec::Vec<std::collections::HashMap<std::string::String, crate::model::DataValue>>],
    > {
        self.tabular_property_values.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetPropertyValueOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetPropertyValueOutput`](crate::output::GetPropertyValueOutput).
pub mod get_property_value_output {

    /// A builder for [`GetPropertyValueOutput`](crate::output::GetPropertyValueOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) property_values: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::PropertyLatestValue>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) tabular_property_values: std::option::Option<
            std::vec::Vec<
                std::vec::Vec<
                    std::collections::HashMap<std::string::String, crate::model::DataValue>,
                >,
            >,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `property_values`.
        ///
        /// To override the contents of this collection use [`set_property_values`](Self::set_property_values).
        ///
        /// <p>An object that maps strings to the properties and latest property values in the response. Each string in the mapping must be unique to this object.</p>
        pub fn property_values(
            mut self,
            k: impl Into<std::string::String>,
            v: crate::model::PropertyLatestValue,
        ) -> Self {
            let mut hash_map = self.property_values.unwrap_or_default();
            hash_map.insert(k.into(), v);
            self.property_values = Some(hash_map);
            self
        }
        /// <p>An object that maps strings to the properties and latest property values in the response. Each string in the mapping must be unique to this object.</p>
        pub fn set_property_values(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::PropertyLatestValue>,
            >,
        ) -> Self {
            self.property_values = input;
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `tabular_property_values`.
        ///
        /// To override the contents of this collection use [`set_tabular_property_values`](Self::set_tabular_property_values).
        ///
        /// <p>A table of property values.</p>
        pub fn tabular_property_values(
            mut self,
            input: std::vec::Vec<
                std::collections::HashMap<std::string::String, crate::model::DataValue>,
            >,
        ) -> Self {
            let mut v = self.tabular_property_values.unwrap_or_default();
            v.push(input);
            self.tabular_property_values = Some(v);
            self
        }
        /// <p>A table of property values.</p>
        pub fn set_tabular_property_values(
            mut self,
            input: std::option::Option<
                std::vec::Vec<
                    std::vec::Vec<
                        std::collections::HashMap<std::string::String, crate::model::DataValue>,
                    >,
                >,
            >,
        ) -> Self {
            self.tabular_property_values = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetPropertyValueOutput`](crate::output::GetPropertyValueOutput).
        pub fn build(self) -> crate::output::GetPropertyValueOutput {
            crate::output::GetPropertyValueOutput {
                property_values: self.property_values,
                next_token: self.next_token,
                tabular_property_values: self.tabular_property_values,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetPropertyValueOutput {
    /// Creates a new builder-style object to manufacture [`GetPropertyValueOutput`](crate::output::GetPropertyValueOutput).
    pub fn builder() -> crate::output::get_property_value_output::Builder {
        crate::output::get_property_value_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPricingPlanOutput {
    /// <p>The chosen pricing plan for the current billing cycle.</p>
    #[doc(hidden)]
    pub current_pricing_plan: std::option::Option<crate::model::PricingPlan>,
    /// <p>The pending pricing plan.</p>
    #[doc(hidden)]
    pub pending_pricing_plan: std::option::Option<crate::model::PricingPlan>,
    _request_id: Option<String>,
}
impl GetPricingPlanOutput {
    /// <p>The chosen pricing plan for the current billing cycle.</p>
    pub fn current_pricing_plan(&self) -> std::option::Option<&crate::model::PricingPlan> {
        self.current_pricing_plan.as_ref()
    }
    /// <p>The pending pricing plan.</p>
    pub fn pending_pricing_plan(&self) -> std::option::Option<&crate::model::PricingPlan> {
        self.pending_pricing_plan.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetPricingPlanOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetPricingPlanOutput`](crate::output::GetPricingPlanOutput).
pub mod get_pricing_plan_output {

    /// A builder for [`GetPricingPlanOutput`](crate::output::GetPricingPlanOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) current_pricing_plan: std::option::Option<crate::model::PricingPlan>,
        pub(crate) pending_pricing_plan: std::option::Option<crate::model::PricingPlan>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The chosen pricing plan for the current billing cycle.</p>
        pub fn current_pricing_plan(mut self, input: crate::model::PricingPlan) -> Self {
            self.current_pricing_plan = Some(input);
            self
        }
        /// <p>The chosen pricing plan for the current billing cycle.</p>
        pub fn set_current_pricing_plan(
            mut self,
            input: std::option::Option<crate::model::PricingPlan>,
        ) -> Self {
            self.current_pricing_plan = input;
            self
        }
        /// <p>The pending pricing plan.</p>
        pub fn pending_pricing_plan(mut self, input: crate::model::PricingPlan) -> Self {
            self.pending_pricing_plan = Some(input);
            self
        }
        /// <p>The pending pricing plan.</p>
        pub fn set_pending_pricing_plan(
            mut self,
            input: std::option::Option<crate::model::PricingPlan>,
        ) -> Self {
            self.pending_pricing_plan = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetPricingPlanOutput`](crate::output::GetPricingPlanOutput).
        pub fn build(self) -> crate::output::GetPricingPlanOutput {
            crate::output::GetPricingPlanOutput {
                current_pricing_plan: self.current_pricing_plan,
                pending_pricing_plan: self.pending_pricing_plan,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetPricingPlanOutput {
    /// Creates a new builder-style object to manufacture [`GetPricingPlanOutput`](crate::output::GetPricingPlanOutput).
    pub fn builder() -> crate::output::get_pricing_plan_output::Builder {
        crate::output::get_pricing_plan_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEntityOutput {
    /// <p>The ID of the entity.</p>
    #[doc(hidden)]
    pub entity_id: std::option::Option<std::string::String>,
    /// <p>The name of the entity.</p>
    #[doc(hidden)]
    pub entity_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the entity.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The current status of the entity.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::Status>,
    /// <p>The ID of the workspace.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>The description of the entity.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.</p>
    #[doc(hidden)]
    pub components: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::ComponentResponse>,
    >,
    /// <p>The ID of the parent entity for this entity.</p>
    #[doc(hidden)]
    pub parent_entity_id: std::option::Option<std::string::String>,
    /// <p>A Boolean value that specifies whether the entity has associated child entities.</p>
    #[doc(hidden)]
    pub has_child_entities: std::option::Option<bool>,
    /// <p>The date and time when the entity was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the entity was last updated.</p>
    #[doc(hidden)]
    pub update_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
    #[doc(hidden)]
    pub sync_source: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEntityOutput {
    /// <p>The ID of the entity.</p>
    pub fn entity_id(&self) -> std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The name of the entity.</p>
    pub fn entity_name(&self) -> std::option::Option<&str> {
        self.entity_name.as_deref()
    }
    /// <p>The ARN of the entity.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The current status of the entity.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::Status> {
        self.status.as_ref()
    }
    /// <p>The ID of the workspace.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The description of the entity.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.</p>
    pub fn components(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::ComponentResponse>,
    > {
        self.components.as_ref()
    }
    /// <p>The ID of the parent entity for this entity.</p>
    pub fn parent_entity_id(&self) -> std::option::Option<&str> {
        self.parent_entity_id.as_deref()
    }
    /// <p>A Boolean value that specifies whether the entity has associated child entities.</p>
    pub fn has_child_entities(&self) -> std::option::Option<bool> {
        self.has_child_entities
    }
    /// <p>The date and time when the entity was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The date and time when the entity was last updated.</p>
    pub fn update_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
    /// <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
    pub fn sync_source(&self) -> std::option::Option<&str> {
        self.sync_source.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEntityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetEntityOutput`](crate::output::GetEntityOutput).
pub mod get_entity_output {

    /// A builder for [`GetEntityOutput`](crate::output::GetEntityOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entity_id: std::option::Option<std::string::String>,
        pub(crate) entity_name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::Status>,
        pub(crate) workspace_id: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) components: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::ComponentResponse>,
        >,
        pub(crate) parent_entity_id: std::option::Option<std::string::String>,
        pub(crate) has_child_entities: std::option::Option<bool>,
        pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) update_date_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) sync_source: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the entity.</p>
        pub fn entity_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.entity_id = Some(input.into());
            self
        }
        /// <p>The ID of the entity.</p>
        pub fn set_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.entity_id = input;
            self
        }
        /// <p>The name of the entity.</p>
        pub fn entity_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.entity_name = Some(input.into());
            self
        }
        /// <p>The name of the entity.</p>
        pub fn set_entity_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.entity_name = input;
            self
        }
        /// <p>The ARN of the entity.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the entity.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The current status of the entity.</p>
        pub fn status(mut self, input: crate::model::Status) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the entity.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::Status>) -> Self {
            self.status = input;
            self
        }
        /// <p>The ID of the workspace.</p>
        pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workspace_id = Some(input.into());
            self
        }
        /// <p>The ID of the workspace.</p>
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workspace_id = input;
            self
        }
        /// <p>The description of the entity.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the entity.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// Adds a key-value pair to `components`.
        ///
        /// To override the contents of this collection use [`set_components`](Self::set_components).
        ///
        /// <p>An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.</p>
        pub fn components(
            mut self,
            k: impl Into<std::string::String>,
            v: crate::model::ComponentResponse,
        ) -> Self {
            let mut hash_map = self.components.unwrap_or_default();
            hash_map.insert(k.into(), v);
            self.components = Some(hash_map);
            self
        }
        /// <p>An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.</p>
        pub fn set_components(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::ComponentResponse>,
            >,
        ) -> Self {
            self.components = input;
            self
        }
        /// <p>The ID of the parent entity for this entity.</p>
        pub fn parent_entity_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.parent_entity_id = Some(input.into());
            self
        }
        /// <p>The ID of the parent entity for this entity.</p>
        pub fn set_parent_entity_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.parent_entity_id = input;
            self
        }
        /// <p>A Boolean value that specifies whether the entity has associated child entities.</p>
        pub fn has_child_entities(mut self, input: bool) -> Self {
            self.has_child_entities = Some(input);
            self
        }
        /// <p>A Boolean value that specifies whether the entity has associated child entities.</p>
        pub fn set_has_child_entities(mut self, input: std::option::Option<bool>) -> Self {
            self.has_child_entities = input;
            self
        }
        /// <p>The date and time when the entity was created.</p>
        pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_date_time = Some(input);
            self
        }
        /// <p>The date and time when the entity was created.</p>
        pub fn set_creation_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_date_time = input;
            self
        }
        /// <p>The date and time when the entity was last updated.</p>
        pub fn update_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_date_time = Some(input);
            self
        }
        /// <p>The date and time when the entity was last updated.</p>
        pub fn set_update_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_date_time = input;
            self
        }
        /// <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
        pub fn sync_source(mut self, input: impl Into<std::string::String>) -> Self {
            self.sync_source = Some(input.into());
            self
        }
        /// <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
        pub fn set_sync_source(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.sync_source = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEntityOutput`](crate::output::GetEntityOutput).
        pub fn build(self) -> crate::output::GetEntityOutput {
            crate::output::GetEntityOutput {
                entity_id: self.entity_id,
                entity_name: self.entity_name,
                arn: self.arn,
                status: self.status,
                workspace_id: self.workspace_id,
                description: self.description,
                components: self.components,
                parent_entity_id: self.parent_entity_id,
                has_child_entities: self.has_child_entities,
                creation_date_time: self.creation_date_time,
                update_date_time: self.update_date_time,
                sync_source: self.sync_source,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetEntityOutput {
    /// Creates a new builder-style object to manufacture [`GetEntityOutput`](crate::output::GetEntityOutput).
    pub fn builder() -> crate::output::get_entity_output::Builder {
        crate::output::get_entity_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetComponentTypeOutput {
    /// <p>The ID of the workspace that contains the component type.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>A Boolean value that specifies whether an entity can have more than one component of this type.</p>
    #[doc(hidden)]
    pub is_singleton: std::option::Option<bool>,
    /// <p>The ID of the component type.</p>
    #[doc(hidden)]
    pub component_type_id: std::option::Option<std::string::String>,
    /// <p>The description of the component type.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
    #[doc(hidden)]
    pub property_definitions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::PropertyDefinitionResponse>,
    >,
    /// <p>The name of the parent component type that this component type extends.</p>
    #[doc(hidden)]
    pub extends_from: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.</p>
    #[doc(hidden)]
    pub functions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::FunctionResponse>,
    >,
    /// <p>The date and time when the component type was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the component was last updated.</p>
    #[doc(hidden)]
    pub update_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ARN of the component type.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>A Boolean value that specifies whether the component type is abstract.</p>
    #[doc(hidden)]
    pub is_abstract: std::option::Option<bool>,
    /// <p>A Boolean value that specifies whether the component type has a schema initializer and that the schema initializer has run.</p>
    #[doc(hidden)]
    pub is_schema_initialized: std::option::Option<bool>,
    /// <p>The current status of the component type.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::Status>,
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    /// <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
    #[doc(hidden)]
    pub property_groups: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::PropertyGroupResponse>,
    >,
    /// <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
    #[doc(hidden)]
    pub sync_source: std::option::Option<std::string::String>,
    /// <p>The component type name.</p>
    #[doc(hidden)]
    pub component_type_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetComponentTypeOutput {
    /// <p>The ID of the workspace that contains the component type.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>A Boolean value that specifies whether an entity can have more than one component of this type.</p>
    pub fn is_singleton(&self) -> std::option::Option<bool> {
        self.is_singleton
    }
    /// <p>The ID of the component type.</p>
    pub fn component_type_id(&self) -> std::option::Option<&str> {
        self.component_type_id.as_deref()
    }
    /// <p>The description of the component type.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn property_definitions(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::PropertyDefinitionResponse>,
    > {
        self.property_definitions.as_ref()
    }
    /// <p>The name of the parent component type that this component type extends.</p>
    pub fn extends_from(&self) -> std::option::Option<&[std::string::String]> {
        self.extends_from.as_deref()
    }
    /// <p>An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn functions(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::FunctionResponse>,
    > {
        self.functions.as_ref()
    }
    /// <p>The date and time when the component type was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The date and time when the component was last updated.</p>
    pub fn update_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
    /// <p>The ARN of the component type.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A Boolean value that specifies whether the component type is abstract.</p>
    pub fn is_abstract(&self) -> std::option::Option<bool> {
        self.is_abstract
    }
    /// <p>A Boolean value that specifies whether the component type has a schema initializer and that the schema initializer has run.</p>
    pub fn is_schema_initialized(&self) -> std::option::Option<bool> {
        self.is_schema_initialized
    }
    /// <p>The current status of the component type.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::Status> {
        self.status.as_ref()
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    /// <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
    pub fn property_groups(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::model::PropertyGroupResponse>,
    > {
        self.property_groups.as_ref()
    }
    /// <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
    pub fn sync_source(&self) -> std::option::Option<&str> {
        self.sync_source.as_deref()
    }
    /// <p>The component type name.</p>
    pub fn component_type_name(&self) -> std::option::Option<&str> {
        self.component_type_name.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetComponentTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetComponentTypeOutput`](crate::output::GetComponentTypeOutput).
pub mod get_component_type_output {

    /// A builder for [`GetComponentTypeOutput`](crate::output::GetComponentTypeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace_id: std::option::Option<std::string::String>,
        pub(crate) is_singleton: std::option::Option<bool>,
        pub(crate) component_type_id: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) property_definitions: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::model::PropertyDefinitionResponse,
            >,
        >,
        pub(crate) extends_from: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) functions: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::FunctionResponse>,
        >,
        pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) update_date_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) is_abstract: std::option::Option<bool>,
        pub(crate) is_schema_initialized: std::option::Option<bool>,
        pub(crate) status: std::option::Option<crate::model::Status>,
        pub(crate) property_groups: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::PropertyGroupResponse>,
        >,
        pub(crate) sync_source: std::option::Option<std::string::String>,
        pub(crate) component_type_name: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the workspace that contains the component type.</p>
        pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workspace_id = Some(input.into());
            self
        }
        /// <p>The ID of the workspace that contains the component type.</p>
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workspace_id = input;
            self
        }
        /// <p>A Boolean value that specifies whether an entity can have more than one component of this type.</p>
        pub fn is_singleton(mut self, input: bool) -> Self {
            self.is_singleton = Some(input);
            self
        }
        /// <p>A Boolean value that specifies whether an entity can have more than one component of this type.</p>
        pub fn set_is_singleton(mut self, input: std::option::Option<bool>) -> Self {
            self.is_singleton = input;
            self
        }
        /// <p>The ID of the component type.</p>
        pub fn component_type_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.component_type_id = Some(input.into());
            self
        }
        /// <p>The ID of the component type.</p>
        pub fn set_component_type_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.component_type_id = input;
            self
        }
        /// <p>The description of the component type.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the component type.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// Adds a key-value pair to `property_definitions`.
        ///
        /// To override the contents of this collection use [`set_property_definitions`](Self::set_property_definitions).
        ///
        /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
        pub fn property_definitions(
            mut self,
            k: impl Into<std::string::String>,
            v: crate::model::PropertyDefinitionResponse,
        ) -> Self {
            let mut hash_map = self.property_definitions.unwrap_or_default();
            hash_map.insert(k.into(), v);
            self.property_definitions = Some(hash_map);
            self
        }
        /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
        pub fn set_property_definitions(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::PropertyDefinitionResponse,
                >,
            >,
        ) -> Self {
            self.property_definitions = input;
            self
        }
        /// Appends an item to `extends_from`.
        ///
        /// To override the contents of this collection use [`set_extends_from`](Self::set_extends_from).
        ///
        /// <p>The name of the parent component type that this component type extends.</p>
        pub fn extends_from(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.extends_from.unwrap_or_default();
            v.push(input.into());
            self.extends_from = Some(v);
            self
        }
        /// <p>The name of the parent component type that this component type extends.</p>
        pub fn set_extends_from(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.extends_from = input;
            self
        }
        /// Adds a key-value pair to `functions`.
        ///
        /// To override the contents of this collection use [`set_functions`](Self::set_functions).
        ///
        /// <p>An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.</p>
        pub fn functions(
            mut self,
            k: impl Into<std::string::String>,
            v: crate::model::FunctionResponse,
        ) -> Self {
            let mut hash_map = self.functions.unwrap_or_default();
            hash_map.insert(k.into(), v);
            self.functions = Some(hash_map);
            self
        }
        /// <p>An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.</p>
        pub fn set_functions(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::FunctionResponse>,
            >,
        ) -> Self {
            self.functions = input;
            self
        }
        /// <p>The date and time when the component type was created.</p>
        pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_date_time = Some(input);
            self
        }
        /// <p>The date and time when the component type was created.</p>
        pub fn set_creation_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_date_time = input;
            self
        }
        /// <p>The date and time when the component was last updated.</p>
        pub fn update_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_date_time = Some(input);
            self
        }
        /// <p>The date and time when the component was last updated.</p>
        pub fn set_update_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_date_time = input;
            self
        }
        /// <p>The ARN of the component type.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the component type.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>A Boolean value that specifies whether the component type is abstract.</p>
        pub fn is_abstract(mut self, input: bool) -> Self {
            self.is_abstract = Some(input);
            self
        }
        /// <p>A Boolean value that specifies whether the component type is abstract.</p>
        pub fn set_is_abstract(mut self, input: std::option::Option<bool>) -> Self {
            self.is_abstract = input;
            self
        }
        /// <p>A Boolean value that specifies whether the component type has a schema initializer and that the schema initializer has run.</p>
        pub fn is_schema_initialized(mut self, input: bool) -> Self {
            self.is_schema_initialized = Some(input);
            self
        }
        /// <p>A Boolean value that specifies whether the component type has a schema initializer and that the schema initializer has run.</p>
        pub fn set_is_schema_initialized(mut self, input: std::option::Option<bool>) -> Self {
            self.is_schema_initialized = input;
            self
        }
        /// <p>The current status of the component type.</p>
        pub fn status(mut self, input: crate::model::Status) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the component type.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::Status>) -> Self {
            self.status = input;
            self
        }
        /// Adds a key-value pair to `property_groups`.
        ///
        /// To override the contents of this collection use [`set_property_groups`](Self::set_property_groups).
        ///
        /// <p>The maximum number of results to return at one time. The default is 25.</p>
        /// <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
        pub fn property_groups(
            mut self,
            k: impl Into<std::string::String>,
            v: crate::model::PropertyGroupResponse,
        ) -> Self {
            let mut hash_map = self.property_groups.unwrap_or_default();
            hash_map.insert(k.into(), v);
            self.property_groups = Some(hash_map);
            self
        }
        /// <p>The maximum number of results to return at one time. The default is 25.</p>
        /// <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
        pub fn set_property_groups(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, crate::model::PropertyGroupResponse>,
            >,
        ) -> Self {
            self.property_groups = input;
            self
        }
        /// <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
        pub fn sync_source(mut self, input: impl Into<std::string::String>) -> Self {
            self.sync_source = Some(input.into());
            self
        }
        /// <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
        pub fn set_sync_source(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.sync_source = input;
            self
        }
        /// <p>The component type name.</p>
        pub fn component_type_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.component_type_name = Some(input.into());
            self
        }
        /// <p>The component type name.</p>
        pub fn set_component_type_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.component_type_name = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetComponentTypeOutput`](crate::output::GetComponentTypeOutput).
        pub fn build(self) -> crate::output::GetComponentTypeOutput {
            crate::output::GetComponentTypeOutput {
                workspace_id: self.workspace_id,
                is_singleton: self.is_singleton,
                component_type_id: self.component_type_id,
                description: self.description,
                property_definitions: self.property_definitions,
                extends_from: self.extends_from,
                functions: self.functions,
                creation_date_time: self.creation_date_time,
                update_date_time: self.update_date_time,
                arn: self.arn,
                is_abstract: self.is_abstract,
                is_schema_initialized: self.is_schema_initialized,
                status: self.status,
                property_groups: self.property_groups,
                sync_source: self.sync_source,
                component_type_name: self.component_type_name,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetComponentTypeOutput {
    /// Creates a new builder-style object to manufacture [`GetComponentTypeOutput`](crate::output::GetComponentTypeOutput).
    pub fn builder() -> crate::output::get_component_type_output::Builder {
        crate::output::get_component_type_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExecuteQueryOutput {
    /// <p>A list of ColumnDescription objects.</p>
    #[doc(hidden)]
    pub column_descriptions: std::option::Option<std::vec::Vec<crate::model::ColumnDescription>>,
    /// <p>Represents a single row in the query results.</p>
    #[doc(hidden)]
    pub rows: std::option::Option<std::vec::Vec<crate::model::Row>>,
    /// <p>The string that specifies the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExecuteQueryOutput {
    /// <p>A list of ColumnDescription objects.</p>
    pub fn column_descriptions(&self) -> std::option::Option<&[crate::model::ColumnDescription]> {
        self.column_descriptions.as_deref()
    }
    /// <p>Represents a single row in the query results.</p>
    pub fn rows(&self) -> std::option::Option<&[crate::model::Row]> {
        self.rows.as_deref()
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ExecuteQueryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ExecuteQueryOutput`](crate::output::ExecuteQueryOutput).
pub mod execute_query_output {

    /// A builder for [`ExecuteQueryOutput`](crate::output::ExecuteQueryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) column_descriptions:
            std::option::Option<std::vec::Vec<crate::model::ColumnDescription>>,
        pub(crate) rows: std::option::Option<std::vec::Vec<crate::model::Row>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `column_descriptions`.
        ///
        /// To override the contents of this collection use [`set_column_descriptions`](Self::set_column_descriptions).
        ///
        /// <p>A list of ColumnDescription objects.</p>
        pub fn column_descriptions(mut self, input: crate::model::ColumnDescription) -> Self {
            let mut v = self.column_descriptions.unwrap_or_default();
            v.push(input);
            self.column_descriptions = Some(v);
            self
        }
        /// <p>A list of ColumnDescription objects.</p>
        pub fn set_column_descriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ColumnDescription>>,
        ) -> Self {
            self.column_descriptions = input;
            self
        }
        /// Appends an item to `rows`.
        ///
        /// To override the contents of this collection use [`set_rows`](Self::set_rows).
        ///
        /// <p>Represents a single row in the query results.</p>
        pub fn rows(mut self, input: crate::model::Row) -> Self {
            let mut v = self.rows.unwrap_or_default();
            v.push(input);
            self.rows = Some(v);
            self
        }
        /// <p>Represents a single row in the query results.</p>
        pub fn set_rows(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Row>>,
        ) -> Self {
            self.rows = input;
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string that specifies the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ExecuteQueryOutput`](crate::output::ExecuteQueryOutput).
        pub fn build(self) -> crate::output::ExecuteQueryOutput {
            crate::output::ExecuteQueryOutput {
                column_descriptions: self.column_descriptions,
                rows: self.rows,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ExecuteQueryOutput {
    /// Creates a new builder-style object to manufacture [`ExecuteQueryOutput`](crate::output::ExecuteQueryOutput).
    pub fn builder() -> crate::output::execute_query_output::Builder {
        crate::output::execute_query_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteWorkspaceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteWorkspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput).
pub mod delete_workspace_output {

    /// A builder for [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput).
        pub fn build(self) -> crate::output::DeleteWorkspaceOutput {
            crate::output::DeleteWorkspaceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteWorkspaceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput).
    pub fn builder() -> crate::output::delete_workspace_output::Builder {
        crate::output::delete_workspace_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSyncJobOutput {
    /// <p>The SyncJob response state.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::SyncJobState>,
    _request_id: Option<String>,
}
impl DeleteSyncJobOutput {
    /// <p>The SyncJob response state.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::SyncJobState> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteSyncJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteSyncJobOutput`](crate::output::DeleteSyncJobOutput).
pub mod delete_sync_job_output {

    /// A builder for [`DeleteSyncJobOutput`](crate::output::DeleteSyncJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) state: std::option::Option<crate::model::SyncJobState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The SyncJob response state.</p>
        pub fn state(mut self, input: crate::model::SyncJobState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The SyncJob response state.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::SyncJobState>) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSyncJobOutput`](crate::output::DeleteSyncJobOutput).
        pub fn build(self) -> crate::output::DeleteSyncJobOutput {
            crate::output::DeleteSyncJobOutput {
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteSyncJobOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSyncJobOutput`](crate::output::DeleteSyncJobOutput).
    pub fn builder() -> crate::output::delete_sync_job_output::Builder {
        crate::output::delete_sync_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSceneOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSceneOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteSceneOutput`](crate::output::DeleteSceneOutput).
pub mod delete_scene_output {

    /// A builder for [`DeleteSceneOutput`](crate::output::DeleteSceneOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSceneOutput`](crate::output::DeleteSceneOutput).
        pub fn build(self) -> crate::output::DeleteSceneOutput {
            crate::output::DeleteSceneOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteSceneOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSceneOutput`](crate::output::DeleteSceneOutput).
    pub fn builder() -> crate::output::delete_scene_output::Builder {
        crate::output::delete_scene_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteEntityOutput {
    /// <p>The current state of the deleted entity.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::State>,
    _request_id: Option<String>,
}
impl DeleteEntityOutput {
    /// <p>The current state of the deleted entity.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::State> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteEntityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteEntityOutput`](crate::output::DeleteEntityOutput).
pub mod delete_entity_output {

    /// A builder for [`DeleteEntityOutput`](crate::output::DeleteEntityOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) state: std::option::Option<crate::model::State>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The current state of the deleted entity.</p>
        pub fn state(mut self, input: crate::model::State) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The current state of the deleted entity.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::State>) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEntityOutput`](crate::output::DeleteEntityOutput).
        pub fn build(self) -> crate::output::DeleteEntityOutput {
            crate::output::DeleteEntityOutput {
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteEntityOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEntityOutput`](crate::output::DeleteEntityOutput).
    pub fn builder() -> crate::output::delete_entity_output::Builder {
        crate::output::delete_entity_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteComponentTypeOutput {
    /// <p>The current state of the component type to be deleted.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::State>,
    _request_id: Option<String>,
}
impl DeleteComponentTypeOutput {
    /// <p>The current state of the component type to be deleted.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::State> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteComponentTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteComponentTypeOutput`](crate::output::DeleteComponentTypeOutput).
pub mod delete_component_type_output {

    /// A builder for [`DeleteComponentTypeOutput`](crate::output::DeleteComponentTypeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) state: std::option::Option<crate::model::State>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The current state of the component type to be deleted.</p>
        pub fn state(mut self, input: crate::model::State) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The current state of the component type to be deleted.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::State>) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteComponentTypeOutput`](crate::output::DeleteComponentTypeOutput).
        pub fn build(self) -> crate::output::DeleteComponentTypeOutput {
            crate::output::DeleteComponentTypeOutput {
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteComponentTypeOutput {
    /// Creates a new builder-style object to manufacture [`DeleteComponentTypeOutput`](crate::output::DeleteComponentTypeOutput).
    pub fn builder() -> crate::output::delete_component_type_output::Builder {
        crate::output::delete_component_type_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWorkspaceOutput {
    /// <p>The ARN of the workspace.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The date and time when the workspace was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateWorkspaceOutput {
    /// <p>The ARN of the workspace.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date and time when the workspace was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateWorkspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput).
pub mod create_workspace_output {

    /// A builder for [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the workspace.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the workspace.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The date and time when the workspace was created.</p>
        pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_date_time = Some(input);
            self
        }
        /// <p>The date and time when the workspace was created.</p>
        pub fn set_creation_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_date_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput).
        pub fn build(self) -> crate::output::CreateWorkspaceOutput {
            crate::output::CreateWorkspaceOutput {
                arn: self.arn,
                creation_date_time: self.creation_date_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateWorkspaceOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput).
    pub fn builder() -> crate::output::create_workspace_output::Builder {
        crate::output::create_workspace_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSyncJobOutput {
    /// <p>The SyncJob ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The date and time for the SyncJob creation.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The SyncJob response state.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::SyncJobState>,
    _request_id: Option<String>,
}
impl CreateSyncJobOutput {
    /// <p>The SyncJob ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date and time for the SyncJob creation.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The SyncJob response state.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::SyncJobState> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSyncJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateSyncJobOutput`](crate::output::CreateSyncJobOutput).
pub mod create_sync_job_output {

    /// A builder for [`CreateSyncJobOutput`](crate::output::CreateSyncJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) state: std::option::Option<crate::model::SyncJobState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The SyncJob ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The SyncJob ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The date and time for the SyncJob creation.</p>
        pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_date_time = Some(input);
            self
        }
        /// <p>The date and time for the SyncJob creation.</p>
        pub fn set_creation_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_date_time = input;
            self
        }
        /// <p>The SyncJob response state.</p>
        pub fn state(mut self, input: crate::model::SyncJobState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The SyncJob response state.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::SyncJobState>) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSyncJobOutput`](crate::output::CreateSyncJobOutput).
        pub fn build(self) -> crate::output::CreateSyncJobOutput {
            crate::output::CreateSyncJobOutput {
                arn: self.arn,
                creation_date_time: self.creation_date_time,
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateSyncJobOutput {
    /// Creates a new builder-style object to manufacture [`CreateSyncJobOutput`](crate::output::CreateSyncJobOutput).
    pub fn builder() -> crate::output::create_sync_job_output::Builder {
        crate::output::create_sync_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSceneOutput {
    /// <p>The ARN of the scene.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The date and time when the scene was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateSceneOutput {
    /// <p>The ARN of the scene.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date and time when the scene was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSceneOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateSceneOutput`](crate::output::CreateSceneOutput).
pub mod create_scene_output {

    /// A builder for [`CreateSceneOutput`](crate::output::CreateSceneOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the scene.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the scene.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The date and time when the scene was created.</p>
        pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_date_time = Some(input);
            self
        }
        /// <p>The date and time when the scene was created.</p>
        pub fn set_creation_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_date_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSceneOutput`](crate::output::CreateSceneOutput).
        pub fn build(self) -> crate::output::CreateSceneOutput {
            crate::output::CreateSceneOutput {
                arn: self.arn,
                creation_date_time: self.creation_date_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateSceneOutput {
    /// Creates a new builder-style object to manufacture [`CreateSceneOutput`](crate::output::CreateSceneOutput).
    pub fn builder() -> crate::output::create_scene_output::Builder {
        crate::output::create_scene_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateEntityOutput {
    /// <p>The ID of the entity.</p>
    #[doc(hidden)]
    pub entity_id: std::option::Option<std::string::String>,
    /// <p>The ARN of the entity.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The date and time when the entity was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current state of the entity.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::State>,
    _request_id: Option<String>,
}
impl CreateEntityOutput {
    /// <p>The ID of the entity.</p>
    pub fn entity_id(&self) -> std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The ARN of the entity.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date and time when the entity was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The current state of the entity.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::State> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateEntityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateEntityOutput`](crate::output::CreateEntityOutput).
pub mod create_entity_output {

    /// A builder for [`CreateEntityOutput`](crate::output::CreateEntityOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entity_id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) state: std::option::Option<crate::model::State>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the entity.</p>
        pub fn entity_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.entity_id = Some(input.into());
            self
        }
        /// <p>The ID of the entity.</p>
        pub fn set_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.entity_id = input;
            self
        }
        /// <p>The ARN of the entity.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the entity.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The date and time when the entity was created.</p>
        pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_date_time = Some(input);
            self
        }
        /// <p>The date and time when the entity was created.</p>
        pub fn set_creation_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_date_time = input;
            self
        }
        /// <p>The current state of the entity.</p>
        pub fn state(mut self, input: crate::model::State) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The current state of the entity.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::State>) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateEntityOutput`](crate::output::CreateEntityOutput).
        pub fn build(self) -> crate::output::CreateEntityOutput {
            crate::output::CreateEntityOutput {
                entity_id: self.entity_id,
                arn: self.arn,
                creation_date_time: self.creation_date_time,
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateEntityOutput {
    /// Creates a new builder-style object to manufacture [`CreateEntityOutput`](crate::output::CreateEntityOutput).
    pub fn builder() -> crate::output::create_entity_output::Builder {
        crate::output::create_entity_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateComponentTypeOutput {
    /// <p>The ARN of the component type.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The date and time when the entity was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current state of the component type.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::State>,
    _request_id: Option<String>,
}
impl CreateComponentTypeOutput {
    /// <p>The ARN of the component type.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date and time when the entity was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The current state of the component type.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::State> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateComponentTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateComponentTypeOutput`](crate::output::CreateComponentTypeOutput).
pub mod create_component_type_output {

    /// A builder for [`CreateComponentTypeOutput`](crate::output::CreateComponentTypeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) state: std::option::Option<crate::model::State>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the component type.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the component type.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The date and time when the entity was created.</p>
        pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_date_time = Some(input);
            self
        }
        /// <p>The date and time when the entity was created.</p>
        pub fn set_creation_date_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_date_time = input;
            self
        }
        /// <p>The current state of the component type.</p>
        pub fn state(mut self, input: crate::model::State) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The current state of the component type.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::State>) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateComponentTypeOutput`](crate::output::CreateComponentTypeOutput).
        pub fn build(self) -> crate::output::CreateComponentTypeOutput {
            crate::output::CreateComponentTypeOutput {
                arn: self.arn,
                creation_date_time: self.creation_date_time,
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateComponentTypeOutput {
    /// Creates a new builder-style object to manufacture [`CreateComponentTypeOutput`](crate::output::CreateComponentTypeOutput).
    pub fn builder() -> crate::output::create_component_type_output::Builder {
        crate::output::create_component_type_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchPutPropertyValuesOutput {
    /// <p>Entries that caused errors in the batch put operation.</p>
    #[doc(hidden)]
    pub error_entries: std::option::Option<std::vec::Vec<crate::model::BatchPutPropertyErrorEntry>>,
    _request_id: Option<String>,
}
impl BatchPutPropertyValuesOutput {
    /// <p>Entries that caused errors in the batch put operation.</p>
    pub fn error_entries(
        &self,
    ) -> std::option::Option<&[crate::model::BatchPutPropertyErrorEntry]> {
        self.error_entries.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchPutPropertyValuesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`BatchPutPropertyValuesOutput`](crate::output::BatchPutPropertyValuesOutput).
pub mod batch_put_property_values_output {

    /// A builder for [`BatchPutPropertyValuesOutput`](crate::output::BatchPutPropertyValuesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) error_entries:
            std::option::Option<std::vec::Vec<crate::model::BatchPutPropertyErrorEntry>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `error_entries`.
        ///
        /// To override the contents of this collection use [`set_error_entries`](Self::set_error_entries).
        ///
        /// <p>Entries that caused errors in the batch put operation.</p>
        pub fn error_entries(mut self, input: crate::model::BatchPutPropertyErrorEntry) -> Self {
            let mut v = self.error_entries.unwrap_or_default();
            v.push(input);
            self.error_entries = Some(v);
            self
        }
        /// <p>Entries that caused errors in the batch put operation.</p>
        pub fn set_error_entries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BatchPutPropertyErrorEntry>>,
        ) -> Self {
            self.error_entries = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchPutPropertyValuesOutput`](crate::output::BatchPutPropertyValuesOutput).
        pub fn build(self) -> crate::output::BatchPutPropertyValuesOutput {
            crate::output::BatchPutPropertyValuesOutput {
                error_entries: self.error_entries,
                _request_id: self._request_id,
            }
        }
    }
}
impl BatchPutPropertyValuesOutput {
    /// Creates a new builder-style object to manufacture [`BatchPutPropertyValuesOutput`](crate::output::BatchPutPropertyValuesOutput).
    pub fn builder() -> crate::output::batch_put_property_values_output::Builder {
        crate::output::batch_put_property_values_output::Builder::default()
    }
}
