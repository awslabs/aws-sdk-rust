// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_put_property_values_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchPutPropertyValuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.entries {
        let mut array_2 = object.key("entries").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_value_entry(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_component_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateComponentTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.extends_from {
        let mut array_7 = object.key("extendsFrom").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.functions {
        let mut object_10 = object.key("functions").start_object();
        for (key_11, value_12) in var_9 {
            {
                let mut object_13 = object_10.key(key_11).start_object();
                crate::json_ser::serialize_structure_crate_model_function_request(
                    &mut object_13,
                    value_12,
                )?;
                object_13.finish();
            }
        }
        object_10.finish();
    }
    if let Some(var_14) = &input.is_singleton {
        object.key("isSingleton").boolean(*var_14);
    }
    if let Some(var_15) = &input.property_definitions {
        let mut object_16 = object.key("propertyDefinitions").start_object();
        for (key_17, value_18) in var_15 {
            {
                let mut object_19 = object_16.key(key_17).start_object();
                crate::json_ser::serialize_structure_crate_model_property_definition_request(
                    &mut object_19,
                    value_18,
                )?;
                object_19.finish();
            }
        }
        object_16.finish();
    }
    if let Some(var_20) = &input.tags {
        let mut object_21 = object.key("tags").start_object();
        for (key_22, value_23) in var_20 {
            {
                object_21.key(key_22).string(value_23.as_str());
            }
        }
        object_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_entity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEntityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.components {
        let mut object_25 = object.key("components").start_object();
        for (key_26, value_27) in var_24 {
            {
                let mut object_28 = object_25.key(key_26).start_object();
                crate::json_ser::serialize_structure_crate_model_component_request(
                    &mut object_28,
                    value_27,
                )?;
                object_28.finish();
            }
        }
        object_25.finish();
    }
    if let Some(var_29) = &input.description {
        object.key("description").string(var_29.as_str());
    }
    if let Some(var_30) = &input.entity_id {
        object.key("entityId").string(var_30.as_str());
    }
    if let Some(var_31) = &input.entity_name {
        object.key("entityName").string(var_31.as_str());
    }
    if let Some(var_32) = &input.parent_entity_id {
        object.key("parentEntityId").string(var_32.as_str());
    }
    if let Some(var_33) = &input.tags {
        let mut object_34 = object.key("tags").start_object();
        for (key_35, value_36) in var_33 {
            {
                object_34.key(key_35).string(value_36.as_str());
            }
        }
        object_34.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_scene_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSceneInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_37) = &input.capabilities {
        let mut array_38 = object.key("capabilities").start_array();
        for item_39 in var_37 {
            {
                array_38.value().string(item_39.as_str());
            }
        }
        array_38.finish();
    }
    if let Some(var_40) = &input.content_location {
        object.key("contentLocation").string(var_40.as_str());
    }
    if let Some(var_41) = &input.description {
        object.key("description").string(var_41.as_str());
    }
    if let Some(var_42) = &input.scene_id {
        object.key("sceneId").string(var_42.as_str());
    }
    if let Some(var_43) = &input.tags {
        let mut object_44 = object.key("tags").start_object();
        for (key_45, value_46) in var_43 {
            {
                object_44.key(key_45).string(value_46.as_str());
            }
        }
        object_44.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workspace_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkspaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.description {
        object.key("description").string(var_47.as_str());
    }
    if let Some(var_48) = &input.role {
        object.key("role").string(var_48.as_str());
    }
    if let Some(var_49) = &input.s3_location {
        object.key("s3Location").string(var_49.as_str());
    }
    if let Some(var_50) = &input.tags {
        let mut object_51 = object.key("tags").start_object();
        for (key_52, value_53) in var_50 {
            {
                object_51.key(key_52).string(value_53.as_str());
            }
        }
        object_51.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_property_value_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPropertyValueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.component_name {
        object.key("componentName").string(var_54.as_str());
    }
    if let Some(var_55) = &input.component_type_id {
        object.key("componentTypeId").string(var_55.as_str());
    }
    if let Some(var_56) = &input.entity_id {
        object.key("entityId").string(var_56.as_str());
    }
    if let Some(var_57) = &input.selected_properties {
        let mut array_58 = object.key("selectedProperties").start_array();
        for item_59 in var_57 {
            {
                array_58.value().string(item_59.as_str());
            }
        }
        array_58.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_property_value_history_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPropertyValueHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.component_name {
        object.key("componentName").string(var_60.as_str());
    }
    if let Some(var_61) = &input.component_type_id {
        object.key("componentTypeId").string(var_61.as_str());
    }
    if let Some(var_62) = &input.end_date_time {
        object
            .key("endDateTime")
            .date_time(var_62, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_63) = &input.end_time {
        object.key("endTime").string(var_63.as_str());
    }
    if let Some(var_64) = &input.entity_id {
        object.key("entityId").string(var_64.as_str());
    }
    if let Some(var_65) = &input.interpolation {
        let mut object_66 = object.key("interpolation").start_object();
        crate::json_ser::serialize_structure_crate_model_interpolation_parameters(
            &mut object_66,
            var_65,
        )?;
        object_66.finish();
    }
    if let Some(var_67) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_67).into()),
        );
    }
    if let Some(var_68) = &input.next_token {
        object.key("nextToken").string(var_68.as_str());
    }
    if let Some(var_69) = &input.order_by_time {
        object.key("orderByTime").string(var_69.as_str());
    }
    if let Some(var_70) = &input.property_filters {
        let mut array_71 = object.key("propertyFilters").start_array();
        for item_72 in var_70 {
            {
                let mut object_73 = array_71.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_filter(
                    &mut object_73,
                    item_72,
                )?;
                object_73.finish();
            }
        }
        array_71.finish();
    }
    if let Some(var_74) = &input.selected_properties {
        let mut array_75 = object.key("selectedProperties").start_array();
        for item_76 in var_74 {
            {
                array_75.value().string(item_76.as_str());
            }
        }
        array_75.finish();
    }
    if let Some(var_77) = &input.start_date_time {
        object
            .key("startDateTime")
            .date_time(var_77, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_78) = &input.start_time {
        object.key("startTime").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_component_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComponentTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.filters {
        let mut array_80 = object.key("filters").start_array();
        for item_81 in var_79 {
            {
                let mut object_82 = array_80.value().start_object();
                crate::json_ser::serialize_union_crate_model_list_component_types_filter(
                    &mut object_82,
                    item_81,
                )?;
                object_82.finish();
            }
        }
        array_80.finish();
    }
    if let Some(var_83) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_83).into()),
        );
    }
    if let Some(var_84) = &input.next_token {
        object.key("nextToken").string(var_84.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.filters {
        let mut array_86 = object.key("filters").start_array();
        for item_87 in var_85 {
            {
                let mut object_88 = array_86.value().start_object();
                crate::json_ser::serialize_union_crate_model_list_entities_filter(
                    &mut object_88,
                    item_87,
                )?;
                object_88.finish();
            }
        }
        array_86.finish();
    }
    if let Some(var_89) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_89).into()),
        );
    }
    if let Some(var_90) = &input.next_token {
        object.key("nextToken").string(var_90.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_scenes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListScenesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_91).into()),
        );
    }
    if let Some(var_92) = &input.next_token {
        object.key("nextToken").string(var_92.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_93).into()),
        );
    }
    if let Some(var_94) = &input.next_token {
        object.key("nextToken").string(var_94.as_str());
    }
    if let Some(var_95) = &input.resource_arn {
        object.key("resourceARN").string(var_95.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workspaces_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkspacesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_96).into()),
        );
    }
    if let Some(var_97) = &input.next_token {
        object.key("nextToken").string(var_97.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.resource_arn {
        object.key("resourceARN").string(var_98.as_str());
    }
    if let Some(var_99) = &input.tags {
        let mut object_100 = object.key("tags").start_object();
        for (key_101, value_102) in var_99 {
            {
                object_100.key(key_101).string(value_102.as_str());
            }
        }
        object_100.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_component_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateComponentTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_103) = &input.description {
        object.key("description").string(var_103.as_str());
    }
    if let Some(var_104) = &input.extends_from {
        let mut array_105 = object.key("extendsFrom").start_array();
        for item_106 in var_104 {
            {
                array_105.value().string(item_106.as_str());
            }
        }
        array_105.finish();
    }
    if let Some(var_107) = &input.functions {
        let mut object_108 = object.key("functions").start_object();
        for (key_109, value_110) in var_107 {
            {
                let mut object_111 = object_108.key(key_109).start_object();
                crate::json_ser::serialize_structure_crate_model_function_request(
                    &mut object_111,
                    value_110,
                )?;
                object_111.finish();
            }
        }
        object_108.finish();
    }
    if let Some(var_112) = &input.is_singleton {
        object.key("isSingleton").boolean(*var_112);
    }
    if let Some(var_113) = &input.property_definitions {
        let mut object_114 = object.key("propertyDefinitions").start_object();
        for (key_115, value_116) in var_113 {
            {
                let mut object_117 = object_114.key(key_115).start_object();
                crate::json_ser::serialize_structure_crate_model_property_definition_request(
                    &mut object_117,
                    value_116,
                )?;
                object_117.finish();
            }
        }
        object_114.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_entity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEntityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_118) = &input.component_updates {
        let mut object_119 = object.key("componentUpdates").start_object();
        for (key_120, value_121) in var_118 {
            {
                let mut object_122 = object_119.key(key_120).start_object();
                crate::json_ser::serialize_structure_crate_model_component_update_request(
                    &mut object_122,
                    value_121,
                )?;
                object_122.finish();
            }
        }
        object_119.finish();
    }
    if let Some(var_123) = &input.description {
        object.key("description").string(var_123.as_str());
    }
    if let Some(var_124) = &input.entity_name {
        object.key("entityName").string(var_124.as_str());
    }
    if let Some(var_125) = &input.parent_entity_update {
        let mut object_126 = object.key("parentEntityUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_parent_entity_update_request(
            &mut object_126,
            var_125,
        )?;
        object_126.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_scene_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSceneInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.capabilities {
        let mut array_128 = object.key("capabilities").start_array();
        for item_129 in var_127 {
            {
                array_128.value().string(item_129.as_str());
            }
        }
        array_128.finish();
    }
    if let Some(var_130) = &input.content_location {
        object.key("contentLocation").string(var_130.as_str());
    }
    if let Some(var_131) = &input.description {
        object.key("description").string(var_131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workspace_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkspaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.description {
        object.key("description").string(var_132.as_str());
    }
    if let Some(var_133) = &input.role {
        object.key("role").string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_value_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyValueEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.entity_property_reference {
        let mut object_135 = object.key("entityPropertyReference").start_object();
        crate::json_ser::serialize_structure_crate_model_entity_property_reference(
            &mut object_135,
            var_134,
        )?;
        object_135.finish();
    }
    if let Some(var_136) = &input.property_values {
        let mut array_137 = object.key("propertyValues").start_array();
        for item_138 in var_136 {
            {
                let mut object_139 = array_137.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_value(
                    &mut object_139,
                    item_138,
                )?;
                object_139.finish();
            }
        }
        array_137.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_function_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FunctionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.required_properties {
        let mut array_141 = object.key("requiredProperties").start_array();
        for item_142 in var_140 {
            {
                array_141.value().string(item_142.as_str());
            }
        }
        array_141.finish();
    }
    if let Some(var_143) = &input.scope {
        object.key("scope").string(var_143.as_str());
    }
    if let Some(var_144) = &input.implemented_by {
        let mut object_145 = object.key("implementedBy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_connector(&mut object_145, var_144)?;
        object_145.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_definition_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyDefinitionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.data_type {
        let mut object_147 = object.key("dataType").start_object();
        crate::json_ser::serialize_structure_crate_model_data_type(&mut object_147, var_146)?;
        object_147.finish();
    }
    if let Some(var_148) = &input.is_required_in_entity {
        object.key("isRequiredInEntity").boolean(*var_148);
    }
    if let Some(var_149) = &input.is_external_id {
        object.key("isExternalId").boolean(*var_149);
    }
    if let Some(var_150) = &input.is_stored_externally {
        object.key("isStoredExternally").boolean(*var_150);
    }
    if let Some(var_151) = &input.is_time_series {
        object.key("isTimeSeries").boolean(*var_151);
    }
    if let Some(var_152) = &input.default_value {
        let mut object_153 = object.key("defaultValue").start_object();
        crate::json_ser::serialize_structure_crate_model_data_value(&mut object_153, var_152)?;
        object_153.finish();
    }
    if let Some(var_154) = &input.configuration {
        let mut object_155 = object.key("configuration").start_object();
        for (key_156, value_157) in var_154 {
            {
                object_155.key(key_156).string(value_157.as_str());
            }
        }
        object_155.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.description {
        object.key("description").string(var_158.as_str());
    }
    if let Some(var_159) = &input.component_type_id {
        object.key("componentTypeId").string(var_159.as_str());
    }
    if let Some(var_160) = &input.properties {
        let mut object_161 = object.key("properties").start_object();
        for (key_162, value_163) in var_160 {
            {
                let mut object_164 = object_161.key(key_162).start_object();
                crate::json_ser::serialize_structure_crate_model_property_request(
                    &mut object_164,
                    value_163,
                )?;
                object_164.finish();
            }
        }
        object_161.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_interpolation_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InterpolationParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.interpolation_type {
        object.key("interpolationType").string(var_165.as_str());
    }
    if let Some(var_166) = &input.interval_in_seconds {
        object.key("intervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_166).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.property_name {
        object.key("propertyName").string(var_167.as_str());
    }
    if let Some(var_168) = &input.operator {
        object.key("operator").string(var_168.as_str());
    }
    if let Some(var_169) = &input.value {
        let mut object_170 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_data_value(&mut object_170, var_169)?;
        object_170.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_list_component_types_filter(
    object_82: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListComponentTypesFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::ListComponentTypesFilter::ExtendsFrom(inner) => {
            object_82.key("extendsFrom").string(inner.as_str());
        }
        crate::model::ListComponentTypesFilter::Namespace(inner) => {
            object_82.key("namespace").string(inner.as_str());
        }
        crate::model::ListComponentTypesFilter::IsAbstract(inner) => {
            object_82.key("isAbstract").boolean(*inner);
        }
        crate::model::ListComponentTypesFilter::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "ListComponentTypesFilter",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_union_crate_model_list_entities_filter(
    object_88: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListEntitiesFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::ListEntitiesFilter::ParentEntityId(inner) => {
            object_88.key("parentEntityId").string(inner.as_str());
        }
        crate::model::ListEntitiesFilter::ComponentTypeId(inner) => {
            object_88.key("componentTypeId").string(inner.as_str());
        }
        crate::model::ListEntitiesFilter::ExternalId(inner) => {
            object_88.key("externalId").string(inner.as_str());
        }
        crate::model::ListEntitiesFilter::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "ListEntitiesFilter",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_update_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentUpdateRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.update_type {
        object.key("updateType").string(var_171.as_str());
    }
    if let Some(var_172) = &input.description {
        object.key("description").string(var_172.as_str());
    }
    if let Some(var_173) = &input.component_type_id {
        object.key("componentTypeId").string(var_173.as_str());
    }
    if let Some(var_174) = &input.property_updates {
        let mut object_175 = object.key("propertyUpdates").start_object();
        for (key_176, value_177) in var_174 {
            {
                let mut object_178 = object_175.key(key_176).start_object();
                crate::json_ser::serialize_structure_crate_model_property_request(
                    &mut object_178,
                    value_177,
                )?;
                object_178.finish();
            }
        }
        object_175.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parent_entity_update_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParentEntityUpdateRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.update_type {
        object.key("updateType").string(var_179.as_str());
    }
    if let Some(var_180) = &input.parent_entity_id {
        object.key("parentEntityId").string(var_180.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_property_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityPropertyReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.component_name {
        object.key("componentName").string(var_181.as_str());
    }
    if let Some(var_182) = &input.external_id_property {
        let mut object_183 = object.key("externalIdProperty").start_object();
        for (key_184, value_185) in var_182 {
            {
                object_183.key(key_184).string(value_185.as_str());
            }
        }
        object_183.finish();
    }
    if let Some(var_186) = &input.entity_id {
        object.key("entityId").string(var_186.as_str());
    }
    if let Some(var_187) = &input.property_name {
        object.key("propertyName").string(var_187.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.timestamp {
        object
            .key("timestamp")
            .date_time(var_188, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_189) = &input.value {
        let mut object_190 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_data_value(&mut object_190, var_189)?;
        object_190.finish();
    }
    if let Some(var_191) = &input.time {
        object.key("time").string(var_191.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_connector(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataConnector,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.lambda {
        let mut object_193 = object.key("lambda").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_function(&mut object_193, var_192)?;
        object_193.finish();
    }
    if let Some(var_194) = &input.is_native {
        object.key("isNative").boolean(*var_194);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.r#type {
        object.key("type").string(var_195.as_str());
    }
    if let Some(var_196) = &input.nested_type {
        let mut object_197 = object.key("nestedType").start_object();
        crate::json_ser::serialize_structure_crate_model_data_type(&mut object_197, var_196)?;
        object_197.finish();
    }
    if let Some(var_198) = &input.allowed_values {
        let mut array_199 = object.key("allowedValues").start_array();
        for item_200 in var_198 {
            {
                let mut object_201 = array_199.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_value(
                    &mut object_201,
                    item_200,
                )?;
                object_201.finish();
            }
        }
        array_199.finish();
    }
    if let Some(var_202) = &input.unit_of_measure {
        object.key("unitOfMeasure").string(var_202.as_str());
    }
    if let Some(var_203) = &input.relationship {
        let mut object_204 = object.key("relationship").start_object();
        crate::json_ser::serialize_structure_crate_model_relationship(&mut object_204, var_203)?;
        object_204.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.boolean_value {
        object.key("booleanValue").boolean(*var_205);
    }
    if let Some(var_206) = &input.double_value {
        object.key("doubleValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_206).into()),
        );
    }
    if let Some(var_207) = &input.integer_value {
        object.key("integerValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_207).into()),
        );
    }
    if let Some(var_208) = &input.long_value {
        object.key("longValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    if let Some(var_209) = &input.string_value {
        object.key("stringValue").string(var_209.as_str());
    }
    if let Some(var_210) = &input.list_value {
        let mut array_211 = object.key("listValue").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_value(
                    &mut object_213,
                    item_212,
                )?;
                object_213.finish();
            }
        }
        array_211.finish();
    }
    if let Some(var_214) = &input.map_value {
        let mut object_215 = object.key("mapValue").start_object();
        for (key_216, value_217) in var_214 {
            {
                let mut object_218 = object_215.key(key_216).start_object();
                crate::json_ser::serialize_structure_crate_model_data_value(
                    &mut object_218,
                    value_217,
                )?;
                object_218.finish();
            }
        }
        object_215.finish();
    }
    if let Some(var_219) = &input.relationship_value {
        let mut object_220 = object.key("relationshipValue").start_object();
        crate::json_ser::serialize_structure_crate_model_relationship_value(
            &mut object_220,
            var_219,
        )?;
        object_220.finish();
    }
    if let Some(var_221) = &input.expression {
        object.key("expression").string(var_221.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_222) = &input.definition {
        let mut object_223 = object.key("definition").start_object();
        crate::json_ser::serialize_structure_crate_model_property_definition_request(
            &mut object_223,
            var_222,
        )?;
        object_223.finish();
    }
    if let Some(var_224) = &input.value {
        let mut object_225 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_data_value(&mut object_225, var_224)?;
        object_225.finish();
    }
    if let Some(var_226) = &input.update_type {
        object.key("updateType").string(var_226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_function(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaFunction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.arn {
        object.key("arn").string(var_227.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relationship(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Relationship,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.target_component_type_id {
        object.key("targetComponentTypeId").string(var_228.as_str());
    }
    if let Some(var_229) = &input.relationship_type {
        object.key("relationshipType").string(var_229.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relationship_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationshipValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.target_entity_id {
        object.key("targetEntityId").string(var_230.as_str());
    }
    if let Some(var_231) = &input.target_component_name {
        object.key("targetComponentName").string(var_231.as_str());
    }
    Ok(())
}
