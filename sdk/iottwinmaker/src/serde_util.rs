// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn batch_put_property_values_output_correct_errors(
    mut builder: crate::operation::batch_put_property_values::builders::BatchPutPropertyValuesOutputBuilder,
) -> crate::operation::batch_put_property_values::builders::BatchPutPropertyValuesOutputBuilder {
    if builder.error_entries.is_none() {
        builder.error_entries = Some(Default::default())
    }
    builder
}

pub(crate) fn create_component_type_output_correct_errors(
    mut builder: crate::operation::create_component_type::builders::CreateComponentTypeOutputBuilder,
) -> crate::operation::create_component_type::builders::CreateComponentTypeOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn create_entity_output_correct_errors(
    mut builder: crate::operation::create_entity::builders::CreateEntityOutputBuilder,
) -> crate::operation::create_entity::builders::CreateEntityOutputBuilder {
    if builder.entity_id.is_none() {
        builder.entity_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn create_scene_output_correct_errors(
    mut builder: crate::operation::create_scene::builders::CreateSceneOutputBuilder,
) -> crate::operation::create_scene::builders::CreateSceneOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_sync_job_output_correct_errors(
    mut builder: crate::operation::create_sync_job::builders::CreateSyncJobOutputBuilder,
) -> crate::operation::create_sync_job::builders::CreateSyncJobOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::SyncJobState>().ok()
    }
    builder
}

pub(crate) fn create_workspace_output_correct_errors(
    mut builder: crate::operation::create_workspace::builders::CreateWorkspaceOutputBuilder,
) -> crate::operation::create_workspace::builders::CreateWorkspaceOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn delete_component_type_output_correct_errors(
    mut builder: crate::operation::delete_component_type::builders::DeleteComponentTypeOutputBuilder,
) -> crate::operation::delete_component_type::builders::DeleteComponentTypeOutputBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn delete_entity_output_correct_errors(
    mut builder: crate::operation::delete_entity::builders::DeleteEntityOutputBuilder,
) -> crate::operation::delete_entity::builders::DeleteEntityOutputBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn delete_sync_job_output_correct_errors(
    mut builder: crate::operation::delete_sync_job::builders::DeleteSyncJobOutputBuilder,
) -> crate::operation::delete_sync_job::builders::DeleteSyncJobOutputBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::SyncJobState>().ok()
    }
    builder
}

pub(crate) fn get_component_type_output_correct_errors(
    mut builder: crate::operation::get_component_type::builders::GetComponentTypeOutputBuilder,
) -> crate::operation::get_component_type::builders::GetComponentTypeOutputBuilder {
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.component_type_id.is_none() {
        builder.component_type_id = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_entity_output_correct_errors(
    mut builder: crate::operation::get_entity::builders::GetEntityOutputBuilder,
) -> crate::operation::get_entity::builders::GetEntityOutputBuilder {
    if builder.entity_id.is_none() {
        builder.entity_id = Some(Default::default())
    }
    if builder.entity_name.is_none() {
        builder.entity_name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::StatusBuilder::default();
            Some(builder.build())
        }
    }
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.parent_entity_id.is_none() {
        builder.parent_entity_id = Some(Default::default())
    }
    if builder.has_child_entities.is_none() {
        builder.has_child_entities = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_pricing_plan_output_correct_errors(
    mut builder: crate::operation::get_pricing_plan::builders::GetPricingPlanOutputBuilder,
) -> crate::operation::get_pricing_plan::builders::GetPricingPlanOutputBuilder {
    if builder.current_pricing_plan.is_none() {
        builder.current_pricing_plan = {
            let builder = crate::types::builders::PricingPlanBuilder::default();
            crate::serde_util::pricing_plan_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_property_value_history_output_correct_errors(
    mut builder: crate::operation::get_property_value_history::builders::GetPropertyValueHistoryOutputBuilder,
) -> crate::operation::get_property_value_history::builders::GetPropertyValueHistoryOutputBuilder {
    if builder.property_values.is_none() {
        builder.property_values = Some(Default::default())
    }
    builder
}

pub(crate) fn get_scene_output_correct_errors(
    mut builder: crate::operation::get_scene::builders::GetSceneOutputBuilder,
) -> crate::operation::get_scene::builders::GetSceneOutputBuilder {
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.scene_id.is_none() {
        builder.scene_id = Some(Default::default())
    }
    if builder.content_location.is_none() {
        builder.content_location = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_sync_job_output_correct_errors(
    mut builder: crate::operation::get_sync_job::builders::GetSyncJobOutputBuilder,
) -> crate::operation::get_sync_job::builders::GetSyncJobOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.sync_source.is_none() {
        builder.sync_source = Some(Default::default())
    }
    if builder.sync_role.is_none() {
        builder.sync_role = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::SyncJobStatusBuilder::default();
            Some(builder.build())
        }
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_workspace_output_correct_errors(
    mut builder: crate::operation::get_workspace::builders::GetWorkspaceOutputBuilder,
) -> crate::operation::get_workspace::builders::GetWorkspaceOutputBuilder {
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.s3_location.is_none() {
        builder.s3_location = Some(Default::default())
    }
    if builder.role.is_none() {
        builder.role = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_component_types_output_correct_errors(
    mut builder: crate::operation::list_component_types::builders::ListComponentTypesOutputBuilder,
) -> crate::operation::list_component_types::builders::ListComponentTypesOutputBuilder {
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.component_type_summaries.is_none() {
        builder.component_type_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn update_component_type_output_correct_errors(
    mut builder: crate::operation::update_component_type::builders::UpdateComponentTypeOutputBuilder,
) -> crate::operation::update_component_type::builders::UpdateComponentTypeOutputBuilder {
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.component_type_id.is_none() {
        builder.component_type_id = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn update_entity_output_correct_errors(
    mut builder: crate::operation::update_entity::builders::UpdateEntityOutputBuilder,
) -> crate::operation::update_entity::builders::UpdateEntityOutputBuilder {
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn update_pricing_plan_output_correct_errors(
    mut builder: crate::operation::update_pricing_plan::builders::UpdatePricingPlanOutputBuilder,
) -> crate::operation::update_pricing_plan::builders::UpdatePricingPlanOutputBuilder {
    if builder.current_pricing_plan.is_none() {
        builder.current_pricing_plan = {
            let builder = crate::types::builders::PricingPlanBuilder::default();
            crate::serde_util::pricing_plan_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_scene_output_correct_errors(
    mut builder: crate::operation::update_scene::builders::UpdateSceneOutputBuilder,
) -> crate::operation::update_scene::builders::UpdateSceneOutputBuilder {
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_workspace_output_correct_errors(
    mut builder: crate::operation::update_workspace::builders::UpdateWorkspaceOutputBuilder,
) -> crate::operation::update_workspace::builders::UpdateWorkspaceOutputBuilder {
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn pricing_plan_correct_errors(mut builder: crate::types::builders::PricingPlanBuilder) -> crate::types::builders::PricingPlanBuilder {
    if builder.effective_date_time.is_none() {
        builder.effective_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.pricing_mode.is_none() {
        builder.pricing_mode = "no value was set".parse::<crate::types::PricingMode>().ok()
    }
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_reason.is_none() {
        builder.update_reason = "no value was set".parse::<crate::types::UpdateReason>().ok()
    }
    builder
}

pub(crate) fn batch_put_property_error_entry_correct_errors(
    mut builder: crate::types::builders::BatchPutPropertyErrorEntryBuilder,
) -> crate::types::builders::BatchPutPropertyErrorEntryBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn bundle_information_correct_errors(
    mut builder: crate::types::builders::BundleInformationBuilder,
) -> crate::types::builders::BundleInformationBuilder {
    if builder.bundle_names.is_none() {
        builder.bundle_names = Some(Default::default())
    }
    builder
}

pub(crate) fn component_type_summary_correct_errors(
    mut builder: crate::types::builders::ComponentTypeSummaryBuilder,
) -> crate::types::builders::ComponentTypeSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.component_type_id.is_none() {
        builder.component_type_id = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn entity_summary_correct_errors(
    mut builder: crate::types::builders::EntitySummaryBuilder,
) -> crate::types::builders::EntitySummaryBuilder {
    if builder.entity_id.is_none() {
        builder.entity_id = Some(Default::default())
    }
    if builder.entity_name.is_none() {
        builder.entity_name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::StatusBuilder::default();
            Some(builder.build())
        }
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn property_definition_response_correct_errors(
    mut builder: crate::types::builders::PropertyDefinitionResponseBuilder,
) -> crate::types::builders::PropertyDefinitionResponseBuilder {
    if builder.data_type.is_none() {
        builder.data_type = {
            let builder = crate::types::builders::DataTypeBuilder::default();
            crate::serde_util::data_type_correct_errors(builder).build().ok()
        }
    }
    if builder.is_time_series.is_none() {
        builder.is_time_series = Some(Default::default())
    }
    if builder.is_required_in_entity.is_none() {
        builder.is_required_in_entity = Some(Default::default())
    }
    if builder.is_external_id.is_none() {
        builder.is_external_id = Some(Default::default())
    }
    if builder.is_stored_externally.is_none() {
        builder.is_stored_externally = Some(Default::default())
    }
    if builder.is_imported.is_none() {
        builder.is_imported = Some(Default::default())
    }
    if builder.is_final.is_none() {
        builder.is_final = Some(Default::default())
    }
    if builder.is_inherited.is_none() {
        builder.is_inherited = Some(Default::default())
    }
    builder
}

pub(crate) fn property_group_response_correct_errors(
    mut builder: crate::types::builders::PropertyGroupResponseBuilder,
) -> crate::types::builders::PropertyGroupResponseBuilder {
    if builder.group_type.is_none() {
        builder.group_type = "no value was set".parse::<crate::types::GroupType>().ok()
    }
    if builder.property_names.is_none() {
        builder.property_names = Some(Default::default())
    }
    if builder.is_inherited.is_none() {
        builder.is_inherited = Some(Default::default())
    }
    builder
}

pub(crate) fn property_latest_value_correct_errors(
    mut builder: crate::types::builders::PropertyLatestValueBuilder,
) -> crate::types::builders::PropertyLatestValueBuilder {
    if builder.property_reference.is_none() {
        builder.property_reference = {
            let builder = crate::types::builders::EntityPropertyReferenceBuilder::default();
            crate::serde_util::entity_property_reference_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn property_value_history_correct_errors(
    mut builder: crate::types::builders::PropertyValueHistoryBuilder,
) -> crate::types::builders::PropertyValueHistoryBuilder {
    if builder.entity_property_reference.is_none() {
        builder.entity_property_reference = {
            let builder = crate::types::builders::EntityPropertyReferenceBuilder::default();
            crate::serde_util::entity_property_reference_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn scene_summary_correct_errors(mut builder: crate::types::builders::SceneSummaryBuilder) -> crate::types::builders::SceneSummaryBuilder {
    if builder.scene_id.is_none() {
        builder.scene_id = Some(Default::default())
    }
    if builder.content_location.is_none() {
        builder.content_location = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn workspace_summary_correct_errors(
    mut builder: crate::types::builders::WorkspaceSummaryBuilder,
) -> crate::types::builders::WorkspaceSummaryBuilder {
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_date_time.is_none() {
        builder.creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_date_time.is_none() {
        builder.update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn data_type_correct_errors(mut builder: crate::types::builders::DataTypeBuilder) -> crate::types::builders::DataTypeBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::Type>().ok()
    }
    builder
}

pub(crate) fn entity_property_reference_correct_errors(
    mut builder: crate::types::builders::EntityPropertyReferenceBuilder,
) -> crate::types::builders::EntityPropertyReferenceBuilder {
    if builder.property_name.is_none() {
        builder.property_name = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_put_property_error_correct_errors(
    mut builder: crate::types::builders::BatchPutPropertyErrorBuilder,
) -> crate::types::builders::BatchPutPropertyErrorBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    if builder.entry.is_none() {
        builder.entry = {
            let builder = crate::types::builders::PropertyValueEntryBuilder::default();
            Some(crate::serde_util::property_value_entry_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn component_property_group_response_correct_errors(
    mut builder: crate::types::builders::ComponentPropertyGroupResponseBuilder,
) -> crate::types::builders::ComponentPropertyGroupResponseBuilder {
    if builder.group_type.is_none() {
        builder.group_type = "no value was set".parse::<crate::types::GroupType>().ok()
    }
    if builder.property_names.is_none() {
        builder.property_names = Some(Default::default())
    }
    if builder.is_inherited.is_none() {
        builder.is_inherited = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_function_correct_errors(
    mut builder: crate::types::builders::LambdaFunctionBuilder,
) -> crate::types::builders::LambdaFunctionBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn property_value_correct_errors(
    mut builder: crate::types::builders::PropertyValueBuilder,
) -> crate::types::builders::PropertyValueBuilder {
    if builder.value.is_none() {
        builder.value = {
            let builder = crate::types::builders::DataValueBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn property_value_entry_correct_errors(
    mut builder: crate::types::builders::PropertyValueEntryBuilder,
) -> crate::types::builders::PropertyValueEntryBuilder {
    if builder.entity_property_reference.is_none() {
        builder.entity_property_reference = {
            let builder = crate::types::builders::EntityPropertyReferenceBuilder::default();
            crate::serde_util::entity_property_reference_correct_errors(builder).build().ok()
        }
    }
    builder
}
