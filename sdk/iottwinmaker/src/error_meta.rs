// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>Access is denied.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>A conflict occurred.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The connector failed.</p>
    ConnectorFailureException(crate::types::error::ConnectorFailureException),
    /// <p>The connector timed out.</p>
    ConnectorTimeoutException(crate::types::error::ConnectorTimeoutException),
    /// <p>An unexpected error has occurred.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The query timeout exception.</p>
    QueryTimeoutException(crate::types::error::QueryTimeoutException),
    /// <p>The resource wasn't found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The service quota was exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The rate exceeds the limit.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The number of tags exceeds the limit.</p>
    TooManyTagsException(crate::types::error::TooManyTagsException),
    /// <p>Failed</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ConnectorFailureException(inner) => inner.fmt(f),
            Error::ConnectorTimeoutException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::QueryTimeoutException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_put_property_values::BatchPutPropertyValuesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_put_property_values::BatchPutPropertyValuesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_put_property_values::BatchPutPropertyValuesError> for Error {
    fn from(err: crate::operation::batch_put_property_values::BatchPutPropertyValuesError) -> Self {
        match err {
            crate::operation::batch_put_property_values::BatchPutPropertyValuesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_put_property_values::BatchPutPropertyValuesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_put_property_values::BatchPutPropertyValuesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_put_property_values::BatchPutPropertyValuesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_put_property_values::BatchPutPropertyValuesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_component_type::CreateComponentTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_component_type::CreateComponentTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_component_type::CreateComponentTypeError> for Error {
    fn from(err: crate::operation::create_component_type::CreateComponentTypeError) -> Self {
        match err {
            crate::operation::create_component_type::CreateComponentTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_component_type::CreateComponentTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_component_type::CreateComponentTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_component_type::CreateComponentTypeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_component_type::CreateComponentTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_component_type::CreateComponentTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_component_type::CreateComponentTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_entity::CreateEntityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_entity::CreateEntityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_entity::CreateEntityError> for Error {
    fn from(err: crate::operation::create_entity::CreateEntityError) -> Self {
        match err {
            crate::operation::create_entity::CreateEntityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_entity::CreateEntityError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_entity::CreateEntityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_entity::CreateEntityError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_entity::CreateEntityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_entity::CreateEntityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_entity::CreateEntityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_scene::CreateSceneError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_scene::CreateSceneError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_scene::CreateSceneError> for Error {
    fn from(err: crate::operation::create_scene::CreateSceneError) -> Self {
        match err {
            crate::operation::create_scene::CreateSceneError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_scene::CreateSceneError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_scene::CreateSceneError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_scene::CreateSceneError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_scene::CreateSceneError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_scene::CreateSceneError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_scene::CreateSceneError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_sync_job::CreateSyncJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_sync_job::CreateSyncJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_sync_job::CreateSyncJobError> for Error {
    fn from(err: crate::operation::create_sync_job::CreateSyncJobError) -> Self {
        match err {
            crate::operation::create_sync_job::CreateSyncJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_sync_job::CreateSyncJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_sync_job::CreateSyncJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_sync_job::CreateSyncJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_sync_job::CreateSyncJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_sync_job::CreateSyncJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_sync_job::CreateSyncJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workspace::CreateWorkspaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workspace::CreateWorkspaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_workspace::CreateWorkspaceError> for Error {
    fn from(err: crate::operation::create_workspace::CreateWorkspaceError) -> Self {
        match err {
            crate::operation::create_workspace::CreateWorkspaceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_workspace::CreateWorkspaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_workspace::CreateWorkspaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_workspace::CreateWorkspaceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_workspace::CreateWorkspaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_workspace::CreateWorkspaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_workspace::CreateWorkspaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_component_type::DeleteComponentTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_component_type::DeleteComponentTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_component_type::DeleteComponentTypeError> for Error {
    fn from(err: crate::operation::delete_component_type::DeleteComponentTypeError) -> Self {
        match err {
            crate::operation::delete_component_type::DeleteComponentTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_component_type::DeleteComponentTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_component_type::DeleteComponentTypeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_component_type::DeleteComponentTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_component_type::DeleteComponentTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_component_type::DeleteComponentTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_entity::DeleteEntityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_entity::DeleteEntityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_entity::DeleteEntityError> for Error {
    fn from(err: crate::operation::delete_entity::DeleteEntityError) -> Self {
        match err {
            crate::operation::delete_entity::DeleteEntityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_entity::DeleteEntityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_entity::DeleteEntityError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_entity::DeleteEntityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_entity::DeleteEntityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_entity::DeleteEntityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_scene::DeleteSceneError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_scene::DeleteSceneError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_scene::DeleteSceneError> for Error {
    fn from(err: crate::operation::delete_scene::DeleteSceneError) -> Self {
        match err {
            crate::operation::delete_scene::DeleteSceneError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_scene::DeleteSceneError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_scene::DeleteSceneError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_scene::DeleteSceneError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_scene::DeleteSceneError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_scene::DeleteSceneError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_sync_job::DeleteSyncJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_sync_job::DeleteSyncJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_sync_job::DeleteSyncJobError> for Error {
    fn from(err: crate::operation::delete_sync_job::DeleteSyncJobError) -> Self {
        match err {
            crate::operation::delete_sync_job::DeleteSyncJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_sync_job::DeleteSyncJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_sync_job::DeleteSyncJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_sync_job::DeleteSyncJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_sync_job::DeleteSyncJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_sync_job::DeleteSyncJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_sync_job::DeleteSyncJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workspace::DeleteWorkspaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workspace::DeleteWorkspaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_workspace::DeleteWorkspaceError> for Error {
    fn from(err: crate::operation::delete_workspace::DeleteWorkspaceError) -> Self {
        match err {
            crate::operation::delete_workspace::DeleteWorkspaceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_workspace::DeleteWorkspaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_workspace::DeleteWorkspaceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_workspace::DeleteWorkspaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_workspace::DeleteWorkspaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_workspace::DeleteWorkspaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::execute_query::ExecuteQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::execute_query::ExecuteQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::execute_query::ExecuteQueryError> for Error {
    fn from(err: crate::operation::execute_query::ExecuteQueryError) -> Self {
        match err {
            crate::operation::execute_query::ExecuteQueryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::execute_query::ExecuteQueryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::execute_query::ExecuteQueryError::QueryTimeoutException(inner) => Error::QueryTimeoutException(inner),
            crate::operation::execute_query::ExecuteQueryError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::execute_query::ExecuteQueryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::execute_query::ExecuteQueryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::execute_query::ExecuteQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_component_type::GetComponentTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_component_type::GetComponentTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_component_type::GetComponentTypeError> for Error {
    fn from(err: crate::operation::get_component_type::GetComponentTypeError) -> Self {
        match err {
            crate::operation::get_component_type::GetComponentTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_component_type::GetComponentTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_component_type::GetComponentTypeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_component_type::GetComponentTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_component_type::GetComponentTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_component_type::GetComponentTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_entity::GetEntityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_entity::GetEntityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_entity::GetEntityError> for Error {
    fn from(err: crate::operation::get_entity::GetEntityError) -> Self {
        match err {
            crate::operation::get_entity::GetEntityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_entity::GetEntityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_entity::GetEntityError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_entity::GetEntityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_entity::GetEntityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_entity::GetEntityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_pricing_plan::GetPricingPlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_pricing_plan::GetPricingPlanError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_pricing_plan::GetPricingPlanError> for Error {
    fn from(err: crate::operation::get_pricing_plan::GetPricingPlanError) -> Self {
        match err {
            crate::operation::get_pricing_plan::GetPricingPlanError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_pricing_plan::GetPricingPlanError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_pricing_plan::GetPricingPlanError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_pricing_plan::GetPricingPlanError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_pricing_plan::GetPricingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_property_value::GetPropertyValueError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_property_value::GetPropertyValueError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_property_value::GetPropertyValueError> for Error {
    fn from(err: crate::operation::get_property_value::GetPropertyValueError) -> Self {
        match err {
            crate::operation::get_property_value::GetPropertyValueError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_property_value::GetPropertyValueError::ConnectorFailureException(inner) => Error::ConnectorFailureException(inner),
            crate::operation::get_property_value::GetPropertyValueError::ConnectorTimeoutException(inner) => Error::ConnectorTimeoutException(inner),
            crate::operation::get_property_value::GetPropertyValueError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_property_value::GetPropertyValueError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_property_value::GetPropertyValueError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_property_value::GetPropertyValueError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_property_value::GetPropertyValueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_property_value_history::GetPropertyValueHistoryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_property_value_history::GetPropertyValueHistoryError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_property_value_history::GetPropertyValueHistoryError> for Error {
    fn from(err: crate::operation::get_property_value_history::GetPropertyValueHistoryError) -> Self {
        match err {
            crate::operation::get_property_value_history::GetPropertyValueHistoryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_property_value_history::GetPropertyValueHistoryError::ConnectorFailureException(inner) => {
                Error::ConnectorFailureException(inner)
            }
            crate::operation::get_property_value_history::GetPropertyValueHistoryError::ConnectorTimeoutException(inner) => {
                Error::ConnectorTimeoutException(inner)
            }
            crate::operation::get_property_value_history::GetPropertyValueHistoryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_property_value_history::GetPropertyValueHistoryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_property_value_history::GetPropertyValueHistoryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_property_value_history::GetPropertyValueHistoryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_property_value_history::GetPropertyValueHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_scene::GetSceneError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_scene::GetSceneError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_scene::GetSceneError> for Error {
    fn from(err: crate::operation::get_scene::GetSceneError) -> Self {
        match err {
            crate::operation::get_scene::GetSceneError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_scene::GetSceneError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_scene::GetSceneError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_scene::GetSceneError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_scene::GetSceneError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_scene::GetSceneError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_sync_job::GetSyncJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_sync_job::GetSyncJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_sync_job::GetSyncJobError> for Error {
    fn from(err: crate::operation::get_sync_job::GetSyncJobError) -> Self {
        match err {
            crate::operation::get_sync_job::GetSyncJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_sync_job::GetSyncJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_sync_job::GetSyncJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_sync_job::GetSyncJobError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_sync_job::GetSyncJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_sync_job::GetSyncJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_sync_job::GetSyncJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workspace::GetWorkspaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workspace::GetWorkspaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_workspace::GetWorkspaceError> for Error {
    fn from(err: crate::operation::get_workspace::GetWorkspaceError) -> Self {
        match err {
            crate::operation::get_workspace::GetWorkspaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_workspace::GetWorkspaceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_workspace::GetWorkspaceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_workspace::GetWorkspaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_workspace::GetWorkspaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_workspace::GetWorkspaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_component_types::ListComponentTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_component_types::ListComponentTypesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_component_types::ListComponentTypesError> for Error {
    fn from(err: crate::operation::list_component_types::ListComponentTypesError) -> Self {
        match err {
            crate::operation::list_component_types::ListComponentTypesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_component_types::ListComponentTypesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_component_types::ListComponentTypesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_component_types::ListComponentTypesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_component_types::ListComponentTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_entities::ListEntitiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_entities::ListEntitiesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_entities::ListEntitiesError> for Error {
    fn from(err: crate::operation::list_entities::ListEntitiesError) -> Self {
        match err {
            crate::operation::list_entities::ListEntitiesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_entities::ListEntitiesError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_entities::ListEntitiesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_entities::ListEntitiesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_entities::ListEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_scenes::ListScenesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_scenes::ListScenesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_scenes::ListScenesError> for Error {
    fn from(err: crate::operation::list_scenes::ListScenesError) -> Self {
        match err {
            crate::operation::list_scenes::ListScenesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_scenes::ListScenesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_scenes::ListScenesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_scenes::ListScenesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_scenes::ListScenesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sync_jobs::ListSyncJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sync_jobs::ListSyncJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_sync_jobs::ListSyncJobsError> for Error {
    fn from(err: crate::operation::list_sync_jobs::ListSyncJobsError) -> Self {
        match err {
            crate::operation::list_sync_jobs::ListSyncJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_sync_jobs::ListSyncJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_sync_jobs::ListSyncJobsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_sync_jobs::ListSyncJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_sync_jobs::ListSyncJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_sync_jobs::ListSyncJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sync_resources::ListSyncResourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sync_resources::ListSyncResourcesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_sync_resources::ListSyncResourcesError> for Error {
    fn from(err: crate::operation::list_sync_resources::ListSyncResourcesError) -> Self {
        match err {
            crate::operation::list_sync_resources::ListSyncResourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_sync_resources::ListSyncResourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_sync_resources::ListSyncResourcesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_sync_resources::ListSyncResourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_sync_resources::ListSyncResourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_sync_resources::ListSyncResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workspaces::ListWorkspacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workspaces::ListWorkspacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_workspaces::ListWorkspacesError> for Error {
    fn from(err: crate::operation::list_workspaces::ListWorkspacesError) -> Self {
        match err {
            crate::operation::list_workspaces::ListWorkspacesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_workspaces::ListWorkspacesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_workspaces::ListWorkspacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_workspaces::ListWorkspacesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_workspaces::ListWorkspacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_component_type::UpdateComponentTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_component_type::UpdateComponentTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_component_type::UpdateComponentTypeError> for Error {
    fn from(err: crate::operation::update_component_type::UpdateComponentTypeError) -> Self {
        match err {
            crate::operation::update_component_type::UpdateComponentTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_component_type::UpdateComponentTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_component_type::UpdateComponentTypeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_component_type::UpdateComponentTypeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_component_type::UpdateComponentTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_component_type::UpdateComponentTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_component_type::UpdateComponentTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_entity::UpdateEntityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_entity::UpdateEntityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_entity::UpdateEntityError> for Error {
    fn from(err: crate::operation::update_entity::UpdateEntityError) -> Self {
        match err {
            crate::operation::update_entity::UpdateEntityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_entity::UpdateEntityError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_entity::UpdateEntityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_entity::UpdateEntityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_entity::UpdateEntityError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_entity::UpdateEntityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_entity::UpdateEntityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_entity::UpdateEntityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_pricing_plan::UpdatePricingPlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_pricing_plan::UpdatePricingPlanError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_pricing_plan::UpdatePricingPlanError> for Error {
    fn from(err: crate::operation::update_pricing_plan::UpdatePricingPlanError) -> Self {
        match err {
            crate::operation::update_pricing_plan::UpdatePricingPlanError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_pricing_plan::UpdatePricingPlanError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_pricing_plan::UpdatePricingPlanError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_pricing_plan::UpdatePricingPlanError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_pricing_plan::UpdatePricingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_scene::UpdateSceneError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_scene::UpdateSceneError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_scene::UpdateSceneError> for Error {
    fn from(err: crate::operation::update_scene::UpdateSceneError) -> Self {
        match err {
            crate::operation::update_scene::UpdateSceneError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_scene::UpdateSceneError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_scene::UpdateSceneError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_scene::UpdateSceneError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_scene::UpdateSceneError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_scene::UpdateSceneError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workspace::UpdateWorkspaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workspace::UpdateWorkspaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_workspace::UpdateWorkspaceError> for Error {
    fn from(err: crate::operation::update_workspace::UpdateWorkspaceError) -> Self {
        match err {
            crate::operation::update_workspace::UpdateWorkspaceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_workspace::UpdateWorkspaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_workspace::UpdateWorkspaceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_workspace::UpdateWorkspaceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_workspace::UpdateWorkspaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_workspace::UpdateWorkspaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_workspace::UpdateWorkspaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::ConnectorFailureException(inner) => inner.source(),
            Error::ConnectorTimeoutException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::QueryTimeoutException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::TooManyTagsException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ConnectorFailureException(e) => e.request_id(),
            Self::ConnectorTimeoutException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::QueryTimeoutException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
