// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateComponentType`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workspace_id(impl Into<String>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::workspace_id) / [`set_workspace_id(Option<String>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::set_workspace_id): <p>The ID of the workspace that contains the component type.</p>
    ///   - [`is_singleton(bool)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::is_singleton) / [`set_is_singleton(Option<bool>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::set_is_singleton): <p>A Boolean value that specifies whether an entity can have more than one component of this type.</p>
    ///   - [`component_type_id(impl Into<String>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::component_type_id) / [`set_component_type_id(Option<String>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::set_component_type_id): <p>The ID of the component type.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::set_description): <p>The description of the component type.</p>
    ///   - [`property_definitions(HashMap<String, PropertyDefinitionRequest>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::property_definitions) / [`set_property_definitions(Option<HashMap<String, PropertyDefinitionRequest>>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::set_property_definitions): <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
    ///   - [`extends_from(Vec<String>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::extends_from) / [`set_extends_from(Option<Vec<String>>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::set_extends_from): <p>Specifies the parent component type to extend.</p>
    ///   - [`functions(HashMap<String, FunctionRequest>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::functions) / [`set_functions(Option<HashMap<String, FunctionRequest>>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::set_functions): <p>An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::set_tags): <p>Metadata that you can use to manage the component type.</p>
    ///   - [`property_groups(HashMap<String, PropertyGroupRequest>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::property_groups) / [`set_property_groups(Option<HashMap<String, PropertyGroupRequest>>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::set_property_groups): <p></p>
    ///   - [`component_type_name(impl Into<String>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::component_type_name) / [`set_component_type_name(Option<String>)`](crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::set_component_type_name): <p>A friendly name for the component type.</p>
    /// - On success, responds with [`CreateComponentTypeOutput`](crate::operation::create_component_type::CreateComponentTypeOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::create_component_type::CreateComponentTypeOutput::arn): <p>The ARN of the component type.</p>
    ///   - [`creation_date_time(Option<DateTime>)`](crate::operation::create_component_type::CreateComponentTypeOutput::creation_date_time): <p>The date and time when the entity was created.</p>
    ///   - [`state(Option<State>)`](crate::operation::create_component_type::CreateComponentTypeOutput::state): <p>The current state of the component type.</p>
    /// - On failure, responds with [`SdkError<CreateComponentTypeError>`](crate::operation::create_component_type::CreateComponentTypeError)
    pub fn create_component_type(
        &self,
    ) -> crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder {
        crate::operation::create_component_type::builders::CreateComponentTypeFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
