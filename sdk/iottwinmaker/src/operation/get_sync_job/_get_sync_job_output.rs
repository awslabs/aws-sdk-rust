// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSyncJobOutput {
    /// <p>The sync job ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the workspace that contains the sync job.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>The sync soucre.</p> <note>
    /// <p>Currently the only supported syncSoucre is <code>SITEWISE </code>.</p>
    /// </note>
    #[doc(hidden)]
    pub sync_source: std::option::Option<std::string::String>,
    /// <p>The sync IAM role.</p>
    #[doc(hidden)]
    pub sync_role: std::option::Option<std::string::String>,
    /// <p>The SyncJob response status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::SyncJobStatus>,
    /// <p>The creation date and time.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The update date and time.</p>
    #[doc(hidden)]
    pub update_date_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetSyncJobOutput {
    /// <p>The sync job ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the workspace that contains the sync job.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The sync soucre.</p> <note>
    /// <p>Currently the only supported syncSoucre is <code>SITEWISE </code>.</p>
    /// </note>
    pub fn sync_source(&self) -> std::option::Option<&str> {
        self.sync_source.as_deref()
    }
    /// <p>The sync IAM role.</p>
    pub fn sync_role(&self) -> std::option::Option<&str> {
        self.sync_role.as_deref()
    }
    /// <p>The SyncJob response status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::SyncJobStatus> {
        self.status.as_ref()
    }
    /// <p>The creation date and time.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The update date and time.</p>
    pub fn update_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSyncJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSyncJobOutput {
    /// Creates a new builder-style object to manufacture [`GetSyncJobOutput`](crate::operation::get_sync_job::GetSyncJobOutput).
    pub fn builder() -> crate::operation::get_sync_job::builders::GetSyncJobOutputBuilder {
        crate::operation::get_sync_job::builders::GetSyncJobOutputBuilder::default()
    }
}

/// A builder for [`GetSyncJobOutput`](crate::operation::get_sync_job::GetSyncJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSyncJobOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) workspace_id: std::option::Option<std::string::String>,
    pub(crate) sync_source: std::option::Option<std::string::String>,
    pub(crate) sync_role: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::SyncJobStatus>,
    pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) update_date_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetSyncJobOutputBuilder {
    /// <p>The sync job ARN.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The sync job ARN.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ID of the workspace that contains the sync job.</p>
    pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workspace_id = Some(input.into());
        self
    }
    /// <p>The ID of the workspace that contains the sync job.</p>
    pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The sync soucre.</p> <note>
    /// <p>Currently the only supported syncSoucre is <code>SITEWISE </code>.</p>
    /// </note>
    pub fn sync_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.sync_source = Some(input.into());
        self
    }
    /// <p>The sync soucre.</p> <note>
    /// <p>Currently the only supported syncSoucre is <code>SITEWISE </code>.</p>
    /// </note>
    pub fn set_sync_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sync_source = input;
        self
    }
    /// <p>The sync IAM role.</p>
    pub fn sync_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.sync_role = Some(input.into());
        self
    }
    /// <p>The sync IAM role.</p>
    pub fn set_sync_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sync_role = input;
        self
    }
    /// <p>The SyncJob response status.</p>
    pub fn status(mut self, input: crate::types::SyncJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The SyncJob response status.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::SyncJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The creation date and time.</p>
    pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = Some(input);
        self
    }
    /// <p>The creation date and time.</p>
    pub fn set_creation_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The update date and time.</p>
    pub fn update_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.update_date_time = Some(input);
        self
    }
    /// <p>The update date and time.</p>
    pub fn set_update_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.update_date_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSyncJobOutput`](crate::operation::get_sync_job::GetSyncJobOutput).
    pub fn build(self) -> crate::operation::get_sync_job::GetSyncJobOutput {
        crate::operation::get_sync_job::GetSyncJobOutput {
            arn: self.arn,
            workspace_id: self.workspace_id,
            sync_source: self.sync_source,
            sync_role: self.sync_role,
            status: self.status,
            creation_date_time: self.creation_date_time,
            update_date_time: self.update_date_time,
            _request_id: self._request_id,
        }
    }
}
