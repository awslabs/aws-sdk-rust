// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSceneOutput {
    /// <p>The ID of the workspace that contains the scene.</p>
    pub workspace_id: ::std::string::String,
    /// <p>The ID of the scene.</p>
    pub scene_id: ::std::string::String,
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub content_location: ::std::string::String,
    /// <p>The ARN of the scene.</p>
    pub arn: ::std::string::String,
    /// <p>The date and time when the scene was created.</p>
    pub creation_date_time: ::aws_smithy_types::DateTime,
    /// <p>The date and time when the scene was last updated.</p>
    pub update_date_time: ::aws_smithy_types::DateTime,
    /// <p>The description of the scene.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A list of capabilities that the scene uses to render.</p>
    pub capabilities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The response metadata.</p>
    pub scene_metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The generated scene metadata.</p>
    pub generated_scene_metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The SceneResponse error.</p>
    pub error: ::std::option::Option<crate::types::SceneError>,
    _request_id: Option<String>,
}
impl GetSceneOutput {
    /// <p>The ID of the workspace that contains the scene.</p>
    pub fn workspace_id(&self) -> &str {
        use std::ops::Deref;
        self.workspace_id.deref()
    }
    /// <p>The ID of the scene.</p>
    pub fn scene_id(&self) -> &str {
        use std::ops::Deref;
        self.scene_id.deref()
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub fn content_location(&self) -> &str {
        use std::ops::Deref;
        self.content_location.deref()
    }
    /// <p>The ARN of the scene.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The date and time when the scene was created.</p>
    pub fn creation_date_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_date_time
    }
    /// <p>The date and time when the scene was last updated.</p>
    pub fn update_date_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_date_time
    }
    /// <p>The description of the scene.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of capabilities that the scene uses to render.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capabilities.is_none()`.
    pub fn capabilities(&self) -> &[::std::string::String] {
        self.capabilities.as_deref().unwrap_or_default()
    }
    /// <p>The response metadata.</p>
    pub fn scene_metadata(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.scene_metadata.as_ref()
    }
    /// <p>The generated scene metadata.</p>
    pub fn generated_scene_metadata(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.generated_scene_metadata.as_ref()
    }
    /// <p>The SceneResponse error.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::SceneError> {
        self.error.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetSceneOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSceneOutput {
    /// Creates a new builder-style object to manufacture [`GetSceneOutput`](crate::operation::get_scene::GetSceneOutput).
    pub fn builder() -> crate::operation::get_scene::builders::GetSceneOutputBuilder {
        crate::operation::get_scene::builders::GetSceneOutputBuilder::default()
    }
}

/// A builder for [`GetSceneOutput`](crate::operation::get_scene::GetSceneOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetSceneOutputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) scene_id: ::std::option::Option<::std::string::String>,
    pub(crate) content_location: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) capabilities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) scene_metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) generated_scene_metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) error: ::std::option::Option<crate::types::SceneError>,
    _request_id: Option<String>,
}
impl GetSceneOutputBuilder {
    /// <p>The ID of the workspace that contains the scene.</p>
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workspace that contains the scene.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The ID of the workspace that contains the scene.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    /// <p>The ID of the scene.</p>
    /// This field is required.
    pub fn scene_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scene_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the scene.</p>
    pub fn set_scene_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scene_id = input;
        self
    }
    /// <p>The ID of the scene.</p>
    pub fn get_scene_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.scene_id
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    /// This field is required.
    pub fn content_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub fn set_content_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_location = input;
        self
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub fn get_content_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_location
    }
    /// <p>The ARN of the scene.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the scene.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the scene.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The date and time when the scene was created.</p>
    /// This field is required.
    pub fn creation_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the scene was created.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The date and time when the scene was created.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date_time
    }
    /// <p>The date and time when the scene was last updated.</p>
    /// This field is required.
    pub fn update_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the scene was last updated.</p>
    pub fn set_update_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_date_time = input;
        self
    }
    /// <p>The date and time when the scene was last updated.</p>
    pub fn get_update_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_date_time
    }
    /// <p>The description of the scene.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the scene.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the scene.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    /// <p>A list of capabilities that the scene uses to render.</p>
    pub fn capabilities(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.capabilities.unwrap_or_default();
        v.push(input.into());
        self.capabilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of capabilities that the scene uses to render.</p>
    pub fn set_capabilities(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>A list of capabilities that the scene uses to render.</p>
    pub fn get_capabilities(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.capabilities
    }
    /// Adds a key-value pair to `scene_metadata`.
    ///
    /// To override the contents of this collection use [`set_scene_metadata`](Self::set_scene_metadata).
    ///
    /// <p>The response metadata.</p>
    pub fn scene_metadata(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.scene_metadata.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.scene_metadata = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The response metadata.</p>
    pub fn set_scene_metadata(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.scene_metadata = input;
        self
    }
    /// <p>The response metadata.</p>
    pub fn get_scene_metadata(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.scene_metadata
    }
    /// Adds a key-value pair to `generated_scene_metadata`.
    ///
    /// To override the contents of this collection use [`set_generated_scene_metadata`](Self::set_generated_scene_metadata).
    ///
    /// <p>The generated scene metadata.</p>
    pub fn generated_scene_metadata(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.generated_scene_metadata.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.generated_scene_metadata = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The generated scene metadata.</p>
    pub fn set_generated_scene_metadata(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.generated_scene_metadata = input;
        self
    }
    /// <p>The generated scene metadata.</p>
    pub fn get_generated_scene_metadata(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.generated_scene_metadata
    }
    /// <p>The SceneResponse error.</p>
    pub fn error(mut self, input: crate::types::SceneError) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SceneResponse error.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::SceneError>) -> Self {
        self.error = input;
        self
    }
    /// <p>The SceneResponse error.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::SceneError> {
        &self.error
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSceneOutput`](crate::operation::get_scene::GetSceneOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`workspace_id`](crate::operation::get_scene::builders::GetSceneOutputBuilder::workspace_id)
    /// - [`scene_id`](crate::operation::get_scene::builders::GetSceneOutputBuilder::scene_id)
    /// - [`content_location`](crate::operation::get_scene::builders::GetSceneOutputBuilder::content_location)
    /// - [`arn`](crate::operation::get_scene::builders::GetSceneOutputBuilder::arn)
    /// - [`creation_date_time`](crate::operation::get_scene::builders::GetSceneOutputBuilder::creation_date_time)
    /// - [`update_date_time`](crate::operation::get_scene::builders::GetSceneOutputBuilder::update_date_time)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_scene::GetSceneOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_scene::GetSceneOutput {
            workspace_id: self.workspace_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workspace_id",
                    "workspace_id was not specified but it is required when building GetSceneOutput",
                )
            })?,
            scene_id: self.scene_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scene_id",
                    "scene_id was not specified but it is required when building GetSceneOutput",
                )
            })?,
            content_location: self.content_location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_location",
                    "content_location was not specified but it is required when building GetSceneOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GetSceneOutput",
                )
            })?,
            creation_date_time: self.creation_date_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_date_time",
                    "creation_date_time was not specified but it is required when building GetSceneOutput",
                )
            })?,
            update_date_time: self.update_date_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_date_time",
                    "update_date_time was not specified but it is required when building GetSceneOutput",
                )
            })?,
            description: self.description,
            capabilities: self.capabilities,
            scene_metadata: self.scene_metadata,
            generated_scene_metadata: self.generated_scene_metadata,
            error: self.error,
            _request_id: self._request_id,
        })
    }
}
