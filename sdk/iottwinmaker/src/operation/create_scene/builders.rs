// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_scene::_create_scene_output::CreateSceneOutputBuilder;

pub use crate::operation::create_scene::_create_scene_input::CreateSceneInputBuilder;

/// Fluent builder constructing a request to `CreateScene`.
///
/// <p>Creates a scene.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateSceneFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_scene::builders::CreateSceneInputBuilder,
}
impl CreateSceneFluentBuilder {
    /// Creates a new `CreateScene`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_scene::CreateScene,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_scene::CreateSceneError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_scene::CreateSceneOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_scene::CreateSceneError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the workspace that contains the scene.</p>
    pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workspace_id(input.into());
        self
    }
    /// <p>The ID of the workspace that contains the scene.</p>
    pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workspace_id(input);
        self
    }
    /// <p>The ID of the scene.</p>
    pub fn scene_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.scene_id(input.into());
        self
    }
    /// <p>The ID of the scene.</p>
    pub fn set_scene_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_scene_id(input);
        self
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub fn content_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.content_location(input.into());
        self
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub fn set_content_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_content_location(input);
        self
    }
    /// <p>The description for this scene.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description for this scene.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    /// <p>A list of capabilities that the scene uses to render itself.</p>
    pub fn capabilities(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.capabilities(input.into());
        self
    }
    /// <p>A list of capabilities that the scene uses to render itself.</p>
    pub fn set_capabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_capabilities(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata that you can use to manage the scene.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Metadata that you can use to manage the scene.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
