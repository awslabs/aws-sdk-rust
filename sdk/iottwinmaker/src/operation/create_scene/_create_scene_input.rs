// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSceneInput {
    /// <p>The ID of the workspace that contains the scene.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>The ID of the scene.</p>
    #[doc(hidden)]
    pub scene_id: std::option::Option<std::string::String>,
    /// <p>The relative path that specifies the location of the content definition file.</p>
    #[doc(hidden)]
    pub content_location: std::option::Option<std::string::String>,
    /// <p>The description for this scene.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A list of capabilities that the scene uses to render itself.</p>
    #[doc(hidden)]
    pub capabilities: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Metadata that you can use to manage the scene.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateSceneInput {
    /// <p>The ID of the workspace that contains the scene.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The ID of the scene.</p>
    pub fn scene_id(&self) -> std::option::Option<&str> {
        self.scene_id.as_deref()
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub fn content_location(&self) -> std::option::Option<&str> {
        self.content_location.as_deref()
    }
    /// <p>The description for this scene.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of capabilities that the scene uses to render itself.</p>
    pub fn capabilities(&self) -> std::option::Option<&[std::string::String]> {
        self.capabilities.as_deref()
    }
    /// <p>Metadata that you can use to manage the scene.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CreateSceneInput {
    /// Creates a new builder-style object to manufacture [`CreateSceneInput`](crate::operation::create_scene::CreateSceneInput).
    pub fn builder() -> crate::operation::create_scene::builders::CreateSceneInputBuilder {
        crate::operation::create_scene::builders::CreateSceneInputBuilder::default()
    }
}

/// A builder for [`CreateSceneInput`](crate::operation::create_scene::CreateSceneInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateSceneInputBuilder {
    pub(crate) workspace_id: std::option::Option<std::string::String>,
    pub(crate) scene_id: std::option::Option<std::string::String>,
    pub(crate) content_location: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) capabilities: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateSceneInputBuilder {
    /// <p>The ID of the workspace that contains the scene.</p>
    pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workspace_id = Some(input.into());
        self
    }
    /// <p>The ID of the workspace that contains the scene.</p>
    pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The ID of the scene.</p>
    pub fn scene_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.scene_id = Some(input.into());
        self
    }
    /// <p>The ID of the scene.</p>
    pub fn set_scene_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.scene_id = input;
        self
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub fn content_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_location = Some(input.into());
        self
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub fn set_content_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_location = input;
        self
    }
    /// <p>The description for this scene.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description for this scene.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    /// <p>A list of capabilities that the scene uses to render itself.</p>
    pub fn capabilities(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.capabilities.unwrap_or_default();
        v.push(input.into());
        self.capabilities = Some(v);
        self
    }
    /// <p>A list of capabilities that the scene uses to render itself.</p>
    pub fn set_capabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.capabilities = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata that you can use to manage the scene.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Metadata that you can use to manage the scene.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateSceneInput`](crate::operation::create_scene::CreateSceneInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_scene::CreateSceneInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_scene::CreateSceneInput {
            workspace_id: self.workspace_id,
            scene_id: self.scene_id,
            content_location: self.content_location,
            description: self.description,
            capabilities: self.capabilities,
            tags: self.tags,
        })
    }
}
