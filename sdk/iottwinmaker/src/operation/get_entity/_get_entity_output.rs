// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEntityOutput {
    /// <p>The ID of the entity.</p>
    #[doc(hidden)]
    pub entity_id: std::option::Option<std::string::String>,
    /// <p>The name of the entity.</p>
    #[doc(hidden)]
    pub entity_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the entity.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The current status of the entity.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::Status>,
    /// <p>The ID of the workspace.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>The description of the entity.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.</p>
    #[doc(hidden)]
    pub components: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ComponentResponse>,
    >,
    /// <p>The ID of the parent entity for this entity.</p>
    #[doc(hidden)]
    pub parent_entity_id: std::option::Option<std::string::String>,
    /// <p>A Boolean value that specifies whether the entity has associated child entities.</p>
    #[doc(hidden)]
    pub has_child_entities: std::option::Option<bool>,
    /// <p>The date and time when the entity was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the entity was last updated.</p>
    #[doc(hidden)]
    pub update_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
    #[doc(hidden)]
    pub sync_source: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEntityOutput {
    /// <p>The ID of the entity.</p>
    pub fn entity_id(&self) -> std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The name of the entity.</p>
    pub fn entity_name(&self) -> std::option::Option<&str> {
        self.entity_name.as_deref()
    }
    /// <p>The ARN of the entity.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The current status of the entity.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The ID of the workspace.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The description of the entity.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.</p>
    pub fn components(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::ComponentResponse>,
    > {
        self.components.as_ref()
    }
    /// <p>The ID of the parent entity for this entity.</p>
    pub fn parent_entity_id(&self) -> std::option::Option<&str> {
        self.parent_entity_id.as_deref()
    }
    /// <p>A Boolean value that specifies whether the entity has associated child entities.</p>
    pub fn has_child_entities(&self) -> std::option::Option<bool> {
        self.has_child_entities
    }
    /// <p>The date and time when the entity was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The date and time when the entity was last updated.</p>
    pub fn update_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
    /// <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
    pub fn sync_source(&self) -> std::option::Option<&str> {
        self.sync_source.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEntityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEntityOutput {
    /// Creates a new builder-style object to manufacture [`GetEntityOutput`](crate::operation::get_entity::GetEntityOutput).
    pub fn builder() -> crate::operation::get_entity::builders::GetEntityOutputBuilder {
        crate::operation::get_entity::builders::GetEntityOutputBuilder::default()
    }
}

/// A builder for [`GetEntityOutput`](crate::operation::get_entity::GetEntityOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEntityOutputBuilder {
    pub(crate) entity_id: std::option::Option<std::string::String>,
    pub(crate) entity_name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::Status>,
    pub(crate) workspace_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) components: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ComponentResponse>,
    >,
    pub(crate) parent_entity_id: std::option::Option<std::string::String>,
    pub(crate) has_child_entities: std::option::Option<bool>,
    pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) update_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) sync_source: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEntityOutputBuilder {
    /// <p>The ID of the entity.</p>
    pub fn entity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_id = Some(input.into());
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn set_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The name of the entity.</p>
    pub fn entity_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_name = Some(input.into());
        self
    }
    /// <p>The name of the entity.</p>
    pub fn set_entity_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entity_name = input;
        self
    }
    /// <p>The ARN of the entity.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the entity.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The current status of the entity.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the entity.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The ID of the workspace.</p>
    pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workspace_id = Some(input.into());
        self
    }
    /// <p>The ID of the workspace.</p>
    pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The description of the entity.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the entity.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Adds a key-value pair to `components`.
    ///
    /// To override the contents of this collection use [`set_components`](Self::set_components).
    ///
    /// <p>An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.</p>
    pub fn components(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::ComponentResponse,
    ) -> Self {
        let mut hash_map = self.components.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.components = Some(hash_map);
        self
    }
    /// <p>An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.</p>
    pub fn set_components(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::ComponentResponse>,
        >,
    ) -> Self {
        self.components = input;
        self
    }
    /// <p>The ID of the parent entity for this entity.</p>
    pub fn parent_entity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_entity_id = Some(input.into());
        self
    }
    /// <p>The ID of the parent entity for this entity.</p>
    pub fn set_parent_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parent_entity_id = input;
        self
    }
    /// <p>A Boolean value that specifies whether the entity has associated child entities.</p>
    pub fn has_child_entities(mut self, input: bool) -> Self {
        self.has_child_entities = Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether the entity has associated child entities.</p>
    pub fn set_has_child_entities(mut self, input: std::option::Option<bool>) -> Self {
        self.has_child_entities = input;
        self
    }
    /// <p>The date and time when the entity was created.</p>
    pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = Some(input);
        self
    }
    /// <p>The date and time when the entity was created.</p>
    pub fn set_creation_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The date and time when the entity was last updated.</p>
    pub fn update_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.update_date_time = Some(input);
        self
    }
    /// <p>The date and time when the entity was last updated.</p>
    pub fn set_update_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.update_date_time = input;
        self
    }
    /// <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
    pub fn sync_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.sync_source = Some(input.into());
        self
    }
    /// <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
    pub fn set_sync_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sync_source = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEntityOutput`](crate::operation::get_entity::GetEntityOutput).
    pub fn build(self) -> crate::operation::get_entity::GetEntityOutput {
        crate::operation::get_entity::GetEntityOutput {
            entity_id: self.entity_id,
            entity_name: self.entity_name,
            arn: self.arn,
            status: self.status,
            workspace_id: self.workspace_id,
            description: self.description,
            components: self.components,
            parent_entity_id: self.parent_entity_id,
            has_child_entities: self.has_child_entities,
            creation_date_time: self.creation_date_time,
            update_date_time: self.update_date_time,
            sync_source: self.sync_source,
            _request_id: self._request_id,
        }
    }
}
