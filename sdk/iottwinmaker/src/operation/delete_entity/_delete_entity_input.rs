// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteEntityInput {
    /// <p>The ID of the workspace that contains the entity to delete.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>The ID of the entity to delete.</p>
    #[doc(hidden)]
    pub entity_id: std::option::Option<std::string::String>,
    /// <p>A Boolean value that specifies whether the operation deletes child entities.</p>
    #[doc(hidden)]
    pub is_recursive: std::option::Option<bool>,
}
impl DeleteEntityInput {
    /// <p>The ID of the workspace that contains the entity to delete.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The ID of the entity to delete.</p>
    pub fn entity_id(&self) -> std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>A Boolean value that specifies whether the operation deletes child entities.</p>
    pub fn is_recursive(&self) -> std::option::Option<bool> {
        self.is_recursive
    }
}
impl DeleteEntityInput {
    /// Creates a new builder-style object to manufacture [`DeleteEntityInput`](crate::operation::delete_entity::DeleteEntityInput).
    pub fn builder() -> crate::operation::delete_entity::builders::DeleteEntityInputBuilder {
        crate::operation::delete_entity::builders::DeleteEntityInputBuilder::default()
    }
}

/// A builder for [`DeleteEntityInput`](crate::operation::delete_entity::DeleteEntityInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteEntityInputBuilder {
    pub(crate) workspace_id: std::option::Option<std::string::String>,
    pub(crate) entity_id: std::option::Option<std::string::String>,
    pub(crate) is_recursive: std::option::Option<bool>,
}
impl DeleteEntityInputBuilder {
    /// <p>The ID of the workspace that contains the entity to delete.</p>
    pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workspace_id = Some(input.into());
        self
    }
    /// <p>The ID of the workspace that contains the entity to delete.</p>
    pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The ID of the entity to delete.</p>
    pub fn entity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_id = Some(input.into());
        self
    }
    /// <p>The ID of the entity to delete.</p>
    pub fn set_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>A Boolean value that specifies whether the operation deletes child entities.</p>
    pub fn is_recursive(mut self, input: bool) -> Self {
        self.is_recursive = Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether the operation deletes child entities.</p>
    pub fn set_is_recursive(mut self, input: std::option::Option<bool>) -> Self {
        self.is_recursive = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteEntityInput`](crate::operation::delete_entity::DeleteEntityInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_entity::DeleteEntityInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_entity::DeleteEntityInput {
            workspace_id: self.workspace_id,
            entity_id: self.entity_id,
            is_recursive: self.is_recursive,
        })
    }
}
