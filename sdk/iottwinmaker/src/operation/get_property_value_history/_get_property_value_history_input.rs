// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPropertyValueHistoryInput {
    /// <p>The ID of the workspace.</p>
    pub workspace_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the entity.</p>
    pub entity_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the component.</p>
    pub component_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the component type.</p>
    pub component_type_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of properties whose value histories the request retrieves.</p>
    pub selected_properties: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of objects that filter the property value history request.</p>
    pub property_filters: ::std::option::Option<::std::vec::Vec<crate::types::PropertyFilter>>,
    /// <p>The date and time of the earliest property value to return.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use startTime instead.")]
    pub start_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time of the latest property value to return.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use endTime instead.")]
    pub end_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An object that specifies the interpolation type and the interval over which to interpolate data.</p>
    pub interpolation: ::std::option::Option<crate::types::InterpolationParameters>,
    /// <p>The string that specifies the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    /// <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The time direction to use in the result order.</p>
    pub order_by_time: ::std::option::Option<crate::types::OrderByTime>,
    /// <p>The ISO8601 DateTime of the earliest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub start_time: ::std::option::Option<::std::string::String>,
    /// <p>The ISO8601 DateTime of the latest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub end_time: ::std::option::Option<::std::string::String>,
}
impl GetPropertyValueHistoryInput {
    /// <p>The ID of the workspace.</p>
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The ID of the entity.</p>
    pub fn entity_id(&self) -> ::std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The name of the component.</p>
    pub fn component_name(&self) -> ::std::option::Option<&str> {
        self.component_name.as_deref()
    }
    /// <p>The ID of the component type.</p>
    pub fn component_type_id(&self) -> ::std::option::Option<&str> {
        self.component_type_id.as_deref()
    }
    /// <p>A list of properties whose value histories the request retrieves.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.selected_properties.is_none()`.
    pub fn selected_properties(&self) -> &[::std::string::String] {
        self.selected_properties.as_deref().unwrap_or_default()
    }
    /// <p>A list of objects that filter the property value history request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.property_filters.is_none()`.
    pub fn property_filters(&self) -> &[crate::types::PropertyFilter] {
        self.property_filters.as_deref().unwrap_or_default()
    }
    /// <p>The date and time of the earliest property value to return.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use startTime instead.")]
    pub fn start_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_date_time.as_ref()
    }
    /// <p>The date and time of the latest property value to return.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use endTime instead.")]
    pub fn end_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_date_time.as_ref()
    }
    /// <p>An object that specifies the interpolation type and the interval over which to interpolate data.</p>
    pub fn interpolation(&self) -> ::std::option::Option<&crate::types::InterpolationParameters> {
        self.interpolation.as_ref()
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    /// <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The time direction to use in the result order.</p>
    pub fn order_by_time(&self) -> ::std::option::Option<&crate::types::OrderByTime> {
        self.order_by_time.as_ref()
    }
    /// <p>The ISO8601 DateTime of the earliest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub fn start_time(&self) -> ::std::option::Option<&str> {
        self.start_time.as_deref()
    }
    /// <p>The ISO8601 DateTime of the latest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub fn end_time(&self) -> ::std::option::Option<&str> {
        self.end_time.as_deref()
    }
}
impl GetPropertyValueHistoryInput {
    /// Creates a new builder-style object to manufacture [`GetPropertyValueHistoryInput`](crate::operation::get_property_value_history::GetPropertyValueHistoryInput).
    pub fn builder() -> crate::operation::get_property_value_history::builders::GetPropertyValueHistoryInputBuilder {
        crate::operation::get_property_value_history::builders::GetPropertyValueHistoryInputBuilder::default()
    }
}

/// A builder for [`GetPropertyValueHistoryInput`](crate::operation::get_property_value_history::GetPropertyValueHistoryInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetPropertyValueHistoryInputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) component_name: ::std::option::Option<::std::string::String>,
    pub(crate) component_type_id: ::std::option::Option<::std::string::String>,
    pub(crate) selected_properties: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) property_filters: ::std::option::Option<::std::vec::Vec<crate::types::PropertyFilter>>,
    pub(crate) start_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) interpolation: ::std::option::Option<crate::types::InterpolationParameters>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) order_by_time: ::std::option::Option<crate::types::OrderByTime>,
    pub(crate) start_time: ::std::option::Option<::std::string::String>,
    pub(crate) end_time: ::std::option::Option<::std::string::String>,
}
impl GetPropertyValueHistoryInputBuilder {
    /// <p>The ID of the workspace.</p>
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workspace.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The ID of the workspace.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    /// <p>The ID of the entity.</p>
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>The name of the component.</p>
    pub fn component_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the component.</p>
    pub fn set_component_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_name = input;
        self
    }
    /// <p>The name of the component.</p>
    pub fn get_component_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_name
    }
    /// <p>The ID of the component type.</p>
    pub fn component_type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_type_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the component type.</p>
    pub fn set_component_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_type_id = input;
        self
    }
    /// <p>The ID of the component type.</p>
    pub fn get_component_type_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_type_id
    }
    /// Appends an item to `selected_properties`.
    ///
    /// To override the contents of this collection use [`set_selected_properties`](Self::set_selected_properties).
    ///
    /// <p>A list of properties whose value histories the request retrieves.</p>
    pub fn selected_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.selected_properties.unwrap_or_default();
        v.push(input.into());
        self.selected_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of properties whose value histories the request retrieves.</p>
    pub fn set_selected_properties(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.selected_properties = input;
        self
    }
    /// <p>A list of properties whose value histories the request retrieves.</p>
    pub fn get_selected_properties(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.selected_properties
    }
    /// Appends an item to `property_filters`.
    ///
    /// To override the contents of this collection use [`set_property_filters`](Self::set_property_filters).
    ///
    /// <p>A list of objects that filter the property value history request.</p>
    pub fn property_filters(mut self, input: crate::types::PropertyFilter) -> Self {
        let mut v = self.property_filters.unwrap_or_default();
        v.push(input);
        self.property_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects that filter the property value history request.</p>
    pub fn set_property_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PropertyFilter>>) -> Self {
        self.property_filters = input;
        self
    }
    /// <p>A list of objects that filter the property value history request.</p>
    pub fn get_property_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PropertyFilter>> {
        &self.property_filters
    }
    /// <p>The date and time of the earliest property value to return.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use startTime instead.")]
    pub fn start_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time of the earliest property value to return.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use startTime instead.")]
    pub fn set_start_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_date_time = input;
        self
    }
    /// <p>The date and time of the earliest property value to return.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use startTime instead.")]
    pub fn get_start_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_date_time
    }
    /// <p>The date and time of the latest property value to return.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use endTime instead.")]
    pub fn end_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time of the latest property value to return.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use endTime instead.")]
    pub fn set_end_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_date_time = input;
        self
    }
    /// <p>The date and time of the latest property value to return.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use endTime instead.")]
    pub fn get_end_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_date_time
    }
    /// <p>An object that specifies the interpolation type and the interval over which to interpolate data.</p>
    pub fn interpolation(mut self, input: crate::types::InterpolationParameters) -> Self {
        self.interpolation = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that specifies the interpolation type and the interval over which to interpolate data.</p>
    pub fn set_interpolation(mut self, input: ::std::option::Option<crate::types::InterpolationParameters>) -> Self {
        self.interpolation = input;
        self
    }
    /// <p>An object that specifies the interpolation type and the interval over which to interpolate data.</p>
    pub fn get_interpolation(&self) -> &::std::option::Option<crate::types::InterpolationParameters> {
        &self.interpolation
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    /// <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    /// <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    /// <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The time direction to use in the result order.</p>
    pub fn order_by_time(mut self, input: crate::types::OrderByTime) -> Self {
        self.order_by_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time direction to use in the result order.</p>
    pub fn set_order_by_time(mut self, input: ::std::option::Option<crate::types::OrderByTime>) -> Self {
        self.order_by_time = input;
        self
    }
    /// <p>The time direction to use in the result order.</p>
    pub fn get_order_by_time(&self) -> &::std::option::Option<crate::types::OrderByTime> {
        &self.order_by_time
    }
    /// <p>The ISO8601 DateTime of the earliest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub fn start_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ISO8601 DateTime of the earliest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The ISO8601 DateTime of the earliest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_time
    }
    /// <p>The ISO8601 DateTime of the latest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub fn end_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.end_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ISO8601 DateTime of the latest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The ISO8601 DateTime of the latest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`GetPropertyValueHistoryInput`](crate::operation::get_property_value_history::GetPropertyValueHistoryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_property_value_history::GetPropertyValueHistoryInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_property_value_history::GetPropertyValueHistoryInput {
            workspace_id: self.workspace_id,
            entity_id: self.entity_id,
            component_name: self.component_name,
            component_type_id: self.component_type_id,
            selected_properties: self.selected_properties,
            property_filters: self.property_filters,
            start_date_time: self.start_date_time,
            end_date_time: self.end_date_time,
            interpolation: self.interpolation,
            next_token: self.next_token,
            max_results: self.max_results,
            order_by_time: self.order_by_time,
            start_time: self.start_time,
            end_time: self.end_time,
        })
    }
}
