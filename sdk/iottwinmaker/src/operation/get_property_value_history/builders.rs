// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_property_value_history::_get_property_value_history_output::GetPropertyValueHistoryOutputBuilder;

pub use crate::operation::get_property_value_history::_get_property_value_history_input::GetPropertyValueHistoryInputBuilder;

/// Fluent builder constructing a request to `GetPropertyValueHistory`.
///
/// <p>Retrieves information about the history of a time series property value for a component, component type, entity, or workspace.</p>
/// <p>You must specify a value for <code>workspaceId</code>. For entity-specific queries, specify values for <code>componentName</code> and <code>entityId</code>. For cross-entity quries, specify a value for <code>componentTypeId</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetPropertyValueHistoryFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::get_property_value_history::builders::GetPropertyValueHistoryInputBuilder,
}
impl GetPropertyValueHistoryFluentBuilder {
    /// Creates a new `GetPropertyValueHistory`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_property_value_history::GetPropertyValueHistory,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_property_value_history::GetPropertyValueHistoryError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_property_value_history::GetPropertyValueHistoryOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_property_value_history::GetPropertyValueHistoryError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_property_value_history::paginator::GetPropertyValueHistoryPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::get_property_value_history::paginator::GetPropertyValueHistoryPaginator
    {
        crate::operation::get_property_value_history::paginator::GetPropertyValueHistoryPaginator::new(self.handle, self.inner)
    }
    /// <p>The ID of the workspace.</p>
    pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workspace_id(input.into());
        self
    }
    /// <p>The ID of the workspace.</p>
    pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workspace_id(input);
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn entity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.entity_id(input.into());
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn set_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_entity_id(input);
        self
    }
    /// <p>The name of the component.</p>
    pub fn component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.component_name(input.into());
        self
    }
    /// <p>The name of the component.</p>
    pub fn set_component_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_component_name(input);
        self
    }
    /// <p>The ID of the component type.</p>
    pub fn component_type_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.component_type_id(input.into());
        self
    }
    /// <p>The ID of the component type.</p>
    pub fn set_component_type_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_component_type_id(input);
        self
    }
    /// Appends an item to `selectedProperties`.
    ///
    /// To override the contents of this collection use [`set_selected_properties`](Self::set_selected_properties).
    ///
    /// <p>A list of properties whose value histories the request retrieves.</p>
    pub fn selected_properties(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.selected_properties(input.into());
        self
    }
    /// <p>A list of properties whose value histories the request retrieves.</p>
    pub fn set_selected_properties(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_selected_properties(input);
        self
    }
    /// Appends an item to `propertyFilters`.
    ///
    /// To override the contents of this collection use [`set_property_filters`](Self::set_property_filters).
    ///
    /// <p>A list of objects that filter the property value history request.</p>
    pub fn property_filters(mut self, input: crate::types::PropertyFilter) -> Self {
        self.inner = self.inner.property_filters(input);
        self
    }
    /// <p>A list of objects that filter the property value history request.</p>
    pub fn set_property_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PropertyFilter>>,
    ) -> Self {
        self.inner = self.inner.set_property_filters(input);
        self
    }
    /// <p>The date and time of the earliest property value to return.</p>
    #[deprecated(
        note = "This field is deprecated and will throw an error in the future. Use startTime instead."
    )]
    pub fn start_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_date_time(input);
        self
    }
    /// <p>The date and time of the earliest property value to return.</p>
    #[deprecated(
        note = "This field is deprecated and will throw an error in the future. Use startTime instead."
    )]
    pub fn set_start_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_start_date_time(input);
        self
    }
    /// <p>The date and time of the latest property value to return.</p>
    #[deprecated(
        note = "This field is deprecated and will throw an error in the future. Use endTime instead."
    )]
    pub fn end_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_date_time(input);
        self
    }
    /// <p>The date and time of the latest property value to return.</p>
    #[deprecated(
        note = "This field is deprecated and will throw an error in the future. Use endTime instead."
    )]
    pub fn set_end_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_end_date_time(input);
        self
    }
    /// <p>An object that specifies the interpolation type and the interval over which to interpolate data.</p>
    pub fn interpolation(mut self, input: crate::types::InterpolationParameters) -> Self {
        self.inner = self.inner.interpolation(input);
        self
    }
    /// <p>An object that specifies the interpolation type and the interval over which to interpolate data.</p>
    pub fn set_interpolation(
        mut self,
        input: std::option::Option<crate::types::InterpolationParameters>,
    ) -> Self {
        self.inner = self.inner.set_interpolation(input);
        self
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The string that specifies the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    /// <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    /// <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The time direction to use in the result order.</p>
    pub fn order_by_time(mut self, input: crate::types::OrderByTime) -> Self {
        self.inner = self.inner.order_by_time(input);
        self
    }
    /// <p>The time direction to use in the result order.</p>
    pub fn set_order_by_time(
        mut self,
        input: std::option::Option<crate::types::OrderByTime>,
    ) -> Self {
        self.inner = self.inner.set_order_by_time(input);
        self
    }
    /// <p>The ISO8601 DateTime of the earliest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub fn start_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.start_time(input.into());
        self
    }
    /// <p>The ISO8601 DateTime of the earliest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub fn set_start_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>The ISO8601 DateTime of the latest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub fn end_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.end_time(input.into());
        self
    }
    /// <p>The ISO8601 DateTime of the latest property value to return.</p>
    /// <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
    pub fn set_end_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
}
