// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_entity::_update_entity_output::UpdateEntityOutputBuilder;

pub use crate::operation::update_entity::_update_entity_input::UpdateEntityInputBuilder;

impl crate::operation::update_entity::builders::UpdateEntityInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_entity::UpdateEntityOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_entity::UpdateEntityError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_entity();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateEntity`.
///
/// <p>Updates an entity.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateEntityFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_entity::builders::UpdateEntityInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_entity::UpdateEntityOutput,
        crate::operation::update_entity::UpdateEntityError,
    > for UpdateEntityFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_entity::UpdateEntityOutput,
            crate::operation::update_entity::UpdateEntityError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateEntityFluentBuilder {
    /// Creates a new `UpdateEntity`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateEntity as a reference.
    pub fn as_input(&self) -> &crate::operation::update_entity::builders::UpdateEntityInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_entity::UpdateEntityOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_entity::UpdateEntityError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_entity::UpdateEntity::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_entity::UpdateEntity::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_entity::UpdateEntityOutput,
        crate::operation::update_entity::UpdateEntityError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the workspace that contains the entity.</p>
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.workspace_id(input.into());
        self
    }
    /// <p>The ID of the workspace that contains the entity.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_workspace_id(input);
        self
    }
    /// <p>The ID of the workspace that contains the entity.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_workspace_id()
    }
    /// <p>The ID of the entity.</p>
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.entity_id(input.into());
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_entity_id(input);
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_entity_id()
    }
    /// <p>The name of the entity.</p>
    pub fn entity_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.entity_name(input.into());
        self
    }
    /// <p>The name of the entity.</p>
    pub fn set_entity_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_entity_name(input);
        self
    }
    /// <p>The name of the entity.</p>
    pub fn get_entity_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_entity_name()
    }
    /// <p>The description of the entity.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the entity.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description of the entity.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    ///
    /// Adds a key-value pair to `componentUpdates`.
    ///
    /// To override the contents of this collection use [`set_component_updates`](Self::set_component_updates).
    ///
    /// <p>An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.</p>
    pub fn component_updates(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ComponentUpdateRequest) -> Self {
        self.inner = self.inner.component_updates(k.into(), v);
        self
    }
    /// <p>An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.</p>
    pub fn set_component_updates(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentUpdateRequest>>,
    ) -> Self {
        self.inner = self.inner.set_component_updates(input);
        self
    }
    /// <p>An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.</p>
    pub fn get_component_updates(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentUpdateRequest>> {
        self.inner.get_component_updates()
    }
    ///
    /// Adds a key-value pair to `compositeComponentUpdates`.
    ///
    /// To override the contents of this collection use [`set_composite_component_updates`](Self::set_composite_component_updates).
    ///
    /// <p>This is an object that maps strings to <code>compositeComponent</code> updates in the request. Each key of the map represents the <code>componentPath</code> of the <code>compositeComponent</code>.</p>
    pub fn composite_component_updates(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::CompositeComponentUpdateRequest,
    ) -> Self {
        self.inner = self.inner.composite_component_updates(k.into(), v);
        self
    }
    /// <p>This is an object that maps strings to <code>compositeComponent</code> updates in the request. Each key of the map represents the <code>componentPath</code> of the <code>compositeComponent</code>.</p>
    pub fn set_composite_component_updates(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CompositeComponentUpdateRequest>>,
    ) -> Self {
        self.inner = self.inner.set_composite_component_updates(input);
        self
    }
    /// <p>This is an object that maps strings to <code>compositeComponent</code> updates in the request. Each key of the map represents the <code>componentPath</code> of the <code>compositeComponent</code>.</p>
    pub fn get_composite_component_updates(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CompositeComponentUpdateRequest>> {
        self.inner.get_composite_component_updates()
    }
    /// <p>An object that describes the update request for a parent entity.</p>
    pub fn parent_entity_update(mut self, input: crate::types::ParentEntityUpdateRequest) -> Self {
        self.inner = self.inner.parent_entity_update(input);
        self
    }
    /// <p>An object that describes the update request for a parent entity.</p>
    pub fn set_parent_entity_update(mut self, input: ::std::option::Option<crate::types::ParentEntityUpdateRequest>) -> Self {
        self.inner = self.inner.set_parent_entity_update(input);
        self
    }
    /// <p>An object that describes the update request for a parent entity.</p>
    pub fn get_parent_entity_update(&self) -> &::std::option::Option<crate::types::ParentEntityUpdateRequest> {
        self.inner.get_parent_entity_update()
    }
}
