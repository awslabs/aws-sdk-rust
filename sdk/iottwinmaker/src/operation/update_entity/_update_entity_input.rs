// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateEntityInput {
    /// <p>The ID of the workspace that contains the entity.</p>
    pub workspace_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the entity.</p>
    pub entity_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the entity.</p>
    pub entity_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the entity.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.</p>
    pub component_updates: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentUpdateRequest>>,
    /// <p>An object that describes the update request for a parent entity.</p>
    pub parent_entity_update: ::std::option::Option<crate::types::ParentEntityUpdateRequest>,
}
impl UpdateEntityInput {
    /// <p>The ID of the workspace that contains the entity.</p>
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>The ID of the entity.</p>
    pub fn entity_id(&self) -> ::std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The name of the entity.</p>
    pub fn entity_name(&self) -> ::std::option::Option<&str> {
        self.entity_name.as_deref()
    }
    /// <p>The description of the entity.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.</p>
    pub fn component_updates(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ComponentUpdateRequest>> {
        self.component_updates.as_ref()
    }
    /// <p>An object that describes the update request for a parent entity.</p>
    pub fn parent_entity_update(&self) -> ::std::option::Option<&crate::types::ParentEntityUpdateRequest> {
        self.parent_entity_update.as_ref()
    }
}
impl UpdateEntityInput {
    /// Creates a new builder-style object to manufacture [`UpdateEntityInput`](crate::operation::update_entity::UpdateEntityInput).
    pub fn builder() -> crate::operation::update_entity::builders::UpdateEntityInputBuilder {
        crate::operation::update_entity::builders::UpdateEntityInputBuilder::default()
    }
}

/// A builder for [`UpdateEntityInput`](crate::operation::update_entity::UpdateEntityInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateEntityInputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) component_updates: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentUpdateRequest>>,
    pub(crate) parent_entity_update: ::std::option::Option<crate::types::ParentEntityUpdateRequest>,
}
impl UpdateEntityInputBuilder {
    /// <p>The ID of the workspace that contains the entity.</p>
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workspace that contains the entity.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The ID of the workspace that contains the entity.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    /// <p>The ID of the entity.</p>
    /// This field is required.
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>The name of the entity.</p>
    pub fn entity_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the entity.</p>
    pub fn set_entity_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_name = input;
        self
    }
    /// <p>The name of the entity.</p>
    pub fn get_entity_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_name
    }
    /// <p>The description of the entity.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the entity.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the entity.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `component_updates`.
    ///
    /// To override the contents of this collection use [`set_component_updates`](Self::set_component_updates).
    ///
    /// <p>An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.</p>
    pub fn component_updates(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ComponentUpdateRequest) -> Self {
        let mut hash_map = self.component_updates.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.component_updates = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.</p>
    pub fn set_component_updates(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentUpdateRequest>>,
    ) -> Self {
        self.component_updates = input;
        self
    }
    /// <p>An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.</p>
    pub fn get_component_updates(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentUpdateRequest>> {
        &self.component_updates
    }
    /// <p>An object that describes the update request for a parent entity.</p>
    pub fn parent_entity_update(mut self, input: crate::types::ParentEntityUpdateRequest) -> Self {
        self.parent_entity_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that describes the update request for a parent entity.</p>
    pub fn set_parent_entity_update(mut self, input: ::std::option::Option<crate::types::ParentEntityUpdateRequest>) -> Self {
        self.parent_entity_update = input;
        self
    }
    /// <p>An object that describes the update request for a parent entity.</p>
    pub fn get_parent_entity_update(&self) -> &::std::option::Option<crate::types::ParentEntityUpdateRequest> {
        &self.parent_entity_update
    }
    /// Consumes the builder and constructs a [`UpdateEntityInput`](crate::operation::update_entity::UpdateEntityInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_entity::UpdateEntityInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_entity::UpdateEntityInput {
            workspace_id: self.workspace_id,
            entity_id: self.entity_id,
            entity_name: self.entity_name,
            description: self.description,
            component_updates: self.component_updates,
            parent_entity_update: self.parent_entity_update,
        })
    }
}
