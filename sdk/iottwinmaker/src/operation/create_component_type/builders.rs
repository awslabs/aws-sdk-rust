// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_component_type::_create_component_type_output::CreateComponentTypeOutputBuilder;

pub use crate::operation::create_component_type::_create_component_type_input::CreateComponentTypeInputBuilder;

impl crate::operation::create_component_type::builders::CreateComponentTypeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_component_type::CreateComponentTypeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_component_type::CreateComponentTypeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_component_type();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateComponentType`.
///
/// <p>Creates a component type.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateComponentTypeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_component_type::builders::CreateComponentTypeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_component_type::CreateComponentTypeOutput,
        crate::operation::create_component_type::CreateComponentTypeError,
    > for CreateComponentTypeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_component_type::CreateComponentTypeOutput,
            crate::operation::create_component_type::CreateComponentTypeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateComponentTypeFluentBuilder {
    /// Creates a new `CreateComponentType`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateComponentType as a reference.
    pub fn as_input(&self) -> &crate::operation::create_component_type::builders::CreateComponentTypeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_component_type::CreateComponentTypeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_component_type::CreateComponentTypeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_component_type::CreateComponentType::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_component_type::CreateComponentType::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_component_type::CreateComponentTypeOutput,
        crate::operation::create_component_type::CreateComponentTypeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the workspace that contains the component type.</p>
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.workspace_id(input.into());
        self
    }
    /// <p>The ID of the workspace that contains the component type.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_workspace_id(input);
        self
    }
    /// <p>The ID of the workspace that contains the component type.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_workspace_id()
    }
    /// <p>A Boolean value that specifies whether an entity can have more than one component of this type.</p>
    pub fn is_singleton(mut self, input: bool) -> Self {
        self.inner = self.inner.is_singleton(input);
        self
    }
    /// <p>A Boolean value that specifies whether an entity can have more than one component of this type.</p>
    pub fn set_is_singleton(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_singleton(input);
        self
    }
    /// <p>A Boolean value that specifies whether an entity can have more than one component of this type.</p>
    pub fn get_is_singleton(&self) -> &::std::option::Option<bool> {
        self.inner.get_is_singleton()
    }
    /// <p>The ID of the component type.</p>
    pub fn component_type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.component_type_id(input.into());
        self
    }
    /// <p>The ID of the component type.</p>
    pub fn set_component_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_component_type_id(input);
        self
    }
    /// <p>The ID of the component type.</p>
    pub fn get_component_type_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_component_type_id()
    }
    /// <p>The description of the component type.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the component type.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description of the component type.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    ///
    /// Adds a key-value pair to `propertyDefinitions`.
    ///
    /// To override the contents of this collection use [`set_property_definitions`](Self::set_property_definitions).
    ///
    /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn property_definitions(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::PropertyDefinitionRequest) -> Self {
        self.inner = self.inner.property_definitions(k.into(), v);
        self
    }
    /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn set_property_definitions(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PropertyDefinitionRequest>>,
    ) -> Self {
        self.inner = self.inner.set_property_definitions(input);
        self
    }
    /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn get_property_definitions(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PropertyDefinitionRequest>> {
        self.inner.get_property_definitions()
    }
    ///
    /// Appends an item to `extendsFrom`.
    ///
    /// To override the contents of this collection use [`set_extends_from`](Self::set_extends_from).
    ///
    /// <p>Specifies the parent component type to extend.</p>
    pub fn extends_from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.extends_from(input.into());
        self
    }
    /// <p>Specifies the parent component type to extend.</p>
    pub fn set_extends_from(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_extends_from(input);
        self
    }
    /// <p>Specifies the parent component type to extend.</p>
    pub fn get_extends_from(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_extends_from()
    }
    ///
    /// Adds a key-value pair to `functions`.
    ///
    /// To override the contents of this collection use [`set_functions`](Self::set_functions).
    ///
    /// <p>An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn functions(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::FunctionRequest) -> Self {
        self.inner = self.inner.functions(k.into(), v);
        self
    }
    /// <p>An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn set_functions(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FunctionRequest>>,
    ) -> Self {
        self.inner = self.inner.set_functions(input);
        self
    }
    /// <p>An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn get_functions(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FunctionRequest>> {
        self.inner.get_functions()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata that you can use to manage the component type.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Metadata that you can use to manage the component type.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Metadata that you can use to manage the component type.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    ///
    /// Adds a key-value pair to `propertyGroups`.
    ///
    /// To override the contents of this collection use [`set_property_groups`](Self::set_property_groups).
    ///
    /// <p></p>
    pub fn property_groups(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::PropertyGroupRequest) -> Self {
        self.inner = self.inner.property_groups(k.into(), v);
        self
    }
    /// <p></p>
    pub fn set_property_groups(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PropertyGroupRequest>>,
    ) -> Self {
        self.inner = self.inner.set_property_groups(input);
        self
    }
    /// <p></p>
    pub fn get_property_groups(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PropertyGroupRequest>> {
        self.inner.get_property_groups()
    }
    /// <p>A friendly name for the component type.</p>
    pub fn component_type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.component_type_name(input.into());
        self
    }
    /// <p>A friendly name for the component type.</p>
    pub fn set_component_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_component_type_name(input);
        self
    }
    /// <p>A friendly name for the component type.</p>
    pub fn get_component_type_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_component_type_name()
    }
    ///
    /// Adds a key-value pair to `compositeComponentTypes`.
    ///
    /// To override the contents of this collection use [`set_composite_component_types`](Self::set_composite_component_types).
    ///
    /// <p>This is an object that maps strings to <code>compositeComponentTypes</code> of the <code>componentType</code>. <code>CompositeComponentType</code> is referenced by <code>componentTypeId</code>.</p>
    pub fn composite_component_types(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::CompositeComponentTypeRequest,
    ) -> Self {
        self.inner = self.inner.composite_component_types(k.into(), v);
        self
    }
    /// <p>This is an object that maps strings to <code>compositeComponentTypes</code> of the <code>componentType</code>. <code>CompositeComponentType</code> is referenced by <code>componentTypeId</code>.</p>
    pub fn set_composite_component_types(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CompositeComponentTypeRequest>>,
    ) -> Self {
        self.inner = self.inner.set_composite_component_types(input);
        self
    }
    /// <p>This is an object that maps strings to <code>compositeComponentTypes</code> of the <code>componentType</code>. <code>CompositeComponentType</code> is referenced by <code>componentTypeId</code>.</p>
    pub fn get_composite_component_types(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CompositeComponentTypeRequest>> {
        self.inner.get_composite_component_types()
    }
}
