// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateComponentTypeInput {
    /// <p>The ID of the workspace that contains the component type.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>A Boolean value that specifies whether an entity can have more than one component of this type.</p>
    #[doc(hidden)]
    pub is_singleton: std::option::Option<bool>,
    /// <p>The ID of the component type.</p>
    #[doc(hidden)]
    pub component_type_id: std::option::Option<std::string::String>,
    /// <p>The description of the component type.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
    #[doc(hidden)]
    pub property_definitions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::PropertyDefinitionRequest>,
    >,
    /// <p>Specifies the parent component type to extend.</p>
    #[doc(hidden)]
    pub extends_from: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.</p>
    #[doc(hidden)]
    pub functions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::FunctionRequest>,
    >,
    /// <p>Metadata that you can use to manage the component type.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p></p>
    #[doc(hidden)]
    pub property_groups: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::PropertyGroupRequest>,
    >,
    /// <p>A friendly name for the component type.</p>
    #[doc(hidden)]
    pub component_type_name: std::option::Option<std::string::String>,
}
impl CreateComponentTypeInput {
    /// <p>The ID of the workspace that contains the component type.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>A Boolean value that specifies whether an entity can have more than one component of this type.</p>
    pub fn is_singleton(&self) -> std::option::Option<bool> {
        self.is_singleton
    }
    /// <p>The ID of the component type.</p>
    pub fn component_type_id(&self) -> std::option::Option<&str> {
        self.component_type_id.as_deref()
    }
    /// <p>The description of the component type.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn property_definitions(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::PropertyDefinitionRequest>,
    > {
        self.property_definitions.as_ref()
    }
    /// <p>Specifies the parent component type to extend.</p>
    pub fn extends_from(&self) -> std::option::Option<&[std::string::String]> {
        self.extends_from.as_deref()
    }
    /// <p>An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn functions(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::FunctionRequest>,
    > {
        self.functions.as_ref()
    }
    /// <p>Metadata that you can use to manage the component type.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p></p>
    pub fn property_groups(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::PropertyGroupRequest>,
    > {
        self.property_groups.as_ref()
    }
    /// <p>A friendly name for the component type.</p>
    pub fn component_type_name(&self) -> std::option::Option<&str> {
        self.component_type_name.as_deref()
    }
}
impl CreateComponentTypeInput {
    /// Creates a new builder-style object to manufacture [`CreateComponentTypeInput`](crate::operation::create_component_type::CreateComponentTypeInput).
    pub fn builder(
    ) -> crate::operation::create_component_type::builders::CreateComponentTypeInputBuilder {
        crate::operation::create_component_type::builders::CreateComponentTypeInputBuilder::default(
        )
    }
}

/// A builder for [`CreateComponentTypeInput`](crate::operation::create_component_type::CreateComponentTypeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateComponentTypeInputBuilder {
    pub(crate) workspace_id: std::option::Option<std::string::String>,
    pub(crate) is_singleton: std::option::Option<bool>,
    pub(crate) component_type_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) property_definitions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::PropertyDefinitionRequest>,
    >,
    pub(crate) extends_from: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) functions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::FunctionRequest>,
    >,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) property_groups: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::PropertyGroupRequest>,
    >,
    pub(crate) component_type_name: std::option::Option<std::string::String>,
}
impl CreateComponentTypeInputBuilder {
    /// <p>The ID of the workspace that contains the component type.</p>
    pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workspace_id = Some(input.into());
        self
    }
    /// <p>The ID of the workspace that contains the component type.</p>
    pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>A Boolean value that specifies whether an entity can have more than one component of this type.</p>
    pub fn is_singleton(mut self, input: bool) -> Self {
        self.is_singleton = Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether an entity can have more than one component of this type.</p>
    pub fn set_is_singleton(mut self, input: std::option::Option<bool>) -> Self {
        self.is_singleton = input;
        self
    }
    /// <p>The ID of the component type.</p>
    pub fn component_type_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_type_id = Some(input.into());
        self
    }
    /// <p>The ID of the component type.</p>
    pub fn set_component_type_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.component_type_id = input;
        self
    }
    /// <p>The description of the component type.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the component type.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Adds a key-value pair to `property_definitions`.
    ///
    /// To override the contents of this collection use [`set_property_definitions`](Self::set_property_definitions).
    ///
    /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn property_definitions(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::PropertyDefinitionRequest,
    ) -> Self {
        let mut hash_map = self.property_definitions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.property_definitions = Some(hash_map);
        self
    }
    /// <p>An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn set_property_definitions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::PropertyDefinitionRequest>,
        >,
    ) -> Self {
        self.property_definitions = input;
        self
    }
    /// Appends an item to `extends_from`.
    ///
    /// To override the contents of this collection use [`set_extends_from`](Self::set_extends_from).
    ///
    /// <p>Specifies the parent component type to extend.</p>
    pub fn extends_from(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.extends_from.unwrap_or_default();
        v.push(input.into());
        self.extends_from = Some(v);
        self
    }
    /// <p>Specifies the parent component type to extend.</p>
    pub fn set_extends_from(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.extends_from = input;
        self
    }
    /// Adds a key-value pair to `functions`.
    ///
    /// To override the contents of this collection use [`set_functions`](Self::set_functions).
    ///
    /// <p>An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn functions(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::FunctionRequest,
    ) -> Self {
        let mut hash_map = self.functions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.functions = Some(hash_map);
        self
    }
    /// <p>An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.</p>
    pub fn set_functions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::FunctionRequest>,
        >,
    ) -> Self {
        self.functions = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata that you can use to manage the component type.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Metadata that you can use to manage the component type.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Adds a key-value pair to `property_groups`.
    ///
    /// To override the contents of this collection use [`set_property_groups`](Self::set_property_groups).
    ///
    /// <p></p>
    pub fn property_groups(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::PropertyGroupRequest,
    ) -> Self {
        let mut hash_map = self.property_groups.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.property_groups = Some(hash_map);
        self
    }
    /// <p></p>
    pub fn set_property_groups(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::PropertyGroupRequest>,
        >,
    ) -> Self {
        self.property_groups = input;
        self
    }
    /// <p>A friendly name for the component type.</p>
    pub fn component_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_type_name = Some(input.into());
        self
    }
    /// <p>A friendly name for the component type.</p>
    pub fn set_component_type_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.component_type_name = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateComponentTypeInput`](crate::operation::create_component_type::CreateComponentTypeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_component_type::CreateComponentTypeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_component_type::CreateComponentTypeInput {
                workspace_id: self.workspace_id,
                is_singleton: self.is_singleton,
                component_type_id: self.component_type_id,
                description: self.description,
                property_definitions: self.property_definitions,
                extends_from: self.extends_from,
                functions: self.functions,
                tags: self.tags,
                property_groups: self.property_groups,
                component_type_name: self.component_type_name,
            },
        )
    }
}
