// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_property_definition_request(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PropertyDefinitionRequest,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.data_type {
        #[allow(unused_mut)]
        let mut object_2 = object.key("dataType").start_object();
        crate::protocol_serde::shape_data_type::ser_data_type(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.is_required_in_entity {
        object.key("isRequiredInEntity").boolean(*var_3);
    }
    if let Some(var_4) = &input.is_external_id {
        object.key("isExternalId").boolean(*var_4);
    }
    if let Some(var_5) = &input.is_stored_externally {
        object.key("isStoredExternally").boolean(*var_5);
    }
    if let Some(var_6) = &input.is_time_series {
        object.key("isTimeSeries").boolean(*var_6);
    }
    if let Some(var_7) = &input.default_value {
        #[allow(unused_mut)]
        let mut object_8 = object.key("defaultValue").start_object();
        crate::protocol_serde::shape_data_value::ser_data_value(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("configuration").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.display_name {
        object.key("displayName").string(var_13.as_str());
    }
    Ok(())
}
