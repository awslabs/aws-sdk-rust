// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_component_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_component_type::CreateComponentTypeInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.component_type_name {
        object.key("componentTypeName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.extends_from {
        let mut array_4 = object.key("extendsFrom").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.functions {
        #[allow(unused_mut)]
        let mut object_7 = object.key("functions").start_object();
        for (key_8, value_9) in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_10 = object_7.key(key_8.as_str()).start_object();
                crate::protocol_serde::shape_function_request::ser_function_request(
                    &mut object_10,
                    value_9,
                )?;
                object_10.finish();
            }
        }
        object_7.finish();
    }
    if let Some(var_11) = &input.is_singleton {
        object.key("isSingleton").boolean(*var_11);
    }
    if let Some(var_12) = &input.property_definitions {
        #[allow(unused_mut)]
        let mut object_13 = object.key("propertyDefinitions").start_object();
        for (key_14, value_15) in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_16 = object_13.key(key_14.as_str()).start_object();
                crate::protocol_serde::shape_property_definition_request::ser_property_definition_request(&mut object_16, value_15)?;
                object_16.finish();
            }
        }
        object_13.finish();
    }
    if let Some(var_17) = &input.property_groups {
        #[allow(unused_mut)]
        let mut object_18 = object.key("propertyGroups").start_object();
        for (key_19, value_20) in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_21 = object_18.key(key_19.as_str()).start_object();
                crate::protocol_serde::shape_property_group_request::ser_property_group_request(
                    &mut object_21,
                    value_20,
                )?;
                object_21.finish();
            }
        }
        object_18.finish();
    }
    if let Some(var_22) = &input.tags {
        #[allow(unused_mut)]
        let mut object_23 = object.key("tags").start_object();
        for (key_24, value_25) in var_22 {
            {
                object_23.key(key_24.as_str()).string(value_25.as_str());
            }
        }
        object_23.finish();
    }
    Ok(())
}
