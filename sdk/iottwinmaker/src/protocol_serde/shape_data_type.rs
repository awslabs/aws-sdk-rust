// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_data_type(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::DataType,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("type").string(input.r#type.as_str());
    }
    if let Some(var_1) = &input.nested_type {
        #[allow(unused_mut)]
        let mut object_2 = object.key("nestedType").start_object();
        crate::protocol_serde::shape_data_type::ser_data_type(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.allowed_values {
        let mut array_4 = object.key("allowedValues").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_data_value::ser_data_value(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.unit_of_measure {
        object.key("unitOfMeasure").string(var_7.as_str());
    }
    if let Some(var_8) = &input.relationship {
        #[allow(unused_mut)]
        let mut object_9 = object.key("relationship").start_object();
        crate::protocol_serde::shape_relationship::ser_relationship(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}

pub(crate) fn de_data_type<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::DataType>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DataTypeBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "type" => {
                            builder = builder.set_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Type::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "nestedType" => {
                            builder = builder.set_nested_type(crate::protocol_serde::shape_data_type::de_data_type(tokens)?.map(Box::new));
                        }
                        "allowedValues" => {
                            builder = builder.set_allowed_values(crate::protocol_serde::shape_data_value_list::de_data_value_list(tokens)?);
                        }
                        "unitOfMeasure" => {
                            builder = builder.set_unit_of_measure(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "relationship" => {
                            builder = builder.set_relationship(crate::protocol_serde::shape_relationship::de_relationship(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::data_type_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
