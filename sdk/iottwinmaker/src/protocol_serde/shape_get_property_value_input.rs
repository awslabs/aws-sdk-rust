// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_property_value_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_property_value::GetPropertyValueInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.component_name {
        object.key("componentName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.component_type_id {
        object.key("componentTypeId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.entity_id {
        object.key("entityId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.next_token {
        object.key("nextToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.property_group_name {
        object.key("propertyGroupName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.selected_properties {
        let mut array_8 = object.key("selectedProperties").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.tabular_conditions {
        #[allow(unused_mut)]
        let mut object_11 = object.key("tabularConditions").start_object();
        crate::protocol_serde::shape_tabular_conditions::ser_tabular_conditions(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    Ok(())
}
