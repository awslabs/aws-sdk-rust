// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter criteria that orders the return output. It can be sorted in ascending or descending order.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OrderBy {
    /// <p>The set order that filters results.</p>
    #[doc(hidden)]
    pub order: std::option::Option<crate::types::Order>,
    /// <p>The property name.</p>
    #[doc(hidden)]
    pub property_name: std::option::Option<std::string::String>,
}
impl OrderBy {
    /// <p>The set order that filters results.</p>
    pub fn order(&self) -> std::option::Option<&crate::types::Order> {
        self.order.as_ref()
    }
    /// <p>The property name.</p>
    pub fn property_name(&self) -> std::option::Option<&str> {
        self.property_name.as_deref()
    }
}
impl OrderBy {
    /// Creates a new builder-style object to manufacture [`OrderBy`](crate::types::OrderBy).
    pub fn builder() -> crate::types::builders::OrderByBuilder {
        crate::types::builders::OrderByBuilder::default()
    }
}

/// A builder for [`OrderBy`](crate::types::OrderBy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OrderByBuilder {
    pub(crate) order: std::option::Option<crate::types::Order>,
    pub(crate) property_name: std::option::Option<std::string::String>,
}
impl OrderByBuilder {
    /// <p>The set order that filters results.</p>
    pub fn order(mut self, input: crate::types::Order) -> Self {
        self.order = Some(input);
        self
    }
    /// <p>The set order that filters results.</p>
    pub fn set_order(mut self, input: std::option::Option<crate::types::Order>) -> Self {
        self.order = input;
        self
    }
    /// <p>The property name.</p>
    pub fn property_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.property_name = Some(input.into());
        self
    }
    /// <p>The property name.</p>
    pub fn set_property_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.property_name = input;
        self
    }
    /// Consumes the builder and constructs a [`OrderBy`](crate::types::OrderBy).
    pub fn build(self) -> crate::types::OrderBy {
        crate::types::OrderBy {
            order: self.order,
            property_name: self.property_name,
        }
    }
}
