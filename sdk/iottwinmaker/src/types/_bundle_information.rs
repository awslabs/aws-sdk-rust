// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the pricing bundle.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BundleInformation {
    /// <p>The bundle names.</p>
    pub bundle_names: ::std::vec::Vec<::std::string::String>,
    /// <p>The pricing tier.</p>
    pub pricing_tier: ::std::option::Option<crate::types::PricingTier>,
}
impl BundleInformation {
    /// <p>The bundle names.</p>
    pub fn bundle_names(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.bundle_names.deref()
    }
    /// <p>The pricing tier.</p>
    pub fn pricing_tier(&self) -> ::std::option::Option<&crate::types::PricingTier> {
        self.pricing_tier.as_ref()
    }
}
impl BundleInformation {
    /// Creates a new builder-style object to manufacture [`BundleInformation`](crate::types::BundleInformation).
    pub fn builder() -> crate::types::builders::BundleInformationBuilder {
        crate::types::builders::BundleInformationBuilder::default()
    }
}

/// A builder for [`BundleInformation`](crate::types::BundleInformation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BundleInformationBuilder {
    pub(crate) bundle_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) pricing_tier: ::std::option::Option<crate::types::PricingTier>,
}
impl BundleInformationBuilder {
    /// Appends an item to `bundle_names`.
    ///
    /// To override the contents of this collection use [`set_bundle_names`](Self::set_bundle_names).
    ///
    /// <p>The bundle names.</p>
    pub fn bundle_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.bundle_names.unwrap_or_default();
        v.push(input.into());
        self.bundle_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The bundle names.</p>
    pub fn set_bundle_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.bundle_names = input;
        self
    }
    /// <p>The bundle names.</p>
    pub fn get_bundle_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.bundle_names
    }
    /// <p>The pricing tier.</p>
    pub fn pricing_tier(mut self, input: crate::types::PricingTier) -> Self {
        self.pricing_tier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The pricing tier.</p>
    pub fn set_pricing_tier(mut self, input: ::std::option::Option<crate::types::PricingTier>) -> Self {
        self.pricing_tier = input;
        self
    }
    /// <p>The pricing tier.</p>
    pub fn get_pricing_tier(&self) -> &::std::option::Option<crate::types::PricingTier> {
        &self.pricing_tier
    }
    /// Consumes the builder and constructs a [`BundleInformation`](crate::types::BundleInformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`bundle_names`](crate::types::builders::BundleInformationBuilder::bundle_names)
    pub fn build(self) -> ::std::result::Result<crate::types::BundleInformation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BundleInformation {
            bundle_names: self.bundle_names.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bundle_names",
                    "bundle_names was not specified but it is required when building BundleInformation",
                )
            })?,
            pricing_tier: self.pricing_tier,
        })
    }
}
