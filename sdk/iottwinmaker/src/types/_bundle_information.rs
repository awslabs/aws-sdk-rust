// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about pricing bundle.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BundleInformation {
    /// <p>The bundle names.</p>
    #[doc(hidden)]
    pub bundle_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The pricing tier.</p>
    #[doc(hidden)]
    pub pricing_tier: std::option::Option<crate::types::PricingTier>,
}
impl BundleInformation {
    /// <p>The bundle names.</p>
    pub fn bundle_names(&self) -> std::option::Option<&[std::string::String]> {
        self.bundle_names.as_deref()
    }
    /// <p>The pricing tier.</p>
    pub fn pricing_tier(&self) -> std::option::Option<&crate::types::PricingTier> {
        self.pricing_tier.as_ref()
    }
}
impl BundleInformation {
    /// Creates a new builder-style object to manufacture [`BundleInformation`](crate::types::BundleInformation).
    pub fn builder() -> crate::types::builders::BundleInformationBuilder {
        crate::types::builders::BundleInformationBuilder::default()
    }
}

/// A builder for [`BundleInformation`](crate::types::BundleInformation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BundleInformationBuilder {
    pub(crate) bundle_names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) pricing_tier: std::option::Option<crate::types::PricingTier>,
}
impl BundleInformationBuilder {
    /// Appends an item to `bundle_names`.
    ///
    /// To override the contents of this collection use [`set_bundle_names`](Self::set_bundle_names).
    ///
    /// <p>The bundle names.</p>
    pub fn bundle_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.bundle_names.unwrap_or_default();
        v.push(input.into());
        self.bundle_names = Some(v);
        self
    }
    /// <p>The bundle names.</p>
    pub fn set_bundle_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.bundle_names = input;
        self
    }
    /// <p>The pricing tier.</p>
    pub fn pricing_tier(mut self, input: crate::types::PricingTier) -> Self {
        self.pricing_tier = Some(input);
        self
    }
    /// <p>The pricing tier.</p>
    pub fn set_pricing_tier(
        mut self,
        input: std::option::Option<crate::types::PricingTier>,
    ) -> Self {
        self.pricing_tier = input;
        self
    }
    /// Consumes the builder and constructs a [`BundleInformation`](crate::types::BundleInformation).
    pub fn build(self) -> crate::types::BundleInformation {
        crate::types::BundleInformation {
            bundle_names: self.bundle_names,
            pricing_tier: self.pricing_tier,
        }
    }
}
