// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information about a value for a time series property.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PropertyValue {
    /// <p>The timestamp of a value for a time series property.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use time instead.")]
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An object that specifies a value for a time series property.</p>
    pub value: ::std::option::Option<crate::types::DataValue>,
    /// <p>ISO8601 DateTime of a value for a time series property.</p>
    /// <p>The time for when the property value was recorded in ISO 8601 format: <i>YYYY-MM-DDThh:mm:ss[.SSSSSSSSS][Z/±HH:mm]</i>.</p>
    /// <ul>
    /// <li> <p> <i>[YYYY]</i>: year</p> </li>
    /// <li> <p> <i>[MM]</i>: month</p> </li>
    /// <li> <p> <i>[DD]</i>: day</p> </li>
    /// <li> <p> <i>[hh]</i>: hour</p> </li>
    /// <li> <p> <i>[mm]</i>: minute</p> </li>
    /// <li> <p> <i>[ss]</i>: seconds</p> </li>
    /// <li> <p> <i>[.SSSSSSSSS]</i>: additional precision, where precedence is maintained. For example: [.573123] is equal to 573123000 nanoseconds.</p> </li>
    /// <li> <p> <i>Z</i>: default timezone UTC</p> </li>
    /// <li> <p> <i>± HH:mm</i>: time zone offset in Hours and Minutes.</p> </li>
    /// </ul>
    /// <p> <i>Required sub-fields</i>: YYYY-MM-DDThh:mm:ss and [Z/±HH:mm]</p>
    pub time: ::std::option::Option<::std::string::String>,
}
impl PropertyValue {
    /// <p>The timestamp of a value for a time series property.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use time instead.")]
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>An object that specifies a value for a time series property.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::DataValue> {
        self.value.as_ref()
    }
    /// <p>ISO8601 DateTime of a value for a time series property.</p>
    /// <p>The time for when the property value was recorded in ISO 8601 format: <i>YYYY-MM-DDThh:mm:ss[.SSSSSSSSS][Z/±HH:mm]</i>.</p>
    /// <ul>
    /// <li> <p> <i>[YYYY]</i>: year</p> </li>
    /// <li> <p> <i>[MM]</i>: month</p> </li>
    /// <li> <p> <i>[DD]</i>: day</p> </li>
    /// <li> <p> <i>[hh]</i>: hour</p> </li>
    /// <li> <p> <i>[mm]</i>: minute</p> </li>
    /// <li> <p> <i>[ss]</i>: seconds</p> </li>
    /// <li> <p> <i>[.SSSSSSSSS]</i>: additional precision, where precedence is maintained. For example: [.573123] is equal to 573123000 nanoseconds.</p> </li>
    /// <li> <p> <i>Z</i>: default timezone UTC</p> </li>
    /// <li> <p> <i>± HH:mm</i>: time zone offset in Hours and Minutes.</p> </li>
    /// </ul>
    /// <p> <i>Required sub-fields</i>: YYYY-MM-DDThh:mm:ss and [Z/±HH:mm]</p>
    pub fn time(&self) -> ::std::option::Option<&str> {
        self.time.as_deref()
    }
}
impl PropertyValue {
    /// Creates a new builder-style object to manufacture [`PropertyValue`](crate::types::PropertyValue).
    pub fn builder() -> crate::types::builders::PropertyValueBuilder {
        crate::types::builders::PropertyValueBuilder::default()
    }
}

/// A builder for [`PropertyValue`](crate::types::PropertyValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PropertyValueBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) value: ::std::option::Option<crate::types::DataValue>,
    pub(crate) time: ::std::option::Option<::std::string::String>,
}
impl PropertyValueBuilder {
    /// <p>The timestamp of a value for a time series property.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use time instead.")]
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of a value for a time series property.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use time instead.")]
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The timestamp of a value for a time series property.</p>
    #[deprecated(note = "This field is deprecated and will throw an error in the future. Use time instead.")]
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>An object that specifies a value for a time series property.</p>
    /// This field is required.
    pub fn value(mut self, input: crate::types::DataValue) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that specifies a value for a time series property.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::DataValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>An object that specifies a value for a time series property.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::DataValue> {
        &self.value
    }
    /// <p>ISO8601 DateTime of a value for a time series property.</p>
    /// <p>The time for when the property value was recorded in ISO 8601 format: <i>YYYY-MM-DDThh:mm:ss[.SSSSSSSSS][Z/±HH:mm]</i>.</p>
    /// <ul>
    /// <li> <p> <i>[YYYY]</i>: year</p> </li>
    /// <li> <p> <i>[MM]</i>: month</p> </li>
    /// <li> <p> <i>[DD]</i>: day</p> </li>
    /// <li> <p> <i>[hh]</i>: hour</p> </li>
    /// <li> <p> <i>[mm]</i>: minute</p> </li>
    /// <li> <p> <i>[ss]</i>: seconds</p> </li>
    /// <li> <p> <i>[.SSSSSSSSS]</i>: additional precision, where precedence is maintained. For example: [.573123] is equal to 573123000 nanoseconds.</p> </li>
    /// <li> <p> <i>Z</i>: default timezone UTC</p> </li>
    /// <li> <p> <i>± HH:mm</i>: time zone offset in Hours and Minutes.</p> </li>
    /// </ul>
    /// <p> <i>Required sub-fields</i>: YYYY-MM-DDThh:mm:ss and [Z/±HH:mm]</p>
    pub fn time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ISO8601 DateTime of a value for a time series property.</p>
    /// <p>The time for when the property value was recorded in ISO 8601 format: <i>YYYY-MM-DDThh:mm:ss[.SSSSSSSSS][Z/±HH:mm]</i>.</p>
    /// <ul>
    /// <li> <p> <i>[YYYY]</i>: year</p> </li>
    /// <li> <p> <i>[MM]</i>: month</p> </li>
    /// <li> <p> <i>[DD]</i>: day</p> </li>
    /// <li> <p> <i>[hh]</i>: hour</p> </li>
    /// <li> <p> <i>[mm]</i>: minute</p> </li>
    /// <li> <p> <i>[ss]</i>: seconds</p> </li>
    /// <li> <p> <i>[.SSSSSSSSS]</i>: additional precision, where precedence is maintained. For example: [.573123] is equal to 573123000 nanoseconds.</p> </li>
    /// <li> <p> <i>Z</i>: default timezone UTC</p> </li>
    /// <li> <p> <i>± HH:mm</i>: time zone offset in Hours and Minutes.</p> </li>
    /// </ul>
    /// <p> <i>Required sub-fields</i>: YYYY-MM-DDThh:mm:ss and [Z/±HH:mm]</p>
    pub fn set_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time = input;
        self
    }
    /// <p>ISO8601 DateTime of a value for a time series property.</p>
    /// <p>The time for when the property value was recorded in ISO 8601 format: <i>YYYY-MM-DDThh:mm:ss[.SSSSSSSSS][Z/±HH:mm]</i>.</p>
    /// <ul>
    /// <li> <p> <i>[YYYY]</i>: year</p> </li>
    /// <li> <p> <i>[MM]</i>: month</p> </li>
    /// <li> <p> <i>[DD]</i>: day</p> </li>
    /// <li> <p> <i>[hh]</i>: hour</p> </li>
    /// <li> <p> <i>[mm]</i>: minute</p> </li>
    /// <li> <p> <i>[ss]</i>: seconds</p> </li>
    /// <li> <p> <i>[.SSSSSSSSS]</i>: additional precision, where precedence is maintained. For example: [.573123] is equal to 573123000 nanoseconds.</p> </li>
    /// <li> <p> <i>Z</i>: default timezone UTC</p> </li>
    /// <li> <p> <i>± HH:mm</i>: time zone offset in Hours and Minutes.</p> </li>
    /// </ul>
    /// <p> <i>Required sub-fields</i>: YYYY-MM-DDThh:mm:ss and [Z/±HH:mm]</p>
    pub fn get_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.time
    }
    /// Consumes the builder and constructs a [`PropertyValue`](crate::types::PropertyValue).
    pub fn build(self) -> crate::types::PropertyValue {
        crate::types::PropertyValue {
            timestamp: self.timestamp,
            value: self.value,
            time: self.time,
        }
    }
}
