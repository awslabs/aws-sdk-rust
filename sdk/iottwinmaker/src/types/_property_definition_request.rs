// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that sets information about a property.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PropertyDefinitionRequest {
    /// <p>An object that contains information about the data type.</p>
    #[doc(hidden)]
    pub data_type: std::option::Option<crate::types::DataType>,
    /// <p>A Boolean value that specifies whether the property is required.</p>
    #[doc(hidden)]
    pub is_required_in_entity: std::option::Option<bool>,
    /// <p>A Boolean value that specifies whether the property ID comes from an external data store.</p>
    #[doc(hidden)]
    pub is_external_id: std::option::Option<bool>,
    /// <p>A Boolean value that specifies whether the property is stored externally.</p>
    #[doc(hidden)]
    pub is_stored_externally: std::option::Option<bool>,
    /// <p>A Boolean value that specifies whether the property consists of time series data.</p>
    #[doc(hidden)]
    pub is_time_series: std::option::Option<bool>,
    /// <p>An object that contains the default value.</p>
    #[doc(hidden)]
    pub default_value: std::option::Option<crate::types::DataValue>,
    /// <p>A mapping that specifies configuration information about the property. Use this field to specify information that you read from and write to an external source.</p>
    #[doc(hidden)]
    pub configuration:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A friendly name for the property.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
}
impl PropertyDefinitionRequest {
    /// <p>An object that contains information about the data type.</p>
    pub fn data_type(&self) -> std::option::Option<&crate::types::DataType> {
        self.data_type.as_ref()
    }
    /// <p>A Boolean value that specifies whether the property is required.</p>
    pub fn is_required_in_entity(&self) -> std::option::Option<bool> {
        self.is_required_in_entity
    }
    /// <p>A Boolean value that specifies whether the property ID comes from an external data store.</p>
    pub fn is_external_id(&self) -> std::option::Option<bool> {
        self.is_external_id
    }
    /// <p>A Boolean value that specifies whether the property is stored externally.</p>
    pub fn is_stored_externally(&self) -> std::option::Option<bool> {
        self.is_stored_externally
    }
    /// <p>A Boolean value that specifies whether the property consists of time series data.</p>
    pub fn is_time_series(&self) -> std::option::Option<bool> {
        self.is_time_series
    }
    /// <p>An object that contains the default value.</p>
    pub fn default_value(&self) -> std::option::Option<&crate::types::DataValue> {
        self.default_value.as_ref()
    }
    /// <p>A mapping that specifies configuration information about the property. Use this field to specify information that you read from and write to an external source.</p>
    pub fn configuration(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.configuration.as_ref()
    }
    /// <p>A friendly name for the property.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
}
impl PropertyDefinitionRequest {
    /// Creates a new builder-style object to manufacture [`PropertyDefinitionRequest`](crate::types::PropertyDefinitionRequest).
    pub fn builder() -> crate::types::builders::PropertyDefinitionRequestBuilder {
        crate::types::builders::PropertyDefinitionRequestBuilder::default()
    }
}

/// A builder for [`PropertyDefinitionRequest`](crate::types::PropertyDefinitionRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PropertyDefinitionRequestBuilder {
    pub(crate) data_type: std::option::Option<crate::types::DataType>,
    pub(crate) is_required_in_entity: std::option::Option<bool>,
    pub(crate) is_external_id: std::option::Option<bool>,
    pub(crate) is_stored_externally: std::option::Option<bool>,
    pub(crate) is_time_series: std::option::Option<bool>,
    pub(crate) default_value: std::option::Option<crate::types::DataValue>,
    pub(crate) configuration:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) display_name: std::option::Option<std::string::String>,
}
impl PropertyDefinitionRequestBuilder {
    /// <p>An object that contains information about the data type.</p>
    pub fn data_type(mut self, input: crate::types::DataType) -> Self {
        self.data_type = Some(input);
        self
    }
    /// <p>An object that contains information about the data type.</p>
    pub fn set_data_type(mut self, input: std::option::Option<crate::types::DataType>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>A Boolean value that specifies whether the property is required.</p>
    pub fn is_required_in_entity(mut self, input: bool) -> Self {
        self.is_required_in_entity = Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether the property is required.</p>
    pub fn set_is_required_in_entity(mut self, input: std::option::Option<bool>) -> Self {
        self.is_required_in_entity = input;
        self
    }
    /// <p>A Boolean value that specifies whether the property ID comes from an external data store.</p>
    pub fn is_external_id(mut self, input: bool) -> Self {
        self.is_external_id = Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether the property ID comes from an external data store.</p>
    pub fn set_is_external_id(mut self, input: std::option::Option<bool>) -> Self {
        self.is_external_id = input;
        self
    }
    /// <p>A Boolean value that specifies whether the property is stored externally.</p>
    pub fn is_stored_externally(mut self, input: bool) -> Self {
        self.is_stored_externally = Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether the property is stored externally.</p>
    pub fn set_is_stored_externally(mut self, input: std::option::Option<bool>) -> Self {
        self.is_stored_externally = input;
        self
    }
    /// <p>A Boolean value that specifies whether the property consists of time series data.</p>
    pub fn is_time_series(mut self, input: bool) -> Self {
        self.is_time_series = Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether the property consists of time series data.</p>
    pub fn set_is_time_series(mut self, input: std::option::Option<bool>) -> Self {
        self.is_time_series = input;
        self
    }
    /// <p>An object that contains the default value.</p>
    pub fn default_value(mut self, input: crate::types::DataValue) -> Self {
        self.default_value = Some(input);
        self
    }
    /// <p>An object that contains the default value.</p>
    pub fn set_default_value(
        mut self,
        input: std::option::Option<crate::types::DataValue>,
    ) -> Self {
        self.default_value = input;
        self
    }
    /// Adds a key-value pair to `configuration`.
    ///
    /// To override the contents of this collection use [`set_configuration`](Self::set_configuration).
    ///
    /// <p>A mapping that specifies configuration information about the property. Use this field to specify information that you read from and write to an external source.</p>
    pub fn configuration(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.configuration.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.configuration = Some(hash_map);
        self
    }
    /// <p>A mapping that specifies configuration information about the property. Use this field to specify information that you read from and write to an external source.</p>
    pub fn set_configuration(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.configuration = input;
        self
    }
    /// <p>A friendly name for the property.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>A friendly name for the property.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// Consumes the builder and constructs a [`PropertyDefinitionRequest`](crate::types::PropertyDefinitionRequest).
    pub fn build(self) -> crate::types::PropertyDefinitionRequest {
        crate::types::PropertyDefinitionRequest {
            data_type: self.data_type,
            is_required_in_entity: self.is_required_in_entity,
            is_external_id: self.is_external_id,
            is_stored_externally: self.is_stored_externally,
            is_time_series: self.is_time_series,
            default_value: self.default_value,
            configuration: self.configuration,
            display_name: self.display_name,
        }
    }
}
