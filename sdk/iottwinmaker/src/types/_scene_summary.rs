// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information about a scene.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SceneSummary {
    /// <p>The ID of the scene.</p>
    pub scene_id: ::std::string::String,
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub content_location: ::std::string::String,
    /// <p>The ARN of the scene.</p>
    pub arn: ::std::string::String,
    /// <p>The date and time when the scene was created.</p>
    pub creation_date_time: ::aws_smithy_types::DateTime,
    /// <p>The date and time when the scene was last updated.</p>
    pub update_date_time: ::aws_smithy_types::DateTime,
    /// <p>The scene description.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl SceneSummary {
    /// <p>The ID of the scene.</p>
    pub fn scene_id(&self) -> &str {
        use std::ops::Deref;
        self.scene_id.deref()
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub fn content_location(&self) -> &str {
        use std::ops::Deref;
        self.content_location.deref()
    }
    /// <p>The ARN of the scene.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The date and time when the scene was created.</p>
    pub fn creation_date_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_date_time
    }
    /// <p>The date and time when the scene was last updated.</p>
    pub fn update_date_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_date_time
    }
    /// <p>The scene description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl SceneSummary {
    /// Creates a new builder-style object to manufacture [`SceneSummary`](crate::types::SceneSummary).
    pub fn builder() -> crate::types::builders::SceneSummaryBuilder {
        crate::types::builders::SceneSummaryBuilder::default()
    }
}

/// A builder for [`SceneSummary`](crate::types::SceneSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SceneSummaryBuilder {
    pub(crate) scene_id: ::std::option::Option<::std::string::String>,
    pub(crate) content_location: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl SceneSummaryBuilder {
    /// <p>The ID of the scene.</p>
    /// This field is required.
    pub fn scene_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scene_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the scene.</p>
    pub fn set_scene_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scene_id = input;
        self
    }
    /// <p>The ID of the scene.</p>
    pub fn get_scene_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.scene_id
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    /// This field is required.
    pub fn content_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub fn set_content_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_location = input;
        self
    }
    /// <p>The relative path that specifies the location of the content definition file.</p>
    pub fn get_content_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_location
    }
    /// <p>The ARN of the scene.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the scene.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the scene.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The date and time when the scene was created.</p>
    /// This field is required.
    pub fn creation_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the scene was created.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The date and time when the scene was created.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date_time
    }
    /// <p>The date and time when the scene was last updated.</p>
    /// This field is required.
    pub fn update_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the scene was last updated.</p>
    pub fn set_update_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_date_time = input;
        self
    }
    /// <p>The date and time when the scene was last updated.</p>
    pub fn get_update_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_date_time
    }
    /// <p>The scene description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The scene description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The scene description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`SceneSummary`](crate::types::SceneSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`scene_id`](crate::types::builders::SceneSummaryBuilder::scene_id)
    /// - [`content_location`](crate::types::builders::SceneSummaryBuilder::content_location)
    /// - [`arn`](crate::types::builders::SceneSummaryBuilder::arn)
    /// - [`creation_date_time`](crate::types::builders::SceneSummaryBuilder::creation_date_time)
    /// - [`update_date_time`](crate::types::builders::SceneSummaryBuilder::update_date_time)
    pub fn build(self) -> ::std::result::Result<crate::types::SceneSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SceneSummary {
            scene_id: self.scene_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scene_id",
                    "scene_id was not specified but it is required when building SceneSummary",
                )
            })?,
            content_location: self.content_location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_location",
                    "content_location was not specified but it is required when building SceneSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building SceneSummary",
                )
            })?,
            creation_date_time: self.creation_date_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_date_time",
                    "creation_date_time was not specified but it is required when building SceneSummary",
                )
            })?,
            update_date_time: self.update_date_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_date_time",
                    "update_date_time was not specified but it is required when building SceneSummary",
                )
            })?,
            description: self.description,
        })
    }
}
