// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that uniquely identifies an entity property.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EntityPropertyReference {
    /// <p>The name of the component.</p>
    pub component_name: ::std::option::Option<::std::string::String>,
    /// <p>A mapping of external IDs to property names. External IDs uniquely identify properties from external data stores.</p>
    pub external_id_property: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The ID of the entity.</p>
    pub entity_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the property.</p>
    pub property_name: ::std::string::String,
}
impl EntityPropertyReference {
    /// <p>The name of the component.</p>
    pub fn component_name(&self) -> ::std::option::Option<&str> {
        self.component_name.as_deref()
    }
    /// <p>A mapping of external IDs to property names. External IDs uniquely identify properties from external data stores.</p>
    pub fn external_id_property(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.external_id_property.as_ref()
    }
    /// <p>The ID of the entity.</p>
    pub fn entity_id(&self) -> ::std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The name of the property.</p>
    pub fn property_name(&self) -> &str {
        use std::ops::Deref;
        self.property_name.deref()
    }
}
impl EntityPropertyReference {
    /// Creates a new builder-style object to manufacture [`EntityPropertyReference`](crate::types::EntityPropertyReference).
    pub fn builder() -> crate::types::builders::EntityPropertyReferenceBuilder {
        crate::types::builders::EntityPropertyReferenceBuilder::default()
    }
}

/// A builder for [`EntityPropertyReference`](crate::types::EntityPropertyReference).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EntityPropertyReferenceBuilder {
    pub(crate) component_name: ::std::option::Option<::std::string::String>,
    pub(crate) external_id_property: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) property_name: ::std::option::Option<::std::string::String>,
}
impl EntityPropertyReferenceBuilder {
    /// <p>The name of the component.</p>
    pub fn component_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the component.</p>
    pub fn set_component_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_name = input;
        self
    }
    /// <p>The name of the component.</p>
    pub fn get_component_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_name
    }
    /// Adds a key-value pair to `external_id_property`.
    ///
    /// To override the contents of this collection use [`set_external_id_property`](Self::set_external_id_property).
    ///
    /// <p>A mapping of external IDs to property names. External IDs uniquely identify properties from external data stores.</p>
    pub fn external_id_property(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.external_id_property.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.external_id_property = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A mapping of external IDs to property names. External IDs uniquely identify properties from external data stores.</p>
    pub fn set_external_id_property(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.external_id_property = input;
        self
    }
    /// <p>A mapping of external IDs to property names. External IDs uniquely identify properties from external data stores.</p>
    pub fn get_external_id_property(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.external_id_property
    }
    /// <p>The ID of the entity.</p>
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>The name of the property.</p>
    /// This field is required.
    pub fn property_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the property.</p>
    pub fn set_property_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property_name = input;
        self
    }
    /// <p>The name of the property.</p>
    pub fn get_property_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.property_name
    }
    /// Consumes the builder and constructs a [`EntityPropertyReference`](crate::types::EntityPropertyReference).
    /// This method will fail if any of the following fields are not set:
    /// - [`property_name`](crate::types::builders::EntityPropertyReferenceBuilder::property_name)
    pub fn build(self) -> ::std::result::Result<crate::types::EntityPropertyReference, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EntityPropertyReference {
            component_name: self.component_name,
            external_id_property: self.external_id_property,
            entity_id: self.entity_id,
            property_name: self.property_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "property_name",
                    "property_name was not specified but it is required when building EntityPropertyReference",
                )
            })?,
        })
    }
}
