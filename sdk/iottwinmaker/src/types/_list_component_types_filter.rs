// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that filters items in a list of component types.</p> <note>
/// <p>Only one object is accepted as a valid input.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum ListComponentTypesFilter {
    /// <p>The component type that the component types in the list extend.</p>
    ExtendsFrom(std::string::String),
    /// <p>A Boolean value that specifies whether the component types in the list are abstract.</p>
    IsAbstract(bool),
    /// <p>The namespace to which the component types in the list belong.</p>
    Namespace(std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ListComponentTypesFilter {
    /// Tries to convert the enum instance into [`ExtendsFrom`](crate::types::ListComponentTypesFilter::ExtendsFrom), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_extends_from(&self) -> std::result::Result<&std::string::String, &Self> {
        if let ListComponentTypesFilter::ExtendsFrom(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ExtendsFrom`](crate::types::ListComponentTypesFilter::ExtendsFrom).
    pub fn is_extends_from(&self) -> bool {
        self.as_extends_from().is_ok()
    }
    /// Tries to convert the enum instance into [`IsAbstract`](crate::types::ListComponentTypesFilter::IsAbstract), extracting the inner [`bool`](bool).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_is_abstract(&self) -> std::result::Result<&bool, &Self> {
        if let ListComponentTypesFilter::IsAbstract(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`IsAbstract`](crate::types::ListComponentTypesFilter::IsAbstract).
    pub fn is_is_abstract(&self) -> bool {
        self.as_is_abstract().is_ok()
    }
    /// Tries to convert the enum instance into [`Namespace`](crate::types::ListComponentTypesFilter::Namespace), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_namespace(&self) -> std::result::Result<&std::string::String, &Self> {
        if let ListComponentTypesFilter::Namespace(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Namespace`](crate::types::ListComponentTypesFilter::Namespace).
    pub fn is_namespace(&self) -> bool {
        self.as_namespace().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
