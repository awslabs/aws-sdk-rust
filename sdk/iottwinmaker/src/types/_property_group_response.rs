// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The property group response</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PropertyGroupResponse {
    /// <p>The group types.</p>
    pub group_type: crate::types::GroupType,
    /// <p>The names of properties.</p>
    pub property_names: ::std::vec::Vec<::std::string::String>,
    /// <p>A Boolean value that specifies whether the property group is inherited from a parent entity</p>
    pub is_inherited: bool,
}
impl PropertyGroupResponse {
    /// <p>The group types.</p>
    pub fn group_type(&self) -> &crate::types::GroupType {
        &self.group_type
    }
    /// <p>The names of properties.</p>
    pub fn property_names(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.property_names.deref()
    }
    /// <p>A Boolean value that specifies whether the property group is inherited from a parent entity</p>
    pub fn is_inherited(&self) -> bool {
        self.is_inherited
    }
}
impl PropertyGroupResponse {
    /// Creates a new builder-style object to manufacture [`PropertyGroupResponse`](crate::types::PropertyGroupResponse).
    pub fn builder() -> crate::types::builders::PropertyGroupResponseBuilder {
        crate::types::builders::PropertyGroupResponseBuilder::default()
    }
}

/// A builder for [`PropertyGroupResponse`](crate::types::PropertyGroupResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PropertyGroupResponseBuilder {
    pub(crate) group_type: ::std::option::Option<crate::types::GroupType>,
    pub(crate) property_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) is_inherited: ::std::option::Option<bool>,
}
impl PropertyGroupResponseBuilder {
    /// <p>The group types.</p>
    /// This field is required.
    pub fn group_type(mut self, input: crate::types::GroupType) -> Self {
        self.group_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The group types.</p>
    pub fn set_group_type(mut self, input: ::std::option::Option<crate::types::GroupType>) -> Self {
        self.group_type = input;
        self
    }
    /// <p>The group types.</p>
    pub fn get_group_type(&self) -> &::std::option::Option<crate::types::GroupType> {
        &self.group_type
    }
    /// Appends an item to `property_names`.
    ///
    /// To override the contents of this collection use [`set_property_names`](Self::set_property_names).
    ///
    /// <p>The names of properties.</p>
    pub fn property_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.property_names.unwrap_or_default();
        v.push(input.into());
        self.property_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of properties.</p>
    pub fn set_property_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.property_names = input;
        self
    }
    /// <p>The names of properties.</p>
    pub fn get_property_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.property_names
    }
    /// <p>A Boolean value that specifies whether the property group is inherited from a parent entity</p>
    /// This field is required.
    pub fn is_inherited(mut self, input: bool) -> Self {
        self.is_inherited = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether the property group is inherited from a parent entity</p>
    pub fn set_is_inherited(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_inherited = input;
        self
    }
    /// <p>A Boolean value that specifies whether the property group is inherited from a parent entity</p>
    pub fn get_is_inherited(&self) -> &::std::option::Option<bool> {
        &self.is_inherited
    }
    /// Consumes the builder and constructs a [`PropertyGroupResponse`](crate::types::PropertyGroupResponse).
    /// This method will fail if any of the following fields are not set:
    /// - [`group_type`](crate::types::builders::PropertyGroupResponseBuilder::group_type)
    /// - [`property_names`](crate::types::builders::PropertyGroupResponseBuilder::property_names)
    /// - [`is_inherited`](crate::types::builders::PropertyGroupResponseBuilder::is_inherited)
    pub fn build(self) -> ::std::result::Result<crate::types::PropertyGroupResponse, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PropertyGroupResponse {
            group_type: self.group_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "group_type",
                    "group_type was not specified but it is required when building PropertyGroupResponse",
                )
            })?,
            property_names: self.property_names.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "property_names",
                    "property_names was not specified but it is required when building PropertyGroupResponse",
                )
            })?,
            is_inherited: self.is_inherited.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "is_inherited",
                    "is_inherited was not specified but it is required when building PropertyGroupResponse",
                )
            })?,
        })
    }
}
