// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The component property group response.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ComponentPropertyGroupResponse {
    /// <p>The group type.</p>
    #[doc(hidden)]
    pub group_type: std::option::Option<crate::types::GroupType>,
    /// <p>The names of properties</p>
    #[doc(hidden)]
    pub property_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A Boolean value that specifies whether the property group is inherited from a parent entity</p>
    #[doc(hidden)]
    pub is_inherited: std::option::Option<bool>,
}
impl ComponentPropertyGroupResponse {
    /// <p>The group type.</p>
    pub fn group_type(&self) -> std::option::Option<&crate::types::GroupType> {
        self.group_type.as_ref()
    }
    /// <p>The names of properties</p>
    pub fn property_names(&self) -> std::option::Option<&[std::string::String]> {
        self.property_names.as_deref()
    }
    /// <p>A Boolean value that specifies whether the property group is inherited from a parent entity</p>
    pub fn is_inherited(&self) -> std::option::Option<bool> {
        self.is_inherited
    }
}
impl ComponentPropertyGroupResponse {
    /// Creates a new builder-style object to manufacture [`ComponentPropertyGroupResponse`](crate::types::ComponentPropertyGroupResponse).
    pub fn builder() -> crate::types::builders::ComponentPropertyGroupResponseBuilder {
        crate::types::builders::ComponentPropertyGroupResponseBuilder::default()
    }
}

/// A builder for [`ComponentPropertyGroupResponse`](crate::types::ComponentPropertyGroupResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ComponentPropertyGroupResponseBuilder {
    pub(crate) group_type: std::option::Option<crate::types::GroupType>,
    pub(crate) property_names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) is_inherited: std::option::Option<bool>,
}
impl ComponentPropertyGroupResponseBuilder {
    /// <p>The group type.</p>
    pub fn group_type(mut self, input: crate::types::GroupType) -> Self {
        self.group_type = Some(input);
        self
    }
    /// <p>The group type.</p>
    pub fn set_group_type(mut self, input: std::option::Option<crate::types::GroupType>) -> Self {
        self.group_type = input;
        self
    }
    /// Appends an item to `property_names`.
    ///
    /// To override the contents of this collection use [`set_property_names`](Self::set_property_names).
    ///
    /// <p>The names of properties</p>
    pub fn property_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.property_names.unwrap_or_default();
        v.push(input.into());
        self.property_names = Some(v);
        self
    }
    /// <p>The names of properties</p>
    pub fn set_property_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.property_names = input;
        self
    }
    /// <p>A Boolean value that specifies whether the property group is inherited from a parent entity</p>
    pub fn is_inherited(mut self, input: bool) -> Self {
        self.is_inherited = Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether the property group is inherited from a parent entity</p>
    pub fn set_is_inherited(mut self, input: std::option::Option<bool>) -> Self {
        self.is_inherited = input;
        self
    }
    /// Consumes the builder and constructs a [`ComponentPropertyGroupResponse`](crate::types::ComponentPropertyGroupResponse).
    pub fn build(self) -> crate::types::ComponentPropertyGroupResponse {
        crate::types::ComponentPropertyGroupResponse {
            group_type: self.group_type,
            property_names: self.property_names,
            is_inherited: self.is_inherited,
        }
    }
}
