// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SyncJob status.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SyncJobStatus {
    /// <p>The SyncJob status state.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::SyncJobState>,
    /// <p>The SyncJob error.</p>
    #[doc(hidden)]
    pub error: std::option::Option<crate::types::ErrorDetails>,
}
impl SyncJobStatus {
    /// <p>The SyncJob status state.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::SyncJobState> {
        self.state.as_ref()
    }
    /// <p>The SyncJob error.</p>
    pub fn error(&self) -> std::option::Option<&crate::types::ErrorDetails> {
        self.error.as_ref()
    }
}
impl SyncJobStatus {
    /// Creates a new builder-style object to manufacture [`SyncJobStatus`](crate::types::SyncJobStatus).
    pub fn builder() -> crate::types::builders::SyncJobStatusBuilder {
        crate::types::builders::SyncJobStatusBuilder::default()
    }
}

/// A builder for [`SyncJobStatus`](crate::types::SyncJobStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SyncJobStatusBuilder {
    pub(crate) state: std::option::Option<crate::types::SyncJobState>,
    pub(crate) error: std::option::Option<crate::types::ErrorDetails>,
}
impl SyncJobStatusBuilder {
    /// <p>The SyncJob status state.</p>
    pub fn state(mut self, input: crate::types::SyncJobState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The SyncJob status state.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::SyncJobState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The SyncJob error.</p>
    pub fn error(mut self, input: crate::types::ErrorDetails) -> Self {
        self.error = Some(input);
        self
    }
    /// <p>The SyncJob error.</p>
    pub fn set_error(mut self, input: std::option::Option<crate::types::ErrorDetails>) -> Self {
        self.error = input;
        self
    }
    /// Consumes the builder and constructs a [`SyncJobStatus`](crate::types::SyncJobStatus).
    pub fn build(self) -> crate::types::SyncJobStatus {
        crate::types::SyncJobStatus {
            state: self.state,
            error: self.error,
        }
    }
}
