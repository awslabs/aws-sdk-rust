// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information about an entity.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EntitySummary {
    /// <p>The ID of the entity.</p>
    #[doc(hidden)]
    pub entity_id: std::option::Option<std::string::String>,
    /// <p>The name of the entity.</p>
    #[doc(hidden)]
    pub entity_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the entity.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the parent entity.</p>
    #[doc(hidden)]
    pub parent_entity_id: std::option::Option<std::string::String>,
    /// <p>The current status of the entity.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::Status>,
    /// <p>The description of the entity.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A Boolean value that specifies whether the entity has child entities or not.</p>
    #[doc(hidden)]
    pub has_child_entities: std::option::Option<bool>,
    /// <p>The date and time when the entity was created.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last date and time when the entity was updated.</p>
    #[doc(hidden)]
    pub update_date_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl EntitySummary {
    /// <p>The ID of the entity.</p>
    pub fn entity_id(&self) -> std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The name of the entity.</p>
    pub fn entity_name(&self) -> std::option::Option<&str> {
        self.entity_name.as_deref()
    }
    /// <p>The ARN of the entity.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the parent entity.</p>
    pub fn parent_entity_id(&self) -> std::option::Option<&str> {
        self.parent_entity_id.as_deref()
    }
    /// <p>The current status of the entity.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The description of the entity.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A Boolean value that specifies whether the entity has child entities or not.</p>
    pub fn has_child_entities(&self) -> std::option::Option<bool> {
        self.has_child_entities
    }
    /// <p>The date and time when the entity was created.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The last date and time when the entity was updated.</p>
    pub fn update_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
}
impl EntitySummary {
    /// Creates a new builder-style object to manufacture [`EntitySummary`](crate::types::EntitySummary).
    pub fn builder() -> crate::types::builders::EntitySummaryBuilder {
        crate::types::builders::EntitySummaryBuilder::default()
    }
}

/// A builder for [`EntitySummary`](crate::types::EntitySummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EntitySummaryBuilder {
    pub(crate) entity_id: std::option::Option<std::string::String>,
    pub(crate) entity_name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) parent_entity_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::Status>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) has_child_entities: std::option::Option<bool>,
    pub(crate) creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) update_date_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl EntitySummaryBuilder {
    /// <p>The ID of the entity.</p>
    pub fn entity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_id = Some(input.into());
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn set_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The name of the entity.</p>
    pub fn entity_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_name = Some(input.into());
        self
    }
    /// <p>The name of the entity.</p>
    pub fn set_entity_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entity_name = input;
        self
    }
    /// <p>The ARN of the entity.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the entity.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ID of the parent entity.</p>
    pub fn parent_entity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_entity_id = Some(input.into());
        self
    }
    /// <p>The ID of the parent entity.</p>
    pub fn set_parent_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parent_entity_id = input;
        self
    }
    /// <p>The current status of the entity.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the entity.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The description of the entity.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the entity.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A Boolean value that specifies whether the entity has child entities or not.</p>
    pub fn has_child_entities(mut self, input: bool) -> Self {
        self.has_child_entities = Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether the entity has child entities or not.</p>
    pub fn set_has_child_entities(mut self, input: std::option::Option<bool>) -> Self {
        self.has_child_entities = input;
        self
    }
    /// <p>The date and time when the entity was created.</p>
    pub fn creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = Some(input);
        self
    }
    /// <p>The date and time when the entity was created.</p>
    pub fn set_creation_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The last date and time when the entity was updated.</p>
    pub fn update_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.update_date_time = Some(input);
        self
    }
    /// <p>The last date and time when the entity was updated.</p>
    pub fn set_update_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.update_date_time = input;
        self
    }
    /// Consumes the builder and constructs a [`EntitySummary`](crate::types::EntitySummary).
    pub fn build(self) -> crate::types::EntitySummary {
        crate::types::EntitySummary {
            entity_id: self.entity_id,
            entity_name: self.entity_name,
            arn: self.arn,
            parent_entity_id: self.parent_entity_id,
            status: self.status,
            description: self.description,
            has_child_entities: self.has_child_entities,
            creation_date_time: self.creation_date_time,
            update_date_time: self.update_date_time,
        }
    }
}
