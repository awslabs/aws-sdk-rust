// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information about an entity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EntitySummary {
    /// <p>The ID of the entity.</p>
    pub entity_id: ::std::string::String,
    /// <p>The name of the entity.</p>
    pub entity_name: ::std::string::String,
    /// <p>The ARN of the entity.</p>
    pub arn: ::std::string::String,
    /// <p>The ID of the parent entity.</p>
    pub parent_entity_id: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the entity.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>The description of the entity.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A Boolean value that specifies whether the entity has child entities or not.</p>
    pub has_child_entities: ::std::option::Option<bool>,
    /// <p>The date and time when the entity was created.</p>
    pub creation_date_time: ::aws_smithy_types::DateTime,
    /// <p>The last date and time when the entity was updated.</p>
    pub update_date_time: ::aws_smithy_types::DateTime,
}
impl EntitySummary {
    /// <p>The ID of the entity.</p>
    pub fn entity_id(&self) -> &str {
        use std::ops::Deref;
        self.entity_id.deref()
    }
    /// <p>The name of the entity.</p>
    pub fn entity_name(&self) -> &str {
        use std::ops::Deref;
        self.entity_name.deref()
    }
    /// <p>The ARN of the entity.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The ID of the parent entity.</p>
    pub fn parent_entity_id(&self) -> ::std::option::Option<&str> {
        self.parent_entity_id.as_deref()
    }
    /// <p>The current status of the entity.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The description of the entity.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A Boolean value that specifies whether the entity has child entities or not.</p>
    pub fn has_child_entities(&self) -> ::std::option::Option<bool> {
        self.has_child_entities
    }
    /// <p>The date and time when the entity was created.</p>
    pub fn creation_date_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_date_time
    }
    /// <p>The last date and time when the entity was updated.</p>
    pub fn update_date_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_date_time
    }
}
impl EntitySummary {
    /// Creates a new builder-style object to manufacture [`EntitySummary`](crate::types::EntitySummary).
    pub fn builder() -> crate::types::builders::EntitySummaryBuilder {
        crate::types::builders::EntitySummaryBuilder::default()
    }
}

/// A builder for [`EntitySummary`](crate::types::EntitySummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EntitySummaryBuilder {
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) parent_entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) has_child_entities: ::std::option::Option<bool>,
    pub(crate) creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl EntitySummaryBuilder {
    /// <p>The ID of the entity.</p>
    /// This field is required.
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The ID of the entity.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>The name of the entity.</p>
    /// This field is required.
    pub fn entity_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the entity.</p>
    pub fn set_entity_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_name = input;
        self
    }
    /// <p>The name of the entity.</p>
    pub fn get_entity_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_name
    }
    /// <p>The ARN of the entity.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the entity.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the entity.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The ID of the parent entity.</p>
    pub fn parent_entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the parent entity.</p>
    pub fn set_parent_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_entity_id = input;
        self
    }
    /// <p>The ID of the parent entity.</p>
    pub fn get_parent_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_entity_id
    }
    /// <p>The current status of the entity.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the entity.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the entity.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>The description of the entity.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the entity.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the entity.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A Boolean value that specifies whether the entity has child entities or not.</p>
    pub fn has_child_entities(mut self, input: bool) -> Self {
        self.has_child_entities = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether the entity has child entities or not.</p>
    pub fn set_has_child_entities(mut self, input: ::std::option::Option<bool>) -> Self {
        self.has_child_entities = input;
        self
    }
    /// <p>A Boolean value that specifies whether the entity has child entities or not.</p>
    pub fn get_has_child_entities(&self) -> &::std::option::Option<bool> {
        &self.has_child_entities
    }
    /// <p>The date and time when the entity was created.</p>
    /// This field is required.
    pub fn creation_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the entity was created.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The date and time when the entity was created.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date_time
    }
    /// <p>The last date and time when the entity was updated.</p>
    /// This field is required.
    pub fn update_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last date and time when the entity was updated.</p>
    pub fn set_update_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_date_time = input;
        self
    }
    /// <p>The last date and time when the entity was updated.</p>
    pub fn get_update_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_date_time
    }
    /// Consumes the builder and constructs a [`EntitySummary`](crate::types::EntitySummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`entity_id`](crate::types::builders::EntitySummaryBuilder::entity_id)
    /// - [`entity_name`](crate::types::builders::EntitySummaryBuilder::entity_name)
    /// - [`arn`](crate::types::builders::EntitySummaryBuilder::arn)
    /// - [`creation_date_time`](crate::types::builders::EntitySummaryBuilder::creation_date_time)
    /// - [`update_date_time`](crate::types::builders::EntitySummaryBuilder::update_date_time)
    pub fn build(self) -> ::std::result::Result<crate::types::EntitySummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EntitySummary {
            entity_id: self.entity_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entity_id",
                    "entity_id was not specified but it is required when building EntitySummary",
                )
            })?,
            entity_name: self.entity_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entity_name",
                    "entity_name was not specified but it is required when building EntitySummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building EntitySummary",
                )
            })?,
            parent_entity_id: self.parent_entity_id,
            status: self.status,
            description: self.description,
            has_child_entities: self.has_child_entities,
            creation_date_time: self.creation_date_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_date_time",
                    "creation_date_time was not specified but it is required when building EntitySummary",
                )
            })?,
            update_date_time: self.update_date_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_date_time",
                    "update_date_time was not specified but it is required when building EntitySummary",
                )
            })?,
        })
    }
}
