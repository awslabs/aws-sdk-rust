// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The sync resource filter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum SyncResourceFilter {
    /// <p>The external Id.</p>
    ExternalId(std::string::String),
    /// <p>The sync resource filter resource Id.</p>
    ResourceId(std::string::String),
    /// <p>The sync resource filter resoucre type</p>
    ResourceType(crate::types::SyncResourceType),
    /// <p>The sync resource filter's state.</p>
    State(crate::types::SyncResourceState),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl SyncResourceFilter {
    /// Tries to convert the enum instance into [`ExternalId`](crate::types::SyncResourceFilter::ExternalId), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_external_id(&self) -> std::result::Result<&std::string::String, &Self> {
        if let SyncResourceFilter::ExternalId(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ExternalId`](crate::types::SyncResourceFilter::ExternalId).
    pub fn is_external_id(&self) -> bool {
        self.as_external_id().is_ok()
    }
    /// Tries to convert the enum instance into [`ResourceId`](crate::types::SyncResourceFilter::ResourceId), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_resource_id(&self) -> std::result::Result<&std::string::String, &Self> {
        if let SyncResourceFilter::ResourceId(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ResourceId`](crate::types::SyncResourceFilter::ResourceId).
    pub fn is_resource_id(&self) -> bool {
        self.as_resource_id().is_ok()
    }
    /// Tries to convert the enum instance into [`ResourceType`](crate::types::SyncResourceFilter::ResourceType), extracting the inner [`SyncResourceType`](crate::types::SyncResourceType).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_resource_type(&self) -> std::result::Result<&crate::types::SyncResourceType, &Self> {
        if let SyncResourceFilter::ResourceType(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ResourceType`](crate::types::SyncResourceFilter::ResourceType).
    pub fn is_resource_type(&self) -> bool {
        self.as_resource_type().is_ok()
    }
    /// Tries to convert the enum instance into [`State`](crate::types::SyncResourceFilter::State), extracting the inner [`SyncResourceState`](crate::types::SyncResourceState).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_state(&self) -> std::result::Result<&crate::types::SyncResourceState, &Self> {
        if let SyncResourceFilter::State(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`State`](crate::types::SyncResourceFilter::State).
    pub fn is_state(&self) -> bool {
        self.as_state().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
