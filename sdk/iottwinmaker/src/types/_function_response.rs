// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The function response.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FunctionResponse {
    /// <p>The required properties of the function.</p>
    pub required_properties: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The scope of the function.</p>
    pub scope: ::std::option::Option<crate::types::Scope>,
    /// <p>The data connector.</p>
    pub implemented_by: ::std::option::Option<crate::types::DataConnector>,
    /// <p>Indicates whether this function is inherited.</p>
    pub is_inherited: ::std::option::Option<bool>,
}
impl FunctionResponse {
    /// <p>The required properties of the function.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.required_properties.is_none()`.
    pub fn required_properties(&self) -> &[::std::string::String] {
        self.required_properties.as_deref().unwrap_or_default()
    }
    /// <p>The scope of the function.</p>
    pub fn scope(&self) -> ::std::option::Option<&crate::types::Scope> {
        self.scope.as_ref()
    }
    /// <p>The data connector.</p>
    pub fn implemented_by(&self) -> ::std::option::Option<&crate::types::DataConnector> {
        self.implemented_by.as_ref()
    }
    /// <p>Indicates whether this function is inherited.</p>
    pub fn is_inherited(&self) -> ::std::option::Option<bool> {
        self.is_inherited
    }
}
impl FunctionResponse {
    /// Creates a new builder-style object to manufacture [`FunctionResponse`](crate::types::FunctionResponse).
    pub fn builder() -> crate::types::builders::FunctionResponseBuilder {
        crate::types::builders::FunctionResponseBuilder::default()
    }
}

/// A builder for [`FunctionResponse`](crate::types::FunctionResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FunctionResponseBuilder {
    pub(crate) required_properties: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) scope: ::std::option::Option<crate::types::Scope>,
    pub(crate) implemented_by: ::std::option::Option<crate::types::DataConnector>,
    pub(crate) is_inherited: ::std::option::Option<bool>,
}
impl FunctionResponseBuilder {
    /// Appends an item to `required_properties`.
    ///
    /// To override the contents of this collection use [`set_required_properties`](Self::set_required_properties).
    ///
    /// <p>The required properties of the function.</p>
    pub fn required_properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.required_properties.unwrap_or_default();
        v.push(input.into());
        self.required_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>The required properties of the function.</p>
    pub fn set_required_properties(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.required_properties = input;
        self
    }
    /// <p>The required properties of the function.</p>
    pub fn get_required_properties(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.required_properties
    }
    /// <p>The scope of the function.</p>
    pub fn scope(mut self, input: crate::types::Scope) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of the function.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::Scope>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The scope of the function.</p>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::Scope> {
        &self.scope
    }
    /// <p>The data connector.</p>
    pub fn implemented_by(mut self, input: crate::types::DataConnector) -> Self {
        self.implemented_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data connector.</p>
    pub fn set_implemented_by(mut self, input: ::std::option::Option<crate::types::DataConnector>) -> Self {
        self.implemented_by = input;
        self
    }
    /// <p>The data connector.</p>
    pub fn get_implemented_by(&self) -> &::std::option::Option<crate::types::DataConnector> {
        &self.implemented_by
    }
    /// <p>Indicates whether this function is inherited.</p>
    pub fn is_inherited(mut self, input: bool) -> Self {
        self.is_inherited = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether this function is inherited.</p>
    pub fn set_is_inherited(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_inherited = input;
        self
    }
    /// <p>Indicates whether this function is inherited.</p>
    pub fn get_is_inherited(&self) -> &::std::option::Option<bool> {
        &self.is_inherited
    }
    /// Consumes the builder and constructs a [`FunctionResponse`](crate::types::FunctionResponse).
    pub fn build(self) -> crate::types::FunctionResponse {
        crate::types::FunctionResponse {
            required_properties: self.required_properties,
            scope: self.scope,
            implemented_by: self.implemented_by,
            is_inherited: self.is_inherited,
        }
    }
}
