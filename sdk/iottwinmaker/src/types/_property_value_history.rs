// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The history of values for a time series property.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PropertyValueHistory {
    /// <p>An object that uniquely identifies an entity property.</p>
    #[doc(hidden)]
    pub entity_property_reference: std::option::Option<crate::types::EntityPropertyReference>,
    /// <p>A list of objects that contain information about the values in the history of a time series property.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<crate::types::PropertyValue>>,
}
impl PropertyValueHistory {
    /// <p>An object that uniquely identifies an entity property.</p>
    pub fn entity_property_reference(
        &self,
    ) -> std::option::Option<&crate::types::EntityPropertyReference> {
        self.entity_property_reference.as_ref()
    }
    /// <p>A list of objects that contain information about the values in the history of a time series property.</p>
    pub fn values(&self) -> std::option::Option<&[crate::types::PropertyValue]> {
        self.values.as_deref()
    }
}
impl PropertyValueHistory {
    /// Creates a new builder-style object to manufacture [`PropertyValueHistory`](crate::types::PropertyValueHistory).
    pub fn builder() -> crate::types::builders::PropertyValueHistoryBuilder {
        crate::types::builders::PropertyValueHistoryBuilder::default()
    }
}

/// A builder for [`PropertyValueHistory`](crate::types::PropertyValueHistory).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PropertyValueHistoryBuilder {
    pub(crate) entity_property_reference:
        std::option::Option<crate::types::EntityPropertyReference>,
    pub(crate) values: std::option::Option<std::vec::Vec<crate::types::PropertyValue>>,
}
impl PropertyValueHistoryBuilder {
    /// <p>An object that uniquely identifies an entity property.</p>
    pub fn entity_property_reference(
        mut self,
        input: crate::types::EntityPropertyReference,
    ) -> Self {
        self.entity_property_reference = Some(input);
        self
    }
    /// <p>An object that uniquely identifies an entity property.</p>
    pub fn set_entity_property_reference(
        mut self,
        input: std::option::Option<crate::types::EntityPropertyReference>,
    ) -> Self {
        self.entity_property_reference = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>A list of objects that contain information about the values in the history of a time series property.</p>
    pub fn values(mut self, input: crate::types::PropertyValue) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = Some(v);
        self
    }
    /// <p>A list of objects that contain information about the values in the history of a time series property.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PropertyValue>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// Consumes the builder and constructs a [`PropertyValueHistory`](crate::types::PropertyValueHistory).
    pub fn build(self) -> crate::types::PropertyValueHistory {
        crate::types::PropertyValueHistory {
            entity_property_reference: self.entity_property_reference,
            values: self.values,
        }
    }
}
