// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parent entity update request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ParentEntityUpdateRequest {
    /// <p>The type of the update.</p>
    #[doc(hidden)]
    pub update_type: std::option::Option<crate::types::ParentEntityUpdateType>,
    /// <p>The ID of the parent entity.</p>
    #[doc(hidden)]
    pub parent_entity_id: std::option::Option<std::string::String>,
}
impl ParentEntityUpdateRequest {
    /// <p>The type of the update.</p>
    pub fn update_type(&self) -> std::option::Option<&crate::types::ParentEntityUpdateType> {
        self.update_type.as_ref()
    }
    /// <p>The ID of the parent entity.</p>
    pub fn parent_entity_id(&self) -> std::option::Option<&str> {
        self.parent_entity_id.as_deref()
    }
}
impl ParentEntityUpdateRequest {
    /// Creates a new builder-style object to manufacture [`ParentEntityUpdateRequest`](crate::types::ParentEntityUpdateRequest).
    pub fn builder() -> crate::types::builders::ParentEntityUpdateRequestBuilder {
        crate::types::builders::ParentEntityUpdateRequestBuilder::default()
    }
}

/// A builder for [`ParentEntityUpdateRequest`](crate::types::ParentEntityUpdateRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ParentEntityUpdateRequestBuilder {
    pub(crate) update_type: std::option::Option<crate::types::ParentEntityUpdateType>,
    pub(crate) parent_entity_id: std::option::Option<std::string::String>,
}
impl ParentEntityUpdateRequestBuilder {
    /// <p>The type of the update.</p>
    pub fn update_type(mut self, input: crate::types::ParentEntityUpdateType) -> Self {
        self.update_type = Some(input);
        self
    }
    /// <p>The type of the update.</p>
    pub fn set_update_type(
        mut self,
        input: std::option::Option<crate::types::ParentEntityUpdateType>,
    ) -> Self {
        self.update_type = input;
        self
    }
    /// <p>The ID of the parent entity.</p>
    pub fn parent_entity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_entity_id = Some(input.into());
        self
    }
    /// <p>The ID of the parent entity.</p>
    pub fn set_parent_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parent_entity_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ParentEntityUpdateRequest`](crate::types::ParentEntityUpdateRequest).
    pub fn build(self) -> crate::types::ParentEntityUpdateRequest {
        crate::types::ParentEntityUpdateRequest {
            update_type: self.update_type,
            parent_entity_id: self.parent_entity_id,
        }
    }
}
