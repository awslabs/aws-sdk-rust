// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A value that associates a component and an entity.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RelationshipValue {
    /// <p>The ID of the target entity associated with this relationship value.</p>
    #[doc(hidden)]
    pub target_entity_id: std::option::Option<std::string::String>,
    /// <p>The name of the target component associated with the relationship value.</p>
    #[doc(hidden)]
    pub target_component_name: std::option::Option<std::string::String>,
}
impl RelationshipValue {
    /// <p>The ID of the target entity associated with this relationship value.</p>
    pub fn target_entity_id(&self) -> std::option::Option<&str> {
        self.target_entity_id.as_deref()
    }
    /// <p>The name of the target component associated with the relationship value.</p>
    pub fn target_component_name(&self) -> std::option::Option<&str> {
        self.target_component_name.as_deref()
    }
}
impl RelationshipValue {
    /// Creates a new builder-style object to manufacture [`RelationshipValue`](crate::types::RelationshipValue).
    pub fn builder() -> crate::types::builders::RelationshipValueBuilder {
        crate::types::builders::RelationshipValueBuilder::default()
    }
}

/// A builder for [`RelationshipValue`](crate::types::RelationshipValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RelationshipValueBuilder {
    pub(crate) target_entity_id: std::option::Option<std::string::String>,
    pub(crate) target_component_name: std::option::Option<std::string::String>,
}
impl RelationshipValueBuilder {
    /// <p>The ID of the target entity associated with this relationship value.</p>
    pub fn target_entity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_entity_id = Some(input.into());
        self
    }
    /// <p>The ID of the target entity associated with this relationship value.</p>
    pub fn set_target_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_entity_id = input;
        self
    }
    /// <p>The name of the target component associated with the relationship value.</p>
    pub fn target_component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_component_name = Some(input.into());
        self
    }
    /// <p>The name of the target component associated with the relationship value.</p>
    pub fn set_target_component_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_component_name = input;
        self
    }
    /// Consumes the builder and constructs a [`RelationshipValue`](crate::types::RelationshipValue).
    pub fn build(self) -> crate::types::RelationshipValue {
        crate::types::RelationshipValue {
            target_entity_id: self.target_entity_id,
            target_component_name: self.target_component_name,
        }
    }
}
