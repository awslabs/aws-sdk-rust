// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The source configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceConfiguration {
    /// <p>The source configuration type.</p>
    pub r#type: crate::types::SourceType,
    /// <p>The source configuration S3 configuration.</p>
    pub s3_configuration: ::std::option::Option<crate::types::S3SourceConfiguration>,
    /// <p>The source configuration IoT SiteWise configuration.</p>
    pub iot_site_wise_configuration: ::std::option::Option<crate::types::IotSiteWiseSourceConfiguration>,
    /// <p>The source configuration IoT TwinMaker configuration.</p>
    pub iot_twin_maker_configuration: ::std::option::Option<crate::types::IotTwinMakerSourceConfiguration>,
}
impl SourceConfiguration {
    /// <p>The source configuration type.</p>
    pub fn r#type(&self) -> &crate::types::SourceType {
        &self.r#type
    }
    /// <p>The source configuration S3 configuration.</p>
    pub fn s3_configuration(&self) -> ::std::option::Option<&crate::types::S3SourceConfiguration> {
        self.s3_configuration.as_ref()
    }
    /// <p>The source configuration IoT SiteWise configuration.</p>
    pub fn iot_site_wise_configuration(&self) -> ::std::option::Option<&crate::types::IotSiteWiseSourceConfiguration> {
        self.iot_site_wise_configuration.as_ref()
    }
    /// <p>The source configuration IoT TwinMaker configuration.</p>
    pub fn iot_twin_maker_configuration(&self) -> ::std::option::Option<&crate::types::IotTwinMakerSourceConfiguration> {
        self.iot_twin_maker_configuration.as_ref()
    }
}
impl SourceConfiguration {
    /// Creates a new builder-style object to manufacture [`SourceConfiguration`](crate::types::SourceConfiguration).
    pub fn builder() -> crate::types::builders::SourceConfigurationBuilder {
        crate::types::builders::SourceConfigurationBuilder::default()
    }
}

/// A builder for [`SourceConfiguration`](crate::types::SourceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SourceConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::SourceType>,
    pub(crate) s3_configuration: ::std::option::Option<crate::types::S3SourceConfiguration>,
    pub(crate) iot_site_wise_configuration: ::std::option::Option<crate::types::IotSiteWiseSourceConfiguration>,
    pub(crate) iot_twin_maker_configuration: ::std::option::Option<crate::types::IotTwinMakerSourceConfiguration>,
}
impl SourceConfigurationBuilder {
    /// <p>The source configuration type.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::SourceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source configuration type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SourceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The source configuration type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SourceType> {
        &self.r#type
    }
    /// <p>The source configuration S3 configuration.</p>
    pub fn s3_configuration(mut self, input: crate::types::S3SourceConfiguration) -> Self {
        self.s3_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source configuration S3 configuration.</p>
    pub fn set_s3_configuration(mut self, input: ::std::option::Option<crate::types::S3SourceConfiguration>) -> Self {
        self.s3_configuration = input;
        self
    }
    /// <p>The source configuration S3 configuration.</p>
    pub fn get_s3_configuration(&self) -> &::std::option::Option<crate::types::S3SourceConfiguration> {
        &self.s3_configuration
    }
    /// <p>The source configuration IoT SiteWise configuration.</p>
    pub fn iot_site_wise_configuration(mut self, input: crate::types::IotSiteWiseSourceConfiguration) -> Self {
        self.iot_site_wise_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source configuration IoT SiteWise configuration.</p>
    pub fn set_iot_site_wise_configuration(mut self, input: ::std::option::Option<crate::types::IotSiteWiseSourceConfiguration>) -> Self {
        self.iot_site_wise_configuration = input;
        self
    }
    /// <p>The source configuration IoT SiteWise configuration.</p>
    pub fn get_iot_site_wise_configuration(&self) -> &::std::option::Option<crate::types::IotSiteWiseSourceConfiguration> {
        &self.iot_site_wise_configuration
    }
    /// <p>The source configuration IoT TwinMaker configuration.</p>
    pub fn iot_twin_maker_configuration(mut self, input: crate::types::IotTwinMakerSourceConfiguration) -> Self {
        self.iot_twin_maker_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source configuration IoT TwinMaker configuration.</p>
    pub fn set_iot_twin_maker_configuration(mut self, input: ::std::option::Option<crate::types::IotTwinMakerSourceConfiguration>) -> Self {
        self.iot_twin_maker_configuration = input;
        self
    }
    /// <p>The source configuration IoT TwinMaker configuration.</p>
    pub fn get_iot_twin_maker_configuration(&self) -> &::std::option::Option<crate::types::IotTwinMakerSourceConfiguration> {
        &self.iot_twin_maker_configuration
    }
    /// Consumes the builder and constructs a [`SourceConfiguration`](crate::types::SourceConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::SourceConfigurationBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::SourceConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SourceConfiguration {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building SourceConfiguration",
                )
            })?,
            s3_configuration: self.s3_configuration,
            iot_site_wise_configuration: self.iot_site_wise_configuration,
            iot_twin_maker_configuration: self.iot_twin_maker_configuration,
        })
    }
}
