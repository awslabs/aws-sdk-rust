// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PropertyGroupRequest {
    /// <p>The group type.</p>
    pub group_type: ::std::option::Option<crate::types::GroupType>,
    /// <p>The names of properties.</p>
    pub property_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PropertyGroupRequest {
    /// <p>The group type.</p>
    pub fn group_type(&self) -> ::std::option::Option<&crate::types::GroupType> {
        self.group_type.as_ref()
    }
    /// <p>The names of properties.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.property_names.is_none()`.
    pub fn property_names(&self) -> &[::std::string::String] {
        self.property_names.as_deref().unwrap_or_default()
    }
}
impl PropertyGroupRequest {
    /// Creates a new builder-style object to manufacture [`PropertyGroupRequest`](crate::types::PropertyGroupRequest).
    pub fn builder() -> crate::types::builders::PropertyGroupRequestBuilder {
        crate::types::builders::PropertyGroupRequestBuilder::default()
    }
}

/// A builder for [`PropertyGroupRequest`](crate::types::PropertyGroupRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PropertyGroupRequestBuilder {
    pub(crate) group_type: ::std::option::Option<crate::types::GroupType>,
    pub(crate) property_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PropertyGroupRequestBuilder {
    /// <p>The group type.</p>
    pub fn group_type(mut self, input: crate::types::GroupType) -> Self {
        self.group_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The group type.</p>
    pub fn set_group_type(mut self, input: ::std::option::Option<crate::types::GroupType>) -> Self {
        self.group_type = input;
        self
    }
    /// <p>The group type.</p>
    pub fn get_group_type(&self) -> &::std::option::Option<crate::types::GroupType> {
        &self.group_type
    }
    /// Appends an item to `property_names`.
    ///
    /// To override the contents of this collection use [`set_property_names`](Self::set_property_names).
    ///
    /// <p>The names of properties.</p>
    pub fn property_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.property_names.unwrap_or_default();
        v.push(input.into());
        self.property_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of properties.</p>
    pub fn set_property_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.property_names = input;
        self
    }
    /// <p>The names of properties.</p>
    pub fn get_property_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.property_names
    }
    /// Consumes the builder and constructs a [`PropertyGroupRequest`](crate::types::PropertyGroupRequest).
    pub fn build(self) -> crate::types::PropertyGroupRequest {
        crate::types::PropertyGroupRequest {
            group_type: self.group_type,
            property_names: self.property_names,
        }
    }
}
