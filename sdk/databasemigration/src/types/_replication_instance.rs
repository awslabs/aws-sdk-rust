// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information that defines a replication instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicationInstance {
    /// <p>The replication instance identifier is a required parameter. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain 1-63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>myrepinstance</code> </p>
    pub replication_instance_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The compute and memory capacity of the replication instance as defined for the specified replication instance class. It is a required parameter, although a default value is pre-selected in the DMS console.</p>
    /// <p>For more information on the settings and capacities for the available replication instance classes, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth"> Selecting the right DMS replication instance for your migration</a>. </p>
    pub replication_instance_class: ::std::option::Option<::std::string::String>,
    /// <p>The status of the replication instance. The possible return values include:</p>
    /// <ul>
    /// <li> <p> <code>"available"</code> </p> </li>
    /// <li> <p> <code>"creating"</code> </p> </li>
    /// <li> <p> <code>"deleted"</code> </p> </li>
    /// <li> <p> <code>"deleting"</code> </p> </li>
    /// <li> <p> <code>"failed"</code> </p> </li>
    /// <li> <p> <code>"modifying"</code> </p> </li>
    /// <li> <p> <code>"upgrading"</code> </p> </li>
    /// <li> <p> <code>"rebooting"</code> </p> </li>
    /// <li> <p> <code>"resetting-master-credentials"</code> </p> </li>
    /// <li> <p> <code>"storage-full"</code> </p> </li>
    /// <li> <p> <code>"incompatible-credentials"</code> </p> </li>
    /// <li> <p> <code>"incompatible-network"</code> </p> </li>
    /// <li> <p> <code>"maintenance"</code> </p> </li>
    /// </ul>
    pub replication_instance_status: ::std::option::Option<::std::string::String>,
    /// <p>The amount of storage (in gigabytes) that is allocated for the replication instance.</p>
    pub allocated_storage: i32,
    /// <p>The time the replication instance was created.</p>
    pub instance_create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The VPC security group for the instance.</p>
    pub vpc_security_groups: ::std::option::Option<::std::vec::Vec<crate::types::VpcSecurityGroupMembership>>,
    /// <p>The Availability Zone for the instance.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The subnet group for the replication instance.</p>
    pub replication_subnet_group: ::std::option::Option<crate::types::ReplicationSubnetGroup>,
    /// <p>The maintenance window times for the replication instance. Any pending upgrades to the replication instance are performed during this time.</p>
    pub preferred_maintenance_window: ::std::option::Option<::std::string::String>,
    /// <p>The pending modification values.</p>
    pub pending_modified_values: ::std::option::Option<crate::types::ReplicationPendingModifiedValues>,
    /// <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to <code>true</code>. </p>
    pub multi_az: bool,
    /// <p>The engine version number of the replication instance.</p>
    /// <p>If an engine version number is not specified when a replication instance is created, the default is the latest engine version available.</p>
    /// <p>When modifying a major engine version of an instance, also set <code>AllowMajorVersionUpgrade</code> to <code>true</code>.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>Boolean value indicating if minor version upgrades will be automatically applied to the instance.</p>
    pub auto_minor_version_upgrade: bool,
    /// <p>An KMS key identifier that is used to encrypt the data on the replication instance.</p>
    /// <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then DMS uses your default encryption key.</p>
    /// <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Region.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the replication instance.</p>
    pub replication_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The public IP address of the replication instance.</p>
    #[deprecated]
    pub replication_instance_public_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The private IP address of the replication instance.</p>
    #[deprecated]
    pub replication_instance_private_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>One or more public IP addresses for the replication instance.</p>
    pub replication_instance_public_ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>One or more private IP addresses for the replication instance.</p>
    pub replication_instance_private_ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>One or more IPv6 addresses for the replication instance.</p>
    pub replication_instance_ipv6_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p> Specifies the accessibility options for the replication instance. A value of <code>true</code> represents an instance with a public IP address. A value of <code>false</code> represents an instance with a private IP address. The default value is <code>true</code>. </p>
    pub publicly_accessible: bool,
    /// <p>The Availability Zone of the standby replication instance in a Multi-AZ deployment.</p>
    pub secondary_availability_zone: ::std::option::Option<::std::string::String>,
    /// <p> The expiration date of the free replication instance that is part of the Free DMS program. </p>
    pub free_until: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The DNS name servers supported for the replication instance to access your on-premise source or target database.</p>
    pub dns_name_servers: ::std::option::Option<::std::string::String>,
    /// <p>The type of IP address protocol used by a replication instance, such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    pub network_type: ::std::option::Option<::std::string::String>,
}
impl ReplicationInstance {
    /// <p>The replication instance identifier is a required parameter. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain 1-63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>myrepinstance</code> </p>
    pub fn replication_instance_identifier(&self) -> ::std::option::Option<&str> {
        self.replication_instance_identifier.as_deref()
    }
    /// <p>The compute and memory capacity of the replication instance as defined for the specified replication instance class. It is a required parameter, although a default value is pre-selected in the DMS console.</p>
    /// <p>For more information on the settings and capacities for the available replication instance classes, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth"> Selecting the right DMS replication instance for your migration</a>. </p>
    pub fn replication_instance_class(&self) -> ::std::option::Option<&str> {
        self.replication_instance_class.as_deref()
    }
    /// <p>The status of the replication instance. The possible return values include:</p>
    /// <ul>
    /// <li> <p> <code>"available"</code> </p> </li>
    /// <li> <p> <code>"creating"</code> </p> </li>
    /// <li> <p> <code>"deleted"</code> </p> </li>
    /// <li> <p> <code>"deleting"</code> </p> </li>
    /// <li> <p> <code>"failed"</code> </p> </li>
    /// <li> <p> <code>"modifying"</code> </p> </li>
    /// <li> <p> <code>"upgrading"</code> </p> </li>
    /// <li> <p> <code>"rebooting"</code> </p> </li>
    /// <li> <p> <code>"resetting-master-credentials"</code> </p> </li>
    /// <li> <p> <code>"storage-full"</code> </p> </li>
    /// <li> <p> <code>"incompatible-credentials"</code> </p> </li>
    /// <li> <p> <code>"incompatible-network"</code> </p> </li>
    /// <li> <p> <code>"maintenance"</code> </p> </li>
    /// </ul>
    pub fn replication_instance_status(&self) -> ::std::option::Option<&str> {
        self.replication_instance_status.as_deref()
    }
    /// <p>The amount of storage (in gigabytes) that is allocated for the replication instance.</p>
    pub fn allocated_storage(&self) -> i32 {
        self.allocated_storage
    }
    /// <p>The time the replication instance was created.</p>
    pub fn instance_create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.instance_create_time.as_ref()
    }
    /// <p>The VPC security group for the instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vpc_security_groups.is_none()`.
    pub fn vpc_security_groups(&self) -> &[crate::types::VpcSecurityGroupMembership] {
        self.vpc_security_groups.as_deref().unwrap_or_default()
    }
    /// <p>The Availability Zone for the instance.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The subnet group for the replication instance.</p>
    pub fn replication_subnet_group(&self) -> ::std::option::Option<&crate::types::ReplicationSubnetGroup> {
        self.replication_subnet_group.as_ref()
    }
    /// <p>The maintenance window times for the replication instance. Any pending upgrades to the replication instance are performed during this time.</p>
    pub fn preferred_maintenance_window(&self) -> ::std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>The pending modification values.</p>
    pub fn pending_modified_values(&self) -> ::std::option::Option<&crate::types::ReplicationPendingModifiedValues> {
        self.pending_modified_values.as_ref()
    }
    /// <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to <code>true</code>. </p>
    pub fn multi_az(&self) -> bool {
        self.multi_az
    }
    /// <p>The engine version number of the replication instance.</p>
    /// <p>If an engine version number is not specified when a replication instance is created, the default is the latest engine version available.</p>
    /// <p>When modifying a major engine version of an instance, also set <code>AllowMajorVersionUpgrade</code> to <code>true</code>.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>Boolean value indicating if minor version upgrades will be automatically applied to the instance.</p>
    pub fn auto_minor_version_upgrade(&self) -> bool {
        self.auto_minor_version_upgrade
    }
    /// <p>An KMS key identifier that is used to encrypt the data on the replication instance.</p>
    /// <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then DMS uses your default encryption key.</p>
    /// <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Region.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the replication instance.</p>
    pub fn replication_instance_arn(&self) -> ::std::option::Option<&str> {
        self.replication_instance_arn.as_deref()
    }
    /// <p>The public IP address of the replication instance.</p>
    #[deprecated]
    pub fn replication_instance_public_ip_address(&self) -> ::std::option::Option<&str> {
        self.replication_instance_public_ip_address.as_deref()
    }
    /// <p>The private IP address of the replication instance.</p>
    #[deprecated]
    pub fn replication_instance_private_ip_address(&self) -> ::std::option::Option<&str> {
        self.replication_instance_private_ip_address.as_deref()
    }
    /// <p>One or more public IP addresses for the replication instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replication_instance_public_ip_addresses.is_none()`.
    pub fn replication_instance_public_ip_addresses(&self) -> &[::std::string::String] {
        self.replication_instance_public_ip_addresses.as_deref().unwrap_or_default()
    }
    /// <p>One or more private IP addresses for the replication instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replication_instance_private_ip_addresses.is_none()`.
    pub fn replication_instance_private_ip_addresses(&self) -> &[::std::string::String] {
        self.replication_instance_private_ip_addresses.as_deref().unwrap_or_default()
    }
    /// <p>One or more IPv6 addresses for the replication instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replication_instance_ipv6_addresses.is_none()`.
    pub fn replication_instance_ipv6_addresses(&self) -> &[::std::string::String] {
        self.replication_instance_ipv6_addresses.as_deref().unwrap_or_default()
    }
    /// <p> Specifies the accessibility options for the replication instance. A value of <code>true</code> represents an instance with a public IP address. A value of <code>false</code> represents an instance with a private IP address. The default value is <code>true</code>. </p>
    pub fn publicly_accessible(&self) -> bool {
        self.publicly_accessible
    }
    /// <p>The Availability Zone of the standby replication instance in a Multi-AZ deployment.</p>
    pub fn secondary_availability_zone(&self) -> ::std::option::Option<&str> {
        self.secondary_availability_zone.as_deref()
    }
    /// <p> The expiration date of the free replication instance that is part of the Free DMS program. </p>
    pub fn free_until(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.free_until.as_ref()
    }
    /// <p>The DNS name servers supported for the replication instance to access your on-premise source or target database.</p>
    pub fn dns_name_servers(&self) -> ::std::option::Option<&str> {
        self.dns_name_servers.as_deref()
    }
    /// <p>The type of IP address protocol used by a replication instance, such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    pub fn network_type(&self) -> ::std::option::Option<&str> {
        self.network_type.as_deref()
    }
}
impl ReplicationInstance {
    /// Creates a new builder-style object to manufacture [`ReplicationInstance`](crate::types::ReplicationInstance).
    pub fn builder() -> crate::types::builders::ReplicationInstanceBuilder {
        crate::types::builders::ReplicationInstanceBuilder::default()
    }
}

/// A builder for [`ReplicationInstance`](crate::types::ReplicationInstance).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReplicationInstanceBuilder {
    pub(crate) replication_instance_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) replication_instance_class: ::std::option::Option<::std::string::String>,
    pub(crate) replication_instance_status: ::std::option::Option<::std::string::String>,
    pub(crate) allocated_storage: ::std::option::Option<i32>,
    pub(crate) instance_create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) vpc_security_groups: ::std::option::Option<::std::vec::Vec<crate::types::VpcSecurityGroupMembership>>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) replication_subnet_group: ::std::option::Option<crate::types::ReplicationSubnetGroup>,
    pub(crate) preferred_maintenance_window: ::std::option::Option<::std::string::String>,
    pub(crate) pending_modified_values: ::std::option::Option<crate::types::ReplicationPendingModifiedValues>,
    pub(crate) multi_az: ::std::option::Option<bool>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) auto_minor_version_upgrade: ::std::option::Option<bool>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) replication_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) replication_instance_public_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) replication_instance_private_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) replication_instance_public_ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) replication_instance_private_ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) replication_instance_ipv6_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) publicly_accessible: ::std::option::Option<bool>,
    pub(crate) secondary_availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) free_until: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) dns_name_servers: ::std::option::Option<::std::string::String>,
    pub(crate) network_type: ::std::option::Option<::std::string::String>,
}
impl ReplicationInstanceBuilder {
    /// <p>The replication instance identifier is a required parameter. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain 1-63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>myrepinstance</code> </p>
    pub fn replication_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_instance_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The replication instance identifier is a required parameter. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain 1-63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>myrepinstance</code> </p>
    pub fn set_replication_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_instance_identifier = input;
        self
    }
    /// <p>The replication instance identifier is a required parameter. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain 1-63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>myrepinstance</code> </p>
    pub fn get_replication_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_instance_identifier
    }
    /// <p>The compute and memory capacity of the replication instance as defined for the specified replication instance class. It is a required parameter, although a default value is pre-selected in the DMS console.</p>
    /// <p>For more information on the settings and capacities for the available replication instance classes, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth"> Selecting the right DMS replication instance for your migration</a>. </p>
    pub fn replication_instance_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_instance_class = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The compute and memory capacity of the replication instance as defined for the specified replication instance class. It is a required parameter, although a default value is pre-selected in the DMS console.</p>
    /// <p>For more information on the settings and capacities for the available replication instance classes, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth"> Selecting the right DMS replication instance for your migration</a>. </p>
    pub fn set_replication_instance_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_instance_class = input;
        self
    }
    /// <p>The compute and memory capacity of the replication instance as defined for the specified replication instance class. It is a required parameter, although a default value is pre-selected in the DMS console.</p>
    /// <p>For more information on the settings and capacities for the available replication instance classes, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth"> Selecting the right DMS replication instance for your migration</a>. </p>
    pub fn get_replication_instance_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_instance_class
    }
    /// <p>The status of the replication instance. The possible return values include:</p>
    /// <ul>
    /// <li> <p> <code>"available"</code> </p> </li>
    /// <li> <p> <code>"creating"</code> </p> </li>
    /// <li> <p> <code>"deleted"</code> </p> </li>
    /// <li> <p> <code>"deleting"</code> </p> </li>
    /// <li> <p> <code>"failed"</code> </p> </li>
    /// <li> <p> <code>"modifying"</code> </p> </li>
    /// <li> <p> <code>"upgrading"</code> </p> </li>
    /// <li> <p> <code>"rebooting"</code> </p> </li>
    /// <li> <p> <code>"resetting-master-credentials"</code> </p> </li>
    /// <li> <p> <code>"storage-full"</code> </p> </li>
    /// <li> <p> <code>"incompatible-credentials"</code> </p> </li>
    /// <li> <p> <code>"incompatible-network"</code> </p> </li>
    /// <li> <p> <code>"maintenance"</code> </p> </li>
    /// </ul>
    pub fn replication_instance_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_instance_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the replication instance. The possible return values include:</p>
    /// <ul>
    /// <li> <p> <code>"available"</code> </p> </li>
    /// <li> <p> <code>"creating"</code> </p> </li>
    /// <li> <p> <code>"deleted"</code> </p> </li>
    /// <li> <p> <code>"deleting"</code> </p> </li>
    /// <li> <p> <code>"failed"</code> </p> </li>
    /// <li> <p> <code>"modifying"</code> </p> </li>
    /// <li> <p> <code>"upgrading"</code> </p> </li>
    /// <li> <p> <code>"rebooting"</code> </p> </li>
    /// <li> <p> <code>"resetting-master-credentials"</code> </p> </li>
    /// <li> <p> <code>"storage-full"</code> </p> </li>
    /// <li> <p> <code>"incompatible-credentials"</code> </p> </li>
    /// <li> <p> <code>"incompatible-network"</code> </p> </li>
    /// <li> <p> <code>"maintenance"</code> </p> </li>
    /// </ul>
    pub fn set_replication_instance_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_instance_status = input;
        self
    }
    /// <p>The status of the replication instance. The possible return values include:</p>
    /// <ul>
    /// <li> <p> <code>"available"</code> </p> </li>
    /// <li> <p> <code>"creating"</code> </p> </li>
    /// <li> <p> <code>"deleted"</code> </p> </li>
    /// <li> <p> <code>"deleting"</code> </p> </li>
    /// <li> <p> <code>"failed"</code> </p> </li>
    /// <li> <p> <code>"modifying"</code> </p> </li>
    /// <li> <p> <code>"upgrading"</code> </p> </li>
    /// <li> <p> <code>"rebooting"</code> </p> </li>
    /// <li> <p> <code>"resetting-master-credentials"</code> </p> </li>
    /// <li> <p> <code>"storage-full"</code> </p> </li>
    /// <li> <p> <code>"incompatible-credentials"</code> </p> </li>
    /// <li> <p> <code>"incompatible-network"</code> </p> </li>
    /// <li> <p> <code>"maintenance"</code> </p> </li>
    /// </ul>
    pub fn get_replication_instance_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_instance_status
    }
    /// <p>The amount of storage (in gigabytes) that is allocated for the replication instance.</p>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.allocated_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of storage (in gigabytes) that is allocated for the replication instance.</p>
    pub fn set_allocated_storage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.allocated_storage = input;
        self
    }
    /// <p>The amount of storage (in gigabytes) that is allocated for the replication instance.</p>
    pub fn get_allocated_storage(&self) -> &::std::option::Option<i32> {
        &self.allocated_storage
    }
    /// <p>The time the replication instance was created.</p>
    pub fn instance_create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.instance_create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the replication instance was created.</p>
    pub fn set_instance_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.instance_create_time = input;
        self
    }
    /// <p>The time the replication instance was created.</p>
    pub fn get_instance_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.instance_create_time
    }
    /// Appends an item to `vpc_security_groups`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_groups`](Self::set_vpc_security_groups).
    ///
    /// <p>The VPC security group for the instance.</p>
    pub fn vpc_security_groups(mut self, input: crate::types::VpcSecurityGroupMembership) -> Self {
        let mut v = self.vpc_security_groups.unwrap_or_default();
        v.push(input);
        self.vpc_security_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The VPC security group for the instance.</p>
    pub fn set_vpc_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VpcSecurityGroupMembership>>) -> Self {
        self.vpc_security_groups = input;
        self
    }
    /// <p>The VPC security group for the instance.</p>
    pub fn get_vpc_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VpcSecurityGroupMembership>> {
        &self.vpc_security_groups
    }
    /// <p>The Availability Zone for the instance.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone for the instance.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone for the instance.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The subnet group for the replication instance.</p>
    pub fn replication_subnet_group(mut self, input: crate::types::ReplicationSubnetGroup) -> Self {
        self.replication_subnet_group = ::std::option::Option::Some(input);
        self
    }
    /// <p>The subnet group for the replication instance.</p>
    pub fn set_replication_subnet_group(mut self, input: ::std::option::Option<crate::types::ReplicationSubnetGroup>) -> Self {
        self.replication_subnet_group = input;
        self
    }
    /// <p>The subnet group for the replication instance.</p>
    pub fn get_replication_subnet_group(&self) -> &::std::option::Option<crate::types::ReplicationSubnetGroup> {
        &self.replication_subnet_group
    }
    /// <p>The maintenance window times for the replication instance. Any pending upgrades to the replication instance are performed during this time.</p>
    pub fn preferred_maintenance_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_maintenance_window = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maintenance window times for the replication instance. Any pending upgrades to the replication instance are performed during this time.</p>
    pub fn set_preferred_maintenance_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>The maintenance window times for the replication instance. Any pending upgrades to the replication instance are performed during this time.</p>
    pub fn get_preferred_maintenance_window(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_maintenance_window
    }
    /// <p>The pending modification values.</p>
    pub fn pending_modified_values(mut self, input: crate::types::ReplicationPendingModifiedValues) -> Self {
        self.pending_modified_values = ::std::option::Option::Some(input);
        self
    }
    /// <p>The pending modification values.</p>
    pub fn set_pending_modified_values(mut self, input: ::std::option::Option<crate::types::ReplicationPendingModifiedValues>) -> Self {
        self.pending_modified_values = input;
        self
    }
    /// <p>The pending modification values.</p>
    pub fn get_pending_modified_values(&self) -> &::std::option::Option<crate::types::ReplicationPendingModifiedValues> {
        &self.pending_modified_values
    }
    /// <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to <code>true</code>. </p>
    pub fn multi_az(mut self, input: bool) -> Self {
        self.multi_az = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to <code>true</code>. </p>
    pub fn set_multi_az(mut self, input: ::std::option::Option<bool>) -> Self {
        self.multi_az = input;
        self
    }
    /// <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to <code>true</code>. </p>
    pub fn get_multi_az(&self) -> &::std::option::Option<bool> {
        &self.multi_az
    }
    /// <p>The engine version number of the replication instance.</p>
    /// <p>If an engine version number is not specified when a replication instance is created, the default is the latest engine version available.</p>
    /// <p>When modifying a major engine version of an instance, also set <code>AllowMajorVersionUpgrade</code> to <code>true</code>.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The engine version number of the replication instance.</p>
    /// <p>If an engine version number is not specified when a replication instance is created, the default is the latest engine version available.</p>
    /// <p>When modifying a major engine version of an instance, also set <code>AllowMajorVersionUpgrade</code> to <code>true</code>.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The engine version number of the replication instance.</p>
    /// <p>If an engine version number is not specified when a replication instance is created, the default is the latest engine version available.</p>
    /// <p>When modifying a major engine version of an instance, also set <code>AllowMajorVersionUpgrade</code> to <code>true</code>.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>Boolean value indicating if minor version upgrades will be automatically applied to the instance.</p>
    pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
        self.auto_minor_version_upgrade = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean value indicating if minor version upgrades will be automatically applied to the instance.</p>
    pub fn set_auto_minor_version_upgrade(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_minor_version_upgrade = input;
        self
    }
    /// <p>Boolean value indicating if minor version upgrades will be automatically applied to the instance.</p>
    pub fn get_auto_minor_version_upgrade(&self) -> &::std::option::Option<bool> {
        &self.auto_minor_version_upgrade
    }
    /// <p>An KMS key identifier that is used to encrypt the data on the replication instance.</p>
    /// <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then DMS uses your default encryption key.</p>
    /// <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Region.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An KMS key identifier that is used to encrypt the data on the replication instance.</p>
    /// <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then DMS uses your default encryption key.</p>
    /// <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Region.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>An KMS key identifier that is used to encrypt the data on the replication instance.</p>
    /// <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then DMS uses your default encryption key.</p>
    /// <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Region.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>The Amazon Resource Name (ARN) of the replication instance.</p>
    pub fn replication_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replication instance.</p>
    pub fn set_replication_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replication instance.</p>
    pub fn get_replication_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_instance_arn
    }
    /// <p>The public IP address of the replication instance.</p>
    #[deprecated]
    pub fn replication_instance_public_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_instance_public_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public IP address of the replication instance.</p>
    #[deprecated]
    pub fn set_replication_instance_public_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_instance_public_ip_address = input;
        self
    }
    /// <p>The public IP address of the replication instance.</p>
    #[deprecated]
    pub fn get_replication_instance_public_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_instance_public_ip_address
    }
    /// <p>The private IP address of the replication instance.</p>
    #[deprecated]
    pub fn replication_instance_private_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_instance_private_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The private IP address of the replication instance.</p>
    #[deprecated]
    pub fn set_replication_instance_private_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_instance_private_ip_address = input;
        self
    }
    /// <p>The private IP address of the replication instance.</p>
    #[deprecated]
    pub fn get_replication_instance_private_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_instance_private_ip_address
    }
    /// Appends an item to `replication_instance_public_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_replication_instance_public_ip_addresses`](Self::set_replication_instance_public_ip_addresses).
    ///
    /// <p>One or more public IP addresses for the replication instance.</p>
    pub fn replication_instance_public_ip_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.replication_instance_public_ip_addresses.unwrap_or_default();
        v.push(input.into());
        self.replication_instance_public_ip_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more public IP addresses for the replication instance.</p>
    pub fn set_replication_instance_public_ip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.replication_instance_public_ip_addresses = input;
        self
    }
    /// <p>One or more public IP addresses for the replication instance.</p>
    pub fn get_replication_instance_public_ip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.replication_instance_public_ip_addresses
    }
    /// Appends an item to `replication_instance_private_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_replication_instance_private_ip_addresses`](Self::set_replication_instance_private_ip_addresses).
    ///
    /// <p>One or more private IP addresses for the replication instance.</p>
    pub fn replication_instance_private_ip_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.replication_instance_private_ip_addresses.unwrap_or_default();
        v.push(input.into());
        self.replication_instance_private_ip_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more private IP addresses for the replication instance.</p>
    pub fn set_replication_instance_private_ip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.replication_instance_private_ip_addresses = input;
        self
    }
    /// <p>One or more private IP addresses for the replication instance.</p>
    pub fn get_replication_instance_private_ip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.replication_instance_private_ip_addresses
    }
    /// Appends an item to `replication_instance_ipv6_addresses`.
    ///
    /// To override the contents of this collection use [`set_replication_instance_ipv6_addresses`](Self::set_replication_instance_ipv6_addresses).
    ///
    /// <p>One or more IPv6 addresses for the replication instance.</p>
    pub fn replication_instance_ipv6_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.replication_instance_ipv6_addresses.unwrap_or_default();
        v.push(input.into());
        self.replication_instance_ipv6_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more IPv6 addresses for the replication instance.</p>
    pub fn set_replication_instance_ipv6_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.replication_instance_ipv6_addresses = input;
        self
    }
    /// <p>One or more IPv6 addresses for the replication instance.</p>
    pub fn get_replication_instance_ipv6_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.replication_instance_ipv6_addresses
    }
    /// <p> Specifies the accessibility options for the replication instance. A value of <code>true</code> represents an instance with a public IP address. A value of <code>false</code> represents an instance with a private IP address. The default value is <code>true</code>. </p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies the accessibility options for the replication instance. A value of <code>true</code> represents an instance with a public IP address. A value of <code>false</code> represents an instance with a private IP address. The default value is <code>true</code>. </p>
    pub fn set_publicly_accessible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p> Specifies the accessibility options for the replication instance. A value of <code>true</code> represents an instance with a public IP address. A value of <code>false</code> represents an instance with a private IP address. The default value is <code>true</code>. </p>
    pub fn get_publicly_accessible(&self) -> &::std::option::Option<bool> {
        &self.publicly_accessible
    }
    /// <p>The Availability Zone of the standby replication instance in a Multi-AZ deployment.</p>
    pub fn secondary_availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secondary_availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone of the standby replication instance in a Multi-AZ deployment.</p>
    pub fn set_secondary_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secondary_availability_zone = input;
        self
    }
    /// <p>The Availability Zone of the standby replication instance in a Multi-AZ deployment.</p>
    pub fn get_secondary_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.secondary_availability_zone
    }
    /// <p> The expiration date of the free replication instance that is part of the Free DMS program. </p>
    pub fn free_until(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.free_until = ::std::option::Option::Some(input);
        self
    }
    /// <p> The expiration date of the free replication instance that is part of the Free DMS program. </p>
    pub fn set_free_until(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.free_until = input;
        self
    }
    /// <p> The expiration date of the free replication instance that is part of the Free DMS program. </p>
    pub fn get_free_until(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.free_until
    }
    /// <p>The DNS name servers supported for the replication instance to access your on-premise source or target database.</p>
    pub fn dns_name_servers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dns_name_servers = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS name servers supported for the replication instance to access your on-premise source or target database.</p>
    pub fn set_dns_name_servers(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dns_name_servers = input;
        self
    }
    /// <p>The DNS name servers supported for the replication instance to access your on-premise source or target database.</p>
    pub fn get_dns_name_servers(&self) -> &::std::option::Option<::std::string::String> {
        &self.dns_name_servers
    }
    /// <p>The type of IP address protocol used by a replication instance, such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    pub fn network_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of IP address protocol used by a replication instance, such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    pub fn set_network_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_type = input;
        self
    }
    /// <p>The type of IP address protocol used by a replication instance, such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    pub fn get_network_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_type
    }
    /// Consumes the builder and constructs a [`ReplicationInstance`](crate::types::ReplicationInstance).
    pub fn build(self) -> crate::types::ReplicationInstance {
        crate::types::ReplicationInstance {
            replication_instance_identifier: self.replication_instance_identifier,
            replication_instance_class: self.replication_instance_class,
            replication_instance_status: self.replication_instance_status,
            allocated_storage: self.allocated_storage.unwrap_or_default(),
            instance_create_time: self.instance_create_time,
            vpc_security_groups: self.vpc_security_groups,
            availability_zone: self.availability_zone,
            replication_subnet_group: self.replication_subnet_group,
            preferred_maintenance_window: self.preferred_maintenance_window,
            pending_modified_values: self.pending_modified_values,
            multi_az: self.multi_az.unwrap_or_default(),
            engine_version: self.engine_version,
            auto_minor_version_upgrade: self.auto_minor_version_upgrade.unwrap_or_default(),
            kms_key_id: self.kms_key_id,
            replication_instance_arn: self.replication_instance_arn,
            replication_instance_public_ip_address: self.replication_instance_public_ip_address,
            replication_instance_private_ip_address: self.replication_instance_private_ip_address,
            replication_instance_public_ip_addresses: self.replication_instance_public_ip_addresses,
            replication_instance_private_ip_addresses: self.replication_instance_private_ip_addresses,
            replication_instance_ipv6_addresses: self.replication_instance_ipv6_addresses,
            publicly_accessible: self.publicly_accessible.unwrap_or_default(),
            secondary_availability_zone: self.secondary_availability_zone,
            free_until: self.free_until,
            dns_name_servers: self.dns_name_servers,
            network_type: self.network_type,
        }
    }
}
