// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a subnet group in response to a request by the <code>DescribeReplicationSubnetGroups</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicationSubnetGroup {
    /// <p>The identifier of the replication instance subnet group.</p>
    pub replication_subnet_group_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A description for the replication subnet group.</p>
    pub replication_subnet_group_description: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the subnet group.</p>
    pub subnet_group_status: ::std::option::Option<::std::string::String>,
    /// <p>The subnets that are in the subnet group.</p>
    pub subnets: ::std::option::Option<::std::vec::Vec<crate::types::Subnet>>,
    /// <p>The IP addressing protocol supported by the subnet group. This is used by a replication instance with values such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    pub supported_network_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ReplicationSubnetGroup {
    /// <p>The identifier of the replication instance subnet group.</p>
    pub fn replication_subnet_group_identifier(&self) -> ::std::option::Option<&str> {
        self.replication_subnet_group_identifier.as_deref()
    }
    /// <p>A description for the replication subnet group.</p>
    pub fn replication_subnet_group_description(&self) -> ::std::option::Option<&str> {
        self.replication_subnet_group_description.as_deref()
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The status of the subnet group.</p>
    pub fn subnet_group_status(&self) -> ::std::option::Option<&str> {
        self.subnet_group_status.as_deref()
    }
    /// <p>The subnets that are in the subnet group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnets.is_none()`.
    pub fn subnets(&self) -> &[crate::types::Subnet] {
        self.subnets.as_deref().unwrap_or_default()
    }
    /// <p>The IP addressing protocol supported by the subnet group. This is used by a replication instance with values such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supported_network_types.is_none()`.
    pub fn supported_network_types(&self) -> &[::std::string::String] {
        self.supported_network_types.as_deref().unwrap_or_default()
    }
}
impl ReplicationSubnetGroup {
    /// Creates a new builder-style object to manufacture [`ReplicationSubnetGroup`](crate::types::ReplicationSubnetGroup).
    pub fn builder() -> crate::types::builders::ReplicationSubnetGroupBuilder {
        crate::types::builders::ReplicationSubnetGroupBuilder::default()
    }
}

/// A builder for [`ReplicationSubnetGroup`](crate::types::ReplicationSubnetGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReplicationSubnetGroupBuilder {
    pub(crate) replication_subnet_group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) replication_subnet_group_description: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_group_status: ::std::option::Option<::std::string::String>,
    pub(crate) subnets: ::std::option::Option<::std::vec::Vec<crate::types::Subnet>>,
    pub(crate) supported_network_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ReplicationSubnetGroupBuilder {
    /// <p>The identifier of the replication instance subnet group.</p>
    pub fn replication_subnet_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_subnet_group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the replication instance subnet group.</p>
    pub fn set_replication_subnet_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_subnet_group_identifier = input;
        self
    }
    /// <p>The identifier of the replication instance subnet group.</p>
    pub fn get_replication_subnet_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_subnet_group_identifier
    }
    /// <p>A description for the replication subnet group.</p>
    pub fn replication_subnet_group_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_subnet_group_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the replication subnet group.</p>
    pub fn set_replication_subnet_group_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_subnet_group_description = input;
        self
    }
    /// <p>A description for the replication subnet group.</p>
    pub fn get_replication_subnet_group_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_subnet_group_description
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The status of the subnet group.</p>
    pub fn subnet_group_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_group_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the subnet group.</p>
    pub fn set_subnet_group_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_group_status = input;
        self
    }
    /// <p>The status of the subnet group.</p>
    pub fn get_subnet_group_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_group_status
    }
    /// Appends an item to `subnets`.
    ///
    /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
    ///
    /// <p>The subnets that are in the subnet group.</p>
    pub fn subnets(mut self, input: crate::types::Subnet) -> Self {
        let mut v = self.subnets.unwrap_or_default();
        v.push(input);
        self.subnets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The subnets that are in the subnet group.</p>
    pub fn set_subnets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Subnet>>) -> Self {
        self.subnets = input;
        self
    }
    /// <p>The subnets that are in the subnet group.</p>
    pub fn get_subnets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Subnet>> {
        &self.subnets
    }
    /// Appends an item to `supported_network_types`.
    ///
    /// To override the contents of this collection use [`set_supported_network_types`](Self::set_supported_network_types).
    ///
    /// <p>The IP addressing protocol supported by the subnet group. This is used by a replication instance with values such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    pub fn supported_network_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.supported_network_types.unwrap_or_default();
        v.push(input.into());
        self.supported_network_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IP addressing protocol supported by the subnet group. This is used by a replication instance with values such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    pub fn set_supported_network_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.supported_network_types = input;
        self
    }
    /// <p>The IP addressing protocol supported by the subnet group. This is used by a replication instance with values such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    pub fn get_supported_network_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.supported_network_types
    }
    /// Consumes the builder and constructs a [`ReplicationSubnetGroup`](crate::types::ReplicationSubnetGroup).
    pub fn build(self) -> crate::types::ReplicationSubnetGroup {
        crate::types::ReplicationSubnetGroup {
            replication_subnet_group_identifier: self.replication_subnet_group_identifier,
            replication_subnet_group_description: self.replication_subnet_group_description,
            vpc_id: self.vpc_id,
            subnet_group_status: self.subnet_group_status,
            subnets: self.subnets,
            supported_network_types: self.supported_network_types,
        }
    }
}
