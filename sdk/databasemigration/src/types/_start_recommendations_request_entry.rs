// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the source database to analyze and provide target recommendations according to the specified requirements.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartRecommendationsRequestEntry {
    /// <p>The identifier of the source database.</p>
    pub database_id: ::std::string::String,
    /// <p>The required target engine settings.</p>
    pub settings: ::std::option::Option<crate::types::RecommendationSettings>,
}
impl StartRecommendationsRequestEntry {
    /// <p>The identifier of the source database.</p>
    pub fn database_id(&self) -> &str {
        use std::ops::Deref;
        self.database_id.deref()
    }
    /// <p>The required target engine settings.</p>
    pub fn settings(&self) -> ::std::option::Option<&crate::types::RecommendationSettings> {
        self.settings.as_ref()
    }
}
impl StartRecommendationsRequestEntry {
    /// Creates a new builder-style object to manufacture [`StartRecommendationsRequestEntry`](crate::types::StartRecommendationsRequestEntry).
    pub fn builder() -> crate::types::builders::StartRecommendationsRequestEntryBuilder {
        crate::types::builders::StartRecommendationsRequestEntryBuilder::default()
    }
}

/// A builder for [`StartRecommendationsRequestEntry`](crate::types::StartRecommendationsRequestEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartRecommendationsRequestEntryBuilder {
    pub(crate) database_id: ::std::option::Option<::std::string::String>,
    pub(crate) settings: ::std::option::Option<crate::types::RecommendationSettings>,
}
impl StartRecommendationsRequestEntryBuilder {
    /// <p>The identifier of the source database.</p>
    /// This field is required.
    pub fn database_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the source database.</p>
    pub fn set_database_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_id = input;
        self
    }
    /// <p>The identifier of the source database.</p>
    pub fn get_database_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_id
    }
    /// <p>The required target engine settings.</p>
    /// This field is required.
    pub fn settings(mut self, input: crate::types::RecommendationSettings) -> Self {
        self.settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The required target engine settings.</p>
    pub fn set_settings(mut self, input: ::std::option::Option<crate::types::RecommendationSettings>) -> Self {
        self.settings = input;
        self
    }
    /// <p>The required target engine settings.</p>
    pub fn get_settings(&self) -> &::std::option::Option<crate::types::RecommendationSettings> {
        &self.settings
    }
    /// Consumes the builder and constructs a [`StartRecommendationsRequestEntry`](crate::types::StartRecommendationsRequestEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`database_id`](crate::types::builders::StartRecommendationsRequestEntryBuilder::database_id)
    pub fn build(self) -> ::std::result::Result<crate::types::StartRecommendationsRequestEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StartRecommendationsRequestEntry {
            database_id: self.database_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database_id",
                    "database_id was not specified but it is required when building StartRecommendationsRequestEntry",
                )
            })?,
            settings: self.settings,
        })
    }
}
