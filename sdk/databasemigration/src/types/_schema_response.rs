// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a schema in a Fleet Advisor collector inventory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SchemaResponse {
    /// <p>The number of lines of code in a schema in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub code_line_count: std::option::Option<i64>,
    /// <p>The size level of the code in a schema in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub code_size: std::option::Option<i64>,
    /// <p>The complexity level of the code in a schema in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub complexity: std::option::Option<std::string::String>,
    /// <p>The database server for a schema in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub server: std::option::Option<crate::types::ServerShortInfoResponse>,
    /// <p>The database for a schema in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub database_instance: std::option::Option<crate::types::DatabaseShortInfoResponse>,
    /// <p>The ID of a schema in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub schema_id: std::option::Option<std::string::String>,
    /// <p>The name of a schema in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub schema_name: std::option::Option<std::string::String>,
    /// <p>Describes a schema in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub original_schema: std::option::Option<crate::types::SchemaShortInfoResponse>,
    /// <p>The similarity value for a schema in a Fleet Advisor collector inventory. A higher similarity value indicates that a schema is likely to be a duplicate.</p>
    #[doc(hidden)]
    pub similarity: std::option::Option<f64>,
}
impl SchemaResponse {
    /// <p>The number of lines of code in a schema in a Fleet Advisor collector inventory.</p>
    pub fn code_line_count(&self) -> std::option::Option<i64> {
        self.code_line_count
    }
    /// <p>The size level of the code in a schema in a Fleet Advisor collector inventory.</p>
    pub fn code_size(&self) -> std::option::Option<i64> {
        self.code_size
    }
    /// <p>The complexity level of the code in a schema in a Fleet Advisor collector inventory.</p>
    pub fn complexity(&self) -> std::option::Option<&str> {
        self.complexity.as_deref()
    }
    /// <p>The database server for a schema in a Fleet Advisor collector inventory.</p>
    pub fn server(&self) -> std::option::Option<&crate::types::ServerShortInfoResponse> {
        self.server.as_ref()
    }
    /// <p>The database for a schema in a Fleet Advisor collector inventory.</p>
    pub fn database_instance(
        &self,
    ) -> std::option::Option<&crate::types::DatabaseShortInfoResponse> {
        self.database_instance.as_ref()
    }
    /// <p>The ID of a schema in a Fleet Advisor collector inventory.</p>
    pub fn schema_id(&self) -> std::option::Option<&str> {
        self.schema_id.as_deref()
    }
    /// <p>The name of a schema in a Fleet Advisor collector inventory.</p>
    pub fn schema_name(&self) -> std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// <p>Describes a schema in a Fleet Advisor collector inventory.</p>
    pub fn original_schema(&self) -> std::option::Option<&crate::types::SchemaShortInfoResponse> {
        self.original_schema.as_ref()
    }
    /// <p>The similarity value for a schema in a Fleet Advisor collector inventory. A higher similarity value indicates that a schema is likely to be a duplicate.</p>
    pub fn similarity(&self) -> std::option::Option<f64> {
        self.similarity
    }
}
impl SchemaResponse {
    /// Creates a new builder-style object to manufacture [`SchemaResponse`](crate::types::SchemaResponse).
    pub fn builder() -> crate::types::builders::SchemaResponseBuilder {
        crate::types::builders::SchemaResponseBuilder::default()
    }
}

/// A builder for [`SchemaResponse`](crate::types::SchemaResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SchemaResponseBuilder {
    pub(crate) code_line_count: std::option::Option<i64>,
    pub(crate) code_size: std::option::Option<i64>,
    pub(crate) complexity: std::option::Option<std::string::String>,
    pub(crate) server: std::option::Option<crate::types::ServerShortInfoResponse>,
    pub(crate) database_instance: std::option::Option<crate::types::DatabaseShortInfoResponse>,
    pub(crate) schema_id: std::option::Option<std::string::String>,
    pub(crate) schema_name: std::option::Option<std::string::String>,
    pub(crate) original_schema: std::option::Option<crate::types::SchemaShortInfoResponse>,
    pub(crate) similarity: std::option::Option<f64>,
}
impl SchemaResponseBuilder {
    /// <p>The number of lines of code in a schema in a Fleet Advisor collector inventory.</p>
    pub fn code_line_count(mut self, input: i64) -> Self {
        self.code_line_count = Some(input);
        self
    }
    /// <p>The number of lines of code in a schema in a Fleet Advisor collector inventory.</p>
    pub fn set_code_line_count(mut self, input: std::option::Option<i64>) -> Self {
        self.code_line_count = input;
        self
    }
    /// <p>The size level of the code in a schema in a Fleet Advisor collector inventory.</p>
    pub fn code_size(mut self, input: i64) -> Self {
        self.code_size = Some(input);
        self
    }
    /// <p>The size level of the code in a schema in a Fleet Advisor collector inventory.</p>
    pub fn set_code_size(mut self, input: std::option::Option<i64>) -> Self {
        self.code_size = input;
        self
    }
    /// <p>The complexity level of the code in a schema in a Fleet Advisor collector inventory.</p>
    pub fn complexity(mut self, input: impl Into<std::string::String>) -> Self {
        self.complexity = Some(input.into());
        self
    }
    /// <p>The complexity level of the code in a schema in a Fleet Advisor collector inventory.</p>
    pub fn set_complexity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.complexity = input;
        self
    }
    /// <p>The database server for a schema in a Fleet Advisor collector inventory.</p>
    pub fn server(mut self, input: crate::types::ServerShortInfoResponse) -> Self {
        self.server = Some(input);
        self
    }
    /// <p>The database server for a schema in a Fleet Advisor collector inventory.</p>
    pub fn set_server(
        mut self,
        input: std::option::Option<crate::types::ServerShortInfoResponse>,
    ) -> Self {
        self.server = input;
        self
    }
    /// <p>The database for a schema in a Fleet Advisor collector inventory.</p>
    pub fn database_instance(mut self, input: crate::types::DatabaseShortInfoResponse) -> Self {
        self.database_instance = Some(input);
        self
    }
    /// <p>The database for a schema in a Fleet Advisor collector inventory.</p>
    pub fn set_database_instance(
        mut self,
        input: std::option::Option<crate::types::DatabaseShortInfoResponse>,
    ) -> Self {
        self.database_instance = input;
        self
    }
    /// <p>The ID of a schema in a Fleet Advisor collector inventory.</p>
    pub fn schema_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_id = Some(input.into());
        self
    }
    /// <p>The ID of a schema in a Fleet Advisor collector inventory.</p>
    pub fn set_schema_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_id = input;
        self
    }
    /// <p>The name of a schema in a Fleet Advisor collector inventory.</p>
    pub fn schema_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_name = Some(input.into());
        self
    }
    /// <p>The name of a schema in a Fleet Advisor collector inventory.</p>
    pub fn set_schema_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>Describes a schema in a Fleet Advisor collector inventory.</p>
    pub fn original_schema(mut self, input: crate::types::SchemaShortInfoResponse) -> Self {
        self.original_schema = Some(input);
        self
    }
    /// <p>Describes a schema in a Fleet Advisor collector inventory.</p>
    pub fn set_original_schema(
        mut self,
        input: std::option::Option<crate::types::SchemaShortInfoResponse>,
    ) -> Self {
        self.original_schema = input;
        self
    }
    /// <p>The similarity value for a schema in a Fleet Advisor collector inventory. A higher similarity value indicates that a schema is likely to be a duplicate.</p>
    pub fn similarity(mut self, input: f64) -> Self {
        self.similarity = Some(input);
        self
    }
    /// <p>The similarity value for a schema in a Fleet Advisor collector inventory. A higher similarity value indicates that a schema is likely to be a duplicate.</p>
    pub fn set_similarity(mut self, input: std::option::Option<f64>) -> Self {
        self.similarity = input;
        self
    }
    /// Consumes the builder and constructs a [`SchemaResponse`](crate::types::SchemaResponse).
    pub fn build(self) -> crate::types::SchemaResponse {
        crate::types::SchemaResponse {
            code_line_count: self.code_line_count,
            code_size: self.code_size,
            complexity: self.complexity,
            server: self.server,
            database_instance: self.database_instance,
            schema_id: self.schema_id,
            schema_name: self.schema_name,
            original_schema: self.original_schema,
            similarity: self.similarity,
        }
    }
}
