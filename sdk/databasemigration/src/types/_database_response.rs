// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a database in a Fleet Advisor collector inventory.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatabaseResponse {
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    pub database_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of a database in a Fleet Advisor collector inventory. </p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of a database in a Fleet Advisor collector inventory. </p>
    pub ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The number of schemas in a Fleet Advisor collector inventory database. </p>
    pub number_of_schemas: ::std::option::Option<i64>,
    /// <p>The server name of a database in a Fleet Advisor collector inventory. </p>
    pub server: ::std::option::Option<crate::types::ServerShortInfoResponse>,
    /// <p>The software details of a database in a Fleet Advisor collector inventory, such as database engine and version.</p>
    pub software_details: ::std::option::Option<crate::types::DatabaseInstanceSoftwareDetailsResponse>,
    /// <p>A list of collectors associated with the database.</p>
    pub collectors: ::std::option::Option<::std::vec::Vec<crate::types::CollectorShortInfoResponse>>,
}
impl DatabaseResponse {
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_id(&self) -> ::std::option::Option<&str> {
        self.database_id.as_deref()
    }
    /// <p>The name of a database in a Fleet Advisor collector inventory. </p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The IP address of a database in a Fleet Advisor collector inventory. </p>
    pub fn ip_address(&self) -> ::std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>The number of schemas in a Fleet Advisor collector inventory database. </p>
    pub fn number_of_schemas(&self) -> ::std::option::Option<i64> {
        self.number_of_schemas
    }
    /// <p>The server name of a database in a Fleet Advisor collector inventory. </p>
    pub fn server(&self) -> ::std::option::Option<&crate::types::ServerShortInfoResponse> {
        self.server.as_ref()
    }
    /// <p>The software details of a database in a Fleet Advisor collector inventory, such as database engine and version.</p>
    pub fn software_details(&self) -> ::std::option::Option<&crate::types::DatabaseInstanceSoftwareDetailsResponse> {
        self.software_details.as_ref()
    }
    /// <p>A list of collectors associated with the database.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.collectors.is_none()`.
    pub fn collectors(&self) -> &[crate::types::CollectorShortInfoResponse] {
        self.collectors.as_deref().unwrap_or_default()
    }
}
impl DatabaseResponse {
    /// Creates a new builder-style object to manufacture [`DatabaseResponse`](crate::types::DatabaseResponse).
    pub fn builder() -> crate::types::builders::DatabaseResponseBuilder {
        crate::types::builders::DatabaseResponseBuilder::default()
    }
}

/// A builder for [`DatabaseResponse`](crate::types::DatabaseResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatabaseResponseBuilder {
    pub(crate) database_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_schemas: ::std::option::Option<i64>,
    pub(crate) server: ::std::option::Option<crate::types::ServerShortInfoResponse>,
    pub(crate) software_details: ::std::option::Option<crate::types::DatabaseInstanceSoftwareDetailsResponse>,
    pub(crate) collectors: ::std::option::Option<::std::vec::Vec<crate::types::CollectorShortInfoResponse>>,
}
impl DatabaseResponseBuilder {
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    pub fn set_database_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_id = input;
        self
    }
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    pub fn get_database_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_id
    }
    /// <p>The name of a database in a Fleet Advisor collector inventory. </p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a database in a Fleet Advisor collector inventory. </p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of a database in a Fleet Advisor collector inventory. </p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The IP address of a database in a Fleet Advisor collector inventory. </p>
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of a database in a Fleet Advisor collector inventory. </p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The IP address of a database in a Fleet Advisor collector inventory. </p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// <p>The number of schemas in a Fleet Advisor collector inventory database. </p>
    pub fn number_of_schemas(mut self, input: i64) -> Self {
        self.number_of_schemas = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of schemas in a Fleet Advisor collector inventory database. </p>
    pub fn set_number_of_schemas(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_schemas = input;
        self
    }
    /// <p>The number of schemas in a Fleet Advisor collector inventory database. </p>
    pub fn get_number_of_schemas(&self) -> &::std::option::Option<i64> {
        &self.number_of_schemas
    }
    /// <p>The server name of a database in a Fleet Advisor collector inventory. </p>
    pub fn server(mut self, input: crate::types::ServerShortInfoResponse) -> Self {
        self.server = ::std::option::Option::Some(input);
        self
    }
    /// <p>The server name of a database in a Fleet Advisor collector inventory. </p>
    pub fn set_server(mut self, input: ::std::option::Option<crate::types::ServerShortInfoResponse>) -> Self {
        self.server = input;
        self
    }
    /// <p>The server name of a database in a Fleet Advisor collector inventory. </p>
    pub fn get_server(&self) -> &::std::option::Option<crate::types::ServerShortInfoResponse> {
        &self.server
    }
    /// <p>The software details of a database in a Fleet Advisor collector inventory, such as database engine and version.</p>
    pub fn software_details(mut self, input: crate::types::DatabaseInstanceSoftwareDetailsResponse) -> Self {
        self.software_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The software details of a database in a Fleet Advisor collector inventory, such as database engine and version.</p>
    pub fn set_software_details(mut self, input: ::std::option::Option<crate::types::DatabaseInstanceSoftwareDetailsResponse>) -> Self {
        self.software_details = input;
        self
    }
    /// <p>The software details of a database in a Fleet Advisor collector inventory, such as database engine and version.</p>
    pub fn get_software_details(&self) -> &::std::option::Option<crate::types::DatabaseInstanceSoftwareDetailsResponse> {
        &self.software_details
    }
    /// Appends an item to `collectors`.
    ///
    /// To override the contents of this collection use [`set_collectors`](Self::set_collectors).
    ///
    /// <p>A list of collectors associated with the database.</p>
    pub fn collectors(mut self, input: crate::types::CollectorShortInfoResponse) -> Self {
        let mut v = self.collectors.unwrap_or_default();
        v.push(input);
        self.collectors = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of collectors associated with the database.</p>
    pub fn set_collectors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CollectorShortInfoResponse>>) -> Self {
        self.collectors = input;
        self
    }
    /// <p>A list of collectors associated with the database.</p>
    pub fn get_collectors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CollectorShortInfoResponse>> {
        &self.collectors
    }
    /// Consumes the builder and constructs a [`DatabaseResponse`](crate::types::DatabaseResponse).
    pub fn build(self) -> crate::types::DatabaseResponse {
        crate::types::DatabaseResponse {
            database_id: self.database_id,
            database_name: self.database_name,
            ip_address: self.ip_address,
            number_of_schemas: self.number_of_schemas,
            server: self.server,
            software_details: self.software_details,
            collectors: self.collectors,
        }
    }
}
