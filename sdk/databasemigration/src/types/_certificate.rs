// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SSL certificate that can be used to encrypt connections between the endpoints and the replication instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Certificate {
    /// <p>A customer-assigned name for the certificate. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two consecutive hyphens.</p>
    #[doc(hidden)]
    pub certificate_identifier: std::option::Option<std::string::String>,
    /// <p>The date that the certificate was created.</p>
    #[doc(hidden)]
    pub certificate_creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The contents of a <code>.pem</code> file, which contains an X.509 certificate.</p>
    #[doc(hidden)]
    pub certificate_pem: std::option::Option<std::string::String>,
    /// <p>The location of an imported Oracle Wallet certificate for use with SSL. Example: <code>filebase64("${path.root}/rds-ca-2019-root.sso")</code> </p>
    #[doc(hidden)]
    pub certificate_wallet: std::option::Option<aws_smithy_types::Blob>,
    /// <p>The Amazon Resource Name (ARN) for the certificate.</p>
    #[doc(hidden)]
    pub certificate_arn: std::option::Option<std::string::String>,
    /// <p>The owner of the certificate.</p>
    #[doc(hidden)]
    pub certificate_owner: std::option::Option<std::string::String>,
    /// <p>The beginning date that the certificate is valid.</p>
    #[doc(hidden)]
    pub valid_from_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The final date that the certificate is valid.</p>
    #[doc(hidden)]
    pub valid_to_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The signing algorithm for the certificate.</p>
    #[doc(hidden)]
    pub signing_algorithm: std::option::Option<std::string::String>,
    /// <p>The key length of the cryptographic algorithm being used.</p>
    #[doc(hidden)]
    pub key_length: std::option::Option<i32>,
}
impl Certificate {
    /// <p>A customer-assigned name for the certificate. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two consecutive hyphens.</p>
    pub fn certificate_identifier(&self) -> std::option::Option<&str> {
        self.certificate_identifier.as_deref()
    }
    /// <p>The date that the certificate was created.</p>
    pub fn certificate_creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.certificate_creation_date.as_ref()
    }
    /// <p>The contents of a <code>.pem</code> file, which contains an X.509 certificate.</p>
    pub fn certificate_pem(&self) -> std::option::Option<&str> {
        self.certificate_pem.as_deref()
    }
    /// <p>The location of an imported Oracle Wallet certificate for use with SSL. Example: <code>filebase64("${path.root}/rds-ca-2019-root.sso")</code> </p>
    pub fn certificate_wallet(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.certificate_wallet.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) for the certificate.</p>
    pub fn certificate_arn(&self) -> std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>The owner of the certificate.</p>
    pub fn certificate_owner(&self) -> std::option::Option<&str> {
        self.certificate_owner.as_deref()
    }
    /// <p>The beginning date that the certificate is valid.</p>
    pub fn valid_from_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.valid_from_date.as_ref()
    }
    /// <p>The final date that the certificate is valid.</p>
    pub fn valid_to_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.valid_to_date.as_ref()
    }
    /// <p>The signing algorithm for the certificate.</p>
    pub fn signing_algorithm(&self) -> std::option::Option<&str> {
        self.signing_algorithm.as_deref()
    }
    /// <p>The key length of the cryptographic algorithm being used.</p>
    pub fn key_length(&self) -> std::option::Option<i32> {
        self.key_length
    }
}
impl Certificate {
    /// Creates a new builder-style object to manufacture [`Certificate`](crate::types::Certificate).
    pub fn builder() -> crate::types::builders::CertificateBuilder {
        crate::types::builders::CertificateBuilder::default()
    }
}

/// A builder for [`Certificate`](crate::types::Certificate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CertificateBuilder {
    pub(crate) certificate_identifier: std::option::Option<std::string::String>,
    pub(crate) certificate_creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) certificate_pem: std::option::Option<std::string::String>,
    pub(crate) certificate_wallet: std::option::Option<aws_smithy_types::Blob>,
    pub(crate) certificate_arn: std::option::Option<std::string::String>,
    pub(crate) certificate_owner: std::option::Option<std::string::String>,
    pub(crate) valid_from_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) valid_to_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) signing_algorithm: std::option::Option<std::string::String>,
    pub(crate) key_length: std::option::Option<i32>,
}
impl CertificateBuilder {
    /// <p>A customer-assigned name for the certificate. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two consecutive hyphens.</p>
    pub fn certificate_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_identifier = Some(input.into());
        self
    }
    /// <p>A customer-assigned name for the certificate. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two consecutive hyphens.</p>
    pub fn set_certificate_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.certificate_identifier = input;
        self
    }
    /// <p>The date that the certificate was created.</p>
    pub fn certificate_creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.certificate_creation_date = Some(input);
        self
    }
    /// <p>The date that the certificate was created.</p>
    pub fn set_certificate_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.certificate_creation_date = input;
        self
    }
    /// <p>The contents of a <code>.pem</code> file, which contains an X.509 certificate.</p>
    pub fn certificate_pem(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_pem = Some(input.into());
        self
    }
    /// <p>The contents of a <code>.pem</code> file, which contains an X.509 certificate.</p>
    pub fn set_certificate_pem(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_pem = input;
        self
    }
    /// <p>The location of an imported Oracle Wallet certificate for use with SSL. Example: <code>filebase64("${path.root}/rds-ca-2019-root.sso")</code> </p>
    pub fn certificate_wallet(mut self, input: aws_smithy_types::Blob) -> Self {
        self.certificate_wallet = Some(input);
        self
    }
    /// <p>The location of an imported Oracle Wallet certificate for use with SSL. Example: <code>filebase64("${path.root}/rds-ca-2019-root.sso")</code> </p>
    pub fn set_certificate_wallet(
        mut self,
        input: std::option::Option<aws_smithy_types::Blob>,
    ) -> Self {
        self.certificate_wallet = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the certificate.</p>
    pub fn certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the certificate.</p>
    pub fn set_certificate_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>The owner of the certificate.</p>
    pub fn certificate_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_owner = Some(input.into());
        self
    }
    /// <p>The owner of the certificate.</p>
    pub fn set_certificate_owner(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.certificate_owner = input;
        self
    }
    /// <p>The beginning date that the certificate is valid.</p>
    pub fn valid_from_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.valid_from_date = Some(input);
        self
    }
    /// <p>The beginning date that the certificate is valid.</p>
    pub fn set_valid_from_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.valid_from_date = input;
        self
    }
    /// <p>The final date that the certificate is valid.</p>
    pub fn valid_to_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.valid_to_date = Some(input);
        self
    }
    /// <p>The final date that the certificate is valid.</p>
    pub fn set_valid_to_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.valid_to_date = input;
        self
    }
    /// <p>The signing algorithm for the certificate.</p>
    pub fn signing_algorithm(mut self, input: impl Into<std::string::String>) -> Self {
        self.signing_algorithm = Some(input.into());
        self
    }
    /// <p>The signing algorithm for the certificate.</p>
    pub fn set_signing_algorithm(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.signing_algorithm = input;
        self
    }
    /// <p>The key length of the cryptographic algorithm being used.</p>
    pub fn key_length(mut self, input: i32) -> Self {
        self.key_length = Some(input);
        self
    }
    /// <p>The key length of the cryptographic algorithm being used.</p>
    pub fn set_key_length(mut self, input: std::option::Option<i32>) -> Self {
        self.key_length = input;
        self
    }
    /// Consumes the builder and constructs a [`Certificate`](crate::types::Certificate).
    pub fn build(self) -> crate::types::Certificate {
        crate::types::Certificate {
            certificate_identifier: self.certificate_identifier,
            certificate_creation_date: self.certificate_creation_date,
            certificate_pem: self.certificate_pem,
            certificate_wallet: self.certificate_wallet,
            certificate_arn: self.certificate_arn,
            certificate_owner: self.certificate_owner,
            valid_from_date: self.valid_from_date,
            valid_to_date: self.valid_to_date,
            signing_algorithm: self.signing_algorithm,
            key_length: self.key_length,
        }
    }
}
