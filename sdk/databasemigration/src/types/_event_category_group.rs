// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Lists categories of events subscribed to, and generated by, the applicable DMS resource type. This data type appears in response to the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_EventCategoryGroup.html"> <code>DescribeEventCategories</code> </a> action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventCategoryGroup {
    /// <p> The type of DMS resource that generates events. </p>
    /// <p>Valid values: replication-instance | replication-server | security-group | replication-task</p>
    pub source_type: ::std::option::Option<::std::string::String>,
    /// <p> A list of event categories from a source type that you've chosen.</p>
    pub event_categories: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EventCategoryGroup {
    /// <p> The type of DMS resource that generates events. </p>
    /// <p>Valid values: replication-instance | replication-server | security-group | replication-task</p>
    pub fn source_type(&self) -> ::std::option::Option<&str> {
        self.source_type.as_deref()
    }
    /// <p> A list of event categories from a source type that you've chosen.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_categories.is_none()`.
    pub fn event_categories(&self) -> &[::std::string::String] {
        self.event_categories.as_deref().unwrap_or_default()
    }
}
impl EventCategoryGroup {
    /// Creates a new builder-style object to manufacture [`EventCategoryGroup`](crate::types::EventCategoryGroup).
    pub fn builder() -> crate::types::builders::EventCategoryGroupBuilder {
        crate::types::builders::EventCategoryGroupBuilder::default()
    }
}

/// A builder for [`EventCategoryGroup`](crate::types::EventCategoryGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EventCategoryGroupBuilder {
    pub(crate) source_type: ::std::option::Option<::std::string::String>,
    pub(crate) event_categories: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EventCategoryGroupBuilder {
    /// <p> The type of DMS resource that generates events. </p>
    /// <p>Valid values: replication-instance | replication-server | security-group | replication-task</p>
    pub fn source_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The type of DMS resource that generates events. </p>
    /// <p>Valid values: replication-instance | replication-server | security-group | replication-task</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_type = input;
        self
    }
    /// <p> The type of DMS resource that generates events. </p>
    /// <p>Valid values: replication-instance | replication-server | security-group | replication-task</p>
    pub fn get_source_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_type
    }
    /// Appends an item to `event_categories`.
    ///
    /// To override the contents of this collection use [`set_event_categories`](Self::set_event_categories).
    ///
    /// <p> A list of event categories from a source type that you've chosen.</p>
    pub fn event_categories(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.event_categories.unwrap_or_default();
        v.push(input.into());
        self.event_categories = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of event categories from a source type that you've chosen.</p>
    pub fn set_event_categories(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.event_categories = input;
        self
    }
    /// <p> A list of event categories from a source type that you've chosen.</p>
    pub fn get_event_categories(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.event_categories
    }
    /// Consumes the builder and constructs a [`EventCategoryGroup`](crate::types::EventCategoryGroup).
    pub fn build(self) -> crate::types::EventCategoryGroup {
        crate::types::EventCategoryGroup {
            source_type: self.source_type,
            event_categories: self.event_categories,
        }
    }
}
