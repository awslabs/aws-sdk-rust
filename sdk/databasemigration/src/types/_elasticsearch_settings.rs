// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information that defines an OpenSearch endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ElasticsearchSettings {
    /// <p>The Amazon Resource Name (ARN) used by the service to access the IAM role. The role must allow the <code>iam:PassRole</code> action.</p>
    pub service_access_role_arn: ::std::string::String,
    /// <p>The endpoint for the OpenSearch cluster. DMS uses HTTPS if a transport protocol (http/https) is not specified.</p>
    pub endpoint_uri: ::std::string::String,
    /// <p>The maximum percentage of records that can fail to be written before a full load operation stops.</p>
    /// <p>To avoid early failure, this counter is only effective after 1000 records are transferred. OpenSearch also has the concept of error monitoring during the last 10 minutes of an Observation Window. If transfer of all records fail in the last 10 minutes, the full load operation stops. </p>
    pub full_load_error_percentage: ::std::option::Option<i32>,
    /// <p>The maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster.</p>
    pub error_retry_duration: ::std::option::Option<i32>,
    /// <p>Set this option to <code>true</code> for DMS to migrate documentation using the documentation type <code>_doc</code>. OpenSearch and an Elasticsearch cluster only support the _doc documentation type in versions 7. x and later. The default value is <code>false</code>.</p>
    pub use_new_mapping_type: ::std::option::Option<bool>,
}
impl ElasticsearchSettings {
    /// <p>The Amazon Resource Name (ARN) used by the service to access the IAM role. The role must allow the <code>iam:PassRole</code> action.</p>
    pub fn service_access_role_arn(&self) -> &str {
        use std::ops::Deref;
        self.service_access_role_arn.deref()
    }
    /// <p>The endpoint for the OpenSearch cluster. DMS uses HTTPS if a transport protocol (http/https) is not specified.</p>
    pub fn endpoint_uri(&self) -> &str {
        use std::ops::Deref;
        self.endpoint_uri.deref()
    }
    /// <p>The maximum percentage of records that can fail to be written before a full load operation stops.</p>
    /// <p>To avoid early failure, this counter is only effective after 1000 records are transferred. OpenSearch also has the concept of error monitoring during the last 10 minutes of an Observation Window. If transfer of all records fail in the last 10 minutes, the full load operation stops. </p>
    pub fn full_load_error_percentage(&self) -> ::std::option::Option<i32> {
        self.full_load_error_percentage
    }
    /// <p>The maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster.</p>
    pub fn error_retry_duration(&self) -> ::std::option::Option<i32> {
        self.error_retry_duration
    }
    /// <p>Set this option to <code>true</code> for DMS to migrate documentation using the documentation type <code>_doc</code>. OpenSearch and an Elasticsearch cluster only support the _doc documentation type in versions 7. x and later. The default value is <code>false</code>.</p>
    pub fn use_new_mapping_type(&self) -> ::std::option::Option<bool> {
        self.use_new_mapping_type
    }
}
impl ElasticsearchSettings {
    /// Creates a new builder-style object to manufacture [`ElasticsearchSettings`](crate::types::ElasticsearchSettings).
    pub fn builder() -> crate::types::builders::ElasticsearchSettingsBuilder {
        crate::types::builders::ElasticsearchSettingsBuilder::default()
    }
}

/// A builder for [`ElasticsearchSettings`](crate::types::ElasticsearchSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ElasticsearchSettingsBuilder {
    pub(crate) service_access_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_uri: ::std::option::Option<::std::string::String>,
    pub(crate) full_load_error_percentage: ::std::option::Option<i32>,
    pub(crate) error_retry_duration: ::std::option::Option<i32>,
    pub(crate) use_new_mapping_type: ::std::option::Option<bool>,
}
impl ElasticsearchSettingsBuilder {
    /// <p>The Amazon Resource Name (ARN) used by the service to access the IAM role. The role must allow the <code>iam:PassRole</code> action.</p>
    /// This field is required.
    pub fn service_access_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_access_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) used by the service to access the IAM role. The role must allow the <code>iam:PassRole</code> action.</p>
    pub fn set_service_access_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_access_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) used by the service to access the IAM role. The role must allow the <code>iam:PassRole</code> action.</p>
    pub fn get_service_access_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_access_role_arn
    }
    /// <p>The endpoint for the OpenSearch cluster. DMS uses HTTPS if a transport protocol (http/https) is not specified.</p>
    /// This field is required.
    pub fn endpoint_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint for the OpenSearch cluster. DMS uses HTTPS if a transport protocol (http/https) is not specified.</p>
    pub fn set_endpoint_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_uri = input;
        self
    }
    /// <p>The endpoint for the OpenSearch cluster. DMS uses HTTPS if a transport protocol (http/https) is not specified.</p>
    pub fn get_endpoint_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_uri
    }
    /// <p>The maximum percentage of records that can fail to be written before a full load operation stops.</p>
    /// <p>To avoid early failure, this counter is only effective after 1000 records are transferred. OpenSearch also has the concept of error monitoring during the last 10 minutes of an Observation Window. If transfer of all records fail in the last 10 minutes, the full load operation stops. </p>
    pub fn full_load_error_percentage(mut self, input: i32) -> Self {
        self.full_load_error_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum percentage of records that can fail to be written before a full load operation stops.</p>
    /// <p>To avoid early failure, this counter is only effective after 1000 records are transferred. OpenSearch also has the concept of error monitoring during the last 10 minutes of an Observation Window. If transfer of all records fail in the last 10 minutes, the full load operation stops. </p>
    pub fn set_full_load_error_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.full_load_error_percentage = input;
        self
    }
    /// <p>The maximum percentage of records that can fail to be written before a full load operation stops.</p>
    /// <p>To avoid early failure, this counter is only effective after 1000 records are transferred. OpenSearch also has the concept of error monitoring during the last 10 minutes of an Observation Window. If transfer of all records fail in the last 10 minutes, the full load operation stops. </p>
    pub fn get_full_load_error_percentage(&self) -> &::std::option::Option<i32> {
        &self.full_load_error_percentage
    }
    /// <p>The maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster.</p>
    pub fn error_retry_duration(mut self, input: i32) -> Self {
        self.error_retry_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster.</p>
    pub fn set_error_retry_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.error_retry_duration = input;
        self
    }
    /// <p>The maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster.</p>
    pub fn get_error_retry_duration(&self) -> &::std::option::Option<i32> {
        &self.error_retry_duration
    }
    /// <p>Set this option to <code>true</code> for DMS to migrate documentation using the documentation type <code>_doc</code>. OpenSearch and an Elasticsearch cluster only support the _doc documentation type in versions 7. x and later. The default value is <code>false</code>.</p>
    pub fn use_new_mapping_type(mut self, input: bool) -> Self {
        self.use_new_mapping_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set this option to <code>true</code> for DMS to migrate documentation using the documentation type <code>_doc</code>. OpenSearch and an Elasticsearch cluster only support the _doc documentation type in versions 7. x and later. The default value is <code>false</code>.</p>
    pub fn set_use_new_mapping_type(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_new_mapping_type = input;
        self
    }
    /// <p>Set this option to <code>true</code> for DMS to migrate documentation using the documentation type <code>_doc</code>. OpenSearch and an Elasticsearch cluster only support the _doc documentation type in versions 7. x and later. The default value is <code>false</code>.</p>
    pub fn get_use_new_mapping_type(&self) -> &::std::option::Option<bool> {
        &self.use_new_mapping_type
    }
    /// Consumes the builder and constructs a [`ElasticsearchSettings`](crate::types::ElasticsearchSettings).
    /// This method will fail if any of the following fields are not set:
    /// - [`service_access_role_arn`](crate::types::builders::ElasticsearchSettingsBuilder::service_access_role_arn)
    /// - [`endpoint_uri`](crate::types::builders::ElasticsearchSettingsBuilder::endpoint_uri)
    pub fn build(self) -> ::std::result::Result<crate::types::ElasticsearchSettings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ElasticsearchSettings {
            service_access_role_arn: self.service_access_role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_access_role_arn",
                    "service_access_role_arn was not specified but it is required when building ElasticsearchSettings",
                )
            })?,
            endpoint_uri: self.endpoint_uri.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoint_uri",
                    "endpoint_uri was not specified but it is required when building ElasticsearchSettings",
                )
            })?,
            full_load_error_percentage: self.full_load_error_percentage,
            error_retry_duration: self.error_retry_duration,
            use_new_mapping_type: self.use_new_mapping_type,
        })
    }
}
