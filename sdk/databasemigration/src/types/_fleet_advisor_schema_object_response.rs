// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a schema object in a Fleet Advisor collector inventory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FleetAdvisorSchemaObjectResponse {
    /// <p>The ID of a schema object in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub schema_id: std::option::Option<std::string::String>,
    /// <p>The type of the schema object, as reported by the database engine. Examples include the following:</p>
    /// <ul>
    /// <li> <p> <code>function</code> </p> </li>
    /// <li> <p> <code>trigger</code> </p> </li>
    /// <li> <p> <code>SYSTEM_TABLE</code> </p> </li>
    /// <li> <p> <code>QUEUE</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub object_type: std::option::Option<std::string::String>,
    /// <p>The number of objects in a schema object in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub number_of_objects: std::option::Option<i64>,
    /// <p>The number of lines of code in a schema object in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub code_line_count: std::option::Option<i64>,
    /// <p>The size level of the code in a schema object in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub code_size: std::option::Option<i64>,
}
impl FleetAdvisorSchemaObjectResponse {
    /// <p>The ID of a schema object in a Fleet Advisor collector inventory.</p>
    pub fn schema_id(&self) -> std::option::Option<&str> {
        self.schema_id.as_deref()
    }
    /// <p>The type of the schema object, as reported by the database engine. Examples include the following:</p>
    /// <ul>
    /// <li> <p> <code>function</code> </p> </li>
    /// <li> <p> <code>trigger</code> </p> </li>
    /// <li> <p> <code>SYSTEM_TABLE</code> </p> </li>
    /// <li> <p> <code>QUEUE</code> </p> </li>
    /// </ul>
    pub fn object_type(&self) -> std::option::Option<&str> {
        self.object_type.as_deref()
    }
    /// <p>The number of objects in a schema object in a Fleet Advisor collector inventory.</p>
    pub fn number_of_objects(&self) -> std::option::Option<i64> {
        self.number_of_objects
    }
    /// <p>The number of lines of code in a schema object in a Fleet Advisor collector inventory.</p>
    pub fn code_line_count(&self) -> std::option::Option<i64> {
        self.code_line_count
    }
    /// <p>The size level of the code in a schema object in a Fleet Advisor collector inventory.</p>
    pub fn code_size(&self) -> std::option::Option<i64> {
        self.code_size
    }
}
impl FleetAdvisorSchemaObjectResponse {
    /// Creates a new builder-style object to manufacture [`FleetAdvisorSchemaObjectResponse`](crate::types::FleetAdvisorSchemaObjectResponse).
    pub fn builder() -> crate::types::builders::FleetAdvisorSchemaObjectResponseBuilder {
        crate::types::builders::FleetAdvisorSchemaObjectResponseBuilder::default()
    }
}

/// A builder for [`FleetAdvisorSchemaObjectResponse`](crate::types::FleetAdvisorSchemaObjectResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FleetAdvisorSchemaObjectResponseBuilder {
    pub(crate) schema_id: std::option::Option<std::string::String>,
    pub(crate) object_type: std::option::Option<std::string::String>,
    pub(crate) number_of_objects: std::option::Option<i64>,
    pub(crate) code_line_count: std::option::Option<i64>,
    pub(crate) code_size: std::option::Option<i64>,
}
impl FleetAdvisorSchemaObjectResponseBuilder {
    /// <p>The ID of a schema object in a Fleet Advisor collector inventory.</p>
    pub fn schema_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_id = Some(input.into());
        self
    }
    /// <p>The ID of a schema object in a Fleet Advisor collector inventory.</p>
    pub fn set_schema_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_id = input;
        self
    }
    /// <p>The type of the schema object, as reported by the database engine. Examples include the following:</p>
    /// <ul>
    /// <li> <p> <code>function</code> </p> </li>
    /// <li> <p> <code>trigger</code> </p> </li>
    /// <li> <p> <code>SYSTEM_TABLE</code> </p> </li>
    /// <li> <p> <code>QUEUE</code> </p> </li>
    /// </ul>
    pub fn object_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.object_type = Some(input.into());
        self
    }
    /// <p>The type of the schema object, as reported by the database engine. Examples include the following:</p>
    /// <ul>
    /// <li> <p> <code>function</code> </p> </li>
    /// <li> <p> <code>trigger</code> </p> </li>
    /// <li> <p> <code>SYSTEM_TABLE</code> </p> </li>
    /// <li> <p> <code>QUEUE</code> </p> </li>
    /// </ul>
    pub fn set_object_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.object_type = input;
        self
    }
    /// <p>The number of objects in a schema object in a Fleet Advisor collector inventory.</p>
    pub fn number_of_objects(mut self, input: i64) -> Self {
        self.number_of_objects = Some(input);
        self
    }
    /// <p>The number of objects in a schema object in a Fleet Advisor collector inventory.</p>
    pub fn set_number_of_objects(mut self, input: std::option::Option<i64>) -> Self {
        self.number_of_objects = input;
        self
    }
    /// <p>The number of lines of code in a schema object in a Fleet Advisor collector inventory.</p>
    pub fn code_line_count(mut self, input: i64) -> Self {
        self.code_line_count = Some(input);
        self
    }
    /// <p>The number of lines of code in a schema object in a Fleet Advisor collector inventory.</p>
    pub fn set_code_line_count(mut self, input: std::option::Option<i64>) -> Self {
        self.code_line_count = input;
        self
    }
    /// <p>The size level of the code in a schema object in a Fleet Advisor collector inventory.</p>
    pub fn code_size(mut self, input: i64) -> Self {
        self.code_size = Some(input);
        self
    }
    /// <p>The size level of the code in a schema object in a Fleet Advisor collector inventory.</p>
    pub fn set_code_size(mut self, input: std::option::Option<i64>) -> Self {
        self.code_size = input;
        self
    }
    /// Consumes the builder and constructs a [`FleetAdvisorSchemaObjectResponse`](crate::types::FleetAdvisorSchemaObjectResponse).
    pub fn build(self) -> crate::types::FleetAdvisorSchemaObjectResponse {
        crate::types::FleetAdvisorSchemaObjectResponse {
            schema_id: self.schema_id,
            object_type: self.object_type,
            number_of_objects: self.number_of_objects,
            code_line_count: self.code_line_count,
            code_size: self.code_size,
        }
    }
}
