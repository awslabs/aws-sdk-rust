// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information that describes a premigration assessment run that you have started using the <code>StartReplicationTaskAssessmentRun</code> operation.</p>
/// <p>Some of the information appears based on other operations that can return the <code>ReplicationTaskAssessmentRun</code> object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplicationTaskAssessmentRun {
    /// <p>Amazon Resource Name (ARN) of this assessment run.</p>
    #[doc(hidden)]
    pub replication_task_assessment_run_arn: std::option::Option<std::string::String>,
    /// <p>ARN of the migration task associated with this premigration assessment run.</p>
    #[doc(hidden)]
    pub replication_task_arn: std::option::Option<std::string::String>,
    /// <p>Assessment run status. </p>
    /// <p>This status can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>"cancelling"</code> – The assessment run was canceled by the <code>CancelReplicationTaskAssessmentRun</code> operation.</p> </li>
    /// <li> <p> <code>"deleting"</code> – The assessment run was deleted by the <code>DeleteReplicationTaskAssessmentRun</code> operation.</p> </li>
    /// <li> <p> <code>"failed"</code> – At least one individual assessment completed with a <code>failed</code> status.</p> </li>
    /// <li> <p> <code>"error-provisioning"</code> – An internal error occurred while resources were provisioned (during <code>provisioning</code> status).</p> </li>
    /// <li> <p> <code>"error-executing"</code> – An internal error occurred while individual assessments ran (during <code>running</code> status).</p> </li>
    /// <li> <p> <code>"invalid state"</code> – The assessment run is in an unknown state.</p> </li>
    /// <li> <p> <code>"passed"</code> – All individual assessments have completed, and none has a <code>failed</code> status.</p> </li>
    /// <li> <p> <code>"provisioning"</code> – Resources required to run individual assessments are being provisioned.</p> </li>
    /// <li> <p> <code>"running"</code> – Individual assessments are being run.</p> </li>
    /// <li> <p> <code>"starting"</code> – The assessment run is starting, but resources are not yet being provisioned for individual assessments.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>Date on which the assessment run was created using the <code>StartReplicationTaskAssessmentRun</code> operation.</p>
    #[doc(hidden)]
    pub replication_task_assessment_run_creation_date:
        std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indication of the completion progress for the individual assessments specified to run.</p>
    #[doc(hidden)]
    pub assessment_progress:
        std::option::Option<crate::types::ReplicationTaskAssessmentRunProgress>,
    /// <p>Last message generated by an individual assessment failure.</p>
    #[doc(hidden)]
    pub last_failure_message: std::option::Option<std::string::String>,
    /// <p>ARN of the service role used to start the assessment run using the <code>StartReplicationTaskAssessmentRun</code> operation. The role must allow the <code>iam:PassRole</code> action.</p>
    #[doc(hidden)]
    pub service_access_role_arn: std::option::Option<std::string::String>,
    /// <p>Amazon S3 bucket where DMS stores the results of this assessment run.</p>
    #[doc(hidden)]
    pub result_location_bucket: std::option::Option<std::string::String>,
    /// <p>Folder in an Amazon S3 bucket where DMS stores the results of this assessment run.</p>
    #[doc(hidden)]
    pub result_location_folder: std::option::Option<std::string::String>,
    /// <p>Encryption mode used to encrypt the assessment run results.</p>
    #[doc(hidden)]
    pub result_encryption_mode: std::option::Option<std::string::String>,
    /// <p>ARN of the KMS encryption key used to encrypt the assessment run results.</p>
    #[doc(hidden)]
    pub result_kms_key_arn: std::option::Option<std::string::String>,
    /// <p>Unique name of the assessment run.</p>
    #[doc(hidden)]
    pub assessment_run_name: std::option::Option<std::string::String>,
}
impl ReplicationTaskAssessmentRun {
    /// <p>Amazon Resource Name (ARN) of this assessment run.</p>
    pub fn replication_task_assessment_run_arn(&self) -> std::option::Option<&str> {
        self.replication_task_assessment_run_arn.as_deref()
    }
    /// <p>ARN of the migration task associated with this premigration assessment run.</p>
    pub fn replication_task_arn(&self) -> std::option::Option<&str> {
        self.replication_task_arn.as_deref()
    }
    /// <p>Assessment run status. </p>
    /// <p>This status can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>"cancelling"</code> – The assessment run was canceled by the <code>CancelReplicationTaskAssessmentRun</code> operation.</p> </li>
    /// <li> <p> <code>"deleting"</code> – The assessment run was deleted by the <code>DeleteReplicationTaskAssessmentRun</code> operation.</p> </li>
    /// <li> <p> <code>"failed"</code> – At least one individual assessment completed with a <code>failed</code> status.</p> </li>
    /// <li> <p> <code>"error-provisioning"</code> – An internal error occurred while resources were provisioned (during <code>provisioning</code> status).</p> </li>
    /// <li> <p> <code>"error-executing"</code> – An internal error occurred while individual assessments ran (during <code>running</code> status).</p> </li>
    /// <li> <p> <code>"invalid state"</code> – The assessment run is in an unknown state.</p> </li>
    /// <li> <p> <code>"passed"</code> – All individual assessments have completed, and none has a <code>failed</code> status.</p> </li>
    /// <li> <p> <code>"provisioning"</code> – Resources required to run individual assessments are being provisioned.</p> </li>
    /// <li> <p> <code>"running"</code> – Individual assessments are being run.</p> </li>
    /// <li> <p> <code>"starting"</code> – The assessment run is starting, but resources are not yet being provisioned for individual assessments.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Date on which the assessment run was created using the <code>StartReplicationTaskAssessmentRun</code> operation.</p>
    pub fn replication_task_assessment_run_creation_date(
        &self,
    ) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.replication_task_assessment_run_creation_date.as_ref()
    }
    /// <p>Indication of the completion progress for the individual assessments specified to run.</p>
    pub fn assessment_progress(
        &self,
    ) -> std::option::Option<&crate::types::ReplicationTaskAssessmentRunProgress> {
        self.assessment_progress.as_ref()
    }
    /// <p>Last message generated by an individual assessment failure.</p>
    pub fn last_failure_message(&self) -> std::option::Option<&str> {
        self.last_failure_message.as_deref()
    }
    /// <p>ARN of the service role used to start the assessment run using the <code>StartReplicationTaskAssessmentRun</code> operation. The role must allow the <code>iam:PassRole</code> action.</p>
    pub fn service_access_role_arn(&self) -> std::option::Option<&str> {
        self.service_access_role_arn.as_deref()
    }
    /// <p>Amazon S3 bucket where DMS stores the results of this assessment run.</p>
    pub fn result_location_bucket(&self) -> std::option::Option<&str> {
        self.result_location_bucket.as_deref()
    }
    /// <p>Folder in an Amazon S3 bucket where DMS stores the results of this assessment run.</p>
    pub fn result_location_folder(&self) -> std::option::Option<&str> {
        self.result_location_folder.as_deref()
    }
    /// <p>Encryption mode used to encrypt the assessment run results.</p>
    pub fn result_encryption_mode(&self) -> std::option::Option<&str> {
        self.result_encryption_mode.as_deref()
    }
    /// <p>ARN of the KMS encryption key used to encrypt the assessment run results.</p>
    pub fn result_kms_key_arn(&self) -> std::option::Option<&str> {
        self.result_kms_key_arn.as_deref()
    }
    /// <p>Unique name of the assessment run.</p>
    pub fn assessment_run_name(&self) -> std::option::Option<&str> {
        self.assessment_run_name.as_deref()
    }
}
impl ReplicationTaskAssessmentRun {
    /// Creates a new builder-style object to manufacture [`ReplicationTaskAssessmentRun`](crate::types::ReplicationTaskAssessmentRun).
    pub fn builder() -> crate::types::builders::ReplicationTaskAssessmentRunBuilder {
        crate::types::builders::ReplicationTaskAssessmentRunBuilder::default()
    }
}

/// A builder for [`ReplicationTaskAssessmentRun`](crate::types::ReplicationTaskAssessmentRun).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReplicationTaskAssessmentRunBuilder {
    pub(crate) replication_task_assessment_run_arn: std::option::Option<std::string::String>,
    pub(crate) replication_task_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) replication_task_assessment_run_creation_date:
        std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) assessment_progress:
        std::option::Option<crate::types::ReplicationTaskAssessmentRunProgress>,
    pub(crate) last_failure_message: std::option::Option<std::string::String>,
    pub(crate) service_access_role_arn: std::option::Option<std::string::String>,
    pub(crate) result_location_bucket: std::option::Option<std::string::String>,
    pub(crate) result_location_folder: std::option::Option<std::string::String>,
    pub(crate) result_encryption_mode: std::option::Option<std::string::String>,
    pub(crate) result_kms_key_arn: std::option::Option<std::string::String>,
    pub(crate) assessment_run_name: std::option::Option<std::string::String>,
}
impl ReplicationTaskAssessmentRunBuilder {
    /// <p>Amazon Resource Name (ARN) of this assessment run.</p>
    pub fn replication_task_assessment_run_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.replication_task_assessment_run_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of this assessment run.</p>
    pub fn set_replication_task_assessment_run_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_task_assessment_run_arn = input;
        self
    }
    /// <p>ARN of the migration task associated with this premigration assessment run.</p>
    pub fn replication_task_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.replication_task_arn = Some(input.into());
        self
    }
    /// <p>ARN of the migration task associated with this premigration assessment run.</p>
    pub fn set_replication_task_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_task_arn = input;
        self
    }
    /// <p>Assessment run status. </p>
    /// <p>This status can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>"cancelling"</code> – The assessment run was canceled by the <code>CancelReplicationTaskAssessmentRun</code> operation.</p> </li>
    /// <li> <p> <code>"deleting"</code> – The assessment run was deleted by the <code>DeleteReplicationTaskAssessmentRun</code> operation.</p> </li>
    /// <li> <p> <code>"failed"</code> – At least one individual assessment completed with a <code>failed</code> status.</p> </li>
    /// <li> <p> <code>"error-provisioning"</code> – An internal error occurred while resources were provisioned (during <code>provisioning</code> status).</p> </li>
    /// <li> <p> <code>"error-executing"</code> – An internal error occurred while individual assessments ran (during <code>running</code> status).</p> </li>
    /// <li> <p> <code>"invalid state"</code> – The assessment run is in an unknown state.</p> </li>
    /// <li> <p> <code>"passed"</code> – All individual assessments have completed, and none has a <code>failed</code> status.</p> </li>
    /// <li> <p> <code>"provisioning"</code> – Resources required to run individual assessments are being provisioned.</p> </li>
    /// <li> <p> <code>"running"</code> – Individual assessments are being run.</p> </li>
    /// <li> <p> <code>"starting"</code> – The assessment run is starting, but resources are not yet being provisioned for individual assessments.</p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>Assessment run status. </p>
    /// <p>This status can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>"cancelling"</code> – The assessment run was canceled by the <code>CancelReplicationTaskAssessmentRun</code> operation.</p> </li>
    /// <li> <p> <code>"deleting"</code> – The assessment run was deleted by the <code>DeleteReplicationTaskAssessmentRun</code> operation.</p> </li>
    /// <li> <p> <code>"failed"</code> – At least one individual assessment completed with a <code>failed</code> status.</p> </li>
    /// <li> <p> <code>"error-provisioning"</code> – An internal error occurred while resources were provisioned (during <code>provisioning</code> status).</p> </li>
    /// <li> <p> <code>"error-executing"</code> – An internal error occurred while individual assessments ran (during <code>running</code> status).</p> </li>
    /// <li> <p> <code>"invalid state"</code> – The assessment run is in an unknown state.</p> </li>
    /// <li> <p> <code>"passed"</code> – All individual assessments have completed, and none has a <code>failed</code> status.</p> </li>
    /// <li> <p> <code>"provisioning"</code> – Resources required to run individual assessments are being provisioned.</p> </li>
    /// <li> <p> <code>"running"</code> – Individual assessments are being run.</p> </li>
    /// <li> <p> <code>"starting"</code> – The assessment run is starting, but resources are not yet being provisioned for individual assessments.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>Date on which the assessment run was created using the <code>StartReplicationTaskAssessmentRun</code> operation.</p>
    pub fn replication_task_assessment_run_creation_date(
        mut self,
        input: aws_smithy_types::DateTime,
    ) -> Self {
        self.replication_task_assessment_run_creation_date = Some(input);
        self
    }
    /// <p>Date on which the assessment run was created using the <code>StartReplicationTaskAssessmentRun</code> operation.</p>
    pub fn set_replication_task_assessment_run_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.replication_task_assessment_run_creation_date = input;
        self
    }
    /// <p>Indication of the completion progress for the individual assessments specified to run.</p>
    pub fn assessment_progress(
        mut self,
        input: crate::types::ReplicationTaskAssessmentRunProgress,
    ) -> Self {
        self.assessment_progress = Some(input);
        self
    }
    /// <p>Indication of the completion progress for the individual assessments specified to run.</p>
    pub fn set_assessment_progress(
        mut self,
        input: std::option::Option<crate::types::ReplicationTaskAssessmentRunProgress>,
    ) -> Self {
        self.assessment_progress = input;
        self
    }
    /// <p>Last message generated by an individual assessment failure.</p>
    pub fn last_failure_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_failure_message = Some(input.into());
        self
    }
    /// <p>Last message generated by an individual assessment failure.</p>
    pub fn set_last_failure_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_failure_message = input;
        self
    }
    /// <p>ARN of the service role used to start the assessment run using the <code>StartReplicationTaskAssessmentRun</code> operation. The role must allow the <code>iam:PassRole</code> action.</p>
    pub fn service_access_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_access_role_arn = Some(input.into());
        self
    }
    /// <p>ARN of the service role used to start the assessment run using the <code>StartReplicationTaskAssessmentRun</code> operation. The role must allow the <code>iam:PassRole</code> action.</p>
    pub fn set_service_access_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.service_access_role_arn = input;
        self
    }
    /// <p>Amazon S3 bucket where DMS stores the results of this assessment run.</p>
    pub fn result_location_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.result_location_bucket = Some(input.into());
        self
    }
    /// <p>Amazon S3 bucket where DMS stores the results of this assessment run.</p>
    pub fn set_result_location_bucket(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.result_location_bucket = input;
        self
    }
    /// <p>Folder in an Amazon S3 bucket where DMS stores the results of this assessment run.</p>
    pub fn result_location_folder(mut self, input: impl Into<std::string::String>) -> Self {
        self.result_location_folder = Some(input.into());
        self
    }
    /// <p>Folder in an Amazon S3 bucket where DMS stores the results of this assessment run.</p>
    pub fn set_result_location_folder(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.result_location_folder = input;
        self
    }
    /// <p>Encryption mode used to encrypt the assessment run results.</p>
    pub fn result_encryption_mode(mut self, input: impl Into<std::string::String>) -> Self {
        self.result_encryption_mode = Some(input.into());
        self
    }
    /// <p>Encryption mode used to encrypt the assessment run results.</p>
    pub fn set_result_encryption_mode(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.result_encryption_mode = input;
        self
    }
    /// <p>ARN of the KMS encryption key used to encrypt the assessment run results.</p>
    pub fn result_kms_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.result_kms_key_arn = Some(input.into());
        self
    }
    /// <p>ARN of the KMS encryption key used to encrypt the assessment run results.</p>
    pub fn set_result_kms_key_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.result_kms_key_arn = input;
        self
    }
    /// <p>Unique name of the assessment run.</p>
    pub fn assessment_run_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.assessment_run_name = Some(input.into());
        self
    }
    /// <p>Unique name of the assessment run.</p>
    pub fn set_assessment_run_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.assessment_run_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ReplicationTaskAssessmentRun`](crate::types::ReplicationTaskAssessmentRun).
    pub fn build(self) -> crate::types::ReplicationTaskAssessmentRun {
        crate::types::ReplicationTaskAssessmentRun {
            replication_task_assessment_run_arn: self.replication_task_assessment_run_arn,
            replication_task_arn: self.replication_task_arn,
            status: self.status,
            replication_task_assessment_run_creation_date: self
                .replication_task_assessment_run_creation_date,
            assessment_progress: self.assessment_progress,
            last_failure_message: self.last_failure_message,
            service_access_role_arn: self.service_access_role_arn,
            result_location_bucket: self.result_location_bucket,
            result_location_folder: self.result_location_folder,
            result_encryption_mode: self.result_encryption_mode,
            result_kms_key_arn: self.result_kms_key_arn,
            assessment_run_name: self.assessment_run_name,
        }
    }
}
