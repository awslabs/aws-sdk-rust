// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a database in a Fleet Advisor collector inventory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatabaseShortInfoResponse {
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub database_id: std::option::Option<std::string::String>,
    /// <p>The name of a database in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The IP address of a database in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub database_ip_address: std::option::Option<std::string::String>,
    /// <p>The database engine of a database in a Fleet Advisor collector inventory, for example <code>PostgreSQL</code>.</p>
    #[doc(hidden)]
    pub database_engine: std::option::Option<std::string::String>,
}
impl DatabaseShortInfoResponse {
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_id(&self) -> std::option::Option<&str> {
        self.database_id.as_deref()
    }
    /// <p>The name of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The IP address of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_ip_address(&self) -> std::option::Option<&str> {
        self.database_ip_address.as_deref()
    }
    /// <p>The database engine of a database in a Fleet Advisor collector inventory, for example <code>PostgreSQL</code>.</p>
    pub fn database_engine(&self) -> std::option::Option<&str> {
        self.database_engine.as_deref()
    }
}
impl DatabaseShortInfoResponse {
    /// Creates a new builder-style object to manufacture [`DatabaseShortInfoResponse`](crate::types::DatabaseShortInfoResponse).
    pub fn builder() -> crate::types::builders::DatabaseShortInfoResponseBuilder {
        crate::types::builders::DatabaseShortInfoResponseBuilder::default()
    }
}

/// A builder for [`DatabaseShortInfoResponse`](crate::types::DatabaseShortInfoResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatabaseShortInfoResponseBuilder {
    pub(crate) database_id: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) database_ip_address: std::option::Option<std::string::String>,
    pub(crate) database_engine: std::option::Option<std::string::String>,
}
impl DatabaseShortInfoResponseBuilder {
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_id = Some(input.into());
        self
    }
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    pub fn set_database_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_id = input;
        self
    }
    /// <p>The name of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>The name of a database in a Fleet Advisor collector inventory.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The IP address of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_ip_address = Some(input.into());
        self
    }
    /// <p>The IP address of a database in a Fleet Advisor collector inventory.</p>
    pub fn set_database_ip_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.database_ip_address = input;
        self
    }
    /// <p>The database engine of a database in a Fleet Advisor collector inventory, for example <code>PostgreSQL</code>.</p>
    pub fn database_engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_engine = Some(input.into());
        self
    }
    /// <p>The database engine of a database in a Fleet Advisor collector inventory, for example <code>PostgreSQL</code>.</p>
    pub fn set_database_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_engine = input;
        self
    }
    /// Consumes the builder and constructs a [`DatabaseShortInfoResponse`](crate::types::DatabaseShortInfoResponse).
    pub fn build(self) -> crate::types::DatabaseShortInfoResponse {
        crate::types::DatabaseShortInfoResponse {
            database_id: self.database_id,
            database_name: self.database_name,
            database_ip_address: self.database_ip_address,
            database_engine: self.database_engine,
        }
    }
}
