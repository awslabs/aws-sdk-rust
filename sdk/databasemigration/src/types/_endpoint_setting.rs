// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Endpoint settings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EndpointSetting {
    /// <p>The name that you want to give the endpoint settings.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of endpoint. Valid values are <code>source</code> and <code>target</code>.</p>
    pub r#type: ::std::option::Option<crate::types::EndpointSettingTypeValue>,
    /// <p>Enumerated values to use for this endpoint.</p>
    pub enum_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A value that marks this endpoint setting as sensitive.</p>
    pub sensitive: ::std::option::Option<bool>,
    /// <p>The unit of measure for this endpoint setting.</p>
    pub units: ::std::option::Option<::std::string::String>,
    /// <p>The relevance or validity of an endpoint setting for an engine name and its endpoint type.</p>
    pub applicability: ::std::option::Option<::std::string::String>,
    /// <p>The minimum value of an endpoint setting that is of type <code>int</code>.</p>
    pub int_value_min: ::std::option::Option<i32>,
    /// <p>The maximum value of an endpoint setting that is of type <code>int</code>.</p>
    pub int_value_max: ::std::option::Option<i32>,
    /// <p>The default value of the endpoint setting if no value is specified using <code>CreateEndpoint</code> or <code>ModifyEndpoint</code>.</p>
    pub default_value: ::std::option::Option<::std::string::String>,
}
impl EndpointSetting {
    /// <p>The name that you want to give the endpoint settings.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of endpoint. Valid values are <code>source</code> and <code>target</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::EndpointSettingTypeValue> {
        self.r#type.as_ref()
    }
    /// <p>Enumerated values to use for this endpoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enum_values.is_none()`.
    pub fn enum_values(&self) -> &[::std::string::String] {
        self.enum_values.as_deref().unwrap_or_default()
    }
    /// <p>A value that marks this endpoint setting as sensitive.</p>
    pub fn sensitive(&self) -> ::std::option::Option<bool> {
        self.sensitive
    }
    /// <p>The unit of measure for this endpoint setting.</p>
    pub fn units(&self) -> ::std::option::Option<&str> {
        self.units.as_deref()
    }
    /// <p>The relevance or validity of an endpoint setting for an engine name and its endpoint type.</p>
    pub fn applicability(&self) -> ::std::option::Option<&str> {
        self.applicability.as_deref()
    }
    /// <p>The minimum value of an endpoint setting that is of type <code>int</code>.</p>
    pub fn int_value_min(&self) -> ::std::option::Option<i32> {
        self.int_value_min
    }
    /// <p>The maximum value of an endpoint setting that is of type <code>int</code>.</p>
    pub fn int_value_max(&self) -> ::std::option::Option<i32> {
        self.int_value_max
    }
    /// <p>The default value of the endpoint setting if no value is specified using <code>CreateEndpoint</code> or <code>ModifyEndpoint</code>.</p>
    pub fn default_value(&self) -> ::std::option::Option<&str> {
        self.default_value.as_deref()
    }
}
impl EndpointSetting {
    /// Creates a new builder-style object to manufacture [`EndpointSetting`](crate::types::EndpointSetting).
    pub fn builder() -> crate::types::builders::EndpointSettingBuilder {
        crate::types::builders::EndpointSettingBuilder::default()
    }
}

/// A builder for [`EndpointSetting`](crate::types::EndpointSetting).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EndpointSettingBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::EndpointSettingTypeValue>,
    pub(crate) enum_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) sensitive: ::std::option::Option<bool>,
    pub(crate) units: ::std::option::Option<::std::string::String>,
    pub(crate) applicability: ::std::option::Option<::std::string::String>,
    pub(crate) int_value_min: ::std::option::Option<i32>,
    pub(crate) int_value_max: ::std::option::Option<i32>,
    pub(crate) default_value: ::std::option::Option<::std::string::String>,
}
impl EndpointSettingBuilder {
    /// <p>The name that you want to give the endpoint settings.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name that you want to give the endpoint settings.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name that you want to give the endpoint settings.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of endpoint. Valid values are <code>source</code> and <code>target</code>.</p>
    pub fn r#type(mut self, input: crate::types::EndpointSettingTypeValue) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of endpoint. Valid values are <code>source</code> and <code>target</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::EndpointSettingTypeValue>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of endpoint. Valid values are <code>source</code> and <code>target</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::EndpointSettingTypeValue> {
        &self.r#type
    }
    /// Appends an item to `enum_values`.
    ///
    /// To override the contents of this collection use [`set_enum_values`](Self::set_enum_values).
    ///
    /// <p>Enumerated values to use for this endpoint.</p>
    pub fn enum_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.enum_values.unwrap_or_default();
        v.push(input.into());
        self.enum_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>Enumerated values to use for this endpoint.</p>
    pub fn set_enum_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.enum_values = input;
        self
    }
    /// <p>Enumerated values to use for this endpoint.</p>
    pub fn get_enum_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.enum_values
    }
    /// <p>A value that marks this endpoint setting as sensitive.</p>
    pub fn sensitive(mut self, input: bool) -> Self {
        self.sensitive = ::std::option::Option::Some(input);
        self
    }
    /// <p>A value that marks this endpoint setting as sensitive.</p>
    pub fn set_sensitive(mut self, input: ::std::option::Option<bool>) -> Self {
        self.sensitive = input;
        self
    }
    /// <p>A value that marks this endpoint setting as sensitive.</p>
    pub fn get_sensitive(&self) -> &::std::option::Option<bool> {
        &self.sensitive
    }
    /// <p>The unit of measure for this endpoint setting.</p>
    pub fn units(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.units = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unit of measure for this endpoint setting.</p>
    pub fn set_units(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.units = input;
        self
    }
    /// <p>The unit of measure for this endpoint setting.</p>
    pub fn get_units(&self) -> &::std::option::Option<::std::string::String> {
        &self.units
    }
    /// <p>The relevance or validity of an endpoint setting for an engine name and its endpoint type.</p>
    pub fn applicability(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.applicability = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The relevance or validity of an endpoint setting for an engine name and its endpoint type.</p>
    pub fn set_applicability(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.applicability = input;
        self
    }
    /// <p>The relevance or validity of an endpoint setting for an engine name and its endpoint type.</p>
    pub fn get_applicability(&self) -> &::std::option::Option<::std::string::String> {
        &self.applicability
    }
    /// <p>The minimum value of an endpoint setting that is of type <code>int</code>.</p>
    pub fn int_value_min(mut self, input: i32) -> Self {
        self.int_value_min = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum value of an endpoint setting that is of type <code>int</code>.</p>
    pub fn set_int_value_min(mut self, input: ::std::option::Option<i32>) -> Self {
        self.int_value_min = input;
        self
    }
    /// <p>The minimum value of an endpoint setting that is of type <code>int</code>.</p>
    pub fn get_int_value_min(&self) -> &::std::option::Option<i32> {
        &self.int_value_min
    }
    /// <p>The maximum value of an endpoint setting that is of type <code>int</code>.</p>
    pub fn int_value_max(mut self, input: i32) -> Self {
        self.int_value_max = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum value of an endpoint setting that is of type <code>int</code>.</p>
    pub fn set_int_value_max(mut self, input: ::std::option::Option<i32>) -> Self {
        self.int_value_max = input;
        self
    }
    /// <p>The maximum value of an endpoint setting that is of type <code>int</code>.</p>
    pub fn get_int_value_max(&self) -> &::std::option::Option<i32> {
        &self.int_value_max
    }
    /// <p>The default value of the endpoint setting if no value is specified using <code>CreateEndpoint</code> or <code>ModifyEndpoint</code>.</p>
    pub fn default_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default value of the endpoint setting if no value is specified using <code>CreateEndpoint</code> or <code>ModifyEndpoint</code>.</p>
    pub fn set_default_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The default value of the endpoint setting if no value is specified using <code>CreateEndpoint</code> or <code>ModifyEndpoint</code>.</p>
    pub fn get_default_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_value
    }
    /// Consumes the builder and constructs a [`EndpointSetting`](crate::types::EndpointSetting).
    pub fn build(self) -> crate::types::EndpointSetting {
        crate::types::EndpointSetting {
            name: self.name,
            r#type: self.r#type,
            enum_values: self.enum_values,
            sensitive: self.sensitive,
            units: self.units,
            applicability: self.applicability,
            int_value_min: self.int_value_min,
            int_value_max: self.int_value_max,
            default_value: self.default_value,
        }
    }
}
