// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a replication instance version.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EngineVersion {
    /// <p>The version number of the replication instance.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The lifecycle status of the replication instance version. Valid values are <code>DEPRECATED</code>, <code>DEFAULT_VERSION</code>, and <code>ACTIVE</code>.</p>
    pub lifecycle: ::std::option::Option<::std::string::String>,
    /// <p>The release status of the replication instance version.</p>
    pub release_status: ::std::option::Option<crate::types::ReleaseStatusValues>,
    /// <p>The date when the replication instance version became publicly available.</p>
    pub launch_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date when the replication instance will be automatically upgraded. This setting only applies if the <code>auto-minor-version</code> setting is enabled.</p>
    pub auto_upgrade_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date when the replication instance version will be deprecated and can no longer be requested.</p>
    pub deprecation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date when the replication instance will have a version upgrade forced.</p>
    pub force_upgrade_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The list of valid replication instance versions that you can upgrade to.</p>
    pub available_upgrades: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EngineVersion {
    /// <p>The version number of the replication instance.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The lifecycle status of the replication instance version. Valid values are <code>DEPRECATED</code>, <code>DEFAULT_VERSION</code>, and <code>ACTIVE</code>.</p>
    pub fn lifecycle(&self) -> ::std::option::Option<&str> {
        self.lifecycle.as_deref()
    }
    /// <p>The release status of the replication instance version.</p>
    pub fn release_status(&self) -> ::std::option::Option<&crate::types::ReleaseStatusValues> {
        self.release_status.as_ref()
    }
    /// <p>The date when the replication instance version became publicly available.</p>
    pub fn launch_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.launch_date.as_ref()
    }
    /// <p>The date when the replication instance will be automatically upgraded. This setting only applies if the <code>auto-minor-version</code> setting is enabled.</p>
    pub fn auto_upgrade_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.auto_upgrade_date.as_ref()
    }
    /// <p>The date when the replication instance version will be deprecated and can no longer be requested.</p>
    pub fn deprecation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.deprecation_date.as_ref()
    }
    /// <p>The date when the replication instance will have a version upgrade forced.</p>
    pub fn force_upgrade_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.force_upgrade_date.as_ref()
    }
    /// <p>The list of valid replication instance versions that you can upgrade to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.available_upgrades.is_none()`.
    pub fn available_upgrades(&self) -> &[::std::string::String] {
        self.available_upgrades.as_deref().unwrap_or_default()
    }
}
impl EngineVersion {
    /// Creates a new builder-style object to manufacture [`EngineVersion`](crate::types::EngineVersion).
    pub fn builder() -> crate::types::builders::EngineVersionBuilder {
        crate::types::builders::EngineVersionBuilder::default()
    }
}

/// A builder for [`EngineVersion`](crate::types::EngineVersion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EngineVersionBuilder {
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle: ::std::option::Option<::std::string::String>,
    pub(crate) release_status: ::std::option::Option<crate::types::ReleaseStatusValues>,
    pub(crate) launch_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) auto_upgrade_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) deprecation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) force_upgrade_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) available_upgrades: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EngineVersionBuilder {
    /// <p>The version number of the replication instance.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version number of the replication instance.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version number of the replication instance.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The lifecycle status of the replication instance version. Valid values are <code>DEPRECATED</code>, <code>DEFAULT_VERSION</code>, and <code>ACTIVE</code>.</p>
    pub fn lifecycle(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lifecycle = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The lifecycle status of the replication instance version. Valid values are <code>DEPRECATED</code>, <code>DEFAULT_VERSION</code>, and <code>ACTIVE</code>.</p>
    pub fn set_lifecycle(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lifecycle = input;
        self
    }
    /// <p>The lifecycle status of the replication instance version. Valid values are <code>DEPRECATED</code>, <code>DEFAULT_VERSION</code>, and <code>ACTIVE</code>.</p>
    pub fn get_lifecycle(&self) -> &::std::option::Option<::std::string::String> {
        &self.lifecycle
    }
    /// <p>The release status of the replication instance version.</p>
    pub fn release_status(mut self, input: crate::types::ReleaseStatusValues) -> Self {
        self.release_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The release status of the replication instance version.</p>
    pub fn set_release_status(mut self, input: ::std::option::Option<crate::types::ReleaseStatusValues>) -> Self {
        self.release_status = input;
        self
    }
    /// <p>The release status of the replication instance version.</p>
    pub fn get_release_status(&self) -> &::std::option::Option<crate::types::ReleaseStatusValues> {
        &self.release_status
    }
    /// <p>The date when the replication instance version became publicly available.</p>
    pub fn launch_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.launch_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the replication instance version became publicly available.</p>
    pub fn set_launch_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.launch_date = input;
        self
    }
    /// <p>The date when the replication instance version became publicly available.</p>
    pub fn get_launch_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.launch_date
    }
    /// <p>The date when the replication instance will be automatically upgraded. This setting only applies if the <code>auto-minor-version</code> setting is enabled.</p>
    pub fn auto_upgrade_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.auto_upgrade_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the replication instance will be automatically upgraded. This setting only applies if the <code>auto-minor-version</code> setting is enabled.</p>
    pub fn set_auto_upgrade_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.auto_upgrade_date = input;
        self
    }
    /// <p>The date when the replication instance will be automatically upgraded. This setting only applies if the <code>auto-minor-version</code> setting is enabled.</p>
    pub fn get_auto_upgrade_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.auto_upgrade_date
    }
    /// <p>The date when the replication instance version will be deprecated and can no longer be requested.</p>
    pub fn deprecation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.deprecation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the replication instance version will be deprecated and can no longer be requested.</p>
    pub fn set_deprecation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.deprecation_date = input;
        self
    }
    /// <p>The date when the replication instance version will be deprecated and can no longer be requested.</p>
    pub fn get_deprecation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.deprecation_date
    }
    /// <p>The date when the replication instance will have a version upgrade forced.</p>
    pub fn force_upgrade_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.force_upgrade_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the replication instance will have a version upgrade forced.</p>
    pub fn set_force_upgrade_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.force_upgrade_date = input;
        self
    }
    /// <p>The date when the replication instance will have a version upgrade forced.</p>
    pub fn get_force_upgrade_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.force_upgrade_date
    }
    /// Appends an item to `available_upgrades`.
    ///
    /// To override the contents of this collection use [`set_available_upgrades`](Self::set_available_upgrades).
    ///
    /// <p>The list of valid replication instance versions that you can upgrade to.</p>
    pub fn available_upgrades(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.available_upgrades.unwrap_or_default();
        v.push(input.into());
        self.available_upgrades = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of valid replication instance versions that you can upgrade to.</p>
    pub fn set_available_upgrades(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.available_upgrades = input;
        self
    }
    /// <p>The list of valid replication instance versions that you can upgrade to.</p>
    pub fn get_available_upgrades(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.available_upgrades
    }
    /// Consumes the builder and constructs a [`EngineVersion`](crate::types::EngineVersion).
    pub fn build(self) -> crate::types::EngineVersion {
        crate::types::EngineVersion {
            version: self.version,
            lifecycle: self.lifecycle,
            release_status: self.release_status,
            launch_date: self.launch_date,
            auto_upgrade_date: self.auto_upgrade_date,
            deprecation_date: self.deprecation_date,
            force_upgrade_date: self.force_upgrade_date,
            available_upgrades: self.available_upgrades,
        }
    }
}
