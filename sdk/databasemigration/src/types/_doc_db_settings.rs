// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information that defines a DocumentDB endpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DocDbSettings {
    /// <p>The user name you use to access the DocumentDB source endpoint. </p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// <p> The password for the user account you use to access the DocumentDB source endpoint. </p>
    #[doc(hidden)]
    pub password: std::option::Option<std::string::String>,
    /// <p> The name of the server on the DocumentDB source endpoint. </p>
    #[doc(hidden)]
    pub server_name: std::option::Option<std::string::String>,
    /// <p> The port value for the DocumentDB source endpoint. </p>
    #[doc(hidden)]
    pub port: std::option::Option<i32>,
    /// <p> The database name on the DocumentDB source endpoint. </p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p> Specifies either document or table mode. </p>
    /// <p>Default value is <code>"none"</code>. Specify <code>"none"</code> to use document mode. Specify <code>"one"</code> to use table mode.</p>
    #[doc(hidden)]
    pub nesting_level: std::option::Option<crate::types::NestingLevelValue>,
    /// <p> Specifies the document ID. Use this setting when <code>NestingLevel</code> is set to <code>"none"</code>. </p>
    /// <p>Default value is <code>"false"</code>. </p>
    #[doc(hidden)]
    pub extract_doc_id: std::option::Option<bool>,
    /// <p> Indicates the number of documents to preview to determine the document organization. Use this setting when <code>NestingLevel</code> is set to <code>"one"</code>. </p>
    /// <p>Must be a positive value greater than <code>0</code>. Default value is <code>1000</code>.</p>
    #[doc(hidden)]
    pub docs_to_investigate: std::option::Option<i32>,
    /// <p>The KMS key identifier that is used to encrypt the content on the replication instance. If you don't specify a value for the <code>KmsKeyId</code> parameter, then DMS uses your default encryption key. KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the trusted entity and grants the required permissions to access the value in <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action. <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager secret that allows access to the DocumentDB endpoint.</p> <note>
    /// <p>You can specify one of two sets of values for these permissions. You can specify the values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify clear-text values for <code>UserName</code>, <code>Password</code>, <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more information on creating this <code>SecretsManagerSecret</code> and the <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code> required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service resources</a> in the <i>Database Migration Service User Guide</i>.</p>
    /// </note>
    #[doc(hidden)]
    pub secrets_manager_access_role_arn: std::option::Option<std::string::String>,
    /// <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the DocumentDB endpoint connection details.</p>
    #[doc(hidden)]
    pub secrets_manager_secret_id: std::option::Option<std::string::String>,
}
impl DocDbSettings {
    /// <p>The user name you use to access the DocumentDB source endpoint. </p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p> The password for the user account you use to access the DocumentDB source endpoint. </p>
    pub fn password(&self) -> std::option::Option<&str> {
        self.password.as_deref()
    }
    /// <p> The name of the server on the DocumentDB source endpoint. </p>
    pub fn server_name(&self) -> std::option::Option<&str> {
        self.server_name.as_deref()
    }
    /// <p> The port value for the DocumentDB source endpoint. </p>
    pub fn port(&self) -> std::option::Option<i32> {
        self.port
    }
    /// <p> The database name on the DocumentDB source endpoint. </p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p> Specifies either document or table mode. </p>
    /// <p>Default value is <code>"none"</code>. Specify <code>"none"</code> to use document mode. Specify <code>"one"</code> to use table mode.</p>
    pub fn nesting_level(&self) -> std::option::Option<&crate::types::NestingLevelValue> {
        self.nesting_level.as_ref()
    }
    /// <p> Specifies the document ID. Use this setting when <code>NestingLevel</code> is set to <code>"none"</code>. </p>
    /// <p>Default value is <code>"false"</code>. </p>
    pub fn extract_doc_id(&self) -> std::option::Option<bool> {
        self.extract_doc_id
    }
    /// <p> Indicates the number of documents to preview to determine the document organization. Use this setting when <code>NestingLevel</code> is set to <code>"one"</code>. </p>
    /// <p>Must be a positive value greater than <code>0</code>. Default value is <code>1000</code>.</p>
    pub fn docs_to_investigate(&self) -> std::option::Option<i32> {
        self.docs_to_investigate
    }
    /// <p>The KMS key identifier that is used to encrypt the content on the replication instance. If you don't specify a value for the <code>KmsKeyId</code> parameter, then DMS uses your default encryption key. KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Region.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the trusted entity and grants the required permissions to access the value in <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action. <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager secret that allows access to the DocumentDB endpoint.</p> <note>
    /// <p>You can specify one of two sets of values for these permissions. You can specify the values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify clear-text values for <code>UserName</code>, <code>Password</code>, <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more information on creating this <code>SecretsManagerSecret</code> and the <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code> required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service resources</a> in the <i>Database Migration Service User Guide</i>.</p>
    /// </note>
    pub fn secrets_manager_access_role_arn(&self) -> std::option::Option<&str> {
        self.secrets_manager_access_role_arn.as_deref()
    }
    /// <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the DocumentDB endpoint connection details.</p>
    pub fn secrets_manager_secret_id(&self) -> std::option::Option<&str> {
        self.secrets_manager_secret_id.as_deref()
    }
}
impl std::fmt::Debug for DocDbSettings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DocDbSettings");
        formatter.field("username", &self.username);
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.field("server_name", &self.server_name);
        formatter.field("port", &self.port);
        formatter.field("database_name", &self.database_name);
        formatter.field("nesting_level", &self.nesting_level);
        formatter.field("extract_doc_id", &self.extract_doc_id);
        formatter.field("docs_to_investigate", &self.docs_to_investigate);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field(
            "secrets_manager_access_role_arn",
            &self.secrets_manager_access_role_arn,
        );
        formatter.field("secrets_manager_secret_id", &self.secrets_manager_secret_id);
        formatter.finish()
    }
}
impl DocDbSettings {
    /// Creates a new builder-style object to manufacture [`DocDbSettings`](crate::types::DocDbSettings).
    pub fn builder() -> crate::types::builders::DocDbSettingsBuilder {
        crate::types::builders::DocDbSettingsBuilder::default()
    }
}

/// A builder for [`DocDbSettings`](crate::types::DocDbSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct DocDbSettingsBuilder {
    pub(crate) username: std::option::Option<std::string::String>,
    pub(crate) password: std::option::Option<std::string::String>,
    pub(crate) server_name: std::option::Option<std::string::String>,
    pub(crate) port: std::option::Option<i32>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) nesting_level: std::option::Option<crate::types::NestingLevelValue>,
    pub(crate) extract_doc_id: std::option::Option<bool>,
    pub(crate) docs_to_investigate: std::option::Option<i32>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) secrets_manager_access_role_arn: std::option::Option<std::string::String>,
    pub(crate) secrets_manager_secret_id: std::option::Option<std::string::String>,
}
impl DocDbSettingsBuilder {
    /// <p>The user name you use to access the DocumentDB source endpoint. </p>
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// <p>The user name you use to access the DocumentDB source endpoint. </p>
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p> The password for the user account you use to access the DocumentDB source endpoint. </p>
    pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
        self.password = Some(input.into());
        self
    }
    /// <p> The password for the user account you use to access the DocumentDB source endpoint. </p>
    pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.password = input;
        self
    }
    /// <p> The name of the server on the DocumentDB source endpoint. </p>
    pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_name = Some(input.into());
        self
    }
    /// <p> The name of the server on the DocumentDB source endpoint. </p>
    pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.server_name = input;
        self
    }
    /// <p> The port value for the DocumentDB source endpoint. </p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p> The port value for the DocumentDB source endpoint. </p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p> The database name on the DocumentDB source endpoint. </p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p> The database name on the DocumentDB source endpoint. </p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p> Specifies either document or table mode. </p>
    /// <p>Default value is <code>"none"</code>. Specify <code>"none"</code> to use document mode. Specify <code>"one"</code> to use table mode.</p>
    pub fn nesting_level(mut self, input: crate::types::NestingLevelValue) -> Self {
        self.nesting_level = Some(input);
        self
    }
    /// <p> Specifies either document or table mode. </p>
    /// <p>Default value is <code>"none"</code>. Specify <code>"none"</code> to use document mode. Specify <code>"one"</code> to use table mode.</p>
    pub fn set_nesting_level(
        mut self,
        input: std::option::Option<crate::types::NestingLevelValue>,
    ) -> Self {
        self.nesting_level = input;
        self
    }
    /// <p> Specifies the document ID. Use this setting when <code>NestingLevel</code> is set to <code>"none"</code>. </p>
    /// <p>Default value is <code>"false"</code>. </p>
    pub fn extract_doc_id(mut self, input: bool) -> Self {
        self.extract_doc_id = Some(input);
        self
    }
    /// <p> Specifies the document ID. Use this setting when <code>NestingLevel</code> is set to <code>"none"</code>. </p>
    /// <p>Default value is <code>"false"</code>. </p>
    pub fn set_extract_doc_id(mut self, input: std::option::Option<bool>) -> Self {
        self.extract_doc_id = input;
        self
    }
    /// <p> Indicates the number of documents to preview to determine the document organization. Use this setting when <code>NestingLevel</code> is set to <code>"one"</code>. </p>
    /// <p>Must be a positive value greater than <code>0</code>. Default value is <code>1000</code>.</p>
    pub fn docs_to_investigate(mut self, input: i32) -> Self {
        self.docs_to_investigate = Some(input);
        self
    }
    /// <p> Indicates the number of documents to preview to determine the document organization. Use this setting when <code>NestingLevel</code> is set to <code>"one"</code>. </p>
    /// <p>Must be a positive value greater than <code>0</code>. Default value is <code>1000</code>.</p>
    pub fn set_docs_to_investigate(mut self, input: std::option::Option<i32>) -> Self {
        self.docs_to_investigate = input;
        self
    }
    /// <p>The KMS key identifier that is used to encrypt the content on the replication instance. If you don't specify a value for the <code>KmsKeyId</code> parameter, then DMS uses your default encryption key. KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Region.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The KMS key identifier that is used to encrypt the content on the replication instance. If you don't specify a value for the <code>KmsKeyId</code> parameter, then DMS uses your default encryption key. KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Region.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the trusted entity and grants the required permissions to access the value in <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action. <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager secret that allows access to the DocumentDB endpoint.</p> <note>
    /// <p>You can specify one of two sets of values for these permissions. You can specify the values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify clear-text values for <code>UserName</code>, <code>Password</code>, <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more information on creating this <code>SecretsManagerSecret</code> and the <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code> required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service resources</a> in the <i>Database Migration Service User Guide</i>.</p>
    /// </note>
    pub fn secrets_manager_access_role_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.secrets_manager_access_role_arn = Some(input.into());
        self
    }
    /// <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the trusted entity and grants the required permissions to access the value in <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action. <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager secret that allows access to the DocumentDB endpoint.</p> <note>
    /// <p>You can specify one of two sets of values for these permissions. You can specify the values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify clear-text values for <code>UserName</code>, <code>Password</code>, <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more information on creating this <code>SecretsManagerSecret</code> and the <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code> required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service resources</a> in the <i>Database Migration Service User Guide</i>.</p>
    /// </note>
    pub fn set_secrets_manager_access_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.secrets_manager_access_role_arn = input;
        self
    }
    /// <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the DocumentDB endpoint connection details.</p>
    pub fn secrets_manager_secret_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.secrets_manager_secret_id = Some(input.into());
        self
    }
    /// <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the DocumentDB endpoint connection details.</p>
    pub fn set_secrets_manager_secret_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.secrets_manager_secret_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DocDbSettings`](crate::types::DocDbSettings).
    pub fn build(self) -> crate::types::DocDbSettings {
        crate::types::DocDbSettings {
            username: self.username,
            password: self.password,
            server_name: self.server_name,
            port: self.port,
            database_name: self.database_name,
            nesting_level: self.nesting_level,
            extract_doc_id: self.extract_doc_id,
            docs_to_investigate: self.docs_to_investigate,
            kms_key_id: self.kms_key_id,
            secrets_manager_access_role_arn: self.secrets_manager_access_role_arn,
            secrets_manager_secret_id: self.secrets_manager_secret_id,
        }
    }
}
impl std::fmt::Debug for DocDbSettingsBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DocDbSettingsBuilder");
        formatter.field("username", &self.username);
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.field("server_name", &self.server_name);
        formatter.field("port", &self.port);
        formatter.field("database_name", &self.database_name);
        formatter.field("nesting_level", &self.nesting_level);
        formatter.field("extract_doc_id", &self.extract_doc_id);
        formatter.field("docs_to_investigate", &self.docs_to_investigate);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field(
            "secrets_manager_access_role_arn",
            &self.secrets_manager_access_role_arn,
        );
        formatter.field("secrets_manager_secret_id", &self.secrets_manager_secret_id);
        formatter.finish()
    }
}
