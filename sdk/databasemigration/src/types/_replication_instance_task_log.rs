// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains metadata for a replication instance task log.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplicationInstanceTaskLog {
    /// <p>The name of the replication task.</p>
    #[doc(hidden)]
    pub replication_task_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the replication task.</p>
    #[doc(hidden)]
    pub replication_task_arn: std::option::Option<std::string::String>,
    /// <p>The size, in bytes, of the replication task log.</p>
    #[doc(hidden)]
    pub replication_instance_task_log_size: i64,
}
impl ReplicationInstanceTaskLog {
    /// <p>The name of the replication task.</p>
    pub fn replication_task_name(&self) -> std::option::Option<&str> {
        self.replication_task_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the replication task.</p>
    pub fn replication_task_arn(&self) -> std::option::Option<&str> {
        self.replication_task_arn.as_deref()
    }
    /// <p>The size, in bytes, of the replication task log.</p>
    pub fn replication_instance_task_log_size(&self) -> i64 {
        self.replication_instance_task_log_size
    }
}
impl ReplicationInstanceTaskLog {
    /// Creates a new builder-style object to manufacture [`ReplicationInstanceTaskLog`](crate::types::ReplicationInstanceTaskLog).
    pub fn builder() -> crate::types::builders::ReplicationInstanceTaskLogBuilder {
        crate::types::builders::ReplicationInstanceTaskLogBuilder::default()
    }
}

/// A builder for [`ReplicationInstanceTaskLog`](crate::types::ReplicationInstanceTaskLog).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReplicationInstanceTaskLogBuilder {
    pub(crate) replication_task_name: std::option::Option<std::string::String>,
    pub(crate) replication_task_arn: std::option::Option<std::string::String>,
    pub(crate) replication_instance_task_log_size: std::option::Option<i64>,
}
impl ReplicationInstanceTaskLogBuilder {
    /// <p>The name of the replication task.</p>
    pub fn replication_task_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.replication_task_name = Some(input.into());
        self
    }
    /// <p>The name of the replication task.</p>
    pub fn set_replication_task_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_task_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replication task.</p>
    pub fn replication_task_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.replication_task_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replication task.</p>
    pub fn set_replication_task_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_task_arn = input;
        self
    }
    /// <p>The size, in bytes, of the replication task log.</p>
    pub fn replication_instance_task_log_size(mut self, input: i64) -> Self {
        self.replication_instance_task_log_size = Some(input);
        self
    }
    /// <p>The size, in bytes, of the replication task log.</p>
    pub fn set_replication_instance_task_log_size(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.replication_instance_task_log_size = input;
        self
    }
    /// Consumes the builder and constructs a [`ReplicationInstanceTaskLog`](crate::types::ReplicationInstanceTaskLog).
    pub fn build(self) -> crate::types::ReplicationInstanceTaskLog {
        crate::types::ReplicationInstanceTaskLog {
            replication_task_name: self.replication_task_name,
            replication_task_arn: self.replication_task_arn,
            replication_instance_task_log_size: self
                .replication_instance_task_log_size
                .unwrap_or_default(),
        }
    }
}
