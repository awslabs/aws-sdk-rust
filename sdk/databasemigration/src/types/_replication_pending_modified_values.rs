// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the values of pending modifications to a replication instance. This data type is an object of the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_ReplicationInstance.html"> <code>ReplicationInstance</code> </a> user-defined data type. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplicationPendingModifiedValues {
    /// <p>The compute and memory capacity of the replication instance as defined for the specified replication instance class.</p>
    /// <p>For more information on the settings and capacities for the available replication instance classes, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth"> Selecting the right DMS replication instance for your migration</a>. </p>
    #[doc(hidden)]
    pub replication_instance_class: std::option::Option<std::string::String>,
    /// <p>The amount of storage (in gigabytes) that is allocated for the replication instance.</p>
    #[doc(hidden)]
    pub allocated_storage: std::option::Option<i32>,
    /// <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to <code>true</code>. </p>
    #[doc(hidden)]
    pub multi_az: std::option::Option<bool>,
    /// <p>The engine version number of the replication instance.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The type of IP address protocol used by a replication instance, such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    #[doc(hidden)]
    pub network_type: std::option::Option<std::string::String>,
}
impl ReplicationPendingModifiedValues {
    /// <p>The compute and memory capacity of the replication instance as defined for the specified replication instance class.</p>
    /// <p>For more information on the settings and capacities for the available replication instance classes, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth"> Selecting the right DMS replication instance for your migration</a>. </p>
    pub fn replication_instance_class(&self) -> std::option::Option<&str> {
        self.replication_instance_class.as_deref()
    }
    /// <p>The amount of storage (in gigabytes) that is allocated for the replication instance.</p>
    pub fn allocated_storage(&self) -> std::option::Option<i32> {
        self.allocated_storage
    }
    /// <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to <code>true</code>. </p>
    pub fn multi_az(&self) -> std::option::Option<bool> {
        self.multi_az
    }
    /// <p>The engine version number of the replication instance.</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The type of IP address protocol used by a replication instance, such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    pub fn network_type(&self) -> std::option::Option<&str> {
        self.network_type.as_deref()
    }
}
impl ReplicationPendingModifiedValues {
    /// Creates a new builder-style object to manufacture [`ReplicationPendingModifiedValues`](crate::types::ReplicationPendingModifiedValues).
    pub fn builder() -> crate::types::builders::ReplicationPendingModifiedValuesBuilder {
        crate::types::builders::ReplicationPendingModifiedValuesBuilder::default()
    }
}

/// A builder for [`ReplicationPendingModifiedValues`](crate::types::ReplicationPendingModifiedValues).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReplicationPendingModifiedValuesBuilder {
    pub(crate) replication_instance_class: std::option::Option<std::string::String>,
    pub(crate) allocated_storage: std::option::Option<i32>,
    pub(crate) multi_az: std::option::Option<bool>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) network_type: std::option::Option<std::string::String>,
}
impl ReplicationPendingModifiedValuesBuilder {
    /// <p>The compute and memory capacity of the replication instance as defined for the specified replication instance class.</p>
    /// <p>For more information on the settings and capacities for the available replication instance classes, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth"> Selecting the right DMS replication instance for your migration</a>. </p>
    pub fn replication_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.replication_instance_class = Some(input.into());
        self
    }
    /// <p>The compute and memory capacity of the replication instance as defined for the specified replication instance class.</p>
    /// <p>For more information on the settings and capacities for the available replication instance classes, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth"> Selecting the right DMS replication instance for your migration</a>. </p>
    pub fn set_replication_instance_class(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_instance_class = input;
        self
    }
    /// <p>The amount of storage (in gigabytes) that is allocated for the replication instance.</p>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.allocated_storage = Some(input);
        self
    }
    /// <p>The amount of storage (in gigabytes) that is allocated for the replication instance.</p>
    pub fn set_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
        self.allocated_storage = input;
        self
    }
    /// <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to <code>true</code>. </p>
    pub fn multi_az(mut self, input: bool) -> Self {
        self.multi_az = Some(input);
        self
    }
    /// <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to <code>true</code>. </p>
    pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
        self.multi_az = input;
        self
    }
    /// <p>The engine version number of the replication instance.</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The engine version number of the replication instance.</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The type of IP address protocol used by a replication instance, such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    pub fn network_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_type = Some(input.into());
        self
    }
    /// <p>The type of IP address protocol used by a replication instance, such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
    pub fn set_network_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.network_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ReplicationPendingModifiedValues`](crate::types::ReplicationPendingModifiedValues).
    pub fn build(self) -> crate::types::ReplicationPendingModifiedValues {
        crate::types::ReplicationPendingModifiedValues {
            replication_instance_class: self.replication_instance_class,
            allocated_storage: self.allocated_storage,
            multi_az: self.multi_az,
            engine_version: self.engine_version,
            network_type: self.network_type,
        }
    }
}
