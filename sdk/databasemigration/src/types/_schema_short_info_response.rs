// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a schema in a Fleet Advisor collector inventory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SchemaShortInfoResponse {
    /// <p>The ID of a schema in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub schema_id: std::option::Option<std::string::String>,
    /// <p>The name of a schema in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub schema_name: std::option::Option<std::string::String>,
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub database_id: std::option::Option<std::string::String>,
    /// <p>The name of a database in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The IP address of a database in a Fleet Advisor collector inventory.</p>
    #[doc(hidden)]
    pub database_ip_address: std::option::Option<std::string::String>,
}
impl SchemaShortInfoResponse {
    /// <p>The ID of a schema in a Fleet Advisor collector inventory.</p>
    pub fn schema_id(&self) -> std::option::Option<&str> {
        self.schema_id.as_deref()
    }
    /// <p>The name of a schema in a Fleet Advisor collector inventory.</p>
    pub fn schema_name(&self) -> std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_id(&self) -> std::option::Option<&str> {
        self.database_id.as_deref()
    }
    /// <p>The name of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The IP address of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_ip_address(&self) -> std::option::Option<&str> {
        self.database_ip_address.as_deref()
    }
}
impl SchemaShortInfoResponse {
    /// Creates a new builder-style object to manufacture [`SchemaShortInfoResponse`](crate::types::SchemaShortInfoResponse).
    pub fn builder() -> crate::types::builders::SchemaShortInfoResponseBuilder {
        crate::types::builders::SchemaShortInfoResponseBuilder::default()
    }
}

/// A builder for [`SchemaShortInfoResponse`](crate::types::SchemaShortInfoResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SchemaShortInfoResponseBuilder {
    pub(crate) schema_id: std::option::Option<std::string::String>,
    pub(crate) schema_name: std::option::Option<std::string::String>,
    pub(crate) database_id: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) database_ip_address: std::option::Option<std::string::String>,
}
impl SchemaShortInfoResponseBuilder {
    /// <p>The ID of a schema in a Fleet Advisor collector inventory.</p>
    pub fn schema_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_id = Some(input.into());
        self
    }
    /// <p>The ID of a schema in a Fleet Advisor collector inventory.</p>
    pub fn set_schema_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_id = input;
        self
    }
    /// <p>The name of a schema in a Fleet Advisor collector inventory.</p>
    pub fn schema_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_name = Some(input.into());
        self
    }
    /// <p>The name of a schema in a Fleet Advisor collector inventory.</p>
    pub fn set_schema_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_id = Some(input.into());
        self
    }
    /// <p>The ID of a database in a Fleet Advisor collector inventory.</p>
    pub fn set_database_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_id = input;
        self
    }
    /// <p>The name of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>The name of a database in a Fleet Advisor collector inventory.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The IP address of a database in a Fleet Advisor collector inventory.</p>
    pub fn database_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_ip_address = Some(input.into());
        self
    }
    /// <p>The IP address of a database in a Fleet Advisor collector inventory.</p>
    pub fn set_database_ip_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.database_ip_address = input;
        self
    }
    /// Consumes the builder and constructs a [`SchemaShortInfoResponse`](crate::types::SchemaShortInfoResponse).
    pub fn build(self) -> crate::types::SchemaShortInfoResponse {
        crate::types::SchemaShortInfoResponse {
            schema_id: self.schema_id,
            schema_name: self.schema_name,
            database_id: self.database_id,
            database_name: self.database_name,
            database_ip_address: self.database_ip_address,
        }
    }
}
