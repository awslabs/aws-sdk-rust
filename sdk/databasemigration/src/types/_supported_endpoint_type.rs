// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about types of supported endpoints in response to a request by the <code>DescribeEndpointTypes</code> operation. This information includes the type of endpoint, the database engine name, and whether change data capture (CDC) is supported.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SupportedEndpointType {
    /// <p>The database engine name. Valid values, depending on the EndpointType, include <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, <code>"mariadb"</code>, <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"redshift"</code>, <code>"s3"</code>, <code>"db2"</code>, <code>"db2-zos"</code>, <code>"azuredb"</code>, <code>"sybase"</code>, <code>"dynamodb"</code>, <code>"mongodb"</code>, <code>"kinesis"</code>, <code>"kafka"</code>, <code>"elasticsearch"</code>, <code>"documentdb"</code>, <code>"sqlserver"</code>, <code>"neptune"</code>, and <code>"babelfish"</code>.</p>
    #[doc(hidden)]
    pub engine_name: std::option::Option<std::string::String>,
    /// <p>Indicates if change data capture (CDC) is supported.</p>
    #[doc(hidden)]
    pub supports_cdc: bool,
    /// <p>The type of endpoint. Valid values are <code>source</code> and <code>target</code>.</p>
    #[doc(hidden)]
    pub endpoint_type: std::option::Option<crate::types::ReplicationEndpointTypeValue>,
    /// <p>The earliest DMS engine version that supports this endpoint engine. Note that endpoint engines released with DMS versions earlier than 3.1.1 do not return a value for this parameter.</p>
    #[doc(hidden)]
    pub replication_instance_engine_minimum_version: std::option::Option<std::string::String>,
    /// <p>The expanded name for the engine name. For example, if the <code>EngineName</code> parameter is "aurora", this value would be "Amazon Aurora MySQL".</p>
    #[doc(hidden)]
    pub engine_display_name: std::option::Option<std::string::String>,
}
impl SupportedEndpointType {
    /// <p>The database engine name. Valid values, depending on the EndpointType, include <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, <code>"mariadb"</code>, <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"redshift"</code>, <code>"s3"</code>, <code>"db2"</code>, <code>"db2-zos"</code>, <code>"azuredb"</code>, <code>"sybase"</code>, <code>"dynamodb"</code>, <code>"mongodb"</code>, <code>"kinesis"</code>, <code>"kafka"</code>, <code>"elasticsearch"</code>, <code>"documentdb"</code>, <code>"sqlserver"</code>, <code>"neptune"</code>, and <code>"babelfish"</code>.</p>
    pub fn engine_name(&self) -> std::option::Option<&str> {
        self.engine_name.as_deref()
    }
    /// <p>Indicates if change data capture (CDC) is supported.</p>
    pub fn supports_cdc(&self) -> bool {
        self.supports_cdc
    }
    /// <p>The type of endpoint. Valid values are <code>source</code> and <code>target</code>.</p>
    pub fn endpoint_type(
        &self,
    ) -> std::option::Option<&crate::types::ReplicationEndpointTypeValue> {
        self.endpoint_type.as_ref()
    }
    /// <p>The earliest DMS engine version that supports this endpoint engine. Note that endpoint engines released with DMS versions earlier than 3.1.1 do not return a value for this parameter.</p>
    pub fn replication_instance_engine_minimum_version(&self) -> std::option::Option<&str> {
        self.replication_instance_engine_minimum_version.as_deref()
    }
    /// <p>The expanded name for the engine name. For example, if the <code>EngineName</code> parameter is "aurora", this value would be "Amazon Aurora MySQL".</p>
    pub fn engine_display_name(&self) -> std::option::Option<&str> {
        self.engine_display_name.as_deref()
    }
}
impl SupportedEndpointType {
    /// Creates a new builder-style object to manufacture [`SupportedEndpointType`](crate::types::SupportedEndpointType).
    pub fn builder() -> crate::types::builders::SupportedEndpointTypeBuilder {
        crate::types::builders::SupportedEndpointTypeBuilder::default()
    }
}

/// A builder for [`SupportedEndpointType`](crate::types::SupportedEndpointType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SupportedEndpointTypeBuilder {
    pub(crate) engine_name: std::option::Option<std::string::String>,
    pub(crate) supports_cdc: std::option::Option<bool>,
    pub(crate) endpoint_type: std::option::Option<crate::types::ReplicationEndpointTypeValue>,
    pub(crate) replication_instance_engine_minimum_version:
        std::option::Option<std::string::String>,
    pub(crate) engine_display_name: std::option::Option<std::string::String>,
}
impl SupportedEndpointTypeBuilder {
    /// <p>The database engine name. Valid values, depending on the EndpointType, include <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, <code>"mariadb"</code>, <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"redshift"</code>, <code>"s3"</code>, <code>"db2"</code>, <code>"db2-zos"</code>, <code>"azuredb"</code>, <code>"sybase"</code>, <code>"dynamodb"</code>, <code>"mongodb"</code>, <code>"kinesis"</code>, <code>"kafka"</code>, <code>"elasticsearch"</code>, <code>"documentdb"</code>, <code>"sqlserver"</code>, <code>"neptune"</code>, and <code>"babelfish"</code>.</p>
    pub fn engine_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_name = Some(input.into());
        self
    }
    /// <p>The database engine name. Valid values, depending on the EndpointType, include <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, <code>"mariadb"</code>, <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"redshift"</code>, <code>"s3"</code>, <code>"db2"</code>, <code>"db2-zos"</code>, <code>"azuredb"</code>, <code>"sybase"</code>, <code>"dynamodb"</code>, <code>"mongodb"</code>, <code>"kinesis"</code>, <code>"kafka"</code>, <code>"elasticsearch"</code>, <code>"documentdb"</code>, <code>"sqlserver"</code>, <code>"neptune"</code>, and <code>"babelfish"</code>.</p>
    pub fn set_engine_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_name = input;
        self
    }
    /// <p>Indicates if change data capture (CDC) is supported.</p>
    pub fn supports_cdc(mut self, input: bool) -> Self {
        self.supports_cdc = Some(input);
        self
    }
    /// <p>Indicates if change data capture (CDC) is supported.</p>
    pub fn set_supports_cdc(mut self, input: std::option::Option<bool>) -> Self {
        self.supports_cdc = input;
        self
    }
    /// <p>The type of endpoint. Valid values are <code>source</code> and <code>target</code>.</p>
    pub fn endpoint_type(mut self, input: crate::types::ReplicationEndpointTypeValue) -> Self {
        self.endpoint_type = Some(input);
        self
    }
    /// <p>The type of endpoint. Valid values are <code>source</code> and <code>target</code>.</p>
    pub fn set_endpoint_type(
        mut self,
        input: std::option::Option<crate::types::ReplicationEndpointTypeValue>,
    ) -> Self {
        self.endpoint_type = input;
        self
    }
    /// <p>The earliest DMS engine version that supports this endpoint engine. Note that endpoint engines released with DMS versions earlier than 3.1.1 do not return a value for this parameter.</p>
    pub fn replication_instance_engine_minimum_version(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.replication_instance_engine_minimum_version = Some(input.into());
        self
    }
    /// <p>The earliest DMS engine version that supports this endpoint engine. Note that endpoint engines released with DMS versions earlier than 3.1.1 do not return a value for this parameter.</p>
    pub fn set_replication_instance_engine_minimum_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_instance_engine_minimum_version = input;
        self
    }
    /// <p>The expanded name for the engine name. For example, if the <code>EngineName</code> parameter is "aurora", this value would be "Amazon Aurora MySQL".</p>
    pub fn engine_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_display_name = Some(input.into());
        self
    }
    /// <p>The expanded name for the engine name. For example, if the <code>EngineName</code> parameter is "aurora", this value would be "Amazon Aurora MySQL".</p>
    pub fn set_engine_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.engine_display_name = input;
        self
    }
    /// Consumes the builder and constructs a [`SupportedEndpointType`](crate::types::SupportedEndpointType).
    pub fn build(self) -> crate::types::SupportedEndpointType {
        crate::types::SupportedEndpointType {
            engine_name: self.engine_name,
            supports_cdc: self.supports_cdc.unwrap_or_default(),
            endpoint_type: self.endpoint_type,
            replication_instance_engine_minimum_version: self
                .replication_instance_engine_minimum_version,
            engine_display_name: self.engine_display_name,
        }
    }
}
