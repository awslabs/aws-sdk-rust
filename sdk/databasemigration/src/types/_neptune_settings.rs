// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information that defines an Amazon Neptune endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NeptuneSettings {
    /// <p>The Amazon Resource Name (ARN) of the service role that you created for the Neptune target endpoint. The role must allow the <code>iam:PassRole</code> action. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Neptune.html#CHAP_Target.Neptune.ServiceRole">Creating an IAM Service Role for Accessing Amazon Neptune as a Target</a> in the <i>Database Migration Service User Guide. </i> </p>
    pub service_access_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon S3 bucket where DMS can temporarily store migrated graph data in .csv files before bulk-loading it to the Neptune target database. DMS maps the SQL source data to graph data before storing it in these .csv files.</p>
    pub s3_bucket_name: ::std::string::String,
    /// <p>A folder path where you want DMS to store migrated graph data in the S3 bucket specified by <code>S3BucketName</code> </p>
    pub s3_bucket_folder: ::std::string::String,
    /// <p>The number of milliseconds for DMS to wait to retry a bulk-load of migrated graph data to the Neptune target database before raising an error. The default is 250.</p>
    pub error_retry_duration: ::std::option::Option<i32>,
    /// <p>The maximum size in kilobytes of migrated graph data stored in a .csv file before DMS bulk-loads the data to the Neptune target database. The default is 1,048,576 KB. If the bulk load is successful, DMS clears the bucket, ready to store the next batch of migrated graph data.</p>
    pub max_file_size: ::std::option::Option<i32>,
    /// <p>The number of times for DMS to retry a bulk load of migrated graph data to the Neptune target database before raising an error. The default is 5.</p>
    pub max_retry_count: ::std::option::Option<i32>,
    /// <p>If you want Identity and Access Management (IAM) authorization enabled for this endpoint, set this parameter to <code>true</code>. Then attach the appropriate IAM policy document to your service role specified by <code>ServiceAccessRoleArn</code>. The default is <code>false</code>.</p>
    pub iam_auth_enabled: ::std::option::Option<bool>,
}
impl NeptuneSettings {
    /// <p>The Amazon Resource Name (ARN) of the service role that you created for the Neptune target endpoint. The role must allow the <code>iam:PassRole</code> action. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Neptune.html#CHAP_Target.Neptune.ServiceRole">Creating an IAM Service Role for Accessing Amazon Neptune as a Target</a> in the <i>Database Migration Service User Guide. </i> </p>
    pub fn service_access_role_arn(&self) -> ::std::option::Option<&str> {
        self.service_access_role_arn.as_deref()
    }
    /// <p>The name of the Amazon S3 bucket where DMS can temporarily store migrated graph data in .csv files before bulk-loading it to the Neptune target database. DMS maps the SQL source data to graph data before storing it in these .csv files.</p>
    pub fn s3_bucket_name(&self) -> &str {
        use std::ops::Deref;
        self.s3_bucket_name.deref()
    }
    /// <p>A folder path where you want DMS to store migrated graph data in the S3 bucket specified by <code>S3BucketName</code> </p>
    pub fn s3_bucket_folder(&self) -> &str {
        use std::ops::Deref;
        self.s3_bucket_folder.deref()
    }
    /// <p>The number of milliseconds for DMS to wait to retry a bulk-load of migrated graph data to the Neptune target database before raising an error. The default is 250.</p>
    pub fn error_retry_duration(&self) -> ::std::option::Option<i32> {
        self.error_retry_duration
    }
    /// <p>The maximum size in kilobytes of migrated graph data stored in a .csv file before DMS bulk-loads the data to the Neptune target database. The default is 1,048,576 KB. If the bulk load is successful, DMS clears the bucket, ready to store the next batch of migrated graph data.</p>
    pub fn max_file_size(&self) -> ::std::option::Option<i32> {
        self.max_file_size
    }
    /// <p>The number of times for DMS to retry a bulk load of migrated graph data to the Neptune target database before raising an error. The default is 5.</p>
    pub fn max_retry_count(&self) -> ::std::option::Option<i32> {
        self.max_retry_count
    }
    /// <p>If you want Identity and Access Management (IAM) authorization enabled for this endpoint, set this parameter to <code>true</code>. Then attach the appropriate IAM policy document to your service role specified by <code>ServiceAccessRoleArn</code>. The default is <code>false</code>.</p>
    pub fn iam_auth_enabled(&self) -> ::std::option::Option<bool> {
        self.iam_auth_enabled
    }
}
impl NeptuneSettings {
    /// Creates a new builder-style object to manufacture [`NeptuneSettings`](crate::types::NeptuneSettings).
    pub fn builder() -> crate::types::builders::NeptuneSettingsBuilder {
        crate::types::builders::NeptuneSettingsBuilder::default()
    }
}

/// A builder for [`NeptuneSettings`](crate::types::NeptuneSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NeptuneSettingsBuilder {
    pub(crate) service_access_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket_folder: ::std::option::Option<::std::string::String>,
    pub(crate) error_retry_duration: ::std::option::Option<i32>,
    pub(crate) max_file_size: ::std::option::Option<i32>,
    pub(crate) max_retry_count: ::std::option::Option<i32>,
    pub(crate) iam_auth_enabled: ::std::option::Option<bool>,
}
impl NeptuneSettingsBuilder {
    /// <p>The Amazon Resource Name (ARN) of the service role that you created for the Neptune target endpoint. The role must allow the <code>iam:PassRole</code> action. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Neptune.html#CHAP_Target.Neptune.ServiceRole">Creating an IAM Service Role for Accessing Amazon Neptune as a Target</a> in the <i>Database Migration Service User Guide. </i> </p>
    pub fn service_access_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_access_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service role that you created for the Neptune target endpoint. The role must allow the <code>iam:PassRole</code> action. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Neptune.html#CHAP_Target.Neptune.ServiceRole">Creating an IAM Service Role for Accessing Amazon Neptune as a Target</a> in the <i>Database Migration Service User Guide. </i> </p>
    pub fn set_service_access_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_access_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service role that you created for the Neptune target endpoint. The role must allow the <code>iam:PassRole</code> action. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Neptune.html#CHAP_Target.Neptune.ServiceRole">Creating an IAM Service Role for Accessing Amazon Neptune as a Target</a> in the <i>Database Migration Service User Guide. </i> </p>
    pub fn get_service_access_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_access_role_arn
    }
    /// <p>The name of the Amazon S3 bucket where DMS can temporarily store migrated graph data in .csv files before bulk-loading it to the Neptune target database. DMS maps the SQL source data to graph data before storing it in these .csv files.</p>
    /// This field is required.
    pub fn s3_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket where DMS can temporarily store migrated graph data in .csv files before bulk-loading it to the Neptune target database. DMS maps the SQL source data to graph data before storing it in these .csv files.</p>
    pub fn set_s3_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The name of the Amazon S3 bucket where DMS can temporarily store migrated graph data in .csv files before bulk-loading it to the Neptune target database. DMS maps the SQL source data to graph data before storing it in these .csv files.</p>
    pub fn get_s3_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket_name
    }
    /// <p>A folder path where you want DMS to store migrated graph data in the S3 bucket specified by <code>S3BucketName</code> </p>
    /// This field is required.
    pub fn s3_bucket_folder(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket_folder = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A folder path where you want DMS to store migrated graph data in the S3 bucket specified by <code>S3BucketName</code> </p>
    pub fn set_s3_bucket_folder(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket_folder = input;
        self
    }
    /// <p>A folder path where you want DMS to store migrated graph data in the S3 bucket specified by <code>S3BucketName</code> </p>
    pub fn get_s3_bucket_folder(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket_folder
    }
    /// <p>The number of milliseconds for DMS to wait to retry a bulk-load of migrated graph data to the Neptune target database before raising an error. The default is 250.</p>
    pub fn error_retry_duration(mut self, input: i32) -> Self {
        self.error_retry_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of milliseconds for DMS to wait to retry a bulk-load of migrated graph data to the Neptune target database before raising an error. The default is 250.</p>
    pub fn set_error_retry_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.error_retry_duration = input;
        self
    }
    /// <p>The number of milliseconds for DMS to wait to retry a bulk-load of migrated graph data to the Neptune target database before raising an error. The default is 250.</p>
    pub fn get_error_retry_duration(&self) -> &::std::option::Option<i32> {
        &self.error_retry_duration
    }
    /// <p>The maximum size in kilobytes of migrated graph data stored in a .csv file before DMS bulk-loads the data to the Neptune target database. The default is 1,048,576 KB. If the bulk load is successful, DMS clears the bucket, ready to store the next batch of migrated graph data.</p>
    pub fn max_file_size(mut self, input: i32) -> Self {
        self.max_file_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum size in kilobytes of migrated graph data stored in a .csv file before DMS bulk-loads the data to the Neptune target database. The default is 1,048,576 KB. If the bulk load is successful, DMS clears the bucket, ready to store the next batch of migrated graph data.</p>
    pub fn set_max_file_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_file_size = input;
        self
    }
    /// <p>The maximum size in kilobytes of migrated graph data stored in a .csv file before DMS bulk-loads the data to the Neptune target database. The default is 1,048,576 KB. If the bulk load is successful, DMS clears the bucket, ready to store the next batch of migrated graph data.</p>
    pub fn get_max_file_size(&self) -> &::std::option::Option<i32> {
        &self.max_file_size
    }
    /// <p>The number of times for DMS to retry a bulk load of migrated graph data to the Neptune target database before raising an error. The default is 5.</p>
    pub fn max_retry_count(mut self, input: i32) -> Self {
        self.max_retry_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times for DMS to retry a bulk load of migrated graph data to the Neptune target database before raising an error. The default is 5.</p>
    pub fn set_max_retry_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_retry_count = input;
        self
    }
    /// <p>The number of times for DMS to retry a bulk load of migrated graph data to the Neptune target database before raising an error. The default is 5.</p>
    pub fn get_max_retry_count(&self) -> &::std::option::Option<i32> {
        &self.max_retry_count
    }
    /// <p>If you want Identity and Access Management (IAM) authorization enabled for this endpoint, set this parameter to <code>true</code>. Then attach the appropriate IAM policy document to your service role specified by <code>ServiceAccessRoleArn</code>. The default is <code>false</code>.</p>
    pub fn iam_auth_enabled(mut self, input: bool) -> Self {
        self.iam_auth_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you want Identity and Access Management (IAM) authorization enabled for this endpoint, set this parameter to <code>true</code>. Then attach the appropriate IAM policy document to your service role specified by <code>ServiceAccessRoleArn</code>. The default is <code>false</code>.</p>
    pub fn set_iam_auth_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.iam_auth_enabled = input;
        self
    }
    /// <p>If you want Identity and Access Management (IAM) authorization enabled for this endpoint, set this parameter to <code>true</code>. Then attach the appropriate IAM policy document to your service role specified by <code>ServiceAccessRoleArn</code>. The default is <code>false</code>.</p>
    pub fn get_iam_auth_enabled(&self) -> &::std::option::Option<bool> {
        &self.iam_auth_enabled
    }
    /// Consumes the builder and constructs a [`NeptuneSettings`](crate::types::NeptuneSettings).
    /// This method will fail if any of the following fields are not set:
    /// - [`s3_bucket_name`](crate::types::builders::NeptuneSettingsBuilder::s3_bucket_name)
    /// - [`s3_bucket_folder`](crate::types::builders::NeptuneSettingsBuilder::s3_bucket_folder)
    pub fn build(self) -> ::std::result::Result<crate::types::NeptuneSettings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NeptuneSettings {
            service_access_role_arn: self.service_access_role_arn,
            s3_bucket_name: self.s3_bucket_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_bucket_name",
                    "s3_bucket_name was not specified but it is required when building NeptuneSettings",
                )
            })?,
            s3_bucket_folder: self.s3_bucket_folder.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_bucket_folder",
                    "s3_bucket_folder was not specified but it is required when building NeptuneSettings",
                )
            })?,
            error_retry_duration: self.error_retry_duration,
            max_file_size: self.max_file_size,
            max_retry_count: self.max_retry_count,
            iam_auth_enabled: self.iam_auth_enabled,
        })
    }
}
