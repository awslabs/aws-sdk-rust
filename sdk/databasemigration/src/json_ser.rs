// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_tags_to_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsToResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.resource_arn {
        object.key("ResourceArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.tags {
        let mut array_3 = object.key("Tags").start_array();
        for item_4 in var_2 {
            {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_apply_pending_maintenance_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ApplyPendingMaintenanceActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.apply_action {
        object.key("ApplyAction").string(var_7.as_str());
    }
    if let Some(var_8) = &input.opt_in_type {
        object.key("OptInType").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_replication_task_assessment_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelReplicationTaskAssessmentRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.replication_task_assessment_run_arn {
        object
            .key("ReplicationTaskAssessmentRunArn")
            .string(var_9.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.endpoint_identifier {
        object.key("EndpointIdentifier").string(var_10.as_str());
    }
    if let Some(var_11) = &input.endpoint_type {
        object.key("EndpointType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.engine_name {
        object.key("EngineName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.username {
        object.key("Username").string(var_13.as_str());
    }
    if let Some(var_14) = &input.password {
        object.key("Password").string(var_14.as_str());
    }
    if let Some(var_15) = &input.server_name {
        object.key("ServerName").string(var_15.as_str());
    }
    if let Some(var_16) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.database_name {
        object.key("DatabaseName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.extra_connection_attributes {
        object
            .key("ExtraConnectionAttributes")
            .string(var_18.as_str());
    }
    if let Some(var_19) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("Tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.certificate_arn {
        object.key("CertificateArn").string(var_24.as_str());
    }
    if let Some(var_25) = &input.ssl_mode {
        object.key("SslMode").string(var_25.as_str());
    }
    if let Some(var_26) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_26.as_str());
    }
    if let Some(var_27) = &input.external_table_definition {
        object
            .key("ExternalTableDefinition")
            .string(var_27.as_str());
    }
    if let Some(var_28) = &input.dynamo_db_settings {
        let mut object_29 = object.key("DynamoDbSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamo_db_settings(
            &mut object_29,
            var_28,
        )?;
        object_29.finish();
    }
    if let Some(var_30) = &input.s3_settings {
        let mut object_31 = object.key("S3Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_settings(&mut object_31, var_30)?;
        object_31.finish();
    }
    if let Some(var_32) = &input.dms_transfer_settings {
        let mut object_33 = object.key("DmsTransferSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dms_transfer_settings(
            &mut object_33,
            var_32,
        )?;
        object_33.finish();
    }
    if let Some(var_34) = &input.mongo_db_settings {
        let mut object_35 = object.key("MongoDbSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_mongo_db_settings(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.kinesis_settings {
        let mut object_37 = object.key("KinesisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_settings(&mut object_37, var_36)?;
        object_37.finish();
    }
    if let Some(var_38) = &input.kafka_settings {
        let mut object_39 = object.key("KafkaSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_settings(&mut object_39, var_38)?;
        object_39.finish();
    }
    if let Some(var_40) = &input.elasticsearch_settings {
        let mut object_41 = object.key("ElasticsearchSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_elasticsearch_settings(
            &mut object_41,
            var_40,
        )?;
        object_41.finish();
    }
    if let Some(var_42) = &input.neptune_settings {
        let mut object_43 = object.key("NeptuneSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_neptune_settings(&mut object_43, var_42)?;
        object_43.finish();
    }
    if let Some(var_44) = &input.redshift_settings {
        let mut object_45 = object.key("RedshiftSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_settings(&mut object_45, var_44)?;
        object_45.finish();
    }
    if let Some(var_46) = &input.postgre_sql_settings {
        let mut object_47 = object.key("PostgreSQLSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_postgre_sql_settings(
            &mut object_47,
            var_46,
        )?;
        object_47.finish();
    }
    if let Some(var_48) = &input.my_sql_settings {
        let mut object_49 = object.key("MySQLSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_my_sql_settings(&mut object_49, var_48)?;
        object_49.finish();
    }
    if let Some(var_50) = &input.oracle_settings {
        let mut object_51 = object.key("OracleSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_oracle_settings(&mut object_51, var_50)?;
        object_51.finish();
    }
    if let Some(var_52) = &input.sybase_settings {
        let mut object_53 = object.key("SybaseSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sybase_settings(&mut object_53, var_52)?;
        object_53.finish();
    }
    if let Some(var_54) = &input.microsoft_sql_server_settings {
        let mut object_55 = object.key("MicrosoftSQLServerSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_microsoft_sql_server_settings(
            &mut object_55,
            var_54,
        )?;
        object_55.finish();
    }
    if let Some(var_56) = &input.ibm_db2_settings {
        let mut object_57 = object.key("IBMDb2Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_ibm_db2_settings(&mut object_57, var_56)?;
        object_57.finish();
    }
    if let Some(var_58) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_58.as_str());
    }
    if let Some(var_59) = &input.doc_db_settings {
        let mut object_60 = object.key("DocDbSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_doc_db_settings(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.redis_settings {
        let mut object_62 = object.key("RedisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_redis_settings(&mut object_62, var_61)?;
        object_62.finish();
    }
    if let Some(var_63) = &input.gcp_my_sql_settings {
        let mut object_64 = object.key("GcpMySQLSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_gcp_my_sql_settings(
            &mut object_64,
            var_63,
        )?;
        object_64.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_event_subscription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.subscription_name {
        object.key("SubscriptionName").string(var_65.as_str());
    }
    if let Some(var_66) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_66.as_str());
    }
    if let Some(var_67) = &input.source_type {
        object.key("SourceType").string(var_67.as_str());
    }
    if let Some(var_68) = &input.event_categories {
        let mut array_69 = object.key("EventCategories").start_array();
        for item_70 in var_68 {
            {
                array_69.value().string(item_70.as_str());
            }
        }
        array_69.finish();
    }
    if let Some(var_71) = &input.source_ids {
        let mut array_72 = object.key("SourceIds").start_array();
        for item_73 in var_71 {
            {
                array_72.value().string(item_73.as_str());
            }
        }
        array_72.finish();
    }
    if let Some(var_74) = &input.enabled {
        object.key("Enabled").boolean(*var_74);
    }
    if let Some(var_75) = &input.tags {
        let mut array_76 = object.key("Tags").start_array();
        for item_77 in var_75 {
            {
                let mut object_78 = array_76.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_78, item_77)?;
                object_78.finish();
            }
        }
        array_76.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_replication_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.replication_instance_identifier {
        object
            .key("ReplicationInstanceIdentifier")
            .string(var_79.as_str());
    }
    if let Some(var_80) = &input.allocated_storage {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_80).into()),
        );
    }
    if let Some(var_81) = &input.replication_instance_class {
        object
            .key("ReplicationInstanceClass")
            .string(var_81.as_str());
    }
    if let Some(var_82) = &input.vpc_security_group_ids {
        let mut array_83 = object.key("VpcSecurityGroupIds").start_array();
        for item_84 in var_82 {
            {
                array_83.value().string(item_84.as_str());
            }
        }
        array_83.finish();
    }
    if let Some(var_85) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_85.as_str());
    }
    if let Some(var_86) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_86.as_str());
    }
    if let Some(var_87) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_87.as_str());
    }
    if let Some(var_88) = &input.multi_az {
        object.key("MultiAZ").boolean(*var_88);
    }
    if let Some(var_89) = &input.engine_version {
        object.key("EngineVersion").string(var_89.as_str());
    }
    if let Some(var_90) = &input.auto_minor_version_upgrade {
        object.key("AutoMinorVersionUpgrade").boolean(*var_90);
    }
    if let Some(var_91) = &input.tags {
        let mut array_92 = object.key("Tags").start_array();
        for item_93 in var_91 {
            {
                let mut object_94 = array_92.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_94, item_93)?;
                object_94.finish();
            }
        }
        array_92.finish();
    }
    if let Some(var_95) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_95.as_str());
    }
    if let Some(var_96) = &input.publicly_accessible {
        object.key("PubliclyAccessible").boolean(*var_96);
    }
    if let Some(var_97) = &input.dns_name_servers {
        object.key("DnsNameServers").string(var_97.as_str());
    }
    if let Some(var_98) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_98.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_replication_subnet_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationSubnetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_99.as_str());
    }
    if let Some(var_100) = &input.replication_subnet_group_description {
        object
            .key("ReplicationSubnetGroupDescription")
            .string(var_100.as_str());
    }
    if let Some(var_101) = &input.subnet_ids {
        let mut array_102 = object.key("SubnetIds").start_array();
        for item_103 in var_101 {
            {
                array_102.value().string(item_103.as_str());
            }
        }
        array_102.finish();
    }
    if let Some(var_104) = &input.tags {
        let mut array_105 = object.key("Tags").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_107, item_106)?;
                object_107.finish();
            }
        }
        array_105.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_replication_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.replication_task_identifier {
        object
            .key("ReplicationTaskIdentifier")
            .string(var_108.as_str());
    }
    if let Some(var_109) = &input.source_endpoint_arn {
        object.key("SourceEndpointArn").string(var_109.as_str());
    }
    if let Some(var_110) = &input.target_endpoint_arn {
        object.key("TargetEndpointArn").string(var_110.as_str());
    }
    if let Some(var_111) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_111.as_str());
    }
    if let Some(var_112) = &input.migration_type {
        object.key("MigrationType").string(var_112.as_str());
    }
    if let Some(var_113) = &input.table_mappings {
        object.key("TableMappings").string(var_113.as_str());
    }
    if let Some(var_114) = &input.replication_task_settings {
        object
            .key("ReplicationTaskSettings")
            .string(var_114.as_str());
    }
    if let Some(var_115) = &input.cdc_start_time {
        object
            .key("CdcStartTime")
            .date_time(var_115, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_116) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_116.as_str());
    }
    if let Some(var_117) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_117.as_str());
    }
    if let Some(var_118) = &input.tags {
        let mut array_119 = object.key("Tags").start_array();
        for item_120 in var_118 {
            {
                let mut object_121 = array_119.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_121, item_120)?;
                object_121.finish();
            }
        }
        array_119.finish();
    }
    if let Some(var_122) = &input.task_data {
        object.key("TaskData").string(var_122.as_str());
    }
    if let Some(var_123) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_123.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.certificate_arn {
        object.key("CertificateArn").string(var_124.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_125.as_str());
    }
    if let Some(var_126) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_127.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_event_subscription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.subscription_name {
        object.key("SubscriptionName").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_replication_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_replication_subnet_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationSubnetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_130.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_replication_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_replication_task_assessment_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationTaskAssessmentRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.replication_task_assessment_run_arn {
        object
            .key("ReplicationTaskAssessmentRunArn")
            .string(var_132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_applicable_individual_assessments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicableIndividualAssessmentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_133.as_str());
    }
    if let Some(var_134) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_134.as_str());
    }
    if let Some(var_135) = &input.source_engine_name {
        object.key("SourceEngineName").string(var_135.as_str());
    }
    if let Some(var_136) = &input.target_engine_name {
        object.key("TargetEngineName").string(var_136.as_str());
    }
    if let Some(var_137) = &input.migration_type {
        object.key("MigrationType").string(var_137.as_str());
    }
    if let Some(var_138) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    if let Some(var_139) = &input.marker {
        object.key("Marker").string(var_139.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_certificates_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCertificatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.filters {
        let mut array_141 = object.key("Filters").start_array();
        for item_142 in var_140 {
            {
                let mut object_143 = array_141.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_143, item_142)?;
                object_143.finish();
            }
        }
        array_141.finish();
    }
    if let Some(var_144) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_144).into()),
        );
    }
    if let Some(var_145) = &input.marker {
        object.key("Marker").string(var_145.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_connections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConnectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.filters {
        let mut array_147 = object.key("Filters").start_array();
        for item_148 in var_146 {
            {
                let mut object_149 = array_147.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_149, item_148)?;
                object_149.finish();
            }
        }
        array_147.finish();
    }
    if let Some(var_150) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    if let Some(var_151) = &input.marker {
        object.key("Marker").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.filters {
        let mut array_153 = object.key("Filters").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_155, item_154)?;
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if let Some(var_156) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_156).into()),
        );
    }
    if let Some(var_157) = &input.marker {
        object.key("Marker").string(var_157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.engine_name {
        object.key("EngineName").string(var_158.as_str());
    }
    if let Some(var_159) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_159).into()),
        );
    }
    if let Some(var_160) = &input.marker {
        object.key("Marker").string(var_160.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.filters {
        let mut array_162 = object.key("Filters").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_164, item_163)?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_165).into()),
        );
    }
    if let Some(var_166) = &input.marker {
        object.key("Marker").string(var_166.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_event_categories_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.source_type {
        object.key("SourceType").string(var_167.as_str());
    }
    if let Some(var_168) = &input.filters {
        let mut array_169 = object.key("Filters").start_array();
        for item_170 in var_168 {
            {
                let mut object_171 = array_169.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_171, item_170)?;
                object_171.finish();
            }
        }
        array_169.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_events_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.source_identifier {
        object.key("SourceIdentifier").string(var_172.as_str());
    }
    if let Some(var_173) = &input.source_type {
        object.key("SourceType").string(var_173.as_str());
    }
    if let Some(var_174) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_174, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_175) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_175, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_176) = &input.duration {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_176).into()),
        );
    }
    if let Some(var_177) = &input.event_categories {
        let mut array_178 = object.key("EventCategories").start_array();
        for item_179 in var_177 {
            {
                array_178.value().string(item_179.as_str());
            }
        }
        array_178.finish();
    }
    if let Some(var_180) = &input.filters {
        let mut array_181 = object.key("Filters").start_array();
        for item_182 in var_180 {
            {
                let mut object_183 = array_181.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_183, item_182)?;
                object_183.finish();
            }
        }
        array_181.finish();
    }
    if let Some(var_184) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_184).into()),
        );
    }
    if let Some(var_185) = &input.marker {
        object.key("Marker").string(var_185.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_event_subscriptions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.subscription_name {
        object.key("SubscriptionName").string(var_186.as_str());
    }
    if let Some(var_187) = &input.filters {
        let mut array_188 = object.key("Filters").start_array();
        for item_189 in var_187 {
            {
                let mut object_190 = array_188.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_190, item_189)?;
                object_190.finish();
            }
        }
        array_188.finish();
    }
    if let Some(var_191) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    if let Some(var_192) = &input.marker {
        object.key("Marker").string(var_192.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_orderable_replication_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrderableReplicationInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_193) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_193).into()),
        );
    }
    if let Some(var_194) = &input.marker {
        object.key("Marker").string(var_194.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pending_maintenance_actions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePendingMaintenanceActionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_195.as_str());
    }
    if let Some(var_196) = &input.filters {
        let mut array_197 = object.key("Filters").start_array();
        for item_198 in var_196 {
            {
                let mut object_199 = array_197.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_199, item_198)?;
                object_199.finish();
            }
        }
        array_197.finish();
    }
    if let Some(var_200) = &input.marker {
        object.key("Marker").string(var_200.as_str());
    }
    if let Some(var_201) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_201).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_refresh_schemas_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRefreshSchemasStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_202.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_203) = &input.filters {
        let mut array_204 = object.key("Filters").start_array();
        for item_205 in var_203 {
            {
                let mut object_206 = array_204.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_206, item_205)?;
                object_206.finish();
            }
        }
        array_204.finish();
    }
    if let Some(var_207) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_207).into()),
        );
    }
    if let Some(var_208) = &input.marker {
        object.key("Marker").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_instance_task_logs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationInstanceTaskLogsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_209.as_str());
    }
    if let Some(var_210) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_210).into()),
        );
    }
    if let Some(var_211) = &input.marker {
        object.key("Marker").string(var_211.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_subnet_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationSubnetGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.filters {
        let mut array_213 = object.key("Filters").start_array();
        for item_214 in var_212 {
            {
                let mut object_215 = array_213.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_215, item_214)?;
                object_215.finish();
            }
        }
        array_213.finish();
    }
    if let Some(var_216) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_216).into()),
        );
    }
    if let Some(var_217) = &input.marker {
        object.key("Marker").string(var_217.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_task_assessment_results_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTaskAssessmentResultsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_218) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_218.as_str());
    }
    if let Some(var_219) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    if let Some(var_220) = &input.marker {
        object.key("Marker").string(var_220.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_task_assessment_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTaskAssessmentRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.filters {
        let mut array_222 = object.key("Filters").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_224, item_223)?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    if let Some(var_225) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_225).into()),
        );
    }
    if let Some(var_226) = &input.marker {
        object.key("Marker").string(var_226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_task_individual_assessments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTaskIndividualAssessmentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.filters {
        let mut array_228 = object.key("Filters").start_array();
        for item_229 in var_227 {
            {
                let mut object_230 = array_228.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_230, item_229)?;
                object_230.finish();
            }
        }
        array_228.finish();
    }
    if let Some(var_231) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_231).into()),
        );
    }
    if let Some(var_232) = &input.marker {
        object.key("Marker").string(var_232.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_233) = &input.filters {
        let mut array_234 = object.key("Filters").start_array();
        for item_235 in var_233 {
            {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_236, item_235)?;
                object_236.finish();
            }
        }
        array_234.finish();
    }
    if let Some(var_237) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_237).into()),
        );
    }
    if let Some(var_238) = &input.marker {
        object.key("Marker").string(var_238.as_str());
    }
    if let Some(var_239) = &input.without_settings {
        object.key("WithoutSettings").boolean(*var_239);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_240) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_240.as_str());
    }
    if let Some(var_241) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_241).into()),
        );
    }
    if let Some(var_242) = &input.marker {
        object.key("Marker").string(var_242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_table_statistics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTableStatisticsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_243.as_str());
    }
    if let Some(var_244) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_244).into()),
        );
    }
    if let Some(var_245) = &input.marker {
        object.key("Marker").string(var_245.as_str());
    }
    if let Some(var_246) = &input.filters {
        let mut array_247 = object.key("Filters").start_array();
        for item_248 in var_246 {
            {
                let mut object_249 = array_247.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_249, item_248)?;
                object_249.finish();
            }
        }
        array_247.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.certificate_identifier {
        object.key("CertificateIdentifier").string(var_250.as_str());
    }
    if let Some(var_251) = &input.certificate_pem {
        object.key("CertificatePem").string(var_251.as_str());
    }
    if let Some(var_252) = &input.certificate_wallet {
        object
            .key("CertificateWallet")
            .string_unchecked(&aws_smithy_types::base64::encode(var_252));
    }
    if let Some(var_253) = &input.tags {
        let mut array_254 = object.key("Tags").start_array();
        for item_255 in var_253 {
            {
                let mut object_256 = array_254.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_256, item_255)?;
                object_256.finish();
            }
        }
        array_254.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_257) = &input.resource_arn {
        object.key("ResourceArn").string(var_257.as_str());
    }
    if let Some(var_258) = &input.resource_arn_list {
        let mut array_259 = object.key("ResourceArnList").start_array();
        for item_260 in var_258 {
            {
                array_259.value().string(item_260.as_str());
            }
        }
        array_259.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_261) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_261.as_str());
    }
    if let Some(var_262) = &input.endpoint_identifier {
        object.key("EndpointIdentifier").string(var_262.as_str());
    }
    if let Some(var_263) = &input.endpoint_type {
        object.key("EndpointType").string(var_263.as_str());
    }
    if let Some(var_264) = &input.engine_name {
        object.key("EngineName").string(var_264.as_str());
    }
    if let Some(var_265) = &input.username {
        object.key("Username").string(var_265.as_str());
    }
    if let Some(var_266) = &input.password {
        object.key("Password").string(var_266.as_str());
    }
    if let Some(var_267) = &input.server_name {
        object.key("ServerName").string(var_267.as_str());
    }
    if let Some(var_268) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_268).into()),
        );
    }
    if let Some(var_269) = &input.database_name {
        object.key("DatabaseName").string(var_269.as_str());
    }
    if let Some(var_270) = &input.extra_connection_attributes {
        object
            .key("ExtraConnectionAttributes")
            .string(var_270.as_str());
    }
    if let Some(var_271) = &input.certificate_arn {
        object.key("CertificateArn").string(var_271.as_str());
    }
    if let Some(var_272) = &input.ssl_mode {
        object.key("SslMode").string(var_272.as_str());
    }
    if let Some(var_273) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_273.as_str());
    }
    if let Some(var_274) = &input.external_table_definition {
        object
            .key("ExternalTableDefinition")
            .string(var_274.as_str());
    }
    if let Some(var_275) = &input.dynamo_db_settings {
        let mut object_276 = object.key("DynamoDbSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamo_db_settings(
            &mut object_276,
            var_275,
        )?;
        object_276.finish();
    }
    if let Some(var_277) = &input.s3_settings {
        let mut object_278 = object.key("S3Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_settings(&mut object_278, var_277)?;
        object_278.finish();
    }
    if let Some(var_279) = &input.dms_transfer_settings {
        let mut object_280 = object.key("DmsTransferSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_dms_transfer_settings(
            &mut object_280,
            var_279,
        )?;
        object_280.finish();
    }
    if let Some(var_281) = &input.mongo_db_settings {
        let mut object_282 = object.key("MongoDbSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_mongo_db_settings(
            &mut object_282,
            var_281,
        )?;
        object_282.finish();
    }
    if let Some(var_283) = &input.kinesis_settings {
        let mut object_284 = object.key("KinesisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_settings(
            &mut object_284,
            var_283,
        )?;
        object_284.finish();
    }
    if let Some(var_285) = &input.kafka_settings {
        let mut object_286 = object.key("KafkaSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_settings(&mut object_286, var_285)?;
        object_286.finish();
    }
    if let Some(var_287) = &input.elasticsearch_settings {
        let mut object_288 = object.key("ElasticsearchSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_elasticsearch_settings(
            &mut object_288,
            var_287,
        )?;
        object_288.finish();
    }
    if let Some(var_289) = &input.neptune_settings {
        let mut object_290 = object.key("NeptuneSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_neptune_settings(
            &mut object_290,
            var_289,
        )?;
        object_290.finish();
    }
    if let Some(var_291) = &input.redshift_settings {
        let mut object_292 = object.key("RedshiftSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_settings(
            &mut object_292,
            var_291,
        )?;
        object_292.finish();
    }
    if let Some(var_293) = &input.postgre_sql_settings {
        let mut object_294 = object.key("PostgreSQLSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_postgre_sql_settings(
            &mut object_294,
            var_293,
        )?;
        object_294.finish();
    }
    if let Some(var_295) = &input.my_sql_settings {
        let mut object_296 = object.key("MySQLSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_my_sql_settings(&mut object_296, var_295)?;
        object_296.finish();
    }
    if let Some(var_297) = &input.oracle_settings {
        let mut object_298 = object.key("OracleSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_oracle_settings(&mut object_298, var_297)?;
        object_298.finish();
    }
    if let Some(var_299) = &input.sybase_settings {
        let mut object_300 = object.key("SybaseSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sybase_settings(&mut object_300, var_299)?;
        object_300.finish();
    }
    if let Some(var_301) = &input.microsoft_sql_server_settings {
        let mut object_302 = object.key("MicrosoftSQLServerSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_microsoft_sql_server_settings(
            &mut object_302,
            var_301,
        )?;
        object_302.finish();
    }
    if let Some(var_303) = &input.ibm_db2_settings {
        let mut object_304 = object.key("IBMDb2Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_ibm_db2_settings(
            &mut object_304,
            var_303,
        )?;
        object_304.finish();
    }
    if let Some(var_305) = &input.doc_db_settings {
        let mut object_306 = object.key("DocDbSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_doc_db_settings(&mut object_306, var_305)?;
        object_306.finish();
    }
    if let Some(var_307) = &input.redis_settings {
        let mut object_308 = object.key("RedisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_redis_settings(&mut object_308, var_307)?;
        object_308.finish();
    }
    if let Some(var_309) = &input.exact_settings {
        object.key("ExactSettings").boolean(*var_309);
    }
    if let Some(var_310) = &input.gcp_my_sql_settings {
        let mut object_311 = object.key("GcpMySQLSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_gcp_my_sql_settings(
            &mut object_311,
            var_310,
        )?;
        object_311.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_event_subscription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.subscription_name {
        object.key("SubscriptionName").string(var_312.as_str());
    }
    if let Some(var_313) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_313.as_str());
    }
    if let Some(var_314) = &input.source_type {
        object.key("SourceType").string(var_314.as_str());
    }
    if let Some(var_315) = &input.event_categories {
        let mut array_316 = object.key("EventCategories").start_array();
        for item_317 in var_315 {
            {
                array_316.value().string(item_317.as_str());
            }
        }
        array_316.finish();
    }
    if let Some(var_318) = &input.enabled {
        object.key("Enabled").boolean(*var_318);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_replication_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReplicationInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_319.as_str());
    }
    if let Some(var_320) = &input.allocated_storage {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_320).into()),
        );
    }
    if input.apply_immediately {
        object
            .key("ApplyImmediately")
            .boolean(input.apply_immediately);
    }
    if let Some(var_321) = &input.replication_instance_class {
        object
            .key("ReplicationInstanceClass")
            .string(var_321.as_str());
    }
    if let Some(var_322) = &input.vpc_security_group_ids {
        let mut array_323 = object.key("VpcSecurityGroupIds").start_array();
        for item_324 in var_322 {
            {
                array_323.value().string(item_324.as_str());
            }
        }
        array_323.finish();
    }
    if let Some(var_325) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_325.as_str());
    }
    if let Some(var_326) = &input.multi_az {
        object.key("MultiAZ").boolean(*var_326);
    }
    if let Some(var_327) = &input.engine_version {
        object.key("EngineVersion").string(var_327.as_str());
    }
    if input.allow_major_version_upgrade {
        object
            .key("AllowMajorVersionUpgrade")
            .boolean(input.allow_major_version_upgrade);
    }
    if let Some(var_328) = &input.auto_minor_version_upgrade {
        object.key("AutoMinorVersionUpgrade").boolean(*var_328);
    }
    if let Some(var_329) = &input.replication_instance_identifier {
        object
            .key("ReplicationInstanceIdentifier")
            .string(var_329.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_replication_subnet_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReplicationSubnetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_330) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_330.as_str());
    }
    if let Some(var_331) = &input.replication_subnet_group_description {
        object
            .key("ReplicationSubnetGroupDescription")
            .string(var_331.as_str());
    }
    if let Some(var_332) = &input.subnet_ids {
        let mut array_333 = object.key("SubnetIds").start_array();
        for item_334 in var_332 {
            {
                array_333.value().string(item_334.as_str());
            }
        }
        array_333.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_replication_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReplicationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_335) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_335.as_str());
    }
    if let Some(var_336) = &input.replication_task_identifier {
        object
            .key("ReplicationTaskIdentifier")
            .string(var_336.as_str());
    }
    if let Some(var_337) = &input.migration_type {
        object.key("MigrationType").string(var_337.as_str());
    }
    if let Some(var_338) = &input.table_mappings {
        object.key("TableMappings").string(var_338.as_str());
    }
    if let Some(var_339) = &input.replication_task_settings {
        object
            .key("ReplicationTaskSettings")
            .string(var_339.as_str());
    }
    if let Some(var_340) = &input.cdc_start_time {
        object
            .key("CdcStartTime")
            .date_time(var_340, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_341) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_341.as_str());
    }
    if let Some(var_342) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_342.as_str());
    }
    if let Some(var_343) = &input.task_data {
        object.key("TaskData").string(var_343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_move_replication_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::MoveReplicationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_344.as_str());
    }
    if let Some(var_345) = &input.target_replication_instance_arn {
        object
            .key("TargetReplicationInstanceArn")
            .string(var_345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reboot_replication_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RebootReplicationInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_346) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_346.as_str());
    }
    if let Some(var_347) = &input.force_failover {
        object.key("ForceFailover").boolean(*var_347);
    }
    if let Some(var_348) = &input.force_planned_failover {
        object.key("ForcePlannedFailover").boolean(*var_348);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_refresh_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RefreshSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_349.as_str());
    }
    if let Some(var_350) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reload_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReloadTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_351) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_351.as_str());
    }
    if let Some(var_352) = &input.tables_to_reload {
        let mut array_353 = object.key("TablesToReload").start_array();
        for item_354 in var_352 {
            {
                let mut object_355 = array_353.value().start_object();
                crate::json_ser::serialize_structure_crate_model_table_to_reload(
                    &mut object_355,
                    item_354,
                )?;
                object_355.finish();
            }
        }
        array_353.finish();
    }
    if let Some(var_356) = &input.reload_option {
        object.key("ReloadOption").string(var_356.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_tags_from_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_357) = &input.resource_arn {
        object.key("ResourceArn").string(var_357.as_str());
    }
    if let Some(var_358) = &input.tag_keys {
        let mut array_359 = object.key("TagKeys").start_array();
        for item_360 in var_358 {
            {
                array_359.value().string(item_360.as_str());
            }
        }
        array_359.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_replication_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplicationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_361) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_361.as_str());
    }
    if let Some(var_362) = &input.start_replication_task_type {
        object
            .key("StartReplicationTaskType")
            .string(var_362.as_str());
    }
    if let Some(var_363) = &input.cdc_start_time {
        object
            .key("CdcStartTime")
            .date_time(var_363, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_364) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_364.as_str());
    }
    if let Some(var_365) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_365.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_replication_task_assessment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplicationTaskAssessmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_366.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_replication_task_assessment_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplicationTaskAssessmentRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_367.as_str());
    }
    if let Some(var_368) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_368.as_str());
    }
    if let Some(var_369) = &input.result_location_bucket {
        object.key("ResultLocationBucket").string(var_369.as_str());
    }
    if let Some(var_370) = &input.result_location_folder {
        object.key("ResultLocationFolder").string(var_370.as_str());
    }
    if let Some(var_371) = &input.result_encryption_mode {
        object.key("ResultEncryptionMode").string(var_371.as_str());
    }
    if let Some(var_372) = &input.result_kms_key_arn {
        object.key("ResultKmsKeyArn").string(var_372.as_str());
    }
    if let Some(var_373) = &input.assessment_run_name {
        object.key("AssessmentRunName").string(var_373.as_str());
    }
    if let Some(var_374) = &input.include_only {
        let mut array_375 = object.key("IncludeOnly").start_array();
        for item_376 in var_374 {
            {
                array_375.value().string(item_376.as_str());
            }
        }
        array_375.finish();
    }
    if let Some(var_377) = &input.exclude {
        let mut array_378 = object.key("Exclude").start_array();
        for item_379 in var_377 {
            {
                array_378.value().string(item_379.as_str());
            }
        }
        array_378.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_replication_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopReplicationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.replication_instance_arn {
        object
            .key("ReplicationInstanceArn")
            .string(var_381.as_str());
    }
    if let Some(var_382) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_382.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.key {
        object.key("Key").string(var_383.as_str());
    }
    if let Some(var_384) = &input.value {
        object.key("Value").string(var_384.as_str());
    }
    if let Some(var_385) = &input.resource_arn {
        object.key("ResourceArn").string(var_385.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_386.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Settings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_387.as_str());
    }
    if let Some(var_388) = &input.external_table_definition {
        object
            .key("ExternalTableDefinition")
            .string(var_388.as_str());
    }
    if let Some(var_389) = &input.csv_row_delimiter {
        object.key("CsvRowDelimiter").string(var_389.as_str());
    }
    if let Some(var_390) = &input.csv_delimiter {
        object.key("CsvDelimiter").string(var_390.as_str());
    }
    if let Some(var_391) = &input.bucket_folder {
        object.key("BucketFolder").string(var_391.as_str());
    }
    if let Some(var_392) = &input.bucket_name {
        object.key("BucketName").string(var_392.as_str());
    }
    if let Some(var_393) = &input.compression_type {
        object.key("CompressionType").string(var_393.as_str());
    }
    if let Some(var_394) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_394.as_str());
    }
    if let Some(var_395) = &input.server_side_encryption_kms_key_id {
        object
            .key("ServerSideEncryptionKmsKeyId")
            .string(var_395.as_str());
    }
    if let Some(var_396) = &input.data_format {
        object.key("DataFormat").string(var_396.as_str());
    }
    if let Some(var_397) = &input.encoding_type {
        object.key("EncodingType").string(var_397.as_str());
    }
    if let Some(var_398) = &input.dict_page_size_limit {
        object.key("DictPageSizeLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_398).into()),
        );
    }
    if let Some(var_399) = &input.row_group_length {
        object.key("RowGroupLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_399).into()),
        );
    }
    if let Some(var_400) = &input.data_page_size {
        object.key("DataPageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_400).into()),
        );
    }
    if let Some(var_401) = &input.parquet_version {
        object.key("ParquetVersion").string(var_401.as_str());
    }
    if let Some(var_402) = &input.enable_statistics {
        object.key("EnableStatistics").boolean(*var_402);
    }
    if let Some(var_403) = &input.include_op_for_full_load {
        object.key("IncludeOpForFullLoad").boolean(*var_403);
    }
    if let Some(var_404) = &input.cdc_inserts_only {
        object.key("CdcInsertsOnly").boolean(*var_404);
    }
    if let Some(var_405) = &input.timestamp_column_name {
        object.key("TimestampColumnName").string(var_405.as_str());
    }
    if let Some(var_406) = &input.parquet_timestamp_in_millisecond {
        object
            .key("ParquetTimestampInMillisecond")
            .boolean(*var_406);
    }
    if let Some(var_407) = &input.cdc_inserts_and_updates {
        object.key("CdcInsertsAndUpdates").boolean(*var_407);
    }
    if let Some(var_408) = &input.date_partition_enabled {
        object.key("DatePartitionEnabled").boolean(*var_408);
    }
    if let Some(var_409) = &input.date_partition_sequence {
        object.key("DatePartitionSequence").string(var_409.as_str());
    }
    if let Some(var_410) = &input.date_partition_delimiter {
        object
            .key("DatePartitionDelimiter")
            .string(var_410.as_str());
    }
    if let Some(var_411) = &input.use_csv_no_sup_value {
        object.key("UseCsvNoSupValue").boolean(*var_411);
    }
    if let Some(var_412) = &input.csv_no_sup_value {
        object.key("CsvNoSupValue").string(var_412.as_str());
    }
    if let Some(var_413) = &input.preserve_transactions {
        object.key("PreserveTransactions").boolean(*var_413);
    }
    if let Some(var_414) = &input.cdc_path {
        object.key("CdcPath").string(var_414.as_str());
    }
    if let Some(var_415) = &input.use_task_start_time_for_full_load_timestamp {
        object
            .key("UseTaskStartTimeForFullLoadTimestamp")
            .boolean(*var_415);
    }
    if let Some(var_416) = &input.canned_acl_for_objects {
        object.key("CannedAclForObjects").string(var_416.as_str());
    }
    if let Some(var_417) = &input.add_column_name {
        object.key("AddColumnName").boolean(*var_417);
    }
    if let Some(var_418) = &input.cdc_max_batch_interval {
        object.key("CdcMaxBatchInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_418).into()),
        );
    }
    if let Some(var_419) = &input.cdc_min_file_size {
        object.key("CdcMinFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_419).into()),
        );
    }
    if let Some(var_420) = &input.csv_null_value {
        object.key("CsvNullValue").string(var_420.as_str());
    }
    if let Some(var_421) = &input.ignore_header_rows {
        object.key("IgnoreHeaderRows").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_421).into()),
        );
    }
    if let Some(var_422) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_422).into()),
        );
    }
    if let Some(var_423) = &input.rfc4180 {
        object.key("Rfc4180").boolean(*var_423);
    }
    if let Some(var_424) = &input.date_partition_timezone {
        object.key("DatePartitionTimezone").string(var_424.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dms_transfer_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DmsTransferSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_425.as_str());
    }
    if let Some(var_426) = &input.bucket_name {
        object.key("BucketName").string(var_426.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mongo_db_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MongoDbSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_427) = &input.username {
        object.key("Username").string(var_427.as_str());
    }
    if let Some(var_428) = &input.password {
        object.key("Password").string(var_428.as_str());
    }
    if let Some(var_429) = &input.server_name {
        object.key("ServerName").string(var_429.as_str());
    }
    if let Some(var_430) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_430).into()),
        );
    }
    if let Some(var_431) = &input.database_name {
        object.key("DatabaseName").string(var_431.as_str());
    }
    if let Some(var_432) = &input.auth_type {
        object.key("AuthType").string(var_432.as_str());
    }
    if let Some(var_433) = &input.auth_mechanism {
        object.key("AuthMechanism").string(var_433.as_str());
    }
    if let Some(var_434) = &input.nesting_level {
        object.key("NestingLevel").string(var_434.as_str());
    }
    if let Some(var_435) = &input.extract_doc_id {
        object.key("ExtractDocId").string(var_435.as_str());
    }
    if let Some(var_436) = &input.docs_to_investigate {
        object.key("DocsToInvestigate").string(var_436.as_str());
    }
    if let Some(var_437) = &input.auth_source {
        object.key("AuthSource").string(var_437.as_str());
    }
    if let Some(var_438) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_438.as_str());
    }
    if let Some(var_439) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_439.as_str());
    }
    if let Some(var_440) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_440.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_441) = &input.stream_arn {
        object.key("StreamArn").string(var_441.as_str());
    }
    if let Some(var_442) = &input.message_format {
        object.key("MessageFormat").string(var_442.as_str());
    }
    if let Some(var_443) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_443.as_str());
    }
    if let Some(var_444) = &input.include_transaction_details {
        object.key("IncludeTransactionDetails").boolean(*var_444);
    }
    if let Some(var_445) = &input.include_partition_value {
        object.key("IncludePartitionValue").boolean(*var_445);
    }
    if let Some(var_446) = &input.partition_include_schema_table {
        object.key("PartitionIncludeSchemaTable").boolean(*var_446);
    }
    if let Some(var_447) = &input.include_table_alter_operations {
        object.key("IncludeTableAlterOperations").boolean(*var_447);
    }
    if let Some(var_448) = &input.include_control_details {
        object.key("IncludeControlDetails").boolean(*var_448);
    }
    if let Some(var_449) = &input.include_null_and_empty {
        object.key("IncludeNullAndEmpty").boolean(*var_449);
    }
    if let Some(var_450) = &input.no_hex_prefix {
        object.key("NoHexPrefix").boolean(*var_450);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kafka_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KafkaSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.broker {
        object.key("Broker").string(var_451.as_str());
    }
    if let Some(var_452) = &input.topic {
        object.key("Topic").string(var_452.as_str());
    }
    if let Some(var_453) = &input.message_format {
        object.key("MessageFormat").string(var_453.as_str());
    }
    if let Some(var_454) = &input.include_transaction_details {
        object.key("IncludeTransactionDetails").boolean(*var_454);
    }
    if let Some(var_455) = &input.include_partition_value {
        object.key("IncludePartitionValue").boolean(*var_455);
    }
    if let Some(var_456) = &input.partition_include_schema_table {
        object.key("PartitionIncludeSchemaTable").boolean(*var_456);
    }
    if let Some(var_457) = &input.include_table_alter_operations {
        object.key("IncludeTableAlterOperations").boolean(*var_457);
    }
    if let Some(var_458) = &input.include_control_details {
        object.key("IncludeControlDetails").boolean(*var_458);
    }
    if let Some(var_459) = &input.message_max_bytes {
        object.key("MessageMaxBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_459).into()),
        );
    }
    if let Some(var_460) = &input.include_null_and_empty {
        object.key("IncludeNullAndEmpty").boolean(*var_460);
    }
    if let Some(var_461) = &input.security_protocol {
        object.key("SecurityProtocol").string(var_461.as_str());
    }
    if let Some(var_462) = &input.ssl_client_certificate_arn {
        object
            .key("SslClientCertificateArn")
            .string(var_462.as_str());
    }
    if let Some(var_463) = &input.ssl_client_key_arn {
        object.key("SslClientKeyArn").string(var_463.as_str());
    }
    if let Some(var_464) = &input.ssl_client_key_password {
        object.key("SslClientKeyPassword").string(var_464.as_str());
    }
    if let Some(var_465) = &input.ssl_ca_certificate_arn {
        object.key("SslCaCertificateArn").string(var_465.as_str());
    }
    if let Some(var_466) = &input.sasl_username {
        object.key("SaslUsername").string(var_466.as_str());
    }
    if let Some(var_467) = &input.sasl_password {
        object.key("SaslPassword").string(var_467.as_str());
    }
    if let Some(var_468) = &input.no_hex_prefix {
        object.key("NoHexPrefix").boolean(*var_468);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_elasticsearch_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_469) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_469.as_str());
    }
    if let Some(var_470) = &input.endpoint_uri {
        object.key("EndpointUri").string(var_470.as_str());
    }
    if let Some(var_471) = &input.full_load_error_percentage {
        object.key("FullLoadErrorPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_471).into()),
        );
    }
    if let Some(var_472) = &input.error_retry_duration {
        object.key("ErrorRetryDuration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_472).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_neptune_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NeptuneSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_473.as_str());
    }
    if let Some(var_474) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_474.as_str());
    }
    if let Some(var_475) = &input.s3_bucket_folder {
        object.key("S3BucketFolder").string(var_475.as_str());
    }
    if let Some(var_476) = &input.error_retry_duration {
        object.key("ErrorRetryDuration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_476).into()),
        );
    }
    if let Some(var_477) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_477).into()),
        );
    }
    if let Some(var_478) = &input.max_retry_count {
        object.key("MaxRetryCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_478).into()),
        );
    }
    if let Some(var_479) = &input.iam_auth_enabled {
        object.key("IamAuthEnabled").boolean(*var_479);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_480) = &input.accept_any_date {
        object.key("AcceptAnyDate").boolean(*var_480);
    }
    if let Some(var_481) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_481.as_str());
    }
    if let Some(var_482) = &input.bucket_folder {
        object.key("BucketFolder").string(var_482.as_str());
    }
    if let Some(var_483) = &input.bucket_name {
        object.key("BucketName").string(var_483.as_str());
    }
    if let Some(var_484) = &input.case_sensitive_names {
        object.key("CaseSensitiveNames").boolean(*var_484);
    }
    if let Some(var_485) = &input.comp_update {
        object.key("CompUpdate").boolean(*var_485);
    }
    if let Some(var_486) = &input.connection_timeout {
        object.key("ConnectionTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_486).into()),
        );
    }
    if let Some(var_487) = &input.database_name {
        object.key("DatabaseName").string(var_487.as_str());
    }
    if let Some(var_488) = &input.date_format {
        object.key("DateFormat").string(var_488.as_str());
    }
    if let Some(var_489) = &input.empty_as_null {
        object.key("EmptyAsNull").boolean(*var_489);
    }
    if let Some(var_490) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_490.as_str());
    }
    if let Some(var_491) = &input.explicit_ids {
        object.key("ExplicitIds").boolean(*var_491);
    }
    if let Some(var_492) = &input.file_transfer_upload_streams {
        object.key("FileTransferUploadStreams").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_492).into()),
        );
    }
    if let Some(var_493) = &input.load_timeout {
        object.key("LoadTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_493).into()),
        );
    }
    if let Some(var_494) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_494).into()),
        );
    }
    if let Some(var_495) = &input.password {
        object.key("Password").string(var_495.as_str());
    }
    if let Some(var_496) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_496).into()),
        );
    }
    if let Some(var_497) = &input.remove_quotes {
        object.key("RemoveQuotes").boolean(*var_497);
    }
    if let Some(var_498) = &input.replace_invalid_chars {
        object.key("ReplaceInvalidChars").string(var_498.as_str());
    }
    if let Some(var_499) = &input.replace_chars {
        object.key("ReplaceChars").string(var_499.as_str());
    }
    if let Some(var_500) = &input.server_name {
        object.key("ServerName").string(var_500.as_str());
    }
    if let Some(var_501) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_501.as_str());
    }
    if let Some(var_502) = &input.server_side_encryption_kms_key_id {
        object
            .key("ServerSideEncryptionKmsKeyId")
            .string(var_502.as_str());
    }
    if let Some(var_503) = &input.time_format {
        object.key("TimeFormat").string(var_503.as_str());
    }
    if let Some(var_504) = &input.trim_blanks {
        object.key("TrimBlanks").boolean(*var_504);
    }
    if let Some(var_505) = &input.truncate_columns {
        object.key("TruncateColumns").boolean(*var_505);
    }
    if let Some(var_506) = &input.username {
        object.key("Username").string(var_506.as_str());
    }
    if let Some(var_507) = &input.write_buffer_size {
        object.key("WriteBufferSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_507).into()),
        );
    }
    if let Some(var_508) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_508.as_str());
    }
    if let Some(var_509) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_509.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_postgre_sql_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_510) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_510.as_str());
    }
    if let Some(var_511) = &input.capture_ddls {
        object.key("CaptureDdls").boolean(*var_511);
    }
    if let Some(var_512) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_512).into()),
        );
    }
    if let Some(var_513) = &input.database_name {
        object.key("DatabaseName").string(var_513.as_str());
    }
    if let Some(var_514) = &input.ddl_artifacts_schema {
        object.key("DdlArtifactsSchema").string(var_514.as_str());
    }
    if let Some(var_515) = &input.execute_timeout {
        object.key("ExecuteTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_515).into()),
        );
    }
    if let Some(var_516) = &input.fail_tasks_on_lob_truncation {
        object.key("FailTasksOnLobTruncation").boolean(*var_516);
    }
    if let Some(var_517) = &input.heartbeat_enable {
        object.key("HeartbeatEnable").boolean(*var_517);
    }
    if let Some(var_518) = &input.heartbeat_schema {
        object.key("HeartbeatSchema").string(var_518.as_str());
    }
    if let Some(var_519) = &input.heartbeat_frequency {
        object.key("HeartbeatFrequency").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_519).into()),
        );
    }
    if let Some(var_520) = &input.password {
        object.key("Password").string(var_520.as_str());
    }
    if let Some(var_521) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_521).into()),
        );
    }
    if let Some(var_522) = &input.server_name {
        object.key("ServerName").string(var_522.as_str());
    }
    if let Some(var_523) = &input.username {
        object.key("Username").string(var_523.as_str());
    }
    if let Some(var_524) = &input.slot_name {
        object.key("SlotName").string(var_524.as_str());
    }
    if let Some(var_525) = &input.plugin_name {
        object.key("PluginName").string(var_525.as_str());
    }
    if let Some(var_526) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_526.as_str());
    }
    if let Some(var_527) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_527.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_my_sql_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_528) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_528.as_str());
    }
    if let Some(var_529) = &input.clean_source_metadata_on_mismatch {
        object
            .key("CleanSourceMetadataOnMismatch")
            .boolean(*var_529);
    }
    if let Some(var_530) = &input.database_name {
        object.key("DatabaseName").string(var_530.as_str());
    }
    if let Some(var_531) = &input.events_poll_interval {
        object.key("EventsPollInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_531).into()),
        );
    }
    if let Some(var_532) = &input.target_db_type {
        object.key("TargetDbType").string(var_532.as_str());
    }
    if let Some(var_533) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_533).into()),
        );
    }
    if let Some(var_534) = &input.parallel_load_threads {
        object.key("ParallelLoadThreads").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_534).into()),
        );
    }
    if let Some(var_535) = &input.password {
        object.key("Password").string(var_535.as_str());
    }
    if let Some(var_536) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_536).into()),
        );
    }
    if let Some(var_537) = &input.server_name {
        object.key("ServerName").string(var_537.as_str());
    }
    if let Some(var_538) = &input.server_timezone {
        object.key("ServerTimezone").string(var_538.as_str());
    }
    if let Some(var_539) = &input.username {
        object.key("Username").string(var_539.as_str());
    }
    if let Some(var_540) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_540.as_str());
    }
    if let Some(var_541) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_541.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oracle_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_542) = &input.add_supplemental_logging {
        object.key("AddSupplementalLogging").boolean(*var_542);
    }
    if let Some(var_543) = &input.archived_log_dest_id {
        object.key("ArchivedLogDestId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_543).into()),
        );
    }
    if let Some(var_544) = &input.additional_archived_log_dest_id {
        object.key("AdditionalArchivedLogDestId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_544).into()),
        );
    }
    if let Some(var_545) = &input.extra_archived_log_dest_ids {
        let mut array_546 = object.key("ExtraArchivedLogDestIds").start_array();
        for item_547 in var_545 {
            {
                array_546.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_547).into()),
                );
            }
        }
        array_546.finish();
    }
    if let Some(var_548) = &input.allow_select_nested_tables {
        object.key("AllowSelectNestedTables").boolean(*var_548);
    }
    if let Some(var_549) = &input.parallel_asm_read_threads {
        object.key("ParallelAsmReadThreads").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_549).into()),
        );
    }
    if let Some(var_550) = &input.read_ahead_blocks {
        object.key("ReadAheadBlocks").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_550).into()),
        );
    }
    if let Some(var_551) = &input.access_alternate_directly {
        object.key("AccessAlternateDirectly").boolean(*var_551);
    }
    if let Some(var_552) = &input.use_alternate_folder_for_online {
        object.key("UseAlternateFolderForOnline").boolean(*var_552);
    }
    if let Some(var_553) = &input.oracle_path_prefix {
        object.key("OraclePathPrefix").string(var_553.as_str());
    }
    if let Some(var_554) = &input.use_path_prefix {
        object.key("UsePathPrefix").string(var_554.as_str());
    }
    if let Some(var_555) = &input.replace_path_prefix {
        object.key("ReplacePathPrefix").boolean(*var_555);
    }
    if let Some(var_556) = &input.enable_homogenous_tablespace {
        object.key("EnableHomogenousTablespace").boolean(*var_556);
    }
    if let Some(var_557) = &input.direct_path_no_log {
        object.key("DirectPathNoLog").boolean(*var_557);
    }
    if let Some(var_558) = &input.archived_logs_only {
        object.key("ArchivedLogsOnly").boolean(*var_558);
    }
    if let Some(var_559) = &input.asm_password {
        object.key("AsmPassword").string(var_559.as_str());
    }
    if let Some(var_560) = &input.asm_server {
        object.key("AsmServer").string(var_560.as_str());
    }
    if let Some(var_561) = &input.asm_user {
        object.key("AsmUser").string(var_561.as_str());
    }
    if let Some(var_562) = &input.char_length_semantics {
        object.key("CharLengthSemantics").string(var_562.as_str());
    }
    if let Some(var_563) = &input.database_name {
        object.key("DatabaseName").string(var_563.as_str());
    }
    if let Some(var_564) = &input.direct_path_parallel_load {
        object.key("DirectPathParallelLoad").boolean(*var_564);
    }
    if let Some(var_565) = &input.fail_tasks_on_lob_truncation {
        object.key("FailTasksOnLobTruncation").boolean(*var_565);
    }
    if let Some(var_566) = &input.number_datatype_scale {
        object.key("NumberDatatypeScale").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_566).into()),
        );
    }
    if let Some(var_567) = &input.password {
        object.key("Password").string(var_567.as_str());
    }
    if let Some(var_568) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_568).into()),
        );
    }
    if let Some(var_569) = &input.read_table_space_name {
        object.key("ReadTableSpaceName").boolean(*var_569);
    }
    if let Some(var_570) = &input.retry_interval {
        object.key("RetryInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_570).into()),
        );
    }
    if let Some(var_571) = &input.security_db_encryption {
        object.key("SecurityDbEncryption").string(var_571.as_str());
    }
    if let Some(var_572) = &input.security_db_encryption_name {
        object
            .key("SecurityDbEncryptionName")
            .string(var_572.as_str());
    }
    if let Some(var_573) = &input.server_name {
        object.key("ServerName").string(var_573.as_str());
    }
    if let Some(var_574) = &input.spatial_data_option_to_geo_json_function_name {
        object
            .key("SpatialDataOptionToGeoJsonFunctionName")
            .string(var_574.as_str());
    }
    if let Some(var_575) = &input.standby_delay_time {
        object.key("StandbyDelayTime").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_575).into()),
        );
    }
    if let Some(var_576) = &input.username {
        object.key("Username").string(var_576.as_str());
    }
    if let Some(var_577) = &input.use_b_file {
        object.key("UseBFile").boolean(*var_577);
    }
    if let Some(var_578) = &input.use_direct_path_full_load {
        object.key("UseDirectPathFullLoad").boolean(*var_578);
    }
    if let Some(var_579) = &input.use_logminer_reader {
        object.key("UseLogminerReader").boolean(*var_579);
    }
    if let Some(var_580) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_580.as_str());
    }
    if let Some(var_581) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_581.as_str());
    }
    if let Some(var_582) = &input.secrets_manager_oracle_asm_access_role_arn {
        object
            .key("SecretsManagerOracleAsmAccessRoleArn")
            .string(var_582.as_str());
    }
    if let Some(var_583) = &input.secrets_manager_oracle_asm_secret_id {
        object
            .key("SecretsManagerOracleAsmSecretId")
            .string(var_583.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sybase_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SybaseSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_584) = &input.database_name {
        object.key("DatabaseName").string(var_584.as_str());
    }
    if let Some(var_585) = &input.password {
        object.key("Password").string(var_585.as_str());
    }
    if let Some(var_586) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_586).into()),
        );
    }
    if let Some(var_587) = &input.server_name {
        object.key("ServerName").string(var_587.as_str());
    }
    if let Some(var_588) = &input.username {
        object.key("Username").string(var_588.as_str());
    }
    if let Some(var_589) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_589.as_str());
    }
    if let Some(var_590) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_590.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_microsoft_sql_server_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MicrosoftSqlServerSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_591) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_591).into()),
        );
    }
    if let Some(var_592) = &input.bcp_packet_size {
        object.key("BcpPacketSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_592).into()),
        );
    }
    if let Some(var_593) = &input.database_name {
        object.key("DatabaseName").string(var_593.as_str());
    }
    if let Some(var_594) = &input.control_tables_file_group {
        object
            .key("ControlTablesFileGroup")
            .string(var_594.as_str());
    }
    if let Some(var_595) = &input.password {
        object.key("Password").string(var_595.as_str());
    }
    if let Some(var_596) = &input.query_single_always_on_node {
        object.key("QuerySingleAlwaysOnNode").boolean(*var_596);
    }
    if let Some(var_597) = &input.read_backup_only {
        object.key("ReadBackupOnly").boolean(*var_597);
    }
    if let Some(var_598) = &input.safeguard_policy {
        object.key("SafeguardPolicy").string(var_598.as_str());
    }
    if let Some(var_599) = &input.server_name {
        object.key("ServerName").string(var_599.as_str());
    }
    if let Some(var_600) = &input.username {
        object.key("Username").string(var_600.as_str());
    }
    if let Some(var_601) = &input.use_bcp_full_load {
        object.key("UseBcpFullLoad").boolean(*var_601);
    }
    if let Some(var_602) = &input.use_third_party_backup_device {
        object.key("UseThirdPartyBackupDevice").boolean(*var_602);
    }
    if let Some(var_603) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_603.as_str());
    }
    if let Some(var_604) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_604.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ibm_db2_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IbmDb2Settings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_605) = &input.database_name {
        object.key("DatabaseName").string(var_605.as_str());
    }
    if let Some(var_606) = &input.password {
        object.key("Password").string(var_606.as_str());
    }
    if let Some(var_607) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_607).into()),
        );
    }
    if let Some(var_608) = &input.server_name {
        object.key("ServerName").string(var_608.as_str());
    }
    if let Some(var_609) = &input.set_data_capture_changes {
        object.key("SetDataCaptureChanges").boolean(*var_609);
    }
    if let Some(var_610) = &input.current_lsn {
        object.key("CurrentLsn").string(var_610.as_str());
    }
    if let Some(var_611) = &input.max_k_bytes_per_read {
        object.key("MaxKBytesPerRead").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_611).into()),
        );
    }
    if let Some(var_612) = &input.username {
        object.key("Username").string(var_612.as_str());
    }
    if let Some(var_613) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_613.as_str());
    }
    if let Some(var_614) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_614.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_doc_db_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocDbSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_615) = &input.username {
        object.key("Username").string(var_615.as_str());
    }
    if let Some(var_616) = &input.password {
        object.key("Password").string(var_616.as_str());
    }
    if let Some(var_617) = &input.server_name {
        object.key("ServerName").string(var_617.as_str());
    }
    if let Some(var_618) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_618).into()),
        );
    }
    if let Some(var_619) = &input.database_name {
        object.key("DatabaseName").string(var_619.as_str());
    }
    if let Some(var_620) = &input.nesting_level {
        object.key("NestingLevel").string(var_620.as_str());
    }
    if let Some(var_621) = &input.extract_doc_id {
        object.key("ExtractDocId").boolean(*var_621);
    }
    if let Some(var_622) = &input.docs_to_investigate {
        object.key("DocsToInvestigate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_622).into()),
        );
    }
    if let Some(var_623) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_623.as_str());
    }
    if let Some(var_624) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_624.as_str());
    }
    if let Some(var_625) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_625.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redis_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedisSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_626) = &input.server_name {
        object.key("ServerName").string(var_626.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_627) = &input.ssl_security_protocol {
        object.key("SslSecurityProtocol").string(var_627.as_str());
    }
    if let Some(var_628) = &input.auth_type {
        object.key("AuthType").string(var_628.as_str());
    }
    if let Some(var_629) = &input.auth_user_name {
        object.key("AuthUserName").string(var_629.as_str());
    }
    if let Some(var_630) = &input.auth_password {
        object.key("AuthPassword").string(var_630.as_str());
    }
    if let Some(var_631) = &input.ssl_ca_certificate_arn {
        object.key("SslCaCertificateArn").string(var_631.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_gcp_my_sql_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GcpMySqlSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_632) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_632.as_str());
    }
    if let Some(var_633) = &input.clean_source_metadata_on_mismatch {
        object
            .key("CleanSourceMetadataOnMismatch")
            .boolean(*var_633);
    }
    if let Some(var_634) = &input.database_name {
        object.key("DatabaseName").string(var_634.as_str());
    }
    if let Some(var_635) = &input.events_poll_interval {
        object.key("EventsPollInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_635).into()),
        );
    }
    if let Some(var_636) = &input.target_db_type {
        object.key("TargetDbType").string(var_636.as_str());
    }
    if let Some(var_637) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_637).into()),
        );
    }
    if let Some(var_638) = &input.parallel_load_threads {
        object.key("ParallelLoadThreads").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_638).into()),
        );
    }
    if let Some(var_639) = &input.password {
        object.key("Password").string(var_639.as_str());
    }
    if let Some(var_640) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_640).into()),
        );
    }
    if let Some(var_641) = &input.server_name {
        object.key("ServerName").string(var_641.as_str());
    }
    if let Some(var_642) = &input.server_timezone {
        object.key("ServerTimezone").string(var_642.as_str());
    }
    if let Some(var_643) = &input.username {
        object.key("Username").string(var_643.as_str());
    }
    if let Some(var_644) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_644.as_str());
    }
    if let Some(var_645) = &input.secrets_manager_secret_id {
        object
            .key("SecretsManagerSecretId")
            .string(var_645.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_646) = &input.name {
        object.key("Name").string(var_646.as_str());
    }
    if let Some(var_647) = &input.values {
        let mut array_648 = object.key("Values").start_array();
        for item_649 in var_647 {
            {
                array_648.value().string(item_649.as_str());
            }
        }
        array_648.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_to_reload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableToReload,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_650) = &input.schema_name {
        object.key("SchemaName").string(var_650.as_str());
    }
    if let Some(var_651) = &input.table_name {
        object.key("TableName").string(var_651.as_str());
    }
    Ok(())
}
