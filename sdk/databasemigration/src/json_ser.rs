// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_tags_to_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsToResourceInput,
) {
    if let Some(var_1) = &input.resource_arn {
        object.key("ResourceArn").string(var_1);
    }
    if let Some(var_2) = &input.tags {
        let mut array_3 = object.key("Tags").start_array();
        for item_4 in var_2 {
            {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_5, item_4);
                object_5.finish();
            }
        }
        array_3.finish();
    }
}

pub fn serialize_structure_apply_pending_maintenance_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ApplyPendingMaintenanceActionInput,
) {
    if let Some(var_6) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_6);
    }
    if let Some(var_7) = &input.apply_action {
        object.key("ApplyAction").string(var_7);
    }
    if let Some(var_8) = &input.opt_in_type {
        object.key("OptInType").string(var_8);
    }
}

pub fn serialize_structure_cancel_replication_task_assessment_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelReplicationTaskAssessmentRunInput,
) {
    if let Some(var_9) = &input.replication_task_assessment_run_arn {
        object.key("ReplicationTaskAssessmentRunArn").string(var_9);
    }
}

pub fn serialize_structure_create_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) {
    if let Some(var_10) = &input.endpoint_identifier {
        object.key("EndpointIdentifier").string(var_10);
    }
    if let Some(var_11) = &input.endpoint_type {
        object.key("EndpointType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.engine_name {
        object.key("EngineName").string(var_12);
    }
    if let Some(var_13) = &input.username {
        object.key("Username").string(var_13);
    }
    if let Some(var_14) = &input.password {
        object.key("Password").string(var_14);
    }
    if let Some(var_15) = &input.server_name {
        object.key("ServerName").string(var_15);
    }
    if let Some(var_16) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.database_name {
        object.key("DatabaseName").string(var_17);
    }
    if let Some(var_18) = &input.extra_connection_attributes {
        object.key("ExtraConnectionAttributes").string(var_18);
    }
    if let Some(var_19) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_19);
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("Tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_23, item_22);
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.certificate_arn {
        object.key("CertificateArn").string(var_24);
    }
    if let Some(var_25) = &input.ssl_mode {
        object.key("SslMode").string(var_25.as_str());
    }
    if let Some(var_26) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_26);
    }
    if let Some(var_27) = &input.external_table_definition {
        object.key("ExternalTableDefinition").string(var_27);
    }
    if let Some(var_28) = &input.dynamo_db_settings {
        let mut object_29 = object.key("DynamoDbSettings").start_object();
        crate::json_ser::serialize_structure_dynamo_db_settings(&mut object_29, var_28);
        object_29.finish();
    }
    if let Some(var_30) = &input.s3_settings {
        let mut object_31 = object.key("S3Settings").start_object();
        crate::json_ser::serialize_structure_s3_settings(&mut object_31, var_30);
        object_31.finish();
    }
    if let Some(var_32) = &input.dms_transfer_settings {
        let mut object_33 = object.key("DmsTransferSettings").start_object();
        crate::json_ser::serialize_structure_dms_transfer_settings(&mut object_33, var_32);
        object_33.finish();
    }
    if let Some(var_34) = &input.mongo_db_settings {
        let mut object_35 = object.key("MongoDbSettings").start_object();
        crate::json_ser::serialize_structure_mongo_db_settings(&mut object_35, var_34);
        object_35.finish();
    }
    if let Some(var_36) = &input.kinesis_settings {
        let mut object_37 = object.key("KinesisSettings").start_object();
        crate::json_ser::serialize_structure_kinesis_settings(&mut object_37, var_36);
        object_37.finish();
    }
    if let Some(var_38) = &input.kafka_settings {
        let mut object_39 = object.key("KafkaSettings").start_object();
        crate::json_ser::serialize_structure_kafka_settings(&mut object_39, var_38);
        object_39.finish();
    }
    if let Some(var_40) = &input.elasticsearch_settings {
        let mut object_41 = object.key("ElasticsearchSettings").start_object();
        crate::json_ser::serialize_structure_elasticsearch_settings(&mut object_41, var_40);
        object_41.finish();
    }
    if let Some(var_42) = &input.neptune_settings {
        let mut object_43 = object.key("NeptuneSettings").start_object();
        crate::json_ser::serialize_structure_neptune_settings(&mut object_43, var_42);
        object_43.finish();
    }
    if let Some(var_44) = &input.redshift_settings {
        let mut object_45 = object.key("RedshiftSettings").start_object();
        crate::json_ser::serialize_structure_redshift_settings(&mut object_45, var_44);
        object_45.finish();
    }
    if let Some(var_46) = &input.postgre_sql_settings {
        let mut object_47 = object.key("PostgreSQLSettings").start_object();
        crate::json_ser::serialize_structure_postgre_sql_settings(&mut object_47, var_46);
        object_47.finish();
    }
    if let Some(var_48) = &input.my_sql_settings {
        let mut object_49 = object.key("MySQLSettings").start_object();
        crate::json_ser::serialize_structure_my_sql_settings(&mut object_49, var_48);
        object_49.finish();
    }
    if let Some(var_50) = &input.oracle_settings {
        let mut object_51 = object.key("OracleSettings").start_object();
        crate::json_ser::serialize_structure_oracle_settings(&mut object_51, var_50);
        object_51.finish();
    }
    if let Some(var_52) = &input.sybase_settings {
        let mut object_53 = object.key("SybaseSettings").start_object();
        crate::json_ser::serialize_structure_sybase_settings(&mut object_53, var_52);
        object_53.finish();
    }
    if let Some(var_54) = &input.microsoft_sql_server_settings {
        let mut object_55 = object.key("MicrosoftSQLServerSettings").start_object();
        crate::json_ser::serialize_structure_microsoft_sql_server_settings(&mut object_55, var_54);
        object_55.finish();
    }
    if let Some(var_56) = &input.ibm_db2_settings {
        let mut object_57 = object.key("IBMDb2Settings").start_object();
        crate::json_ser::serialize_structure_ibm_db2_settings(&mut object_57, var_56);
        object_57.finish();
    }
    if let Some(var_58) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_58);
    }
    if let Some(var_59) = &input.doc_db_settings {
        let mut object_60 = object.key("DocDbSettings").start_object();
        crate::json_ser::serialize_structure_doc_db_settings(&mut object_60, var_59);
        object_60.finish();
    }
    if let Some(var_61) = &input.redis_settings {
        let mut object_62 = object.key("RedisSettings").start_object();
        crate::json_ser::serialize_structure_redis_settings(&mut object_62, var_61);
        object_62.finish();
    }
}

pub fn serialize_structure_create_event_subscription_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEventSubscriptionInput,
) {
    if let Some(var_63) = &input.subscription_name {
        object.key("SubscriptionName").string(var_63);
    }
    if let Some(var_64) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_64);
    }
    if let Some(var_65) = &input.source_type {
        object.key("SourceType").string(var_65);
    }
    if let Some(var_66) = &input.event_categories {
        let mut array_67 = object.key("EventCategories").start_array();
        for item_68 in var_66 {
            {
                array_67.value().string(item_68);
            }
        }
        array_67.finish();
    }
    if let Some(var_69) = &input.source_ids {
        let mut array_70 = object.key("SourceIds").start_array();
        for item_71 in var_69 {
            {
                array_70.value().string(item_71);
            }
        }
        array_70.finish();
    }
    if let Some(var_72) = &input.enabled {
        object.key("Enabled").boolean(*var_72);
    }
    if let Some(var_73) = &input.tags {
        let mut array_74 = object.key("Tags").start_array();
        for item_75 in var_73 {
            {
                let mut object_76 = array_74.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_76, item_75);
                object_76.finish();
            }
        }
        array_74.finish();
    }
}

pub fn serialize_structure_create_replication_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationInstanceInput,
) {
    if let Some(var_77) = &input.replication_instance_identifier {
        object.key("ReplicationInstanceIdentifier").string(var_77);
    }
    if let Some(var_78) = &input.allocated_storage {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_78).into()),
        );
    }
    if let Some(var_79) = &input.replication_instance_class {
        object.key("ReplicationInstanceClass").string(var_79);
    }
    if let Some(var_80) = &input.vpc_security_group_ids {
        let mut array_81 = object.key("VpcSecurityGroupIds").start_array();
        for item_82 in var_80 {
            {
                array_81.value().string(item_82);
            }
        }
        array_81.finish();
    }
    if let Some(var_83) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_83);
    }
    if let Some(var_84) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_84);
    }
    if let Some(var_85) = &input.preferred_maintenance_window {
        object.key("PreferredMaintenanceWindow").string(var_85);
    }
    if let Some(var_86) = &input.multi_az {
        object.key("MultiAZ").boolean(*var_86);
    }
    if let Some(var_87) = &input.engine_version {
        object.key("EngineVersion").string(var_87);
    }
    if let Some(var_88) = &input.auto_minor_version_upgrade {
        object.key("AutoMinorVersionUpgrade").boolean(*var_88);
    }
    if let Some(var_89) = &input.tags {
        let mut array_90 = object.key("Tags").start_array();
        for item_91 in var_89 {
            {
                let mut object_92 = array_90.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_92, item_91);
                object_92.finish();
            }
        }
        array_90.finish();
    }
    if let Some(var_93) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_93);
    }
    if let Some(var_94) = &input.publicly_accessible {
        object.key("PubliclyAccessible").boolean(*var_94);
    }
    if let Some(var_95) = &input.dns_name_servers {
        object.key("DnsNameServers").string(var_95);
    }
    if let Some(var_96) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_96);
    }
}

pub fn serialize_structure_create_replication_subnet_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationSubnetGroupInput,
) {
    if let Some(var_97) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_97);
    }
    if let Some(var_98) = &input.replication_subnet_group_description {
        object
            .key("ReplicationSubnetGroupDescription")
            .string(var_98);
    }
    if let Some(var_99) = &input.subnet_ids {
        let mut array_100 = object.key("SubnetIds").start_array();
        for item_101 in var_99 {
            {
                array_100.value().string(item_101);
            }
        }
        array_100.finish();
    }
    if let Some(var_102) = &input.tags {
        let mut array_103 = object.key("Tags").start_array();
        for item_104 in var_102 {
            {
                let mut object_105 = array_103.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_105, item_104);
                object_105.finish();
            }
        }
        array_103.finish();
    }
}

pub fn serialize_structure_create_replication_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationTaskInput,
) {
    if let Some(var_106) = &input.replication_task_identifier {
        object.key("ReplicationTaskIdentifier").string(var_106);
    }
    if let Some(var_107) = &input.source_endpoint_arn {
        object.key("SourceEndpointArn").string(var_107);
    }
    if let Some(var_108) = &input.target_endpoint_arn {
        object.key("TargetEndpointArn").string(var_108);
    }
    if let Some(var_109) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_109);
    }
    if let Some(var_110) = &input.migration_type {
        object.key("MigrationType").string(var_110.as_str());
    }
    if let Some(var_111) = &input.table_mappings {
        object.key("TableMappings").string(var_111);
    }
    if let Some(var_112) = &input.replication_task_settings {
        object.key("ReplicationTaskSettings").string(var_112);
    }
    if let Some(var_113) = &input.cdc_start_time {
        object
            .key("CdcStartTime")
            .instant(var_113, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_114) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_114);
    }
    if let Some(var_115) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_115);
    }
    if let Some(var_116) = &input.tags {
        let mut array_117 = object.key("Tags").start_array();
        for item_118 in var_116 {
            {
                let mut object_119 = array_117.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_119, item_118);
                object_119.finish();
            }
        }
        array_117.finish();
    }
    if let Some(var_120) = &input.task_data {
        object.key("TaskData").string(var_120);
    }
    if let Some(var_121) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_121);
    }
}

pub fn serialize_structure_delete_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCertificateInput,
) {
    if let Some(var_122) = &input.certificate_arn {
        object.key("CertificateArn").string(var_122);
    }
}

pub fn serialize_structure_delete_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) {
    if let Some(var_123) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_123);
    }
    if let Some(var_124) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_124);
    }
}

pub fn serialize_structure_delete_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) {
    if let Some(var_125) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_125);
    }
}

pub fn serialize_structure_delete_event_subscription_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEventSubscriptionInput,
) {
    if let Some(var_126) = &input.subscription_name {
        object.key("SubscriptionName").string(var_126);
    }
}

pub fn serialize_structure_delete_replication_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationInstanceInput,
) {
    if let Some(var_127) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_127);
    }
}

pub fn serialize_structure_delete_replication_subnet_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationSubnetGroupInput,
) {
    if let Some(var_128) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_128);
    }
}

pub fn serialize_structure_delete_replication_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationTaskInput,
) {
    if let Some(var_129) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_129);
    }
}

pub fn serialize_structure_delete_replication_task_assessment_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationTaskAssessmentRunInput,
) {
    if let Some(var_130) = &input.replication_task_assessment_run_arn {
        object
            .key("ReplicationTaskAssessmentRunArn")
            .string(var_130);
    }
}

pub fn serialize_structure_describe_applicable_individual_assessments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicableIndividualAssessmentsInput,
) {
    if let Some(var_131) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_131);
    }
    if let Some(var_132) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_132);
    }
    if let Some(var_133) = &input.source_engine_name {
        object.key("SourceEngineName").string(var_133);
    }
    if let Some(var_134) = &input.target_engine_name {
        object.key("TargetEngineName").string(var_134);
    }
    if let Some(var_135) = &input.migration_type {
        object.key("MigrationType").string(var_135.as_str());
    }
    if let Some(var_136) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_136).into()),
        );
    }
    if let Some(var_137) = &input.marker {
        object.key("Marker").string(var_137);
    }
}

pub fn serialize_structure_describe_certificates_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCertificatesInput,
) {
    if let Some(var_138) = &input.filters {
        let mut array_139 = object.key("Filters").start_array();
        for item_140 in var_138 {
            {
                let mut object_141 = array_139.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_141, item_140);
                object_141.finish();
            }
        }
        array_139.finish();
    }
    if let Some(var_142) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    if let Some(var_143) = &input.marker {
        object.key("Marker").string(var_143);
    }
}

pub fn serialize_structure_describe_connections_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConnectionsInput,
) {
    if let Some(var_144) = &input.filters {
        let mut array_145 = object.key("Filters").start_array();
        for item_146 in var_144 {
            {
                let mut object_147 = array_145.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_147, item_146);
                object_147.finish();
            }
        }
        array_145.finish();
    }
    if let Some(var_148) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_148).into()),
        );
    }
    if let Some(var_149) = &input.marker {
        object.key("Marker").string(var_149);
    }
}

pub fn serialize_structure_describe_endpoints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointsInput,
) {
    if let Some(var_150) = &input.filters {
        let mut array_151 = object.key("Filters").start_array();
        for item_152 in var_150 {
            {
                let mut object_153 = array_151.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_153, item_152);
                object_153.finish();
            }
        }
        array_151.finish();
    }
    if let Some(var_154) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_154).into()),
        );
    }
    if let Some(var_155) = &input.marker {
        object.key("Marker").string(var_155);
    }
}

pub fn serialize_structure_describe_endpoint_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointSettingsInput,
) {
    if let Some(var_156) = &input.engine_name {
        object.key("EngineName").string(var_156);
    }
    if let Some(var_157) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_157).into()),
        );
    }
    if let Some(var_158) = &input.marker {
        object.key("Marker").string(var_158);
    }
}

pub fn serialize_structure_describe_endpoint_types_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointTypesInput,
) {
    if let Some(var_159) = &input.filters {
        let mut array_160 = object.key("Filters").start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_162, item_161);
                object_162.finish();
            }
        }
        array_160.finish();
    }
    if let Some(var_163) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_163).into()),
        );
    }
    if let Some(var_164) = &input.marker {
        object.key("Marker").string(var_164);
    }
}

pub fn serialize_structure_describe_event_categories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventCategoriesInput,
) {
    if let Some(var_165) = &input.source_type {
        object.key("SourceType").string(var_165);
    }
    if let Some(var_166) = &input.filters {
        let mut array_167 = object.key("Filters").start_array();
        for item_168 in var_166 {
            {
                let mut object_169 = array_167.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_169, item_168);
                object_169.finish();
            }
        }
        array_167.finish();
    }
}

pub fn serialize_structure_describe_events_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventsInput,
) {
    if let Some(var_170) = &input.source_identifier {
        object.key("SourceIdentifier").string(var_170);
    }
    if let Some(var_171) = &input.source_type {
        object.key("SourceType").string(var_171.as_str());
    }
    if let Some(var_172) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_172, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_173) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_173, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_174) = &input.duration {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_174).into()),
        );
    }
    if let Some(var_175) = &input.event_categories {
        let mut array_176 = object.key("EventCategories").start_array();
        for item_177 in var_175 {
            {
                array_176.value().string(item_177);
            }
        }
        array_176.finish();
    }
    if let Some(var_178) = &input.filters {
        let mut array_179 = object.key("Filters").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_181, item_180);
                object_181.finish();
            }
        }
        array_179.finish();
    }
    if let Some(var_182) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_182).into()),
        );
    }
    if let Some(var_183) = &input.marker {
        object.key("Marker").string(var_183);
    }
}

pub fn serialize_structure_describe_event_subscriptions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventSubscriptionsInput,
) {
    if let Some(var_184) = &input.subscription_name {
        object.key("SubscriptionName").string(var_184);
    }
    if let Some(var_185) = &input.filters {
        let mut array_186 = object.key("Filters").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_188, item_187);
                object_188.finish();
            }
        }
        array_186.finish();
    }
    if let Some(var_189) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    if let Some(var_190) = &input.marker {
        object.key("Marker").string(var_190);
    }
}

pub fn serialize_structure_describe_orderable_replication_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrderableReplicationInstancesInput,
) {
    if let Some(var_191) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    if let Some(var_192) = &input.marker {
        object.key("Marker").string(var_192);
    }
}

pub fn serialize_structure_describe_pending_maintenance_actions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePendingMaintenanceActionsInput,
) {
    if let Some(var_193) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_193);
    }
    if let Some(var_194) = &input.filters {
        let mut array_195 = object.key("Filters").start_array();
        for item_196 in var_194 {
            {
                let mut object_197 = array_195.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_197, item_196);
                object_197.finish();
            }
        }
        array_195.finish();
    }
    if let Some(var_198) = &input.marker {
        object.key("Marker").string(var_198);
    }
    if let Some(var_199) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_199).into()),
        );
    }
}

pub fn serialize_structure_describe_refresh_schemas_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRefreshSchemasStatusInput,
) {
    if let Some(var_200) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_200);
    }
}

pub fn serialize_structure_describe_replication_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationInstancesInput,
) {
    if let Some(var_201) = &input.filters {
        let mut array_202 = object.key("Filters").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_204, item_203);
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    if let Some(var_206) = &input.marker {
        object.key("Marker").string(var_206);
    }
}

pub fn serialize_structure_describe_replication_instance_task_logs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationInstanceTaskLogsInput,
) {
    if let Some(var_207) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_207);
    }
    if let Some(var_208) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    if let Some(var_209) = &input.marker {
        object.key("Marker").string(var_209);
    }
}

pub fn serialize_structure_describe_replication_subnet_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationSubnetGroupsInput,
) {
    if let Some(var_210) = &input.filters {
        let mut array_211 = object.key("Filters").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_213, item_212);
                object_213.finish();
            }
        }
        array_211.finish();
    }
    if let Some(var_214) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_214).into()),
        );
    }
    if let Some(var_215) = &input.marker {
        object.key("Marker").string(var_215);
    }
}

pub fn serialize_structure_describe_replication_task_assessment_results_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTaskAssessmentResultsInput,
) {
    if let Some(var_216) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_216);
    }
    if let Some(var_217) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_217).into()),
        );
    }
    if let Some(var_218) = &input.marker {
        object.key("Marker").string(var_218);
    }
}

pub fn serialize_structure_describe_replication_task_assessment_runs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTaskAssessmentRunsInput,
) {
    if let Some(var_219) = &input.filters {
        let mut array_220 = object.key("Filters").start_array();
        for item_221 in var_219 {
            {
                let mut object_222 = array_220.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_222, item_221);
                object_222.finish();
            }
        }
        array_220.finish();
    }
    if let Some(var_223) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_223).into()),
        );
    }
    if let Some(var_224) = &input.marker {
        object.key("Marker").string(var_224);
    }
}

pub fn serialize_structure_describe_replication_task_individual_assessments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTaskIndividualAssessmentsInput,
) {
    if let Some(var_225) = &input.filters {
        let mut array_226 = object.key("Filters").start_array();
        for item_227 in var_225 {
            {
                let mut object_228 = array_226.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_228, item_227);
                object_228.finish();
            }
        }
        array_226.finish();
    }
    if let Some(var_229) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_229).into()),
        );
    }
    if let Some(var_230) = &input.marker {
        object.key("Marker").string(var_230);
    }
}

pub fn serialize_structure_describe_replication_tasks_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTasksInput,
) {
    if let Some(var_231) = &input.filters {
        let mut array_232 = object.key("Filters").start_array();
        for item_233 in var_231 {
            {
                let mut object_234 = array_232.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_234, item_233);
                object_234.finish();
            }
        }
        array_232.finish();
    }
    if let Some(var_235) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    if let Some(var_236) = &input.marker {
        object.key("Marker").string(var_236);
    }
    if let Some(var_237) = &input.without_settings {
        object.key("WithoutSettings").boolean(*var_237);
    }
}

pub fn serialize_structure_describe_schemas_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSchemasInput,
) {
    if let Some(var_238) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_238);
    }
    if let Some(var_239) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_239).into()),
        );
    }
    if let Some(var_240) = &input.marker {
        object.key("Marker").string(var_240);
    }
}

pub fn serialize_structure_describe_table_statistics_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTableStatisticsInput,
) {
    if let Some(var_241) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_241);
    }
    if let Some(var_242) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_242).into()),
        );
    }
    if let Some(var_243) = &input.marker {
        object.key("Marker").string(var_243);
    }
    if let Some(var_244) = &input.filters {
        let mut array_245 = object.key("Filters").start_array();
        for item_246 in var_244 {
            {
                let mut object_247 = array_245.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_247, item_246);
                object_247.finish();
            }
        }
        array_245.finish();
    }
}

pub fn serialize_structure_import_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCertificateInput,
) {
    if let Some(var_248) = &input.certificate_identifier {
        object.key("CertificateIdentifier").string(var_248);
    }
    if let Some(var_249) = &input.certificate_pem {
        object.key("CertificatePem").string(var_249);
    }
    if let Some(var_250) = &input.certificate_wallet {
        object
            .key("CertificateWallet")
            .string_unchecked(&smithy_types::base64::encode(var_250));
    }
    if let Some(var_251) = &input.tags {
        let mut array_252 = object.key("Tags").start_array();
        for item_253 in var_251 {
            {
                let mut object_254 = array_252.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_254, item_253);
                object_254.finish();
            }
        }
        array_252.finish();
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_255) = &input.resource_arn {
        object.key("ResourceArn").string(var_255);
    }
    if let Some(var_256) = &input.resource_arn_list {
        let mut array_257 = object.key("ResourceArnList").start_array();
        for item_258 in var_256 {
            {
                array_257.value().string(item_258);
            }
        }
        array_257.finish();
    }
}

pub fn serialize_structure_modify_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyEndpointInput,
) {
    if let Some(var_259) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_259);
    }
    if let Some(var_260) = &input.endpoint_identifier {
        object.key("EndpointIdentifier").string(var_260);
    }
    if let Some(var_261) = &input.endpoint_type {
        object.key("EndpointType").string(var_261.as_str());
    }
    if let Some(var_262) = &input.engine_name {
        object.key("EngineName").string(var_262);
    }
    if let Some(var_263) = &input.username {
        object.key("Username").string(var_263);
    }
    if let Some(var_264) = &input.password {
        object.key("Password").string(var_264);
    }
    if let Some(var_265) = &input.server_name {
        object.key("ServerName").string(var_265);
    }
    if let Some(var_266) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_266).into()),
        );
    }
    if let Some(var_267) = &input.database_name {
        object.key("DatabaseName").string(var_267);
    }
    if let Some(var_268) = &input.extra_connection_attributes {
        object.key("ExtraConnectionAttributes").string(var_268);
    }
    if let Some(var_269) = &input.certificate_arn {
        object.key("CertificateArn").string(var_269);
    }
    if let Some(var_270) = &input.ssl_mode {
        object.key("SslMode").string(var_270.as_str());
    }
    if let Some(var_271) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_271);
    }
    if let Some(var_272) = &input.external_table_definition {
        object.key("ExternalTableDefinition").string(var_272);
    }
    if let Some(var_273) = &input.dynamo_db_settings {
        let mut object_274 = object.key("DynamoDbSettings").start_object();
        crate::json_ser::serialize_structure_dynamo_db_settings(&mut object_274, var_273);
        object_274.finish();
    }
    if let Some(var_275) = &input.s3_settings {
        let mut object_276 = object.key("S3Settings").start_object();
        crate::json_ser::serialize_structure_s3_settings(&mut object_276, var_275);
        object_276.finish();
    }
    if let Some(var_277) = &input.dms_transfer_settings {
        let mut object_278 = object.key("DmsTransferSettings").start_object();
        crate::json_ser::serialize_structure_dms_transfer_settings(&mut object_278, var_277);
        object_278.finish();
    }
    if let Some(var_279) = &input.mongo_db_settings {
        let mut object_280 = object.key("MongoDbSettings").start_object();
        crate::json_ser::serialize_structure_mongo_db_settings(&mut object_280, var_279);
        object_280.finish();
    }
    if let Some(var_281) = &input.kinesis_settings {
        let mut object_282 = object.key("KinesisSettings").start_object();
        crate::json_ser::serialize_structure_kinesis_settings(&mut object_282, var_281);
        object_282.finish();
    }
    if let Some(var_283) = &input.kafka_settings {
        let mut object_284 = object.key("KafkaSettings").start_object();
        crate::json_ser::serialize_structure_kafka_settings(&mut object_284, var_283);
        object_284.finish();
    }
    if let Some(var_285) = &input.elasticsearch_settings {
        let mut object_286 = object.key("ElasticsearchSettings").start_object();
        crate::json_ser::serialize_structure_elasticsearch_settings(&mut object_286, var_285);
        object_286.finish();
    }
    if let Some(var_287) = &input.neptune_settings {
        let mut object_288 = object.key("NeptuneSettings").start_object();
        crate::json_ser::serialize_structure_neptune_settings(&mut object_288, var_287);
        object_288.finish();
    }
    if let Some(var_289) = &input.redshift_settings {
        let mut object_290 = object.key("RedshiftSettings").start_object();
        crate::json_ser::serialize_structure_redshift_settings(&mut object_290, var_289);
        object_290.finish();
    }
    if let Some(var_291) = &input.postgre_sql_settings {
        let mut object_292 = object.key("PostgreSQLSettings").start_object();
        crate::json_ser::serialize_structure_postgre_sql_settings(&mut object_292, var_291);
        object_292.finish();
    }
    if let Some(var_293) = &input.my_sql_settings {
        let mut object_294 = object.key("MySQLSettings").start_object();
        crate::json_ser::serialize_structure_my_sql_settings(&mut object_294, var_293);
        object_294.finish();
    }
    if let Some(var_295) = &input.oracle_settings {
        let mut object_296 = object.key("OracleSettings").start_object();
        crate::json_ser::serialize_structure_oracle_settings(&mut object_296, var_295);
        object_296.finish();
    }
    if let Some(var_297) = &input.sybase_settings {
        let mut object_298 = object.key("SybaseSettings").start_object();
        crate::json_ser::serialize_structure_sybase_settings(&mut object_298, var_297);
        object_298.finish();
    }
    if let Some(var_299) = &input.microsoft_sql_server_settings {
        let mut object_300 = object.key("MicrosoftSQLServerSettings").start_object();
        crate::json_ser::serialize_structure_microsoft_sql_server_settings(
            &mut object_300,
            var_299,
        );
        object_300.finish();
    }
    if let Some(var_301) = &input.ibm_db2_settings {
        let mut object_302 = object.key("IBMDb2Settings").start_object();
        crate::json_ser::serialize_structure_ibm_db2_settings(&mut object_302, var_301);
        object_302.finish();
    }
    if let Some(var_303) = &input.doc_db_settings {
        let mut object_304 = object.key("DocDbSettings").start_object();
        crate::json_ser::serialize_structure_doc_db_settings(&mut object_304, var_303);
        object_304.finish();
    }
    if let Some(var_305) = &input.redis_settings {
        let mut object_306 = object.key("RedisSettings").start_object();
        crate::json_ser::serialize_structure_redis_settings(&mut object_306, var_305);
        object_306.finish();
    }
    if let Some(var_307) = &input.exact_settings {
        object.key("ExactSettings").boolean(*var_307);
    }
}

pub fn serialize_structure_modify_event_subscription_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyEventSubscriptionInput,
) {
    if let Some(var_308) = &input.subscription_name {
        object.key("SubscriptionName").string(var_308);
    }
    if let Some(var_309) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_309);
    }
    if let Some(var_310) = &input.source_type {
        object.key("SourceType").string(var_310);
    }
    if let Some(var_311) = &input.event_categories {
        let mut array_312 = object.key("EventCategories").start_array();
        for item_313 in var_311 {
            {
                array_312.value().string(item_313);
            }
        }
        array_312.finish();
    }
    if let Some(var_314) = &input.enabled {
        object.key("Enabled").boolean(*var_314);
    }
}

pub fn serialize_structure_modify_replication_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReplicationInstanceInput,
) {
    if let Some(var_315) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_315);
    }
    if let Some(var_316) = &input.allocated_storage {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_316).into()),
        );
    }
    if input.apply_immediately {
        object
            .key("ApplyImmediately")
            .boolean(input.apply_immediately);
    }
    if let Some(var_317) = &input.replication_instance_class {
        object.key("ReplicationInstanceClass").string(var_317);
    }
    if let Some(var_318) = &input.vpc_security_group_ids {
        let mut array_319 = object.key("VpcSecurityGroupIds").start_array();
        for item_320 in var_318 {
            {
                array_319.value().string(item_320);
            }
        }
        array_319.finish();
    }
    if let Some(var_321) = &input.preferred_maintenance_window {
        object.key("PreferredMaintenanceWindow").string(var_321);
    }
    if let Some(var_322) = &input.multi_az {
        object.key("MultiAZ").boolean(*var_322);
    }
    if let Some(var_323) = &input.engine_version {
        object.key("EngineVersion").string(var_323);
    }
    if input.allow_major_version_upgrade {
        object
            .key("AllowMajorVersionUpgrade")
            .boolean(input.allow_major_version_upgrade);
    }
    if let Some(var_324) = &input.auto_minor_version_upgrade {
        object.key("AutoMinorVersionUpgrade").boolean(*var_324);
    }
    if let Some(var_325) = &input.replication_instance_identifier {
        object.key("ReplicationInstanceIdentifier").string(var_325);
    }
}

pub fn serialize_structure_modify_replication_subnet_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReplicationSubnetGroupInput,
) {
    if let Some(var_326) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_326);
    }
    if let Some(var_327) = &input.replication_subnet_group_description {
        object
            .key("ReplicationSubnetGroupDescription")
            .string(var_327);
    }
    if let Some(var_328) = &input.subnet_ids {
        let mut array_329 = object.key("SubnetIds").start_array();
        for item_330 in var_328 {
            {
                array_329.value().string(item_330);
            }
        }
        array_329.finish();
    }
}

pub fn serialize_structure_modify_replication_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReplicationTaskInput,
) {
    if let Some(var_331) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_331);
    }
    if let Some(var_332) = &input.replication_task_identifier {
        object.key("ReplicationTaskIdentifier").string(var_332);
    }
    if let Some(var_333) = &input.migration_type {
        object.key("MigrationType").string(var_333.as_str());
    }
    if let Some(var_334) = &input.table_mappings {
        object.key("TableMappings").string(var_334);
    }
    if let Some(var_335) = &input.replication_task_settings {
        object.key("ReplicationTaskSettings").string(var_335);
    }
    if let Some(var_336) = &input.cdc_start_time {
        object
            .key("CdcStartTime")
            .instant(var_336, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_337) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_337);
    }
    if let Some(var_338) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_338);
    }
    if let Some(var_339) = &input.task_data {
        object.key("TaskData").string(var_339);
    }
}

pub fn serialize_structure_move_replication_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::MoveReplicationTaskInput,
) {
    if let Some(var_340) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_340);
    }
    if let Some(var_341) = &input.target_replication_instance_arn {
        object.key("TargetReplicationInstanceArn").string(var_341);
    }
}

pub fn serialize_structure_reboot_replication_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RebootReplicationInstanceInput,
) {
    if let Some(var_342) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_342);
    }
    if let Some(var_343) = &input.force_failover {
        object.key("ForceFailover").boolean(*var_343);
    }
}

pub fn serialize_structure_refresh_schemas_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RefreshSchemasInput,
) {
    if let Some(var_344) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_344);
    }
    if let Some(var_345) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_345);
    }
}

pub fn serialize_structure_reload_tables_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReloadTablesInput,
) {
    if let Some(var_346) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_346);
    }
    if let Some(var_347) = &input.tables_to_reload {
        let mut array_348 = object.key("TablesToReload").start_array();
        for item_349 in var_347 {
            {
                let mut object_350 = array_348.value().start_object();
                crate::json_ser::serialize_structure_table_to_reload(&mut object_350, item_349);
                object_350.finish();
            }
        }
        array_348.finish();
    }
    if let Some(var_351) = &input.reload_option {
        object.key("ReloadOption").string(var_351.as_str());
    }
}

pub fn serialize_structure_remove_tags_from_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsFromResourceInput,
) {
    if let Some(var_352) = &input.resource_arn {
        object.key("ResourceArn").string(var_352);
    }
    if let Some(var_353) = &input.tag_keys {
        let mut array_354 = object.key("TagKeys").start_array();
        for item_355 in var_353 {
            {
                array_354.value().string(item_355);
            }
        }
        array_354.finish();
    }
}

pub fn serialize_structure_start_replication_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplicationTaskInput,
) {
    if let Some(var_356) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_356);
    }
    if let Some(var_357) = &input.start_replication_task_type {
        object
            .key("StartReplicationTaskType")
            .string(var_357.as_str());
    }
    if let Some(var_358) = &input.cdc_start_time {
        object
            .key("CdcStartTime")
            .instant(var_358, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_359) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_359);
    }
    if let Some(var_360) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_360);
    }
}

pub fn serialize_structure_start_replication_task_assessment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplicationTaskAssessmentInput,
) {
    if let Some(var_361) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_361);
    }
}

pub fn serialize_structure_start_replication_task_assessment_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplicationTaskAssessmentRunInput,
) {
    if let Some(var_362) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_362);
    }
    if let Some(var_363) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_363);
    }
    if let Some(var_364) = &input.result_location_bucket {
        object.key("ResultLocationBucket").string(var_364);
    }
    if let Some(var_365) = &input.result_location_folder {
        object.key("ResultLocationFolder").string(var_365);
    }
    if let Some(var_366) = &input.result_encryption_mode {
        object.key("ResultEncryptionMode").string(var_366);
    }
    if let Some(var_367) = &input.result_kms_key_arn {
        object.key("ResultKmsKeyArn").string(var_367);
    }
    if let Some(var_368) = &input.assessment_run_name {
        object.key("AssessmentRunName").string(var_368);
    }
    if let Some(var_369) = &input.include_only {
        let mut array_370 = object.key("IncludeOnly").start_array();
        for item_371 in var_369 {
            {
                array_370.value().string(item_371);
            }
        }
        array_370.finish();
    }
    if let Some(var_372) = &input.exclude {
        let mut array_373 = object.key("Exclude").start_array();
        for item_374 in var_372 {
            {
                array_373.value().string(item_374);
            }
        }
        array_373.finish();
    }
}

pub fn serialize_structure_stop_replication_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopReplicationTaskInput,
) {
    if let Some(var_375) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_375);
    }
}

pub fn serialize_structure_test_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestConnectionInput,
) {
    if let Some(var_376) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_376);
    }
    if let Some(var_377) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_377);
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_378) = &input.key {
        object.key("Key").string(var_378);
    }
    if let Some(var_379) = &input.value {
        object.key("Value").string(var_379);
    }
    if let Some(var_380) = &input.resource_arn {
        object.key("ResourceArn").string(var_380);
    }
}

pub fn serialize_structure_dynamo_db_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbSettings,
) {
    if let Some(var_381) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_381);
    }
}

pub fn serialize_structure_s3_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Settings,
) {
    if let Some(var_382) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_382);
    }
    if let Some(var_383) = &input.external_table_definition {
        object.key("ExternalTableDefinition").string(var_383);
    }
    if let Some(var_384) = &input.csv_row_delimiter {
        object.key("CsvRowDelimiter").string(var_384);
    }
    if let Some(var_385) = &input.csv_delimiter {
        object.key("CsvDelimiter").string(var_385);
    }
    if let Some(var_386) = &input.bucket_folder {
        object.key("BucketFolder").string(var_386);
    }
    if let Some(var_387) = &input.bucket_name {
        object.key("BucketName").string(var_387);
    }
    if let Some(var_388) = &input.compression_type {
        object.key("CompressionType").string(var_388.as_str());
    }
    if let Some(var_389) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_389.as_str());
    }
    if let Some(var_390) = &input.server_side_encryption_kms_key_id {
        object.key("ServerSideEncryptionKmsKeyId").string(var_390);
    }
    if let Some(var_391) = &input.data_format {
        object.key("DataFormat").string(var_391.as_str());
    }
    if let Some(var_392) = &input.encoding_type {
        object.key("EncodingType").string(var_392.as_str());
    }
    if let Some(var_393) = &input.dict_page_size_limit {
        object.key("DictPageSizeLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_393).into()),
        );
    }
    if let Some(var_394) = &input.row_group_length {
        object.key("RowGroupLength").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_394).into()),
        );
    }
    if let Some(var_395) = &input.data_page_size {
        object.key("DataPageSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_395).into()),
        );
    }
    if let Some(var_396) = &input.parquet_version {
        object.key("ParquetVersion").string(var_396.as_str());
    }
    if let Some(var_397) = &input.enable_statistics {
        object.key("EnableStatistics").boolean(*var_397);
    }
    if let Some(var_398) = &input.include_op_for_full_load {
        object.key("IncludeOpForFullLoad").boolean(*var_398);
    }
    if let Some(var_399) = &input.cdc_inserts_only {
        object.key("CdcInsertsOnly").boolean(*var_399);
    }
    if let Some(var_400) = &input.timestamp_column_name {
        object.key("TimestampColumnName").string(var_400);
    }
    if let Some(var_401) = &input.parquet_timestamp_in_millisecond {
        object
            .key("ParquetTimestampInMillisecond")
            .boolean(*var_401);
    }
    if let Some(var_402) = &input.cdc_inserts_and_updates {
        object.key("CdcInsertsAndUpdates").boolean(*var_402);
    }
    if let Some(var_403) = &input.date_partition_enabled {
        object.key("DatePartitionEnabled").boolean(*var_403);
    }
    if let Some(var_404) = &input.date_partition_sequence {
        object.key("DatePartitionSequence").string(var_404.as_str());
    }
    if let Some(var_405) = &input.date_partition_delimiter {
        object
            .key("DatePartitionDelimiter")
            .string(var_405.as_str());
    }
    if let Some(var_406) = &input.use_csv_no_sup_value {
        object.key("UseCsvNoSupValue").boolean(*var_406);
    }
    if let Some(var_407) = &input.csv_no_sup_value {
        object.key("CsvNoSupValue").string(var_407);
    }
    if let Some(var_408) = &input.preserve_transactions {
        object.key("PreserveTransactions").boolean(*var_408);
    }
    if let Some(var_409) = &input.cdc_path {
        object.key("CdcPath").string(var_409);
    }
    if let Some(var_410) = &input.canned_acl_for_objects {
        object.key("CannedAclForObjects").string(var_410.as_str());
    }
    if let Some(var_411) = &input.add_column_name {
        object.key("AddColumnName").boolean(*var_411);
    }
    if let Some(var_412) = &input.cdc_max_batch_interval {
        object.key("CdcMaxBatchInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_412).into()),
        );
    }
    if let Some(var_413) = &input.cdc_min_file_size {
        object.key("CdcMinFileSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_413).into()),
        );
    }
    if let Some(var_414) = &input.csv_null_value {
        object.key("CsvNullValue").string(var_414);
    }
    if let Some(var_415) = &input.ignore_header_rows {
        object.key("IgnoreHeaderRows").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_415).into()),
        );
    }
    if let Some(var_416) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_416).into()),
        );
    }
    if let Some(var_417) = &input.rfc4180 {
        object.key("Rfc4180").boolean(*var_417);
    }
}

pub fn serialize_structure_dms_transfer_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DmsTransferSettings,
) {
    if let Some(var_418) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_418);
    }
    if let Some(var_419) = &input.bucket_name {
        object.key("BucketName").string(var_419);
    }
}

pub fn serialize_structure_mongo_db_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MongoDbSettings,
) {
    if let Some(var_420) = &input.username {
        object.key("Username").string(var_420);
    }
    if let Some(var_421) = &input.password {
        object.key("Password").string(var_421);
    }
    if let Some(var_422) = &input.server_name {
        object.key("ServerName").string(var_422);
    }
    if let Some(var_423) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_423).into()),
        );
    }
    if let Some(var_424) = &input.database_name {
        object.key("DatabaseName").string(var_424);
    }
    if let Some(var_425) = &input.auth_type {
        object.key("AuthType").string(var_425.as_str());
    }
    if let Some(var_426) = &input.auth_mechanism {
        object.key("AuthMechanism").string(var_426.as_str());
    }
    if let Some(var_427) = &input.nesting_level {
        object.key("NestingLevel").string(var_427.as_str());
    }
    if let Some(var_428) = &input.extract_doc_id {
        object.key("ExtractDocId").string(var_428);
    }
    if let Some(var_429) = &input.docs_to_investigate {
        object.key("DocsToInvestigate").string(var_429);
    }
    if let Some(var_430) = &input.auth_source {
        object.key("AuthSource").string(var_430);
    }
    if let Some(var_431) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_431);
    }
    if let Some(var_432) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_432);
    }
    if let Some(var_433) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_433);
    }
}

pub fn serialize_structure_kinesis_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisSettings,
) {
    if let Some(var_434) = &input.stream_arn {
        object.key("StreamArn").string(var_434);
    }
    if let Some(var_435) = &input.message_format {
        object.key("MessageFormat").string(var_435.as_str());
    }
    if let Some(var_436) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_436);
    }
    if let Some(var_437) = &input.include_transaction_details {
        object.key("IncludeTransactionDetails").boolean(*var_437);
    }
    if let Some(var_438) = &input.include_partition_value {
        object.key("IncludePartitionValue").boolean(*var_438);
    }
    if let Some(var_439) = &input.partition_include_schema_table {
        object.key("PartitionIncludeSchemaTable").boolean(*var_439);
    }
    if let Some(var_440) = &input.include_table_alter_operations {
        object.key("IncludeTableAlterOperations").boolean(*var_440);
    }
    if let Some(var_441) = &input.include_control_details {
        object.key("IncludeControlDetails").boolean(*var_441);
    }
    if let Some(var_442) = &input.include_null_and_empty {
        object.key("IncludeNullAndEmpty").boolean(*var_442);
    }
    if let Some(var_443) = &input.no_hex_prefix {
        object.key("NoHexPrefix").boolean(*var_443);
    }
}

pub fn serialize_structure_kafka_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KafkaSettings,
) {
    if let Some(var_444) = &input.broker {
        object.key("Broker").string(var_444);
    }
    if let Some(var_445) = &input.topic {
        object.key("Topic").string(var_445);
    }
    if let Some(var_446) = &input.message_format {
        object.key("MessageFormat").string(var_446.as_str());
    }
    if let Some(var_447) = &input.include_transaction_details {
        object.key("IncludeTransactionDetails").boolean(*var_447);
    }
    if let Some(var_448) = &input.include_partition_value {
        object.key("IncludePartitionValue").boolean(*var_448);
    }
    if let Some(var_449) = &input.partition_include_schema_table {
        object.key("PartitionIncludeSchemaTable").boolean(*var_449);
    }
    if let Some(var_450) = &input.include_table_alter_operations {
        object.key("IncludeTableAlterOperations").boolean(*var_450);
    }
    if let Some(var_451) = &input.include_control_details {
        object.key("IncludeControlDetails").boolean(*var_451);
    }
    if let Some(var_452) = &input.message_max_bytes {
        object.key("MessageMaxBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_452).into()),
        );
    }
    if let Some(var_453) = &input.include_null_and_empty {
        object.key("IncludeNullAndEmpty").boolean(*var_453);
    }
    if let Some(var_454) = &input.security_protocol {
        object.key("SecurityProtocol").string(var_454.as_str());
    }
    if let Some(var_455) = &input.ssl_client_certificate_arn {
        object.key("SslClientCertificateArn").string(var_455);
    }
    if let Some(var_456) = &input.ssl_client_key_arn {
        object.key("SslClientKeyArn").string(var_456);
    }
    if let Some(var_457) = &input.ssl_client_key_password {
        object.key("SslClientKeyPassword").string(var_457);
    }
    if let Some(var_458) = &input.ssl_ca_certificate_arn {
        object.key("SslCaCertificateArn").string(var_458);
    }
    if let Some(var_459) = &input.sasl_username {
        object.key("SaslUsername").string(var_459);
    }
    if let Some(var_460) = &input.sasl_password {
        object.key("SaslPassword").string(var_460);
    }
    if let Some(var_461) = &input.no_hex_prefix {
        object.key("NoHexPrefix").boolean(*var_461);
    }
}

pub fn serialize_structure_elasticsearch_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchSettings,
) {
    if let Some(var_462) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_462);
    }
    if let Some(var_463) = &input.endpoint_uri {
        object.key("EndpointUri").string(var_463);
    }
    if let Some(var_464) = &input.full_load_error_percentage {
        object.key("FullLoadErrorPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_464).into()),
        );
    }
    if let Some(var_465) = &input.error_retry_duration {
        object.key("ErrorRetryDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_465).into()),
        );
    }
}

pub fn serialize_structure_neptune_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NeptuneSettings,
) {
    if let Some(var_466) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_466);
    }
    if let Some(var_467) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_467);
    }
    if let Some(var_468) = &input.s3_bucket_folder {
        object.key("S3BucketFolder").string(var_468);
    }
    if let Some(var_469) = &input.error_retry_duration {
        object.key("ErrorRetryDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_469).into()),
        );
    }
    if let Some(var_470) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_470).into()),
        );
    }
    if let Some(var_471) = &input.max_retry_count {
        object.key("MaxRetryCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_471).into()),
        );
    }
    if let Some(var_472) = &input.iam_auth_enabled {
        object.key("IamAuthEnabled").boolean(*var_472);
    }
}

pub fn serialize_structure_redshift_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftSettings,
) {
    if let Some(var_473) = &input.accept_any_date {
        object.key("AcceptAnyDate").boolean(*var_473);
    }
    if let Some(var_474) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_474);
    }
    if let Some(var_475) = &input.bucket_folder {
        object.key("BucketFolder").string(var_475);
    }
    if let Some(var_476) = &input.bucket_name {
        object.key("BucketName").string(var_476);
    }
    if let Some(var_477) = &input.case_sensitive_names {
        object.key("CaseSensitiveNames").boolean(*var_477);
    }
    if let Some(var_478) = &input.comp_update {
        object.key("CompUpdate").boolean(*var_478);
    }
    if let Some(var_479) = &input.connection_timeout {
        object.key("ConnectionTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_479).into()),
        );
    }
    if let Some(var_480) = &input.database_name {
        object.key("DatabaseName").string(var_480);
    }
    if let Some(var_481) = &input.date_format {
        object.key("DateFormat").string(var_481);
    }
    if let Some(var_482) = &input.empty_as_null {
        object.key("EmptyAsNull").boolean(*var_482);
    }
    if let Some(var_483) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_483.as_str());
    }
    if let Some(var_484) = &input.explicit_ids {
        object.key("ExplicitIds").boolean(*var_484);
    }
    if let Some(var_485) = &input.file_transfer_upload_streams {
        object.key("FileTransferUploadStreams").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_485).into()),
        );
    }
    if let Some(var_486) = &input.load_timeout {
        object.key("LoadTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_486).into()),
        );
    }
    if let Some(var_487) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_487).into()),
        );
    }
    if let Some(var_488) = &input.password {
        object.key("Password").string(var_488);
    }
    if let Some(var_489) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_489).into()),
        );
    }
    if let Some(var_490) = &input.remove_quotes {
        object.key("RemoveQuotes").boolean(*var_490);
    }
    if let Some(var_491) = &input.replace_invalid_chars {
        object.key("ReplaceInvalidChars").string(var_491);
    }
    if let Some(var_492) = &input.replace_chars {
        object.key("ReplaceChars").string(var_492);
    }
    if let Some(var_493) = &input.server_name {
        object.key("ServerName").string(var_493);
    }
    if let Some(var_494) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_494);
    }
    if let Some(var_495) = &input.server_side_encryption_kms_key_id {
        object.key("ServerSideEncryptionKmsKeyId").string(var_495);
    }
    if let Some(var_496) = &input.time_format {
        object.key("TimeFormat").string(var_496);
    }
    if let Some(var_497) = &input.trim_blanks {
        object.key("TrimBlanks").boolean(*var_497);
    }
    if let Some(var_498) = &input.truncate_columns {
        object.key("TruncateColumns").boolean(*var_498);
    }
    if let Some(var_499) = &input.username {
        object.key("Username").string(var_499);
    }
    if let Some(var_500) = &input.write_buffer_size {
        object.key("WriteBufferSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_500).into()),
        );
    }
    if let Some(var_501) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_501);
    }
    if let Some(var_502) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_502);
    }
}

pub fn serialize_structure_postgre_sql_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlSettings,
) {
    if let Some(var_503) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_503);
    }
    if let Some(var_504) = &input.capture_ddls {
        object.key("CaptureDdls").boolean(*var_504);
    }
    if let Some(var_505) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_505).into()),
        );
    }
    if let Some(var_506) = &input.database_name {
        object.key("DatabaseName").string(var_506);
    }
    if let Some(var_507) = &input.ddl_artifacts_schema {
        object.key("DdlArtifactsSchema").string(var_507);
    }
    if let Some(var_508) = &input.execute_timeout {
        object.key("ExecuteTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_508).into()),
        );
    }
    if let Some(var_509) = &input.fail_tasks_on_lob_truncation {
        object.key("FailTasksOnLobTruncation").boolean(*var_509);
    }
    if let Some(var_510) = &input.heartbeat_enable {
        object.key("HeartbeatEnable").boolean(*var_510);
    }
    if let Some(var_511) = &input.heartbeat_schema {
        object.key("HeartbeatSchema").string(var_511);
    }
    if let Some(var_512) = &input.heartbeat_frequency {
        object.key("HeartbeatFrequency").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_512).into()),
        );
    }
    if let Some(var_513) = &input.password {
        object.key("Password").string(var_513);
    }
    if let Some(var_514) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_514).into()),
        );
    }
    if let Some(var_515) = &input.server_name {
        object.key("ServerName").string(var_515);
    }
    if let Some(var_516) = &input.username {
        object.key("Username").string(var_516);
    }
    if let Some(var_517) = &input.slot_name {
        object.key("SlotName").string(var_517);
    }
    if let Some(var_518) = &input.plugin_name {
        object.key("PluginName").string(var_518.as_str());
    }
    if let Some(var_519) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_519);
    }
    if let Some(var_520) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_520);
    }
}

pub fn serialize_structure_my_sql_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlSettings,
) {
    if let Some(var_521) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_521);
    }
    if let Some(var_522) = &input.clean_source_metadata_on_mismatch {
        object
            .key("CleanSourceMetadataOnMismatch")
            .boolean(*var_522);
    }
    if let Some(var_523) = &input.database_name {
        object.key("DatabaseName").string(var_523);
    }
    if let Some(var_524) = &input.events_poll_interval {
        object.key("EventsPollInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_524).into()),
        );
    }
    if let Some(var_525) = &input.target_db_type {
        object.key("TargetDbType").string(var_525.as_str());
    }
    if let Some(var_526) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_526).into()),
        );
    }
    if let Some(var_527) = &input.parallel_load_threads {
        object.key("ParallelLoadThreads").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_527).into()),
        );
    }
    if let Some(var_528) = &input.password {
        object.key("Password").string(var_528);
    }
    if let Some(var_529) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_529).into()),
        );
    }
    if let Some(var_530) = &input.server_name {
        object.key("ServerName").string(var_530);
    }
    if let Some(var_531) = &input.server_timezone {
        object.key("ServerTimezone").string(var_531);
    }
    if let Some(var_532) = &input.username {
        object.key("Username").string(var_532);
    }
    if let Some(var_533) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_533);
    }
    if let Some(var_534) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_534);
    }
}

pub fn serialize_structure_oracle_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleSettings,
) {
    if let Some(var_535) = &input.add_supplemental_logging {
        object.key("AddSupplementalLogging").boolean(*var_535);
    }
    if let Some(var_536) = &input.archived_log_dest_id {
        object.key("ArchivedLogDestId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_536).into()),
        );
    }
    if let Some(var_537) = &input.additional_archived_log_dest_id {
        object.key("AdditionalArchivedLogDestId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_537).into()),
        );
    }
    if let Some(var_538) = &input.extra_archived_log_dest_ids {
        let mut array_539 = object.key("ExtraArchivedLogDestIds").start_array();
        for item_540 in var_538 {
            {
                array_539.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*item_540).into()),
                );
            }
        }
        array_539.finish();
    }
    if let Some(var_541) = &input.allow_select_nested_tables {
        object.key("AllowSelectNestedTables").boolean(*var_541);
    }
    if let Some(var_542) = &input.parallel_asm_read_threads {
        object.key("ParallelAsmReadThreads").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_542).into()),
        );
    }
    if let Some(var_543) = &input.read_ahead_blocks {
        object.key("ReadAheadBlocks").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_543).into()),
        );
    }
    if let Some(var_544) = &input.access_alternate_directly {
        object.key("AccessAlternateDirectly").boolean(*var_544);
    }
    if let Some(var_545) = &input.use_alternate_folder_for_online {
        object.key("UseAlternateFolderForOnline").boolean(*var_545);
    }
    if let Some(var_546) = &input.oracle_path_prefix {
        object.key("OraclePathPrefix").string(var_546);
    }
    if let Some(var_547) = &input.use_path_prefix {
        object.key("UsePathPrefix").string(var_547);
    }
    if let Some(var_548) = &input.replace_path_prefix {
        object.key("ReplacePathPrefix").boolean(*var_548);
    }
    if let Some(var_549) = &input.enable_homogenous_tablespace {
        object.key("EnableHomogenousTablespace").boolean(*var_549);
    }
    if let Some(var_550) = &input.direct_path_no_log {
        object.key("DirectPathNoLog").boolean(*var_550);
    }
    if let Some(var_551) = &input.archived_logs_only {
        object.key("ArchivedLogsOnly").boolean(*var_551);
    }
    if let Some(var_552) = &input.asm_password {
        object.key("AsmPassword").string(var_552);
    }
    if let Some(var_553) = &input.asm_server {
        object.key("AsmServer").string(var_553);
    }
    if let Some(var_554) = &input.asm_user {
        object.key("AsmUser").string(var_554);
    }
    if let Some(var_555) = &input.char_length_semantics {
        object.key("CharLengthSemantics").string(var_555.as_str());
    }
    if let Some(var_556) = &input.database_name {
        object.key("DatabaseName").string(var_556);
    }
    if let Some(var_557) = &input.direct_path_parallel_load {
        object.key("DirectPathParallelLoad").boolean(*var_557);
    }
    if let Some(var_558) = &input.fail_tasks_on_lob_truncation {
        object.key("FailTasksOnLobTruncation").boolean(*var_558);
    }
    if let Some(var_559) = &input.number_datatype_scale {
        object.key("NumberDatatypeScale").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_559).into()),
        );
    }
    if let Some(var_560) = &input.password {
        object.key("Password").string(var_560);
    }
    if let Some(var_561) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_561).into()),
        );
    }
    if let Some(var_562) = &input.read_table_space_name {
        object.key("ReadTableSpaceName").boolean(*var_562);
    }
    if let Some(var_563) = &input.retry_interval {
        object.key("RetryInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_563).into()),
        );
    }
    if let Some(var_564) = &input.security_db_encryption {
        object.key("SecurityDbEncryption").string(var_564);
    }
    if let Some(var_565) = &input.security_db_encryption_name {
        object.key("SecurityDbEncryptionName").string(var_565);
    }
    if let Some(var_566) = &input.server_name {
        object.key("ServerName").string(var_566);
    }
    if let Some(var_567) = &input.spatial_data_option_to_geo_json_function_name {
        object
            .key("SpatialDataOptionToGeoJsonFunctionName")
            .string(var_567);
    }
    if let Some(var_568) = &input.standby_delay_time {
        object.key("StandbyDelayTime").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_568).into()),
        );
    }
    if let Some(var_569) = &input.username {
        object.key("Username").string(var_569);
    }
    if let Some(var_570) = &input.use_b_file {
        object.key("UseBFile").boolean(*var_570);
    }
    if let Some(var_571) = &input.use_direct_path_full_load {
        object.key("UseDirectPathFullLoad").boolean(*var_571);
    }
    if let Some(var_572) = &input.use_logminer_reader {
        object.key("UseLogminerReader").boolean(*var_572);
    }
    if let Some(var_573) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_573);
    }
    if let Some(var_574) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_574);
    }
    if let Some(var_575) = &input.secrets_manager_oracle_asm_access_role_arn {
        object
            .key("SecretsManagerOracleAsmAccessRoleArn")
            .string(var_575);
    }
    if let Some(var_576) = &input.secrets_manager_oracle_asm_secret_id {
        object
            .key("SecretsManagerOracleAsmSecretId")
            .string(var_576);
    }
}

pub fn serialize_structure_sybase_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SybaseSettings,
) {
    if let Some(var_577) = &input.database_name {
        object.key("DatabaseName").string(var_577);
    }
    if let Some(var_578) = &input.password {
        object.key("Password").string(var_578);
    }
    if let Some(var_579) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_579).into()),
        );
    }
    if let Some(var_580) = &input.server_name {
        object.key("ServerName").string(var_580);
    }
    if let Some(var_581) = &input.username {
        object.key("Username").string(var_581);
    }
    if let Some(var_582) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_582);
    }
    if let Some(var_583) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_583);
    }
}

pub fn serialize_structure_microsoft_sql_server_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MicrosoftSqlServerSettings,
) {
    if let Some(var_584) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_584).into()),
        );
    }
    if let Some(var_585) = &input.bcp_packet_size {
        object.key("BcpPacketSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_585).into()),
        );
    }
    if let Some(var_586) = &input.database_name {
        object.key("DatabaseName").string(var_586);
    }
    if let Some(var_587) = &input.control_tables_file_group {
        object.key("ControlTablesFileGroup").string(var_587);
    }
    if let Some(var_588) = &input.password {
        object.key("Password").string(var_588);
    }
    if let Some(var_589) = &input.query_single_always_on_node {
        object.key("QuerySingleAlwaysOnNode").boolean(*var_589);
    }
    if let Some(var_590) = &input.read_backup_only {
        object.key("ReadBackupOnly").boolean(*var_590);
    }
    if let Some(var_591) = &input.safeguard_policy {
        object.key("SafeguardPolicy").string(var_591.as_str());
    }
    if let Some(var_592) = &input.server_name {
        object.key("ServerName").string(var_592);
    }
    if let Some(var_593) = &input.username {
        object.key("Username").string(var_593);
    }
    if let Some(var_594) = &input.use_bcp_full_load {
        object.key("UseBcpFullLoad").boolean(*var_594);
    }
    if let Some(var_595) = &input.use_third_party_backup_device {
        object.key("UseThirdPartyBackupDevice").boolean(*var_595);
    }
    if let Some(var_596) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_596);
    }
    if let Some(var_597) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_597);
    }
}

pub fn serialize_structure_ibm_db2_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IbmDb2Settings,
) {
    if let Some(var_598) = &input.database_name {
        object.key("DatabaseName").string(var_598);
    }
    if let Some(var_599) = &input.password {
        object.key("Password").string(var_599);
    }
    if let Some(var_600) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_600).into()),
        );
    }
    if let Some(var_601) = &input.server_name {
        object.key("ServerName").string(var_601);
    }
    if let Some(var_602) = &input.set_data_capture_changes {
        object.key("SetDataCaptureChanges").boolean(*var_602);
    }
    if let Some(var_603) = &input.current_lsn {
        object.key("CurrentLsn").string(var_603);
    }
    if let Some(var_604) = &input.max_k_bytes_per_read {
        object.key("MaxKBytesPerRead").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_604).into()),
        );
    }
    if let Some(var_605) = &input.username {
        object.key("Username").string(var_605);
    }
    if let Some(var_606) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_606);
    }
    if let Some(var_607) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_607);
    }
}

pub fn serialize_structure_doc_db_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocDbSettings,
) {
    if let Some(var_608) = &input.username {
        object.key("Username").string(var_608);
    }
    if let Some(var_609) = &input.password {
        object.key("Password").string(var_609);
    }
    if let Some(var_610) = &input.server_name {
        object.key("ServerName").string(var_610);
    }
    if let Some(var_611) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_611).into()),
        );
    }
    if let Some(var_612) = &input.database_name {
        object.key("DatabaseName").string(var_612);
    }
    if let Some(var_613) = &input.nesting_level {
        object.key("NestingLevel").string(var_613.as_str());
    }
    if let Some(var_614) = &input.extract_doc_id {
        object.key("ExtractDocId").boolean(*var_614);
    }
    if let Some(var_615) = &input.docs_to_investigate {
        object.key("DocsToInvestigate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_615).into()),
        );
    }
    if let Some(var_616) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_616);
    }
    if let Some(var_617) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_617);
    }
    if let Some(var_618) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_618);
    }
}

pub fn serialize_structure_redis_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedisSettings,
) {
    if let Some(var_619) = &input.server_name {
        object.key("ServerName").string(var_619);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_620) = &input.ssl_security_protocol {
        object.key("SslSecurityProtocol").string(var_620.as_str());
    }
    if let Some(var_621) = &input.auth_type {
        object.key("AuthType").string(var_621.as_str());
    }
    if let Some(var_622) = &input.auth_user_name {
        object.key("AuthUserName").string(var_622);
    }
    if let Some(var_623) = &input.auth_password {
        object.key("AuthPassword").string(var_623);
    }
    if let Some(var_624) = &input.ssl_ca_certificate_arn {
        object.key("SslCaCertificateArn").string(var_624);
    }
}

pub fn serialize_structure_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_625) = &input.name {
        object.key("Name").string(var_625);
    }
    if let Some(var_626) = &input.values {
        let mut array_627 = object.key("Values").start_array();
        for item_628 in var_626 {
            {
                array_627.value().string(item_628);
            }
        }
        array_627.finish();
    }
}

pub fn serialize_structure_table_to_reload(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableToReload,
) {
    if let Some(var_629) = &input.schema_name {
        object.key("SchemaName").string(var_629);
    }
    if let Some(var_630) = &input.table_name {
        object.key("TableName").string(var_630);
    }
}
