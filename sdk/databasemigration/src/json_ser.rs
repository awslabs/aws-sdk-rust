// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_tags_to_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsToResourceInput,
) {
    if let Some(var_1) = &input.resource_arn {
        object.key("ResourceArn").string(var_1);
    }
    if let Some(var_2) = &input.tags {
        let mut array_3 = object.key("Tags").start_array();
        for item_4 in var_2 {
            {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_5, item_4);
                object_5.finish();
            }
        }
        array_3.finish();
    }
}

pub fn serialize_structure_apply_pending_maintenance_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ApplyPendingMaintenanceActionInput,
) {
    if let Some(var_6) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_6);
    }
    if let Some(var_7) = &input.apply_action {
        object.key("ApplyAction").string(var_7);
    }
    if let Some(var_8) = &input.opt_in_type {
        object.key("OptInType").string(var_8);
    }
}

pub fn serialize_structure_cancel_replication_task_assessment_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelReplicationTaskAssessmentRunInput,
) {
    if let Some(var_9) = &input.replication_task_assessment_run_arn {
        object.key("ReplicationTaskAssessmentRunArn").string(var_9);
    }
}

pub fn serialize_structure_create_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) {
    if let Some(var_10) = &input.endpoint_identifier {
        object.key("EndpointIdentifier").string(var_10);
    }
    if let Some(var_11) = &input.endpoint_type {
        object.key("EndpointType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.engine_name {
        object.key("EngineName").string(var_12);
    }
    if let Some(var_13) = &input.username {
        object.key("Username").string(var_13);
    }
    if let Some(var_14) = &input.password {
        object.key("Password").string(var_14);
    }
    if let Some(var_15) = &input.server_name {
        object.key("ServerName").string(var_15);
    }
    if let Some(var_16) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.database_name {
        object.key("DatabaseName").string(var_17);
    }
    if let Some(var_18) = &input.extra_connection_attributes {
        object.key("ExtraConnectionAttributes").string(var_18);
    }
    if let Some(var_19) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_19);
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("Tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_23, item_22);
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.certificate_arn {
        object.key("CertificateArn").string(var_24);
    }
    if let Some(var_25) = &input.ssl_mode {
        object.key("SslMode").string(var_25.as_str());
    }
    if let Some(var_26) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_26);
    }
    if let Some(var_27) = &input.external_table_definition {
        object.key("ExternalTableDefinition").string(var_27);
    }
    if let Some(var_28) = &input.dynamo_db_settings {
        let mut object_29 = object.key("DynamoDbSettings").start_object();
        crate::json_ser::serialize_structure_dynamo_db_settings(&mut object_29, var_28);
        object_29.finish();
    }
    if let Some(var_30) = &input.s3_settings {
        let mut object_31 = object.key("S3Settings").start_object();
        crate::json_ser::serialize_structure_s3_settings(&mut object_31, var_30);
        object_31.finish();
    }
    if let Some(var_32) = &input.dms_transfer_settings {
        let mut object_33 = object.key("DmsTransferSettings").start_object();
        crate::json_ser::serialize_structure_dms_transfer_settings(&mut object_33, var_32);
        object_33.finish();
    }
    if let Some(var_34) = &input.mongo_db_settings {
        let mut object_35 = object.key("MongoDbSettings").start_object();
        crate::json_ser::serialize_structure_mongo_db_settings(&mut object_35, var_34);
        object_35.finish();
    }
    if let Some(var_36) = &input.kinesis_settings {
        let mut object_37 = object.key("KinesisSettings").start_object();
        crate::json_ser::serialize_structure_kinesis_settings(&mut object_37, var_36);
        object_37.finish();
    }
    if let Some(var_38) = &input.kafka_settings {
        let mut object_39 = object.key("KafkaSettings").start_object();
        crate::json_ser::serialize_structure_kafka_settings(&mut object_39, var_38);
        object_39.finish();
    }
    if let Some(var_40) = &input.elasticsearch_settings {
        let mut object_41 = object.key("ElasticsearchSettings").start_object();
        crate::json_ser::serialize_structure_elasticsearch_settings(&mut object_41, var_40);
        object_41.finish();
    }
    if let Some(var_42) = &input.neptune_settings {
        let mut object_43 = object.key("NeptuneSettings").start_object();
        crate::json_ser::serialize_structure_neptune_settings(&mut object_43, var_42);
        object_43.finish();
    }
    if let Some(var_44) = &input.redshift_settings {
        let mut object_45 = object.key("RedshiftSettings").start_object();
        crate::json_ser::serialize_structure_redshift_settings(&mut object_45, var_44);
        object_45.finish();
    }
    if let Some(var_46) = &input.postgre_sql_settings {
        let mut object_47 = object.key("PostgreSQLSettings").start_object();
        crate::json_ser::serialize_structure_postgre_sql_settings(&mut object_47, var_46);
        object_47.finish();
    }
    if let Some(var_48) = &input.my_sql_settings {
        let mut object_49 = object.key("MySQLSettings").start_object();
        crate::json_ser::serialize_structure_my_sql_settings(&mut object_49, var_48);
        object_49.finish();
    }
    if let Some(var_50) = &input.oracle_settings {
        let mut object_51 = object.key("OracleSettings").start_object();
        crate::json_ser::serialize_structure_oracle_settings(&mut object_51, var_50);
        object_51.finish();
    }
    if let Some(var_52) = &input.sybase_settings {
        let mut object_53 = object.key("SybaseSettings").start_object();
        crate::json_ser::serialize_structure_sybase_settings(&mut object_53, var_52);
        object_53.finish();
    }
    if let Some(var_54) = &input.microsoft_sql_server_settings {
        let mut object_55 = object.key("MicrosoftSQLServerSettings").start_object();
        crate::json_ser::serialize_structure_microsoft_sql_server_settings(&mut object_55, var_54);
        object_55.finish();
    }
    if let Some(var_56) = &input.ibm_db2_settings {
        let mut object_57 = object.key("IBMDb2Settings").start_object();
        crate::json_ser::serialize_structure_ibm_db2_settings(&mut object_57, var_56);
        object_57.finish();
    }
    if let Some(var_58) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_58);
    }
    if let Some(var_59) = &input.doc_db_settings {
        let mut object_60 = object.key("DocDbSettings").start_object();
        crate::json_ser::serialize_structure_doc_db_settings(&mut object_60, var_59);
        object_60.finish();
    }
}

pub fn serialize_structure_create_event_subscription_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEventSubscriptionInput,
) {
    if let Some(var_61) = &input.subscription_name {
        object.key("SubscriptionName").string(var_61);
    }
    if let Some(var_62) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_62);
    }
    if let Some(var_63) = &input.source_type {
        object.key("SourceType").string(var_63);
    }
    if let Some(var_64) = &input.event_categories {
        let mut array_65 = object.key("EventCategories").start_array();
        for item_66 in var_64 {
            {
                array_65.value().string(item_66);
            }
        }
        array_65.finish();
    }
    if let Some(var_67) = &input.source_ids {
        let mut array_68 = object.key("SourceIds").start_array();
        for item_69 in var_67 {
            {
                array_68.value().string(item_69);
            }
        }
        array_68.finish();
    }
    if let Some(var_70) = &input.enabled {
        object.key("Enabled").boolean(*var_70);
    }
    if let Some(var_71) = &input.tags {
        let mut array_72 = object.key("Tags").start_array();
        for item_73 in var_71 {
            {
                let mut object_74 = array_72.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_74, item_73);
                object_74.finish();
            }
        }
        array_72.finish();
    }
}

pub fn serialize_structure_create_replication_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationInstanceInput,
) {
    if let Some(var_75) = &input.replication_instance_identifier {
        object.key("ReplicationInstanceIdentifier").string(var_75);
    }
    if let Some(var_76) = &input.allocated_storage {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_76).into()),
        );
    }
    if let Some(var_77) = &input.replication_instance_class {
        object.key("ReplicationInstanceClass").string(var_77);
    }
    if let Some(var_78) = &input.vpc_security_group_ids {
        let mut array_79 = object.key("VpcSecurityGroupIds").start_array();
        for item_80 in var_78 {
            {
                array_79.value().string(item_80);
            }
        }
        array_79.finish();
    }
    if let Some(var_81) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_81);
    }
    if let Some(var_82) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_82);
    }
    if let Some(var_83) = &input.preferred_maintenance_window {
        object.key("PreferredMaintenanceWindow").string(var_83);
    }
    if let Some(var_84) = &input.multi_az {
        object.key("MultiAZ").boolean(*var_84);
    }
    if let Some(var_85) = &input.engine_version {
        object.key("EngineVersion").string(var_85);
    }
    if let Some(var_86) = &input.auto_minor_version_upgrade {
        object.key("AutoMinorVersionUpgrade").boolean(*var_86);
    }
    if let Some(var_87) = &input.tags {
        let mut array_88 = object.key("Tags").start_array();
        for item_89 in var_87 {
            {
                let mut object_90 = array_88.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_90, item_89);
                object_90.finish();
            }
        }
        array_88.finish();
    }
    if let Some(var_91) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_91);
    }
    if let Some(var_92) = &input.publicly_accessible {
        object.key("PubliclyAccessible").boolean(*var_92);
    }
    if let Some(var_93) = &input.dns_name_servers {
        object.key("DnsNameServers").string(var_93);
    }
    if let Some(var_94) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_94);
    }
}

pub fn serialize_structure_create_replication_subnet_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationSubnetGroupInput,
) {
    if let Some(var_95) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_95);
    }
    if let Some(var_96) = &input.replication_subnet_group_description {
        object
            .key("ReplicationSubnetGroupDescription")
            .string(var_96);
    }
    if let Some(var_97) = &input.subnet_ids {
        let mut array_98 = object.key("SubnetIds").start_array();
        for item_99 in var_97 {
            {
                array_98.value().string(item_99);
            }
        }
        array_98.finish();
    }
    if let Some(var_100) = &input.tags {
        let mut array_101 = object.key("Tags").start_array();
        for item_102 in var_100 {
            {
                let mut object_103 = array_101.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_103, item_102);
                object_103.finish();
            }
        }
        array_101.finish();
    }
}

pub fn serialize_structure_create_replication_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationTaskInput,
) {
    if let Some(var_104) = &input.replication_task_identifier {
        object.key("ReplicationTaskIdentifier").string(var_104);
    }
    if let Some(var_105) = &input.source_endpoint_arn {
        object.key("SourceEndpointArn").string(var_105);
    }
    if let Some(var_106) = &input.target_endpoint_arn {
        object.key("TargetEndpointArn").string(var_106);
    }
    if let Some(var_107) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_107);
    }
    if let Some(var_108) = &input.migration_type {
        object.key("MigrationType").string(var_108.as_str());
    }
    if let Some(var_109) = &input.table_mappings {
        object.key("TableMappings").string(var_109);
    }
    if let Some(var_110) = &input.replication_task_settings {
        object.key("ReplicationTaskSettings").string(var_110);
    }
    if let Some(var_111) = &input.cdc_start_time {
        object
            .key("CdcStartTime")
            .instant(var_111, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_112) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_112);
    }
    if let Some(var_113) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_113);
    }
    if let Some(var_114) = &input.tags {
        let mut array_115 = object.key("Tags").start_array();
        for item_116 in var_114 {
            {
                let mut object_117 = array_115.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_117, item_116);
                object_117.finish();
            }
        }
        array_115.finish();
    }
    if let Some(var_118) = &input.task_data {
        object.key("TaskData").string(var_118);
    }
    if let Some(var_119) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_119);
    }
}

pub fn serialize_structure_delete_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCertificateInput,
) {
    if let Some(var_120) = &input.certificate_arn {
        object.key("CertificateArn").string(var_120);
    }
}

pub fn serialize_structure_delete_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) {
    if let Some(var_121) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_121);
    }
    if let Some(var_122) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_122);
    }
}

pub fn serialize_structure_delete_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) {
    if let Some(var_123) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_123);
    }
}

pub fn serialize_structure_delete_event_subscription_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEventSubscriptionInput,
) {
    if let Some(var_124) = &input.subscription_name {
        object.key("SubscriptionName").string(var_124);
    }
}

pub fn serialize_structure_delete_replication_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationInstanceInput,
) {
    if let Some(var_125) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_125);
    }
}

pub fn serialize_structure_delete_replication_subnet_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationSubnetGroupInput,
) {
    if let Some(var_126) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_126);
    }
}

pub fn serialize_structure_delete_replication_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationTaskInput,
) {
    if let Some(var_127) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_127);
    }
}

pub fn serialize_structure_delete_replication_task_assessment_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationTaskAssessmentRunInput,
) {
    if let Some(var_128) = &input.replication_task_assessment_run_arn {
        object
            .key("ReplicationTaskAssessmentRunArn")
            .string(var_128);
    }
}

pub fn serialize_structure_describe_applicable_individual_assessments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicableIndividualAssessmentsInput,
) {
    if let Some(var_129) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_129);
    }
    if let Some(var_130) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_130);
    }
    if let Some(var_131) = &input.source_engine_name {
        object.key("SourceEngineName").string(var_131);
    }
    if let Some(var_132) = &input.target_engine_name {
        object.key("TargetEngineName").string(var_132);
    }
    if let Some(var_133) = &input.migration_type {
        object.key("MigrationType").string(var_133.as_str());
    }
    if let Some(var_134) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_134).into()),
        );
    }
    if let Some(var_135) = &input.marker {
        object.key("Marker").string(var_135);
    }
}

pub fn serialize_structure_describe_certificates_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCertificatesInput,
) {
    if let Some(var_136) = &input.filters {
        let mut array_137 = object.key("Filters").start_array();
        for item_138 in var_136 {
            {
                let mut object_139 = array_137.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_139, item_138);
                object_139.finish();
            }
        }
        array_137.finish();
    }
    if let Some(var_140) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_140).into()),
        );
    }
    if let Some(var_141) = &input.marker {
        object.key("Marker").string(var_141);
    }
}

pub fn serialize_structure_describe_connections_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConnectionsInput,
) {
    if let Some(var_142) = &input.filters {
        let mut array_143 = object.key("Filters").start_array();
        for item_144 in var_142 {
            {
                let mut object_145 = array_143.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_145, item_144);
                object_145.finish();
            }
        }
        array_143.finish();
    }
    if let Some(var_146) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_146).into()),
        );
    }
    if let Some(var_147) = &input.marker {
        object.key("Marker").string(var_147);
    }
}

pub fn serialize_structure_describe_endpoints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointsInput,
) {
    if let Some(var_148) = &input.filters {
        let mut array_149 = object.key("Filters").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_151, item_150);
                object_151.finish();
            }
        }
        array_149.finish();
    }
    if let Some(var_152) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_152).into()),
        );
    }
    if let Some(var_153) = &input.marker {
        object.key("Marker").string(var_153);
    }
}

pub fn serialize_structure_describe_endpoint_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointSettingsInput,
) {
    if let Some(var_154) = &input.engine_name {
        object.key("EngineName").string(var_154);
    }
    if let Some(var_155) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_155).into()),
        );
    }
    if let Some(var_156) = &input.marker {
        object.key("Marker").string(var_156);
    }
}

pub fn serialize_structure_describe_endpoint_types_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointTypesInput,
) {
    if let Some(var_157) = &input.filters {
        let mut array_158 = object.key("Filters").start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_160, item_159);
                object_160.finish();
            }
        }
        array_158.finish();
    }
    if let Some(var_161) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_161).into()),
        );
    }
    if let Some(var_162) = &input.marker {
        object.key("Marker").string(var_162);
    }
}

pub fn serialize_structure_describe_event_categories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventCategoriesInput,
) {
    if let Some(var_163) = &input.source_type {
        object.key("SourceType").string(var_163);
    }
    if let Some(var_164) = &input.filters {
        let mut array_165 = object.key("Filters").start_array();
        for item_166 in var_164 {
            {
                let mut object_167 = array_165.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_167, item_166);
                object_167.finish();
            }
        }
        array_165.finish();
    }
}

pub fn serialize_structure_describe_events_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventsInput,
) {
    if let Some(var_168) = &input.source_identifier {
        object.key("SourceIdentifier").string(var_168);
    }
    if let Some(var_169) = &input.source_type {
        object.key("SourceType").string(var_169.as_str());
    }
    if let Some(var_170) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_170, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_171) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_171, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_172) = &input.duration {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_172).into()),
        );
    }
    if let Some(var_173) = &input.event_categories {
        let mut array_174 = object.key("EventCategories").start_array();
        for item_175 in var_173 {
            {
                array_174.value().string(item_175);
            }
        }
        array_174.finish();
    }
    if let Some(var_176) = &input.filters {
        let mut array_177 = object.key("Filters").start_array();
        for item_178 in var_176 {
            {
                let mut object_179 = array_177.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_179, item_178);
                object_179.finish();
            }
        }
        array_177.finish();
    }
    if let Some(var_180) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_180).into()),
        );
    }
    if let Some(var_181) = &input.marker {
        object.key("Marker").string(var_181);
    }
}

pub fn serialize_structure_describe_event_subscriptions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventSubscriptionsInput,
) {
    if let Some(var_182) = &input.subscription_name {
        object.key("SubscriptionName").string(var_182);
    }
    if let Some(var_183) = &input.filters {
        let mut array_184 = object.key("Filters").start_array();
        for item_185 in var_183 {
            {
                let mut object_186 = array_184.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_186, item_185);
                object_186.finish();
            }
        }
        array_184.finish();
    }
    if let Some(var_187) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_187).into()),
        );
    }
    if let Some(var_188) = &input.marker {
        object.key("Marker").string(var_188);
    }
}

pub fn serialize_structure_describe_orderable_replication_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrderableReplicationInstancesInput,
) {
    if let Some(var_189) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    if let Some(var_190) = &input.marker {
        object.key("Marker").string(var_190);
    }
}

pub fn serialize_structure_describe_pending_maintenance_actions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePendingMaintenanceActionsInput,
) {
    if let Some(var_191) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_191);
    }
    if let Some(var_192) = &input.filters {
        let mut array_193 = object.key("Filters").start_array();
        for item_194 in var_192 {
            {
                let mut object_195 = array_193.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_195, item_194);
                object_195.finish();
            }
        }
        array_193.finish();
    }
    if let Some(var_196) = &input.marker {
        object.key("Marker").string(var_196);
    }
    if let Some(var_197) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_197).into()),
        );
    }
}

pub fn serialize_structure_describe_refresh_schemas_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRefreshSchemasStatusInput,
) {
    if let Some(var_198) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_198);
    }
}

pub fn serialize_structure_describe_replication_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationInstancesInput,
) {
    if let Some(var_199) = &input.filters {
        let mut array_200 = object.key("Filters").start_array();
        for item_201 in var_199 {
            {
                let mut object_202 = array_200.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_202, item_201);
                object_202.finish();
            }
        }
        array_200.finish();
    }
    if let Some(var_203) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_203).into()),
        );
    }
    if let Some(var_204) = &input.marker {
        object.key("Marker").string(var_204);
    }
}

pub fn serialize_structure_describe_replication_instance_task_logs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationInstanceTaskLogsInput,
) {
    if let Some(var_205) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_205);
    }
    if let Some(var_206) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_206).into()),
        );
    }
    if let Some(var_207) = &input.marker {
        object.key("Marker").string(var_207);
    }
}

pub fn serialize_structure_describe_replication_subnet_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationSubnetGroupsInput,
) {
    if let Some(var_208) = &input.filters {
        let mut array_209 = object.key("Filters").start_array();
        for item_210 in var_208 {
            {
                let mut object_211 = array_209.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_211, item_210);
                object_211.finish();
            }
        }
        array_209.finish();
    }
    if let Some(var_212) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_212).into()),
        );
    }
    if let Some(var_213) = &input.marker {
        object.key("Marker").string(var_213);
    }
}

pub fn serialize_structure_describe_replication_task_assessment_results_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTaskAssessmentResultsInput,
) {
    if let Some(var_214) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_214);
    }
    if let Some(var_215) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_215).into()),
        );
    }
    if let Some(var_216) = &input.marker {
        object.key("Marker").string(var_216);
    }
}

pub fn serialize_structure_describe_replication_task_assessment_runs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTaskAssessmentRunsInput,
) {
    if let Some(var_217) = &input.filters {
        let mut array_218 = object.key("Filters").start_array();
        for item_219 in var_217 {
            {
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_220, item_219);
                object_220.finish();
            }
        }
        array_218.finish();
    }
    if let Some(var_221) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_221).into()),
        );
    }
    if let Some(var_222) = &input.marker {
        object.key("Marker").string(var_222);
    }
}

pub fn serialize_structure_describe_replication_task_individual_assessments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTaskIndividualAssessmentsInput,
) {
    if let Some(var_223) = &input.filters {
        let mut array_224 = object.key("Filters").start_array();
        for item_225 in var_223 {
            {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_226, item_225);
                object_226.finish();
            }
        }
        array_224.finish();
    }
    if let Some(var_227) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    if let Some(var_228) = &input.marker {
        object.key("Marker").string(var_228);
    }
}

pub fn serialize_structure_describe_replication_tasks_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationTasksInput,
) {
    if let Some(var_229) = &input.filters {
        let mut array_230 = object.key("Filters").start_array();
        for item_231 in var_229 {
            {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_232, item_231);
                object_232.finish();
            }
        }
        array_230.finish();
    }
    if let Some(var_233) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_233).into()),
        );
    }
    if let Some(var_234) = &input.marker {
        object.key("Marker").string(var_234);
    }
    if let Some(var_235) = &input.without_settings {
        object.key("WithoutSettings").boolean(*var_235);
    }
}

pub fn serialize_structure_describe_schemas_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSchemasInput,
) {
    if let Some(var_236) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_236);
    }
    if let Some(var_237) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_237).into()),
        );
    }
    if let Some(var_238) = &input.marker {
        object.key("Marker").string(var_238);
    }
}

pub fn serialize_structure_describe_table_statistics_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTableStatisticsInput,
) {
    if let Some(var_239) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_239);
    }
    if let Some(var_240) = &input.max_records {
        object.key("MaxRecords").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_240).into()),
        );
    }
    if let Some(var_241) = &input.marker {
        object.key("Marker").string(var_241);
    }
    if let Some(var_242) = &input.filters {
        let mut array_243 = object.key("Filters").start_array();
        for item_244 in var_242 {
            {
                let mut object_245 = array_243.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_245, item_244);
                object_245.finish();
            }
        }
        array_243.finish();
    }
}

pub fn serialize_structure_import_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCertificateInput,
) {
    if let Some(var_246) = &input.certificate_identifier {
        object.key("CertificateIdentifier").string(var_246);
    }
    if let Some(var_247) = &input.certificate_pem {
        object.key("CertificatePem").string(var_247);
    }
    if let Some(var_248) = &input.certificate_wallet {
        object
            .key("CertificateWallet")
            .string_unchecked(&smithy_types::base64::encode(var_248));
    }
    if let Some(var_249) = &input.tags {
        let mut array_250 = object.key("Tags").start_array();
        for item_251 in var_249 {
            {
                let mut object_252 = array_250.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_252, item_251);
                object_252.finish();
            }
        }
        array_250.finish();
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_253) = &input.resource_arn {
        object.key("ResourceArn").string(var_253);
    }
}

pub fn serialize_structure_modify_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyEndpointInput,
) {
    if let Some(var_254) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_254);
    }
    if let Some(var_255) = &input.endpoint_identifier {
        object.key("EndpointIdentifier").string(var_255);
    }
    if let Some(var_256) = &input.endpoint_type {
        object.key("EndpointType").string(var_256.as_str());
    }
    if let Some(var_257) = &input.engine_name {
        object.key("EngineName").string(var_257);
    }
    if let Some(var_258) = &input.username {
        object.key("Username").string(var_258);
    }
    if let Some(var_259) = &input.password {
        object.key("Password").string(var_259);
    }
    if let Some(var_260) = &input.server_name {
        object.key("ServerName").string(var_260);
    }
    if let Some(var_261) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_261).into()),
        );
    }
    if let Some(var_262) = &input.database_name {
        object.key("DatabaseName").string(var_262);
    }
    if let Some(var_263) = &input.extra_connection_attributes {
        object.key("ExtraConnectionAttributes").string(var_263);
    }
    if let Some(var_264) = &input.certificate_arn {
        object.key("CertificateArn").string(var_264);
    }
    if let Some(var_265) = &input.ssl_mode {
        object.key("SslMode").string(var_265.as_str());
    }
    if let Some(var_266) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_266);
    }
    if let Some(var_267) = &input.external_table_definition {
        object.key("ExternalTableDefinition").string(var_267);
    }
    if let Some(var_268) = &input.dynamo_db_settings {
        let mut object_269 = object.key("DynamoDbSettings").start_object();
        crate::json_ser::serialize_structure_dynamo_db_settings(&mut object_269, var_268);
        object_269.finish();
    }
    if let Some(var_270) = &input.s3_settings {
        let mut object_271 = object.key("S3Settings").start_object();
        crate::json_ser::serialize_structure_s3_settings(&mut object_271, var_270);
        object_271.finish();
    }
    if let Some(var_272) = &input.dms_transfer_settings {
        let mut object_273 = object.key("DmsTransferSettings").start_object();
        crate::json_ser::serialize_structure_dms_transfer_settings(&mut object_273, var_272);
        object_273.finish();
    }
    if let Some(var_274) = &input.mongo_db_settings {
        let mut object_275 = object.key("MongoDbSettings").start_object();
        crate::json_ser::serialize_structure_mongo_db_settings(&mut object_275, var_274);
        object_275.finish();
    }
    if let Some(var_276) = &input.kinesis_settings {
        let mut object_277 = object.key("KinesisSettings").start_object();
        crate::json_ser::serialize_structure_kinesis_settings(&mut object_277, var_276);
        object_277.finish();
    }
    if let Some(var_278) = &input.kafka_settings {
        let mut object_279 = object.key("KafkaSettings").start_object();
        crate::json_ser::serialize_structure_kafka_settings(&mut object_279, var_278);
        object_279.finish();
    }
    if let Some(var_280) = &input.elasticsearch_settings {
        let mut object_281 = object.key("ElasticsearchSettings").start_object();
        crate::json_ser::serialize_structure_elasticsearch_settings(&mut object_281, var_280);
        object_281.finish();
    }
    if let Some(var_282) = &input.neptune_settings {
        let mut object_283 = object.key("NeptuneSettings").start_object();
        crate::json_ser::serialize_structure_neptune_settings(&mut object_283, var_282);
        object_283.finish();
    }
    if let Some(var_284) = &input.redshift_settings {
        let mut object_285 = object.key("RedshiftSettings").start_object();
        crate::json_ser::serialize_structure_redshift_settings(&mut object_285, var_284);
        object_285.finish();
    }
    if let Some(var_286) = &input.postgre_sql_settings {
        let mut object_287 = object.key("PostgreSQLSettings").start_object();
        crate::json_ser::serialize_structure_postgre_sql_settings(&mut object_287, var_286);
        object_287.finish();
    }
    if let Some(var_288) = &input.my_sql_settings {
        let mut object_289 = object.key("MySQLSettings").start_object();
        crate::json_ser::serialize_structure_my_sql_settings(&mut object_289, var_288);
        object_289.finish();
    }
    if let Some(var_290) = &input.oracle_settings {
        let mut object_291 = object.key("OracleSettings").start_object();
        crate::json_ser::serialize_structure_oracle_settings(&mut object_291, var_290);
        object_291.finish();
    }
    if let Some(var_292) = &input.sybase_settings {
        let mut object_293 = object.key("SybaseSettings").start_object();
        crate::json_ser::serialize_structure_sybase_settings(&mut object_293, var_292);
        object_293.finish();
    }
    if let Some(var_294) = &input.microsoft_sql_server_settings {
        let mut object_295 = object.key("MicrosoftSQLServerSettings").start_object();
        crate::json_ser::serialize_structure_microsoft_sql_server_settings(
            &mut object_295,
            var_294,
        );
        object_295.finish();
    }
    if let Some(var_296) = &input.ibm_db2_settings {
        let mut object_297 = object.key("IBMDb2Settings").start_object();
        crate::json_ser::serialize_structure_ibm_db2_settings(&mut object_297, var_296);
        object_297.finish();
    }
    if let Some(var_298) = &input.doc_db_settings {
        let mut object_299 = object.key("DocDbSettings").start_object();
        crate::json_ser::serialize_structure_doc_db_settings(&mut object_299, var_298);
        object_299.finish();
    }
}

pub fn serialize_structure_modify_event_subscription_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyEventSubscriptionInput,
) {
    if let Some(var_300) = &input.subscription_name {
        object.key("SubscriptionName").string(var_300);
    }
    if let Some(var_301) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_301);
    }
    if let Some(var_302) = &input.source_type {
        object.key("SourceType").string(var_302);
    }
    if let Some(var_303) = &input.event_categories {
        let mut array_304 = object.key("EventCategories").start_array();
        for item_305 in var_303 {
            {
                array_304.value().string(item_305);
            }
        }
        array_304.finish();
    }
    if let Some(var_306) = &input.enabled {
        object.key("Enabled").boolean(*var_306);
    }
}

pub fn serialize_structure_modify_replication_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReplicationInstanceInput,
) {
    if let Some(var_307) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_307);
    }
    if let Some(var_308) = &input.allocated_storage {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_308).into()),
        );
    }
    if input.apply_immediately {
        object
            .key("ApplyImmediately")
            .boolean(input.apply_immediately);
    }
    if let Some(var_309) = &input.replication_instance_class {
        object.key("ReplicationInstanceClass").string(var_309);
    }
    if let Some(var_310) = &input.vpc_security_group_ids {
        let mut array_311 = object.key("VpcSecurityGroupIds").start_array();
        for item_312 in var_310 {
            {
                array_311.value().string(item_312);
            }
        }
        array_311.finish();
    }
    if let Some(var_313) = &input.preferred_maintenance_window {
        object.key("PreferredMaintenanceWindow").string(var_313);
    }
    if let Some(var_314) = &input.multi_az {
        object.key("MultiAZ").boolean(*var_314);
    }
    if let Some(var_315) = &input.engine_version {
        object.key("EngineVersion").string(var_315);
    }
    if input.allow_major_version_upgrade {
        object
            .key("AllowMajorVersionUpgrade")
            .boolean(input.allow_major_version_upgrade);
    }
    if let Some(var_316) = &input.auto_minor_version_upgrade {
        object.key("AutoMinorVersionUpgrade").boolean(*var_316);
    }
    if let Some(var_317) = &input.replication_instance_identifier {
        object.key("ReplicationInstanceIdentifier").string(var_317);
    }
}

pub fn serialize_structure_modify_replication_subnet_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReplicationSubnetGroupInput,
) {
    if let Some(var_318) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_318);
    }
    if let Some(var_319) = &input.replication_subnet_group_description {
        object
            .key("ReplicationSubnetGroupDescription")
            .string(var_319);
    }
    if let Some(var_320) = &input.subnet_ids {
        let mut array_321 = object.key("SubnetIds").start_array();
        for item_322 in var_320 {
            {
                array_321.value().string(item_322);
            }
        }
        array_321.finish();
    }
}

pub fn serialize_structure_modify_replication_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReplicationTaskInput,
) {
    if let Some(var_323) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_323);
    }
    if let Some(var_324) = &input.replication_task_identifier {
        object.key("ReplicationTaskIdentifier").string(var_324);
    }
    if let Some(var_325) = &input.migration_type {
        object.key("MigrationType").string(var_325.as_str());
    }
    if let Some(var_326) = &input.table_mappings {
        object.key("TableMappings").string(var_326);
    }
    if let Some(var_327) = &input.replication_task_settings {
        object.key("ReplicationTaskSettings").string(var_327);
    }
    if let Some(var_328) = &input.cdc_start_time {
        object
            .key("CdcStartTime")
            .instant(var_328, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_329) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_329);
    }
    if let Some(var_330) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_330);
    }
    if let Some(var_331) = &input.task_data {
        object.key("TaskData").string(var_331);
    }
}

pub fn serialize_structure_move_replication_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::MoveReplicationTaskInput,
) {
    if let Some(var_332) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_332);
    }
    if let Some(var_333) = &input.target_replication_instance_arn {
        object.key("TargetReplicationInstanceArn").string(var_333);
    }
}

pub fn serialize_structure_reboot_replication_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RebootReplicationInstanceInput,
) {
    if let Some(var_334) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_334);
    }
    if let Some(var_335) = &input.force_failover {
        object.key("ForceFailover").boolean(*var_335);
    }
}

pub fn serialize_structure_refresh_schemas_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RefreshSchemasInput,
) {
    if let Some(var_336) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_336);
    }
    if let Some(var_337) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_337);
    }
}

pub fn serialize_structure_reload_tables_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReloadTablesInput,
) {
    if let Some(var_338) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_338);
    }
    if let Some(var_339) = &input.tables_to_reload {
        let mut array_340 = object.key("TablesToReload").start_array();
        for item_341 in var_339 {
            {
                let mut object_342 = array_340.value().start_object();
                crate::json_ser::serialize_structure_table_to_reload(&mut object_342, item_341);
                object_342.finish();
            }
        }
        array_340.finish();
    }
    if let Some(var_343) = &input.reload_option {
        object.key("ReloadOption").string(var_343.as_str());
    }
}

pub fn serialize_structure_remove_tags_from_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsFromResourceInput,
) {
    if let Some(var_344) = &input.resource_arn {
        object.key("ResourceArn").string(var_344);
    }
    if let Some(var_345) = &input.tag_keys {
        let mut array_346 = object.key("TagKeys").start_array();
        for item_347 in var_345 {
            {
                array_346.value().string(item_347);
            }
        }
        array_346.finish();
    }
}

pub fn serialize_structure_start_replication_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplicationTaskInput,
) {
    if let Some(var_348) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_348);
    }
    if let Some(var_349) = &input.start_replication_task_type {
        object
            .key("StartReplicationTaskType")
            .string(var_349.as_str());
    }
    if let Some(var_350) = &input.cdc_start_time {
        object
            .key("CdcStartTime")
            .instant(var_350, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_351) = &input.cdc_start_position {
        object.key("CdcStartPosition").string(var_351);
    }
    if let Some(var_352) = &input.cdc_stop_position {
        object.key("CdcStopPosition").string(var_352);
    }
}

pub fn serialize_structure_start_replication_task_assessment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplicationTaskAssessmentInput,
) {
    if let Some(var_353) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_353);
    }
}

pub fn serialize_structure_start_replication_task_assessment_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplicationTaskAssessmentRunInput,
) {
    if let Some(var_354) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_354);
    }
    if let Some(var_355) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_355);
    }
    if let Some(var_356) = &input.result_location_bucket {
        object.key("ResultLocationBucket").string(var_356);
    }
    if let Some(var_357) = &input.result_location_folder {
        object.key("ResultLocationFolder").string(var_357);
    }
    if let Some(var_358) = &input.result_encryption_mode {
        object.key("ResultEncryptionMode").string(var_358);
    }
    if let Some(var_359) = &input.result_kms_key_arn {
        object.key("ResultKmsKeyArn").string(var_359);
    }
    if let Some(var_360) = &input.assessment_run_name {
        object.key("AssessmentRunName").string(var_360);
    }
    if let Some(var_361) = &input.include_only {
        let mut array_362 = object.key("IncludeOnly").start_array();
        for item_363 in var_361 {
            {
                array_362.value().string(item_363);
            }
        }
        array_362.finish();
    }
    if let Some(var_364) = &input.exclude {
        let mut array_365 = object.key("Exclude").start_array();
        for item_366 in var_364 {
            {
                array_365.value().string(item_366);
            }
        }
        array_365.finish();
    }
}

pub fn serialize_structure_stop_replication_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopReplicationTaskInput,
) {
    if let Some(var_367) = &input.replication_task_arn {
        object.key("ReplicationTaskArn").string(var_367);
    }
}

pub fn serialize_structure_test_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestConnectionInput,
) {
    if let Some(var_368) = &input.replication_instance_arn {
        object.key("ReplicationInstanceArn").string(var_368);
    }
    if let Some(var_369) = &input.endpoint_arn {
        object.key("EndpointArn").string(var_369);
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_370) = &input.key {
        object.key("Key").string(var_370);
    }
    if let Some(var_371) = &input.value {
        object.key("Value").string(var_371);
    }
}

pub fn serialize_structure_dynamo_db_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbSettings,
) {
    if let Some(var_372) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_372);
    }
}

pub fn serialize_structure_s3_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Settings,
) {
    if let Some(var_373) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_373);
    }
    if let Some(var_374) = &input.external_table_definition {
        object.key("ExternalTableDefinition").string(var_374);
    }
    if let Some(var_375) = &input.csv_row_delimiter {
        object.key("CsvRowDelimiter").string(var_375);
    }
    if let Some(var_376) = &input.csv_delimiter {
        object.key("CsvDelimiter").string(var_376);
    }
    if let Some(var_377) = &input.bucket_folder {
        object.key("BucketFolder").string(var_377);
    }
    if let Some(var_378) = &input.bucket_name {
        object.key("BucketName").string(var_378);
    }
    if let Some(var_379) = &input.compression_type {
        object.key("CompressionType").string(var_379.as_str());
    }
    if let Some(var_380) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_380.as_str());
    }
    if let Some(var_381) = &input.server_side_encryption_kms_key_id {
        object.key("ServerSideEncryptionKmsKeyId").string(var_381);
    }
    if let Some(var_382) = &input.data_format {
        object.key("DataFormat").string(var_382.as_str());
    }
    if let Some(var_383) = &input.encoding_type {
        object.key("EncodingType").string(var_383.as_str());
    }
    if let Some(var_384) = &input.dict_page_size_limit {
        object.key("DictPageSizeLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_384).into()),
        );
    }
    if let Some(var_385) = &input.row_group_length {
        object.key("RowGroupLength").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_385).into()),
        );
    }
    if let Some(var_386) = &input.data_page_size {
        object.key("DataPageSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_386).into()),
        );
    }
    if let Some(var_387) = &input.parquet_version {
        object.key("ParquetVersion").string(var_387.as_str());
    }
    if let Some(var_388) = &input.enable_statistics {
        object.key("EnableStatistics").boolean(*var_388);
    }
    if let Some(var_389) = &input.include_op_for_full_load {
        object.key("IncludeOpForFullLoad").boolean(*var_389);
    }
    if let Some(var_390) = &input.cdc_inserts_only {
        object.key("CdcInsertsOnly").boolean(*var_390);
    }
    if let Some(var_391) = &input.timestamp_column_name {
        object.key("TimestampColumnName").string(var_391);
    }
    if let Some(var_392) = &input.parquet_timestamp_in_millisecond {
        object
            .key("ParquetTimestampInMillisecond")
            .boolean(*var_392);
    }
    if let Some(var_393) = &input.cdc_inserts_and_updates {
        object.key("CdcInsertsAndUpdates").boolean(*var_393);
    }
    if let Some(var_394) = &input.date_partition_enabled {
        object.key("DatePartitionEnabled").boolean(*var_394);
    }
    if let Some(var_395) = &input.date_partition_sequence {
        object.key("DatePartitionSequence").string(var_395.as_str());
    }
    if let Some(var_396) = &input.date_partition_delimiter {
        object
            .key("DatePartitionDelimiter")
            .string(var_396.as_str());
    }
    if let Some(var_397) = &input.use_csv_no_sup_value {
        object.key("UseCsvNoSupValue").boolean(*var_397);
    }
    if let Some(var_398) = &input.csv_no_sup_value {
        object.key("CsvNoSupValue").string(var_398);
    }
    if let Some(var_399) = &input.preserve_transactions {
        object.key("PreserveTransactions").boolean(*var_399);
    }
    if let Some(var_400) = &input.cdc_path {
        object.key("CdcPath").string(var_400);
    }
}

pub fn serialize_structure_dms_transfer_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DmsTransferSettings,
) {
    if let Some(var_401) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_401);
    }
    if let Some(var_402) = &input.bucket_name {
        object.key("BucketName").string(var_402);
    }
}

pub fn serialize_structure_mongo_db_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MongoDbSettings,
) {
    if let Some(var_403) = &input.username {
        object.key("Username").string(var_403);
    }
    if let Some(var_404) = &input.password {
        object.key("Password").string(var_404);
    }
    if let Some(var_405) = &input.server_name {
        object.key("ServerName").string(var_405);
    }
    if let Some(var_406) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_406).into()),
        );
    }
    if let Some(var_407) = &input.database_name {
        object.key("DatabaseName").string(var_407);
    }
    if let Some(var_408) = &input.auth_type {
        object.key("AuthType").string(var_408.as_str());
    }
    if let Some(var_409) = &input.auth_mechanism {
        object.key("AuthMechanism").string(var_409.as_str());
    }
    if let Some(var_410) = &input.nesting_level {
        object.key("NestingLevel").string(var_410.as_str());
    }
    if let Some(var_411) = &input.extract_doc_id {
        object.key("ExtractDocId").string(var_411);
    }
    if let Some(var_412) = &input.docs_to_investigate {
        object.key("DocsToInvestigate").string(var_412);
    }
    if let Some(var_413) = &input.auth_source {
        object.key("AuthSource").string(var_413);
    }
    if let Some(var_414) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_414);
    }
    if let Some(var_415) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_415);
    }
    if let Some(var_416) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_416);
    }
}

pub fn serialize_structure_kinesis_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisSettings,
) {
    if let Some(var_417) = &input.stream_arn {
        object.key("StreamArn").string(var_417);
    }
    if let Some(var_418) = &input.message_format {
        object.key("MessageFormat").string(var_418.as_str());
    }
    if let Some(var_419) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_419);
    }
    if let Some(var_420) = &input.include_transaction_details {
        object.key("IncludeTransactionDetails").boolean(*var_420);
    }
    if let Some(var_421) = &input.include_partition_value {
        object.key("IncludePartitionValue").boolean(*var_421);
    }
    if let Some(var_422) = &input.partition_include_schema_table {
        object.key("PartitionIncludeSchemaTable").boolean(*var_422);
    }
    if let Some(var_423) = &input.include_table_alter_operations {
        object.key("IncludeTableAlterOperations").boolean(*var_423);
    }
    if let Some(var_424) = &input.include_control_details {
        object.key("IncludeControlDetails").boolean(*var_424);
    }
    if let Some(var_425) = &input.include_null_and_empty {
        object.key("IncludeNullAndEmpty").boolean(*var_425);
    }
}

pub fn serialize_structure_kafka_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KafkaSettings,
) {
    if let Some(var_426) = &input.broker {
        object.key("Broker").string(var_426);
    }
    if let Some(var_427) = &input.topic {
        object.key("Topic").string(var_427);
    }
    if let Some(var_428) = &input.message_format {
        object.key("MessageFormat").string(var_428.as_str());
    }
    if let Some(var_429) = &input.include_transaction_details {
        object.key("IncludeTransactionDetails").boolean(*var_429);
    }
    if let Some(var_430) = &input.include_partition_value {
        object.key("IncludePartitionValue").boolean(*var_430);
    }
    if let Some(var_431) = &input.partition_include_schema_table {
        object.key("PartitionIncludeSchemaTable").boolean(*var_431);
    }
    if let Some(var_432) = &input.include_table_alter_operations {
        object.key("IncludeTableAlterOperations").boolean(*var_432);
    }
    if let Some(var_433) = &input.include_control_details {
        object.key("IncludeControlDetails").boolean(*var_433);
    }
    if let Some(var_434) = &input.message_max_bytes {
        object.key("MessageMaxBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_434).into()),
        );
    }
    if let Some(var_435) = &input.include_null_and_empty {
        object.key("IncludeNullAndEmpty").boolean(*var_435);
    }
    if let Some(var_436) = &input.security_protocol {
        object.key("SecurityProtocol").string(var_436.as_str());
    }
    if let Some(var_437) = &input.ssl_client_certificate_arn {
        object.key("SslClientCertificateArn").string(var_437);
    }
    if let Some(var_438) = &input.ssl_client_key_arn {
        object.key("SslClientKeyArn").string(var_438);
    }
    if let Some(var_439) = &input.ssl_client_key_password {
        object.key("SslClientKeyPassword").string(var_439);
    }
    if let Some(var_440) = &input.ssl_ca_certificate_arn {
        object.key("SslCaCertificateArn").string(var_440);
    }
    if let Some(var_441) = &input.sasl_username {
        object.key("SaslUsername").string(var_441);
    }
    if let Some(var_442) = &input.sasl_password {
        object.key("SaslPassword").string(var_442);
    }
}

pub fn serialize_structure_elasticsearch_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchSettings,
) {
    if let Some(var_443) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_443);
    }
    if let Some(var_444) = &input.endpoint_uri {
        object.key("EndpointUri").string(var_444);
    }
    if let Some(var_445) = &input.full_load_error_percentage {
        object.key("FullLoadErrorPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_445).into()),
        );
    }
    if let Some(var_446) = &input.error_retry_duration {
        object.key("ErrorRetryDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_446).into()),
        );
    }
}

pub fn serialize_structure_neptune_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NeptuneSettings,
) {
    if let Some(var_447) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_447);
    }
    if let Some(var_448) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_448);
    }
    if let Some(var_449) = &input.s3_bucket_folder {
        object.key("S3BucketFolder").string(var_449);
    }
    if let Some(var_450) = &input.error_retry_duration {
        object.key("ErrorRetryDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_450).into()),
        );
    }
    if let Some(var_451) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_451).into()),
        );
    }
    if let Some(var_452) = &input.max_retry_count {
        object.key("MaxRetryCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_452).into()),
        );
    }
    if let Some(var_453) = &input.iam_auth_enabled {
        object.key("IamAuthEnabled").boolean(*var_453);
    }
}

pub fn serialize_structure_redshift_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftSettings,
) {
    if let Some(var_454) = &input.accept_any_date {
        object.key("AcceptAnyDate").boolean(*var_454);
    }
    if let Some(var_455) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_455);
    }
    if let Some(var_456) = &input.bucket_folder {
        object.key("BucketFolder").string(var_456);
    }
    if let Some(var_457) = &input.bucket_name {
        object.key("BucketName").string(var_457);
    }
    if let Some(var_458) = &input.case_sensitive_names {
        object.key("CaseSensitiveNames").boolean(*var_458);
    }
    if let Some(var_459) = &input.comp_update {
        object.key("CompUpdate").boolean(*var_459);
    }
    if let Some(var_460) = &input.connection_timeout {
        object.key("ConnectionTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_460).into()),
        );
    }
    if let Some(var_461) = &input.database_name {
        object.key("DatabaseName").string(var_461);
    }
    if let Some(var_462) = &input.date_format {
        object.key("DateFormat").string(var_462);
    }
    if let Some(var_463) = &input.empty_as_null {
        object.key("EmptyAsNull").boolean(*var_463);
    }
    if let Some(var_464) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_464.as_str());
    }
    if let Some(var_465) = &input.explicit_ids {
        object.key("ExplicitIds").boolean(*var_465);
    }
    if let Some(var_466) = &input.file_transfer_upload_streams {
        object.key("FileTransferUploadStreams").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_466).into()),
        );
    }
    if let Some(var_467) = &input.load_timeout {
        object.key("LoadTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_467).into()),
        );
    }
    if let Some(var_468) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_468).into()),
        );
    }
    if let Some(var_469) = &input.password {
        object.key("Password").string(var_469);
    }
    if let Some(var_470) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_470).into()),
        );
    }
    if let Some(var_471) = &input.remove_quotes {
        object.key("RemoveQuotes").boolean(*var_471);
    }
    if let Some(var_472) = &input.replace_invalid_chars {
        object.key("ReplaceInvalidChars").string(var_472);
    }
    if let Some(var_473) = &input.replace_chars {
        object.key("ReplaceChars").string(var_473);
    }
    if let Some(var_474) = &input.server_name {
        object.key("ServerName").string(var_474);
    }
    if let Some(var_475) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_475);
    }
    if let Some(var_476) = &input.server_side_encryption_kms_key_id {
        object.key("ServerSideEncryptionKmsKeyId").string(var_476);
    }
    if let Some(var_477) = &input.time_format {
        object.key("TimeFormat").string(var_477);
    }
    if let Some(var_478) = &input.trim_blanks {
        object.key("TrimBlanks").boolean(*var_478);
    }
    if let Some(var_479) = &input.truncate_columns {
        object.key("TruncateColumns").boolean(*var_479);
    }
    if let Some(var_480) = &input.username {
        object.key("Username").string(var_480);
    }
    if let Some(var_481) = &input.write_buffer_size {
        object.key("WriteBufferSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_481).into()),
        );
    }
    if let Some(var_482) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_482);
    }
    if let Some(var_483) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_483);
    }
}

pub fn serialize_structure_postgre_sql_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlSettings,
) {
    if let Some(var_484) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_484);
    }
    if let Some(var_485) = &input.capture_ddls {
        object.key("CaptureDdls").boolean(*var_485);
    }
    if let Some(var_486) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_486).into()),
        );
    }
    if let Some(var_487) = &input.database_name {
        object.key("DatabaseName").string(var_487);
    }
    if let Some(var_488) = &input.ddl_artifacts_schema {
        object.key("DdlArtifactsSchema").string(var_488);
    }
    if let Some(var_489) = &input.execute_timeout {
        object.key("ExecuteTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_489).into()),
        );
    }
    if let Some(var_490) = &input.fail_tasks_on_lob_truncation {
        object.key("FailTasksOnLobTruncation").boolean(*var_490);
    }
    if let Some(var_491) = &input.password {
        object.key("Password").string(var_491);
    }
    if let Some(var_492) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_492).into()),
        );
    }
    if let Some(var_493) = &input.server_name {
        object.key("ServerName").string(var_493);
    }
    if let Some(var_494) = &input.username {
        object.key("Username").string(var_494);
    }
    if let Some(var_495) = &input.slot_name {
        object.key("SlotName").string(var_495);
    }
    if let Some(var_496) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_496);
    }
    if let Some(var_497) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_497);
    }
}

pub fn serialize_structure_my_sql_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlSettings,
) {
    if let Some(var_498) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_498);
    }
    if let Some(var_499) = &input.clean_source_metadata_on_mismatch {
        object
            .key("CleanSourceMetadataOnMismatch")
            .boolean(*var_499);
    }
    if let Some(var_500) = &input.database_name {
        object.key("DatabaseName").string(var_500);
    }
    if let Some(var_501) = &input.events_poll_interval {
        object.key("EventsPollInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_501).into()),
        );
    }
    if let Some(var_502) = &input.target_db_type {
        object.key("TargetDbType").string(var_502.as_str());
    }
    if let Some(var_503) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_503).into()),
        );
    }
    if let Some(var_504) = &input.parallel_load_threads {
        object.key("ParallelLoadThreads").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_504).into()),
        );
    }
    if let Some(var_505) = &input.password {
        object.key("Password").string(var_505);
    }
    if let Some(var_506) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_506).into()),
        );
    }
    if let Some(var_507) = &input.server_name {
        object.key("ServerName").string(var_507);
    }
    if let Some(var_508) = &input.server_timezone {
        object.key("ServerTimezone").string(var_508);
    }
    if let Some(var_509) = &input.username {
        object.key("Username").string(var_509);
    }
    if let Some(var_510) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_510);
    }
    if let Some(var_511) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_511);
    }
}

pub fn serialize_structure_oracle_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleSettings,
) {
    if let Some(var_512) = &input.add_supplemental_logging {
        object.key("AddSupplementalLogging").boolean(*var_512);
    }
    if let Some(var_513) = &input.archived_log_dest_id {
        object.key("ArchivedLogDestId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_513).into()),
        );
    }
    if let Some(var_514) = &input.additional_archived_log_dest_id {
        object.key("AdditionalArchivedLogDestId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_514).into()),
        );
    }
    if let Some(var_515) = &input.allow_select_nested_tables {
        object.key("AllowSelectNestedTables").boolean(*var_515);
    }
    if let Some(var_516) = &input.parallel_asm_read_threads {
        object.key("ParallelAsmReadThreads").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_516).into()),
        );
    }
    if let Some(var_517) = &input.read_ahead_blocks {
        object.key("ReadAheadBlocks").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_517).into()),
        );
    }
    if let Some(var_518) = &input.access_alternate_directly {
        object.key("AccessAlternateDirectly").boolean(*var_518);
    }
    if let Some(var_519) = &input.use_alternate_folder_for_online {
        object.key("UseAlternateFolderForOnline").boolean(*var_519);
    }
    if let Some(var_520) = &input.oracle_path_prefix {
        object.key("OraclePathPrefix").string(var_520);
    }
    if let Some(var_521) = &input.use_path_prefix {
        object.key("UsePathPrefix").string(var_521);
    }
    if let Some(var_522) = &input.replace_path_prefix {
        object.key("ReplacePathPrefix").boolean(*var_522);
    }
    if let Some(var_523) = &input.enable_homogenous_tablespace {
        object.key("EnableHomogenousTablespace").boolean(*var_523);
    }
    if let Some(var_524) = &input.direct_path_no_log {
        object.key("DirectPathNoLog").boolean(*var_524);
    }
    if let Some(var_525) = &input.archived_logs_only {
        object.key("ArchivedLogsOnly").boolean(*var_525);
    }
    if let Some(var_526) = &input.asm_password {
        object.key("AsmPassword").string(var_526);
    }
    if let Some(var_527) = &input.asm_server {
        object.key("AsmServer").string(var_527);
    }
    if let Some(var_528) = &input.asm_user {
        object.key("AsmUser").string(var_528);
    }
    if let Some(var_529) = &input.char_length_semantics {
        object.key("CharLengthSemantics").string(var_529.as_str());
    }
    if let Some(var_530) = &input.database_name {
        object.key("DatabaseName").string(var_530);
    }
    if let Some(var_531) = &input.direct_path_parallel_load {
        object.key("DirectPathParallelLoad").boolean(*var_531);
    }
    if let Some(var_532) = &input.fail_tasks_on_lob_truncation {
        object.key("FailTasksOnLobTruncation").boolean(*var_532);
    }
    if let Some(var_533) = &input.number_datatype_scale {
        object.key("NumberDatatypeScale").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_533).into()),
        );
    }
    if let Some(var_534) = &input.password {
        object.key("Password").string(var_534);
    }
    if let Some(var_535) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_535).into()),
        );
    }
    if let Some(var_536) = &input.read_table_space_name {
        object.key("ReadTableSpaceName").boolean(*var_536);
    }
    if let Some(var_537) = &input.retry_interval {
        object.key("RetryInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_537).into()),
        );
    }
    if let Some(var_538) = &input.security_db_encryption {
        object.key("SecurityDbEncryption").string(var_538);
    }
    if let Some(var_539) = &input.security_db_encryption_name {
        object.key("SecurityDbEncryptionName").string(var_539);
    }
    if let Some(var_540) = &input.server_name {
        object.key("ServerName").string(var_540);
    }
    if let Some(var_541) = &input.spatial_data_option_to_geo_json_function_name {
        object
            .key("SpatialDataOptionToGeoJsonFunctionName")
            .string(var_541);
    }
    if let Some(var_542) = &input.username {
        object.key("Username").string(var_542);
    }
    if let Some(var_543) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_543);
    }
    if let Some(var_544) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_544);
    }
    if let Some(var_545) = &input.secrets_manager_oracle_asm_access_role_arn {
        object
            .key("SecretsManagerOracleAsmAccessRoleArn")
            .string(var_545);
    }
    if let Some(var_546) = &input.secrets_manager_oracle_asm_secret_id {
        object
            .key("SecretsManagerOracleAsmSecretId")
            .string(var_546);
    }
}

pub fn serialize_structure_sybase_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SybaseSettings,
) {
    if let Some(var_547) = &input.database_name {
        object.key("DatabaseName").string(var_547);
    }
    if let Some(var_548) = &input.password {
        object.key("Password").string(var_548);
    }
    if let Some(var_549) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_549).into()),
        );
    }
    if let Some(var_550) = &input.server_name {
        object.key("ServerName").string(var_550);
    }
    if let Some(var_551) = &input.username {
        object.key("Username").string(var_551);
    }
    if let Some(var_552) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_552);
    }
    if let Some(var_553) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_553);
    }
}

pub fn serialize_structure_microsoft_sql_server_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MicrosoftSqlServerSettings,
) {
    if let Some(var_554) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_554).into()),
        );
    }
    if let Some(var_555) = &input.bcp_packet_size {
        object.key("BcpPacketSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_555).into()),
        );
    }
    if let Some(var_556) = &input.database_name {
        object.key("DatabaseName").string(var_556);
    }
    if let Some(var_557) = &input.control_tables_file_group {
        object.key("ControlTablesFileGroup").string(var_557);
    }
    if let Some(var_558) = &input.password {
        object.key("Password").string(var_558);
    }
    if let Some(var_559) = &input.query_single_always_on_node {
        object.key("QuerySingleAlwaysOnNode").boolean(*var_559);
    }
    if let Some(var_560) = &input.read_backup_only {
        object.key("ReadBackupOnly").boolean(*var_560);
    }
    if let Some(var_561) = &input.safeguard_policy {
        object.key("SafeguardPolicy").string(var_561.as_str());
    }
    if let Some(var_562) = &input.server_name {
        object.key("ServerName").string(var_562);
    }
    if let Some(var_563) = &input.username {
        object.key("Username").string(var_563);
    }
    if let Some(var_564) = &input.use_bcp_full_load {
        object.key("UseBcpFullLoad").boolean(*var_564);
    }
    if let Some(var_565) = &input.use_third_party_backup_device {
        object.key("UseThirdPartyBackupDevice").boolean(*var_565);
    }
    if let Some(var_566) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_566);
    }
    if let Some(var_567) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_567);
    }
}

pub fn serialize_structure_ibm_db2_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IbmDb2Settings,
) {
    if let Some(var_568) = &input.database_name {
        object.key("DatabaseName").string(var_568);
    }
    if let Some(var_569) = &input.password {
        object.key("Password").string(var_569);
    }
    if let Some(var_570) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_570).into()),
        );
    }
    if let Some(var_571) = &input.server_name {
        object.key("ServerName").string(var_571);
    }
    if let Some(var_572) = &input.set_data_capture_changes {
        object.key("SetDataCaptureChanges").boolean(*var_572);
    }
    if let Some(var_573) = &input.current_lsn {
        object.key("CurrentLsn").string(var_573);
    }
    if let Some(var_574) = &input.max_k_bytes_per_read {
        object.key("MaxKBytesPerRead").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_574).into()),
        );
    }
    if let Some(var_575) = &input.username {
        object.key("Username").string(var_575);
    }
    if let Some(var_576) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_576);
    }
    if let Some(var_577) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_577);
    }
}

pub fn serialize_structure_doc_db_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocDbSettings,
) {
    if let Some(var_578) = &input.username {
        object.key("Username").string(var_578);
    }
    if let Some(var_579) = &input.password {
        object.key("Password").string(var_579);
    }
    if let Some(var_580) = &input.server_name {
        object.key("ServerName").string(var_580);
    }
    if let Some(var_581) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_581).into()),
        );
    }
    if let Some(var_582) = &input.database_name {
        object.key("DatabaseName").string(var_582);
    }
    if let Some(var_583) = &input.nesting_level {
        object.key("NestingLevel").string(var_583.as_str());
    }
    if let Some(var_584) = &input.extract_doc_id {
        object.key("ExtractDocId").boolean(*var_584);
    }
    if let Some(var_585) = &input.docs_to_investigate {
        object.key("DocsToInvestigate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_585).into()),
        );
    }
    if let Some(var_586) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_586);
    }
    if let Some(var_587) = &input.secrets_manager_access_role_arn {
        object.key("SecretsManagerAccessRoleArn").string(var_587);
    }
    if let Some(var_588) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_588);
    }
}

pub fn serialize_structure_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_589) = &input.name {
        object.key("Name").string(var_589);
    }
    if let Some(var_590) = &input.values {
        let mut array_591 = object.key("Values").start_array();
        for item_592 in var_590 {
            {
                array_591.value().string(item_592);
            }
        }
        array_591.finish();
    }
}

pub fn serialize_structure_table_to_reload(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableToReload,
) {
    if let Some(var_593) = &input.schema_name {
        object.key("SchemaName").string(var_593);
    }
    if let Some(var_594) = &input.table_name {
        object.key("TableName").string(var_594);
    }
}
