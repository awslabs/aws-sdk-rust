// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_replication_task_assessment_run::_delete_replication_task_assessment_run_output::DeleteReplicationTaskAssessmentRunOutputBuilder;

pub use crate::operation::delete_replication_task_assessment_run::_delete_replication_task_assessment_run_input::DeleteReplicationTaskAssessmentRunInputBuilder;

/// Fluent builder constructing a request to `DeleteReplicationTaskAssessmentRun`.
///
/// <p>Deletes the record of a single premigration assessment run.</p>
/// <p>This operation removes all metadata that DMS maintains about this assessment run. However, the operation leaves untouched all information about this assessment run that is stored in your Amazon S3 bucket.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteReplicationTaskAssessmentRunFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::delete_replication_task_assessment_run::builders::DeleteReplicationTaskAssessmentRunInputBuilder
            }
impl DeleteReplicationTaskAssessmentRunFluentBuilder {
    /// Creates a new `DeleteReplicationTaskAssessmentRun`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::delete_replication_task_assessment_run::DeleteReplicationTaskAssessmentRun, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::delete_replication_task_assessment_run::DeleteReplicationTaskAssessmentRunError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::delete_replication_task_assessment_run::DeleteReplicationTaskAssessmentRunOutput, aws_smithy_http::result::SdkError<crate::operation::delete_replication_task_assessment_run::DeleteReplicationTaskAssessmentRunError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Amazon Resource Name (ARN) of the premigration assessment run to be deleted.</p>
    pub fn replication_task_assessment_run_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.replication_task_assessment_run_arn(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the premigration assessment run to be deleted.</p>
    pub fn set_replication_task_assessment_run_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_replication_task_assessment_run_arn(input);
        self
    }
}
