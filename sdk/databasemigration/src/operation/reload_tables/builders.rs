// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::reload_tables::_reload_tables_output::ReloadTablesOutputBuilder;

pub use crate::operation::reload_tables::_reload_tables_input::ReloadTablesInputBuilder;

impl ReloadTablesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::reload_tables::ReloadTablesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::reload_tables::ReloadTablesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.reload_tables();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ReloadTables`.
///
/// <p>Reloads the target database table with the source data. </p>
/// <p>You can only use this operation with a task in the <code>RUNNING</code> state, otherwise the service will throw an <code>InvalidResourceStateFault</code> exception.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ReloadTablesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::reload_tables::builders::ReloadTablesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::reload_tables::ReloadTablesOutput,
        crate::operation::reload_tables::ReloadTablesError,
    > for ReloadTablesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::reload_tables::ReloadTablesOutput,
            crate::operation::reload_tables::ReloadTablesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ReloadTablesFluentBuilder {
    /// Creates a new `ReloadTables`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ReloadTables as a reference.
    pub fn as_input(&self) -> &crate::operation::reload_tables::builders::ReloadTablesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::reload_tables::ReloadTablesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::reload_tables::ReloadTablesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::reload_tables::ReloadTables::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::reload_tables::ReloadTables::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::reload_tables::ReloadTablesOutput,
        crate::operation::reload_tables::ReloadTablesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replication task. </p>
    pub fn replication_task_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.replication_task_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replication task. </p>
    pub fn set_replication_task_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_replication_task_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replication task. </p>
    pub fn get_replication_task_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_replication_task_arn()
    }
    /// Appends an item to `TablesToReload`.
    ///
    /// To override the contents of this collection use [`set_tables_to_reload`](Self::set_tables_to_reload).
    ///
    /// <p>The name and schema of the table to be reloaded. </p>
    pub fn tables_to_reload(mut self, input: crate::types::TableToReload) -> Self {
        self.inner = self.inner.tables_to_reload(input);
        self
    }
    /// <p>The name and schema of the table to be reloaded. </p>
    pub fn set_tables_to_reload(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TableToReload>>) -> Self {
        self.inner = self.inner.set_tables_to_reload(input);
        self
    }
    /// <p>The name and schema of the table to be reloaded. </p>
    pub fn get_tables_to_reload(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TableToReload>> {
        self.inner.get_tables_to_reload()
    }
    /// <p>Options for reload. Specify <code>data-reload</code> to reload the data and re-validate it if validation is enabled. Specify <code>validate-only</code> to re-validate the table. This option applies only when validation is enabled for the task. </p>
    /// <p>Valid values: data-reload, validate-only</p>
    /// <p>Default value is data-reload.</p>
    pub fn reload_option(mut self, input: crate::types::ReloadOptionValue) -> Self {
        self.inner = self.inner.reload_option(input);
        self
    }
    /// <p>Options for reload. Specify <code>data-reload</code> to reload the data and re-validate it if validation is enabled. Specify <code>validate-only</code> to re-validate the table. This option applies only when validation is enabled for the task. </p>
    /// <p>Valid values: data-reload, validate-only</p>
    /// <p>Default value is data-reload.</p>
    pub fn set_reload_option(mut self, input: ::std::option::Option<crate::types::ReloadOptionValue>) -> Self {
        self.inner = self.inner.set_reload_option(input);
        self
    }
    /// <p>Options for reload. Specify <code>data-reload</code> to reload the data and re-validate it if validation is enabled. Specify <code>validate-only</code> to re-validate the table. This option applies only when validation is enabled for the task. </p>
    /// <p>Valid values: data-reload, validate-only</p>
    /// <p>Default value is data-reload.</p>
    pub fn get_reload_option(&self) -> &::std::option::Option<crate::types::ReloadOptionValue> {
        self.inner.get_reload_option()
    }
}
