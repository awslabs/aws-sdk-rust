// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::reload_tables::_reload_tables_output::ReloadTablesOutputBuilder;

pub use crate::operation::reload_tables::_reload_tables_input::ReloadTablesInputBuilder;

/// Fluent builder constructing a request to `ReloadTables`.
///
/// <p>Reloads the target database table with the source data. </p>
/// <p>You can only use this operation with a task in the <code>RUNNING</code> state, otherwise the service will throw an <code>InvalidResourceStateFault</code> exception.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ReloadTablesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::reload_tables::builders::ReloadTablesInputBuilder,
}
impl ReloadTablesFluentBuilder {
    /// Creates a new `ReloadTables`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::reload_tables::ReloadTables,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::reload_tables::ReloadTablesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::reload_tables::ReloadTablesOutput,
        aws_smithy_http::result::SdkError<crate::operation::reload_tables::ReloadTablesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the replication task. </p>
    pub fn replication_task_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.replication_task_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replication task. </p>
    pub fn set_replication_task_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_replication_task_arn(input);
        self
    }
    /// Appends an item to `TablesToReload`.
    ///
    /// To override the contents of this collection use [`set_tables_to_reload`](Self::set_tables_to_reload).
    ///
    /// <p>The name and schema of the table to be reloaded. </p>
    pub fn tables_to_reload(mut self, input: crate::types::TableToReload) -> Self {
        self.inner = self.inner.tables_to_reload(input);
        self
    }
    /// <p>The name and schema of the table to be reloaded. </p>
    pub fn set_tables_to_reload(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TableToReload>>,
    ) -> Self {
        self.inner = self.inner.set_tables_to_reload(input);
        self
    }
    /// <p>Options for reload. Specify <code>data-reload</code> to reload the data and re-validate it if validation is enabled. Specify <code>validate-only</code> to re-validate the table. This option applies only when validation is enabled for the task. </p>
    /// <p>Valid values: data-reload, validate-only</p>
    /// <p>Default value is data-reload.</p>
    pub fn reload_option(mut self, input: crate::types::ReloadOptionValue) -> Self {
        self.inner = self.inner.reload_option(input);
        self
    }
    /// <p>Options for reload. Specify <code>data-reload</code> to reload the data and re-validate it if validation is enabled. Specify <code>validate-only</code> to re-validate the table. This option applies only when validation is enabled for the task. </p>
    /// <p>Valid values: data-reload, validate-only</p>
    /// <p>Default value is data-reload.</p>
    pub fn set_reload_option(
        mut self,
        input: std::option::Option<crate::types::ReloadOptionValue>,
    ) -> Self {
        self.inner = self.inner.set_reload_option(input);
        self
    }
}
