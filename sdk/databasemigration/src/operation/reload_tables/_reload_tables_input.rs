// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReloadTablesInput {
    /// <p>The Amazon Resource Name (ARN) of the replication task. </p>
    #[doc(hidden)]
    pub replication_task_arn: std::option::Option<std::string::String>,
    /// <p>The name and schema of the table to be reloaded. </p>
    #[doc(hidden)]
    pub tables_to_reload: std::option::Option<std::vec::Vec<crate::types::TableToReload>>,
    /// <p>Options for reload. Specify <code>data-reload</code> to reload the data and re-validate it if validation is enabled. Specify <code>validate-only</code> to re-validate the table. This option applies only when validation is enabled for the task. </p>
    /// <p>Valid values: data-reload, validate-only</p>
    /// <p>Default value is data-reload.</p>
    #[doc(hidden)]
    pub reload_option: std::option::Option<crate::types::ReloadOptionValue>,
}
impl ReloadTablesInput {
    /// <p>The Amazon Resource Name (ARN) of the replication task. </p>
    pub fn replication_task_arn(&self) -> std::option::Option<&str> {
        self.replication_task_arn.as_deref()
    }
    /// <p>The name and schema of the table to be reloaded. </p>
    pub fn tables_to_reload(&self) -> std::option::Option<&[crate::types::TableToReload]> {
        self.tables_to_reload.as_deref()
    }
    /// <p>Options for reload. Specify <code>data-reload</code> to reload the data and re-validate it if validation is enabled. Specify <code>validate-only</code> to re-validate the table. This option applies only when validation is enabled for the task. </p>
    /// <p>Valid values: data-reload, validate-only</p>
    /// <p>Default value is data-reload.</p>
    pub fn reload_option(&self) -> std::option::Option<&crate::types::ReloadOptionValue> {
        self.reload_option.as_ref()
    }
}
impl ReloadTablesInput {
    /// Creates a new builder-style object to manufacture [`ReloadTablesInput`](crate::operation::reload_tables::ReloadTablesInput).
    pub fn builder() -> crate::operation::reload_tables::builders::ReloadTablesInputBuilder {
        crate::operation::reload_tables::builders::ReloadTablesInputBuilder::default()
    }
}

/// A builder for [`ReloadTablesInput`](crate::operation::reload_tables::ReloadTablesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReloadTablesInputBuilder {
    pub(crate) replication_task_arn: std::option::Option<std::string::String>,
    pub(crate) tables_to_reload: std::option::Option<std::vec::Vec<crate::types::TableToReload>>,
    pub(crate) reload_option: std::option::Option<crate::types::ReloadOptionValue>,
}
impl ReloadTablesInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the replication task. </p>
    pub fn replication_task_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.replication_task_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replication task. </p>
    pub fn set_replication_task_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_task_arn = input;
        self
    }
    /// Appends an item to `tables_to_reload`.
    ///
    /// To override the contents of this collection use [`set_tables_to_reload`](Self::set_tables_to_reload).
    ///
    /// <p>The name and schema of the table to be reloaded. </p>
    pub fn tables_to_reload(mut self, input: crate::types::TableToReload) -> Self {
        let mut v = self.tables_to_reload.unwrap_or_default();
        v.push(input);
        self.tables_to_reload = Some(v);
        self
    }
    /// <p>The name and schema of the table to be reloaded. </p>
    pub fn set_tables_to_reload(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TableToReload>>,
    ) -> Self {
        self.tables_to_reload = input;
        self
    }
    /// <p>Options for reload. Specify <code>data-reload</code> to reload the data and re-validate it if validation is enabled. Specify <code>validate-only</code> to re-validate the table. This option applies only when validation is enabled for the task. </p>
    /// <p>Valid values: data-reload, validate-only</p>
    /// <p>Default value is data-reload.</p>
    pub fn reload_option(mut self, input: crate::types::ReloadOptionValue) -> Self {
        self.reload_option = Some(input);
        self
    }
    /// <p>Options for reload. Specify <code>data-reload</code> to reload the data and re-validate it if validation is enabled. Specify <code>validate-only</code> to re-validate the table. This option applies only when validation is enabled for the task. </p>
    /// <p>Valid values: data-reload, validate-only</p>
    /// <p>Default value is data-reload.</p>
    pub fn set_reload_option(
        mut self,
        input: std::option::Option<crate::types::ReloadOptionValue>,
    ) -> Self {
        self.reload_option = input;
        self
    }
    /// Consumes the builder and constructs a [`ReloadTablesInput`](crate::operation::reload_tables::ReloadTablesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::reload_tables::ReloadTablesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::reload_tables::ReloadTablesInput {
            replication_task_arn: self.replication_task_arn,
            tables_to_reload: self.tables_to_reload,
            reload_option: self.reload_option,
        })
    }
}
