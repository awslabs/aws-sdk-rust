// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeApplicableIndividualAssessmentsOutput {
    /// <p>List of names for the individual assessments supported by the premigration assessment run that you start based on the specified request parameters. For more information on the available individual assessments, including compatibility with different migration task configurations, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html">Working with premigration assessment runs</a> in the <i>Database Migration Service User Guide.</i> </p>
    pub individual_assessment_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Pagination token returned for you to pass to a subsequent request. If you pass this token as the <code>Marker</code> value in a subsequent request, the response includes only records beyond the marker, up to the value specified in the request by <code>MaxRecords</code>.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeApplicableIndividualAssessmentsOutput {
    /// <p>List of names for the individual assessments supported by the premigration assessment run that you start based on the specified request parameters. For more information on the available individual assessments, including compatibility with different migration task configurations, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html">Working with premigration assessment runs</a> in the <i>Database Migration Service User Guide.</i> </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.individual_assessment_names.is_none()`.
    pub fn individual_assessment_names(&self) -> &[::std::string::String] {
        self.individual_assessment_names.as_deref().unwrap_or_default()
    }
    /// <p>Pagination token returned for you to pass to a subsequent request. If you pass this token as the <code>Marker</code> value in a subsequent request, the response includes only records beyond the marker, up to the value specified in the request by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeApplicableIndividualAssessmentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeApplicableIndividualAssessmentsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeApplicableIndividualAssessmentsOutput`](crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsOutput).
    pub fn builder() -> crate::operation::describe_applicable_individual_assessments::builders::DescribeApplicableIndividualAssessmentsOutputBuilder {
        crate::operation::describe_applicable_individual_assessments::builders::DescribeApplicableIndividualAssessmentsOutputBuilder::default()
    }
}

/// A builder for [`DescribeApplicableIndividualAssessmentsOutput`](crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeApplicableIndividualAssessmentsOutputBuilder {
    pub(crate) individual_assessment_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeApplicableIndividualAssessmentsOutputBuilder {
    /// Appends an item to `individual_assessment_names`.
    ///
    /// To override the contents of this collection use [`set_individual_assessment_names`](Self::set_individual_assessment_names).
    ///
    /// <p>List of names for the individual assessments supported by the premigration assessment run that you start based on the specified request parameters. For more information on the available individual assessments, including compatibility with different migration task configurations, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html">Working with premigration assessment runs</a> in the <i>Database Migration Service User Guide.</i> </p>
    pub fn individual_assessment_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.individual_assessment_names.unwrap_or_default();
        v.push(input.into());
        self.individual_assessment_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of names for the individual assessments supported by the premigration assessment run that you start based on the specified request parameters. For more information on the available individual assessments, including compatibility with different migration task configurations, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html">Working with premigration assessment runs</a> in the <i>Database Migration Service User Guide.</i> </p>
    pub fn set_individual_assessment_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.individual_assessment_names = input;
        self
    }
    /// <p>List of names for the individual assessments supported by the premigration assessment run that you start based on the specified request parameters. For more information on the available individual assessments, including compatibility with different migration task configurations, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html">Working with premigration assessment runs</a> in the <i>Database Migration Service User Guide.</i> </p>
    pub fn get_individual_assessment_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.individual_assessment_names
    }
    /// <p>Pagination token returned for you to pass to a subsequent request. If you pass this token as the <code>Marker</code> value in a subsequent request, the response includes only records beyond the marker, up to the value specified in the request by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Pagination token returned for you to pass to a subsequent request. If you pass this token as the <code>Marker</code> value in a subsequent request, the response includes only records beyond the marker, up to the value specified in the request by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Pagination token returned for you to pass to a subsequent request. If you pass this token as the <code>Marker</code> value in a subsequent request, the response includes only records beyond the marker, up to the value specified in the request by <code>MaxRecords</code>.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeApplicableIndividualAssessmentsOutput`](crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsOutput).
    pub fn build(self) -> crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsOutput {
        crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsOutput {
            individual_assessment_names: self.individual_assessment_names,
            marker: self.marker,
            _request_id: self._request_id,
        }
    }
}
