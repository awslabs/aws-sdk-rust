// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_data_provider::_modify_data_provider_output::ModifyDataProviderOutputBuilder;

pub use crate::operation::modify_data_provider::_modify_data_provider_input::ModifyDataProviderInputBuilder;

impl crate::operation::modify_data_provider::builders::ModifyDataProviderInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_data_provider::ModifyDataProviderOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_data_provider::ModifyDataProviderError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_data_provider();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyDataProvider`.
///
/// <p>Modifies the specified data provider using the provided settings.</p><note>
/// <p>You must remove the data provider from all migration projects before you can modify it.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyDataProviderFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_data_provider::builders::ModifyDataProviderInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_data_provider::ModifyDataProviderOutput,
        crate::operation::modify_data_provider::ModifyDataProviderError,
    > for ModifyDataProviderFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_data_provider::ModifyDataProviderOutput,
            crate::operation::modify_data_provider::ModifyDataProviderError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyDataProviderFluentBuilder {
    /// Creates a new `ModifyDataProvider`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyDataProvider as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_data_provider::builders::ModifyDataProviderInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_data_provider::ModifyDataProviderOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_data_provider::ModifyDataProviderError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_data_provider::ModifyDataProvider::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_data_provider::ModifyDataProvider::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_data_provider::ModifyDataProviderOutput,
        crate::operation::modify_data_provider::ModifyDataProviderError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the data provider. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen, or contain two consecutive hyphens.</p>
    pub fn data_provider_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.data_provider_identifier(input.into());
        self
    }
    /// <p>The identifier of the data provider. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen, or contain two consecutive hyphens.</p>
    pub fn set_data_provider_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_data_provider_identifier(input);
        self
    }
    /// <p>The identifier of the data provider. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen, or contain two consecutive hyphens.</p>
    pub fn get_data_provider_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_data_provider_identifier()
    }
    /// <p>The name of the data provider.</p>
    pub fn data_provider_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.data_provider_name(input.into());
        self
    }
    /// <p>The name of the data provider.</p>
    pub fn set_data_provider_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_data_provider_name(input);
        self
    }
    /// <p>The name of the data provider.</p>
    pub fn get_data_provider_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_data_provider_name()
    }
    /// <p>A user-friendly description of the data provider.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A user-friendly description of the data provider.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A user-friendly description of the data provider.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The type of database engine for the data provider. Valid values include <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, <code>"sqlserver"</code>, <code>redshift</code>, <code>mariadb</code>, <code>mongodb</code>, and <code>docdb</code>. A value of <code>"aurora"</code> represents Amazon Aurora MySQL-Compatible Edition.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.engine(input.into());
        self
    }
    /// <p>The type of database engine for the data provider. Valid values include <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, <code>"sqlserver"</code>, <code>redshift</code>, <code>mariadb</code>, <code>mongodb</code>, and <code>docdb</code>. A value of <code>"aurora"</code> represents Amazon Aurora MySQL-Compatible Edition.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_engine(input);
        self
    }
    /// <p>The type of database engine for the data provider. Valid values include <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, <code>"sqlserver"</code>, <code>redshift</code>, <code>mariadb</code>, <code>mongodb</code>, and <code>docdb</code>. A value of <code>"aurora"</code> represents Amazon Aurora MySQL-Compatible Edition.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_engine()
    }
    /// <p>If this attribute is Y, the current call to <code>ModifyDataProvider</code> replaces all existing data provider settings with the exact settings that you specify in this call. If this attribute is N, the current call to <code>ModifyDataProvider</code> does two things:</p>
    /// <ul>
    /// <li>
    /// <p>It replaces any data provider settings that already exist with new values, for settings with the same names.</p></li>
    /// <li>
    /// <p>It creates new data provider settings that you specify in the call, for settings with different names.</p></li>
    /// </ul>
    pub fn exact_settings(mut self, input: bool) -> Self {
        self.inner = self.inner.exact_settings(input);
        self
    }
    /// <p>If this attribute is Y, the current call to <code>ModifyDataProvider</code> replaces all existing data provider settings with the exact settings that you specify in this call. If this attribute is N, the current call to <code>ModifyDataProvider</code> does two things:</p>
    /// <ul>
    /// <li>
    /// <p>It replaces any data provider settings that already exist with new values, for settings with the same names.</p></li>
    /// <li>
    /// <p>It creates new data provider settings that you specify in the call, for settings with different names.</p></li>
    /// </ul>
    pub fn set_exact_settings(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_exact_settings(input);
        self
    }
    /// <p>If this attribute is Y, the current call to <code>ModifyDataProvider</code> replaces all existing data provider settings with the exact settings that you specify in this call. If this attribute is N, the current call to <code>ModifyDataProvider</code> does two things:</p>
    /// <ul>
    /// <li>
    /// <p>It replaces any data provider settings that already exist with new values, for settings with the same names.</p></li>
    /// <li>
    /// <p>It creates new data provider settings that you specify in the call, for settings with different names.</p></li>
    /// </ul>
    pub fn get_exact_settings(&self) -> &::std::option::Option<bool> {
        self.inner.get_exact_settings()
    }
    /// <p>The settings in JSON format for a data provider.</p>
    pub fn settings(mut self, input: crate::types::DataProviderSettings) -> Self {
        self.inner = self.inner.settings(input);
        self
    }
    /// <p>The settings in JSON format for a data provider.</p>
    pub fn set_settings(mut self, input: ::std::option::Option<crate::types::DataProviderSettings>) -> Self {
        self.inner = self.inner.set_settings(input);
        self
    }
    /// <p>The settings in JSON format for a data provider.</p>
    pub fn get_settings(&self) -> &::std::option::Option<crate::types::DataProviderSettings> {
        self.inner.get_settings()
    }
}
