// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEventsInput {
    /// <p> The identifier of an event source.</p>
    #[doc(hidden)]
    pub source_identifier: std::option::Option<std::string::String>,
    /// <p>The type of DMS resource that generates events.</p>
    /// <p>Valid values: replication-instance | replication-task</p>
    #[doc(hidden)]
    pub source_type: std::option::Option<crate::types::SourceType>,
    /// <p>The start time for the events to be listed.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The end time for the events to be listed.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The duration of the events to be listed.</p>
    #[doc(hidden)]
    pub duration: std::option::Option<i32>,
    /// <p>A list of event categories for the source type that you've chosen.</p>
    #[doc(hidden)]
    pub event_categories: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Filters applied to events. The only valid filter is <code>replication-instance-id</code>.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    #[doc(hidden)]
    pub max_records: std::option::Option<i32>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
}
impl DescribeEventsInput {
    /// <p> The identifier of an event source.</p>
    pub fn source_identifier(&self) -> std::option::Option<&str> {
        self.source_identifier.as_deref()
    }
    /// <p>The type of DMS resource that generates events.</p>
    /// <p>Valid values: replication-instance | replication-task</p>
    pub fn source_type(&self) -> std::option::Option<&crate::types::SourceType> {
        self.source_type.as_ref()
    }
    /// <p>The start time for the events to be listed.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time for the events to be listed.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The duration of the events to be listed.</p>
    pub fn duration(&self) -> std::option::Option<i32> {
        self.duration
    }
    /// <p>A list of event categories for the source type that you've chosen.</p>
    pub fn event_categories(&self) -> std::option::Option<&[std::string::String]> {
        self.event_categories.as_deref()
    }
    /// <p>Filters applied to events. The only valid filter is <code>replication-instance-id</code>.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(&self) -> std::option::Option<i32> {
        self.max_records
    }
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl DescribeEventsInput {
    /// Creates a new builder-style object to manufacture [`DescribeEventsInput`](crate::operation::describe_events::DescribeEventsInput).
    pub fn builder() -> crate::operation::describe_events::builders::DescribeEventsInputBuilder {
        crate::operation::describe_events::builders::DescribeEventsInputBuilder::default()
    }
}

/// A builder for [`DescribeEventsInput`](crate::operation::describe_events::DescribeEventsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEventsInputBuilder {
    pub(crate) source_identifier: std::option::Option<std::string::String>,
    pub(crate) source_type: std::option::Option<crate::types::SourceType>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) duration: std::option::Option<i32>,
    pub(crate) event_categories: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_records: std::option::Option<i32>,
    pub(crate) marker: std::option::Option<std::string::String>,
}
impl DescribeEventsInputBuilder {
    /// <p> The identifier of an event source.</p>
    pub fn source_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_identifier = Some(input.into());
        self
    }
    /// <p> The identifier of an event source.</p>
    pub fn set_source_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_identifier = input;
        self
    }
    /// <p>The type of DMS resource that generates events.</p>
    /// <p>Valid values: replication-instance | replication-task</p>
    pub fn source_type(mut self, input: crate::types::SourceType) -> Self {
        self.source_type = Some(input);
        self
    }
    /// <p>The type of DMS resource that generates events.</p>
    /// <p>Valid values: replication-instance | replication-task</p>
    pub fn set_source_type(mut self, input: std::option::Option<crate::types::SourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The start time for the events to be listed.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The start time for the events to be listed.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The end time for the events to be listed.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The end time for the events to be listed.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The duration of the events to be listed.</p>
    pub fn duration(mut self, input: i32) -> Self {
        self.duration = Some(input);
        self
    }
    /// <p>The duration of the events to be listed.</p>
    pub fn set_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.duration = input;
        self
    }
    /// Appends an item to `event_categories`.
    ///
    /// To override the contents of this collection use [`set_event_categories`](Self::set_event_categories).
    ///
    /// <p>A list of event categories for the source type that you've chosen.</p>
    pub fn event_categories(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.event_categories.unwrap_or_default();
        v.push(input.into());
        self.event_categories = Some(v);
        self
    }
    /// <p>A list of event categories for the source type that you've chosen.</p>
    pub fn set_event_categories(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.event_categories = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Filters applied to events. The only valid filter is <code>replication-instance-id</code>.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>Filters applied to events. The only valid filter is <code>replication-instance-id</code>.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = Some(input);
        self
    }
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEventsInput`](crate::operation::describe_events::DescribeEventsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_events::DescribeEventsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::describe_events::DescribeEventsInput {
            source_identifier: self.source_identifier,
            source_type: self.source_type,
            start_time: self.start_time,
            end_time: self.end_time,
            duration: self.duration,
            event_categories: self.event_categories,
            filters: self.filters,
            max_records: self.max_records,
            marker: self.marker,
        })
    }
}
