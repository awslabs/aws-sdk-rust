// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEndpointSettingsInput {
    /// <p>The databse engine used for your source or target endpoint.</p>
    #[doc(hidden)]
    pub engine_name: std::option::Option<std::string::String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p>
    #[doc(hidden)]
    pub max_records: std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
}
impl DescribeEndpointSettingsInput {
    /// <p>The databse engine used for your source or target endpoint.</p>
    pub fn engine_name(&self) -> std::option::Option<&str> {
        self.engine_name.as_deref()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_records(&self) -> std::option::Option<i32> {
        self.max_records
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl DescribeEndpointSettingsInput {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointSettingsInput`](crate::operation::describe_endpoint_settings::DescribeEndpointSettingsInput).
    pub fn builder(
    ) -> crate::operation::describe_endpoint_settings::builders::DescribeEndpointSettingsInputBuilder
    {
        crate::operation::describe_endpoint_settings::builders::DescribeEndpointSettingsInputBuilder::default()
    }
}

/// A builder for [`DescribeEndpointSettingsInput`](crate::operation::describe_endpoint_settings::DescribeEndpointSettingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEndpointSettingsInputBuilder {
    pub(crate) engine_name: std::option::Option<std::string::String>,
    pub(crate) max_records: std::option::Option<i32>,
    pub(crate) marker: std::option::Option<std::string::String>,
}
impl DescribeEndpointSettingsInputBuilder {
    /// <p>The databse engine used for your source or target endpoint.</p>
    pub fn engine_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_name = Some(input.into());
        self
    }
    /// <p>The databse engine used for your source or target endpoint.</p>
    pub fn set_engine_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_name = input;
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEndpointSettingsInput`](crate::operation::describe_endpoint_settings::DescribeEndpointSettingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_endpoint_settings::DescribeEndpointSettingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_endpoint_settings::DescribeEndpointSettingsInput {
                engine_name: self.engine_name,
                max_records: self.max_records,
                marker: self.marker,
            },
        )
    }
}
