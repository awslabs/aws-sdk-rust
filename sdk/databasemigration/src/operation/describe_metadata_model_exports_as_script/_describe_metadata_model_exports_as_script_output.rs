// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeMetadataModelExportsAsScriptOutput {
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>A paginated list of metadata model exports.</p>
    pub requests: ::std::option::Option<::std::vec::Vec<crate::types::SchemaConversionRequest>>,
    _request_id: Option<String>,
}
impl DescribeMetadataModelExportsAsScriptOutput {
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>A paginated list of metadata model exports.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.requests.is_none()`.
    pub fn requests(&self) -> &[crate::types::SchemaConversionRequest] {
        self.requests.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeMetadataModelExportsAsScriptOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeMetadataModelExportsAsScriptOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMetadataModelExportsAsScriptOutput`](crate::operation::describe_metadata_model_exports_as_script::DescribeMetadataModelExportsAsScriptOutput).
    pub fn builder() -> crate::operation::describe_metadata_model_exports_as_script::builders::DescribeMetadataModelExportsAsScriptOutputBuilder {
        crate::operation::describe_metadata_model_exports_as_script::builders::DescribeMetadataModelExportsAsScriptOutputBuilder::default()
    }
}

/// A builder for [`DescribeMetadataModelExportsAsScriptOutput`](crate::operation::describe_metadata_model_exports_as_script::DescribeMetadataModelExportsAsScriptOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeMetadataModelExportsAsScriptOutputBuilder {
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) requests: ::std::option::Option<::std::vec::Vec<crate::types::SchemaConversionRequest>>,
    _request_id: Option<String>,
}
impl DescribeMetadataModelExportsAsScriptOutputBuilder {
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Appends an item to `requests`.
    ///
    /// To override the contents of this collection use [`set_requests`](Self::set_requests).
    ///
    /// <p>A paginated list of metadata model exports.</p>
    pub fn requests(mut self, input: crate::types::SchemaConversionRequest) -> Self {
        let mut v = self.requests.unwrap_or_default();
        v.push(input);
        self.requests = ::std::option::Option::Some(v);
        self
    }
    /// <p>A paginated list of metadata model exports.</p>
    pub fn set_requests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SchemaConversionRequest>>) -> Self {
        self.requests = input;
        self
    }
    /// <p>A paginated list of metadata model exports.</p>
    pub fn get_requests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SchemaConversionRequest>> {
        &self.requests
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeMetadataModelExportsAsScriptOutput`](crate::operation::describe_metadata_model_exports_as_script::DescribeMetadataModelExportsAsScriptOutput).
    pub fn build(self) -> crate::operation::describe_metadata_model_exports_as_script::DescribeMetadataModelExportsAsScriptOutput {
        crate::operation::describe_metadata_model_exports_as_script::DescribeMetadataModelExportsAsScriptOutput {
            marker: self.marker,
            requests: self.requests,
            _request_id: self._request_id,
        }
    }
}
