// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeMigrationProjectsOutput {
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>A description of migration projects.</p>
    pub migration_projects: ::std::option::Option<::std::vec::Vec<crate::types::MigrationProject>>,
    _request_id: Option<String>,
}
impl DescribeMigrationProjectsOutput {
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>A description of migration projects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.migration_projects.is_none()`.
    pub fn migration_projects(&self) -> &[crate::types::MigrationProject] {
        self.migration_projects.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeMigrationProjectsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeMigrationProjectsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMigrationProjectsOutput`](crate::operation::describe_migration_projects::DescribeMigrationProjectsOutput).
    pub fn builder() -> crate::operation::describe_migration_projects::builders::DescribeMigrationProjectsOutputBuilder {
        crate::operation::describe_migration_projects::builders::DescribeMigrationProjectsOutputBuilder::default()
    }
}

/// A builder for [`DescribeMigrationProjectsOutput`](crate::operation::describe_migration_projects::DescribeMigrationProjectsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeMigrationProjectsOutputBuilder {
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) migration_projects: ::std::option::Option<::std::vec::Vec<crate::types::MigrationProject>>,
    _request_id: Option<String>,
}
impl DescribeMigrationProjectsOutputBuilder {
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Appends an item to `migration_projects`.
    ///
    /// To override the contents of this collection use [`set_migration_projects`](Self::set_migration_projects).
    ///
    /// <p>A description of migration projects.</p>
    pub fn migration_projects(mut self, input: crate::types::MigrationProject) -> Self {
        let mut v = self.migration_projects.unwrap_or_default();
        v.push(input);
        self.migration_projects = ::std::option::Option::Some(v);
        self
    }
    /// <p>A description of migration projects.</p>
    pub fn set_migration_projects(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MigrationProject>>) -> Self {
        self.migration_projects = input;
        self
    }
    /// <p>A description of migration projects.</p>
    pub fn get_migration_projects(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MigrationProject>> {
        &self.migration_projects
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeMigrationProjectsOutput`](crate::operation::describe_migration_projects::DescribeMigrationProjectsOutput).
    pub fn build(self) -> crate::operation::describe_migration_projects::DescribeMigrationProjectsOutput {
        crate::operation::describe_migration_projects::DescribeMigrationProjectsOutput {
            marker: self.marker,
            migration_projects: self.migration_projects,
            _request_id: self._request_id,
        }
    }
}
