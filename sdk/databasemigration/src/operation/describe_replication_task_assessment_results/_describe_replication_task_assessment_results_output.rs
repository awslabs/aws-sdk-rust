// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeReplicationTaskAssessmentResultsOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>- The Amazon S3 bucket where the task assessment report is located. </p>
    pub bucket_name: ::std::option::Option<::std::string::String>,
    /// <p> The task assessment report. </p>
    pub replication_task_assessment_results: ::std::option::Option<::std::vec::Vec<crate::types::ReplicationTaskAssessmentResult>>,
    _request_id: Option<String>,
}
impl DescribeReplicationTaskAssessmentResultsOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>- The Amazon S3 bucket where the task assessment report is located. </p>
    pub fn bucket_name(&self) -> ::std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p> The task assessment report. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replication_task_assessment_results.is_none()`.
    pub fn replication_task_assessment_results(&self) -> &[crate::types::ReplicationTaskAssessmentResult] {
        self.replication_task_assessment_results.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeReplicationTaskAssessmentResultsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeReplicationTaskAssessmentResultsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationTaskAssessmentResultsOutput`](crate::operation::describe_replication_task_assessment_results::DescribeReplicationTaskAssessmentResultsOutput).
    pub fn builder() -> crate::operation::describe_replication_task_assessment_results::builders::DescribeReplicationTaskAssessmentResultsOutputBuilder
    {
        crate::operation::describe_replication_task_assessment_results::builders::DescribeReplicationTaskAssessmentResultsOutputBuilder::default()
    }
}

/// A builder for [`DescribeReplicationTaskAssessmentResultsOutput`](crate::operation::describe_replication_task_assessment_results::DescribeReplicationTaskAssessmentResultsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeReplicationTaskAssessmentResultsOutputBuilder {
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) replication_task_assessment_results: ::std::option::Option<::std::vec::Vec<crate::types::ReplicationTaskAssessmentResult>>,
    _request_id: Option<String>,
}
impl DescribeReplicationTaskAssessmentResultsOutputBuilder {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>- The Amazon S3 bucket where the task assessment report is located. </p>
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>- The Amazon S3 bucket where the task assessment report is located. </p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>- The Amazon S3 bucket where the task assessment report is located. </p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// Appends an item to `replication_task_assessment_results`.
    ///
    /// To override the contents of this collection use [`set_replication_task_assessment_results`](Self::set_replication_task_assessment_results).
    ///
    /// <p> The task assessment report. </p>
    pub fn replication_task_assessment_results(mut self, input: crate::types::ReplicationTaskAssessmentResult) -> Self {
        let mut v = self.replication_task_assessment_results.unwrap_or_default();
        v.push(input);
        self.replication_task_assessment_results = ::std::option::Option::Some(v);
        self
    }
    /// <p> The task assessment report. </p>
    pub fn set_replication_task_assessment_results(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ReplicationTaskAssessmentResult>>,
    ) -> Self {
        self.replication_task_assessment_results = input;
        self
    }
    /// <p> The task assessment report. </p>
    pub fn get_replication_task_assessment_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReplicationTaskAssessmentResult>> {
        &self.replication_task_assessment_results
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeReplicationTaskAssessmentResultsOutput`](crate::operation::describe_replication_task_assessment_results::DescribeReplicationTaskAssessmentResultsOutput).
    pub fn build(self) -> crate::operation::describe_replication_task_assessment_results::DescribeReplicationTaskAssessmentResultsOutput {
        crate::operation::describe_replication_task_assessment_results::DescribeReplicationTaskAssessmentResultsOutput {
            marker: self.marker,
            bucket_name: self.bucket_name,
            replication_task_assessment_results: self.replication_task_assessment_results,
            _request_id: self._request_id,
        }
    }
}
