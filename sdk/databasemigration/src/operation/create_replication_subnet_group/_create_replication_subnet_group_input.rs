// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateReplicationSubnetGroupInput {
    /// <p>The name for the replication subnet group. This value is stored as a lowercase string.</p>
    /// <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens. Must not be "default".</p>
    /// <p>Example: <code>mySubnetgroup</code> </p>
    #[doc(hidden)]
    pub replication_subnet_group_identifier: std::option::Option<std::string::String>,
    /// <p>The description for the subnet group.</p>
    #[doc(hidden)]
    pub replication_subnet_group_description: std::option::Option<std::string::String>,
    /// <p>One or more subnet IDs to be assigned to the subnet group.</p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>One or more tags to be assigned to the subnet group.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateReplicationSubnetGroupInput {
    /// <p>The name for the replication subnet group. This value is stored as a lowercase string.</p>
    /// <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens. Must not be "default".</p>
    /// <p>Example: <code>mySubnetgroup</code> </p>
    pub fn replication_subnet_group_identifier(&self) -> std::option::Option<&str> {
        self.replication_subnet_group_identifier.as_deref()
    }
    /// <p>The description for the subnet group.</p>
    pub fn replication_subnet_group_description(&self) -> std::option::Option<&str> {
        self.replication_subnet_group_description.as_deref()
    }
    /// <p>One or more subnet IDs to be assigned to the subnet group.</p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>One or more tags to be assigned to the subnet group.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateReplicationSubnetGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateReplicationSubnetGroupInput`](crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupInput).
    pub fn builder() -> crate::operation::create_replication_subnet_group::builders::CreateReplicationSubnetGroupInputBuilder{
        crate::operation::create_replication_subnet_group::builders::CreateReplicationSubnetGroupInputBuilder::default()
    }
}

/// A builder for [`CreateReplicationSubnetGroupInput`](crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateReplicationSubnetGroupInputBuilder {
    pub(crate) replication_subnet_group_identifier: std::option::Option<std::string::String>,
    pub(crate) replication_subnet_group_description: std::option::Option<std::string::String>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateReplicationSubnetGroupInputBuilder {
    /// <p>The name for the replication subnet group. This value is stored as a lowercase string.</p>
    /// <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens. Must not be "default".</p>
    /// <p>Example: <code>mySubnetgroup</code> </p>
    pub fn replication_subnet_group_identifier(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.replication_subnet_group_identifier = Some(input.into());
        self
    }
    /// <p>The name for the replication subnet group. This value is stored as a lowercase string.</p>
    /// <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens. Must not be "default".</p>
    /// <p>Example: <code>mySubnetgroup</code> </p>
    pub fn set_replication_subnet_group_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_subnet_group_identifier = input;
        self
    }
    /// <p>The description for the subnet group.</p>
    pub fn replication_subnet_group_description(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.replication_subnet_group_description = Some(input.into());
        self
    }
    /// <p>The description for the subnet group.</p>
    pub fn set_replication_subnet_group_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_subnet_group_description = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>One or more subnet IDs to be assigned to the subnet group.</p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p>One or more subnet IDs to be assigned to the subnet group.</p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags to be assigned to the subnet group.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>One or more tags to be assigned to the subnet group.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateReplicationSubnetGroupInput`](crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupInput {
                replication_subnet_group_identifier: self.replication_subnet_group_identifier,
                replication_subnet_group_description: self.replication_subnet_group_description,
                subnet_ids: self.subnet_ids,
                tags: self.tags,
            },
        )
    }
}
