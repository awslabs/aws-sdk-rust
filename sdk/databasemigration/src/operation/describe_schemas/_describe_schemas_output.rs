// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeSchemasOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>The described schema.</p>
    pub schemas: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeSchemasOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>The described schema.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.schemas.is_none()`.
    pub fn schemas(&self) -> &[::std::string::String] {
        self.schemas.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeSchemasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeSchemasOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSchemasOutput`](crate::operation::describe_schemas::DescribeSchemasOutput).
    pub fn builder() -> crate::operation::describe_schemas::builders::DescribeSchemasOutputBuilder {
        crate::operation::describe_schemas::builders::DescribeSchemasOutputBuilder::default()
    }
}

/// A builder for [`DescribeSchemasOutput`](crate::operation::describe_schemas::DescribeSchemasOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeSchemasOutputBuilder {
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) schemas: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeSchemasOutputBuilder {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Appends an item to `schemas`.
    ///
    /// To override the contents of this collection use [`set_schemas`](Self::set_schemas).
    ///
    /// <p>The described schema.</p>
    pub fn schemas(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.schemas.unwrap_or_default();
        v.push(input.into());
        self.schemas = ::std::option::Option::Some(v);
        self
    }
    /// <p>The described schema.</p>
    pub fn set_schemas(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.schemas = input;
        self
    }
    /// <p>The described schema.</p>
    pub fn get_schemas(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.schemas
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeSchemasOutput`](crate::operation::describe_schemas::DescribeSchemasOutput).
    pub fn build(self) -> crate::operation::describe_schemas::DescribeSchemasOutput {
        crate::operation::describe_schemas::DescribeSchemasOutput {
            marker: self.marker,
            schemas: self.schemas,
            _request_id: self._request_id,
        }
    }
}
