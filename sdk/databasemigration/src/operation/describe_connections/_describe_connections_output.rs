// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeConnectionsOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>A description of the connections.</p>
    #[doc(hidden)]
    pub connections: std::option::Option<std::vec::Vec<crate::types::Connection>>,
    _request_id: Option<String>,
}
impl DescribeConnectionsOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>A description of the connections.</p>
    pub fn connections(&self) -> std::option::Option<&[crate::types::Connection]> {
        self.connections.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeConnectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConnectionsOutput`](crate::operation::describe_connections::DescribeConnectionsOutput).
    pub fn builder(
    ) -> crate::operation::describe_connections::builders::DescribeConnectionsOutputBuilder {
        crate::operation::describe_connections::builders::DescribeConnectionsOutputBuilder::default(
        )
    }
}

/// A builder for [`DescribeConnectionsOutput`](crate::operation::describe_connections::DescribeConnectionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeConnectionsOutputBuilder {
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) connections: std::option::Option<std::vec::Vec<crate::types::Connection>>,
    _request_id: Option<String>,
}
impl DescribeConnectionsOutputBuilder {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Appends an item to `connections`.
    ///
    /// To override the contents of this collection use [`set_connections`](Self::set_connections).
    ///
    /// <p>A description of the connections.</p>
    pub fn connections(mut self, input: crate::types::Connection) -> Self {
        let mut v = self.connections.unwrap_or_default();
        v.push(input);
        self.connections = Some(v);
        self
    }
    /// <p>A description of the connections.</p>
    pub fn set_connections(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Connection>>,
    ) -> Self {
        self.connections = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeConnectionsOutput`](crate::operation::describe_connections::DescribeConnectionsOutput).
    pub fn build(self) -> crate::operation::describe_connections::DescribeConnectionsOutput {
        crate::operation::describe_connections::DescribeConnectionsOutput {
            marker: self.marker,
            connections: self.connections,
            _request_id: self._request_id,
        }
    }
}
