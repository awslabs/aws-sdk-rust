// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeFleetAdvisorSchemasInput {
    /// <p> If you specify any of the following filters, the output includes information for only those schemas that meet the filter criteria:</p>
    /// <ul>
    /// <li> <p> <code>complexity</code> – The schema's complexity, for example <code>Simple</code>.</p> </li>
    /// <li> <p> <code>database-id</code> – The ID of the schema's database.</p> </li>
    /// <li> <p> <code>database-ip-address</code> – The IP address of the schema's database.</p> </li>
    /// <li> <p> <code>database-name</code> – The name of the schema's database.</p> </li>
    /// <li> <p> <code>database-engine</code> – The name of the schema database's engine.</p> </li>
    /// <li> <p> <code>original-schema-name</code> – The name of the schema's database's main schema.</p> </li>
    /// <li> <p> <code>schema-id</code> – The ID of the schema, for example <code>15</code>.</p> </li>
    /// <li> <p> <code>schema-name</code> – The name of the schema.</p> </li>
    /// <li> <p> <code>server-ip-address</code> – The IP address of the schema database's server.</p> </li>
    /// </ul>
    /// <p>An example is: <code>describe-fleet-advisor-schemas --filter Name="schema-id",Values="50"</code> </p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>Sets the maximum number of records returned in the response.</p>
    #[doc(hidden)]
    pub max_records: std::option::Option<i32>,
    /// <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeFleetAdvisorSchemasInput {
    /// <p> If you specify any of the following filters, the output includes information for only those schemas that meet the filter criteria:</p>
    /// <ul>
    /// <li> <p> <code>complexity</code> – The schema's complexity, for example <code>Simple</code>.</p> </li>
    /// <li> <p> <code>database-id</code> – The ID of the schema's database.</p> </li>
    /// <li> <p> <code>database-ip-address</code> – The IP address of the schema's database.</p> </li>
    /// <li> <p> <code>database-name</code> – The name of the schema's database.</p> </li>
    /// <li> <p> <code>database-engine</code> – The name of the schema database's engine.</p> </li>
    /// <li> <p> <code>original-schema-name</code> – The name of the schema's database's main schema.</p> </li>
    /// <li> <p> <code>schema-id</code> – The ID of the schema, for example <code>15</code>.</p> </li>
    /// <li> <p> <code>schema-name</code> – The name of the schema.</p> </li>
    /// <li> <p> <code>server-ip-address</code> – The IP address of the schema database's server.</p> </li>
    /// </ul>
    /// <p>An example is: <code>describe-fleet-advisor-schemas --filter Name="schema-id",Values="50"</code> </p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p>Sets the maximum number of records returned in the response.</p>
    pub fn max_records(&self) -> std::option::Option<i32> {
        self.max_records
    }
    /// <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeFleetAdvisorSchemasInput {
    /// Creates a new builder-style object to manufacture [`DescribeFleetAdvisorSchemasInput`](crate::operation::describe_fleet_advisor_schemas::DescribeFleetAdvisorSchemasInput).
    pub fn builder() -> crate::operation::describe_fleet_advisor_schemas::builders::DescribeFleetAdvisorSchemasInputBuilder{
        crate::operation::describe_fleet_advisor_schemas::builders::DescribeFleetAdvisorSchemasInputBuilder::default()
    }
}

/// A builder for [`DescribeFleetAdvisorSchemasInput`](crate::operation::describe_fleet_advisor_schemas::DescribeFleetAdvisorSchemasInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeFleetAdvisorSchemasInputBuilder {
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_records: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl DescribeFleetAdvisorSchemasInputBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p> If you specify any of the following filters, the output includes information for only those schemas that meet the filter criteria:</p>
    /// <ul>
    /// <li> <p> <code>complexity</code> – The schema's complexity, for example <code>Simple</code>.</p> </li>
    /// <li> <p> <code>database-id</code> – The ID of the schema's database.</p> </li>
    /// <li> <p> <code>database-ip-address</code> – The IP address of the schema's database.</p> </li>
    /// <li> <p> <code>database-name</code> – The name of the schema's database.</p> </li>
    /// <li> <p> <code>database-engine</code> – The name of the schema database's engine.</p> </li>
    /// <li> <p> <code>original-schema-name</code> – The name of the schema's database's main schema.</p> </li>
    /// <li> <p> <code>schema-id</code> – The ID of the schema, for example <code>15</code>.</p> </li>
    /// <li> <p> <code>schema-name</code> – The name of the schema.</p> </li>
    /// <li> <p> <code>server-ip-address</code> – The IP address of the schema database's server.</p> </li>
    /// </ul>
    /// <p>An example is: <code>describe-fleet-advisor-schemas --filter Name="schema-id",Values="50"</code> </p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p> If you specify any of the following filters, the output includes information for only those schemas that meet the filter criteria:</p>
    /// <ul>
    /// <li> <p> <code>complexity</code> – The schema's complexity, for example <code>Simple</code>.</p> </li>
    /// <li> <p> <code>database-id</code> – The ID of the schema's database.</p> </li>
    /// <li> <p> <code>database-ip-address</code> – The IP address of the schema's database.</p> </li>
    /// <li> <p> <code>database-name</code> – The name of the schema's database.</p> </li>
    /// <li> <p> <code>database-engine</code> – The name of the schema database's engine.</p> </li>
    /// <li> <p> <code>original-schema-name</code> – The name of the schema's database's main schema.</p> </li>
    /// <li> <p> <code>schema-id</code> – The ID of the schema, for example <code>15</code>.</p> </li>
    /// <li> <p> <code>schema-name</code> – The name of the schema.</p> </li>
    /// <li> <p> <code>server-ip-address</code> – The IP address of the schema database's server.</p> </li>
    /// </ul>
    /// <p>An example is: <code>describe-fleet-advisor-schemas --filter Name="schema-id",Values="50"</code> </p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>Sets the maximum number of records returned in the response.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = Some(input);
        self
    }
    /// <p>Sets the maximum number of records returned in the response.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeFleetAdvisorSchemasInput`](crate::operation::describe_fleet_advisor_schemas::DescribeFleetAdvisorSchemasInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_fleet_advisor_schemas::DescribeFleetAdvisorSchemasInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_fleet_advisor_schemas::DescribeFleetAdvisorSchemasInput {
                filters: self.filters,
                max_records: self.max_records,
                next_token: self.next_token,
            },
        )
    }
}
