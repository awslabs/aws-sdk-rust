// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeFleetAdvisorCollectorsInput {
    /// <p> If you specify any of the following filters, the output includes information for only those collectors that meet the filter criteria:</p>
    /// <ul>
    /// <li> <p> <code>collector-referenced-id</code> – The ID of the collector agent, for example <code>d4610ac5-e323-4ad9-bc50-eaf7249dfe9d</code>.</p> </li>
    /// <li> <p> <code>collector-name</code> – The name of the collector agent.</p> </li>
    /// </ul>
    /// <p>An example is: <code>describe-fleet-advisor-collectors --filter Name="collector-referenced-id",Values="d4610ac5-e323-4ad9-bc50-eaf7249dfe9d"</code> </p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>Sets the maximum number of records returned in the response.</p>
    #[doc(hidden)]
    pub max_records: std::option::Option<i32>,
    /// <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeFleetAdvisorCollectorsInput {
    /// <p> If you specify any of the following filters, the output includes information for only those collectors that meet the filter criteria:</p>
    /// <ul>
    /// <li> <p> <code>collector-referenced-id</code> – The ID of the collector agent, for example <code>d4610ac5-e323-4ad9-bc50-eaf7249dfe9d</code>.</p> </li>
    /// <li> <p> <code>collector-name</code> – The name of the collector agent.</p> </li>
    /// </ul>
    /// <p>An example is: <code>describe-fleet-advisor-collectors --filter Name="collector-referenced-id",Values="d4610ac5-e323-4ad9-bc50-eaf7249dfe9d"</code> </p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p>Sets the maximum number of records returned in the response.</p>
    pub fn max_records(&self) -> std::option::Option<i32> {
        self.max_records
    }
    /// <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeFleetAdvisorCollectorsInput {
    /// Creates a new builder-style object to manufacture [`DescribeFleetAdvisorCollectorsInput`](crate::operation::describe_fleet_advisor_collectors::DescribeFleetAdvisorCollectorsInput).
    pub fn builder() -> crate::operation::describe_fleet_advisor_collectors::builders::DescribeFleetAdvisorCollectorsInputBuilder{
        crate::operation::describe_fleet_advisor_collectors::builders::DescribeFleetAdvisorCollectorsInputBuilder::default()
    }
}

/// A builder for [`DescribeFleetAdvisorCollectorsInput`](crate::operation::describe_fleet_advisor_collectors::DescribeFleetAdvisorCollectorsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeFleetAdvisorCollectorsInputBuilder {
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_records: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl DescribeFleetAdvisorCollectorsInputBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p> If you specify any of the following filters, the output includes information for only those collectors that meet the filter criteria:</p>
    /// <ul>
    /// <li> <p> <code>collector-referenced-id</code> – The ID of the collector agent, for example <code>d4610ac5-e323-4ad9-bc50-eaf7249dfe9d</code>.</p> </li>
    /// <li> <p> <code>collector-name</code> – The name of the collector agent.</p> </li>
    /// </ul>
    /// <p>An example is: <code>describe-fleet-advisor-collectors --filter Name="collector-referenced-id",Values="d4610ac5-e323-4ad9-bc50-eaf7249dfe9d"</code> </p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p> If you specify any of the following filters, the output includes information for only those collectors that meet the filter criteria:</p>
    /// <ul>
    /// <li> <p> <code>collector-referenced-id</code> – The ID of the collector agent, for example <code>d4610ac5-e323-4ad9-bc50-eaf7249dfe9d</code>.</p> </li>
    /// <li> <p> <code>collector-name</code> – The name of the collector agent.</p> </li>
    /// </ul>
    /// <p>An example is: <code>describe-fleet-advisor-collectors --filter Name="collector-referenced-id",Values="d4610ac5-e323-4ad9-bc50-eaf7249dfe9d"</code> </p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>Sets the maximum number of records returned in the response.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = Some(input);
        self
    }
    /// <p>Sets the maximum number of records returned in the response.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeFleetAdvisorCollectorsInput`](crate::operation::describe_fleet_advisor_collectors::DescribeFleetAdvisorCollectorsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_fleet_advisor_collectors::DescribeFleetAdvisorCollectorsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_fleet_advisor_collectors::DescribeFleetAdvisorCollectorsInput {
                filters: self.filters
                ,
                max_records: self.max_records
                ,
                next_token: self.next_token
                ,
            }
        )
    }
}
