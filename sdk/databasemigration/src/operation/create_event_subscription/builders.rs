// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_event_subscription::_create_event_subscription_output::CreateEventSubscriptionOutputBuilder;

pub use crate::operation::create_event_subscription::_create_event_subscription_input::CreateEventSubscriptionInputBuilder;

/// Fluent builder constructing a request to `CreateEventSubscription`.
///
/// <p> Creates an DMS event notification subscription. </p>
/// <p>You can specify the type of source (<code>SourceType</code>) you want to be notified of, provide a list of DMS source IDs (<code>SourceIds</code>) that triggers the events, and provide a list of event categories (<code>EventCategories</code>) for events you want to be notified of. If you specify both the <code>SourceType</code> and <code>SourceIds</code>, such as <code>SourceType = replication-instance</code> and <code>SourceIdentifier = my-replinstance</code>, you will be notified of all the replication instance events for the specified source. If you specify a <code>SourceType</code> but don't specify a <code>SourceIdentifier</code>, you receive notice of the events for that source type for all your DMS sources. If you don't specify either <code>SourceType</code> nor <code>SourceIdentifier</code>, you will be notified of events generated from all DMS sources belonging to your customer account.</p>
/// <p>For more information about DMS events, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and Notifications</a> in the <i>Database Migration Service User Guide.</i> </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateEventSubscriptionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::create_event_subscription::builders::CreateEventSubscriptionInputBuilder,
}
impl CreateEventSubscriptionFluentBuilder {
    /// Creates a new `CreateEventSubscription`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_event_subscription::CreateEventSubscription,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_event_subscription::CreateEventSubscriptionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_event_subscription::CreateEventSubscriptionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_event_subscription::CreateEventSubscriptionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the DMS event notification subscription. This name must be less than 255 characters.</p>
    pub fn subscription_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subscription_name(input.into());
        self
    }
    /// <p>The name of the DMS event notification subscription. This name must be less than 255 characters.</p>
    pub fn set_subscription_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_subscription_name(input);
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. </p>
    pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sns_topic_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. </p>
    pub fn set_sns_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sns_topic_arn(input);
        self
    }
    /// <p> The type of DMS resource that generates the events. For example, if you want to be notified of events generated by a replication instance, you set this parameter to <code>replication-instance</code>. If this value isn't specified, all events are returned. </p>
    /// <p>Valid values: <code>replication-instance</code> | <code>replication-task</code> </p>
    pub fn source_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_type(input.into());
        self
    }
    /// <p> The type of DMS resource that generates the events. For example, if you want to be notified of events generated by a replication instance, you set this parameter to <code>replication-instance</code>. If this value isn't specified, all events are returned. </p>
    /// <p>Valid values: <code>replication-instance</code> | <code>replication-task</code> </p>
    pub fn set_source_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_type(input);
        self
    }
    /// Appends an item to `EventCategories`.
    ///
    /// To override the contents of this collection use [`set_event_categories`](Self::set_event_categories).
    ///
    /// <p>A list of event categories for a source type that you want to subscribe to. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and Notifications</a> in the <i>Database Migration Service User Guide.</i> </p>
    pub fn event_categories(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.event_categories(input.into());
        self
    }
    /// <p>A list of event categories for a source type that you want to subscribe to. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and Notifications</a> in the <i>Database Migration Service User Guide.</i> </p>
    pub fn set_event_categories(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_event_categories(input);
        self
    }
    /// Appends an item to `SourceIds`.
    ///
    /// To override the contents of this collection use [`set_source_ids`](Self::set_source_ids).
    ///
    /// <p>A list of identifiers for which DMS provides notification events.</p>
    /// <p>If you don't specify a value, notifications are provided for all sources.</p>
    /// <p>If you specify multiple values, they must be of the same type. For example, if you specify a database instance ID, then all of the other values must be database instance IDs.</p>
    pub fn source_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_ids(input.into());
        self
    }
    /// <p>A list of identifiers for which DMS provides notification events.</p>
    /// <p>If you don't specify a value, notifications are provided for all sources.</p>
    /// <p>If you specify multiple values, they must be of the same type. For example, if you specify a database instance ID, then all of the other values must be database instance IDs.</p>
    pub fn set_source_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_source_ids(input);
        self
    }
    /// <p> A Boolean value; set to <code>true</code> to activate the subscription, or set to <code>false</code> to create the subscription but not activate it. </p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.enabled(input);
        self
    }
    /// <p> A Boolean value; set to <code>true</code> to activate the subscription, or set to <code>false</code> to create the subscription but not activate it. </p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enabled(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags to be assigned to the event subscription.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>One or more tags to be assigned to the event subscription.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
