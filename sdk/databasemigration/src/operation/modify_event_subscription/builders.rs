// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_event_subscription::_modify_event_subscription_output::ModifyEventSubscriptionOutputBuilder;

pub use crate::operation::modify_event_subscription::_modify_event_subscription_input::ModifyEventSubscriptionInputBuilder;

/// Fluent builder constructing a request to `ModifyEventSubscription`.
///
/// <p>Modifies an existing DMS event notification subscription. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ModifyEventSubscriptionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::modify_event_subscription::builders::ModifyEventSubscriptionInputBuilder,
}
impl ModifyEventSubscriptionFluentBuilder {
    /// Creates a new `ModifyEventSubscription`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::modify_event_subscription::ModifyEventSubscription,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::modify_event_subscription::ModifyEventSubscriptionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the DMS event notification subscription to be modified.</p>
    pub fn subscription_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subscription_name(input.into());
        self
    }
    /// <p>The name of the DMS event notification subscription to be modified.</p>
    pub fn set_subscription_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_subscription_name(input);
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
    pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sns_topic_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
    pub fn set_sns_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sns_topic_arn(input);
        self
    }
    /// <p> The type of DMS resource that generates the events you want to subscribe to. </p>
    /// <p>Valid values: replication-instance | replication-task</p>
    pub fn source_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_type(input.into());
        self
    }
    /// <p> The type of DMS resource that generates the events you want to subscribe to. </p>
    /// <p>Valid values: replication-instance | replication-task</p>
    pub fn set_source_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_type(input);
        self
    }
    /// Appends an item to `EventCategories`.
    ///
    /// To override the contents of this collection use [`set_event_categories`](Self::set_event_categories).
    ///
    /// <p> A list of event categories for a source type that you want to subscribe to. Use the <code>DescribeEventCategories</code> action to see a list of event categories. </p>
    pub fn event_categories(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.event_categories(input.into());
        self
    }
    /// <p> A list of event categories for a source type that you want to subscribe to. Use the <code>DescribeEventCategories</code> action to see a list of event categories. </p>
    pub fn set_event_categories(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_event_categories(input);
        self
    }
    /// <p> A Boolean value; set to <b>true</b> to activate the subscription. </p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.enabled(input);
        self
    }
    /// <p> A Boolean value; set to <b>true</b> to activate the subscription. </p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enabled(input);
        self
    }
}
