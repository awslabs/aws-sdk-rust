// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeInstanceProfilesOutput {
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>A description of instance profiles.</p>
    pub instance_profiles: ::std::option::Option<::std::vec::Vec<crate::types::InstanceProfile>>,
    _request_id: Option<String>,
}
impl DescribeInstanceProfilesOutput {
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>A description of instance profiles.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_profiles.is_none()`.
    pub fn instance_profiles(&self) -> &[crate::types::InstanceProfile] {
        self.instance_profiles.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeInstanceProfilesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeInstanceProfilesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceProfilesOutput`](crate::operation::describe_instance_profiles::DescribeInstanceProfilesOutput).
    pub fn builder() -> crate::operation::describe_instance_profiles::builders::DescribeInstanceProfilesOutputBuilder {
        crate::operation::describe_instance_profiles::builders::DescribeInstanceProfilesOutputBuilder::default()
    }
}

/// A builder for [`DescribeInstanceProfilesOutput`](crate::operation::describe_instance_profiles::DescribeInstanceProfilesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeInstanceProfilesOutputBuilder {
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) instance_profiles: ::std::option::Option<::std::vec::Vec<crate::types::InstanceProfile>>,
    _request_id: Option<String>,
}
impl DescribeInstanceProfilesOutputBuilder {
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Specifies the unique pagination token that makes it possible to display the next page of results. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    /// <p>If <code>Marker</code> is returned by a previous response, there are more results available. The value of <code>Marker</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token and keeping all other arguments unchanged.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Appends an item to `instance_profiles`.
    ///
    /// To override the contents of this collection use [`set_instance_profiles`](Self::set_instance_profiles).
    ///
    /// <p>A description of instance profiles.</p>
    pub fn instance_profiles(mut self, input: crate::types::InstanceProfile) -> Self {
        let mut v = self.instance_profiles.unwrap_or_default();
        v.push(input);
        self.instance_profiles = ::std::option::Option::Some(v);
        self
    }
    /// <p>A description of instance profiles.</p>
    pub fn set_instance_profiles(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InstanceProfile>>) -> Self {
        self.instance_profiles = input;
        self
    }
    /// <p>A description of instance profiles.</p>
    pub fn get_instance_profiles(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InstanceProfile>> {
        &self.instance_profiles
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeInstanceProfilesOutput`](crate::operation::describe_instance_profiles::DescribeInstanceProfilesOutput).
    pub fn build(self) -> crate::operation::describe_instance_profiles::DescribeInstanceProfilesOutput {
        crate::operation::describe_instance_profiles::DescribeInstanceProfilesOutput {
            marker: self.marker,
            instance_profiles: self.instance_profiles,
            _request_id: self._request_id,
        }
    }
}
