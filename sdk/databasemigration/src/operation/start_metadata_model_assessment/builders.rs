// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_metadata_model_assessment::_start_metadata_model_assessment_output::StartMetadataModelAssessmentOutputBuilder;

pub use crate::operation::start_metadata_model_assessment::_start_metadata_model_assessment_input::StartMetadataModelAssessmentInputBuilder;

impl crate::operation::start_metadata_model_assessment::builders::StartMetadataModelAssessmentInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_metadata_model_assessment();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartMetadataModelAssessment`.
///
/// <p>Creates a database migration assessment report by assessing the migration complexity for your source database. A database migration assessment report summarizes all of the schema conversion tasks. It also details the action items for database objects that can't be converted to the database engine of your target database instance.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartMetadataModelAssessmentFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_metadata_model_assessment::builders::StartMetadataModelAssessmentInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentOutput,
        crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError,
    > for StartMetadataModelAssessmentFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentOutput,
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartMetadataModelAssessmentFluentBuilder {
    /// Creates a new `StartMetadataModelAssessment`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartMetadataModelAssessment as a reference.
    pub fn as_input(&self) -> &crate::operation::start_metadata_model_assessment::builders::StartMetadataModelAssessmentInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_metadata_model_assessment::StartMetadataModelAssessment::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_metadata_model_assessment::StartMetadataModelAssessment::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentOutput,
        crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The migration project name or Amazon Resource Name (ARN).</p>
    pub fn migration_project_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.migration_project_identifier(input.into());
        self
    }
    /// <p>The migration project name or Amazon Resource Name (ARN).</p>
    pub fn set_migration_project_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_migration_project_identifier(input);
        self
    }
    /// <p>The migration project name or Amazon Resource Name (ARN).</p>
    pub fn get_migration_project_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_migration_project_identifier()
    }
    /// <p>A value that specifies the database objects to assess.</p>
    pub fn selection_rules(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.selection_rules(input.into());
        self
    }
    /// <p>A value that specifies the database objects to assess.</p>
    pub fn set_selection_rules(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_selection_rules(input);
        self
    }
    /// <p>A value that specifies the database objects to assess.</p>
    pub fn get_selection_rules(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_selection_rules()
    }
}
