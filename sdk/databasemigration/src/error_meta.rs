// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AccessDeniedFault(crate::error::AccessDeniedFault),
    InsufficientResourceCapacityFault(crate::error::InsufficientResourceCapacityFault),
    InvalidCertificateFault(crate::error::InvalidCertificateFault),
    InvalidResourceStateFault(crate::error::InvalidResourceStateFault),
    InvalidSubnet(crate::error::InvalidSubnet),
    KmsAccessDeniedFault(crate::error::KmsAccessDeniedFault),
    KmsDisabledFault(crate::error::KmsDisabledFault),
    KmsFault(crate::error::KmsFault),
    KmsInvalidStateFault(crate::error::KmsInvalidStateFault),
    KmsKeyNotAccessibleFault(crate::error::KmsKeyNotAccessibleFault),
    KmsNotFoundFault(crate::error::KmsNotFoundFault),
    KmsThrottlingFault(crate::error::KmsThrottlingFault),
    ReplicationSubnetGroupDoesNotCoverEnoughAZs(
        crate::error::ReplicationSubnetGroupDoesNotCoverEnoughAZs,
    ),
    ResourceAlreadyExistsFault(crate::error::ResourceAlreadyExistsFault),
    ResourceNotFoundFault(crate::error::ResourceNotFoundFault),
    ResourceQuotaExceededFault(crate::error::ResourceQuotaExceededFault),
    S3AccessDeniedFault(crate::error::S3AccessDeniedFault),
    S3ResourceNotFoundFault(crate::error::S3ResourceNotFoundFault),
    SnsInvalidTopicFault(crate::error::SnsInvalidTopicFault),
    SnsNoAuthorizationFault(crate::error::SnsNoAuthorizationFault),
    StorageQuotaExceededFault(crate::error::StorageQuotaExceededFault),
    SubnetAlreadyInUse(crate::error::SubnetAlreadyInUse),
    UpgradeDependencyFailureFault(crate::error::UpgradeDependencyFailureFault),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedFault(inner) => inner.fmt(f),
            Error::InsufficientResourceCapacityFault(inner) => inner.fmt(f),
            Error::InvalidCertificateFault(inner) => inner.fmt(f),
            Error::InvalidResourceStateFault(inner) => inner.fmt(f),
            Error::InvalidSubnet(inner) => inner.fmt(f),
            Error::KmsAccessDeniedFault(inner) => inner.fmt(f),
            Error::KmsDisabledFault(inner) => inner.fmt(f),
            Error::KmsFault(inner) => inner.fmt(f),
            Error::KmsInvalidStateFault(inner) => inner.fmt(f),
            Error::KmsKeyNotAccessibleFault(inner) => inner.fmt(f),
            Error::KmsNotFoundFault(inner) => inner.fmt(f),
            Error::KmsThrottlingFault(inner) => inner.fmt(f),
            Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ResourceNotFoundFault(inner) => inner.fmt(f),
            Error::ResourceQuotaExceededFault(inner) => inner.fmt(f),
            Error::S3AccessDeniedFault(inner) => inner.fmt(f),
            Error::S3ResourceNotFoundFault(inner) => inner.fmt(f),
            Error::SnsInvalidTopicFault(inner) => inner.fmt(f),
            Error::SnsNoAuthorizationFault(inner) => inner.fmt(f),
            Error::StorageQuotaExceededFault(inner) => inner.fmt(f),
            Error::SubnetAlreadyInUse(inner) => inner.fmt(f),
            Error::UpgradeDependencyFailureFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddTagsToResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AddTagsToResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddTagsToResourceErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ApplyPendingMaintenanceActionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ApplyPendingMaintenanceActionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ApplyPendingMaintenanceActionErrorKind::ResourceNotFoundFault(
                    inner,
                ) => Error::ResourceNotFoundFault(inner),
                crate::error::ApplyPendingMaintenanceActionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelReplicationTaskAssessmentRunError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CancelReplicationTaskAssessmentRunError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CancelReplicationTaskAssessmentRunErrorKind::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
                crate::error::CancelReplicationTaskAssessmentRunErrorKind::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
                crate::error::CancelReplicationTaskAssessmentRunErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::CancelReplicationTaskAssessmentRunErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateEndpointErrorKind::AccessDeniedFault(inner) => {
                    Error::AccessDeniedFault(inner)
                }
                crate::error::CreateEndpointErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::CreateEndpointErrorKind::KmsKeyNotAccessibleFault(inner) => {
                    Error::KmsKeyNotAccessibleFault(inner)
                }
                crate::error::CreateEndpointErrorKind::ResourceAlreadyExistsFault(inner) => {
                    Error::ResourceAlreadyExistsFault(inner)
                }
                crate::error::CreateEndpointErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::CreateEndpointErrorKind::ResourceQuotaExceededFault(inner) => {
                    Error::ResourceQuotaExceededFault(inner)
                }
                crate::error::CreateEndpointErrorKind::S3AccessDeniedFault(inner) => {
                    Error::S3AccessDeniedFault(inner)
                }
                crate::error::CreateEndpointErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEventSubscriptionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateEventSubscriptionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateEventSubscriptionErrorKind::KmsAccessDeniedFault(inner) => {
                    Error::KmsAccessDeniedFault(inner)
                }
                crate::error::CreateEventSubscriptionErrorKind::KmsDisabledFault(inner) => {
                    Error::KmsDisabledFault(inner)
                }
                crate::error::CreateEventSubscriptionErrorKind::KmsInvalidStateFault(inner) => {
                    Error::KmsInvalidStateFault(inner)
                }
                crate::error::CreateEventSubscriptionErrorKind::KmsNotFoundFault(inner) => {
                    Error::KmsNotFoundFault(inner)
                }
                crate::error::CreateEventSubscriptionErrorKind::KmsThrottlingFault(inner) => {
                    Error::KmsThrottlingFault(inner)
                }
                crate::error::CreateEventSubscriptionErrorKind::ResourceAlreadyExistsFault(
                    inner,
                ) => Error::ResourceAlreadyExistsFault(inner),
                crate::error::CreateEventSubscriptionErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::CreateEventSubscriptionErrorKind::ResourceQuotaExceededFault(
                    inner,
                ) => Error::ResourceQuotaExceededFault(inner),
                crate::error::CreateEventSubscriptionErrorKind::SnsInvalidTopicFault(inner) => {
                    Error::SnsInvalidTopicFault(inner)
                }
                crate::error::CreateEventSubscriptionErrorKind::SnsNoAuthorizationFault(inner) => {
                    Error::SnsNoAuthorizationFault(inner)
                }
                crate::error::CreateEventSubscriptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateReplicationInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateReplicationInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateReplicationInstanceErrorKind::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
                crate::error::CreateReplicationInstanceErrorKind::InsufficientResourceCapacityFault(inner) => Error::InsufficientResourceCapacityFault(inner),
                crate::error::CreateReplicationInstanceErrorKind::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
                crate::error::CreateReplicationInstanceErrorKind::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
                crate::error::CreateReplicationInstanceErrorKind::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
                crate::error::CreateReplicationInstanceErrorKind::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner),
                crate::error::CreateReplicationInstanceErrorKind::ResourceAlreadyExistsFault(inner) => Error::ResourceAlreadyExistsFault(inner),
                crate::error::CreateReplicationInstanceErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::CreateReplicationInstanceErrorKind::ResourceQuotaExceededFault(inner) => Error::ResourceQuotaExceededFault(inner),
                crate::error::CreateReplicationInstanceErrorKind::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
                crate::error::CreateReplicationInstanceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateReplicationSubnetGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateReplicationSubnetGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateReplicationSubnetGroupErrorKind::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
                crate::error::CreateReplicationSubnetGroupErrorKind::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
                crate::error::CreateReplicationSubnetGroupErrorKind::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner),
                crate::error::CreateReplicationSubnetGroupErrorKind::ResourceAlreadyExistsFault(inner) => Error::ResourceAlreadyExistsFault(inner),
                crate::error::CreateReplicationSubnetGroupErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::CreateReplicationSubnetGroupErrorKind::ResourceQuotaExceededFault(inner) => Error::ResourceQuotaExceededFault(inner),
                crate::error::CreateReplicationSubnetGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateReplicationTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateReplicationTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateReplicationTaskErrorKind::AccessDeniedFault(inner) => {
                    Error::AccessDeniedFault(inner)
                }
                crate::error::CreateReplicationTaskErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::CreateReplicationTaskErrorKind::KmsKeyNotAccessibleFault(inner) => {
                    Error::KmsKeyNotAccessibleFault(inner)
                }
                crate::error::CreateReplicationTaskErrorKind::ResourceAlreadyExistsFault(inner) => {
                    Error::ResourceAlreadyExistsFault(inner)
                }
                crate::error::CreateReplicationTaskErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::CreateReplicationTaskErrorKind::ResourceQuotaExceededFault(inner) => {
                    Error::ResourceQuotaExceededFault(inner)
                }
                crate::error::CreateReplicationTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCertificateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteCertificateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteCertificateErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::DeleteCertificateErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DeleteCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteConnectionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteConnectionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteConnectionErrorKind::AccessDeniedFault(inner) => {
                    Error::AccessDeniedFault(inner)
                }
                crate::error::DeleteConnectionErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::DeleteConnectionErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DeleteConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteEndpointErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::DeleteEndpointErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DeleteEndpointErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteEventSubscriptionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteEventSubscriptionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteEventSubscriptionErrorKind::InvalidResourceStateFault(
                    inner,
                ) => Error::InvalidResourceStateFault(inner),
                crate::error::DeleteEventSubscriptionErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DeleteEventSubscriptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteReplicationInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteReplicationInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteReplicationInstanceErrorKind::InvalidResourceStateFault(
                    inner,
                ) => Error::InvalidResourceStateFault(inner),
                crate::error::DeleteReplicationInstanceErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DeleteReplicationInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteReplicationSubnetGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteReplicationSubnetGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteReplicationSubnetGroupErrorKind::InvalidResourceStateFault(
                    inner,
                ) => Error::InvalidResourceStateFault(inner),
                crate::error::DeleteReplicationSubnetGroupErrorKind::ResourceNotFoundFault(
                    inner,
                ) => Error::ResourceNotFoundFault(inner),
                crate::error::DeleteReplicationSubnetGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteReplicationTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteReplicationTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteReplicationTaskErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::DeleteReplicationTaskErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DeleteReplicationTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteReplicationTaskAssessmentRunError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteReplicationTaskAssessmentRunError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteReplicationTaskAssessmentRunErrorKind::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
                crate::error::DeleteReplicationTaskAssessmentRunErrorKind::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
                crate::error::DeleteReplicationTaskAssessmentRunErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::DeleteReplicationTaskAssessmentRunErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAccountAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeApplicableIndividualAssessmentsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeApplicableIndividualAssessmentsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeApplicableIndividualAssessmentsErrorKind::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
                crate::error::DescribeApplicableIndividualAssessmentsErrorKind::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
                crate::error::DescribeApplicableIndividualAssessmentsErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::DescribeApplicableIndividualAssessmentsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCertificatesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeCertificatesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCertificatesErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DescribeCertificatesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeConnectionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeConnectionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeConnectionsErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DescribeConnectionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEndpointsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeEndpointsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEndpointsErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DescribeEndpointsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEndpointSettingsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEndpointSettingsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEndpointSettingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEndpointTypesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeEndpointTypesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEndpointTypesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEventCategoriesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEventCategoriesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEventCategoriesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEventsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEventSubscriptionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEventSubscriptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEventSubscriptionsErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DescribeEventSubscriptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeOrderableReplicationInstancesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeOrderableReplicationInstancesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeOrderableReplicationInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePendingMaintenanceActionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribePendingMaintenanceActionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePendingMaintenanceActionsErrorKind::ResourceNotFoundFault(
                    inner,
                ) => Error::ResourceNotFoundFault(inner),
                crate::error::DescribePendingMaintenanceActionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeRefreshSchemasStatusError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeRefreshSchemasStatusError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeRefreshSchemasStatusErrorKind::InvalidResourceStateFault(
                    inner,
                ) => Error::InvalidResourceStateFault(inner),
                crate::error::DescribeRefreshSchemasStatusErrorKind::ResourceNotFoundFault(
                    inner,
                ) => Error::ResourceNotFoundFault(inner),
                crate::error::DescribeRefreshSchemasStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReplicationInstancesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReplicationInstancesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeReplicationInstancesErrorKind::ResourceNotFoundFault(
                    inner,
                ) => Error::ResourceNotFoundFault(inner),
                crate::error::DescribeReplicationInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReplicationInstanceTaskLogsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReplicationInstanceTaskLogsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeReplicationInstanceTaskLogsErrorKind::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
                crate::error::DescribeReplicationInstanceTaskLogsErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::DescribeReplicationInstanceTaskLogsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReplicationSubnetGroupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReplicationSubnetGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeReplicationSubnetGroupsErrorKind::ResourceNotFoundFault(
                    inner,
                ) => Error::ResourceNotFoundFault(inner),
                crate::error::DescribeReplicationSubnetGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<smithy_http::result::SdkError<crate::error::DescribeReplicationTaskAssessmentResultsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeReplicationTaskAssessmentResultsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeReplicationTaskAssessmentResultsErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::DescribeReplicationTaskAssessmentResultsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReplicationTaskAssessmentRunsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeReplicationTaskAssessmentRunsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeReplicationTaskAssessmentRunsErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::DescribeReplicationTaskAssessmentRunsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DescribeReplicationTaskIndividualAssessmentsError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeReplicationTaskIndividualAssessmentsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeReplicationTaskIndividualAssessmentsErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::DescribeReplicationTaskIndividualAssessmentsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReplicationTasksError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReplicationTasksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeReplicationTasksErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DescribeReplicationTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSchemasError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeSchemasError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSchemasErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::DescribeSchemasErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DescribeSchemasErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTableStatisticsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTableStatisticsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTableStatisticsErrorKind::InvalidResourceStateFault(
                    inner,
                ) => Error::InvalidResourceStateFault(inner),
                crate::error::DescribeTableStatisticsErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::DescribeTableStatisticsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ImportCertificateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ImportCertificateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ImportCertificateErrorKind::InvalidCertificateFault(inner) => {
                    Error::InvalidCertificateFault(inner)
                }
                crate::error::ImportCertificateErrorKind::ResourceAlreadyExistsFault(inner) => {
                    Error::ResourceAlreadyExistsFault(inner)
                }
                crate::error::ImportCertificateErrorKind::ResourceQuotaExceededFault(inner) => {
                    Error::ResourceQuotaExceededFault(inner)
                }
                crate::error::ImportCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyEndpointErrorKind::AccessDeniedFault(inner) => {
                    Error::AccessDeniedFault(inner)
                }
                crate::error::ModifyEndpointErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::ModifyEndpointErrorKind::KmsKeyNotAccessibleFault(inner) => {
                    Error::KmsKeyNotAccessibleFault(inner)
                }
                crate::error::ModifyEndpointErrorKind::ResourceAlreadyExistsFault(inner) => {
                    Error::ResourceAlreadyExistsFault(inner)
                }
                crate::error::ModifyEndpointErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::ModifyEndpointErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyEventSubscriptionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyEventSubscriptionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyEventSubscriptionErrorKind::KmsAccessDeniedFault(inner) => {
                    Error::KmsAccessDeniedFault(inner)
                }
                crate::error::ModifyEventSubscriptionErrorKind::KmsDisabledFault(inner) => {
                    Error::KmsDisabledFault(inner)
                }
                crate::error::ModifyEventSubscriptionErrorKind::KmsInvalidStateFault(inner) => {
                    Error::KmsInvalidStateFault(inner)
                }
                crate::error::ModifyEventSubscriptionErrorKind::KmsNotFoundFault(inner) => {
                    Error::KmsNotFoundFault(inner)
                }
                crate::error::ModifyEventSubscriptionErrorKind::KmsThrottlingFault(inner) => {
                    Error::KmsThrottlingFault(inner)
                }
                crate::error::ModifyEventSubscriptionErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::ModifyEventSubscriptionErrorKind::ResourceQuotaExceededFault(
                    inner,
                ) => Error::ResourceQuotaExceededFault(inner),
                crate::error::ModifyEventSubscriptionErrorKind::SnsInvalidTopicFault(inner) => {
                    Error::SnsInvalidTopicFault(inner)
                }
                crate::error::ModifyEventSubscriptionErrorKind::SnsNoAuthorizationFault(inner) => {
                    Error::SnsNoAuthorizationFault(inner)
                }
                crate::error::ModifyEventSubscriptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyReplicationInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyReplicationInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyReplicationInstanceErrorKind::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
                crate::error::ModifyReplicationInstanceErrorKind::InsufficientResourceCapacityFault(inner) => Error::InsufficientResourceCapacityFault(inner),
                crate::error::ModifyReplicationInstanceErrorKind::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
                crate::error::ModifyReplicationInstanceErrorKind::ResourceAlreadyExistsFault(inner) => Error::ResourceAlreadyExistsFault(inner),
                crate::error::ModifyReplicationInstanceErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::ModifyReplicationInstanceErrorKind::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
                crate::error::ModifyReplicationInstanceErrorKind::UpgradeDependencyFailureFault(inner) => Error::UpgradeDependencyFailureFault(inner),
                crate::error::ModifyReplicationInstanceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyReplicationSubnetGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyReplicationSubnetGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyReplicationSubnetGroupErrorKind::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
                crate::error::ModifyReplicationSubnetGroupErrorKind::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
                crate::error::ModifyReplicationSubnetGroupErrorKind::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner),
                crate::error::ModifyReplicationSubnetGroupErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::ModifyReplicationSubnetGroupErrorKind::ResourceQuotaExceededFault(inner) => Error::ResourceQuotaExceededFault(inner),
                crate::error::ModifyReplicationSubnetGroupErrorKind::SubnetAlreadyInUse(inner) => Error::SubnetAlreadyInUse(inner),
                crate::error::ModifyReplicationSubnetGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyReplicationTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyReplicationTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyReplicationTaskErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::ModifyReplicationTaskErrorKind::KmsKeyNotAccessibleFault(inner) => {
                    Error::KmsKeyNotAccessibleFault(inner)
                }
                crate::error::ModifyReplicationTaskErrorKind::ResourceAlreadyExistsFault(inner) => {
                    Error::ResourceAlreadyExistsFault(inner)
                }
                crate::error::ModifyReplicationTaskErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::ModifyReplicationTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::MoveReplicationTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::MoveReplicationTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::MoveReplicationTaskErrorKind::AccessDeniedFault(inner) => {
                    Error::AccessDeniedFault(inner)
                }
                crate::error::MoveReplicationTaskErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::MoveReplicationTaskErrorKind::KmsKeyNotAccessibleFault(inner) => {
                    Error::KmsKeyNotAccessibleFault(inner)
                }
                crate::error::MoveReplicationTaskErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::MoveReplicationTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RebootReplicationInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RebootReplicationInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RebootReplicationInstanceErrorKind::InvalidResourceStateFault(
                    inner,
                ) => Error::InvalidResourceStateFault(inner),
                crate::error::RebootReplicationInstanceErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::RebootReplicationInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RefreshSchemasError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RefreshSchemasError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RefreshSchemasErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::RefreshSchemasErrorKind::KmsKeyNotAccessibleFault(inner) => {
                    Error::KmsKeyNotAccessibleFault(inner)
                }
                crate::error::RefreshSchemasErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::RefreshSchemasErrorKind::ResourceQuotaExceededFault(inner) => {
                    Error::ResourceQuotaExceededFault(inner)
                }
                crate::error::RefreshSchemasErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReloadTablesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ReloadTablesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReloadTablesErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::ReloadTablesErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::ReloadTablesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemoveTagsFromResourceErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::RemoveTagsFromResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartReplicationTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartReplicationTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartReplicationTaskErrorKind::AccessDeniedFault(inner) => {
                    Error::AccessDeniedFault(inner)
                }
                crate::error::StartReplicationTaskErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::StartReplicationTaskErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::StartReplicationTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartReplicationTaskAssessmentError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::StartReplicationTaskAssessmentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::StartReplicationTaskAssessmentErrorKind::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
                crate::error::StartReplicationTaskAssessmentErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::StartReplicationTaskAssessmentErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartReplicationTaskAssessmentRunError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::StartReplicationTaskAssessmentRunError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::StartReplicationTaskAssessmentRunErrorKind::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
                crate::error::StartReplicationTaskAssessmentRunErrorKind::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
                crate::error::StartReplicationTaskAssessmentRunErrorKind::KmsAccessDeniedFault(inner) => Error::KmsAccessDeniedFault(inner),
                crate::error::StartReplicationTaskAssessmentRunErrorKind::KmsDisabledFault(inner) => Error::KmsDisabledFault(inner),
                crate::error::StartReplicationTaskAssessmentRunErrorKind::KmsFault(inner) => Error::KmsFault(inner),
                crate::error::StartReplicationTaskAssessmentRunErrorKind::KmsInvalidStateFault(inner) => Error::KmsInvalidStateFault(inner),
                crate::error::StartReplicationTaskAssessmentRunErrorKind::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
                crate::error::StartReplicationTaskAssessmentRunErrorKind::KmsNotFoundFault(inner) => Error::KmsNotFoundFault(inner),
                crate::error::StartReplicationTaskAssessmentRunErrorKind::ResourceAlreadyExistsFault(inner) => Error::ResourceAlreadyExistsFault(inner),
                crate::error::StartReplicationTaskAssessmentRunErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::StartReplicationTaskAssessmentRunErrorKind::S3AccessDeniedFault(inner) => Error::S3AccessDeniedFault(inner),
                crate::error::StartReplicationTaskAssessmentRunErrorKind::S3ResourceNotFoundFault(inner) => Error::S3ResourceNotFoundFault(inner),
                crate::error::StartReplicationTaskAssessmentRunErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopReplicationTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopReplicationTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopReplicationTaskErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::StopReplicationTaskErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::StopReplicationTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TestConnectionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TestConnectionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TestConnectionErrorKind::AccessDeniedFault(inner) => {
                    Error::AccessDeniedFault(inner)
                }
                crate::error::TestConnectionErrorKind::InvalidResourceStateFault(inner) => {
                    Error::InvalidResourceStateFault(inner)
                }
                crate::error::TestConnectionErrorKind::KmsKeyNotAccessibleFault(inner) => {
                    Error::KmsKeyNotAccessibleFault(inner)
                }
                crate::error::TestConnectionErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::TestConnectionErrorKind::ResourceQuotaExceededFault(inner) => {
                    Error::ResourceQuotaExceededFault(inner)
                }
                crate::error::TestConnectionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
