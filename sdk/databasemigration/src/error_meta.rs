// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>DMS was denied access to the endpoint. Check that the role is correctly configured.</p>
    AccessDeniedFault(crate::error::AccessDeniedFault),
    /// <p>The specified collector doesn't exist.</p>
    CollectorNotFoundFault(crate::error::CollectorNotFoundFault),
    /// <p>There are not enough resources allocated to the database migration.</p>
    InsufficientResourceCapacityFault(crate::error::InsufficientResourceCapacityFault),
    /// <p>The certificate was not valid.</p>
    InvalidCertificateFault(crate::error::InvalidCertificateFault),
    /// <p>The action or operation requested isn't valid.</p>
    InvalidOperationFault(crate::error::InvalidOperationFault),
    /// <p>The resource is in a state that prevents it from being used for database migration.</p>
    InvalidResourceStateFault(crate::error::InvalidResourceStateFault),
    /// <p>The subnet provided is invalid.</p>
    InvalidSubnet(crate::error::InvalidSubnet),
    /// <p>The ciphertext references a key that doesn't exist or that the DMS account doesn't have access to.</p>
    KmsAccessDeniedFault(crate::error::KmsAccessDeniedFault),
    /// <p>The specified KMS key isn't enabled.</p>
    KmsDisabledFault(crate::error::KmsDisabledFault),
    /// <p>An Key Management Service (KMS) error is preventing access to KMS.</p>
    KmsFault(crate::error::KmsFault),
    /// <p>The state of the specified KMS resource isn't valid for this request.</p>
    KmsInvalidStateFault(crate::error::KmsInvalidStateFault),
    /// <p>DMS cannot access the KMS key.</p>
    KmsKeyNotAccessibleFault(crate::error::KmsKeyNotAccessibleFault),
    /// <p>The specified KMS entity or resource can't be found.</p>
    KmsNotFoundFault(crate::error::KmsNotFoundFault),
    /// <p>This request triggered KMS request throttling.</p>
    KmsThrottlingFault(crate::error::KmsThrottlingFault),
    /// <p>The replication subnet group does not cover enough Availability Zones (AZs). Edit the replication subnet group and add more AZs.</p>
    ReplicationSubnetGroupDoesNotCoverEnoughAZs(
        crate::error::ReplicationSubnetGroupDoesNotCoverEnoughAZs,
    ),
    /// <p>The resource you are attempting to create already exists.</p>
    ResourceAlreadyExistsFault(crate::error::ResourceAlreadyExistsFault),
    /// <p>The resource could not be found.</p>
    ResourceNotFoundFault(crate::error::ResourceNotFoundFault),
    /// <p>The quota for this resource quota has been exceeded.</p>
    ResourceQuotaExceededFault(crate::error::ResourceQuotaExceededFault),
    /// <p>Insufficient privileges are preventing access to an Amazon S3 object.</p>
    S3AccessDeniedFault(crate::error::S3AccessDeniedFault),
    /// <p>A specified Amazon S3 bucket, bucket folder, or other object can't be found.</p>
    S3ResourceNotFoundFault(crate::error::S3ResourceNotFoundFault),
    /// <p>The SNS topic is invalid.</p>
    SnsInvalidTopicFault(crate::error::SnsInvalidTopicFault),
    /// <p>You are not authorized for the SNS subscription.</p>
    SnsNoAuthorizationFault(crate::error::SnsNoAuthorizationFault),
    /// <p>The storage quota has been exceeded.</p>
    StorageQuotaExceededFault(crate::error::StorageQuotaExceededFault),
    /// <p>The specified subnet is already in use.</p>
    SubnetAlreadyInUse(crate::error::SubnetAlreadyInUse),
    /// <p>An upgrade dependency is preventing the database migration.</p>
    UpgradeDependencyFailureFault(crate::error::UpgradeDependencyFailureFault),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedFault(inner) => inner.fmt(f),
            Error::CollectorNotFoundFault(inner) => inner.fmt(f),
            Error::InsufficientResourceCapacityFault(inner) => inner.fmt(f),
            Error::InvalidCertificateFault(inner) => inner.fmt(f),
            Error::InvalidOperationFault(inner) => inner.fmt(f),
            Error::InvalidResourceStateFault(inner) => inner.fmt(f),
            Error::InvalidSubnet(inner) => inner.fmt(f),
            Error::KmsAccessDeniedFault(inner) => inner.fmt(f),
            Error::KmsDisabledFault(inner) => inner.fmt(f),
            Error::KmsFault(inner) => inner.fmt(f),
            Error::KmsInvalidStateFault(inner) => inner.fmt(f),
            Error::KmsKeyNotAccessibleFault(inner) => inner.fmt(f),
            Error::KmsNotFoundFault(inner) => inner.fmt(f),
            Error::KmsThrottlingFault(inner) => inner.fmt(f),
            Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ResourceNotFoundFault(inner) => inner.fmt(f),
            Error::ResourceQuotaExceededFault(inner) => inner.fmt(f),
            Error::S3AccessDeniedFault(inner) => inner.fmt(f),
            Error::S3ResourceNotFoundFault(inner) => inner.fmt(f),
            Error::SnsInvalidTopicFault(inner) => inner.fmt(f),
            Error::SnsNoAuthorizationFault(inner) => inner.fmt(f),
            Error::StorageQuotaExceededFault(inner) => inner.fmt(f),
            Error::SubnetAlreadyInUse(inner) => inner.fmt(f),
            Error::UpgradeDependencyFailureFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsToResourceError> for Error {
    fn from(err: crate::error::AddTagsToResourceError) -> Self {
        match err {
            crate::error::AddTagsToResourceError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ApplyPendingMaintenanceActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ApplyPendingMaintenanceActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ApplyPendingMaintenanceActionError> for Error {
    fn from(err: crate::error::ApplyPendingMaintenanceActionError) -> Self {
        match err {
            crate::error::ApplyPendingMaintenanceActionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::ApplyPendingMaintenanceActionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::CancelReplicationTaskAssessmentRunError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CancelReplicationTaskAssessmentRunError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelReplicationTaskAssessmentRunError> for Error {
    fn from(err: crate::error::CancelReplicationTaskAssessmentRunError) -> Self {
        match err {
            crate::error::CancelReplicationTaskAssessmentRunError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::CancelReplicationTaskAssessmentRunError::InvalidResourceStateFault(
                inner,
            ) => Error::InvalidResourceStateFault(inner),
            crate::error::CancelReplicationTaskAssessmentRunError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::CancelReplicationTaskAssessmentRunError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateEndpointError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEndpointError> for Error {
    fn from(err: crate::error::CreateEndpointError) -> Self {
        match err {
            crate::error::CreateEndpointError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::CreateEndpointError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::CreateEndpointError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::CreateEndpointError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::error::CreateEndpointError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::CreateEndpointError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::error::CreateEndpointError::S3AccessDeniedFault(inner) => {
                Error::S3AccessDeniedFault(inner)
            }
            crate::error::CreateEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateEventSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEventSubscriptionError> for Error {
    fn from(err: crate::error::CreateEventSubscriptionError) -> Self {
        match err {
            crate::error::CreateEventSubscriptionError::KmsAccessDeniedFault(inner) => {
                Error::KmsAccessDeniedFault(inner)
            }
            crate::error::CreateEventSubscriptionError::KmsDisabledFault(inner) => {
                Error::KmsDisabledFault(inner)
            }
            crate::error::CreateEventSubscriptionError::KmsInvalidStateFault(inner) => {
                Error::KmsInvalidStateFault(inner)
            }
            crate::error::CreateEventSubscriptionError::KmsNotFoundFault(inner) => {
                Error::KmsNotFoundFault(inner)
            }
            crate::error::CreateEventSubscriptionError::KmsThrottlingFault(inner) => {
                Error::KmsThrottlingFault(inner)
            }
            crate::error::CreateEventSubscriptionError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::error::CreateEventSubscriptionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::CreateEventSubscriptionError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SnsInvalidTopicFault(inner) => {
                Error::SnsInvalidTopicFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SnsNoAuthorizationFault(inner) => {
                Error::SnsNoAuthorizationFault(inner)
            }
            crate::error::CreateEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFleetAdvisorCollectorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateFleetAdvisorCollectorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFleetAdvisorCollectorError> for Error {
    fn from(err: crate::error::CreateFleetAdvisorCollectorError) -> Self {
        match err {
            crate::error::CreateFleetAdvisorCollectorError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::CreateFleetAdvisorCollectorError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::CreateFleetAdvisorCollectorError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::error::CreateFleetAdvisorCollectorError::S3AccessDeniedFault(inner) => {
                Error::S3AccessDeniedFault(inner)
            }
            crate::error::CreateFleetAdvisorCollectorError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::error::CreateFleetAdvisorCollectorError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateReplicationInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateReplicationInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateReplicationInstanceError> for Error {
    fn from(err: crate::error::CreateReplicationInstanceError) -> Self {
        match err {
            crate::error::CreateReplicationInstanceError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::error::CreateReplicationInstanceError::InsufficientResourceCapacityFault(inner) => Error::InsufficientResourceCapacityFault(inner),
            crate::error::CreateReplicationInstanceError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::error::CreateReplicationInstanceError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::CreateReplicationInstanceError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::CreateReplicationInstanceError::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner),
            crate::error::CreateReplicationInstanceError::ResourceAlreadyExistsFault(inner) => Error::ResourceAlreadyExistsFault(inner),
            crate::error::CreateReplicationInstanceError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::error::CreateReplicationInstanceError::ResourceQuotaExceededFault(inner) => Error::ResourceQuotaExceededFault(inner),
            crate::error::CreateReplicationInstanceError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::error::CreateReplicationInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateReplicationSubnetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateReplicationSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateReplicationSubnetGroupError> for Error {
    fn from(err: crate::error::CreateReplicationSubnetGroupError) -> Self {
        match err {
            crate::error::CreateReplicationSubnetGroupError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::error::CreateReplicationSubnetGroupError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::CreateReplicationSubnetGroupError::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner),
            crate::error::CreateReplicationSubnetGroupError::ResourceAlreadyExistsFault(inner) => Error::ResourceAlreadyExistsFault(inner),
            crate::error::CreateReplicationSubnetGroupError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::error::CreateReplicationSubnetGroupError::ResourceQuotaExceededFault(inner) => Error::ResourceQuotaExceededFault(inner),
            crate::error::CreateReplicationSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateReplicationTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateReplicationTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateReplicationTaskError> for Error {
    fn from(err: crate::error::CreateReplicationTaskError) -> Self {
        match err {
            crate::error::CreateReplicationTaskError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::CreateReplicationTaskError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::CreateReplicationTaskError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::CreateReplicationTaskError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::error::CreateReplicationTaskError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::CreateReplicationTaskError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::error::CreateReplicationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCertificateError> for Error {
    fn from(err: crate::error::DeleteCertificateError) -> Self {
        match err {
            crate::error::DeleteCertificateError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DeleteCertificateError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DeleteCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteConnectionError> for Error {
    fn from(err: crate::error::DeleteConnectionError) -> Self {
        match err {
            crate::error::DeleteConnectionError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::DeleteConnectionError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DeleteConnectionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DeleteConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteEndpointError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEndpointError> for Error {
    fn from(err: crate::error::DeleteEndpointError) -> Self {
        match err {
            crate::error::DeleteEndpointError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DeleteEndpointError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DeleteEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEventSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEventSubscriptionError> for Error {
    fn from(err: crate::error::DeleteEventSubscriptionError) -> Self {
        match err {
            crate::error::DeleteEventSubscriptionError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DeleteEventSubscriptionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DeleteEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFleetAdvisorCollectorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteFleetAdvisorCollectorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFleetAdvisorCollectorError> for Error {
    fn from(err: crate::error::DeleteFleetAdvisorCollectorError) -> Self {
        match err {
            crate::error::DeleteFleetAdvisorCollectorError::CollectorNotFoundFault(inner) => {
                Error::CollectorNotFoundFault(inner)
            }
            crate::error::DeleteFleetAdvisorCollectorError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DeleteFleetAdvisorCollectorError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFleetAdvisorDatabasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteFleetAdvisorDatabasesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFleetAdvisorDatabasesError> for Error {
    fn from(err: crate::error::DeleteFleetAdvisorDatabasesError) -> Self {
        match err {
            crate::error::DeleteFleetAdvisorDatabasesError::InvalidOperationFault(inner) => {
                Error::InvalidOperationFault(inner)
            }
            crate::error::DeleteFleetAdvisorDatabasesError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DeleteFleetAdvisorDatabasesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteReplicationInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteReplicationInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteReplicationInstanceError> for Error {
    fn from(err: crate::error::DeleteReplicationInstanceError) -> Self {
        match err {
            crate::error::DeleteReplicationInstanceError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DeleteReplicationInstanceError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DeleteReplicationInstanceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteReplicationSubnetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteReplicationSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteReplicationSubnetGroupError> for Error {
    fn from(err: crate::error::DeleteReplicationSubnetGroupError) -> Self {
        match err {
            crate::error::DeleteReplicationSubnetGroupError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DeleteReplicationSubnetGroupError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DeleteReplicationSubnetGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteReplicationTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteReplicationTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteReplicationTaskError> for Error {
    fn from(err: crate::error::DeleteReplicationTaskError) -> Self {
        match err {
            crate::error::DeleteReplicationTaskError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DeleteReplicationTaskError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DeleteReplicationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DeleteReplicationTaskAssessmentRunError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteReplicationTaskAssessmentRunError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteReplicationTaskAssessmentRunError> for Error {
    fn from(err: crate::error::DeleteReplicationTaskAssessmentRunError) -> Self {
        match err {
            crate::error::DeleteReplicationTaskAssessmentRunError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::DeleteReplicationTaskAssessmentRunError::InvalidResourceStateFault(
                inner,
            ) => Error::InvalidResourceStateFault(inner),
            crate::error::DeleteReplicationTaskAssessmentRunError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DeleteReplicationTaskAssessmentRunError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAccountAttributesError> for Error {
    fn from(err: crate::error::DescribeAccountAttributesError) -> Self {
        match err {
            crate::error::DescribeAccountAttributesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeApplicableIndividualAssessmentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeApplicableIndividualAssessmentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeApplicableIndividualAssessmentsError> for Error {
    fn from(err: crate::error::DescribeApplicableIndividualAssessmentsError) -> Self {
        match err {
            crate::error::DescribeApplicableIndividualAssessmentsError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::error::DescribeApplicableIndividualAssessmentsError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::error::DescribeApplicableIndividualAssessmentsError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::error::DescribeApplicableIndividualAssessmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCertificatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCertificatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCertificatesError> for Error {
    fn from(err: crate::error::DescribeCertificatesError) -> Self {
        match err {
            crate::error::DescribeCertificatesError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribeCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeConnectionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeConnectionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConnectionsError> for Error {
    fn from(err: crate::error::DescribeConnectionsError) -> Self {
        match err {
            crate::error::DescribeConnectionsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribeConnectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEndpointsError> for Error {
    fn from(err: crate::error::DescribeEndpointsError) -> Self {
        match err {
            crate::error::DescribeEndpointsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribeEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEndpointSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEndpointSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEndpointSettingsError> for Error {
    fn from(err: crate::error::DescribeEndpointSettingsError) -> Self {
        match err {
            crate::error::DescribeEndpointSettingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEndpointTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEndpointTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEndpointTypesError> for Error {
    fn from(err: crate::error::DescribeEndpointTypesError) -> Self {
        match err {
            crate::error::DescribeEndpointTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventCategoriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEventCategoriesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventCategoriesError> for Error {
    fn from(err: crate::error::DescribeEventCategoriesError) -> Self {
        match err {
            crate::error::DescribeEventCategoriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeEventsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventsError> for Error {
    fn from(err: crate::error::DescribeEventsError) -> Self {
        match err {
            crate::error::DescribeEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventSubscriptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEventSubscriptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventSubscriptionsError> for Error {
    fn from(err: crate::error::DescribeEventSubscriptionsError) -> Self {
        match err {
            crate::error::DescribeEventSubscriptionsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribeEventSubscriptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetAdvisorCollectorsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeFleetAdvisorCollectorsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetAdvisorCollectorsError> for Error {
    fn from(err: crate::error::DescribeFleetAdvisorCollectorsError) -> Self {
        match err {
            crate::error::DescribeFleetAdvisorCollectorsError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DescribeFleetAdvisorCollectorsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetAdvisorDatabasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeFleetAdvisorDatabasesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetAdvisorDatabasesError> for Error {
    fn from(err: crate::error::DescribeFleetAdvisorDatabasesError) -> Self {
        match err {
            crate::error::DescribeFleetAdvisorDatabasesError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DescribeFleetAdvisorDatabasesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetAdvisorLsaAnalysisError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeFleetAdvisorLsaAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetAdvisorLsaAnalysisError> for Error {
    fn from(err: crate::error::DescribeFleetAdvisorLsaAnalysisError) -> Self {
        match err {
            crate::error::DescribeFleetAdvisorLsaAnalysisError::InvalidResourceStateFault(
                inner,
            ) => Error::InvalidResourceStateFault(inner),
            crate::error::DescribeFleetAdvisorLsaAnalysisError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeFleetAdvisorSchemaObjectSummaryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeFleetAdvisorSchemaObjectSummaryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetAdvisorSchemaObjectSummaryError> for Error {
    fn from(err: crate::error::DescribeFleetAdvisorSchemaObjectSummaryError) -> Self {
        match err {
            crate::error::DescribeFleetAdvisorSchemaObjectSummaryError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::error::DescribeFleetAdvisorSchemaObjectSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetAdvisorSchemasError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeFleetAdvisorSchemasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetAdvisorSchemasError> for Error {
    fn from(err: crate::error::DescribeFleetAdvisorSchemasError) -> Self {
        match err {
            crate::error::DescribeFleetAdvisorSchemasError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DescribeFleetAdvisorSchemasError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeOrderableReplicationInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeOrderableReplicationInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOrderableReplicationInstancesError> for Error {
    fn from(err: crate::error::DescribeOrderableReplicationInstancesError) -> Self {
        match err {
            crate::error::DescribeOrderableReplicationInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribePendingMaintenanceActionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribePendingMaintenanceActionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePendingMaintenanceActionsError> for Error {
    fn from(err: crate::error::DescribePendingMaintenanceActionsError) -> Self {
        match err {
            crate::error::DescribePendingMaintenanceActionsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribePendingMaintenanceActionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRefreshSchemasStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRefreshSchemasStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRefreshSchemasStatusError> for Error {
    fn from(err: crate::error::DescribeRefreshSchemasStatusError) -> Self {
        match err {
            crate::error::DescribeRefreshSchemasStatusError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DescribeRefreshSchemasStatusError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribeRefreshSchemasStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeReplicationInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeReplicationInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReplicationInstancesError> for Error {
    fn from(err: crate::error::DescribeReplicationInstancesError) -> Self {
        match err {
            crate::error::DescribeReplicationInstancesError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribeReplicationInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeReplicationInstanceTaskLogsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeReplicationInstanceTaskLogsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReplicationInstanceTaskLogsError> for Error {
    fn from(err: crate::error::DescribeReplicationInstanceTaskLogsError) -> Self {
        match err {
            crate::error::DescribeReplicationInstanceTaskLogsError::InvalidResourceStateFault(
                inner,
            ) => Error::InvalidResourceStateFault(inner),
            crate::error::DescribeReplicationInstanceTaskLogsError::ResourceNotFoundFault(
                inner,
            ) => Error::ResourceNotFoundFault(inner),
            crate::error::DescribeReplicationInstanceTaskLogsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeReplicationSubnetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeReplicationSubnetGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReplicationSubnetGroupsError> for Error {
    fn from(err: crate::error::DescribeReplicationSubnetGroupsError) -> Self {
        match err {
            crate::error::DescribeReplicationSubnetGroupsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribeReplicationSubnetGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeReplicationTaskAssessmentResultsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeReplicationTaskAssessmentResultsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReplicationTaskAssessmentResultsError> for Error {
    fn from(err: crate::error::DescribeReplicationTaskAssessmentResultsError) -> Self {
        match err {
            crate::error::DescribeReplicationTaskAssessmentResultsError::ResourceNotFoundFault(
                inner,
            ) => Error::ResourceNotFoundFault(inner),
            crate::error::DescribeReplicationTaskAssessmentResultsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeReplicationTaskAssessmentRunsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeReplicationTaskAssessmentRunsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReplicationTaskAssessmentRunsError> for Error {
    fn from(err: crate::error::DescribeReplicationTaskAssessmentRunsError) -> Self {
        match err {
            crate::error::DescribeReplicationTaskAssessmentRunsError::ResourceNotFoundFault(
                inner,
            ) => Error::ResourceNotFoundFault(inner),
            crate::error::DescribeReplicationTaskAssessmentRunsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeReplicationTaskIndividualAssessmentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeReplicationTaskIndividualAssessmentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReplicationTaskIndividualAssessmentsError> for Error {
    fn from(err: crate::error::DescribeReplicationTaskIndividualAssessmentsError) -> Self {
        match err {
            crate::error::DescribeReplicationTaskIndividualAssessmentsError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::error::DescribeReplicationTaskIndividualAssessmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeReplicationTasksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeReplicationTasksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReplicationTasksError> for Error {
    fn from(err: crate::error::DescribeReplicationTasksError) -> Self {
        match err {
            crate::error::DescribeReplicationTasksError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribeReplicationTasksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSchemasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeSchemasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSchemasError> for Error {
    fn from(err: crate::error::DescribeSchemasError) -> Self {
        match err {
            crate::error::DescribeSchemasError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DescribeSchemasError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribeSchemasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTableStatisticsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTableStatisticsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTableStatisticsError> for Error {
    fn from(err: crate::error::DescribeTableStatisticsError) -> Self {
        match err {
            crate::error::DescribeTableStatisticsError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::DescribeTableStatisticsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribeTableStatisticsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ImportCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportCertificateError> for Error {
    fn from(err: crate::error::ImportCertificateError) -> Self {
        match err {
            crate::error::ImportCertificateError::InvalidCertificateFault(inner) => {
                Error::InvalidCertificateFault(inner)
            }
            crate::error::ImportCertificateError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::error::ImportCertificateError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::error::ImportCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyEndpointError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyEndpointError> for Error {
    fn from(err: crate::error::ModifyEndpointError) -> Self {
        match err {
            crate::error::ModifyEndpointError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::ModifyEndpointError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::ModifyEndpointError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::ModifyEndpointError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::error::ModifyEndpointError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::ModifyEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyEventSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyEventSubscriptionError> for Error {
    fn from(err: crate::error::ModifyEventSubscriptionError) -> Self {
        match err {
            crate::error::ModifyEventSubscriptionError::KmsAccessDeniedFault(inner) => {
                Error::KmsAccessDeniedFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::KmsDisabledFault(inner) => {
                Error::KmsDisabledFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::KmsInvalidStateFault(inner) => {
                Error::KmsInvalidStateFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::KmsNotFoundFault(inner) => {
                Error::KmsNotFoundFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::KmsThrottlingFault(inner) => {
                Error::KmsThrottlingFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::SnsInvalidTopicFault(inner) => {
                Error::SnsInvalidTopicFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::SnsNoAuthorizationFault(inner) => {
                Error::SnsNoAuthorizationFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyReplicationInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyReplicationInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyReplicationInstanceError> for Error {
    fn from(err: crate::error::ModifyReplicationInstanceError) -> Self {
        match err {
            crate::error::ModifyReplicationInstanceError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::ModifyReplicationInstanceError::InsufficientResourceCapacityFault(
                inner,
            ) => Error::InsufficientResourceCapacityFault(inner),
            crate::error::ModifyReplicationInstanceError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::ModifyReplicationInstanceError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::error::ModifyReplicationInstanceError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::ModifyReplicationInstanceError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::ModifyReplicationInstanceError::UpgradeDependencyFailureFault(inner) => {
                Error::UpgradeDependencyFailureFault(inner)
            }
            crate::error::ModifyReplicationInstanceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyReplicationSubnetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyReplicationSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyReplicationSubnetGroupError> for Error {
    fn from(err: crate::error::ModifyReplicationSubnetGroupError) -> Self {
        match err {
            crate::error::ModifyReplicationSubnetGroupError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::error::ModifyReplicationSubnetGroupError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::ModifyReplicationSubnetGroupError::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner),
            crate::error::ModifyReplicationSubnetGroupError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::error::ModifyReplicationSubnetGroupError::ResourceQuotaExceededFault(inner) => Error::ResourceQuotaExceededFault(inner),
            crate::error::ModifyReplicationSubnetGroupError::SubnetAlreadyInUse(inner) => Error::SubnetAlreadyInUse(inner),
            crate::error::ModifyReplicationSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyReplicationTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyReplicationTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyReplicationTaskError> for Error {
    fn from(err: crate::error::ModifyReplicationTaskError) -> Self {
        match err {
            crate::error::ModifyReplicationTaskError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::ModifyReplicationTaskError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::ModifyReplicationTaskError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::error::ModifyReplicationTaskError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::ModifyReplicationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::MoveReplicationTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::MoveReplicationTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::MoveReplicationTaskError> for Error {
    fn from(err: crate::error::MoveReplicationTaskError) -> Self {
        match err {
            crate::error::MoveReplicationTaskError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::MoveReplicationTaskError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::MoveReplicationTaskError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::MoveReplicationTaskError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::MoveReplicationTaskError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::error::MoveReplicationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RebootReplicationInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RebootReplicationInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RebootReplicationInstanceError> for Error {
    fn from(err: crate::error::RebootReplicationInstanceError) -> Self {
        match err {
            crate::error::RebootReplicationInstanceError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::RebootReplicationInstanceError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::RebootReplicationInstanceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RefreshSchemasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RefreshSchemasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RefreshSchemasError> for Error {
    fn from(err: crate::error::RefreshSchemasError) -> Self {
        match err {
            crate::error::RefreshSchemasError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::RefreshSchemasError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::RefreshSchemasError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::RefreshSchemasError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::error::RefreshSchemasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ReloadTablesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ReloadTablesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ReloadTablesError> for Error {
    fn from(err: crate::error::ReloadTablesError) -> Self {
        match err {
            crate::error::ReloadTablesError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::ReloadTablesError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::ReloadTablesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsFromResourceError> for Error {
    fn from(err: crate::error::RemoveTagsFromResourceError) -> Self {
        match err {
            crate::error::RemoveTagsFromResourceError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RunFleetAdvisorLsaAnalysisError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RunFleetAdvisorLsaAnalysisError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RunFleetAdvisorLsaAnalysisError> for Error {
    fn from(err: crate::error::RunFleetAdvisorLsaAnalysisError) -> Self {
        match err {
            crate::error::RunFleetAdvisorLsaAnalysisError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::RunFleetAdvisorLsaAnalysisError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::RunFleetAdvisorLsaAnalysisError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartReplicationTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartReplicationTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartReplicationTaskError> for Error {
    fn from(err: crate::error::StartReplicationTaskError) -> Self {
        match err {
            crate::error::StartReplicationTaskError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::StartReplicationTaskError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::StartReplicationTaskError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::StartReplicationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::StartReplicationTaskAssessmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StartReplicationTaskAssessmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartReplicationTaskAssessmentError> for Error {
    fn from(err: crate::error::StartReplicationTaskAssessmentError) -> Self {
        match err {
            crate::error::StartReplicationTaskAssessmentError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::StartReplicationTaskAssessmentError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::StartReplicationTaskAssessmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::StartReplicationTaskAssessmentRunError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StartReplicationTaskAssessmentRunError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartReplicationTaskAssessmentRunError> for Error {
    fn from(err: crate::error::StartReplicationTaskAssessmentRunError) -> Self {
        match err {
            crate::error::StartReplicationTaskAssessmentRunError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::StartReplicationTaskAssessmentRunError::InvalidResourceStateFault(
                inner,
            ) => Error::InvalidResourceStateFault(inner),
            crate::error::StartReplicationTaskAssessmentRunError::KmsAccessDeniedFault(inner) => {
                Error::KmsAccessDeniedFault(inner)
            }
            crate::error::StartReplicationTaskAssessmentRunError::KmsDisabledFault(inner) => {
                Error::KmsDisabledFault(inner)
            }
            crate::error::StartReplicationTaskAssessmentRunError::KmsFault(inner) => {
                Error::KmsFault(inner)
            }
            crate::error::StartReplicationTaskAssessmentRunError::KmsInvalidStateFault(inner) => {
                Error::KmsInvalidStateFault(inner)
            }
            crate::error::StartReplicationTaskAssessmentRunError::KmsKeyNotAccessibleFault(
                inner,
            ) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::StartReplicationTaskAssessmentRunError::KmsNotFoundFault(inner) => {
                Error::KmsNotFoundFault(inner)
            }
            crate::error::StartReplicationTaskAssessmentRunError::ResourceAlreadyExistsFault(
                inner,
            ) => Error::ResourceAlreadyExistsFault(inner),
            crate::error::StartReplicationTaskAssessmentRunError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::StartReplicationTaskAssessmentRunError::S3AccessDeniedFault(inner) => {
                Error::S3AccessDeniedFault(inner)
            }
            crate::error::StartReplicationTaskAssessmentRunError::S3ResourceNotFoundFault(
                inner,
            ) => Error::S3ResourceNotFoundFault(inner),
            crate::error::StartReplicationTaskAssessmentRunError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopReplicationTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopReplicationTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopReplicationTaskError> for Error {
    fn from(err: crate::error::StopReplicationTaskError) -> Self {
        match err {
            crate::error::StopReplicationTaskError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::StopReplicationTaskError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::StopReplicationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TestConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TestConnectionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TestConnectionError> for Error {
    fn from(err: crate::error::TestConnectionError) -> Self {
        match err {
            crate::error::TestConnectionError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::TestConnectionError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::error::TestConnectionError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::TestConnectionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::TestConnectionError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::error::TestConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateSubscriptionsToEventBridgeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateSubscriptionsToEventBridgeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSubscriptionsToEventBridgeError> for Error {
    fn from(err: crate::error::UpdateSubscriptionsToEventBridgeError) -> Self {
        match err {
            crate::error::UpdateSubscriptionsToEventBridgeError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::error::UpdateSubscriptionsToEventBridgeError::InvalidResourceStateFault(
                inner,
            ) => Error::InvalidResourceStateFault(inner),
            crate::error::UpdateSubscriptionsToEventBridgeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedFault(e) => e.request_id(),
            Self::CollectorNotFoundFault(e) => e.request_id(),
            Self::InsufficientResourceCapacityFault(e) => e.request_id(),
            Self::InvalidCertificateFault(e) => e.request_id(),
            Self::InvalidOperationFault(e) => e.request_id(),
            Self::InvalidResourceStateFault(e) => e.request_id(),
            Self::InvalidSubnet(e) => e.request_id(),
            Self::KmsAccessDeniedFault(e) => e.request_id(),
            Self::KmsDisabledFault(e) => e.request_id(),
            Self::KmsFault(e) => e.request_id(),
            Self::KmsInvalidStateFault(e) => e.request_id(),
            Self::KmsKeyNotAccessibleFault(e) => e.request_id(),
            Self::KmsNotFoundFault(e) => e.request_id(),
            Self::KmsThrottlingFault(e) => e.request_id(),
            Self::ReplicationSubnetGroupDoesNotCoverEnoughAZs(e) => e.request_id(),
            Self::ResourceAlreadyExistsFault(e) => e.request_id(),
            Self::ResourceNotFoundFault(e) => e.request_id(),
            Self::ResourceQuotaExceededFault(e) => e.request_id(),
            Self::S3AccessDeniedFault(e) => e.request_id(),
            Self::S3ResourceNotFoundFault(e) => e.request_id(),
            Self::SnsInvalidTopicFault(e) => e.request_id(),
            Self::SnsNoAuthorizationFault(e) => e.request_id(),
            Self::StorageQuotaExceededFault(e) => e.request_id(),
            Self::SubnetAlreadyInUse(e) => e.request_id(),
            Self::UpgradeDependencyFailureFault(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
