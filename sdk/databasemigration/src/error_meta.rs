// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>DMS was denied access to the endpoint. Check that the role is correctly configured.</p>
    AccessDeniedFault(crate::types::error::AccessDeniedFault),
    /// <p>The specified collector doesn't exist.</p>
    CollectorNotFoundFault(crate::types::error::CollectorNotFoundFault),
    /// <p>There are not enough resources allocated to the database migration.</p>
    InsufficientResourceCapacityFault(crate::types::error::InsufficientResourceCapacityFault),
    /// <p>The certificate was not valid.</p>
    InvalidCertificateFault(crate::types::error::InvalidCertificateFault),
    /// <p>The action or operation requested isn't valid.</p>
    InvalidOperationFault(crate::types::error::InvalidOperationFault),
    /// <p>The resource is in a state that prevents it from being used for database migration.</p>
    InvalidResourceStateFault(crate::types::error::InvalidResourceStateFault),
    /// <p>The subnet provided isn't valid.</p>
    InvalidSubnet(crate::types::error::InvalidSubnet),
    /// <p>The ciphertext references a key that doesn't exist or that the DMS account doesn't have access to.</p>
    KmsAccessDeniedFault(crate::types::error::KmsAccessDeniedFault),
    /// <p>The specified KMS key isn't enabled.</p>
    KmsDisabledFault(crate::types::error::KmsDisabledFault),
    /// <p>An Key Management Service (KMS) error is preventing access to KMS.</p>
    KmsFault(crate::types::error::KmsFault),
    /// <p>The state of the specified KMS resource isn't valid for this request.</p>
    KmsInvalidStateFault(crate::types::error::KmsInvalidStateFault),
    /// <p>DMS cannot access the KMS key.</p>
    KmsKeyNotAccessibleFault(crate::types::error::KmsKeyNotAccessibleFault),
    /// <p>The specified KMS entity or resource can't be found.</p>
    KmsNotFoundFault(crate::types::error::KmsNotFoundFault),
    /// <p>This request triggered KMS request throttling.</p>
    KmsThrottlingFault(crate::types::error::KmsThrottlingFault),
    /// <p>The replication subnet group does not cover enough Availability Zones (AZs). Edit the replication subnet group and add more AZs.</p>
    ReplicationSubnetGroupDoesNotCoverEnoughAZs(crate::types::error::ReplicationSubnetGroupDoesNotCoverEnoughAZs),
    /// <p>The resource you are attempting to create already exists.</p>
    ResourceAlreadyExistsFault(crate::types::error::ResourceAlreadyExistsFault),
    /// <p>The resource could not be found.</p>
    ResourceNotFoundFault(crate::types::error::ResourceNotFoundFault),
    /// <p>The quota for this resource quota has been exceeded.</p>
    ResourceQuotaExceededFault(crate::types::error::ResourceQuotaExceededFault),
    /// <p>Insufficient privileges are preventing access to an Amazon S3 object.</p>
    S3AccessDeniedFault(crate::types::error::S3AccessDeniedFault),
    /// <p>A specified Amazon S3 bucket, bucket folder, or other object can't be found.</p>
    S3ResourceNotFoundFault(crate::types::error::S3ResourceNotFoundFault),
    /// <p>The SNS topic is invalid.</p>
    SnsInvalidTopicFault(crate::types::error::SnsInvalidTopicFault),
    /// <p>You are not authorized for the SNS subscription.</p>
    SnsNoAuthorizationFault(crate::types::error::SnsNoAuthorizationFault),
    /// <p>The storage quota has been exceeded.</p>
    StorageQuotaExceededFault(crate::types::error::StorageQuotaExceededFault),
    /// <p>The specified subnet is already in use.</p>
    SubnetAlreadyInUse(crate::types::error::SubnetAlreadyInUse),
    /// <p>An upgrade dependency is preventing the database migration.</p>
    UpgradeDependencyFailureFault(crate::types::error::UpgradeDependencyFailureFault),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedFault(inner) => inner.fmt(f),
            Error::CollectorNotFoundFault(inner) => inner.fmt(f),
            Error::InsufficientResourceCapacityFault(inner) => inner.fmt(f),
            Error::InvalidCertificateFault(inner) => inner.fmt(f),
            Error::InvalidOperationFault(inner) => inner.fmt(f),
            Error::InvalidResourceStateFault(inner) => inner.fmt(f),
            Error::InvalidSubnet(inner) => inner.fmt(f),
            Error::KmsAccessDeniedFault(inner) => inner.fmt(f),
            Error::KmsDisabledFault(inner) => inner.fmt(f),
            Error::KmsFault(inner) => inner.fmt(f),
            Error::KmsInvalidStateFault(inner) => inner.fmt(f),
            Error::KmsKeyNotAccessibleFault(inner) => inner.fmt(f),
            Error::KmsNotFoundFault(inner) => inner.fmt(f),
            Error::KmsThrottlingFault(inner) => inner.fmt(f),
            Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ResourceNotFoundFault(inner) => inner.fmt(f),
            Error::ResourceQuotaExceededFault(inner) => inner.fmt(f),
            Error::S3AccessDeniedFault(inner) => inner.fmt(f),
            Error::S3ResourceNotFoundFault(inner) => inner.fmt(f),
            Error::SnsInvalidTopicFault(inner) => inner.fmt(f),
            Error::SnsNoAuthorizationFault(inner) => inner.fmt(f),
            Error::StorageQuotaExceededFault(inner) => inner.fmt(f),
            Error::SubnetAlreadyInUse(inner) => inner.fmt(f),
            Error::UpgradeDependencyFailureFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_tags_to_resource::AddTagsToResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_tags_to_resource::AddTagsToResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_tags_to_resource::AddTagsToResourceError> for Error {
    fn from(err: crate::operation::add_tags_to_resource::AddTagsToResourceError) -> Self {
        match err {
            crate::operation::add_tags_to_resource::AddTagsToResourceError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::add_tags_to_resource::AddTagsToResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError> for Error {
    fn from(err: crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError) -> Self {
        match err {
            crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_start_recommendations::BatchStartRecommendationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_start_recommendations::BatchStartRecommendationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_start_recommendations::BatchStartRecommendationsError> for Error {
    fn from(err: crate::operation::batch_start_recommendations::BatchStartRecommendationsError) -> Self {
        match err {
            crate::operation::batch_start_recommendations::BatchStartRecommendationsError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::batch_start_recommendations::BatchStartRecommendationsError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::batch_start_recommendations::BatchStartRecommendationsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::batch_start_recommendations::BatchStartRecommendationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::cancel_replication_task_assessment_run::CancelReplicationTaskAssessmentRunError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::cancel_replication_task_assessment_run::CancelReplicationTaskAssessmentRunError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_replication_task_assessment_run::CancelReplicationTaskAssessmentRunError> for Error {
    fn from(err: crate::operation::cancel_replication_task_assessment_run::CancelReplicationTaskAssessmentRunError) -> Self {
        match err {
            crate::operation::cancel_replication_task_assessment_run::CancelReplicationTaskAssessmentRunError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::cancel_replication_task_assessment_run::CancelReplicationTaskAssessmentRunError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::cancel_replication_task_assessment_run::CancelReplicationTaskAssessmentRunError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::cancel_replication_task_assessment_run::CancelReplicationTaskAssessmentRunError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_provider::CreateDataProviderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_provider::CreateDataProviderError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_data_provider::CreateDataProviderError> for Error {
    fn from(err: crate::operation::create_data_provider::CreateDataProviderError) -> Self {
        match err {
            crate::operation::create_data_provider::CreateDataProviderError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::create_data_provider::CreateDataProviderError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::create_data_provider::CreateDataProviderError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::create_data_provider::CreateDataProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_endpoint::CreateEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_endpoint::CreateEndpointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_endpoint::CreateEndpointError> for Error {
    fn from(err: crate::operation::create_endpoint::CreateEndpointError) -> Self {
        match err {
            crate::operation::create_endpoint::CreateEndpointError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::create_endpoint::CreateEndpointError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::operation::create_endpoint::CreateEndpointError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::operation::create_endpoint::CreateEndpointError::ResourceAlreadyExistsFault(inner) => Error::ResourceAlreadyExistsFault(inner),
            crate::operation::create_endpoint::CreateEndpointError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::create_endpoint::CreateEndpointError::ResourceQuotaExceededFault(inner) => Error::ResourceQuotaExceededFault(inner),
            crate::operation::create_endpoint::CreateEndpointError::S3AccessDeniedFault(inner) => Error::S3AccessDeniedFault(inner),
            crate::operation::create_endpoint::CreateEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_event_subscription::CreateEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_event_subscription::CreateEventSubscriptionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_event_subscription::CreateEventSubscriptionError> for Error {
    fn from(err: crate::operation::create_event_subscription::CreateEventSubscriptionError) -> Self {
        match err {
            crate::operation::create_event_subscription::CreateEventSubscriptionError::KmsAccessDeniedFault(inner) => {
                Error::KmsAccessDeniedFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::KmsDisabledFault(inner) => Error::KmsDisabledFault(inner),
            crate::operation::create_event_subscription::CreateEventSubscriptionError::KmsInvalidStateFault(inner) => {
                Error::KmsInvalidStateFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::KmsNotFoundFault(inner) => Error::KmsNotFoundFault(inner),
            crate::operation::create_event_subscription::CreateEventSubscriptionError::KmsThrottlingFault(inner) => Error::KmsThrottlingFault(inner),
            crate::operation::create_event_subscription::CreateEventSubscriptionError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::SnsInvalidTopicFault(inner) => {
                Error::SnsInvalidTopicFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::SnsNoAuthorizationFault(inner) => {
                Error::SnsNoAuthorizationFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_fleet_advisor_collector::CreateFleetAdvisorCollectorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_fleet_advisor_collector::CreateFleetAdvisorCollectorError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_fleet_advisor_collector::CreateFleetAdvisorCollectorError> for Error {
    fn from(err: crate::operation::create_fleet_advisor_collector::CreateFleetAdvisorCollectorError) -> Self {
        match err {
            crate::operation::create_fleet_advisor_collector::CreateFleetAdvisorCollectorError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::create_fleet_advisor_collector::CreateFleetAdvisorCollectorError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::create_fleet_advisor_collector::CreateFleetAdvisorCollectorError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::create_fleet_advisor_collector::CreateFleetAdvisorCollectorError::S3AccessDeniedFault(inner) => {
                Error::S3AccessDeniedFault(inner)
            }
            crate::operation::create_fleet_advisor_collector::CreateFleetAdvisorCollectorError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::operation::create_fleet_advisor_collector::CreateFleetAdvisorCollectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_instance_profile::CreateInstanceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_instance_profile::CreateInstanceProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_instance_profile::CreateInstanceProfileError> for Error {
    fn from(err: crate::operation::create_instance_profile::CreateInstanceProfileError) -> Self {
        match err {
            crate::operation::create_instance_profile::CreateInstanceProfileError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::create_instance_profile::CreateInstanceProfileError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::create_instance_profile::CreateInstanceProfileError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::create_instance_profile::CreateInstanceProfileError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::create_instance_profile::CreateInstanceProfileError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::create_instance_profile::CreateInstanceProfileError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::create_instance_profile::CreateInstanceProfileError::S3AccessDeniedFault(inner) => Error::S3AccessDeniedFault(inner),
            crate::operation::create_instance_profile::CreateInstanceProfileError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::operation::create_instance_profile::CreateInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_migration_project::CreateMigrationProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_migration_project::CreateMigrationProjectError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_migration_project::CreateMigrationProjectError> for Error {
    fn from(err: crate::operation::create_migration_project::CreateMigrationProjectError) -> Self {
        match err {
            crate::operation::create_migration_project::CreateMigrationProjectError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::create_migration_project::CreateMigrationProjectError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::create_migration_project::CreateMigrationProjectError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::create_migration_project::CreateMigrationProjectError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::create_migration_project::CreateMigrationProjectError::S3AccessDeniedFault(inner) => Error::S3AccessDeniedFault(inner),
            crate::operation::create_migration_project::CreateMigrationProjectError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::operation::create_migration_project::CreateMigrationProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_replication_config::CreateReplicationConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_replication_config::CreateReplicationConfigError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_replication_config::CreateReplicationConfigError> for Error {
    fn from(err: crate::operation::create_replication_config::CreateReplicationConfigError) -> Self {
        match err {
            crate::operation::create_replication_config::CreateReplicationConfigError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::create_replication_config::CreateReplicationConfigError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::create_replication_config::CreateReplicationConfigError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::create_replication_config::CreateReplicationConfigError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::create_replication_config::CreateReplicationConfigError::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::operation::create_replication_config::CreateReplicationConfigError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::create_replication_config::CreateReplicationConfigError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::create_replication_config::CreateReplicationConfigError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::create_replication_config::CreateReplicationConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_replication_instance::CreateReplicationInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_replication_instance::CreateReplicationInstanceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_replication_instance::CreateReplicationInstanceError> for Error {
    fn from(err: crate::operation::create_replication_instance::CreateReplicationInstanceError) -> Self {
        match err {
            crate::operation::create_replication_instance::CreateReplicationInstanceError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::create_replication_instance::CreateReplicationInstanceError::InsufficientResourceCapacityFault(inner) => {
                Error::InsufficientResourceCapacityFault(inner)
            }
            crate::operation::create_replication_instance::CreateReplicationInstanceError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::create_replication_instance::CreateReplicationInstanceError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::create_replication_instance::CreateReplicationInstanceError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::create_replication_instance::CreateReplicationInstanceError::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::operation::create_replication_instance::CreateReplicationInstanceError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::create_replication_instance::CreateReplicationInstanceError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::create_replication_instance::CreateReplicationInstanceError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::create_replication_instance::CreateReplicationInstanceError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::operation::create_replication_instance::CreateReplicationInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupError> for Error {
    fn from(err: crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupError) -> Self {
        match err {
            crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupError::ReplicationSubnetGroupDoesNotCoverEnoughAZs(
                inner,
            ) => Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner),
            crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::create_replication_subnet_group::CreateReplicationSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_replication_task::CreateReplicationTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_replication_task::CreateReplicationTaskError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_replication_task::CreateReplicationTaskError> for Error {
    fn from(err: crate::operation::create_replication_task::CreateReplicationTaskError) -> Self {
        match err {
            crate::operation::create_replication_task::CreateReplicationTaskError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::create_replication_task::CreateReplicationTaskError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::create_replication_task::CreateReplicationTaskError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::create_replication_task::CreateReplicationTaskError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::create_replication_task::CreateReplicationTaskError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::create_replication_task::CreateReplicationTaskError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::create_replication_task::CreateReplicationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_certificate::DeleteCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_certificate::DeleteCertificateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_certificate::DeleteCertificateError> for Error {
    fn from(err: crate::operation::delete_certificate::DeleteCertificateError) -> Self {
        match err {
            crate::operation::delete_certificate::DeleteCertificateError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::operation::delete_certificate::DeleteCertificateError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::delete_certificate::DeleteCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_connection::DeleteConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_connection::DeleteConnectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_connection::DeleteConnectionError> for Error {
    fn from(err: crate::operation::delete_connection::DeleteConnectionError) -> Self {
        match err {
            crate::operation::delete_connection::DeleteConnectionError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::delete_connection::DeleteConnectionError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::operation::delete_connection::DeleteConnectionError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::delete_connection::DeleteConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_provider::DeleteDataProviderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_provider::DeleteDataProviderError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_data_provider::DeleteDataProviderError> for Error {
    fn from(err: crate::operation::delete_data_provider::DeleteDataProviderError) -> Self {
        match err {
            crate::operation::delete_data_provider::DeleteDataProviderError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::delete_data_provider::DeleteDataProviderError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::delete_data_provider::DeleteDataProviderError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::delete_data_provider::DeleteDataProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_endpoint::DeleteEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_endpoint::DeleteEndpointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_endpoint::DeleteEndpointError> for Error {
    fn from(err: crate::operation::delete_endpoint::DeleteEndpointError) -> Self {
        match err {
            crate::operation::delete_endpoint::DeleteEndpointError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::operation::delete_endpoint::DeleteEndpointError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::delete_endpoint::DeleteEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event_subscription::DeleteEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event_subscription::DeleteEventSubscriptionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_event_subscription::DeleteEventSubscriptionError> for Error {
    fn from(err: crate::operation::delete_event_subscription::DeleteEventSubscriptionError) -> Self {
        match err {
            crate::operation::delete_event_subscription::DeleteEventSubscriptionError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::delete_event_subscription::DeleteEventSubscriptionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::delete_event_subscription::DeleteEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_fleet_advisor_collector::DeleteFleetAdvisorCollectorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_fleet_advisor_collector::DeleteFleetAdvisorCollectorError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_fleet_advisor_collector::DeleteFleetAdvisorCollectorError> for Error {
    fn from(err: crate::operation::delete_fleet_advisor_collector::DeleteFleetAdvisorCollectorError) -> Self {
        match err {
            crate::operation::delete_fleet_advisor_collector::DeleteFleetAdvisorCollectorError::CollectorNotFoundFault(inner) => {
                Error::CollectorNotFoundFault(inner)
            }
            crate::operation::delete_fleet_advisor_collector::DeleteFleetAdvisorCollectorError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::delete_fleet_advisor_collector::DeleteFleetAdvisorCollectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_fleet_advisor_databases::DeleteFleetAdvisorDatabasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_fleet_advisor_databases::DeleteFleetAdvisorDatabasesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_fleet_advisor_databases::DeleteFleetAdvisorDatabasesError> for Error {
    fn from(err: crate::operation::delete_fleet_advisor_databases::DeleteFleetAdvisorDatabasesError) -> Self {
        match err {
            crate::operation::delete_fleet_advisor_databases::DeleteFleetAdvisorDatabasesError::InvalidOperationFault(inner) => {
                Error::InvalidOperationFault(inner)
            }
            crate::operation::delete_fleet_advisor_databases::DeleteFleetAdvisorDatabasesError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::delete_fleet_advisor_databases::DeleteFleetAdvisorDatabasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_instance_profile::DeleteInstanceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_instance_profile::DeleteInstanceProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_instance_profile::DeleteInstanceProfileError> for Error {
    fn from(err: crate::operation::delete_instance_profile::DeleteInstanceProfileError) -> Self {
        match err {
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_migration_project::DeleteMigrationProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_migration_project::DeleteMigrationProjectError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_migration_project::DeleteMigrationProjectError> for Error {
    fn from(err: crate::operation::delete_migration_project::DeleteMigrationProjectError) -> Self {
        match err {
            crate::operation::delete_migration_project::DeleteMigrationProjectError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::delete_migration_project::DeleteMigrationProjectError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::delete_migration_project::DeleteMigrationProjectError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::delete_migration_project::DeleteMigrationProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_replication_config::DeleteReplicationConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_replication_config::DeleteReplicationConfigError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_replication_config::DeleteReplicationConfigError> for Error {
    fn from(err: crate::operation::delete_replication_config::DeleteReplicationConfigError) -> Self {
        match err {
            crate::operation::delete_replication_config::DeleteReplicationConfigError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::delete_replication_config::DeleteReplicationConfigError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::delete_replication_config::DeleteReplicationConfigError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::delete_replication_config::DeleteReplicationConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_replication_instance::DeleteReplicationInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_replication_instance::DeleteReplicationInstanceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_replication_instance::DeleteReplicationInstanceError> for Error {
    fn from(err: crate::operation::delete_replication_instance::DeleteReplicationInstanceError) -> Self {
        match err {
            crate::operation::delete_replication_instance::DeleteReplicationInstanceError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::delete_replication_instance::DeleteReplicationInstanceError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::delete_replication_instance::DeleteReplicationInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_replication_subnet_group::DeleteReplicationSubnetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_replication_subnet_group::DeleteReplicationSubnetGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_replication_subnet_group::DeleteReplicationSubnetGroupError> for Error {
    fn from(err: crate::operation::delete_replication_subnet_group::DeleteReplicationSubnetGroupError) -> Self {
        match err {
            crate::operation::delete_replication_subnet_group::DeleteReplicationSubnetGroupError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::delete_replication_subnet_group::DeleteReplicationSubnetGroupError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::delete_replication_subnet_group::DeleteReplicationSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_replication_task::DeleteReplicationTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_replication_task::DeleteReplicationTaskError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_replication_task::DeleteReplicationTaskError> for Error {
    fn from(err: crate::operation::delete_replication_task::DeleteReplicationTaskError) -> Self {
        match err {
            crate::operation::delete_replication_task::DeleteReplicationTaskError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::delete_replication_task::DeleteReplicationTaskError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::delete_replication_task::DeleteReplicationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_replication_task_assessment_run::DeleteReplicationTaskAssessmentRunError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_replication_task_assessment_run::DeleteReplicationTaskAssessmentRunError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_replication_task_assessment_run::DeleteReplicationTaskAssessmentRunError> for Error {
    fn from(err: crate::operation::delete_replication_task_assessment_run::DeleteReplicationTaskAssessmentRunError) -> Self {
        match err {
            crate::operation::delete_replication_task_assessment_run::DeleteReplicationTaskAssessmentRunError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::delete_replication_task_assessment_run::DeleteReplicationTaskAssessmentRunError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::delete_replication_task_assessment_run::DeleteReplicationTaskAssessmentRunError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::delete_replication_task_assessment_run::DeleteReplicationTaskAssessmentRunError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_account_attributes::DescribeAccountAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_account_attributes::DescribeAccountAttributesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_account_attributes::DescribeAccountAttributesError> for Error {
    fn from(err: crate::operation::describe_account_attributes::DescribeAccountAttributesError) -> Self {
        match err {
            crate::operation::describe_account_attributes::DescribeAccountAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsError> for Error {
    fn from(err: crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsError) -> Self {
        match err {
            crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsError::InvalidResourceStateFault(
                inner,
            ) => Error::InvalidResourceStateFault(inner),
            crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsError::ResourceNotFoundFault(
                inner,
            ) => Error::ResourceNotFoundFault(inner),
            crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_certificates::DescribeCertificatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_certificates::DescribeCertificatesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_certificates::DescribeCertificatesError> for Error {
    fn from(err: crate::operation::describe_certificates::DescribeCertificatesError) -> Self {
        match err {
            crate::operation::describe_certificates::DescribeCertificatesError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::describe_certificates::DescribeCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_connections::DescribeConnectionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_connections::DescribeConnectionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_connections::DescribeConnectionsError> for Error {
    fn from(err: crate::operation::describe_connections::DescribeConnectionsError) -> Self {
        match err {
            crate::operation::describe_connections::DescribeConnectionsError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::describe_connections::DescribeConnectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_conversion_configuration::DescribeConversionConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_conversion_configuration::DescribeConversionConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_conversion_configuration::DescribeConversionConfigurationError> for Error {
    fn from(err: crate::operation::describe_conversion_configuration::DescribeConversionConfigurationError) -> Self {
        match err {
            crate::operation::describe_conversion_configuration::DescribeConversionConfigurationError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_conversion_configuration::DescribeConversionConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_data_providers::DescribeDataProvidersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_data_providers::DescribeDataProvidersError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_data_providers::DescribeDataProvidersError> for Error {
    fn from(err: crate::operation::describe_data_providers::DescribeDataProvidersError) -> Self {
        match err {
            crate::operation::describe_data_providers::DescribeDataProvidersError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::describe_data_providers::DescribeDataProvidersError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_data_providers::DescribeDataProvidersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_endpoints::DescribeEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_endpoints::DescribeEndpointsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_endpoints::DescribeEndpointsError> for Error {
    fn from(err: crate::operation::describe_endpoints::DescribeEndpointsError) -> Self {
        match err {
            crate::operation::describe_endpoints::DescribeEndpointsError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::describe_endpoints::DescribeEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_endpoint_settings::DescribeEndpointSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_endpoint_settings::DescribeEndpointSettingsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_endpoint_settings::DescribeEndpointSettingsError> for Error {
    fn from(err: crate::operation::describe_endpoint_settings::DescribeEndpointSettingsError) -> Self {
        match err {
            crate::operation::describe_endpoint_settings::DescribeEndpointSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_endpoint_types::DescribeEndpointTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_endpoint_types::DescribeEndpointTypesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_endpoint_types::DescribeEndpointTypesError> for Error {
    fn from(err: crate::operation::describe_endpoint_types::DescribeEndpointTypesError) -> Self {
        match err {
            crate::operation::describe_endpoint_types::DescribeEndpointTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_engine_versions::DescribeEngineVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_engine_versions::DescribeEngineVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_engine_versions::DescribeEngineVersionsError> for Error {
    fn from(err: crate::operation::describe_engine_versions::DescribeEngineVersionsError) -> Self {
        match err {
            crate::operation::describe_engine_versions::DescribeEngineVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_categories::DescribeEventCategoriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_categories::DescribeEventCategoriesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_event_categories::DescribeEventCategoriesError> for Error {
    fn from(err: crate::operation::describe_event_categories::DescribeEventCategoriesError) -> Self {
        match err {
            crate::operation::describe_event_categories::DescribeEventCategoriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_events::DescribeEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_events::DescribeEventsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_events::DescribeEventsError> for Error {
    fn from(err: crate::operation::describe_events::DescribeEventsError) -> Self {
        match err {
            crate::operation::describe_events::DescribeEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsError> for Error {
    fn from(err: crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsError) -> Self {
        match err {
            crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_extension_pack_associations::DescribeExtensionPackAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_extension_pack_associations::DescribeExtensionPackAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_extension_pack_associations::DescribeExtensionPackAssociationsError> for Error {
    fn from(err: crate::operation::describe_extension_pack_associations::DescribeExtensionPackAssociationsError) -> Self {
        match err {
            crate::operation::describe_extension_pack_associations::DescribeExtensionPackAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_fleet_advisor_collectors::DescribeFleetAdvisorCollectorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_fleet_advisor_collectors::DescribeFleetAdvisorCollectorsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_fleet_advisor_collectors::DescribeFleetAdvisorCollectorsError> for Error {
    fn from(err: crate::operation::describe_fleet_advisor_collectors::DescribeFleetAdvisorCollectorsError) -> Self {
        match err {
            crate::operation::describe_fleet_advisor_collectors::DescribeFleetAdvisorCollectorsError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::describe_fleet_advisor_collectors::DescribeFleetAdvisorCollectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_fleet_advisor_databases::DescribeFleetAdvisorDatabasesError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_fleet_advisor_databases::DescribeFleetAdvisorDatabasesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_fleet_advisor_databases::DescribeFleetAdvisorDatabasesError> for Error {
    fn from(err: crate::operation::describe_fleet_advisor_databases::DescribeFleetAdvisorDatabasesError) -> Self {
        match err {
            crate::operation::describe_fleet_advisor_databases::DescribeFleetAdvisorDatabasesError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::describe_fleet_advisor_databases::DescribeFleetAdvisorDatabasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_fleet_advisor_lsa_analysis::DescribeFleetAdvisorLsaAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_fleet_advisor_lsa_analysis::DescribeFleetAdvisorLsaAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_fleet_advisor_lsa_analysis::DescribeFleetAdvisorLsaAnalysisError> for Error {
    fn from(err: crate::operation::describe_fleet_advisor_lsa_analysis::DescribeFleetAdvisorLsaAnalysisError) -> Self {
        match err {
            crate::operation::describe_fleet_advisor_lsa_analysis::DescribeFleetAdvisorLsaAnalysisError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::describe_fleet_advisor_lsa_analysis::DescribeFleetAdvisorLsaAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_fleet_advisor_schema_object_summary::DescribeFleetAdvisorSchemaObjectSummaryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_fleet_advisor_schema_object_summary::DescribeFleetAdvisorSchemaObjectSummaryError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_fleet_advisor_schema_object_summary::DescribeFleetAdvisorSchemaObjectSummaryError> for Error {
    fn from(err: crate::operation::describe_fleet_advisor_schema_object_summary::DescribeFleetAdvisorSchemaObjectSummaryError) -> Self {
        match err {
            crate::operation::describe_fleet_advisor_schema_object_summary::DescribeFleetAdvisorSchemaObjectSummaryError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::operation::describe_fleet_advisor_schema_object_summary::DescribeFleetAdvisorSchemaObjectSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_fleet_advisor_schemas::DescribeFleetAdvisorSchemasError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_fleet_advisor_schemas::DescribeFleetAdvisorSchemasError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_fleet_advisor_schemas::DescribeFleetAdvisorSchemasError> for Error {
    fn from(err: crate::operation::describe_fleet_advisor_schemas::DescribeFleetAdvisorSchemasError) -> Self {
        match err {
            crate::operation::describe_fleet_advisor_schemas::DescribeFleetAdvisorSchemasError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::describe_fleet_advisor_schemas::DescribeFleetAdvisorSchemasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_instance_profiles::DescribeInstanceProfilesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_instance_profiles::DescribeInstanceProfilesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_instance_profiles::DescribeInstanceProfilesError> for Error {
    fn from(err: crate::operation::describe_instance_profiles::DescribeInstanceProfilesError) -> Self {
        match err {
            crate::operation::describe_instance_profiles::DescribeInstanceProfilesError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::describe_instance_profiles::DescribeInstanceProfilesError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_instance_profiles::DescribeInstanceProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_metadata_model_assessments::DescribeMetadataModelAssessmentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_metadata_model_assessments::DescribeMetadataModelAssessmentsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_metadata_model_assessments::DescribeMetadataModelAssessmentsError> for Error {
    fn from(err: crate::operation::describe_metadata_model_assessments::DescribeMetadataModelAssessmentsError) -> Self {
        match err {
            crate::operation::describe_metadata_model_assessments::DescribeMetadataModelAssessmentsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_metadata_model_assessments::DescribeMetadataModelAssessmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_metadata_model_conversions::DescribeMetadataModelConversionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_metadata_model_conversions::DescribeMetadataModelConversionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_metadata_model_conversions::DescribeMetadataModelConversionsError> for Error {
    fn from(err: crate::operation::describe_metadata_model_conversions::DescribeMetadataModelConversionsError) -> Self {
        match err {
            crate::operation::describe_metadata_model_conversions::DescribeMetadataModelConversionsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_metadata_model_conversions::DescribeMetadataModelConversionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_metadata_model_exports_as_script::DescribeMetadataModelExportsAsScriptError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_metadata_model_exports_as_script::DescribeMetadataModelExportsAsScriptError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_metadata_model_exports_as_script::DescribeMetadataModelExportsAsScriptError> for Error {
    fn from(err: crate::operation::describe_metadata_model_exports_as_script::DescribeMetadataModelExportsAsScriptError) -> Self {
        match err {
            crate::operation::describe_metadata_model_exports_as_script::DescribeMetadataModelExportsAsScriptError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_metadata_model_exports_as_script::DescribeMetadataModelExportsAsScriptError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_metadata_model_exports_to_target::DescribeMetadataModelExportsToTargetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_metadata_model_exports_to_target::DescribeMetadataModelExportsToTargetError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_metadata_model_exports_to_target::DescribeMetadataModelExportsToTargetError> for Error {
    fn from(err: crate::operation::describe_metadata_model_exports_to_target::DescribeMetadataModelExportsToTargetError) -> Self {
        match err {
            crate::operation::describe_metadata_model_exports_to_target::DescribeMetadataModelExportsToTargetError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_metadata_model_exports_to_target::DescribeMetadataModelExportsToTargetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_metadata_model_imports::DescribeMetadataModelImportsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_metadata_model_imports::DescribeMetadataModelImportsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_metadata_model_imports::DescribeMetadataModelImportsError> for Error {
    fn from(err: crate::operation::describe_metadata_model_imports::DescribeMetadataModelImportsError) -> Self {
        match err {
            crate::operation::describe_metadata_model_imports::DescribeMetadataModelImportsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_metadata_model_imports::DescribeMetadataModelImportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_migration_projects::DescribeMigrationProjectsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_migration_projects::DescribeMigrationProjectsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_migration_projects::DescribeMigrationProjectsError> for Error {
    fn from(err: crate::operation::describe_migration_projects::DescribeMigrationProjectsError) -> Self {
        match err {
            crate::operation::describe_migration_projects::DescribeMigrationProjectsError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::describe_migration_projects::DescribeMigrationProjectsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_migration_projects::DescribeMigrationProjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_orderable_replication_instances::DescribeOrderableReplicationInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_orderable_replication_instances::DescribeOrderableReplicationInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_orderable_replication_instances::DescribeOrderableReplicationInstancesError> for Error {
    fn from(err: crate::operation::describe_orderable_replication_instances::DescribeOrderableReplicationInstancesError) -> Self {
        match err {
            crate::operation::describe_orderable_replication_instances::DescribeOrderableReplicationInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsError> for Error {
    fn from(err: crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsError) -> Self {
        match err {
            crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_recommendation_limitations::DescribeRecommendationLimitationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_recommendation_limitations::DescribeRecommendationLimitationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_recommendation_limitations::DescribeRecommendationLimitationsError> for Error {
    fn from(err: crate::operation::describe_recommendation_limitations::DescribeRecommendationLimitationsError) -> Self {
        match err {
            crate::operation::describe_recommendation_limitations::DescribeRecommendationLimitationsError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::describe_recommendation_limitations::DescribeRecommendationLimitationsError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::describe_recommendation_limitations::DescribeRecommendationLimitationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_recommendations::DescribeRecommendationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_recommendations::DescribeRecommendationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_recommendations::DescribeRecommendationsError> for Error {
    fn from(err: crate::operation::describe_recommendations::DescribeRecommendationsError) -> Self {
        match err {
            crate::operation::describe_recommendations::DescribeRecommendationsError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::describe_recommendations::DescribeRecommendationsError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::describe_recommendations::DescribeRecommendationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_refresh_schemas_status::DescribeRefreshSchemasStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_refresh_schemas_status::DescribeRefreshSchemasStatusError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_refresh_schemas_status::DescribeRefreshSchemasStatusError> for Error {
    fn from(err: crate::operation::describe_refresh_schemas_status::DescribeRefreshSchemasStatusError) -> Self {
        match err {
            crate::operation::describe_refresh_schemas_status::DescribeRefreshSchemasStatusError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::describe_refresh_schemas_status::DescribeRefreshSchemasStatusError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_refresh_schemas_status::DescribeRefreshSchemasStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_replication_configs::DescribeReplicationConfigsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_replication_configs::DescribeReplicationConfigsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_replication_configs::DescribeReplicationConfigsError> for Error {
    fn from(err: crate::operation::describe_replication_configs::DescribeReplicationConfigsError) -> Self {
        match err {
            crate::operation::describe_replication_configs::DescribeReplicationConfigsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_replication_configs::DescribeReplicationConfigsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_replication_instances::DescribeReplicationInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_instances::DescribeReplicationInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_replication_instances::DescribeReplicationInstancesError> for Error {
    fn from(err: crate::operation::describe_replication_instances::DescribeReplicationInstancesError) -> Self {
        match err {
            crate::operation::describe_replication_instances::DescribeReplicationInstancesError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_replication_instances::DescribeReplicationInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_instance_task_logs::DescribeReplicationInstanceTaskLogsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_instance_task_logs::DescribeReplicationInstanceTaskLogsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_replication_instance_task_logs::DescribeReplicationInstanceTaskLogsError> for Error {
    fn from(err: crate::operation::describe_replication_instance_task_logs::DescribeReplicationInstanceTaskLogsError) -> Self {
        match err {
            crate::operation::describe_replication_instance_task_logs::DescribeReplicationInstanceTaskLogsError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::describe_replication_instance_task_logs::DescribeReplicationInstanceTaskLogsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_replication_instance_task_logs::DescribeReplicationInstanceTaskLogsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_replications::DescribeReplicationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_replications::DescribeReplicationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_replications::DescribeReplicationsError> for Error {
    fn from(err: crate::operation::describe_replications::DescribeReplicationsError) -> Self {
        match err {
            crate::operation::describe_replications::DescribeReplicationsError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::describe_replications::DescribeReplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_subnet_groups::DescribeReplicationSubnetGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_subnet_groups::DescribeReplicationSubnetGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_replication_subnet_groups::DescribeReplicationSubnetGroupsError> for Error {
    fn from(err: crate::operation::describe_replication_subnet_groups::DescribeReplicationSubnetGroupsError) -> Self {
        match err {
            crate::operation::describe_replication_subnet_groups::DescribeReplicationSubnetGroupsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_replication_subnet_groups::DescribeReplicationSubnetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_table_statistics::DescribeReplicationTableStatisticsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_table_statistics::DescribeReplicationTableStatisticsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_replication_table_statistics::DescribeReplicationTableStatisticsError> for Error {
    fn from(err: crate::operation::describe_replication_table_statistics::DescribeReplicationTableStatisticsError) -> Self {
        match err {
            crate::operation::describe_replication_table_statistics::DescribeReplicationTableStatisticsError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::describe_replication_table_statistics::DescribeReplicationTableStatisticsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_replication_table_statistics::DescribeReplicationTableStatisticsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_task_assessment_results::DescribeReplicationTaskAssessmentResultsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_task_assessment_results::DescribeReplicationTaskAssessmentResultsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_replication_task_assessment_results::DescribeReplicationTaskAssessmentResultsError> for Error {
    fn from(err: crate::operation::describe_replication_task_assessment_results::DescribeReplicationTaskAssessmentResultsError) -> Self {
        match err {
            crate::operation::describe_replication_task_assessment_results::DescribeReplicationTaskAssessmentResultsError::ResourceNotFoundFault(
                inner,
            ) => Error::ResourceNotFoundFault(inner),
            crate::operation::describe_replication_task_assessment_results::DescribeReplicationTaskAssessmentResultsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_task_assessment_runs::DescribeReplicationTaskAssessmentRunsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_task_assessment_runs::DescribeReplicationTaskAssessmentRunsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_replication_task_assessment_runs::DescribeReplicationTaskAssessmentRunsError> for Error {
    fn from(err: crate::operation::describe_replication_task_assessment_runs::DescribeReplicationTaskAssessmentRunsError) -> Self {
        match err {
            crate::operation::describe_replication_task_assessment_runs::DescribeReplicationTaskAssessmentRunsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_replication_task_assessment_runs::DescribeReplicationTaskAssessmentRunsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_task_individual_assessments::DescribeReplicationTaskIndividualAssessmentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_task_individual_assessments::DescribeReplicationTaskIndividualAssessmentsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_replication_task_individual_assessments::DescribeReplicationTaskIndividualAssessmentsError> for Error {
    fn from(err: crate::operation::describe_replication_task_individual_assessments::DescribeReplicationTaskIndividualAssessmentsError) -> Self {
        match err {
            crate::operation::describe_replication_task_individual_assessments::DescribeReplicationTaskIndividualAssessmentsError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::describe_replication_task_individual_assessments::DescribeReplicationTaskIndividualAssessmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_replication_tasks::DescribeReplicationTasksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_replication_tasks::DescribeReplicationTasksError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_replication_tasks::DescribeReplicationTasksError> for Error {
    fn from(err: crate::operation::describe_replication_tasks::DescribeReplicationTasksError) -> Self {
        match err {
            crate::operation::describe_replication_tasks::DescribeReplicationTasksError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_replication_tasks::DescribeReplicationTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_schemas::DescribeSchemasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_schemas::DescribeSchemasError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_schemas::DescribeSchemasError> for Error {
    fn from(err: crate::operation::describe_schemas::DescribeSchemasError) -> Self {
        match err {
            crate::operation::describe_schemas::DescribeSchemasError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::operation::describe_schemas::DescribeSchemasError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::describe_schemas::DescribeSchemasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_table_statistics::DescribeTableStatisticsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_table_statistics::DescribeTableStatisticsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_table_statistics::DescribeTableStatisticsError> for Error {
    fn from(err: crate::operation::describe_table_statistics::DescribeTableStatisticsError) -> Self {
        match err {
            crate::operation::describe_table_statistics::DescribeTableStatisticsError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::describe_table_statistics::DescribeTableStatisticsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_table_statistics::DescribeTableStatisticsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::export_metadata_model_assessment::ExportMetadataModelAssessmentError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::export_metadata_model_assessment::ExportMetadataModelAssessmentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::export_metadata_model_assessment::ExportMetadataModelAssessmentError> for Error {
    fn from(err: crate::operation::export_metadata_model_assessment::ExportMetadataModelAssessmentError) -> Self {
        match err {
            crate::operation::export_metadata_model_assessment::ExportMetadataModelAssessmentError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::export_metadata_model_assessment::ExportMetadataModelAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_certificate::ImportCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_certificate::ImportCertificateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::import_certificate::ImportCertificateError> for Error {
    fn from(err: crate::operation::import_certificate::ImportCertificateError) -> Self {
        match err {
            crate::operation::import_certificate::ImportCertificateError::InvalidCertificateFault(inner) => Error::InvalidCertificateFault(inner),
            crate::operation::import_certificate::ImportCertificateError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::import_certificate::ImportCertificateError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::import_certificate::ImportCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_conversion_configuration::ModifyConversionConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_conversion_configuration::ModifyConversionConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_conversion_configuration::ModifyConversionConfigurationError> for Error {
    fn from(err: crate::operation::modify_conversion_configuration::ModifyConversionConfigurationError) -> Self {
        match err {
            crate::operation::modify_conversion_configuration::ModifyConversionConfigurationError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::modify_conversion_configuration::ModifyConversionConfigurationError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::modify_conversion_configuration::ModifyConversionConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_data_provider::ModifyDataProviderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_data_provider::ModifyDataProviderError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_data_provider::ModifyDataProviderError> for Error {
    fn from(err: crate::operation::modify_data_provider::ModifyDataProviderError) -> Self {
        match err {
            crate::operation::modify_data_provider::ModifyDataProviderError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::modify_data_provider::ModifyDataProviderError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::modify_data_provider::ModifyDataProviderError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::modify_data_provider::ModifyDataProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_endpoint::ModifyEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_endpoint::ModifyEndpointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_endpoint::ModifyEndpointError> for Error {
    fn from(err: crate::operation::modify_endpoint::ModifyEndpointError) -> Self {
        match err {
            crate::operation::modify_endpoint::ModifyEndpointError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::modify_endpoint::ModifyEndpointError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::operation::modify_endpoint::ModifyEndpointError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::operation::modify_endpoint::ModifyEndpointError::ResourceAlreadyExistsFault(inner) => Error::ResourceAlreadyExistsFault(inner),
            crate::operation::modify_endpoint::ModifyEndpointError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::modify_endpoint::ModifyEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_event_subscription::ModifyEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_event_subscription::ModifyEventSubscriptionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_event_subscription::ModifyEventSubscriptionError> for Error {
    fn from(err: crate::operation::modify_event_subscription::ModifyEventSubscriptionError) -> Self {
        match err {
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::KmsAccessDeniedFault(inner) => {
                Error::KmsAccessDeniedFault(inner)
            }
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::KmsDisabledFault(inner) => Error::KmsDisabledFault(inner),
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::KmsInvalidStateFault(inner) => {
                Error::KmsInvalidStateFault(inner)
            }
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::KmsNotFoundFault(inner) => Error::KmsNotFoundFault(inner),
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::KmsThrottlingFault(inner) => Error::KmsThrottlingFault(inner),
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::SnsInvalidTopicFault(inner) => {
                Error::SnsInvalidTopicFault(inner)
            }
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::SnsNoAuthorizationFault(inner) => {
                Error::SnsNoAuthorizationFault(inner)
            }
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_instance_profile::ModifyInstanceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_instance_profile::ModifyInstanceProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_instance_profile::ModifyInstanceProfileError> for Error {
    fn from(err: crate::operation::modify_instance_profile::ModifyInstanceProfileError) -> Self {
        match err {
            crate::operation::modify_instance_profile::ModifyInstanceProfileError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::modify_instance_profile::ModifyInstanceProfileError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::modify_instance_profile::ModifyInstanceProfileError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::modify_instance_profile::ModifyInstanceProfileError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::modify_instance_profile::ModifyInstanceProfileError::S3AccessDeniedFault(inner) => Error::S3AccessDeniedFault(inner),
            crate::operation::modify_instance_profile::ModifyInstanceProfileError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::operation::modify_instance_profile::ModifyInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_migration_project::ModifyMigrationProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_migration_project::ModifyMigrationProjectError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_migration_project::ModifyMigrationProjectError> for Error {
    fn from(err: crate::operation::modify_migration_project::ModifyMigrationProjectError) -> Self {
        match err {
            crate::operation::modify_migration_project::ModifyMigrationProjectError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::modify_migration_project::ModifyMigrationProjectError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::modify_migration_project::ModifyMigrationProjectError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::modify_migration_project::ModifyMigrationProjectError::S3AccessDeniedFault(inner) => Error::S3AccessDeniedFault(inner),
            crate::operation::modify_migration_project::ModifyMigrationProjectError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::operation::modify_migration_project::ModifyMigrationProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_replication_config::ModifyReplicationConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_replication_config::ModifyReplicationConfigError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_replication_config::ModifyReplicationConfigError> for Error {
    fn from(err: crate::operation::modify_replication_config::ModifyReplicationConfigError) -> Self {
        match err {
            crate::operation::modify_replication_config::ModifyReplicationConfigError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::modify_replication_config::ModifyReplicationConfigError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::modify_replication_config::ModifyReplicationConfigError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::modify_replication_config::ModifyReplicationConfigError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::modify_replication_config::ModifyReplicationConfigError::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::operation::modify_replication_config::ModifyReplicationConfigError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::modify_replication_config::ModifyReplicationConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_replication_instance::ModifyReplicationInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_replication_instance::ModifyReplicationInstanceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_replication_instance::ModifyReplicationInstanceError> for Error {
    fn from(err: crate::operation::modify_replication_instance::ModifyReplicationInstanceError) -> Self {
        match err {
            crate::operation::modify_replication_instance::ModifyReplicationInstanceError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::modify_replication_instance::ModifyReplicationInstanceError::InsufficientResourceCapacityFault(inner) => {
                Error::InsufficientResourceCapacityFault(inner)
            }
            crate::operation::modify_replication_instance::ModifyReplicationInstanceError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::modify_replication_instance::ModifyReplicationInstanceError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::modify_replication_instance::ModifyReplicationInstanceError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::modify_replication_instance::ModifyReplicationInstanceError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::operation::modify_replication_instance::ModifyReplicationInstanceError::UpgradeDependencyFailureFault(inner) => {
                Error::UpgradeDependencyFailureFault(inner)
            }
            crate::operation::modify_replication_instance::ModifyReplicationInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_replication_subnet_group::ModifyReplicationSubnetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_replication_subnet_group::ModifyReplicationSubnetGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_replication_subnet_group::ModifyReplicationSubnetGroupError> for Error {
    fn from(err: crate::operation::modify_replication_subnet_group::ModifyReplicationSubnetGroupError) -> Self {
        match err {
            crate::operation::modify_replication_subnet_group::ModifyReplicationSubnetGroupError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::modify_replication_subnet_group::ModifyReplicationSubnetGroupError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::modify_replication_subnet_group::ModifyReplicationSubnetGroupError::ReplicationSubnetGroupDoesNotCoverEnoughAZs(
                inner,
            ) => Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner),
            crate::operation::modify_replication_subnet_group::ModifyReplicationSubnetGroupError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::modify_replication_subnet_group::ModifyReplicationSubnetGroupError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::modify_replication_subnet_group::ModifyReplicationSubnetGroupError::SubnetAlreadyInUse(inner) => {
                Error::SubnetAlreadyInUse(inner)
            }
            crate::operation::modify_replication_subnet_group::ModifyReplicationSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_replication_task::ModifyReplicationTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_replication_task::ModifyReplicationTaskError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::modify_replication_task::ModifyReplicationTaskError> for Error {
    fn from(err: crate::operation::modify_replication_task::ModifyReplicationTaskError) -> Self {
        match err {
            crate::operation::modify_replication_task::ModifyReplicationTaskError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::modify_replication_task::ModifyReplicationTaskError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::modify_replication_task::ModifyReplicationTaskError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::modify_replication_task::ModifyReplicationTaskError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::modify_replication_task::ModifyReplicationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::move_replication_task::MoveReplicationTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::move_replication_task::MoveReplicationTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::move_replication_task::MoveReplicationTaskError> for Error {
    fn from(err: crate::operation::move_replication_task::MoveReplicationTaskError) -> Self {
        match err {
            crate::operation::move_replication_task::MoveReplicationTaskError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::move_replication_task::MoveReplicationTaskError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::move_replication_task::MoveReplicationTaskError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::move_replication_task::MoveReplicationTaskError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::move_replication_task::MoveReplicationTaskError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::move_replication_task::MoveReplicationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reboot_replication_instance::RebootReplicationInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reboot_replication_instance::RebootReplicationInstanceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reboot_replication_instance::RebootReplicationInstanceError> for Error {
    fn from(err: crate::operation::reboot_replication_instance::RebootReplicationInstanceError) -> Self {
        match err {
            crate::operation::reboot_replication_instance::RebootReplicationInstanceError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::reboot_replication_instance::RebootReplicationInstanceError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::reboot_replication_instance::RebootReplicationInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::refresh_schemas::RefreshSchemasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::refresh_schemas::RefreshSchemasError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::refresh_schemas::RefreshSchemasError> for Error {
    fn from(err: crate::operation::refresh_schemas::RefreshSchemasError) -> Self {
        match err {
            crate::operation::refresh_schemas::RefreshSchemasError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::operation::refresh_schemas::RefreshSchemasError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::operation::refresh_schemas::RefreshSchemasError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::refresh_schemas::RefreshSchemasError::ResourceQuotaExceededFault(inner) => Error::ResourceQuotaExceededFault(inner),
            crate::operation::refresh_schemas::RefreshSchemasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reload_replication_tables::ReloadReplicationTablesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reload_replication_tables::ReloadReplicationTablesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reload_replication_tables::ReloadReplicationTablesError> for Error {
    fn from(err: crate::operation::reload_replication_tables::ReloadReplicationTablesError) -> Self {
        match err {
            crate::operation::reload_replication_tables::ReloadReplicationTablesError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::reload_replication_tables::ReloadReplicationTablesError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::reload_replication_tables::ReloadReplicationTablesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reload_tables::ReloadTablesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reload_tables::ReloadTablesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reload_tables::ReloadTablesError> for Error {
    fn from(err: crate::operation::reload_tables::ReloadTablesError) -> Self {
        match err {
            crate::operation::reload_tables::ReloadTablesError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::operation::reload_tables::ReloadTablesError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::reload_tables::ReloadTablesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError> for Error {
    fn from(err: crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError) -> Self {
        match err {
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::run_fleet_advisor_lsa_analysis::RunFleetAdvisorLsaAnalysisError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::run_fleet_advisor_lsa_analysis::RunFleetAdvisorLsaAnalysisError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::run_fleet_advisor_lsa_analysis::RunFleetAdvisorLsaAnalysisError> for Error {
    fn from(err: crate::operation::run_fleet_advisor_lsa_analysis::RunFleetAdvisorLsaAnalysisError) -> Self {
        match err {
            crate::operation::run_fleet_advisor_lsa_analysis::RunFleetAdvisorLsaAnalysisError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::run_fleet_advisor_lsa_analysis::RunFleetAdvisorLsaAnalysisError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::run_fleet_advisor_lsa_analysis::RunFleetAdvisorLsaAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_extension_pack_association::StartExtensionPackAssociationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_extension_pack_association::StartExtensionPackAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_extension_pack_association::StartExtensionPackAssociationError> for Error {
    fn from(err: crate::operation::start_extension_pack_association::StartExtensionPackAssociationError) -> Self {
        match err {
            crate::operation::start_extension_pack_association::StartExtensionPackAssociationError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::start_extension_pack_association::StartExtensionPackAssociationError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::start_extension_pack_association::StartExtensionPackAssociationError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::start_extension_pack_association::StartExtensionPackAssociationError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::start_extension_pack_association::StartExtensionPackAssociationError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::start_extension_pack_association::StartExtensionPackAssociationError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::start_extension_pack_association::StartExtensionPackAssociationError::S3AccessDeniedFault(inner) => {
                Error::S3AccessDeniedFault(inner)
            }
            crate::operation::start_extension_pack_association::StartExtensionPackAssociationError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::operation::start_extension_pack_association::StartExtensionPackAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError> for Error {
    fn from(err: crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError) -> Self {
        match err {
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError::S3AccessDeniedFault(inner) => {
                Error::S3AccessDeniedFault(inner)
            }
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::operation::start_metadata_model_assessment::StartMetadataModelAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError> for Error {
    fn from(err: crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError) -> Self {
        match err {
            crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError::S3AccessDeniedFault(inner) => {
                Error::S3AccessDeniedFault(inner)
            }
            crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::operation::start_metadata_model_conversion::StartMetadataModelConversionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError> for Error {
    fn from(err: crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError) -> Self {
        match err {
            crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError::S3AccessDeniedFault(inner) => {
                Error::S3AccessDeniedFault(inner)
            }
            crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::operation::start_metadata_model_export_as_script::StartMetadataModelExportAsScriptError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError> for Error {
    fn from(err: crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError) -> Self {
        match err {
            crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError::S3AccessDeniedFault(inner) => {
                Error::S3AccessDeniedFault(inner)
            }
            crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::operation::start_metadata_model_export_to_target::StartMetadataModelExportToTargetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_metadata_model_import::StartMetadataModelImportError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_metadata_model_import::StartMetadataModelImportError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_metadata_model_import::StartMetadataModelImportError> for Error {
    fn from(err: crate::operation::start_metadata_model_import::StartMetadataModelImportError) -> Self {
        match err {
            crate::operation::start_metadata_model_import::StartMetadataModelImportError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::start_metadata_model_import::StartMetadataModelImportError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::start_metadata_model_import::StartMetadataModelImportError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::start_metadata_model_import::StartMetadataModelImportError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::start_metadata_model_import::StartMetadataModelImportError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::start_metadata_model_import::StartMetadataModelImportError::ResourceQuotaExceededFault(inner) => {
                Error::ResourceQuotaExceededFault(inner)
            }
            crate::operation::start_metadata_model_import::StartMetadataModelImportError::S3AccessDeniedFault(inner) => {
                Error::S3AccessDeniedFault(inner)
            }
            crate::operation::start_metadata_model_import::StartMetadataModelImportError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::operation::start_metadata_model_import::StartMetadataModelImportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_recommendations::StartRecommendationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_recommendations::StartRecommendationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_recommendations::StartRecommendationsError> for Error {
    fn from(err: crate::operation::start_recommendations::StartRecommendationsError) -> Self {
        match err {
            crate::operation::start_recommendations::StartRecommendationsError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::start_recommendations::StartRecommendationsError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::start_recommendations::StartRecommendationsError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::start_recommendations::StartRecommendationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_replication::StartReplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_replication::StartReplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_replication::StartReplicationError> for Error {
    fn from(err: crate::operation::start_replication::StartReplicationError) -> Self {
        match err {
            crate::operation::start_replication::StartReplicationError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::start_replication::StartReplicationError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::operation::start_replication::StartReplicationError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::start_replication::StartReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_replication_task::StartReplicationTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_replication_task::StartReplicationTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_replication_task::StartReplicationTaskError> for Error {
    fn from(err: crate::operation::start_replication_task::StartReplicationTaskError) -> Self {
        match err {
            crate::operation::start_replication_task::StartReplicationTaskError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::start_replication_task::StartReplicationTaskError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::start_replication_task::StartReplicationTaskError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::start_replication_task::StartReplicationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_replication_task_assessment::StartReplicationTaskAssessmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_replication_task_assessment::StartReplicationTaskAssessmentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_replication_task_assessment::StartReplicationTaskAssessmentError> for Error {
    fn from(err: crate::operation::start_replication_task_assessment::StartReplicationTaskAssessmentError) -> Self {
        match err {
            crate::operation::start_replication_task_assessment::StartReplicationTaskAssessmentError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::start_replication_task_assessment::StartReplicationTaskAssessmentError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::start_replication_task_assessment::StartReplicationTaskAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError> for Error {
    fn from(err: crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError) -> Self {
        match err {
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::KmsAccessDeniedFault(inner) => {
                Error::KmsAccessDeniedFault(inner)
            }
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::KmsDisabledFault(inner) => {
                Error::KmsDisabledFault(inner)
            }
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::KmsFault(inner) => {
                Error::KmsFault(inner)
            }
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::KmsInvalidStateFault(inner) => {
                Error::KmsInvalidStateFault(inner)
            }
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::KmsNotFoundFault(inner) => {
                Error::KmsNotFoundFault(inner)
            }
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::ResourceAlreadyExistsFault(inner) => {
                Error::ResourceAlreadyExistsFault(inner)
            }
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::S3AccessDeniedFault(inner) => {
                Error::S3AccessDeniedFault(inner)
            }
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::S3ResourceNotFoundFault(inner) => {
                Error::S3ResourceNotFoundFault(inner)
            }
            crate::operation::start_replication_task_assessment_run::StartReplicationTaskAssessmentRunError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_replication::StopReplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_replication::StopReplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_replication::StopReplicationError> for Error {
    fn from(err: crate::operation::stop_replication::StopReplicationError) -> Self {
        match err {
            crate::operation::stop_replication::StopReplicationError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::stop_replication::StopReplicationError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::operation::stop_replication::StopReplicationError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::stop_replication::StopReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_replication_task::StopReplicationTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_replication_task::StopReplicationTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_replication_task::StopReplicationTaskError> for Error {
    fn from(err: crate::operation::stop_replication_task::StopReplicationTaskError) -> Self {
        match err {
            crate::operation::stop_replication_task::StopReplicationTaskError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::stop_replication_task::StopReplicationTaskError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::stop_replication_task::StopReplicationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test_connection::TestConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test_connection::TestConnectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::test_connection::TestConnectionError> for Error {
    fn from(err: crate::operation::test_connection::TestConnectionError) -> Self {
        match err {
            crate::operation::test_connection::TestConnectionError::AccessDeniedFault(inner) => Error::AccessDeniedFault(inner),
            crate::operation::test_connection::TestConnectionError::InvalidResourceStateFault(inner) => Error::InvalidResourceStateFault(inner),
            crate::operation::test_connection::TestConnectionError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::operation::test_connection::TestConnectionError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::test_connection::TestConnectionError::ResourceQuotaExceededFault(inner) => Error::ResourceQuotaExceededFault(inner),
            crate::operation::test_connection::TestConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_subscriptions_to_event_bridge::UpdateSubscriptionsToEventBridgeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_subscriptions_to_event_bridge::UpdateSubscriptionsToEventBridgeError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_subscriptions_to_event_bridge::UpdateSubscriptionsToEventBridgeError> for Error {
    fn from(err: crate::operation::update_subscriptions_to_event_bridge::UpdateSubscriptionsToEventBridgeError) -> Self {
        match err {
            crate::operation::update_subscriptions_to_event_bridge::UpdateSubscriptionsToEventBridgeError::AccessDeniedFault(inner) => {
                Error::AccessDeniedFault(inner)
            }
            crate::operation::update_subscriptions_to_event_bridge::UpdateSubscriptionsToEventBridgeError::InvalidResourceStateFault(inner) => {
                Error::InvalidResourceStateFault(inner)
            }
            crate::operation::update_subscriptions_to_event_bridge::UpdateSubscriptionsToEventBridgeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedFault(inner) => inner.source(),
            Error::CollectorNotFoundFault(inner) => inner.source(),
            Error::InsufficientResourceCapacityFault(inner) => inner.source(),
            Error::InvalidCertificateFault(inner) => inner.source(),
            Error::InvalidOperationFault(inner) => inner.source(),
            Error::InvalidResourceStateFault(inner) => inner.source(),
            Error::InvalidSubnet(inner) => inner.source(),
            Error::KmsAccessDeniedFault(inner) => inner.source(),
            Error::KmsDisabledFault(inner) => inner.source(),
            Error::KmsFault(inner) => inner.source(),
            Error::KmsInvalidStateFault(inner) => inner.source(),
            Error::KmsKeyNotAccessibleFault(inner) => inner.source(),
            Error::KmsNotFoundFault(inner) => inner.source(),
            Error::KmsThrottlingFault(inner) => inner.source(),
            Error::ReplicationSubnetGroupDoesNotCoverEnoughAZs(inner) => inner.source(),
            Error::ResourceAlreadyExistsFault(inner) => inner.source(),
            Error::ResourceNotFoundFault(inner) => inner.source(),
            Error::ResourceQuotaExceededFault(inner) => inner.source(),
            Error::S3AccessDeniedFault(inner) => inner.source(),
            Error::S3ResourceNotFoundFault(inner) => inner.source(),
            Error::SnsInvalidTopicFault(inner) => inner.source(),
            Error::SnsNoAuthorizationFault(inner) => inner.source(),
            Error::StorageQuotaExceededFault(inner) => inner.source(),
            Error::SubnetAlreadyInUse(inner) => inner.source(),
            Error::UpgradeDependencyFailureFault(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedFault(e) => e.request_id(),
            Self::CollectorNotFoundFault(e) => e.request_id(),
            Self::InsufficientResourceCapacityFault(e) => e.request_id(),
            Self::InvalidCertificateFault(e) => e.request_id(),
            Self::InvalidOperationFault(e) => e.request_id(),
            Self::InvalidResourceStateFault(e) => e.request_id(),
            Self::InvalidSubnet(e) => e.request_id(),
            Self::KmsAccessDeniedFault(e) => e.request_id(),
            Self::KmsDisabledFault(e) => e.request_id(),
            Self::KmsFault(e) => e.request_id(),
            Self::KmsInvalidStateFault(e) => e.request_id(),
            Self::KmsKeyNotAccessibleFault(e) => e.request_id(),
            Self::KmsNotFoundFault(e) => e.request_id(),
            Self::KmsThrottlingFault(e) => e.request_id(),
            Self::ReplicationSubnetGroupDoesNotCoverEnoughAZs(e) => e.request_id(),
            Self::ResourceAlreadyExistsFault(e) => e.request_id(),
            Self::ResourceNotFoundFault(e) => e.request_id(),
            Self::ResourceQuotaExceededFault(e) => e.request_id(),
            Self::S3AccessDeniedFault(e) => e.request_id(),
            Self::S3ResourceNotFoundFault(e) => e.request_id(),
            Self::SnsInvalidTopicFault(e) => e.request_id(),
            Self::SnsNoAuthorizationFault(e) => e.request_id(),
            Self::StorageQuotaExceededFault(e) => e.request_id(),
            Self::SubnetAlreadyInUse(e) => e.request_id(),
            Self::UpgradeDependencyFailureFault(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
