// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_endpoint<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Endpoint>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::EndpointBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "EndpointIdentifier" => {
                                builder = builder.set_endpoint_identifier(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "EndpointType" => {
                                builder = builder.set_endpoint_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ReplicationEndpointTypeValue::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "EngineName" => {
                                builder = builder.set_engine_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "EngineDisplayName" => {
                                builder = builder.set_engine_display_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Username" => {
                                builder = builder.set_username(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ServerName" => {
                                builder = builder.set_server_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Port" => {
                                builder = builder.set_port(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "DatabaseName" => {
                                builder = builder.set_database_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExtraConnectionAttributes" => {
                                builder = builder.set_extra_connection_attributes(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Status" => {
                                builder = builder.set_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "KmsKeyId" => {
                                builder = builder.set_kms_key_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "EndpointArn" => {
                                builder = builder.set_endpoint_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CertificateArn" => {
                                builder = builder.set_certificate_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SslMode" => {
                                builder = builder.set_ssl_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::DmsSslModeValue::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "ServiceAccessRoleArn" => {
                                builder = builder.set_service_access_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExternalTableDefinition" => {
                                builder = builder.set_external_table_definition(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExternalId" => {
                                builder = builder.set_external_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DynamoDbSettings" => {
                                builder = builder.set_dynamo_db_settings(
                                    crate::protocol_serde::shape_dynamo_db_settings::de_dynamo_db_settings(tokens)?
                                );
                            }
                            "S3Settings" => {
                                builder = builder.set_s3_settings(
                                    crate::protocol_serde::shape_s3_settings::de_s3_settings(
                                        tokens,
                                    )?,
                                );
                            }
                            "DmsTransferSettings" => {
                                builder = builder.set_dms_transfer_settings(
                                    crate::protocol_serde::shape_dms_transfer_settings::de_dms_transfer_settings(tokens)?
                                );
                            }
                            "MongoDbSettings" => {
                                builder = builder.set_mongo_db_settings(
                                    crate::protocol_serde::shape_mongo_db_settings::de_mongo_db_settings(tokens)?
                                );
                            }
                            "KinesisSettings" => {
                                builder = builder.set_kinesis_settings(
                                    crate::protocol_serde::shape_kinesis_settings::de_kinesis_settings(tokens)?
                                );
                            }
                            "KafkaSettings" => {
                                builder = builder.set_kafka_settings(
                                    crate::protocol_serde::shape_kafka_settings::de_kafka_settings(
                                        tokens,
                                    )?,
                                );
                            }
                            "ElasticsearchSettings" => {
                                builder = builder.set_elasticsearch_settings(
                                    crate::protocol_serde::shape_elasticsearch_settings::de_elasticsearch_settings(tokens)?
                                );
                            }
                            "NeptuneSettings" => {
                                builder = builder.set_neptune_settings(
                                    crate::protocol_serde::shape_neptune_settings::de_neptune_settings(tokens)?
                                );
                            }
                            "RedshiftSettings" => {
                                builder = builder.set_redshift_settings(
                                    crate::protocol_serde::shape_redshift_settings::de_redshift_settings(tokens)?
                                );
                            }
                            "PostgreSQLSettings" => {
                                builder = builder.set_postgre_sql_settings(
                                    crate::protocol_serde::shape_postgre_sql_settings::de_postgre_sql_settings(tokens)?
                                );
                            }
                            "MySQLSettings" => {
                                builder = builder.set_my_sql_settings(
                                    crate::protocol_serde::shape_my_sql_settings::de_my_sql_settings(tokens)?
                                );
                            }
                            "OracleSettings" => {
                                builder = builder.set_oracle_settings(
                                    crate::protocol_serde::shape_oracle_settings::de_oracle_settings(tokens)?
                                );
                            }
                            "SybaseSettings" => {
                                builder = builder.set_sybase_settings(
                                    crate::protocol_serde::shape_sybase_settings::de_sybase_settings(tokens)?
                                );
                            }
                            "MicrosoftSQLServerSettings" => {
                                builder = builder.set_microsoft_sql_server_settings(
                                    crate::protocol_serde::shape_microsoft_sql_server_settings::de_microsoft_sql_server_settings(tokens)?
                                );
                            }
                            "IBMDb2Settings" => {
                                builder = builder.set_ibm_db2_settings(
                                    crate::protocol_serde::shape_ibm_db2_settings::de_ibm_db2_settings(tokens)?
                                );
                            }
                            "DocDbSettings" => {
                                builder = builder.set_doc_db_settings(
                                    crate::protocol_serde::shape_doc_db_settings::de_doc_db_settings(tokens)?
                                );
                            }
                            "RedisSettings" => {
                                builder = builder.set_redis_settings(
                                    crate::protocol_serde::shape_redis_settings::de_redis_settings(
                                        tokens,
                                    )?,
                                );
                            }
                            "GcpMySQLSettings" => {
                                builder = builder.set_gcp_my_sql_settings(
                                    crate::protocol_serde::shape_gcp_my_sql_settings::de_gcp_my_sql_settings(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
