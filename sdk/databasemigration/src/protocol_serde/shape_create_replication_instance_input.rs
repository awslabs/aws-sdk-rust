// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_replication_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_replication_instance::CreateReplicationInstanceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.replication_instance_identifier {
        object
            .key("ReplicationInstanceIdentifier")
            .string(var_1.as_str());
    }
    if let Some(var_2) = &input.allocated_storage {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.replication_instance_class {
        object
            .key("ReplicationInstanceClass")
            .string(var_3.as_str());
    }
    if let Some(var_4) = &input.vpc_security_group_ids {
        let mut array_5 = object.key("VpcSecurityGroupIds").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_7.as_str());
    }
    if let Some(var_8) = &input.replication_subnet_group_identifier {
        object
            .key("ReplicationSubnetGroupIdentifier")
            .string(var_8.as_str());
    }
    if let Some(var_9) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_9.as_str());
    }
    if let Some(var_10) = &input.multi_az {
        object.key("MultiAZ").boolean(*var_10);
    }
    if let Some(var_11) = &input.engine_version {
        object.key("EngineVersion").string(var_11.as_str());
    }
    if let Some(var_12) = &input.auto_minor_version_upgrade {
        object.key("AutoMinorVersionUpgrade").boolean(*var_12);
    }
    if let Some(var_13) = &input.tags {
        let mut array_14 = object.key("Tags").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_17.as_str());
    }
    if let Some(var_18) = &input.publicly_accessible {
        object.key("PubliclyAccessible").boolean(*var_18);
    }
    if let Some(var_19) = &input.dns_name_servers {
        object.key("DnsNameServers").string(var_19.as_str());
    }
    if let Some(var_20) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_20.as_str());
    }
    if let Some(var_21) = &input.network_type {
        object.key("NetworkType").string(var_21.as_str());
    }
    Ok(())
}
