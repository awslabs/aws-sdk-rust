// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_migration_project_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_migration_project::CreateMigrationProjectInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.migration_project_name {
        object.key("MigrationProjectName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.source_data_provider_descriptors {
        let mut array_3 = object.key("SourceDataProviderDescriptors").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_data_provider_descriptor_definition::ser_data_provider_descriptor_definition(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.target_data_provider_descriptors {
        let mut array_7 = object.key("TargetDataProviderDescriptors").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_data_provider_descriptor_definition::ser_data_provider_descriptor_definition(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.instance_profile_identifier {
        object.key("InstanceProfileIdentifier").string(var_10.as_str());
    }
    if let Some(var_11) = &input.transformation_rules {
        object.key("TransformationRules").string(var_11.as_str());
    }
    if let Some(var_12) = &input.description {
        object.key("Description").string(var_12.as_str());
    }
    if let Some(var_13) = &input.tags {
        let mut array_14 = object.key("Tags").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.schema_conversion_application_attributes {
        #[allow(unused_mut)]
        let mut object_18 = object.key("SchemaConversionApplicationAttributes").start_object();
        crate::protocol_serde::shape_sc_application_attributes::ser_sc_application_attributes(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}
