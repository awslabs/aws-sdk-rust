// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_event_subscription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_event_subscription::CreateEventSubscriptionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.subscription_name {
        object.key("SubscriptionName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.source_type {
        object.key("SourceType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.event_categories {
        let mut array_5 = object.key("EventCategories").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.source_ids {
        let mut array_8 = object.key("SourceIds").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.enabled {
        object.key("Enabled").boolean(*var_10);
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("Tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
