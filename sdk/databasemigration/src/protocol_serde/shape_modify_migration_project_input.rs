// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_modify_migration_project_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::modify_migration_project::ModifyMigrationProjectInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.migration_project_identifier {
        object.key("MigrationProjectIdentifier").string(var_1.as_str());
    }
    if let Some(var_2) = &input.migration_project_name {
        object.key("MigrationProjectName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.source_data_provider_descriptors {
        let mut array_4 = object.key("SourceDataProviderDescriptors").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_data_provider_descriptor_definition::ser_data_provider_descriptor_definition(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.target_data_provider_descriptors {
        let mut array_8 = object.key("TargetDataProviderDescriptors").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_data_provider_descriptor_definition::ser_data_provider_descriptor_definition(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.instance_profile_identifier {
        object.key("InstanceProfileIdentifier").string(var_11.as_str());
    }
    if let Some(var_12) = &input.transformation_rules {
        object.key("TransformationRules").string(var_12.as_str());
    }
    if let Some(var_13) = &input.description {
        object.key("Description").string(var_13.as_str());
    }
    if let Some(var_14) = &input.schema_conversion_application_attributes {
        #[allow(unused_mut)]
        let mut object_15 = object.key("SchemaConversionApplicationAttributes").start_object();
        crate::protocol_serde::shape_sc_application_attributes::ser_sc_application_attributes(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}
