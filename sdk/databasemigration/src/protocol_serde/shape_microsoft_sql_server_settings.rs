// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_microsoft_sql_server_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MicrosoftSqlServerSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.bcp_packet_size {
        object.key("BcpPacketSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.database_name {
        object.key("DatabaseName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.control_tables_file_group {
        object.key("ControlTablesFileGroup").string(var_4.as_str());
    }
    if let Some(var_5) = &input.password {
        object.key("Password").string(var_5.as_str());
    }
    if let Some(var_6) = &input.query_single_always_on_node {
        object.key("QuerySingleAlwaysOnNode").boolean(*var_6);
    }
    if let Some(var_7) = &input.read_backup_only {
        object.key("ReadBackupOnly").boolean(*var_7);
    }
    if let Some(var_8) = &input.safeguard_policy {
        object.key("SafeguardPolicy").string(var_8.as_str());
    }
    if let Some(var_9) = &input.server_name {
        object.key("ServerName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.username {
        object.key("Username").string(var_10.as_str());
    }
    if let Some(var_11) = &input.use_bcp_full_load {
        object.key("UseBcpFullLoad").boolean(*var_11);
    }
    if let Some(var_12) = &input.use_third_party_backup_device {
        object.key("UseThirdPartyBackupDevice").boolean(*var_12);
    }
    if let Some(var_13) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_13.as_str());
    }
    if let Some(var_14) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_14.as_str());
    }
    if let Some(var_15) = &input.trim_space_in_char {
        object.key("TrimSpaceInChar").boolean(*var_15);
    }
    Ok(())
}

pub(crate) fn de_microsoft_sql_server_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::MicrosoftSqlServerSettings>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MicrosoftSqlServerSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Port" => {
                                builder = builder.set_port(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "BcpPacketSize" => {
                                builder = builder.set_bcp_packet_size(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "DatabaseName" => {
                                builder = builder.set_database_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ControlTablesFileGroup" => {
                                builder = builder.set_control_tables_file_group(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Password" => {
                                builder = builder.set_password(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "QuerySingleAlwaysOnNode" => {
                                builder = builder.set_query_single_always_on_node(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ReadBackupOnly" => {
                                builder = builder.set_read_backup_only(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "SafeguardPolicy" => {
                                builder = builder.set_safeguard_policy(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::SafeguardPolicy::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "ServerName" => {
                                builder = builder.set_server_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Username" => {
                                builder = builder.set_username(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "UseBcpFullLoad" => {
                                builder = builder.set_use_bcp_full_load(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "UseThirdPartyBackupDevice" => {
                                builder = builder.set_use_third_party_backup_device(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "SecretsManagerAccessRoleArn" => {
                                builder = builder.set_secrets_manager_access_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SecretsManagerSecretId" => {
                                builder = builder.set_secrets_manager_secret_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "TrimSpaceInChar" => {
                                builder = builder.set_trim_space_in_char(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
