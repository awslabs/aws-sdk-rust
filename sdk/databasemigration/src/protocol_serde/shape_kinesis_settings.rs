// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_kinesis_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::KinesisSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.stream_arn {
        object.key("StreamArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.message_format {
        object.key("MessageFormat").string(var_2.as_str());
    }
    if let Some(var_3) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.include_transaction_details {
        object.key("IncludeTransactionDetails").boolean(*var_4);
    }
    if let Some(var_5) = &input.include_partition_value {
        object.key("IncludePartitionValue").boolean(*var_5);
    }
    if let Some(var_6) = &input.partition_include_schema_table {
        object.key("PartitionIncludeSchemaTable").boolean(*var_6);
    }
    if let Some(var_7) = &input.include_table_alter_operations {
        object.key("IncludeTableAlterOperations").boolean(*var_7);
    }
    if let Some(var_8) = &input.include_control_details {
        object.key("IncludeControlDetails").boolean(*var_8);
    }
    if let Some(var_9) = &input.include_null_and_empty {
        object.key("IncludeNullAndEmpty").boolean(*var_9);
    }
    if let Some(var_10) = &input.no_hex_prefix {
        object.key("NoHexPrefix").boolean(*var_10);
    }
    Ok(())
}

pub(crate) fn de_kinesis_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::KinesisSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::KinesisSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "StreamArn" => {
                            builder = builder.set_stream_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MessageFormat" => {
                            builder = builder.set_message_format(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::MessageFormatValue::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ServiceAccessRoleArn" => {
                            builder = builder.set_service_access_role_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "IncludeTransactionDetails" => {
                            builder =
                                builder.set_include_transaction_details(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludePartitionValue" => {
                            builder = builder.set_include_partition_value(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "PartitionIncludeSchemaTable" => {
                            builder = builder
                                .set_partition_include_schema_table(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeTableAlterOperations" => {
                            builder = builder
                                .set_include_table_alter_operations(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeControlDetails" => {
                            builder = builder.set_include_control_details(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeNullAndEmpty" => {
                            builder = builder.set_include_null_and_empty(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "NoHexPrefix" => {
                            builder = builder.set_no_hex_prefix(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
