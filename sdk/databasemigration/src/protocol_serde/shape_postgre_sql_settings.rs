// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_postgre_sql_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PostgreSqlSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_1.as_str());
    }
    if let Some(var_2) = &input.capture_ddls {
        object.key("CaptureDdls").boolean(*var_2);
    }
    if let Some(var_3) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.database_name {
        object.key("DatabaseName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.ddl_artifacts_schema {
        object.key("DdlArtifactsSchema").string(var_5.as_str());
    }
    if let Some(var_6) = &input.execute_timeout {
        object.key("ExecuteTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.fail_tasks_on_lob_truncation {
        object.key("FailTasksOnLobTruncation").boolean(*var_7);
    }
    if let Some(var_8) = &input.heartbeat_enable {
        object.key("HeartbeatEnable").boolean(*var_8);
    }
    if let Some(var_9) = &input.heartbeat_schema {
        object.key("HeartbeatSchema").string(var_9.as_str());
    }
    if let Some(var_10) = &input.heartbeat_frequency {
        object.key("HeartbeatFrequency").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.password {
        object.key("Password").string(var_11.as_str());
    }
    if let Some(var_12) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.server_name {
        object.key("ServerName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.username {
        object.key("Username").string(var_14.as_str());
    }
    if let Some(var_15) = &input.slot_name {
        object.key("SlotName").string(var_15.as_str());
    }
    if let Some(var_16) = &input.plugin_name {
        object.key("PluginName").string(var_16.as_str());
    }
    if let Some(var_17) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_17.as_str());
    }
    if let Some(var_18) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_18.as_str());
    }
    if let Some(var_19) = &input.trim_space_in_char {
        object.key("TrimSpaceInChar").boolean(*var_19);
    }
    Ok(())
}

pub(crate) fn de_postgre_sql_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::PostgreSqlSettings>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PostgreSqlSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "AfterConnectScript" => {
                                builder = builder.set_after_connect_script(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CaptureDdls" => {
                                builder = builder.set_capture_ddls(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "MaxFileSize" => {
                                builder = builder.set_max_file_size(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "DatabaseName" => {
                                builder = builder.set_database_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DdlArtifactsSchema" => {
                                builder = builder.set_ddl_artifacts_schema(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExecuteTimeout" => {
                                builder = builder.set_execute_timeout(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "FailTasksOnLobTruncation" => {
                                builder = builder.set_fail_tasks_on_lob_truncation(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "HeartbeatEnable" => {
                                builder = builder.set_heartbeat_enable(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "HeartbeatSchema" => {
                                builder = builder.set_heartbeat_schema(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "HeartbeatFrequency" => {
                                builder = builder.set_heartbeat_frequency(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Password" => {
                                builder = builder.set_password(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Port" => {
                                builder = builder.set_port(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "ServerName" => {
                                builder = builder.set_server_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Username" => {
                                builder = builder.set_username(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SlotName" => {
                                builder = builder.set_slot_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PluginName" => {
                                builder = builder.set_plugin_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::PluginNameValue::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "SecretsManagerAccessRoleArn" => {
                                builder = builder.set_secrets_manager_access_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SecretsManagerSecretId" => {
                                builder = builder.set_secrets_manager_secret_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "TrimSpaceInChar" => {
                                builder = builder.set_trim_space_in_char(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
