// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_redshift_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RedshiftSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.accept_any_date {
        object.key("AcceptAnyDate").boolean(*var_1);
    }
    if let Some(var_2) = &input.after_connect_script {
        object.key("AfterConnectScript").string(var_2.as_str());
    }
    if let Some(var_3) = &input.bucket_folder {
        object.key("BucketFolder").string(var_3.as_str());
    }
    if let Some(var_4) = &input.bucket_name {
        object.key("BucketName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.case_sensitive_names {
        object.key("CaseSensitiveNames").boolean(*var_5);
    }
    if let Some(var_6) = &input.comp_update {
        object.key("CompUpdate").boolean(*var_6);
    }
    if let Some(var_7) = &input.connection_timeout {
        object.key("ConnectionTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.database_name {
        object.key("DatabaseName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.date_format {
        object.key("DateFormat").string(var_9.as_str());
    }
    if let Some(var_10) = &input.empty_as_null {
        object.key("EmptyAsNull").boolean(*var_10);
    }
    if let Some(var_11) = &input.encryption_mode {
        object.key("EncryptionMode").string(var_11.as_str());
    }
    if let Some(var_12) = &input.explicit_ids {
        object.key("ExplicitIds").boolean(*var_12);
    }
    if let Some(var_13) = &input.file_transfer_upload_streams {
        object.key("FileTransferUploadStreams").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.load_timeout {
        object.key("LoadTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.max_file_size {
        object.key("MaxFileSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.password {
        object.key("Password").string(var_16.as_str());
    }
    if let Some(var_17) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.remove_quotes {
        object.key("RemoveQuotes").boolean(*var_18);
    }
    if let Some(var_19) = &input.replace_invalid_chars {
        object.key("ReplaceInvalidChars").string(var_19.as_str());
    }
    if let Some(var_20) = &input.replace_chars {
        object.key("ReplaceChars").string(var_20.as_str());
    }
    if let Some(var_21) = &input.server_name {
        object.key("ServerName").string(var_21.as_str());
    }
    if let Some(var_22) = &input.service_access_role_arn {
        object.key("ServiceAccessRoleArn").string(var_22.as_str());
    }
    if let Some(var_23) = &input.server_side_encryption_kms_key_id {
        object
            .key("ServerSideEncryptionKmsKeyId")
            .string(var_23.as_str());
    }
    if let Some(var_24) = &input.time_format {
        object.key("TimeFormat").string(var_24.as_str());
    }
    if let Some(var_25) = &input.trim_blanks {
        object.key("TrimBlanks").boolean(*var_25);
    }
    if let Some(var_26) = &input.truncate_columns {
        object.key("TruncateColumns").boolean(*var_26);
    }
    if let Some(var_27) = &input.username {
        object.key("Username").string(var_27.as_str());
    }
    if let Some(var_28) = &input.write_buffer_size {
        object.key("WriteBufferSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_28).into()),
        );
    }
    if let Some(var_29) = &input.secrets_manager_access_role_arn {
        object
            .key("SecretsManagerAccessRoleArn")
            .string(var_29.as_str());
    }
    if let Some(var_30) = &input.secrets_manager_secret_id {
        object.key("SecretsManagerSecretId").string(var_30.as_str());
    }
    Ok(())
}

pub(crate) fn de_redshift_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::RedshiftSettings>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RedshiftSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "AcceptAnyDate" => {
                                builder = builder.set_accept_any_date(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "AfterConnectScript" => {
                                builder = builder.set_after_connect_script(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "BucketFolder" => {
                                builder = builder.set_bucket_folder(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "BucketName" => {
                                builder = builder.set_bucket_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CaseSensitiveNames" => {
                                builder = builder.set_case_sensitive_names(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "CompUpdate" => {
                                builder = builder.set_comp_update(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ConnectionTimeout" => {
                                builder = builder.set_connection_timeout(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "DatabaseName" => {
                                builder = builder.set_database_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DateFormat" => {
                                builder = builder.set_date_format(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "EmptyAsNull" => {
                                builder = builder.set_empty_as_null(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "EncryptionMode" => {
                                builder = builder.set_encryption_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::EncryptionModeValue::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "ExplicitIds" => {
                                builder = builder.set_explicit_ids(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "FileTransferUploadStreams" => {
                                builder = builder.set_file_transfer_upload_streams(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "LoadTimeout" => {
                                builder = builder.set_load_timeout(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "MaxFileSize" => {
                                builder = builder.set_max_file_size(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Password" => {
                                builder = builder.set_password(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Port" => {
                                builder = builder.set_port(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "RemoveQuotes" => {
                                builder = builder.set_remove_quotes(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ReplaceInvalidChars" => {
                                builder = builder.set_replace_invalid_chars(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ReplaceChars" => {
                                builder = builder.set_replace_chars(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ServerName" => {
                                builder = builder.set_server_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ServiceAccessRoleArn" => {
                                builder = builder.set_service_access_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ServerSideEncryptionKmsKeyId" => {
                                builder = builder.set_server_side_encryption_kms_key_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "TimeFormat" => {
                                builder = builder.set_time_format(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "TrimBlanks" => {
                                builder = builder.set_trim_blanks(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "TruncateColumns" => {
                                builder = builder.set_truncate_columns(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "Username" => {
                                builder = builder.set_username(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "WriteBufferSize" => {
                                builder = builder.set_write_buffer_size(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "SecretsManagerAccessRoleArn" => {
                                builder = builder.set_secrets_manager_access_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SecretsManagerSecretId" => {
                                builder = builder.set_secrets_manager_secret_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
