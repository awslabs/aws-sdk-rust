// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_create_replication_instance_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_replication_instance::CreateReplicationInstanceOutput,
    crate::operation::create_replication_instance::CreateReplicationInstanceError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedFault" => crate::operation::create_replication_instance::CreateReplicationInstanceError::AccessDeniedFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedFaultBuilder::default();
                output = crate::protocol_serde::shape_access_denied_fault::de_access_denied_fault_json_err(_response_body, output)
                    .map_err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InsufficientResourceCapacityFault" => {
            crate::operation::create_replication_instance::CreateReplicationInstanceError::InsufficientResourceCapacityFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InsufficientResourceCapacityFaultBuilder::default();
                    output = crate::protocol_serde::shape_insufficient_resource_capacity_fault::de_insufficient_resource_capacity_fault_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidResourceStateFault" => crate::operation::create_replication_instance::CreateReplicationInstanceError::InvalidResourceStateFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidResourceStateFaultBuilder::default();
                output = crate::protocol_serde::shape_invalid_resource_state_fault::de_invalid_resource_state_fault_json_err(_response_body, output)
                    .map_err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidSubnet" => crate::operation::create_replication_instance::CreateReplicationInstanceError::InvalidSubnet({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidSubnetBuilder::default();
                output = crate::protocol_serde::shape_invalid_subnet::de_invalid_subnet_json_err(_response_body, output)
                    .map_err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "KMSKeyNotAccessibleFault" => crate::operation::create_replication_instance::CreateReplicationInstanceError::KmsKeyNotAccessibleFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::KmsKeyNotAccessibleFaultBuilder::default();
                output = crate::protocol_serde::shape_kms_key_not_accessible_fault::de_kms_key_not_accessible_fault_json_err(_response_body, output)
                    .map_err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ReplicationSubnetGroupDoesNotCoverEnoughAZs" => {
            crate::operation::create_replication_instance::CreateReplicationInstanceError::ReplicationSubnetGroupDoesNotCoverEnoughAZs({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ReplicationSubnetGroupDoesNotCoverEnoughAZsBuilder::default();
                    output = crate::protocol_serde::shape_replication_subnet_group_does_not_cover_enough_azs::de_replication_subnet_group_does_not_cover_enough_azs_json_err(_response_body, output).map_err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceAlreadyExistsFault" => crate::operation::create_replication_instance::CreateReplicationInstanceError::ResourceAlreadyExistsFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ResourceAlreadyExistsFaultBuilder::default();
                output =
                    crate::protocol_serde::shape_resource_already_exists_fault::de_resource_already_exists_fault_json_err(_response_body, output)
                        .map_err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ResourceNotFoundFault" => crate::operation::create_replication_instance::CreateReplicationInstanceError::ResourceNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ResourceNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_resource_not_found_fault::de_resource_not_found_fault_json_err(_response_body, output)
                    .map_err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ResourceQuotaExceededFault" => crate::operation::create_replication_instance::CreateReplicationInstanceError::ResourceQuotaExceededFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ResourceQuotaExceededFaultBuilder::default();
                output =
                    crate::protocol_serde::shape_resource_quota_exceeded_fault::de_resource_quota_exceeded_fault_json_err(_response_body, output)
                        .map_err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "StorageQuotaExceededFault" => crate::operation::create_replication_instance::CreateReplicationInstanceError::StorageQuotaExceededFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::StorageQuotaExceededFaultBuilder::default();
                output = crate::protocol_serde::shape_storage_quota_exceeded_fault::de_storage_quota_exceeded_fault_json_err(_response_body, output)
                    .map_err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::create_replication_instance::CreateReplicationInstanceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_replication_instance_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_replication_instance::CreateReplicationInstanceOutput,
    crate::operation::create_replication_instance::CreateReplicationInstanceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::create_replication_instance::builders::CreateReplicationInstanceOutputBuilder::default();
        output = crate::protocol_serde::shape_create_replication_instance::de_create_replication_instance(_response_body, output)
            .map_err(crate::operation::create_replication_instance::CreateReplicationInstanceError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_create_replication_instance_input(
    input: &crate::operation::create_replication_instance::CreateReplicationInstanceInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_create_replication_instance_input::ser_create_replication_instance_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_create_replication_instance(
    value: &[u8],
    mut builder: crate::operation::create_replication_instance::builders::CreateReplicationInstanceOutputBuilder,
) -> Result<
    crate::operation::create_replication_instance::builders::CreateReplicationInstanceOutputBuilder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "ReplicationInstance" => {
                    builder = builder.set_replication_instance(crate::protocol_serde::shape_replication_instance::de_replication_instance(tokens)?);
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
