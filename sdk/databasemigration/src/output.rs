// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TestConnectionOutput {
    /// <p>The connection tested.</p>
    pub connection: std::option::Option<crate::model::Connection>,
}
impl std::fmt::Debug for TestConnectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TestConnectionOutput");
        formatter.field("connection", &self.connection);
        formatter.finish()
    }
}
/// See [`TestConnectionOutput`](crate::output::TestConnectionOutput)
pub mod test_connection_output {
    /// A builder for [`TestConnectionOutput`](crate::output::TestConnectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connection: std::option::Option<crate::model::Connection>,
    }
    impl Builder {
        /// <p>The connection tested.</p>
        pub fn connection(mut self, input: crate::model::Connection) -> Self {
            self.connection = Some(input);
            self
        }
        pub fn set_connection(
            mut self,
            input: std::option::Option<crate::model::Connection>,
        ) -> Self {
            self.connection = input;
            self
        }
        /// Consumes the builder and constructs a [`TestConnectionOutput`](crate::output::TestConnectionOutput)
        pub fn build(self) -> crate::output::TestConnectionOutput {
            crate::output::TestConnectionOutput {
                connection: self.connection,
            }
        }
    }
}
impl TestConnectionOutput {
    /// Creates a new builder-style object to manufacture [`TestConnectionOutput`](crate::output::TestConnectionOutput)
    pub fn builder() -> crate::output::test_connection_output::Builder {
        crate::output::test_connection_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopReplicationTaskOutput {
    /// <p>The replication task stopped.</p>
    pub replication_task: std::option::Option<crate::model::ReplicationTask>,
}
impl std::fmt::Debug for StopReplicationTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopReplicationTaskOutput");
        formatter.field("replication_task", &self.replication_task);
        formatter.finish()
    }
}
/// See [`StopReplicationTaskOutput`](crate::output::StopReplicationTaskOutput)
pub mod stop_replication_task_output {
    /// A builder for [`StopReplicationTaskOutput`](crate::output::StopReplicationTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_task: std::option::Option<crate::model::ReplicationTask>,
    }
    impl Builder {
        /// <p>The replication task stopped.</p>
        pub fn replication_task(mut self, input: crate::model::ReplicationTask) -> Self {
            self.replication_task = Some(input);
            self
        }
        pub fn set_replication_task(
            mut self,
            input: std::option::Option<crate::model::ReplicationTask>,
        ) -> Self {
            self.replication_task = input;
            self
        }
        /// Consumes the builder and constructs a [`StopReplicationTaskOutput`](crate::output::StopReplicationTaskOutput)
        pub fn build(self) -> crate::output::StopReplicationTaskOutput {
            crate::output::StopReplicationTaskOutput {
                replication_task: self.replication_task,
            }
        }
    }
}
impl StopReplicationTaskOutput {
    /// Creates a new builder-style object to manufacture [`StopReplicationTaskOutput`](crate::output::StopReplicationTaskOutput)
    pub fn builder() -> crate::output::stop_replication_task_output::Builder {
        crate::output::stop_replication_task_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartReplicationTaskAssessmentRunOutput {
    /// <p>The premigration assessment run that was started.</p>
    pub replication_task_assessment_run:
        std::option::Option<crate::model::ReplicationTaskAssessmentRun>,
}
impl std::fmt::Debug for StartReplicationTaskAssessmentRunOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartReplicationTaskAssessmentRunOutput");
        formatter.field(
            "replication_task_assessment_run",
            &self.replication_task_assessment_run,
        );
        formatter.finish()
    }
}
/// See [`StartReplicationTaskAssessmentRunOutput`](crate::output::StartReplicationTaskAssessmentRunOutput)
pub mod start_replication_task_assessment_run_output {
    /// A builder for [`StartReplicationTaskAssessmentRunOutput`](crate::output::StartReplicationTaskAssessmentRunOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_task_assessment_run:
            std::option::Option<crate::model::ReplicationTaskAssessmentRun>,
    }
    impl Builder {
        /// <p>The premigration assessment run that was started.</p>
        pub fn replication_task_assessment_run(
            mut self,
            input: crate::model::ReplicationTaskAssessmentRun,
        ) -> Self {
            self.replication_task_assessment_run = Some(input);
            self
        }
        pub fn set_replication_task_assessment_run(
            mut self,
            input: std::option::Option<crate::model::ReplicationTaskAssessmentRun>,
        ) -> Self {
            self.replication_task_assessment_run = input;
            self
        }
        /// Consumes the builder and constructs a [`StartReplicationTaskAssessmentRunOutput`](crate::output::StartReplicationTaskAssessmentRunOutput)
        pub fn build(self) -> crate::output::StartReplicationTaskAssessmentRunOutput {
            crate::output::StartReplicationTaskAssessmentRunOutput {
                replication_task_assessment_run: self.replication_task_assessment_run,
            }
        }
    }
}
impl StartReplicationTaskAssessmentRunOutput {
    /// Creates a new builder-style object to manufacture [`StartReplicationTaskAssessmentRunOutput`](crate::output::StartReplicationTaskAssessmentRunOutput)
    pub fn builder() -> crate::output::start_replication_task_assessment_run_output::Builder {
        crate::output::start_replication_task_assessment_run_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartReplicationTaskAssessmentOutput {
    /// <p> The assessed replication task. </p>
    pub replication_task: std::option::Option<crate::model::ReplicationTask>,
}
impl std::fmt::Debug for StartReplicationTaskAssessmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartReplicationTaskAssessmentOutput");
        formatter.field("replication_task", &self.replication_task);
        formatter.finish()
    }
}
/// See [`StartReplicationTaskAssessmentOutput`](crate::output::StartReplicationTaskAssessmentOutput)
pub mod start_replication_task_assessment_output {
    /// A builder for [`StartReplicationTaskAssessmentOutput`](crate::output::StartReplicationTaskAssessmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_task: std::option::Option<crate::model::ReplicationTask>,
    }
    impl Builder {
        /// <p> The assessed replication task. </p>
        pub fn replication_task(mut self, input: crate::model::ReplicationTask) -> Self {
            self.replication_task = Some(input);
            self
        }
        pub fn set_replication_task(
            mut self,
            input: std::option::Option<crate::model::ReplicationTask>,
        ) -> Self {
            self.replication_task = input;
            self
        }
        /// Consumes the builder and constructs a [`StartReplicationTaskAssessmentOutput`](crate::output::StartReplicationTaskAssessmentOutput)
        pub fn build(self) -> crate::output::StartReplicationTaskAssessmentOutput {
            crate::output::StartReplicationTaskAssessmentOutput {
                replication_task: self.replication_task,
            }
        }
    }
}
impl StartReplicationTaskAssessmentOutput {
    /// Creates a new builder-style object to manufacture [`StartReplicationTaskAssessmentOutput`](crate::output::StartReplicationTaskAssessmentOutput)
    pub fn builder() -> crate::output::start_replication_task_assessment_output::Builder {
        crate::output::start_replication_task_assessment_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartReplicationTaskOutput {
    /// <p>The replication task started.</p>
    pub replication_task: std::option::Option<crate::model::ReplicationTask>,
}
impl std::fmt::Debug for StartReplicationTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartReplicationTaskOutput");
        formatter.field("replication_task", &self.replication_task);
        formatter.finish()
    }
}
/// See [`StartReplicationTaskOutput`](crate::output::StartReplicationTaskOutput)
pub mod start_replication_task_output {
    /// A builder for [`StartReplicationTaskOutput`](crate::output::StartReplicationTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_task: std::option::Option<crate::model::ReplicationTask>,
    }
    impl Builder {
        /// <p>The replication task started.</p>
        pub fn replication_task(mut self, input: crate::model::ReplicationTask) -> Self {
            self.replication_task = Some(input);
            self
        }
        pub fn set_replication_task(
            mut self,
            input: std::option::Option<crate::model::ReplicationTask>,
        ) -> Self {
            self.replication_task = input;
            self
        }
        /// Consumes the builder and constructs a [`StartReplicationTaskOutput`](crate::output::StartReplicationTaskOutput)
        pub fn build(self) -> crate::output::StartReplicationTaskOutput {
            crate::output::StartReplicationTaskOutput {
                replication_task: self.replication_task,
            }
        }
    }
}
impl StartReplicationTaskOutput {
    /// Creates a new builder-style object to manufacture [`StartReplicationTaskOutput`](crate::output::StartReplicationTaskOutput)
    pub fn builder() -> crate::output::start_replication_task_output::Builder {
        crate::output::start_replication_task_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveTagsFromResourceOutput {}
impl std::fmt::Debug for RemoveTagsFromResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveTagsFromResourceOutput");
        formatter.finish()
    }
}
/// See [`RemoveTagsFromResourceOutput`](crate::output::RemoveTagsFromResourceOutput)
pub mod remove_tags_from_resource_output {
    /// A builder for [`RemoveTagsFromResourceOutput`](crate::output::RemoveTagsFromResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RemoveTagsFromResourceOutput`](crate::output::RemoveTagsFromResourceOutput)
        pub fn build(self) -> crate::output::RemoveTagsFromResourceOutput {
            crate::output::RemoveTagsFromResourceOutput {}
        }
    }
}
impl RemoveTagsFromResourceOutput {
    /// Creates a new builder-style object to manufacture [`RemoveTagsFromResourceOutput`](crate::output::RemoveTagsFromResourceOutput)
    pub fn builder() -> crate::output::remove_tags_from_resource_output::Builder {
        crate::output::remove_tags_from_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReloadTablesOutput {
    /// <p>The Amazon Resource Name (ARN) of the replication task. </p>
    pub replication_task_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ReloadTablesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReloadTablesOutput");
        formatter.field("replication_task_arn", &self.replication_task_arn);
        formatter.finish()
    }
}
/// See [`ReloadTablesOutput`](crate::output::ReloadTablesOutput)
pub mod reload_tables_output {
    /// A builder for [`ReloadTablesOutput`](crate::output::ReloadTablesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_task_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the replication task. </p>
        pub fn replication_task_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.replication_task_arn = Some(input.into());
            self
        }
        pub fn set_replication_task_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.replication_task_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`ReloadTablesOutput`](crate::output::ReloadTablesOutput)
        pub fn build(self) -> crate::output::ReloadTablesOutput {
            crate::output::ReloadTablesOutput {
                replication_task_arn: self.replication_task_arn,
            }
        }
    }
}
impl ReloadTablesOutput {
    /// Creates a new builder-style object to manufacture [`ReloadTablesOutput`](crate::output::ReloadTablesOutput)
    pub fn builder() -> crate::output::reload_tables_output::Builder {
        crate::output::reload_tables_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RefreshSchemasOutput {
    /// <p>The status of the refreshed schema.</p>
    pub refresh_schemas_status: std::option::Option<crate::model::RefreshSchemasStatus>,
}
impl std::fmt::Debug for RefreshSchemasOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RefreshSchemasOutput");
        formatter.field("refresh_schemas_status", &self.refresh_schemas_status);
        formatter.finish()
    }
}
/// See [`RefreshSchemasOutput`](crate::output::RefreshSchemasOutput)
pub mod refresh_schemas_output {
    /// A builder for [`RefreshSchemasOutput`](crate::output::RefreshSchemasOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) refresh_schemas_status: std::option::Option<crate::model::RefreshSchemasStatus>,
    }
    impl Builder {
        /// <p>The status of the refreshed schema.</p>
        pub fn refresh_schemas_status(mut self, input: crate::model::RefreshSchemasStatus) -> Self {
            self.refresh_schemas_status = Some(input);
            self
        }
        pub fn set_refresh_schemas_status(
            mut self,
            input: std::option::Option<crate::model::RefreshSchemasStatus>,
        ) -> Self {
            self.refresh_schemas_status = input;
            self
        }
        /// Consumes the builder and constructs a [`RefreshSchemasOutput`](crate::output::RefreshSchemasOutput)
        pub fn build(self) -> crate::output::RefreshSchemasOutput {
            crate::output::RefreshSchemasOutput {
                refresh_schemas_status: self.refresh_schemas_status,
            }
        }
    }
}
impl RefreshSchemasOutput {
    /// Creates a new builder-style object to manufacture [`RefreshSchemasOutput`](crate::output::RefreshSchemasOutput)
    pub fn builder() -> crate::output::refresh_schemas_output::Builder {
        crate::output::refresh_schemas_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RebootReplicationInstanceOutput {
    /// <p>The replication instance that is being rebooted. </p>
    pub replication_instance: std::option::Option<crate::model::ReplicationInstance>,
}
impl std::fmt::Debug for RebootReplicationInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RebootReplicationInstanceOutput");
        formatter.field("replication_instance", &self.replication_instance);
        formatter.finish()
    }
}
/// See [`RebootReplicationInstanceOutput`](crate::output::RebootReplicationInstanceOutput)
pub mod reboot_replication_instance_output {
    /// A builder for [`RebootReplicationInstanceOutput`](crate::output::RebootReplicationInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_instance: std::option::Option<crate::model::ReplicationInstance>,
    }
    impl Builder {
        /// <p>The replication instance that is being rebooted. </p>
        pub fn replication_instance(mut self, input: crate::model::ReplicationInstance) -> Self {
            self.replication_instance = Some(input);
            self
        }
        pub fn set_replication_instance(
            mut self,
            input: std::option::Option<crate::model::ReplicationInstance>,
        ) -> Self {
            self.replication_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`RebootReplicationInstanceOutput`](crate::output::RebootReplicationInstanceOutput)
        pub fn build(self) -> crate::output::RebootReplicationInstanceOutput {
            crate::output::RebootReplicationInstanceOutput {
                replication_instance: self.replication_instance,
            }
        }
    }
}
impl RebootReplicationInstanceOutput {
    /// Creates a new builder-style object to manufacture [`RebootReplicationInstanceOutput`](crate::output::RebootReplicationInstanceOutput)
    pub fn builder() -> crate::output::reboot_replication_instance_output::Builder {
        crate::output::reboot_replication_instance_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MoveReplicationTaskOutput {
    /// <p>The replication task that was moved.</p>
    pub replication_task: std::option::Option<crate::model::ReplicationTask>,
}
impl std::fmt::Debug for MoveReplicationTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MoveReplicationTaskOutput");
        formatter.field("replication_task", &self.replication_task);
        formatter.finish()
    }
}
/// See [`MoveReplicationTaskOutput`](crate::output::MoveReplicationTaskOutput)
pub mod move_replication_task_output {
    /// A builder for [`MoveReplicationTaskOutput`](crate::output::MoveReplicationTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_task: std::option::Option<crate::model::ReplicationTask>,
    }
    impl Builder {
        /// <p>The replication task that was moved.</p>
        pub fn replication_task(mut self, input: crate::model::ReplicationTask) -> Self {
            self.replication_task = Some(input);
            self
        }
        pub fn set_replication_task(
            mut self,
            input: std::option::Option<crate::model::ReplicationTask>,
        ) -> Self {
            self.replication_task = input;
            self
        }
        /// Consumes the builder and constructs a [`MoveReplicationTaskOutput`](crate::output::MoveReplicationTaskOutput)
        pub fn build(self) -> crate::output::MoveReplicationTaskOutput {
            crate::output::MoveReplicationTaskOutput {
                replication_task: self.replication_task,
            }
        }
    }
}
impl MoveReplicationTaskOutput {
    /// Creates a new builder-style object to manufacture [`MoveReplicationTaskOutput`](crate::output::MoveReplicationTaskOutput)
    pub fn builder() -> crate::output::move_replication_task_output::Builder {
        crate::output::move_replication_task_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyReplicationTaskOutput {
    /// <p>The replication task that was modified.</p>
    pub replication_task: std::option::Option<crate::model::ReplicationTask>,
}
impl std::fmt::Debug for ModifyReplicationTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyReplicationTaskOutput");
        formatter.field("replication_task", &self.replication_task);
        formatter.finish()
    }
}
/// See [`ModifyReplicationTaskOutput`](crate::output::ModifyReplicationTaskOutput)
pub mod modify_replication_task_output {
    /// A builder for [`ModifyReplicationTaskOutput`](crate::output::ModifyReplicationTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_task: std::option::Option<crate::model::ReplicationTask>,
    }
    impl Builder {
        /// <p>The replication task that was modified.</p>
        pub fn replication_task(mut self, input: crate::model::ReplicationTask) -> Self {
            self.replication_task = Some(input);
            self
        }
        pub fn set_replication_task(
            mut self,
            input: std::option::Option<crate::model::ReplicationTask>,
        ) -> Self {
            self.replication_task = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyReplicationTaskOutput`](crate::output::ModifyReplicationTaskOutput)
        pub fn build(self) -> crate::output::ModifyReplicationTaskOutput {
            crate::output::ModifyReplicationTaskOutput {
                replication_task: self.replication_task,
            }
        }
    }
}
impl ModifyReplicationTaskOutput {
    /// Creates a new builder-style object to manufacture [`ModifyReplicationTaskOutput`](crate::output::ModifyReplicationTaskOutput)
    pub fn builder() -> crate::output::modify_replication_task_output::Builder {
        crate::output::modify_replication_task_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyReplicationSubnetGroupOutput {
    /// <p>The modified replication subnet group.</p>
    pub replication_subnet_group: std::option::Option<crate::model::ReplicationSubnetGroup>,
}
impl std::fmt::Debug for ModifyReplicationSubnetGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyReplicationSubnetGroupOutput");
        formatter.field("replication_subnet_group", &self.replication_subnet_group);
        formatter.finish()
    }
}
/// See [`ModifyReplicationSubnetGroupOutput`](crate::output::ModifyReplicationSubnetGroupOutput)
pub mod modify_replication_subnet_group_output {
    /// A builder for [`ModifyReplicationSubnetGroupOutput`](crate::output::ModifyReplicationSubnetGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_subnet_group:
            std::option::Option<crate::model::ReplicationSubnetGroup>,
    }
    impl Builder {
        /// <p>The modified replication subnet group.</p>
        pub fn replication_subnet_group(
            mut self,
            input: crate::model::ReplicationSubnetGroup,
        ) -> Self {
            self.replication_subnet_group = Some(input);
            self
        }
        pub fn set_replication_subnet_group(
            mut self,
            input: std::option::Option<crate::model::ReplicationSubnetGroup>,
        ) -> Self {
            self.replication_subnet_group = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyReplicationSubnetGroupOutput`](crate::output::ModifyReplicationSubnetGroupOutput)
        pub fn build(self) -> crate::output::ModifyReplicationSubnetGroupOutput {
            crate::output::ModifyReplicationSubnetGroupOutput {
                replication_subnet_group: self.replication_subnet_group,
            }
        }
    }
}
impl ModifyReplicationSubnetGroupOutput {
    /// Creates a new builder-style object to manufacture [`ModifyReplicationSubnetGroupOutput`](crate::output::ModifyReplicationSubnetGroupOutput)
    pub fn builder() -> crate::output::modify_replication_subnet_group_output::Builder {
        crate::output::modify_replication_subnet_group_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyReplicationInstanceOutput {
    /// <p>The modified replication instance.</p>
    pub replication_instance: std::option::Option<crate::model::ReplicationInstance>,
}
impl std::fmt::Debug for ModifyReplicationInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyReplicationInstanceOutput");
        formatter.field("replication_instance", &self.replication_instance);
        formatter.finish()
    }
}
/// See [`ModifyReplicationInstanceOutput`](crate::output::ModifyReplicationInstanceOutput)
pub mod modify_replication_instance_output {
    /// A builder for [`ModifyReplicationInstanceOutput`](crate::output::ModifyReplicationInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_instance: std::option::Option<crate::model::ReplicationInstance>,
    }
    impl Builder {
        /// <p>The modified replication instance.</p>
        pub fn replication_instance(mut self, input: crate::model::ReplicationInstance) -> Self {
            self.replication_instance = Some(input);
            self
        }
        pub fn set_replication_instance(
            mut self,
            input: std::option::Option<crate::model::ReplicationInstance>,
        ) -> Self {
            self.replication_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyReplicationInstanceOutput`](crate::output::ModifyReplicationInstanceOutput)
        pub fn build(self) -> crate::output::ModifyReplicationInstanceOutput {
            crate::output::ModifyReplicationInstanceOutput {
                replication_instance: self.replication_instance,
            }
        }
    }
}
impl ModifyReplicationInstanceOutput {
    /// Creates a new builder-style object to manufacture [`ModifyReplicationInstanceOutput`](crate::output::ModifyReplicationInstanceOutput)
    pub fn builder() -> crate::output::modify_replication_instance_output::Builder {
        crate::output::modify_replication_instance_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyEventSubscriptionOutput {
    /// <p>The modified event subscription.</p>
    pub event_subscription: std::option::Option<crate::model::EventSubscription>,
}
impl std::fmt::Debug for ModifyEventSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyEventSubscriptionOutput");
        formatter.field("event_subscription", &self.event_subscription);
        formatter.finish()
    }
}
/// See [`ModifyEventSubscriptionOutput`](crate::output::ModifyEventSubscriptionOutput)
pub mod modify_event_subscription_output {
    /// A builder for [`ModifyEventSubscriptionOutput`](crate::output::ModifyEventSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_subscription: std::option::Option<crate::model::EventSubscription>,
    }
    impl Builder {
        /// <p>The modified event subscription.</p>
        pub fn event_subscription(mut self, input: crate::model::EventSubscription) -> Self {
            self.event_subscription = Some(input);
            self
        }
        pub fn set_event_subscription(
            mut self,
            input: std::option::Option<crate::model::EventSubscription>,
        ) -> Self {
            self.event_subscription = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyEventSubscriptionOutput`](crate::output::ModifyEventSubscriptionOutput)
        pub fn build(self) -> crate::output::ModifyEventSubscriptionOutput {
            crate::output::ModifyEventSubscriptionOutput {
                event_subscription: self.event_subscription,
            }
        }
    }
}
impl ModifyEventSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`ModifyEventSubscriptionOutput`](crate::output::ModifyEventSubscriptionOutput)
    pub fn builder() -> crate::output::modify_event_subscription_output::Builder {
        crate::output::modify_event_subscription_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyEndpointOutput {
    /// <p>The modified endpoint.</p>
    pub endpoint: std::option::Option<crate::model::Endpoint>,
}
impl std::fmt::Debug for ModifyEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyEndpointOutput");
        formatter.field("endpoint", &self.endpoint);
        formatter.finish()
    }
}
/// See [`ModifyEndpointOutput`](crate::output::ModifyEndpointOutput)
pub mod modify_endpoint_output {
    /// A builder for [`ModifyEndpointOutput`](crate::output::ModifyEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint: std::option::Option<crate::model::Endpoint>,
    }
    impl Builder {
        /// <p>The modified endpoint.</p>
        pub fn endpoint(mut self, input: crate::model::Endpoint) -> Self {
            self.endpoint = Some(input);
            self
        }
        pub fn set_endpoint(mut self, input: std::option::Option<crate::model::Endpoint>) -> Self {
            self.endpoint = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyEndpointOutput`](crate::output::ModifyEndpointOutput)
        pub fn build(self) -> crate::output::ModifyEndpointOutput {
            crate::output::ModifyEndpointOutput {
                endpoint: self.endpoint,
            }
        }
    }
}
impl ModifyEndpointOutput {
    /// Creates a new builder-style object to manufacture [`ModifyEndpointOutput`](crate::output::ModifyEndpointOutput)
    pub fn builder() -> crate::output::modify_endpoint_output::Builder {
        crate::output::modify_endpoint_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>A list of tags for the resource.</p>
    pub tag_list: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tag_list", &self.tag_list);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tag_list: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        pub fn tag_list(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tag_list.unwrap_or_default();
            v.push(input.into());
            self.tag_list = Some(v);
            self
        }
        pub fn set_tag_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tag_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tag_list: self.tag_list,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImportCertificateOutput {
    /// <p>The certificate to be uploaded.</p>
    pub certificate: std::option::Option<crate::model::Certificate>,
}
impl std::fmt::Debug for ImportCertificateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportCertificateOutput");
        formatter.field("certificate", &self.certificate);
        formatter.finish()
    }
}
/// See [`ImportCertificateOutput`](crate::output::ImportCertificateOutput)
pub mod import_certificate_output {
    /// A builder for [`ImportCertificateOutput`](crate::output::ImportCertificateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate: std::option::Option<crate::model::Certificate>,
    }
    impl Builder {
        /// <p>The certificate to be uploaded.</p>
        pub fn certificate(mut self, input: crate::model::Certificate) -> Self {
            self.certificate = Some(input);
            self
        }
        pub fn set_certificate(
            mut self,
            input: std::option::Option<crate::model::Certificate>,
        ) -> Self {
            self.certificate = input;
            self
        }
        /// Consumes the builder and constructs a [`ImportCertificateOutput`](crate::output::ImportCertificateOutput)
        pub fn build(self) -> crate::output::ImportCertificateOutput {
            crate::output::ImportCertificateOutput {
                certificate: self.certificate,
            }
        }
    }
}
impl ImportCertificateOutput {
    /// Creates a new builder-style object to manufacture [`ImportCertificateOutput`](crate::output::ImportCertificateOutput)
    pub fn builder() -> crate::output::import_certificate_output::Builder {
        crate::output::import_certificate_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTableStatisticsOutput {
    /// <p>The Amazon Resource Name (ARN) of the replication task.</p>
    pub replication_task_arn: std::option::Option<std::string::String>,
    /// <p>The table statistics.</p>
    pub table_statistics: std::option::Option<std::vec::Vec<crate::model::TableStatistics>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeTableStatisticsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTableStatisticsOutput");
        formatter.field("replication_task_arn", &self.replication_task_arn);
        formatter.field("table_statistics", &self.table_statistics);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeTableStatisticsOutput`](crate::output::DescribeTableStatisticsOutput)
pub mod describe_table_statistics_output {
    /// A builder for [`DescribeTableStatisticsOutput`](crate::output::DescribeTableStatisticsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_task_arn: std::option::Option<std::string::String>,
        pub(crate) table_statistics:
            std::option::Option<std::vec::Vec<crate::model::TableStatistics>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the replication task.</p>
        pub fn replication_task_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.replication_task_arn = Some(input.into());
            self
        }
        pub fn set_replication_task_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.replication_task_arn = input;
            self
        }
        pub fn table_statistics(mut self, input: impl Into<crate::model::TableStatistics>) -> Self {
            let mut v = self.table_statistics.unwrap_or_default();
            v.push(input.into());
            self.table_statistics = Some(v);
            self
        }
        pub fn set_table_statistics(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TableStatistics>>,
        ) -> Self {
            self.table_statistics = input;
            self
        }
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTableStatisticsOutput`](crate::output::DescribeTableStatisticsOutput)
        pub fn build(self) -> crate::output::DescribeTableStatisticsOutput {
            crate::output::DescribeTableStatisticsOutput {
                replication_task_arn: self.replication_task_arn,
                table_statistics: self.table_statistics,
                marker: self.marker,
            }
        }
    }
}
impl DescribeTableStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTableStatisticsOutput`](crate::output::DescribeTableStatisticsOutput)
    pub fn builder() -> crate::output::describe_table_statistics_output::Builder {
        crate::output::describe_table_statistics_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSchemasOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>The described schema.</p>
    pub schemas: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for DescribeSchemasOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSchemasOutput");
        formatter.field("marker", &self.marker);
        formatter.field("schemas", &self.schemas);
        formatter.finish()
    }
}
/// See [`DescribeSchemasOutput`](crate::output::DescribeSchemasOutput)
pub mod describe_schemas_output {
    /// A builder for [`DescribeSchemasOutput`](crate::output::DescribeSchemasOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) schemas: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn schemas(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.schemas.unwrap_or_default();
            v.push(input.into());
            self.schemas = Some(v);
            self
        }
        pub fn set_schemas(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.schemas = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSchemasOutput`](crate::output::DescribeSchemasOutput)
        pub fn build(self) -> crate::output::DescribeSchemasOutput {
            crate::output::DescribeSchemasOutput {
                marker: self.marker,
                schemas: self.schemas,
            }
        }
    }
}
impl DescribeSchemasOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSchemasOutput`](crate::output::DescribeSchemasOutput)
    pub fn builder() -> crate::output::describe_schemas_output::Builder {
        crate::output::describe_schemas_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReplicationTasksOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>A description of the replication tasks.</p>
    pub replication_tasks: std::option::Option<std::vec::Vec<crate::model::ReplicationTask>>,
}
impl std::fmt::Debug for DescribeReplicationTasksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReplicationTasksOutput");
        formatter.field("marker", &self.marker);
        formatter.field("replication_tasks", &self.replication_tasks);
        formatter.finish()
    }
}
/// See [`DescribeReplicationTasksOutput`](crate::output::DescribeReplicationTasksOutput)
pub mod describe_replication_tasks_output {
    /// A builder for [`DescribeReplicationTasksOutput`](crate::output::DescribeReplicationTasksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) replication_tasks:
            std::option::Option<std::vec::Vec<crate::model::ReplicationTask>>,
    }
    impl Builder {
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn replication_tasks(
            mut self,
            input: impl Into<crate::model::ReplicationTask>,
        ) -> Self {
            let mut v = self.replication_tasks.unwrap_or_default();
            v.push(input.into());
            self.replication_tasks = Some(v);
            self
        }
        pub fn set_replication_tasks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReplicationTask>>,
        ) -> Self {
            self.replication_tasks = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReplicationTasksOutput`](crate::output::DescribeReplicationTasksOutput)
        pub fn build(self) -> crate::output::DescribeReplicationTasksOutput {
            crate::output::DescribeReplicationTasksOutput {
                marker: self.marker,
                replication_tasks: self.replication_tasks,
            }
        }
    }
}
impl DescribeReplicationTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationTasksOutput`](crate::output::DescribeReplicationTasksOutput)
    pub fn builder() -> crate::output::describe_replication_tasks_output::Builder {
        crate::output::describe_replication_tasks_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReplicationTaskIndividualAssessmentsOutput {
    /// <p>A pagination token returned for you to pass to a subsequent request. If you pass this
    /// token as the <code>Marker</code> value in a subsequent request, the response includes only
    /// records beyond the marker, up to the value specified in the request by
    /// <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>One or more individual assessments as specified by <code>Filters</code>.</p>
    pub replication_task_individual_assessments:
        std::option::Option<std::vec::Vec<crate::model::ReplicationTaskIndividualAssessment>>,
}
impl std::fmt::Debug for DescribeReplicationTaskIndividualAssessmentsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReplicationTaskIndividualAssessmentsOutput");
        formatter.field("marker", &self.marker);
        formatter.field(
            "replication_task_individual_assessments",
            &self.replication_task_individual_assessments,
        );
        formatter.finish()
    }
}
/// See [`DescribeReplicationTaskIndividualAssessmentsOutput`](crate::output::DescribeReplicationTaskIndividualAssessmentsOutput)
pub mod describe_replication_task_individual_assessments_output {
    /// A builder for [`DescribeReplicationTaskIndividualAssessmentsOutput`](crate::output::DescribeReplicationTaskIndividualAssessmentsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) replication_task_individual_assessments:
            std::option::Option<std::vec::Vec<crate::model::ReplicationTaskIndividualAssessment>>,
    }
    impl Builder {
        /// <p>A pagination token returned for you to pass to a subsequent request. If you pass this
        /// token as the <code>Marker</code> value in a subsequent request, the response includes only
        /// records beyond the marker, up to the value specified in the request by
        /// <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn replication_task_individual_assessments(
            mut self,
            input: impl Into<crate::model::ReplicationTaskIndividualAssessment>,
        ) -> Self {
            let mut v = self
                .replication_task_individual_assessments
                .unwrap_or_default();
            v.push(input.into());
            self.replication_task_individual_assessments = Some(v);
            self
        }
        pub fn set_replication_task_individual_assessments(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ReplicationTaskIndividualAssessment>,
            >,
        ) -> Self {
            self.replication_task_individual_assessments = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReplicationTaskIndividualAssessmentsOutput`](crate::output::DescribeReplicationTaskIndividualAssessmentsOutput)
        pub fn build(self) -> crate::output::DescribeReplicationTaskIndividualAssessmentsOutput {
            crate::output::DescribeReplicationTaskIndividualAssessmentsOutput {
                marker: self.marker,
                replication_task_individual_assessments: self
                    .replication_task_individual_assessments,
            }
        }
    }
}
impl DescribeReplicationTaskIndividualAssessmentsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationTaskIndividualAssessmentsOutput`](crate::output::DescribeReplicationTaskIndividualAssessmentsOutput)
    pub fn builder(
    ) -> crate::output::describe_replication_task_individual_assessments_output::Builder {
        crate::output::describe_replication_task_individual_assessments_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReplicationTaskAssessmentRunsOutput {
    /// <p>A pagination token returned for you to pass to a subsequent request. If you pass this
    /// token as the <code>Marker</code> value in a subsequent request, the response includes only
    /// records beyond the marker, up to the value specified in the request by
    /// <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>One or more premigration assessment runs as specified by <code>Filters</code>.</p>
    pub replication_task_assessment_runs:
        std::option::Option<std::vec::Vec<crate::model::ReplicationTaskAssessmentRun>>,
}
impl std::fmt::Debug for DescribeReplicationTaskAssessmentRunsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReplicationTaskAssessmentRunsOutput");
        formatter.field("marker", &self.marker);
        formatter.field(
            "replication_task_assessment_runs",
            &self.replication_task_assessment_runs,
        );
        formatter.finish()
    }
}
/// See [`DescribeReplicationTaskAssessmentRunsOutput`](crate::output::DescribeReplicationTaskAssessmentRunsOutput)
pub mod describe_replication_task_assessment_runs_output {
    /// A builder for [`DescribeReplicationTaskAssessmentRunsOutput`](crate::output::DescribeReplicationTaskAssessmentRunsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) replication_task_assessment_runs:
            std::option::Option<std::vec::Vec<crate::model::ReplicationTaskAssessmentRun>>,
    }
    impl Builder {
        /// <p>A pagination token returned for you to pass to a subsequent request. If you pass this
        /// token as the <code>Marker</code> value in a subsequent request, the response includes only
        /// records beyond the marker, up to the value specified in the request by
        /// <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn replication_task_assessment_runs(
            mut self,
            input: impl Into<crate::model::ReplicationTaskAssessmentRun>,
        ) -> Self {
            let mut v = self.replication_task_assessment_runs.unwrap_or_default();
            v.push(input.into());
            self.replication_task_assessment_runs = Some(v);
            self
        }
        pub fn set_replication_task_assessment_runs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReplicationTaskAssessmentRun>>,
        ) -> Self {
            self.replication_task_assessment_runs = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReplicationTaskAssessmentRunsOutput`](crate::output::DescribeReplicationTaskAssessmentRunsOutput)
        pub fn build(self) -> crate::output::DescribeReplicationTaskAssessmentRunsOutput {
            crate::output::DescribeReplicationTaskAssessmentRunsOutput {
                marker: self.marker,
                replication_task_assessment_runs: self.replication_task_assessment_runs,
            }
        }
    }
}
impl DescribeReplicationTaskAssessmentRunsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationTaskAssessmentRunsOutput`](crate::output::DescribeReplicationTaskAssessmentRunsOutput)
    pub fn builder() -> crate::output::describe_replication_task_assessment_runs_output::Builder {
        crate::output::describe_replication_task_assessment_runs_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReplicationTaskAssessmentResultsOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>- The Amazon S3 bucket where the task assessment report is located. </p>
    pub bucket_name: std::option::Option<std::string::String>,
    /// <p> The task assessment report. </p>
    pub replication_task_assessment_results:
        std::option::Option<std::vec::Vec<crate::model::ReplicationTaskAssessmentResult>>,
}
impl std::fmt::Debug for DescribeReplicationTaskAssessmentResultsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReplicationTaskAssessmentResultsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("bucket_name", &self.bucket_name);
        formatter.field(
            "replication_task_assessment_results",
            &self.replication_task_assessment_results,
        );
        formatter.finish()
    }
}
/// See [`DescribeReplicationTaskAssessmentResultsOutput`](crate::output::DescribeReplicationTaskAssessmentResultsOutput)
pub mod describe_replication_task_assessment_results_output {
    /// A builder for [`DescribeReplicationTaskAssessmentResultsOutput`](crate::output::DescribeReplicationTaskAssessmentResultsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) bucket_name: std::option::Option<std::string::String>,
        pub(crate) replication_task_assessment_results:
            std::option::Option<std::vec::Vec<crate::model::ReplicationTaskAssessmentResult>>,
    }
    impl Builder {
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>- The Amazon S3 bucket where the task assessment report is located. </p>
        pub fn bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.bucket_name = Some(input.into());
            self
        }
        pub fn set_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.bucket_name = input;
            self
        }
        pub fn replication_task_assessment_results(
            mut self,
            input: impl Into<crate::model::ReplicationTaskAssessmentResult>,
        ) -> Self {
            let mut v = self.replication_task_assessment_results.unwrap_or_default();
            v.push(input.into());
            self.replication_task_assessment_results = Some(v);
            self
        }
        pub fn set_replication_task_assessment_results(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ReplicationTaskAssessmentResult>,
            >,
        ) -> Self {
            self.replication_task_assessment_results = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReplicationTaskAssessmentResultsOutput`](crate::output::DescribeReplicationTaskAssessmentResultsOutput)
        pub fn build(self) -> crate::output::DescribeReplicationTaskAssessmentResultsOutput {
            crate::output::DescribeReplicationTaskAssessmentResultsOutput {
                marker: self.marker,
                bucket_name: self.bucket_name,
                replication_task_assessment_results: self.replication_task_assessment_results,
            }
        }
    }
}
impl DescribeReplicationTaskAssessmentResultsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationTaskAssessmentResultsOutput`](crate::output::DescribeReplicationTaskAssessmentResultsOutput)
    pub fn builder() -> crate::output::describe_replication_task_assessment_results_output::Builder
    {
        crate::output::describe_replication_task_assessment_results_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReplicationSubnetGroupsOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>A description of the replication subnet groups.</p>
    pub replication_subnet_groups:
        std::option::Option<std::vec::Vec<crate::model::ReplicationSubnetGroup>>,
}
impl std::fmt::Debug for DescribeReplicationSubnetGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReplicationSubnetGroupsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("replication_subnet_groups", &self.replication_subnet_groups);
        formatter.finish()
    }
}
/// See [`DescribeReplicationSubnetGroupsOutput`](crate::output::DescribeReplicationSubnetGroupsOutput)
pub mod describe_replication_subnet_groups_output {
    /// A builder for [`DescribeReplicationSubnetGroupsOutput`](crate::output::DescribeReplicationSubnetGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) replication_subnet_groups:
            std::option::Option<std::vec::Vec<crate::model::ReplicationSubnetGroup>>,
    }
    impl Builder {
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn replication_subnet_groups(
            mut self,
            input: impl Into<crate::model::ReplicationSubnetGroup>,
        ) -> Self {
            let mut v = self.replication_subnet_groups.unwrap_or_default();
            v.push(input.into());
            self.replication_subnet_groups = Some(v);
            self
        }
        pub fn set_replication_subnet_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReplicationSubnetGroup>>,
        ) -> Self {
            self.replication_subnet_groups = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReplicationSubnetGroupsOutput`](crate::output::DescribeReplicationSubnetGroupsOutput)
        pub fn build(self) -> crate::output::DescribeReplicationSubnetGroupsOutput {
            crate::output::DescribeReplicationSubnetGroupsOutput {
                marker: self.marker,
                replication_subnet_groups: self.replication_subnet_groups,
            }
        }
    }
}
impl DescribeReplicationSubnetGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationSubnetGroupsOutput`](crate::output::DescribeReplicationSubnetGroupsOutput)
    pub fn builder() -> crate::output::describe_replication_subnet_groups_output::Builder {
        crate::output::describe_replication_subnet_groups_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReplicationInstanceTaskLogsOutput {
    /// <p>The Amazon Resource Name (ARN) of the replication instance.</p>
    pub replication_instance_arn: std::option::Option<std::string::String>,
    /// <p>An array of replication task log metadata. Each member of the array contains the
    /// replication task name, ARN, and task log size (in bytes). </p>
    pub replication_instance_task_logs:
        std::option::Option<std::vec::Vec<crate::model::ReplicationInstanceTaskLog>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeReplicationInstanceTaskLogsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReplicationInstanceTaskLogsOutput");
        formatter.field("replication_instance_arn", &self.replication_instance_arn);
        formatter.field(
            "replication_instance_task_logs",
            &self.replication_instance_task_logs,
        );
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeReplicationInstanceTaskLogsOutput`](crate::output::DescribeReplicationInstanceTaskLogsOutput)
pub mod describe_replication_instance_task_logs_output {
    /// A builder for [`DescribeReplicationInstanceTaskLogsOutput`](crate::output::DescribeReplicationInstanceTaskLogsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_instance_arn: std::option::Option<std::string::String>,
        pub(crate) replication_instance_task_logs:
            std::option::Option<std::vec::Vec<crate::model::ReplicationInstanceTaskLog>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the replication instance.</p>
        pub fn replication_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.replication_instance_arn = Some(input.into());
            self
        }
        pub fn set_replication_instance_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.replication_instance_arn = input;
            self
        }
        pub fn replication_instance_task_logs(
            mut self,
            input: impl Into<crate::model::ReplicationInstanceTaskLog>,
        ) -> Self {
            let mut v = self.replication_instance_task_logs.unwrap_or_default();
            v.push(input.into());
            self.replication_instance_task_logs = Some(v);
            self
        }
        pub fn set_replication_instance_task_logs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReplicationInstanceTaskLog>>,
        ) -> Self {
            self.replication_instance_task_logs = input;
            self
        }
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReplicationInstanceTaskLogsOutput`](crate::output::DescribeReplicationInstanceTaskLogsOutput)
        pub fn build(self) -> crate::output::DescribeReplicationInstanceTaskLogsOutput {
            crate::output::DescribeReplicationInstanceTaskLogsOutput {
                replication_instance_arn: self.replication_instance_arn,
                replication_instance_task_logs: self.replication_instance_task_logs,
                marker: self.marker,
            }
        }
    }
}
impl DescribeReplicationInstanceTaskLogsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationInstanceTaskLogsOutput`](crate::output::DescribeReplicationInstanceTaskLogsOutput)
    pub fn builder() -> crate::output::describe_replication_instance_task_logs_output::Builder {
        crate::output::describe_replication_instance_task_logs_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReplicationInstancesOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>The replication instances described.</p>
    pub replication_instances:
        std::option::Option<std::vec::Vec<crate::model::ReplicationInstance>>,
}
impl std::fmt::Debug for DescribeReplicationInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReplicationInstancesOutput");
        formatter.field("marker", &self.marker);
        formatter.field("replication_instances", &self.replication_instances);
        formatter.finish()
    }
}
/// See [`DescribeReplicationInstancesOutput`](crate::output::DescribeReplicationInstancesOutput)
pub mod describe_replication_instances_output {
    /// A builder for [`DescribeReplicationInstancesOutput`](crate::output::DescribeReplicationInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) replication_instances:
            std::option::Option<std::vec::Vec<crate::model::ReplicationInstance>>,
    }
    impl Builder {
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn replication_instances(
            mut self,
            input: impl Into<crate::model::ReplicationInstance>,
        ) -> Self {
            let mut v = self.replication_instances.unwrap_or_default();
            v.push(input.into());
            self.replication_instances = Some(v);
            self
        }
        pub fn set_replication_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReplicationInstance>>,
        ) -> Self {
            self.replication_instances = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReplicationInstancesOutput`](crate::output::DescribeReplicationInstancesOutput)
        pub fn build(self) -> crate::output::DescribeReplicationInstancesOutput {
            crate::output::DescribeReplicationInstancesOutput {
                marker: self.marker,
                replication_instances: self.replication_instances,
            }
        }
    }
}
impl DescribeReplicationInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationInstancesOutput`](crate::output::DescribeReplicationInstancesOutput)
    pub fn builder() -> crate::output::describe_replication_instances_output::Builder {
        crate::output::describe_replication_instances_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeRefreshSchemasStatusOutput {
    /// <p>The status of the schema.</p>
    pub refresh_schemas_status: std::option::Option<crate::model::RefreshSchemasStatus>,
}
impl std::fmt::Debug for DescribeRefreshSchemasStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeRefreshSchemasStatusOutput");
        formatter.field("refresh_schemas_status", &self.refresh_schemas_status);
        formatter.finish()
    }
}
/// See [`DescribeRefreshSchemasStatusOutput`](crate::output::DescribeRefreshSchemasStatusOutput)
pub mod describe_refresh_schemas_status_output {
    /// A builder for [`DescribeRefreshSchemasStatusOutput`](crate::output::DescribeRefreshSchemasStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) refresh_schemas_status: std::option::Option<crate::model::RefreshSchemasStatus>,
    }
    impl Builder {
        /// <p>The status of the schema.</p>
        pub fn refresh_schemas_status(mut self, input: crate::model::RefreshSchemasStatus) -> Self {
            self.refresh_schemas_status = Some(input);
            self
        }
        pub fn set_refresh_schemas_status(
            mut self,
            input: std::option::Option<crate::model::RefreshSchemasStatus>,
        ) -> Self {
            self.refresh_schemas_status = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeRefreshSchemasStatusOutput`](crate::output::DescribeRefreshSchemasStatusOutput)
        pub fn build(self) -> crate::output::DescribeRefreshSchemasStatusOutput {
            crate::output::DescribeRefreshSchemasStatusOutput {
                refresh_schemas_status: self.refresh_schemas_status,
            }
        }
    }
}
impl DescribeRefreshSchemasStatusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeRefreshSchemasStatusOutput`](crate::output::DescribeRefreshSchemasStatusOutput)
    pub fn builder() -> crate::output::describe_refresh_schemas_status_output::Builder {
        crate::output::describe_refresh_schemas_status_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribePendingMaintenanceActionsOutput {
    /// <p>The pending maintenance action.</p>
    pub pending_maintenance_actions:
        std::option::Option<std::vec::Vec<crate::model::ResourcePendingMaintenanceActions>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribePendingMaintenanceActionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribePendingMaintenanceActionsOutput");
        formatter.field(
            "pending_maintenance_actions",
            &self.pending_maintenance_actions,
        );
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribePendingMaintenanceActionsOutput`](crate::output::DescribePendingMaintenanceActionsOutput)
pub mod describe_pending_maintenance_actions_output {
    /// A builder for [`DescribePendingMaintenanceActionsOutput`](crate::output::DescribePendingMaintenanceActionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) pending_maintenance_actions:
            std::option::Option<std::vec::Vec<crate::model::ResourcePendingMaintenanceActions>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn pending_maintenance_actions(
            mut self,
            input: impl Into<crate::model::ResourcePendingMaintenanceActions>,
        ) -> Self {
            let mut v = self.pending_maintenance_actions.unwrap_or_default();
            v.push(input.into());
            self.pending_maintenance_actions = Some(v);
            self
        }
        pub fn set_pending_maintenance_actions(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ResourcePendingMaintenanceActions>,
            >,
        ) -> Self {
            self.pending_maintenance_actions = input;
            self
        }
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribePendingMaintenanceActionsOutput`](crate::output::DescribePendingMaintenanceActionsOutput)
        pub fn build(self) -> crate::output::DescribePendingMaintenanceActionsOutput {
            crate::output::DescribePendingMaintenanceActionsOutput {
                pending_maintenance_actions: self.pending_maintenance_actions,
                marker: self.marker,
            }
        }
    }
}
impl DescribePendingMaintenanceActionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribePendingMaintenanceActionsOutput`](crate::output::DescribePendingMaintenanceActionsOutput)
    pub fn builder() -> crate::output::describe_pending_maintenance_actions_output::Builder {
        crate::output::describe_pending_maintenance_actions_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeOrderableReplicationInstancesOutput {
    /// <p>The order-able replication instances available.</p>
    pub orderable_replication_instances:
        std::option::Option<std::vec::Vec<crate::model::OrderableReplicationInstance>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeOrderableReplicationInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeOrderableReplicationInstancesOutput");
        formatter.field(
            "orderable_replication_instances",
            &self.orderable_replication_instances,
        );
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeOrderableReplicationInstancesOutput`](crate::output::DescribeOrderableReplicationInstancesOutput)
pub mod describe_orderable_replication_instances_output {
    /// A builder for [`DescribeOrderableReplicationInstancesOutput`](crate::output::DescribeOrderableReplicationInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) orderable_replication_instances:
            std::option::Option<std::vec::Vec<crate::model::OrderableReplicationInstance>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn orderable_replication_instances(
            mut self,
            input: impl Into<crate::model::OrderableReplicationInstance>,
        ) -> Self {
            let mut v = self.orderable_replication_instances.unwrap_or_default();
            v.push(input.into());
            self.orderable_replication_instances = Some(v);
            self
        }
        pub fn set_orderable_replication_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::OrderableReplicationInstance>>,
        ) -> Self {
            self.orderable_replication_instances = input;
            self
        }
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOrderableReplicationInstancesOutput`](crate::output::DescribeOrderableReplicationInstancesOutput)
        pub fn build(self) -> crate::output::DescribeOrderableReplicationInstancesOutput {
            crate::output::DescribeOrderableReplicationInstancesOutput {
                orderable_replication_instances: self.orderable_replication_instances,
                marker: self.marker,
            }
        }
    }
}
impl DescribeOrderableReplicationInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOrderableReplicationInstancesOutput`](crate::output::DescribeOrderableReplicationInstancesOutput)
    pub fn builder() -> crate::output::describe_orderable_replication_instances_output::Builder {
        crate::output::describe_orderable_replication_instances_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEventSubscriptionsOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>A list of event subscriptions.</p>
    pub event_subscriptions_list:
        std::option::Option<std::vec::Vec<crate::model::EventSubscription>>,
}
impl std::fmt::Debug for DescribeEventSubscriptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEventSubscriptionsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("event_subscriptions_list", &self.event_subscriptions_list);
        formatter.finish()
    }
}
/// See [`DescribeEventSubscriptionsOutput`](crate::output::DescribeEventSubscriptionsOutput)
pub mod describe_event_subscriptions_output {
    /// A builder for [`DescribeEventSubscriptionsOutput`](crate::output::DescribeEventSubscriptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) event_subscriptions_list:
            std::option::Option<std::vec::Vec<crate::model::EventSubscription>>,
    }
    impl Builder {
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn event_subscriptions_list(
            mut self,
            input: impl Into<crate::model::EventSubscription>,
        ) -> Self {
            let mut v = self.event_subscriptions_list.unwrap_or_default();
            v.push(input.into());
            self.event_subscriptions_list = Some(v);
            self
        }
        pub fn set_event_subscriptions_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EventSubscription>>,
        ) -> Self {
            self.event_subscriptions_list = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEventSubscriptionsOutput`](crate::output::DescribeEventSubscriptionsOutput)
        pub fn build(self) -> crate::output::DescribeEventSubscriptionsOutput {
            crate::output::DescribeEventSubscriptionsOutput {
                marker: self.marker,
                event_subscriptions_list: self.event_subscriptions_list,
            }
        }
    }
}
impl DescribeEventSubscriptionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEventSubscriptionsOutput`](crate::output::DescribeEventSubscriptionsOutput)
    pub fn builder() -> crate::output::describe_event_subscriptions_output::Builder {
        crate::output::describe_event_subscriptions_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEventsOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>The events described.</p>
    pub events: std::option::Option<std::vec::Vec<crate::model::Event>>,
}
impl std::fmt::Debug for DescribeEventsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEventsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("events", &self.events);
        formatter.finish()
    }
}
/// See [`DescribeEventsOutput`](crate::output::DescribeEventsOutput)
pub mod describe_events_output {
    /// A builder for [`DescribeEventsOutput`](crate::output::DescribeEventsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) events: std::option::Option<std::vec::Vec<crate::model::Event>>,
    }
    impl Builder {
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn events(mut self, input: impl Into<crate::model::Event>) -> Self {
            let mut v = self.events.unwrap_or_default();
            v.push(input.into());
            self.events = Some(v);
            self
        }
        pub fn set_events(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Event>>,
        ) -> Self {
            self.events = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEventsOutput`](crate::output::DescribeEventsOutput)
        pub fn build(self) -> crate::output::DescribeEventsOutput {
            crate::output::DescribeEventsOutput {
                marker: self.marker,
                events: self.events,
            }
        }
    }
}
impl DescribeEventsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEventsOutput`](crate::output::DescribeEventsOutput)
    pub fn builder() -> crate::output::describe_events_output::Builder {
        crate::output::describe_events_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEventCategoriesOutput {
    /// <p>A list of event categories.</p>
    pub event_category_group_list:
        std::option::Option<std::vec::Vec<crate::model::EventCategoryGroup>>,
}
impl std::fmt::Debug for DescribeEventCategoriesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEventCategoriesOutput");
        formatter.field("event_category_group_list", &self.event_category_group_list);
        formatter.finish()
    }
}
/// See [`DescribeEventCategoriesOutput`](crate::output::DescribeEventCategoriesOutput)
pub mod describe_event_categories_output {
    /// A builder for [`DescribeEventCategoriesOutput`](crate::output::DescribeEventCategoriesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_category_group_list:
            std::option::Option<std::vec::Vec<crate::model::EventCategoryGroup>>,
    }
    impl Builder {
        pub fn event_category_group_list(
            mut self,
            input: impl Into<crate::model::EventCategoryGroup>,
        ) -> Self {
            let mut v = self.event_category_group_list.unwrap_or_default();
            v.push(input.into());
            self.event_category_group_list = Some(v);
            self
        }
        pub fn set_event_category_group_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EventCategoryGroup>>,
        ) -> Self {
            self.event_category_group_list = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEventCategoriesOutput`](crate::output::DescribeEventCategoriesOutput)
        pub fn build(self) -> crate::output::DescribeEventCategoriesOutput {
            crate::output::DescribeEventCategoriesOutput {
                event_category_group_list: self.event_category_group_list,
            }
        }
    }
}
impl DescribeEventCategoriesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEventCategoriesOutput`](crate::output::DescribeEventCategoriesOutput)
    pub fn builder() -> crate::output::describe_event_categories_output::Builder {
        crate::output::describe_event_categories_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEndpointTypesOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>The types of endpoints that are supported.</p>
    pub supported_endpoint_types:
        std::option::Option<std::vec::Vec<crate::model::SupportedEndpointType>>,
}
impl std::fmt::Debug for DescribeEndpointTypesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEndpointTypesOutput");
        formatter.field("marker", &self.marker);
        formatter.field("supported_endpoint_types", &self.supported_endpoint_types);
        formatter.finish()
    }
}
/// See [`DescribeEndpointTypesOutput`](crate::output::DescribeEndpointTypesOutput)
pub mod describe_endpoint_types_output {
    /// A builder for [`DescribeEndpointTypesOutput`](crate::output::DescribeEndpointTypesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) supported_endpoint_types:
            std::option::Option<std::vec::Vec<crate::model::SupportedEndpointType>>,
    }
    impl Builder {
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn supported_endpoint_types(
            mut self,
            input: impl Into<crate::model::SupportedEndpointType>,
        ) -> Self {
            let mut v = self.supported_endpoint_types.unwrap_or_default();
            v.push(input.into());
            self.supported_endpoint_types = Some(v);
            self
        }
        pub fn set_supported_endpoint_types(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SupportedEndpointType>>,
        ) -> Self {
            self.supported_endpoint_types = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEndpointTypesOutput`](crate::output::DescribeEndpointTypesOutput)
        pub fn build(self) -> crate::output::DescribeEndpointTypesOutput {
            crate::output::DescribeEndpointTypesOutput {
                marker: self.marker,
                supported_endpoint_types: self.supported_endpoint_types,
            }
        }
    }
}
impl DescribeEndpointTypesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointTypesOutput`](crate::output::DescribeEndpointTypesOutput)
    pub fn builder() -> crate::output::describe_endpoint_types_output::Builder {
        crate::output::describe_endpoint_types_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEndpointSettingsOutput {
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified,
    /// the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>Descriptions of the endpoint settings available for your source or target database engine.</p>
    pub endpoint_settings: std::option::Option<std::vec::Vec<crate::model::EndpointSetting>>,
}
impl std::fmt::Debug for DescribeEndpointSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEndpointSettingsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("endpoint_settings", &self.endpoint_settings);
        formatter.finish()
    }
}
/// See [`DescribeEndpointSettingsOutput`](crate::output::DescribeEndpointSettingsOutput)
pub mod describe_endpoint_settings_output {
    /// A builder for [`DescribeEndpointSettingsOutput`](crate::output::DescribeEndpointSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) endpoint_settings:
            std::option::Option<std::vec::Vec<crate::model::EndpointSetting>>,
    }
    impl Builder {
        /// <p>An optional pagination token provided by a previous request. If this parameter is specified,
        /// the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn endpoint_settings(
            mut self,
            input: impl Into<crate::model::EndpointSetting>,
        ) -> Self {
            let mut v = self.endpoint_settings.unwrap_or_default();
            v.push(input.into());
            self.endpoint_settings = Some(v);
            self
        }
        pub fn set_endpoint_settings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EndpointSetting>>,
        ) -> Self {
            self.endpoint_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEndpointSettingsOutput`](crate::output::DescribeEndpointSettingsOutput)
        pub fn build(self) -> crate::output::DescribeEndpointSettingsOutput {
            crate::output::DescribeEndpointSettingsOutput {
                marker: self.marker,
                endpoint_settings: self.endpoint_settings,
            }
        }
    }
}
impl DescribeEndpointSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointSettingsOutput`](crate::output::DescribeEndpointSettingsOutput)
    pub fn builder() -> crate::output::describe_endpoint_settings_output::Builder {
        crate::output::describe_endpoint_settings_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEndpointsOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>Endpoint description.</p>
    pub endpoints: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
}
impl std::fmt::Debug for DescribeEndpointsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEndpointsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("endpoints", &self.endpoints);
        formatter.finish()
    }
}
/// See [`DescribeEndpointsOutput`](crate::output::DescribeEndpointsOutput)
pub mod describe_endpoints_output {
    /// A builder for [`DescribeEndpointsOutput`](crate::output::DescribeEndpointsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) endpoints: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
    }
    impl Builder {
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn endpoints(mut self, input: impl Into<crate::model::Endpoint>) -> Self {
            let mut v = self.endpoints.unwrap_or_default();
            v.push(input.into());
            self.endpoints = Some(v);
            self
        }
        pub fn set_endpoints(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
        ) -> Self {
            self.endpoints = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEndpointsOutput`](crate::output::DescribeEndpointsOutput)
        pub fn build(self) -> crate::output::DescribeEndpointsOutput {
            crate::output::DescribeEndpointsOutput {
                marker: self.marker,
                endpoints: self.endpoints,
            }
        }
    }
}
impl DescribeEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointsOutput`](crate::output::DescribeEndpointsOutput)
    pub fn builder() -> crate::output::describe_endpoints_output::Builder {
        crate::output::describe_endpoints_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeConnectionsOutput {
    /// <p> An optional pagination token provided by a previous request. If this parameter is
    /// specified, the response includes only records beyond the marker, up to the value specified
    /// by <code>MaxRecords</code>. </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>A description of the connections.</p>
    pub connections: std::option::Option<std::vec::Vec<crate::model::Connection>>,
}
impl std::fmt::Debug for DescribeConnectionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeConnectionsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("connections", &self.connections);
        formatter.finish()
    }
}
/// See [`DescribeConnectionsOutput`](crate::output::DescribeConnectionsOutput)
pub mod describe_connections_output {
    /// A builder for [`DescribeConnectionsOutput`](crate::output::DescribeConnectionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) connections: std::option::Option<std::vec::Vec<crate::model::Connection>>,
    }
    impl Builder {
        /// <p> An optional pagination token provided by a previous request. If this parameter is
        /// specified, the response includes only records beyond the marker, up to the value specified
        /// by <code>MaxRecords</code>. </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn connections(mut self, input: impl Into<crate::model::Connection>) -> Self {
            let mut v = self.connections.unwrap_or_default();
            v.push(input.into());
            self.connections = Some(v);
            self
        }
        pub fn set_connections(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Connection>>,
        ) -> Self {
            self.connections = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeConnectionsOutput`](crate::output::DescribeConnectionsOutput)
        pub fn build(self) -> crate::output::DescribeConnectionsOutput {
            crate::output::DescribeConnectionsOutput {
                marker: self.marker,
                connections: self.connections,
            }
        }
    }
}
impl DescribeConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConnectionsOutput`](crate::output::DescribeConnectionsOutput)
    pub fn builder() -> crate::output::describe_connections_output::Builder {
        crate::output::describe_connections_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCertificatesOutput {
    /// <p>The pagination token.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>The Secure Sockets Layer (SSL) certificates associated with the replication
    /// instance.</p>
    pub certificates: std::option::Option<std::vec::Vec<crate::model::Certificate>>,
}
impl std::fmt::Debug for DescribeCertificatesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCertificatesOutput");
        formatter.field("marker", &self.marker);
        formatter.field("certificates", &self.certificates);
        formatter.finish()
    }
}
/// See [`DescribeCertificatesOutput`](crate::output::DescribeCertificatesOutput)
pub mod describe_certificates_output {
    /// A builder for [`DescribeCertificatesOutput`](crate::output::DescribeCertificatesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) certificates: std::option::Option<std::vec::Vec<crate::model::Certificate>>,
    }
    impl Builder {
        /// <p>The pagination token.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn certificates(mut self, input: impl Into<crate::model::Certificate>) -> Self {
            let mut v = self.certificates.unwrap_or_default();
            v.push(input.into());
            self.certificates = Some(v);
            self
        }
        pub fn set_certificates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Certificate>>,
        ) -> Self {
            self.certificates = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCertificatesOutput`](crate::output::DescribeCertificatesOutput)
        pub fn build(self) -> crate::output::DescribeCertificatesOutput {
            crate::output::DescribeCertificatesOutput {
                marker: self.marker,
                certificates: self.certificates,
            }
        }
    }
}
impl DescribeCertificatesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCertificatesOutput`](crate::output::DescribeCertificatesOutput)
    pub fn builder() -> crate::output::describe_certificates_output::Builder {
        crate::output::describe_certificates_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeApplicableIndividualAssessmentsOutput {
    /// <p>List of names for the individual assessments supported by the premigration assessment
    /// run that you start based on the specified request parameters. For more information on the
    /// available individual assessments, including compatibility with different migration task
    /// configurations, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html">Working with premigration assessment runs</a> in the
    /// <i>AWS Database Migration Service User Guide.</i>
    /// </p>
    pub individual_assessment_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Pagination token returned for you to pass to a subsequent request. If you pass this
    /// token as the <code>Marker</code> value in a subsequent request, the response includes only
    /// records beyond the marker, up to the value specified in the request by
    /// <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeApplicableIndividualAssessmentsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeApplicableIndividualAssessmentsOutput");
        formatter.field(
            "individual_assessment_names",
            &self.individual_assessment_names,
        );
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeApplicableIndividualAssessmentsOutput`](crate::output::DescribeApplicableIndividualAssessmentsOutput)
pub mod describe_applicable_individual_assessments_output {
    /// A builder for [`DescribeApplicableIndividualAssessmentsOutput`](crate::output::DescribeApplicableIndividualAssessmentsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) individual_assessment_names:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn individual_assessment_names(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.individual_assessment_names.unwrap_or_default();
            v.push(input.into());
            self.individual_assessment_names = Some(v);
            self
        }
        pub fn set_individual_assessment_names(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.individual_assessment_names = input;
            self
        }
        /// <p>Pagination token returned for you to pass to a subsequent request. If you pass this
        /// token as the <code>Marker</code> value in a subsequent request, the response includes only
        /// records beyond the marker, up to the value specified in the request by
        /// <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeApplicableIndividualAssessmentsOutput`](crate::output::DescribeApplicableIndividualAssessmentsOutput)
        pub fn build(self) -> crate::output::DescribeApplicableIndividualAssessmentsOutput {
            crate::output::DescribeApplicableIndividualAssessmentsOutput {
                individual_assessment_names: self.individual_assessment_names,
                marker: self.marker,
            }
        }
    }
}
impl DescribeApplicableIndividualAssessmentsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeApplicableIndividualAssessmentsOutput`](crate::output::DescribeApplicableIndividualAssessmentsOutput)
    pub fn builder() -> crate::output::describe_applicable_individual_assessments_output::Builder {
        crate::output::describe_applicable_individual_assessments_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAccountAttributesOutput {
    /// <p>Account quota information.</p>
    pub account_quotas: std::option::Option<std::vec::Vec<crate::model::AccountQuota>>,
    /// <p>A unique AWS DMS identifier for an account in a particular AWS Region. The value of this
    /// identifier has the following format: <code>c99999999999</code>. DMS uses this identifier to
    /// name artifacts. For example, DMS uses this identifier to name the default Amazon S3 bucket
    /// for storing task assessment reports in a given AWS Region. The format of this S3 bucket
    /// name is the following:
    /// <code>dms-<i>AccountNumber</i>-<i>UniqueAccountIdentifier</i>.</code>
    /// Here is an example name for this default S3 bucket:
    /// <code>dms-111122223333-c44445555666</code>.</p>
    /// <note>
    /// <p>AWS DMS supports the <code>UniqueAccountIdentifier</code> parameter in
    /// versions 3.1.4 and later.</p>
    /// </note>
    pub unique_account_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeAccountAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAccountAttributesOutput");
        formatter.field("account_quotas", &self.account_quotas);
        formatter.field("unique_account_identifier", &self.unique_account_identifier);
        formatter.finish()
    }
}
/// See [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput)
pub mod describe_account_attributes_output {
    /// A builder for [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_quotas: std::option::Option<std::vec::Vec<crate::model::AccountQuota>>,
        pub(crate) unique_account_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn account_quotas(mut self, input: impl Into<crate::model::AccountQuota>) -> Self {
            let mut v = self.account_quotas.unwrap_or_default();
            v.push(input.into());
            self.account_quotas = Some(v);
            self
        }
        pub fn set_account_quotas(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AccountQuota>>,
        ) -> Self {
            self.account_quotas = input;
            self
        }
        /// <p>A unique AWS DMS identifier for an account in a particular AWS Region. The value of this
        /// identifier has the following format: <code>c99999999999</code>. DMS uses this identifier to
        /// name artifacts. For example, DMS uses this identifier to name the default Amazon S3 bucket
        /// for storing task assessment reports in a given AWS Region. The format of this S3 bucket
        /// name is the following:
        /// <code>dms-<i>AccountNumber</i>-<i>UniqueAccountIdentifier</i>.</code>
        /// Here is an example name for this default S3 bucket:
        /// <code>dms-111122223333-c44445555666</code>.</p>
        /// <note>
        /// <p>AWS DMS supports the <code>UniqueAccountIdentifier</code> parameter in
        /// versions 3.1.4 and later.</p>
        /// </note>
        pub fn unique_account_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.unique_account_identifier = Some(input.into());
            self
        }
        pub fn set_unique_account_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.unique_account_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput)
        pub fn build(self) -> crate::output::DescribeAccountAttributesOutput {
            crate::output::DescribeAccountAttributesOutput {
                account_quotas: self.account_quotas,
                unique_account_identifier: self.unique_account_identifier,
            }
        }
    }
}
impl DescribeAccountAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput)
    pub fn builder() -> crate::output::describe_account_attributes_output::Builder {
        crate::output::describe_account_attributes_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteReplicationTaskAssessmentRunOutput {
    /// <p>The <code>ReplicationTaskAssessmentRun</code> object for the deleted assessment
    /// run.</p>
    pub replication_task_assessment_run:
        std::option::Option<crate::model::ReplicationTaskAssessmentRun>,
}
impl std::fmt::Debug for DeleteReplicationTaskAssessmentRunOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteReplicationTaskAssessmentRunOutput");
        formatter.field(
            "replication_task_assessment_run",
            &self.replication_task_assessment_run,
        );
        formatter.finish()
    }
}
/// See [`DeleteReplicationTaskAssessmentRunOutput`](crate::output::DeleteReplicationTaskAssessmentRunOutput)
pub mod delete_replication_task_assessment_run_output {
    /// A builder for [`DeleteReplicationTaskAssessmentRunOutput`](crate::output::DeleteReplicationTaskAssessmentRunOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_task_assessment_run:
            std::option::Option<crate::model::ReplicationTaskAssessmentRun>,
    }
    impl Builder {
        /// <p>The <code>ReplicationTaskAssessmentRun</code> object for the deleted assessment
        /// run.</p>
        pub fn replication_task_assessment_run(
            mut self,
            input: crate::model::ReplicationTaskAssessmentRun,
        ) -> Self {
            self.replication_task_assessment_run = Some(input);
            self
        }
        pub fn set_replication_task_assessment_run(
            mut self,
            input: std::option::Option<crate::model::ReplicationTaskAssessmentRun>,
        ) -> Self {
            self.replication_task_assessment_run = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteReplicationTaskAssessmentRunOutput`](crate::output::DeleteReplicationTaskAssessmentRunOutput)
        pub fn build(self) -> crate::output::DeleteReplicationTaskAssessmentRunOutput {
            crate::output::DeleteReplicationTaskAssessmentRunOutput {
                replication_task_assessment_run: self.replication_task_assessment_run,
            }
        }
    }
}
impl DeleteReplicationTaskAssessmentRunOutput {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationTaskAssessmentRunOutput`](crate::output::DeleteReplicationTaskAssessmentRunOutput)
    pub fn builder() -> crate::output::delete_replication_task_assessment_run_output::Builder {
        crate::output::delete_replication_task_assessment_run_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteReplicationTaskOutput {
    /// <p>The deleted replication task.</p>
    pub replication_task: std::option::Option<crate::model::ReplicationTask>,
}
impl std::fmt::Debug for DeleteReplicationTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteReplicationTaskOutput");
        formatter.field("replication_task", &self.replication_task);
        formatter.finish()
    }
}
/// See [`DeleteReplicationTaskOutput`](crate::output::DeleteReplicationTaskOutput)
pub mod delete_replication_task_output {
    /// A builder for [`DeleteReplicationTaskOutput`](crate::output::DeleteReplicationTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_task: std::option::Option<crate::model::ReplicationTask>,
    }
    impl Builder {
        /// <p>The deleted replication task.</p>
        pub fn replication_task(mut self, input: crate::model::ReplicationTask) -> Self {
            self.replication_task = Some(input);
            self
        }
        pub fn set_replication_task(
            mut self,
            input: std::option::Option<crate::model::ReplicationTask>,
        ) -> Self {
            self.replication_task = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteReplicationTaskOutput`](crate::output::DeleteReplicationTaskOutput)
        pub fn build(self) -> crate::output::DeleteReplicationTaskOutput {
            crate::output::DeleteReplicationTaskOutput {
                replication_task: self.replication_task,
            }
        }
    }
}
impl DeleteReplicationTaskOutput {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationTaskOutput`](crate::output::DeleteReplicationTaskOutput)
    pub fn builder() -> crate::output::delete_replication_task_output::Builder {
        crate::output::delete_replication_task_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteReplicationSubnetGroupOutput {}
impl std::fmt::Debug for DeleteReplicationSubnetGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteReplicationSubnetGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteReplicationSubnetGroupOutput`](crate::output::DeleteReplicationSubnetGroupOutput)
pub mod delete_replication_subnet_group_output {
    /// A builder for [`DeleteReplicationSubnetGroupOutput`](crate::output::DeleteReplicationSubnetGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteReplicationSubnetGroupOutput`](crate::output::DeleteReplicationSubnetGroupOutput)
        pub fn build(self) -> crate::output::DeleteReplicationSubnetGroupOutput {
            crate::output::DeleteReplicationSubnetGroupOutput {}
        }
    }
}
impl DeleteReplicationSubnetGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationSubnetGroupOutput`](crate::output::DeleteReplicationSubnetGroupOutput)
    pub fn builder() -> crate::output::delete_replication_subnet_group_output::Builder {
        crate::output::delete_replication_subnet_group_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteReplicationInstanceOutput {
    /// <p>The replication instance that was deleted.</p>
    pub replication_instance: std::option::Option<crate::model::ReplicationInstance>,
}
impl std::fmt::Debug for DeleteReplicationInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteReplicationInstanceOutput");
        formatter.field("replication_instance", &self.replication_instance);
        formatter.finish()
    }
}
/// See [`DeleteReplicationInstanceOutput`](crate::output::DeleteReplicationInstanceOutput)
pub mod delete_replication_instance_output {
    /// A builder for [`DeleteReplicationInstanceOutput`](crate::output::DeleteReplicationInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_instance: std::option::Option<crate::model::ReplicationInstance>,
    }
    impl Builder {
        /// <p>The replication instance that was deleted.</p>
        pub fn replication_instance(mut self, input: crate::model::ReplicationInstance) -> Self {
            self.replication_instance = Some(input);
            self
        }
        pub fn set_replication_instance(
            mut self,
            input: std::option::Option<crate::model::ReplicationInstance>,
        ) -> Self {
            self.replication_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteReplicationInstanceOutput`](crate::output::DeleteReplicationInstanceOutput)
        pub fn build(self) -> crate::output::DeleteReplicationInstanceOutput {
            crate::output::DeleteReplicationInstanceOutput {
                replication_instance: self.replication_instance,
            }
        }
    }
}
impl DeleteReplicationInstanceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationInstanceOutput`](crate::output::DeleteReplicationInstanceOutput)
    pub fn builder() -> crate::output::delete_replication_instance_output::Builder {
        crate::output::delete_replication_instance_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteEventSubscriptionOutput {
    /// <p>The event subscription that was deleted.</p>
    pub event_subscription: std::option::Option<crate::model::EventSubscription>,
}
impl std::fmt::Debug for DeleteEventSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteEventSubscriptionOutput");
        formatter.field("event_subscription", &self.event_subscription);
        formatter.finish()
    }
}
/// See [`DeleteEventSubscriptionOutput`](crate::output::DeleteEventSubscriptionOutput)
pub mod delete_event_subscription_output {
    /// A builder for [`DeleteEventSubscriptionOutput`](crate::output::DeleteEventSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_subscription: std::option::Option<crate::model::EventSubscription>,
    }
    impl Builder {
        /// <p>The event subscription that was deleted.</p>
        pub fn event_subscription(mut self, input: crate::model::EventSubscription) -> Self {
            self.event_subscription = Some(input);
            self
        }
        pub fn set_event_subscription(
            mut self,
            input: std::option::Option<crate::model::EventSubscription>,
        ) -> Self {
            self.event_subscription = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEventSubscriptionOutput`](crate::output::DeleteEventSubscriptionOutput)
        pub fn build(self) -> crate::output::DeleteEventSubscriptionOutput {
            crate::output::DeleteEventSubscriptionOutput {
                event_subscription: self.event_subscription,
            }
        }
    }
}
impl DeleteEventSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEventSubscriptionOutput`](crate::output::DeleteEventSubscriptionOutput)
    pub fn builder() -> crate::output::delete_event_subscription_output::Builder {
        crate::output::delete_event_subscription_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteEndpointOutput {
    /// <p>The endpoint that was deleted.</p>
    pub endpoint: std::option::Option<crate::model::Endpoint>,
}
impl std::fmt::Debug for DeleteEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteEndpointOutput");
        formatter.field("endpoint", &self.endpoint);
        formatter.finish()
    }
}
/// See [`DeleteEndpointOutput`](crate::output::DeleteEndpointOutput)
pub mod delete_endpoint_output {
    /// A builder for [`DeleteEndpointOutput`](crate::output::DeleteEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint: std::option::Option<crate::model::Endpoint>,
    }
    impl Builder {
        /// <p>The endpoint that was deleted.</p>
        pub fn endpoint(mut self, input: crate::model::Endpoint) -> Self {
            self.endpoint = Some(input);
            self
        }
        pub fn set_endpoint(mut self, input: std::option::Option<crate::model::Endpoint>) -> Self {
            self.endpoint = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEndpointOutput`](crate::output::DeleteEndpointOutput)
        pub fn build(self) -> crate::output::DeleteEndpointOutput {
            crate::output::DeleteEndpointOutput {
                endpoint: self.endpoint,
            }
        }
    }
}
impl DeleteEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEndpointOutput`](crate::output::DeleteEndpointOutput)
    pub fn builder() -> crate::output::delete_endpoint_output::Builder {
        crate::output::delete_endpoint_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteConnectionOutput {
    /// <p>The connection that is being deleted.</p>
    pub connection: std::option::Option<crate::model::Connection>,
}
impl std::fmt::Debug for DeleteConnectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteConnectionOutput");
        formatter.field("connection", &self.connection);
        formatter.finish()
    }
}
/// See [`DeleteConnectionOutput`](crate::output::DeleteConnectionOutput)
pub mod delete_connection_output {
    /// A builder for [`DeleteConnectionOutput`](crate::output::DeleteConnectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connection: std::option::Option<crate::model::Connection>,
    }
    impl Builder {
        /// <p>The connection that is being deleted.</p>
        pub fn connection(mut self, input: crate::model::Connection) -> Self {
            self.connection = Some(input);
            self
        }
        pub fn set_connection(
            mut self,
            input: std::option::Option<crate::model::Connection>,
        ) -> Self {
            self.connection = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteConnectionOutput`](crate::output::DeleteConnectionOutput)
        pub fn build(self) -> crate::output::DeleteConnectionOutput {
            crate::output::DeleteConnectionOutput {
                connection: self.connection,
            }
        }
    }
}
impl DeleteConnectionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteConnectionOutput`](crate::output::DeleteConnectionOutput)
    pub fn builder() -> crate::output::delete_connection_output::Builder {
        crate::output::delete_connection_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteCertificateOutput {
    /// <p>The Secure Sockets Layer (SSL) certificate.</p>
    pub certificate: std::option::Option<crate::model::Certificate>,
}
impl std::fmt::Debug for DeleteCertificateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteCertificateOutput");
        formatter.field("certificate", &self.certificate);
        formatter.finish()
    }
}
/// See [`DeleteCertificateOutput`](crate::output::DeleteCertificateOutput)
pub mod delete_certificate_output {
    /// A builder for [`DeleteCertificateOutput`](crate::output::DeleteCertificateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate: std::option::Option<crate::model::Certificate>,
    }
    impl Builder {
        /// <p>The Secure Sockets Layer (SSL) certificate.</p>
        pub fn certificate(mut self, input: crate::model::Certificate) -> Self {
            self.certificate = Some(input);
            self
        }
        pub fn set_certificate(
            mut self,
            input: std::option::Option<crate::model::Certificate>,
        ) -> Self {
            self.certificate = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCertificateOutput`](crate::output::DeleteCertificateOutput)
        pub fn build(self) -> crate::output::DeleteCertificateOutput {
            crate::output::DeleteCertificateOutput {
                certificate: self.certificate,
            }
        }
    }
}
impl DeleteCertificateOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCertificateOutput`](crate::output::DeleteCertificateOutput)
    pub fn builder() -> crate::output::delete_certificate_output::Builder {
        crate::output::delete_certificate_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateReplicationTaskOutput {
    /// <p>The replication task that was created.</p>
    pub replication_task: std::option::Option<crate::model::ReplicationTask>,
}
impl std::fmt::Debug for CreateReplicationTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateReplicationTaskOutput");
        formatter.field("replication_task", &self.replication_task);
        formatter.finish()
    }
}
/// See [`CreateReplicationTaskOutput`](crate::output::CreateReplicationTaskOutput)
pub mod create_replication_task_output {
    /// A builder for [`CreateReplicationTaskOutput`](crate::output::CreateReplicationTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_task: std::option::Option<crate::model::ReplicationTask>,
    }
    impl Builder {
        /// <p>The replication task that was created.</p>
        pub fn replication_task(mut self, input: crate::model::ReplicationTask) -> Self {
            self.replication_task = Some(input);
            self
        }
        pub fn set_replication_task(
            mut self,
            input: std::option::Option<crate::model::ReplicationTask>,
        ) -> Self {
            self.replication_task = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateReplicationTaskOutput`](crate::output::CreateReplicationTaskOutput)
        pub fn build(self) -> crate::output::CreateReplicationTaskOutput {
            crate::output::CreateReplicationTaskOutput {
                replication_task: self.replication_task,
            }
        }
    }
}
impl CreateReplicationTaskOutput {
    /// Creates a new builder-style object to manufacture [`CreateReplicationTaskOutput`](crate::output::CreateReplicationTaskOutput)
    pub fn builder() -> crate::output::create_replication_task_output::Builder {
        crate::output::create_replication_task_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateReplicationSubnetGroupOutput {
    /// <p>The replication subnet group that was created.</p>
    pub replication_subnet_group: std::option::Option<crate::model::ReplicationSubnetGroup>,
}
impl std::fmt::Debug for CreateReplicationSubnetGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateReplicationSubnetGroupOutput");
        formatter.field("replication_subnet_group", &self.replication_subnet_group);
        formatter.finish()
    }
}
/// See [`CreateReplicationSubnetGroupOutput`](crate::output::CreateReplicationSubnetGroupOutput)
pub mod create_replication_subnet_group_output {
    /// A builder for [`CreateReplicationSubnetGroupOutput`](crate::output::CreateReplicationSubnetGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_subnet_group:
            std::option::Option<crate::model::ReplicationSubnetGroup>,
    }
    impl Builder {
        /// <p>The replication subnet group that was created.</p>
        pub fn replication_subnet_group(
            mut self,
            input: crate::model::ReplicationSubnetGroup,
        ) -> Self {
            self.replication_subnet_group = Some(input);
            self
        }
        pub fn set_replication_subnet_group(
            mut self,
            input: std::option::Option<crate::model::ReplicationSubnetGroup>,
        ) -> Self {
            self.replication_subnet_group = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateReplicationSubnetGroupOutput`](crate::output::CreateReplicationSubnetGroupOutput)
        pub fn build(self) -> crate::output::CreateReplicationSubnetGroupOutput {
            crate::output::CreateReplicationSubnetGroupOutput {
                replication_subnet_group: self.replication_subnet_group,
            }
        }
    }
}
impl CreateReplicationSubnetGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateReplicationSubnetGroupOutput`](crate::output::CreateReplicationSubnetGroupOutput)
    pub fn builder() -> crate::output::create_replication_subnet_group_output::Builder {
        crate::output::create_replication_subnet_group_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateReplicationInstanceOutput {
    /// <p>The replication instance that was created.</p>
    pub replication_instance: std::option::Option<crate::model::ReplicationInstance>,
}
impl std::fmt::Debug for CreateReplicationInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateReplicationInstanceOutput");
        formatter.field("replication_instance", &self.replication_instance);
        formatter.finish()
    }
}
/// See [`CreateReplicationInstanceOutput`](crate::output::CreateReplicationInstanceOutput)
pub mod create_replication_instance_output {
    /// A builder for [`CreateReplicationInstanceOutput`](crate::output::CreateReplicationInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_instance: std::option::Option<crate::model::ReplicationInstance>,
    }
    impl Builder {
        /// <p>The replication instance that was created.</p>
        pub fn replication_instance(mut self, input: crate::model::ReplicationInstance) -> Self {
            self.replication_instance = Some(input);
            self
        }
        pub fn set_replication_instance(
            mut self,
            input: std::option::Option<crate::model::ReplicationInstance>,
        ) -> Self {
            self.replication_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateReplicationInstanceOutput`](crate::output::CreateReplicationInstanceOutput)
        pub fn build(self) -> crate::output::CreateReplicationInstanceOutput {
            crate::output::CreateReplicationInstanceOutput {
                replication_instance: self.replication_instance,
            }
        }
    }
}
impl CreateReplicationInstanceOutput {
    /// Creates a new builder-style object to manufacture [`CreateReplicationInstanceOutput`](crate::output::CreateReplicationInstanceOutput)
    pub fn builder() -> crate::output::create_replication_instance_output::Builder {
        crate::output::create_replication_instance_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateEventSubscriptionOutput {
    /// <p>The event subscription that was created.</p>
    pub event_subscription: std::option::Option<crate::model::EventSubscription>,
}
impl std::fmt::Debug for CreateEventSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateEventSubscriptionOutput");
        formatter.field("event_subscription", &self.event_subscription);
        formatter.finish()
    }
}
/// See [`CreateEventSubscriptionOutput`](crate::output::CreateEventSubscriptionOutput)
pub mod create_event_subscription_output {
    /// A builder for [`CreateEventSubscriptionOutput`](crate::output::CreateEventSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_subscription: std::option::Option<crate::model::EventSubscription>,
    }
    impl Builder {
        /// <p>The event subscription that was created.</p>
        pub fn event_subscription(mut self, input: crate::model::EventSubscription) -> Self {
            self.event_subscription = Some(input);
            self
        }
        pub fn set_event_subscription(
            mut self,
            input: std::option::Option<crate::model::EventSubscription>,
        ) -> Self {
            self.event_subscription = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateEventSubscriptionOutput`](crate::output::CreateEventSubscriptionOutput)
        pub fn build(self) -> crate::output::CreateEventSubscriptionOutput {
            crate::output::CreateEventSubscriptionOutput {
                event_subscription: self.event_subscription,
            }
        }
    }
}
impl CreateEventSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`CreateEventSubscriptionOutput`](crate::output::CreateEventSubscriptionOutput)
    pub fn builder() -> crate::output::create_event_subscription_output::Builder {
        crate::output::create_event_subscription_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateEndpointOutput {
    /// <p>The endpoint that was created.</p>
    pub endpoint: std::option::Option<crate::model::Endpoint>,
}
impl std::fmt::Debug for CreateEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateEndpointOutput");
        formatter.field("endpoint", &self.endpoint);
        formatter.finish()
    }
}
/// See [`CreateEndpointOutput`](crate::output::CreateEndpointOutput)
pub mod create_endpoint_output {
    /// A builder for [`CreateEndpointOutput`](crate::output::CreateEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint: std::option::Option<crate::model::Endpoint>,
    }
    impl Builder {
        /// <p>The endpoint that was created.</p>
        pub fn endpoint(mut self, input: crate::model::Endpoint) -> Self {
            self.endpoint = Some(input);
            self
        }
        pub fn set_endpoint(mut self, input: std::option::Option<crate::model::Endpoint>) -> Self {
            self.endpoint = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateEndpointOutput`](crate::output::CreateEndpointOutput)
        pub fn build(self) -> crate::output::CreateEndpointOutput {
            crate::output::CreateEndpointOutput {
                endpoint: self.endpoint,
            }
        }
    }
}
impl CreateEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateEndpointOutput`](crate::output::CreateEndpointOutput)
    pub fn builder() -> crate::output::create_endpoint_output::Builder {
        crate::output::create_endpoint_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelReplicationTaskAssessmentRunOutput {
    /// <p>The <code>ReplicationTaskAssessmentRun</code> object for the canceled assessment
    /// run.</p>
    pub replication_task_assessment_run:
        std::option::Option<crate::model::ReplicationTaskAssessmentRun>,
}
impl std::fmt::Debug for CancelReplicationTaskAssessmentRunOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelReplicationTaskAssessmentRunOutput");
        formatter.field(
            "replication_task_assessment_run",
            &self.replication_task_assessment_run,
        );
        formatter.finish()
    }
}
/// See [`CancelReplicationTaskAssessmentRunOutput`](crate::output::CancelReplicationTaskAssessmentRunOutput)
pub mod cancel_replication_task_assessment_run_output {
    /// A builder for [`CancelReplicationTaskAssessmentRunOutput`](crate::output::CancelReplicationTaskAssessmentRunOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_task_assessment_run:
            std::option::Option<crate::model::ReplicationTaskAssessmentRun>,
    }
    impl Builder {
        /// <p>The <code>ReplicationTaskAssessmentRun</code> object for the canceled assessment
        /// run.</p>
        pub fn replication_task_assessment_run(
            mut self,
            input: crate::model::ReplicationTaskAssessmentRun,
        ) -> Self {
            self.replication_task_assessment_run = Some(input);
            self
        }
        pub fn set_replication_task_assessment_run(
            mut self,
            input: std::option::Option<crate::model::ReplicationTaskAssessmentRun>,
        ) -> Self {
            self.replication_task_assessment_run = input;
            self
        }
        /// Consumes the builder and constructs a [`CancelReplicationTaskAssessmentRunOutput`](crate::output::CancelReplicationTaskAssessmentRunOutput)
        pub fn build(self) -> crate::output::CancelReplicationTaskAssessmentRunOutput {
            crate::output::CancelReplicationTaskAssessmentRunOutput {
                replication_task_assessment_run: self.replication_task_assessment_run,
            }
        }
    }
}
impl CancelReplicationTaskAssessmentRunOutput {
    /// Creates a new builder-style object to manufacture [`CancelReplicationTaskAssessmentRunOutput`](crate::output::CancelReplicationTaskAssessmentRunOutput)
    pub fn builder() -> crate::output::cancel_replication_task_assessment_run_output::Builder {
        crate::output::cancel_replication_task_assessment_run_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ApplyPendingMaintenanceActionOutput {
    /// <p>The AWS DMS resource that the pending maintenance action will be applied to.</p>
    pub resource_pending_maintenance_actions:
        std::option::Option<crate::model::ResourcePendingMaintenanceActions>,
}
impl std::fmt::Debug for ApplyPendingMaintenanceActionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ApplyPendingMaintenanceActionOutput");
        formatter.field(
            "resource_pending_maintenance_actions",
            &self.resource_pending_maintenance_actions,
        );
        formatter.finish()
    }
}
/// See [`ApplyPendingMaintenanceActionOutput`](crate::output::ApplyPendingMaintenanceActionOutput)
pub mod apply_pending_maintenance_action_output {
    /// A builder for [`ApplyPendingMaintenanceActionOutput`](crate::output::ApplyPendingMaintenanceActionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_pending_maintenance_actions:
            std::option::Option<crate::model::ResourcePendingMaintenanceActions>,
    }
    impl Builder {
        /// <p>The AWS DMS resource that the pending maintenance action will be applied to.</p>
        pub fn resource_pending_maintenance_actions(
            mut self,
            input: crate::model::ResourcePendingMaintenanceActions,
        ) -> Self {
            self.resource_pending_maintenance_actions = Some(input);
            self
        }
        pub fn set_resource_pending_maintenance_actions(
            mut self,
            input: std::option::Option<crate::model::ResourcePendingMaintenanceActions>,
        ) -> Self {
            self.resource_pending_maintenance_actions = input;
            self
        }
        /// Consumes the builder and constructs a [`ApplyPendingMaintenanceActionOutput`](crate::output::ApplyPendingMaintenanceActionOutput)
        pub fn build(self) -> crate::output::ApplyPendingMaintenanceActionOutput {
            crate::output::ApplyPendingMaintenanceActionOutput {
                resource_pending_maintenance_actions: self.resource_pending_maintenance_actions,
            }
        }
    }
}
impl ApplyPendingMaintenanceActionOutput {
    /// Creates a new builder-style object to manufacture [`ApplyPendingMaintenanceActionOutput`](crate::output::ApplyPendingMaintenanceActionOutput)
    pub fn builder() -> crate::output::apply_pending_maintenance_action_output::Builder {
        crate::output::apply_pending_maintenance_action_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddTagsToResourceOutput {}
impl std::fmt::Debug for AddTagsToResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddTagsToResourceOutput");
        formatter.finish()
    }
}
/// See [`AddTagsToResourceOutput`](crate::output::AddTagsToResourceOutput)
pub mod add_tags_to_resource_output {
    /// A builder for [`AddTagsToResourceOutput`](crate::output::AddTagsToResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AddTagsToResourceOutput`](crate::output::AddTagsToResourceOutput)
        pub fn build(self) -> crate::output::AddTagsToResourceOutput {
            crate::output::AddTagsToResourceOutput {}
        }
    }
}
impl AddTagsToResourceOutput {
    /// Creates a new builder-style object to manufacture [`AddTagsToResourceOutput`](crate::output::AddTagsToResourceOutput)
    pub fn builder() -> crate::output::add_tags_to_resource_output::Builder {
        crate::output::add_tags_to_resource_output::Builder::default()
    }
}
