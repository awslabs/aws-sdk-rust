// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Adds metadata tags to an AWS DMS resource, including replication instance, endpoint,
/// security group, and migration task. These tags can also be used with cost allocation
/// reporting to track cost associated with DMS resources, or used in a Condition statement in
/// an IAM policy for DMS. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html">
/// <code>Tag</code>
/// </a> data type description.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddTagsToResource {
    _private: (),
}
impl AddTagsToResource {
    /// Creates a new builder-style object to manufacture [`AddTagsToResourceInput`](crate::input::AddTagsToResourceInput)
    pub fn builder() -> crate::input::add_tags_to_resource_input::Builder {
        crate::input::add_tags_to_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddTagsToResource {
    type Output = std::result::Result<
        crate::output::AddTagsToResourceOutput,
        crate::error::AddTagsToResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_tags_to_resource_error(response)
        } else {
            crate::operation_deser::parse_add_tags_to_resource_response(response)
        }
    }
}

/// <p>Applies a pending maintenance action to a resource (for example, to a replication instance).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ApplyPendingMaintenanceAction {
    _private: (),
}
impl ApplyPendingMaintenanceAction {
    /// Creates a new builder-style object to manufacture [`ApplyPendingMaintenanceActionInput`](crate::input::ApplyPendingMaintenanceActionInput)
    pub fn builder() -> crate::input::apply_pending_maintenance_action_input::Builder {
        crate::input::apply_pending_maintenance_action_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ApplyPendingMaintenanceAction {
    type Output = std::result::Result<
        crate::output::ApplyPendingMaintenanceActionOutput,
        crate::error::ApplyPendingMaintenanceActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_apply_pending_maintenance_action_error(response)
        } else {
            crate::operation_deser::parse_apply_pending_maintenance_action_response(response)
        }
    }
}

/// <p>Cancels a single premigration assessment run.</p>
/// <p>This operation prevents any individual assessments from running if they haven't started
/// running. It also attempts to cancel any individual assessments that are currently
/// running.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelReplicationTaskAssessmentRun {
    _private: (),
}
impl CancelReplicationTaskAssessmentRun {
    /// Creates a new builder-style object to manufacture [`CancelReplicationTaskAssessmentRunInput`](crate::input::CancelReplicationTaskAssessmentRunInput)
    pub fn builder() -> crate::input::cancel_replication_task_assessment_run_input::Builder {
        crate::input::cancel_replication_task_assessment_run_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelReplicationTaskAssessmentRun {
    type Output = std::result::Result<
        crate::output::CancelReplicationTaskAssessmentRunOutput,
        crate::error::CancelReplicationTaskAssessmentRunError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_replication_task_assessment_run_error(response)
        } else {
            crate::operation_deser::parse_cancel_replication_task_assessment_run_response(response)
        }
    }
}

/// <p>Creates an endpoint using the provided settings.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEndpoint {
    _private: (),
}
impl CreateEndpoint {
    /// Creates a new builder-style object to manufacture [`CreateEndpointInput`](crate::input::CreateEndpointInput)
    pub fn builder() -> crate::input::create_endpoint_input::Builder {
        crate::input::create_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEndpoint {
    type Output =
        std::result::Result<crate::output::CreateEndpointOutput, crate::error::CreateEndpointError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_endpoint_error(response)
        } else {
            crate::operation_deser::parse_create_endpoint_response(response)
        }
    }
}

/// <p> Creates an AWS DMS event notification subscription. </p>
/// <p>You can specify the type of source (<code>SourceType</code>) you want to be notified of,
/// provide a list of AWS DMS source IDs (<code>SourceIds</code>) that triggers the events, and
/// provide a list of event categories (<code>EventCategories</code>) for events you want to be
/// notified of. If you specify both the <code>SourceType</code> and <code>SourceIds</code>,
/// such as <code>SourceType = replication-instance</code> and <code>SourceIdentifier =
/// my-replinstance</code>, you will be notified of all the replication instance events for
/// the specified source. If you specify a <code>SourceType</code> but don't specify a
/// <code>SourceIdentifier</code>, you receive notice of the events for that source type for
/// all your AWS DMS sources. If you don't specify either <code>SourceType</code> nor
/// <code>SourceIdentifier</code>, you will be notified of events generated from all AWS DMS
/// sources belonging to your customer account.</p>
/// <p>For more information about AWS DMS events, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and
/// Notifications</a> in the <i>AWS Database Migration Service User
/// Guide.</i>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEventSubscription {
    _private: (),
}
impl CreateEventSubscription {
    /// Creates a new builder-style object to manufacture [`CreateEventSubscriptionInput`](crate::input::CreateEventSubscriptionInput)
    pub fn builder() -> crate::input::create_event_subscription_input::Builder {
        crate::input::create_event_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEventSubscription {
    type Output = std::result::Result<
        crate::output::CreateEventSubscriptionOutput,
        crate::error::CreateEventSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_event_subscription_error(response)
        } else {
            crate::operation_deser::parse_create_event_subscription_response(response)
        }
    }
}

/// <p>Creates the replication instance using the specified parameters.</p>
/// <p>AWS DMS requires that your account have certain roles with appropriate permissions
/// before you can create a replication instance. For information on the required roles, see
/// <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.APIRole">Creating the IAM Roles to Use With the AWS CLI and AWS DMS API</a>. For
/// information on the required permissions, see
/// <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.IAMPermissions">IAM Permissions Needed to Use AWS DMS</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateReplicationInstance {
    _private: (),
}
impl CreateReplicationInstance {
    /// Creates a new builder-style object to manufacture [`CreateReplicationInstanceInput`](crate::input::CreateReplicationInstanceInput)
    pub fn builder() -> crate::input::create_replication_instance_input::Builder {
        crate::input::create_replication_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateReplicationInstance {
    type Output = std::result::Result<
        crate::output::CreateReplicationInstanceOutput,
        crate::error::CreateReplicationInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_replication_instance_error(response)
        } else {
            crate::operation_deser::parse_create_replication_instance_response(response)
        }
    }
}

/// <p>Creates a replication subnet group given a list of the subnet IDs in a VPC.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateReplicationSubnetGroup {
    _private: (),
}
impl CreateReplicationSubnetGroup {
    /// Creates a new builder-style object to manufacture [`CreateReplicationSubnetGroupInput`](crate::input::CreateReplicationSubnetGroupInput)
    pub fn builder() -> crate::input::create_replication_subnet_group_input::Builder {
        crate::input::create_replication_subnet_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateReplicationSubnetGroup {
    type Output = std::result::Result<
        crate::output::CreateReplicationSubnetGroupOutput,
        crate::error::CreateReplicationSubnetGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_replication_subnet_group_error(response)
        } else {
            crate::operation_deser::parse_create_replication_subnet_group_response(response)
        }
    }
}

/// <p>Creates a replication task using the specified parameters.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateReplicationTask {
    _private: (),
}
impl CreateReplicationTask {
    /// Creates a new builder-style object to manufacture [`CreateReplicationTaskInput`](crate::input::CreateReplicationTaskInput)
    pub fn builder() -> crate::input::create_replication_task_input::Builder {
        crate::input::create_replication_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateReplicationTask {
    type Output = std::result::Result<
        crate::output::CreateReplicationTaskOutput,
        crate::error::CreateReplicationTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_replication_task_error(response)
        } else {
            crate::operation_deser::parse_create_replication_task_response(response)
        }
    }
}

/// <p>Deletes the specified certificate. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCertificate {
    _private: (),
}
impl DeleteCertificate {
    /// Creates a new builder-style object to manufacture [`DeleteCertificateInput`](crate::input::DeleteCertificateInput)
    pub fn builder() -> crate::input::delete_certificate_input::Builder {
        crate::input::delete_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteCertificate {
    type Output = std::result::Result<
        crate::output::DeleteCertificateOutput,
        crate::error::DeleteCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_certificate_error(response)
        } else {
            crate::operation_deser::parse_delete_certificate_response(response)
        }
    }
}

/// <p>Deletes the connection between a replication instance and an endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConnection {
    _private: (),
}
impl DeleteConnection {
    /// Creates a new builder-style object to manufacture [`DeleteConnectionInput`](crate::input::DeleteConnectionInput)
    pub fn builder() -> crate::input::delete_connection_input::Builder {
        crate::input::delete_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteConnection {
    type Output = std::result::Result<
        crate::output::DeleteConnectionOutput,
        crate::error::DeleteConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_connection_error(response)
        } else {
            crate::operation_deser::parse_delete_connection_response(response)
        }
    }
}

/// <p>Deletes the specified endpoint.</p>
/// <note>
/// <p>All tasks associated with the endpoint must be deleted before you can delete the
/// endpoint.</p>
/// </note>
/// <p></p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEndpoint {
    _private: (),
}
impl DeleteEndpoint {
    /// Creates a new builder-style object to manufacture [`DeleteEndpointInput`](crate::input::DeleteEndpointInput)
    pub fn builder() -> crate::input::delete_endpoint_input::Builder {
        crate::input::delete_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEndpoint {
    type Output =
        std::result::Result<crate::output::DeleteEndpointOutput, crate::error::DeleteEndpointError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_endpoint_error(response)
        } else {
            crate::operation_deser::parse_delete_endpoint_response(response)
        }
    }
}

/// <p> Deletes an AWS DMS event subscription. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEventSubscription {
    _private: (),
}
impl DeleteEventSubscription {
    /// Creates a new builder-style object to manufacture [`DeleteEventSubscriptionInput`](crate::input::DeleteEventSubscriptionInput)
    pub fn builder() -> crate::input::delete_event_subscription_input::Builder {
        crate::input::delete_event_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEventSubscription {
    type Output = std::result::Result<
        crate::output::DeleteEventSubscriptionOutput,
        crate::error::DeleteEventSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_event_subscription_error(response)
        } else {
            crate::operation_deser::parse_delete_event_subscription_response(response)
        }
    }
}

/// <p>Deletes the specified replication instance.</p>
/// <note>
/// <p>You must delete any migration tasks that are associated with the replication instance
/// before you can delete it.</p>
/// </note>
/// <p></p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteReplicationInstance {
    _private: (),
}
impl DeleteReplicationInstance {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationInstanceInput`](crate::input::DeleteReplicationInstanceInput)
    pub fn builder() -> crate::input::delete_replication_instance_input::Builder {
        crate::input::delete_replication_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteReplicationInstance {
    type Output = std::result::Result<
        crate::output::DeleteReplicationInstanceOutput,
        crate::error::DeleteReplicationInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_replication_instance_error(response)
        } else {
            crate::operation_deser::parse_delete_replication_instance_response(response)
        }
    }
}

/// <p>Deletes a subnet group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteReplicationSubnetGroup {
    _private: (),
}
impl DeleteReplicationSubnetGroup {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationSubnetGroupInput`](crate::input::DeleteReplicationSubnetGroupInput)
    pub fn builder() -> crate::input::delete_replication_subnet_group_input::Builder {
        crate::input::delete_replication_subnet_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteReplicationSubnetGroup {
    type Output = std::result::Result<
        crate::output::DeleteReplicationSubnetGroupOutput,
        crate::error::DeleteReplicationSubnetGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_replication_subnet_group_error(response)
        } else {
            crate::operation_deser::parse_delete_replication_subnet_group_response(response)
        }
    }
}

/// <p>Deletes the specified replication task.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteReplicationTask {
    _private: (),
}
impl DeleteReplicationTask {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationTaskInput`](crate::input::DeleteReplicationTaskInput)
    pub fn builder() -> crate::input::delete_replication_task_input::Builder {
        crate::input::delete_replication_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteReplicationTask {
    type Output = std::result::Result<
        crate::output::DeleteReplicationTaskOutput,
        crate::error::DeleteReplicationTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_replication_task_error(response)
        } else {
            crate::operation_deser::parse_delete_replication_task_response(response)
        }
    }
}

/// <p>Deletes the record of a single premigration assessment run.</p>
/// <p>This operation removes all metadata that AWS DMS maintains about this assessment run.
/// However, the operation leaves untouched all information about this assessment run that is
/// stored in your Amazon S3 bucket.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteReplicationTaskAssessmentRun {
    _private: (),
}
impl DeleteReplicationTaskAssessmentRun {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationTaskAssessmentRunInput`](crate::input::DeleteReplicationTaskAssessmentRunInput)
    pub fn builder() -> crate::input::delete_replication_task_assessment_run_input::Builder {
        crate::input::delete_replication_task_assessment_run_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteReplicationTaskAssessmentRun {
    type Output = std::result::Result<
        crate::output::DeleteReplicationTaskAssessmentRunOutput,
        crate::error::DeleteReplicationTaskAssessmentRunError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_replication_task_assessment_run_error(response)
        } else {
            crate::operation_deser::parse_delete_replication_task_assessment_run_response(response)
        }
    }
}

/// <p>Lists all of the AWS DMS attributes for a customer account. These attributes include AWS
/// DMS quotas for the account and a unique account identifier in a particular DMS region. DMS
/// quotas include a list of resource quotas supported by the account, such as the number of
/// replication instances allowed. The description for each resource quota, includes the quota
/// name, current usage toward that quota, and the quota's maximum value. DMS uses the unique
/// account identifier to name each artifact used by DMS in the given region.</p>
/// <p>This command does not take any parameters.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAccountAttributes {
    _private: (),
}
impl DescribeAccountAttributes {
    /// Creates a new builder-style object to manufacture [`DescribeAccountAttributesInput`](crate::input::DescribeAccountAttributesInput)
    pub fn builder() -> crate::input::describe_account_attributes_input::Builder {
        crate::input::describe_account_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAccountAttributes {
    type Output = std::result::Result<
        crate::output::DescribeAccountAttributesOutput,
        crate::error::DescribeAccountAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_account_attributes_error(response)
        } else {
            crate::operation_deser::parse_describe_account_attributes_response(response)
        }
    }
}

/// <p>Provides a list of individual assessments that you can specify for a new premigration
/// assessment run, given one or more parameters.</p>
/// <p>If you specify an existing migration task, this operation provides the default individual
/// assessments you can specify for that task. Otherwise, the specified parameters model elements
/// of a possible migration task on which to base a premigration assessment run.</p>
/// <p>To use these migration task modeling parameters, you must specify an existing replication instance,
/// a source database engine, a target database engine, and a migration type. This combination of
/// parameters potentially limits the default individual assessments available for an assessment run
/// created for a corresponding migration task.</p>
/// <p>If you specify no parameters, this operation provides a list of all possible individual assessments
/// that you can specify for an assessment run. If you specify any one of the task modeling parameters, you must
/// specify all of them or the operation cannot provide a list of individual assessments.
/// The only parameter that you can specify alone is for an existing migration task. The specified task
/// definition then determines the default list of individual assessments that you can specify in an
/// assessment run for the task.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeApplicableIndividualAssessments {
    _private: (),
}
impl DescribeApplicableIndividualAssessments {
    /// Creates a new builder-style object to manufacture [`DescribeApplicableIndividualAssessmentsInput`](crate::input::DescribeApplicableIndividualAssessmentsInput)
    pub fn builder() -> crate::input::describe_applicable_individual_assessments_input::Builder {
        crate::input::describe_applicable_individual_assessments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeApplicableIndividualAssessments {
    type Output = std::result::Result<
        crate::output::DescribeApplicableIndividualAssessmentsOutput,
        crate::error::DescribeApplicableIndividualAssessmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_applicable_individual_assessments_error(response)
        } else {
            crate::operation_deser::parse_describe_applicable_individual_assessments_response(
                response,
            )
        }
    }
}

/// <p>Provides a description of the certificate.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCertificates {
    _private: (),
}
impl DescribeCertificates {
    /// Creates a new builder-style object to manufacture [`DescribeCertificatesInput`](crate::input::DescribeCertificatesInput)
    pub fn builder() -> crate::input::describe_certificates_input::Builder {
        crate::input::describe_certificates_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCertificates {
    type Output = std::result::Result<
        crate::output::DescribeCertificatesOutput,
        crate::error::DescribeCertificatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_certificates_error(response)
        } else {
            crate::operation_deser::parse_describe_certificates_response(response)
        }
    }
}

/// <p>Describes the status of the connections that have been made between the replication
/// instance and an endpoint. Connections are created when you test an endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConnections {
    _private: (),
}
impl DescribeConnections {
    /// Creates a new builder-style object to manufacture [`DescribeConnectionsInput`](crate::input::DescribeConnectionsInput)
    pub fn builder() -> crate::input::describe_connections_input::Builder {
        crate::input::describe_connections_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeConnections {
    type Output = std::result::Result<
        crate::output::DescribeConnectionsOutput,
        crate::error::DescribeConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_connections_error(response)
        } else {
            crate::operation_deser::parse_describe_connections_response(response)
        }
    }
}

/// <p>Returns information about the endpoints for your account in the current region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEndpoints {
    _private: (),
}
impl DescribeEndpoints {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointsInput`](crate::input::DescribeEndpointsInput)
    pub fn builder() -> crate::input::describe_endpoints_input::Builder {
        crate::input::describe_endpoints_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEndpoints {
    type Output = std::result::Result<
        crate::output::DescribeEndpointsOutput,
        crate::error::DescribeEndpointsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_endpoints_error(response)
        } else {
            crate::operation_deser::parse_describe_endpoints_response(response)
        }
    }
}

/// <p>Returns information about the possible endpoint settings available
/// when you create an endpoint for a specific database engine.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEndpointSettings {
    _private: (),
}
impl DescribeEndpointSettings {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointSettingsInput`](crate::input::DescribeEndpointSettingsInput)
    pub fn builder() -> crate::input::describe_endpoint_settings_input::Builder {
        crate::input::describe_endpoint_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEndpointSettings {
    type Output = std::result::Result<
        crate::output::DescribeEndpointSettingsOutput,
        crate::error::DescribeEndpointSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_endpoint_settings_error(response)
        } else {
            crate::operation_deser::parse_describe_endpoint_settings_response(response)
        }
    }
}

/// <p>Returns information about the type of endpoints available.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEndpointTypes {
    _private: (),
}
impl DescribeEndpointTypes {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointTypesInput`](crate::input::DescribeEndpointTypesInput)
    pub fn builder() -> crate::input::describe_endpoint_types_input::Builder {
        crate::input::describe_endpoint_types_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEndpointTypes {
    type Output = std::result::Result<
        crate::output::DescribeEndpointTypesOutput,
        crate::error::DescribeEndpointTypesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_endpoint_types_error(response)
        } else {
            crate::operation_deser::parse_describe_endpoint_types_response(response)
        }
    }
}

/// <p>Lists categories for all event source types, or, if specified, for a specified source
/// type. You can see a list of the event categories and source types in <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events
/// and Notifications</a> in the <i>AWS Database Migration Service User
/// Guide.</i>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEventCategories {
    _private: (),
}
impl DescribeEventCategories {
    /// Creates a new builder-style object to manufacture [`DescribeEventCategoriesInput`](crate::input::DescribeEventCategoriesInput)
    pub fn builder() -> crate::input::describe_event_categories_input::Builder {
        crate::input::describe_event_categories_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEventCategories {
    type Output = std::result::Result<
        crate::output::DescribeEventCategoriesOutput,
        crate::error::DescribeEventCategoriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_event_categories_error(response)
        } else {
            crate::operation_deser::parse_describe_event_categories_response(response)
        }
    }
}

/// <p> Lists events for a given source identifier and source type. You can also specify a
/// start and end time. For more information on AWS DMS events, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and
/// Notifications</a> in the <i>AWS Database Migration User
/// Guide.</i>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEvents {
    _private: (),
}
impl DescribeEvents {
    /// Creates a new builder-style object to manufacture [`DescribeEventsInput`](crate::input::DescribeEventsInput)
    pub fn builder() -> crate::input::describe_events_input::Builder {
        crate::input::describe_events_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEvents {
    type Output =
        std::result::Result<crate::output::DescribeEventsOutput, crate::error::DescribeEventsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_events_error(response)
        } else {
            crate::operation_deser::parse_describe_events_response(response)
        }
    }
}

/// <p>Lists all the event subscriptions for a customer account. The description of a
/// subscription includes <code>SubscriptionName</code>, <code>SNSTopicARN</code>,
/// <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>,
/// <code>CreationTime</code>, and <code>Status</code>. </p>
/// <p>If you specify <code>SubscriptionName</code>, this action lists the description for that
/// subscription.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEventSubscriptions {
    _private: (),
}
impl DescribeEventSubscriptions {
    /// Creates a new builder-style object to manufacture [`DescribeEventSubscriptionsInput`](crate::input::DescribeEventSubscriptionsInput)
    pub fn builder() -> crate::input::describe_event_subscriptions_input::Builder {
        crate::input::describe_event_subscriptions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEventSubscriptions {
    type Output = std::result::Result<
        crate::output::DescribeEventSubscriptionsOutput,
        crate::error::DescribeEventSubscriptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_event_subscriptions_error(response)
        } else {
            crate::operation_deser::parse_describe_event_subscriptions_response(response)
        }
    }
}

/// <p>Returns information about the replication instance types that can be created in the
/// specified region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeOrderableReplicationInstances {
    _private: (),
}
impl DescribeOrderableReplicationInstances {
    /// Creates a new builder-style object to manufacture [`DescribeOrderableReplicationInstancesInput`](crate::input::DescribeOrderableReplicationInstancesInput)
    pub fn builder() -> crate::input::describe_orderable_replication_instances_input::Builder {
        crate::input::describe_orderable_replication_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeOrderableReplicationInstances {
    type Output = std::result::Result<
        crate::output::DescribeOrderableReplicationInstancesOutput,
        crate::error::DescribeOrderableReplicationInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_orderable_replication_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_orderable_replication_instances_response(
                response,
            )
        }
    }
}

/// <p>For internal use only</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePendingMaintenanceActions {
    _private: (),
}
impl DescribePendingMaintenanceActions {
    /// Creates a new builder-style object to manufacture [`DescribePendingMaintenanceActionsInput`](crate::input::DescribePendingMaintenanceActionsInput)
    pub fn builder() -> crate::input::describe_pending_maintenance_actions_input::Builder {
        crate::input::describe_pending_maintenance_actions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePendingMaintenanceActions {
    type Output = std::result::Result<
        crate::output::DescribePendingMaintenanceActionsOutput,
        crate::error::DescribePendingMaintenanceActionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_pending_maintenance_actions_error(response)
        } else {
            crate::operation_deser::parse_describe_pending_maintenance_actions_response(response)
        }
    }
}

/// <p>Returns the status of the RefreshSchemas operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRefreshSchemasStatus {
    _private: (),
}
impl DescribeRefreshSchemasStatus {
    /// Creates a new builder-style object to manufacture [`DescribeRefreshSchemasStatusInput`](crate::input::DescribeRefreshSchemasStatusInput)
    pub fn builder() -> crate::input::describe_refresh_schemas_status_input::Builder {
        crate::input::describe_refresh_schemas_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeRefreshSchemasStatus {
    type Output = std::result::Result<
        crate::output::DescribeRefreshSchemasStatusOutput,
        crate::error::DescribeRefreshSchemasStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_refresh_schemas_status_error(response)
        } else {
            crate::operation_deser::parse_describe_refresh_schemas_status_response(response)
        }
    }
}

/// <p>Returns information about replication instances for your account in the current
/// region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReplicationInstances {
    _private: (),
}
impl DescribeReplicationInstances {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationInstancesInput`](crate::input::DescribeReplicationInstancesInput)
    pub fn builder() -> crate::input::describe_replication_instances_input::Builder {
        crate::input::describe_replication_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReplicationInstances {
    type Output = std::result::Result<
        crate::output::DescribeReplicationInstancesOutput,
        crate::error::DescribeReplicationInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_replication_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_replication_instances_response(response)
        }
    }
}

/// <p>Returns information about the task logs for the specified task.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReplicationInstanceTaskLogs {
    _private: (),
}
impl DescribeReplicationInstanceTaskLogs {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationInstanceTaskLogsInput`](crate::input::DescribeReplicationInstanceTaskLogsInput)
    pub fn builder() -> crate::input::describe_replication_instance_task_logs_input::Builder {
        crate::input::describe_replication_instance_task_logs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReplicationInstanceTaskLogs {
    type Output = std::result::Result<
        crate::output::DescribeReplicationInstanceTaskLogsOutput,
        crate::error::DescribeReplicationInstanceTaskLogsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_replication_instance_task_logs_error(response)
        } else {
            crate::operation_deser::parse_describe_replication_instance_task_logs_response(response)
        }
    }
}

/// <p>Returns information about the replication subnet groups.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReplicationSubnetGroups {
    _private: (),
}
impl DescribeReplicationSubnetGroups {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationSubnetGroupsInput`](crate::input::DescribeReplicationSubnetGroupsInput)
    pub fn builder() -> crate::input::describe_replication_subnet_groups_input::Builder {
        crate::input::describe_replication_subnet_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReplicationSubnetGroups {
    type Output = std::result::Result<
        crate::output::DescribeReplicationSubnetGroupsOutput,
        crate::error::DescribeReplicationSubnetGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_replication_subnet_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_replication_subnet_groups_response(response)
        }
    }
}

/// <p>Returns the task assessment results from Amazon S3. This action always returns the
/// latest results.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReplicationTaskAssessmentResults {
    _private: (),
}
impl DescribeReplicationTaskAssessmentResults {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationTaskAssessmentResultsInput`](crate::input::DescribeReplicationTaskAssessmentResultsInput)
    pub fn builder() -> crate::input::describe_replication_task_assessment_results_input::Builder {
        crate::input::describe_replication_task_assessment_results_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReplicationTaskAssessmentResults {
    type Output = std::result::Result<
        crate::output::DescribeReplicationTaskAssessmentResultsOutput,
        crate::error::DescribeReplicationTaskAssessmentResultsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_replication_task_assessment_results_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_replication_task_assessment_results_response(
                response,
            )
        }
    }
}

/// <p>Returns a paginated list of premigration assessment runs based on filter
/// settings.</p>
/// <p>These filter settings can specify a combination of premigration assessment runs,
/// migration tasks, replication instances, and assessment run status values.</p>
/// <note>
/// <p>This operation doesn't return information about individual assessments. For this
/// information, see the <code>DescribeReplicationTaskIndividualAssessments</code>
/// operation. </p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReplicationTaskAssessmentRuns {
    _private: (),
}
impl DescribeReplicationTaskAssessmentRuns {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationTaskAssessmentRunsInput`](crate::input::DescribeReplicationTaskAssessmentRunsInput)
    pub fn builder() -> crate::input::describe_replication_task_assessment_runs_input::Builder {
        crate::input::describe_replication_task_assessment_runs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReplicationTaskAssessmentRuns {
    type Output = std::result::Result<
        crate::output::DescribeReplicationTaskAssessmentRunsOutput,
        crate::error::DescribeReplicationTaskAssessmentRunsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_replication_task_assessment_runs_error(response)
        } else {
            crate::operation_deser::parse_describe_replication_task_assessment_runs_response(
                response,
            )
        }
    }
}

/// <p>Returns a paginated list of individual assessments based on filter settings.</p>
/// <p>These filter settings can specify a combination of premigration assessment runs,
/// migration tasks, and assessment status values.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReplicationTaskIndividualAssessments {
    _private: (),
}
impl DescribeReplicationTaskIndividualAssessments {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationTaskIndividualAssessmentsInput`](crate::input::DescribeReplicationTaskIndividualAssessmentsInput)
    pub fn builder() -> crate::input::describe_replication_task_individual_assessments_input::Builder
    {
        crate::input::describe_replication_task_individual_assessments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReplicationTaskIndividualAssessments {
    type Output = std::result::Result<
        crate::output::DescribeReplicationTaskIndividualAssessmentsOutput,
        crate::error::DescribeReplicationTaskIndividualAssessmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_replication_task_individual_assessments_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_replication_task_individual_assessments_response(
                response,
            )
        }
    }
}

/// <p>Returns information about replication tasks for your account in the current
/// region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReplicationTasks {
    _private: (),
}
impl DescribeReplicationTasks {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationTasksInput`](crate::input::DescribeReplicationTasksInput)
    pub fn builder() -> crate::input::describe_replication_tasks_input::Builder {
        crate::input::describe_replication_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReplicationTasks {
    type Output = std::result::Result<
        crate::output::DescribeReplicationTasksOutput,
        crate::error::DescribeReplicationTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_replication_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_replication_tasks_response(response)
        }
    }
}

/// <p>Returns information about the schema for the specified endpoint.</p>
/// <p></p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSchemas {
    _private: (),
}
impl DescribeSchemas {
    /// Creates a new builder-style object to manufacture [`DescribeSchemasInput`](crate::input::DescribeSchemasInput)
    pub fn builder() -> crate::input::describe_schemas_input::Builder {
        crate::input::describe_schemas_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSchemas {
    type Output = std::result::Result<
        crate::output::DescribeSchemasOutput,
        crate::error::DescribeSchemasError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_schemas_error(response)
        } else {
            crate::operation_deser::parse_describe_schemas_response(response)
        }
    }
}

/// <p>Returns table statistics on the database migration task, including table name, rows
/// inserted, rows updated, and rows deleted.</p>
/// <p>Note that the "last updated" column the DMS console only indicates the time that AWS DMS
/// last updated the table statistics record for a table. It does not indicate the time of the
/// last update to the table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTableStatistics {
    _private: (),
}
impl DescribeTableStatistics {
    /// Creates a new builder-style object to manufacture [`DescribeTableStatisticsInput`](crate::input::DescribeTableStatisticsInput)
    pub fn builder() -> crate::input::describe_table_statistics_input::Builder {
        crate::input::describe_table_statistics_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTableStatistics {
    type Output = std::result::Result<
        crate::output::DescribeTableStatisticsOutput,
        crate::error::DescribeTableStatisticsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_table_statistics_error(response)
        } else {
            crate::operation_deser::parse_describe_table_statistics_response(response)
        }
    }
}

/// <p>Uploads the specified certificate.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportCertificate {
    _private: (),
}
impl ImportCertificate {
    /// Creates a new builder-style object to manufacture [`ImportCertificateInput`](crate::input::ImportCertificateInput)
    pub fn builder() -> crate::input::import_certificate_input::Builder {
        crate::input::import_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportCertificate {
    type Output = std::result::Result<
        crate::output::ImportCertificateOutput,
        crate::error::ImportCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_certificate_error(response)
        } else {
            crate::operation_deser::parse_import_certificate_response(response)
        }
    }
}

/// <p>Lists all metadata tags attached to an AWS DMS resource, including
/// replication instance, endpoint, security group, and migration task.
/// For more information, see <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html">
/// <code>Tag</code>
/// </a> data type description.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Modifies the specified endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyEndpoint {
    _private: (),
}
impl ModifyEndpoint {
    /// Creates a new builder-style object to manufacture [`ModifyEndpointInput`](crate::input::ModifyEndpointInput)
    pub fn builder() -> crate::input::modify_endpoint_input::Builder {
        crate::input::modify_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyEndpoint {
    type Output =
        std::result::Result<crate::output::ModifyEndpointOutput, crate::error::ModifyEndpointError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_endpoint_error(response)
        } else {
            crate::operation_deser::parse_modify_endpoint_response(response)
        }
    }
}

/// <p>Modifies an existing AWS DMS event notification subscription. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyEventSubscription {
    _private: (),
}
impl ModifyEventSubscription {
    /// Creates a new builder-style object to manufacture [`ModifyEventSubscriptionInput`](crate::input::ModifyEventSubscriptionInput)
    pub fn builder() -> crate::input::modify_event_subscription_input::Builder {
        crate::input::modify_event_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyEventSubscription {
    type Output = std::result::Result<
        crate::output::ModifyEventSubscriptionOutput,
        crate::error::ModifyEventSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_event_subscription_error(response)
        } else {
            crate::operation_deser::parse_modify_event_subscription_response(response)
        }
    }
}

/// <p>Modifies the replication instance to apply new settings. You can change one or more
/// parameters by specifying these parameters and the new values in the request.</p>
/// <p>Some settings are applied during the maintenance window.</p>
/// <p></p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyReplicationInstance {
    _private: (),
}
impl ModifyReplicationInstance {
    /// Creates a new builder-style object to manufacture [`ModifyReplicationInstanceInput`](crate::input::ModifyReplicationInstanceInput)
    pub fn builder() -> crate::input::modify_replication_instance_input::Builder {
        crate::input::modify_replication_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyReplicationInstance {
    type Output = std::result::Result<
        crate::output::ModifyReplicationInstanceOutput,
        crate::error::ModifyReplicationInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_replication_instance_error(response)
        } else {
            crate::operation_deser::parse_modify_replication_instance_response(response)
        }
    }
}

/// <p>Modifies the settings for the specified replication subnet group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyReplicationSubnetGroup {
    _private: (),
}
impl ModifyReplicationSubnetGroup {
    /// Creates a new builder-style object to manufacture [`ModifyReplicationSubnetGroupInput`](crate::input::ModifyReplicationSubnetGroupInput)
    pub fn builder() -> crate::input::modify_replication_subnet_group_input::Builder {
        crate::input::modify_replication_subnet_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyReplicationSubnetGroup {
    type Output = std::result::Result<
        crate::output::ModifyReplicationSubnetGroupOutput,
        crate::error::ModifyReplicationSubnetGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_replication_subnet_group_error(response)
        } else {
            crate::operation_deser::parse_modify_replication_subnet_group_response(response)
        }
    }
}

/// <p>Modifies the specified replication task.</p>
/// <p>You can't modify the task endpoints. The task must be stopped before you can modify it. </p>
/// <p>For more information about AWS DMS tasks, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html">Working with Migration Tasks</a> in the
/// <i>AWS Database Migration Service User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyReplicationTask {
    _private: (),
}
impl ModifyReplicationTask {
    /// Creates a new builder-style object to manufacture [`ModifyReplicationTaskInput`](crate::input::ModifyReplicationTaskInput)
    pub fn builder() -> crate::input::modify_replication_task_input::Builder {
        crate::input::modify_replication_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyReplicationTask {
    type Output = std::result::Result<
        crate::output::ModifyReplicationTaskOutput,
        crate::error::ModifyReplicationTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_replication_task_error(response)
        } else {
            crate::operation_deser::parse_modify_replication_task_response(response)
        }
    }
}

/// <p>Moves a replication task from its current replication instance to a different target
/// replication instance using the specified parameters. The target replication instance must
/// be created with the same or later AWS DMS version as the current replication
/// instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct MoveReplicationTask {
    _private: (),
}
impl MoveReplicationTask {
    /// Creates a new builder-style object to manufacture [`MoveReplicationTaskInput`](crate::input::MoveReplicationTaskInput)
    pub fn builder() -> crate::input::move_replication_task_input::Builder {
        crate::input::move_replication_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for MoveReplicationTask {
    type Output = std::result::Result<
        crate::output::MoveReplicationTaskOutput,
        crate::error::MoveReplicationTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_move_replication_task_error(response)
        } else {
            crate::operation_deser::parse_move_replication_task_response(response)
        }
    }
}

/// <p>Reboots a replication instance. Rebooting results in a momentary outage, until the
/// replication instance becomes available again.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RebootReplicationInstance {
    _private: (),
}
impl RebootReplicationInstance {
    /// Creates a new builder-style object to manufacture [`RebootReplicationInstanceInput`](crate::input::RebootReplicationInstanceInput)
    pub fn builder() -> crate::input::reboot_replication_instance_input::Builder {
        crate::input::reboot_replication_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RebootReplicationInstance {
    type Output = std::result::Result<
        crate::output::RebootReplicationInstanceOutput,
        crate::error::RebootReplicationInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reboot_replication_instance_error(response)
        } else {
            crate::operation_deser::parse_reboot_replication_instance_response(response)
        }
    }
}

/// <p>Populates the schema for the specified endpoint. This is an asynchronous operation and
/// can take several minutes. You can check the status of this operation by calling the
/// DescribeRefreshSchemasStatus operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RefreshSchemas {
    _private: (),
}
impl RefreshSchemas {
    /// Creates a new builder-style object to manufacture [`RefreshSchemasInput`](crate::input::RefreshSchemasInput)
    pub fn builder() -> crate::input::refresh_schemas_input::Builder {
        crate::input::refresh_schemas_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RefreshSchemas {
    type Output =
        std::result::Result<crate::output::RefreshSchemasOutput, crate::error::RefreshSchemasError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_refresh_schemas_error(response)
        } else {
            crate::operation_deser::parse_refresh_schemas_response(response)
        }
    }
}

/// <p>Reloads the target database table with the source data. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ReloadTables {
    _private: (),
}
impl ReloadTables {
    /// Creates a new builder-style object to manufacture [`ReloadTablesInput`](crate::input::ReloadTablesInput)
    pub fn builder() -> crate::input::reload_tables_input::Builder {
        crate::input::reload_tables_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ReloadTables {
    type Output =
        std::result::Result<crate::output::ReloadTablesOutput, crate::error::ReloadTablesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reload_tables_error(response)
        } else {
            crate::operation_deser::parse_reload_tables_response(response)
        }
    }
}

/// <p>Removes metadata tags from an AWS DMS resource, including replication instance,
/// endpoint, security group, and migration task. For more information, see
/// <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html">
/// <code>Tag</code>
/// </a>
/// data type description.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveTagsFromResource {
    _private: (),
}
impl RemoveTagsFromResource {
    /// Creates a new builder-style object to manufacture [`RemoveTagsFromResourceInput`](crate::input::RemoveTagsFromResourceInput)
    pub fn builder() -> crate::input::remove_tags_from_resource_input::Builder {
        crate::input::remove_tags_from_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveTagsFromResource {
    type Output = std::result::Result<
        crate::output::RemoveTagsFromResourceOutput,
        crate::error::RemoveTagsFromResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_tags_from_resource_error(response)
        } else {
            crate::operation_deser::parse_remove_tags_from_resource_response(response)
        }
    }
}

/// <p>Starts the replication task.</p>
/// <p>For more information about AWS DMS tasks, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html">Working with Migration Tasks </a> in the
/// <i>AWS Database Migration Service User Guide.</i>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartReplicationTask {
    _private: (),
}
impl StartReplicationTask {
    /// Creates a new builder-style object to manufacture [`StartReplicationTaskInput`](crate::input::StartReplicationTaskInput)
    pub fn builder() -> crate::input::start_replication_task_input::Builder {
        crate::input::start_replication_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartReplicationTask {
    type Output = std::result::Result<
        crate::output::StartReplicationTaskOutput,
        crate::error::StartReplicationTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_replication_task_error(response)
        } else {
            crate::operation_deser::parse_start_replication_task_response(response)
        }
    }
}

/// <p> Starts the replication task assessment for unsupported data types in the source
/// database. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartReplicationTaskAssessment {
    _private: (),
}
impl StartReplicationTaskAssessment {
    /// Creates a new builder-style object to manufacture [`StartReplicationTaskAssessmentInput`](crate::input::StartReplicationTaskAssessmentInput)
    pub fn builder() -> crate::input::start_replication_task_assessment_input::Builder {
        crate::input::start_replication_task_assessment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartReplicationTaskAssessment {
    type Output = std::result::Result<
        crate::output::StartReplicationTaskAssessmentOutput,
        crate::error::StartReplicationTaskAssessmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_replication_task_assessment_error(response)
        } else {
            crate::operation_deser::parse_start_replication_task_assessment_response(response)
        }
    }
}

/// <p>Starts a new premigration assessment run for one or more individual assessments
/// of a migration task.</p>
/// <p>The assessments that you can specify depend on the source and target database engine and
/// the migration type defined for the given task. To run this operation, your migration task
/// must already be created. After you run this operation, you can review the status of each
/// individual assessment. You can also run the migration task manually after the assessment
/// run and its individual assessments complete.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartReplicationTaskAssessmentRun {
    _private: (),
}
impl StartReplicationTaskAssessmentRun {
    /// Creates a new builder-style object to manufacture [`StartReplicationTaskAssessmentRunInput`](crate::input::StartReplicationTaskAssessmentRunInput)
    pub fn builder() -> crate::input::start_replication_task_assessment_run_input::Builder {
        crate::input::start_replication_task_assessment_run_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartReplicationTaskAssessmentRun {
    type Output = std::result::Result<
        crate::output::StartReplicationTaskAssessmentRunOutput,
        crate::error::StartReplicationTaskAssessmentRunError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_replication_task_assessment_run_error(response)
        } else {
            crate::operation_deser::parse_start_replication_task_assessment_run_response(response)
        }
    }
}

/// <p>Stops the replication task.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopReplicationTask {
    _private: (),
}
impl StopReplicationTask {
    /// Creates a new builder-style object to manufacture [`StopReplicationTaskInput`](crate::input::StopReplicationTaskInput)
    pub fn builder() -> crate::input::stop_replication_task_input::Builder {
        crate::input::stop_replication_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopReplicationTask {
    type Output = std::result::Result<
        crate::output::StopReplicationTaskOutput,
        crate::error::StopReplicationTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_replication_task_error(response)
        } else {
            crate::operation_deser::parse_stop_replication_task_response(response)
        }
    }
}

/// <p>Tests the connection between the replication instance and the endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TestConnection {
    _private: (),
}
impl TestConnection {
    /// Creates a new builder-style object to manufacture [`TestConnectionInput`](crate::input::TestConnectionInput)
    pub fn builder() -> crate::input::test_connection_input::Builder {
        crate::input::test_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TestConnection {
    type Output =
        std::result::Result<crate::output::TestConnectionOutput, crate::error::TestConnectionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_test_connection_error(response)
        } else {
            crate::operation_deser::parse_test_connection_response(response)
        }
    }
}
