// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeFleetAdvisorSchemas`](crate::client::fluent_builders::DescribeFleetAdvisorSchemas) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeFleetAdvisorSchemas::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::DescribeFleetAdvisorSchemas::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::DescribeFleetAdvisorSchemas::set_filters): <p> If you specify any of the following filters, the output includes information for only those schemas that meet the filter criteria:</p>  <ul>   <li> <p> <code>complexity</code> – The schema's complexity, for example <code>Simple</code>.</p> </li>   <li> <p> <code>database-id</code> – The ID of the schema's database.</p> </li>   <li> <p> <code>database-ip-address</code> – The IP address of the schema's database.</p> </li>   <li> <p> <code>database-name</code> – The name of the schema's database.</p> </li>   <li> <p> <code>database-engine</code> – The name of the schema database's engine.</p> </li>   <li> <p> <code>original-schema-name</code> – The name of the schema's database's main schema.</p> </li>   <li> <p> <code>schema-id</code> – The ID of the schema, for example <code>15</code>.</p> </li>   <li> <p> <code>schema-name</code> – The name of the schema.</p> </li>   <li> <p> <code>server-ip-address</code> – The IP address of the schema database's server.</p> </li>  </ul>  <p>An example is: <code>describe-fleet-advisor-schemas --filter Name="schema-id",Values="50"</code> </p>
    ///   - [`max_records(i32)`](crate::client::fluent_builders::DescribeFleetAdvisorSchemas::max_records) / [`set_max_records(Option<i32>)`](crate::client::fluent_builders::DescribeFleetAdvisorSchemas::set_max_records): <p>Sets the maximum number of records returned in the response.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetAdvisorSchemas::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeFleetAdvisorSchemas::set_next_token): <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// - On success, responds with [`DescribeFleetAdvisorSchemasOutput`](crate::output::DescribeFleetAdvisorSchemasOutput) with field(s):
    ///   - [`fleet_advisor_schemas(Option<Vec<SchemaResponse>>)`](crate::output::DescribeFleetAdvisorSchemasOutput::fleet_advisor_schemas): <p>A collection of <code>SchemaResponse</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeFleetAdvisorSchemasOutput::next_token): <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// - On failure, responds with [`SdkError<DescribeFleetAdvisorSchemasError>`](crate::error::DescribeFleetAdvisorSchemasError)
    pub fn describe_fleet_advisor_schemas(
        &self,
    ) -> crate::client::fluent_builders::DescribeFleetAdvisorSchemas {
        crate::client::fluent_builders::DescribeFleetAdvisorSchemas::new(self.handle.clone())
    }
}
