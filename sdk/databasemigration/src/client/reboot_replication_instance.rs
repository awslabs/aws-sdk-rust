// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RebootReplicationInstance`](crate::operation::reboot_replication_instance::builders::RebootReplicationInstanceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`replication_instance_arn(impl Into<String>)`](crate::operation::reboot_replication_instance::builders::RebootReplicationInstanceFluentBuilder::replication_instance_arn) / [`set_replication_instance_arn(Option<String>)`](crate::operation::reboot_replication_instance::builders::RebootReplicationInstanceFluentBuilder::set_replication_instance_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the replication instance.</p><br>
    ///   - [`force_failover(bool)`](crate::operation::reboot_replication_instance::builders::RebootReplicationInstanceFluentBuilder::force_failover) / [`set_force_failover(Option<bool>)`](crate::operation::reboot_replication_instance::builders::RebootReplicationInstanceFluentBuilder::set_force_failover):<br>required: **false**<br><p>If this parameter is <code>true</code>, the reboot is conducted through a Multi-AZ failover. If the instance isn't configured for Multi-AZ, then you can't specify <code>true</code>. ( <code>--force-planned-failover</code> and <code>--force-failover</code> can't both be set to <code>true</code>.)</p><br>
    ///   - [`force_planned_failover(bool)`](crate::operation::reboot_replication_instance::builders::RebootReplicationInstanceFluentBuilder::force_planned_failover) / [`set_force_planned_failover(Option<bool>)`](crate::operation::reboot_replication_instance::builders::RebootReplicationInstanceFluentBuilder::set_force_planned_failover):<br>required: **false**<br><p>If this parameter is <code>true</code>, the reboot is conducted through a planned Multi-AZ failover where resources are released and cleaned up prior to conducting the failover. If the instance isn''t configured for Multi-AZ, then you can't specify <code>true</code>. ( <code>--force-planned-failover</code> and <code>--force-failover</code> can't both be set to <code>true</code>.)</p><br>
    /// - On success, responds with [`RebootReplicationInstanceOutput`](crate::operation::reboot_replication_instance::RebootReplicationInstanceOutput) with field(s):
    ///   - [`replication_instance(Option<ReplicationInstance>)`](crate::operation::reboot_replication_instance::RebootReplicationInstanceOutput::replication_instance): <p>The replication instance that is being rebooted. </p>
    /// - On failure, responds with [`SdkError<RebootReplicationInstanceError>`](crate::operation::reboot_replication_instance::RebootReplicationInstanceError)
    pub fn reboot_replication_instance(&self) -> crate::operation::reboot_replication_instance::builders::RebootReplicationInstanceFluentBuilder {
        crate::operation::reboot_replication_instance::builders::RebootReplicationInstanceFluentBuilder::new(self.handle.clone())
    }
}
