// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ModifyDataProvider`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`data_provider_identifier(impl Into<String>)`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::data_provider_identifier) / [`set_data_provider_identifier(Option<String>)`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::set_data_provider_identifier):<br>required: **true**<br><p>The identifier of the data provider. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen, or contain two consecutive hyphens.</p><br>
    ///   - [`data_provider_name(impl Into<String>)`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::data_provider_name) / [`set_data_provider_name(Option<String>)`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::set_data_provider_name):<br>required: **false**<br><p>The name of the data provider.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::set_description):<br>required: **false**<br><p>A user-friendly description of the data provider.</p><br>
    ///   - [`engine(impl Into<String>)`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::engine) / [`set_engine(Option<String>)`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::set_engine):<br>required: **false**<br><p>The type of database engine for the data provider. Valid values include <code>"aurora"</code>, <code>"aurora_postgresql"</code>, <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, and <code>"sqlserver"</code>. A value of <code>"aurora"</code> represents Amazon Aurora MySQL-Compatible Edition.</p><br>
    ///   - [`exact_settings(bool)`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::exact_settings) / [`set_exact_settings(Option<bool>)`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::set_exact_settings):<br>required: **false**<br><p>If this attribute is Y, the current call to <code>ModifyDataProvider</code> replaces all existing data provider settings with the exact settings that you specify in this call. If this attribute is N, the current call to <code>ModifyDataProvider</code> does two things: </p>  <ul>   <li> <p>It replaces any data provider settings that already exist with new values, for settings with the same names.</p> </li>   <li> <p>It creates new data provider settings that you specify in the call, for settings with different names. </p> </li>  </ul><br>
    ///   - [`settings(DataProviderSettings)`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::settings) / [`set_settings(Option<DataProviderSettings>)`](crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::set_settings):<br>required: **false**<br><p>The settings in JSON format for a data provider.</p><br>
    /// - On success, responds with [`ModifyDataProviderOutput`](crate::operation::modify_data_provider::ModifyDataProviderOutput) with field(s):
    ///   - [`data_provider(Option<DataProvider>)`](crate::operation::modify_data_provider::ModifyDataProviderOutput::data_provider): <p>The data provider that was modified.</p>
    /// - On failure, responds with [`SdkError<ModifyDataProviderError>`](crate::operation::modify_data_provider::ModifyDataProviderError)
    pub fn modify_data_provider(&self) -> crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder {
        crate::operation::modify_data_provider::builders::ModifyDataProviderFluentBuilder::new(self.handle.clone())
    }
}
