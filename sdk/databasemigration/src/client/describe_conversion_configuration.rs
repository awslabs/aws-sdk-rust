// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeConversionConfiguration`](crate::operation::describe_conversion_configuration::builders::DescribeConversionConfigurationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`migration_project_identifier(impl Into<String>)`](crate::operation::describe_conversion_configuration::builders::DescribeConversionConfigurationFluentBuilder::migration_project_identifier) / [`set_migration_project_identifier(Option<String>)`](crate::operation::describe_conversion_configuration::builders::DescribeConversionConfigurationFluentBuilder::set_migration_project_identifier):<br>required: **true**<br><p>The name or Amazon Resource Name (ARN) for the schema conversion project to describe.</p><br>
    /// - On success, responds with [`DescribeConversionConfigurationOutput`](crate::operation::describe_conversion_configuration::DescribeConversionConfigurationOutput) with field(s):
    ///   - [`migration_project_identifier(Option<String>)`](crate::operation::describe_conversion_configuration::DescribeConversionConfigurationOutput::migration_project_identifier): <p>The name or Amazon Resource Name (ARN) for the schema conversion project.</p>
    ///   - [`conversion_configuration(Option<String>)`](crate::operation::describe_conversion_configuration::DescribeConversionConfigurationOutput::conversion_configuration): <p>The configuration parameters for the schema conversion project.</p>
    /// - On failure, responds with [`SdkError<DescribeConversionConfigurationError>`](crate::operation::describe_conversion_configuration::DescribeConversionConfigurationError)
    pub fn describe_conversion_configuration(
        &self,
    ) -> crate::operation::describe_conversion_configuration::builders::DescribeConversionConfigurationFluentBuilder {
        crate::operation::describe_conversion_configuration::builders::DescribeConversionConfigurationFluentBuilder::new(self.handle.clone())
    }
}
