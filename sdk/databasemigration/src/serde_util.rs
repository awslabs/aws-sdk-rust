// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn dynamo_db_settings_correct_errors(
    mut builder: crate::types::builders::DynamoDbSettingsBuilder,
) -> crate::types::builders::DynamoDbSettingsBuilder {
    if builder.service_access_role_arn.is_none() {
        builder.service_access_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn elasticsearch_settings_correct_errors(
    mut builder: crate::types::builders::ElasticsearchSettingsBuilder,
) -> crate::types::builders::ElasticsearchSettingsBuilder {
    if builder.service_access_role_arn.is_none() {
        builder.service_access_role_arn = Some(Default::default())
    }
    if builder.endpoint_uri.is_none() {
        builder.endpoint_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn neptune_settings_correct_errors(
    mut builder: crate::types::builders::NeptuneSettingsBuilder,
) -> crate::types::builders::NeptuneSettingsBuilder {
    if builder.s3_bucket_name.is_none() {
        builder.s3_bucket_name = Some(Default::default())
    }
    if builder.s3_bucket_folder.is_none() {
        builder.s3_bucket_folder = Some(Default::default())
    }
    builder
}

pub(crate) fn redis_settings_correct_errors(
    mut builder: crate::types::builders::RedisSettingsBuilder,
) -> crate::types::builders::RedisSettingsBuilder {
    if builder.server_name.is_none() {
        builder.server_name = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    builder
}

pub(crate) fn timestream_settings_correct_errors(
    mut builder: crate::types::builders::TimestreamSettingsBuilder,
) -> crate::types::builders::TimestreamSettingsBuilder {
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    if builder.memory_duration.is_none() {
        builder.memory_duration = Some(Default::default())
    }
    if builder.magnetic_duration.is_none() {
        builder.magnetic_duration = Some(Default::default())
    }
    builder
}

pub(crate) fn recommendation_settings_correct_errors(
    mut builder: crate::types::builders::RecommendationSettingsBuilder,
) -> crate::types::builders::RecommendationSettingsBuilder {
    if builder.instance_sizing_type.is_none() {
        builder.instance_sizing_type = Some(Default::default())
    }
    if builder.workload_type.is_none() {
        builder.workload_type = Some(Default::default())
    }
    builder
}
