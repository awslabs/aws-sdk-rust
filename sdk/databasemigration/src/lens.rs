// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_applicable_individual_assessments_output_marker(
    input: &crate::operation::describe_applicable_individual_assessments::DescribeApplicableIndividualAssessmentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_certificates_output_marker(
    input: &crate::operation::describe_certificates::DescribeCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_connections_output_marker(
    input: &crate::operation::describe_connections::DescribeConnectionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_endpoint_settings_output_marker(
    input: &crate::operation::describe_endpoint_settings::DescribeEndpointSettingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_endpoint_types_output_marker(
    input: &crate::operation::describe_endpoint_types::DescribeEndpointTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_endpoints_output_marker(
    input: &crate::operation::describe_endpoints::DescribeEndpointsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_event_subscriptions_output_marker(
    input: &crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_events_output_marker(
    input: &crate::operation::describe_events::DescribeEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_fleet_advisor_collectors_output_next_token(
    input: &crate::operation::describe_fleet_advisor_collectors::DescribeFleetAdvisorCollectorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_fleet_advisor_databases_output_next_token(
    input: &crate::operation::describe_fleet_advisor_databases::DescribeFleetAdvisorDatabasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_fleet_advisor_lsa_analysis_output_next_token(
    input: &crate::operation::describe_fleet_advisor_lsa_analysis::DescribeFleetAdvisorLsaAnalysisOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_fleet_advisor_schema_object_summary_output_next_token(
    input: &crate::operation::describe_fleet_advisor_schema_object_summary::DescribeFleetAdvisorSchemaObjectSummaryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_fleet_advisor_schemas_output_next_token(
    input: &crate::operation::describe_fleet_advisor_schemas::DescribeFleetAdvisorSchemasOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_orderable_replication_instances_output_marker(
    input: &crate::operation::describe_orderable_replication_instances::DescribeOrderableReplicationInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_pending_maintenance_actions_output_marker(
    input: &crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_replication_instance_task_logs_output_marker(
    input: &crate::operation::describe_replication_instance_task_logs::DescribeReplicationInstanceTaskLogsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_replication_instances_output_marker(
    input: &crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_replication_subnet_groups_output_marker(
    input: &crate::operation::describe_replication_subnet_groups::DescribeReplicationSubnetGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_replication_task_assessment_results_output_marker(
    input: &crate::operation::describe_replication_task_assessment_results::DescribeReplicationTaskAssessmentResultsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_replication_task_assessment_runs_output_marker(
    input: &crate::operation::describe_replication_task_assessment_runs::DescribeReplicationTaskAssessmentRunsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_replication_task_individual_assessments_output_marker(
    input: &crate::operation::describe_replication_task_individual_assessments::DescribeReplicationTaskIndividualAssessmentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_replication_tasks_output_marker(
    input: &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_schemas_output_marker(
    input: &crate::operation::describe_schemas::DescribeSchemasOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_table_statistics_output_marker(
    input: &crate::operation::describe_table_statistics::DescribeTableStatisticsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
