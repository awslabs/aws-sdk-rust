// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_monitor_output_output_correct_errors(
    mut builder: crate::operation::create_monitor::builders::CreateMonitorOutputBuilder,
) -> crate::operation::create_monitor::builders::CreateMonitorOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MonitorConfigState>().ok()
    }
    builder
}

pub(crate) fn get_health_event_output_output_correct_errors(
    mut builder: crate::operation::get_health_event::builders::GetHealthEventOutputBuilder,
) -> crate::operation::get_health_event::builders::GetHealthEventOutputBuilder {
    if builder.event_arn.is_none() {
        builder.event_arn = Some(Default::default())
    }
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.impacted_locations.is_none() {
        builder.impacted_locations = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::HealthEventStatus>().ok()
    }
    if builder.impact_type.is_none() {
        builder.impact_type = "no value was set".parse::<crate::types::HealthEventImpactType>().ok()
    }
    builder
}

pub(crate) fn get_internet_event_output_output_correct_errors(
    mut builder: crate::operation::get_internet_event::builders::GetInternetEventOutputBuilder,
) -> crate::operation::get_internet_event::builders::GetInternetEventOutputBuilder {
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    if builder.event_arn.is_none() {
        builder.event_arn = Some(Default::default())
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.client_location.is_none() {
        builder.client_location = {
            let builder = crate::types::builders::ClientLocationBuilder::default();
            crate::serde_util::client_location_correct_errors(builder).build().ok()
        }
    }
    if builder.event_type.is_none() {
        builder.event_type = "no value was set".parse::<crate::types::InternetEventType>().ok()
    }
    if builder.event_status.is_none() {
        builder.event_status = "no value was set".parse::<crate::types::InternetEventStatus>().ok()
    }
    builder
}

pub(crate) fn get_monitor_output_output_correct_errors(
    mut builder: crate::operation::get_monitor::builders::GetMonitorOutputBuilder,
) -> crate::operation::get_monitor::builders::GetMonitorOutputBuilder {
    if builder.monitor_name.is_none() {
        builder.monitor_name = Some(Default::default())
    }
    if builder.monitor_arn.is_none() {
        builder.monitor_arn = Some(Default::default())
    }
    if builder.resources.is_none() {
        builder.resources = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MonitorConfigState>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_query_results_output_output_correct_errors(
    mut builder: crate::operation::get_query_results::builders::GetQueryResultsOutputBuilder,
) -> crate::operation::get_query_results::builders::GetQueryResultsOutputBuilder {
    if builder.fields.is_none() {
        builder.fields = Some(Default::default())
    }
    if builder.data.is_none() {
        builder.data = Some(Default::default())
    }
    builder
}

pub(crate) fn get_query_status_output_output_correct_errors(
    mut builder: crate::operation::get_query_status::builders::GetQueryStatusOutputBuilder,
) -> crate::operation::get_query_status::builders::GetQueryStatusOutputBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QueryStatus>().ok()
    }
    builder
}

pub(crate) fn list_health_events_output_output_correct_errors(
    mut builder: crate::operation::list_health_events::builders::ListHealthEventsOutputBuilder,
) -> crate::operation::list_health_events::builders::ListHealthEventsOutputBuilder {
    if builder.health_events.is_none() {
        builder.health_events = Some(Default::default())
    }
    builder
}

pub(crate) fn list_internet_events_output_output_correct_errors(
    mut builder: crate::operation::list_internet_events::builders::ListInternetEventsOutputBuilder,
) -> crate::operation::list_internet_events::builders::ListInternetEventsOutputBuilder {
    if builder.internet_events.is_none() {
        builder.internet_events = Some(Default::default())
    }
    builder
}

pub(crate) fn list_monitors_output_output_correct_errors(
    mut builder: crate::operation::list_monitors::builders::ListMonitorsOutputBuilder,
) -> crate::operation::list_monitors::builders::ListMonitorsOutputBuilder {
    if builder.monitors.is_none() {
        builder.monitors = Some(Default::default())
    }
    builder
}

pub(crate) fn start_query_output_output_correct_errors(
    mut builder: crate::operation::start_query::builders::StartQueryOutputBuilder,
) -> crate::operation::start_query::builders::StartQueryOutputBuilder {
    if builder.query_id.is_none() {
        builder.query_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_monitor_output_output_correct_errors(
    mut builder: crate::operation::update_monitor::builders::UpdateMonitorOutputBuilder,
) -> crate::operation::update_monitor::builders::UpdateMonitorOutputBuilder {
    if builder.monitor_arn.is_none() {
        builder.monitor_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MonitorConfigState>().ok()
    }
    builder
}

pub(crate) fn client_location_correct_errors(
    mut builder: crate::types::builders::ClientLocationBuilder,
) -> crate::types::builders::ClientLocationBuilder {
    if builder.as_name.is_none() {
        builder.as_name = Some(Default::default())
    }
    if builder.as_number.is_none() {
        builder.as_number = Some(Default::default())
    }
    if builder.country.is_none() {
        builder.country = Some(Default::default())
    }
    if builder.city.is_none() {
        builder.city = Some(Default::default())
    }
    if builder.latitude.is_none() {
        builder.latitude = Some(Default::default())
    }
    if builder.longitude.is_none() {
        builder.longitude = Some(Default::default())
    }
    builder
}

pub(crate) fn health_event_correct_errors(mut builder: crate::types::builders::HealthEventBuilder) -> crate::types::builders::HealthEventBuilder {
    if builder.event_arn.is_none() {
        builder.event_arn = Some(Default::default())
    }
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.impacted_locations.is_none() {
        builder.impacted_locations = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::HealthEventStatus>().ok()
    }
    if builder.impact_type.is_none() {
        builder.impact_type = "no value was set".parse::<crate::types::HealthEventImpactType>().ok()
    }
    builder
}

pub(crate) fn impacted_location_correct_errors(
    mut builder: crate::types::builders::ImpactedLocationBuilder,
) -> crate::types::builders::ImpactedLocationBuilder {
    if builder.as_name.is_none() {
        builder.as_name = Some(Default::default())
    }
    if builder.as_number.is_none() {
        builder.as_number = Some(Default::default())
    }
    if builder.country.is_none() {
        builder.country = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::HealthEventStatus>().ok()
    }
    builder
}

pub(crate) fn internet_event_summary_correct_errors(
    mut builder: crate::types::builders::InternetEventSummaryBuilder,
) -> crate::types::builders::InternetEventSummaryBuilder {
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    if builder.event_arn.is_none() {
        builder.event_arn = Some(Default::default())
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.client_location.is_none() {
        builder.client_location = {
            let builder = crate::types::builders::ClientLocationBuilder::default();
            crate::serde_util::client_location_correct_errors(builder).build().ok()
        }
    }
    if builder.event_type.is_none() {
        builder.event_type = "no value was set".parse::<crate::types::InternetEventType>().ok()
    }
    if builder.event_status.is_none() {
        builder.event_status = "no value was set".parse::<crate::types::InternetEventStatus>().ok()
    }
    builder
}

pub(crate) fn monitor_correct_errors(mut builder: crate::types::builders::MonitorBuilder) -> crate::types::builders::MonitorBuilder {
    if builder.monitor_name.is_none() {
        builder.monitor_name = Some(Default::default())
    }
    if builder.monitor_arn.is_none() {
        builder.monitor_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MonitorConfigState>().ok()
    }
    builder
}

pub(crate) fn network_impairment_correct_errors(
    mut builder: crate::types::builders::NetworkImpairmentBuilder,
) -> crate::types::builders::NetworkImpairmentBuilder {
    if builder.networks.is_none() {
        builder.networks = Some(Default::default())
    }
    if builder.as_path.is_none() {
        builder.as_path = Some(Default::default())
    }
    if builder.network_event_type.is_none() {
        builder.network_event_type = "no value was set".parse::<crate::types::TriangulationEventType>().ok()
    }
    builder
}

pub(crate) fn network_correct_errors(mut builder: crate::types::builders::NetworkBuilder) -> crate::types::builders::NetworkBuilder {
    if builder.as_name.is_none() {
        builder.as_name = Some(Default::default())
    }
    if builder.as_number.is_none() {
        builder.as_number = Some(Default::default())
    }
    builder
}
