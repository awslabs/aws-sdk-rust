// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListHealthEvents`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_name(impl Into<String>)`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::monitor_name) / [`set_monitor_name(Option<String>)`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::set_monitor_name):<br>required: **true**<br><p>The name of the monitor.</p><br>
    ///   - [`start_time(DateTime)`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::start_time) / [`set_start_time(Option<DateTime>)`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::set_start_time):<br>required: **false**<br><p>The time when a health event started.</p><br>
    ///   - [`end_time(DateTime)`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::end_time) / [`set_end_time(Option<DateTime>)`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::set_end_time):<br>required: **false**<br><p>The time when a health event ended. If the health event is still ongoing, then the end time is not set.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::set_next_token):<br>required: **false**<br><p>The token for the next set of results. You receive this token from a previous call.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::set_max_results):<br>required: **false**<br><p>The number of health event objects that you want to return with this call. </p><br>
    ///   - [`event_status(HealthEventStatus)`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::event_status) / [`set_event_status(Option<HealthEventStatus>)`](crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::set_event_status):<br>required: **false**<br><p>The status of a health event.</p><br>
    /// - On success, responds with [`ListHealthEventsOutput`](crate::operation::list_health_events::ListHealthEventsOutput) with field(s):
    ///   - [`health_events(Vec::<HealthEvent>)`](crate::operation::list_health_events::ListHealthEventsOutput::health_events): <p>A list of health events.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_health_events::ListHealthEventsOutput::next_token): <p>The token for the next set of results. You receive this token from a previous call.</p>
    /// - On failure, responds with [`SdkError<ListHealthEventsError>`](crate::operation::list_health_events::ListHealthEventsError)
    pub fn list_health_events(&self) -> crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder {
        crate::operation::list_health_events::builders::ListHealthEventsFluentBuilder::new(self.handle.clone())
    }
}
