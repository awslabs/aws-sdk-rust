// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of information about an internet event in Amazon CloudWatch Internet Monitor. Internet events are issues that cause performance degradation or availability problems for impacted Amazon Web Services client locations. Internet Monitor displays information about recent global health events, called internet events, on a global outages map that is available to all Amazon Web Services customers.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InternetEventSummary {
    /// <p>The internally-generated identifier of an internet event.</p>
    pub event_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the internet event.</p>
    pub event_arn: ::std::string::String,
    /// <p>The time when an internet event started.</p>
    pub started_at: ::aws_smithy_types::DateTime,
    /// <p>The time when an internet event ended. If the event hasn't ended yet, this value is empty.</p>
    pub ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The impacted location, such as a city, that Amazon Web Services clients access application resources from.</p>
    pub client_location: ::std::option::Option<crate::types::ClientLocation>,
    /// <p>The type of network impairment.</p>
    pub event_type: crate::types::InternetEventType,
    /// <p>The status of an internet event.</p>
    pub event_status: crate::types::InternetEventStatus,
}
impl InternetEventSummary {
    /// <p>The internally-generated identifier of an internet event.</p>
    pub fn event_id(&self) -> &str {
        use std::ops::Deref;
        self.event_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the internet event.</p>
    pub fn event_arn(&self) -> &str {
        use std::ops::Deref;
        self.event_arn.deref()
    }
    /// <p>The time when an internet event started.</p>
    pub fn started_at(&self) -> &::aws_smithy_types::DateTime {
        &self.started_at
    }
    /// <p>The time when an internet event ended. If the event hasn't ended yet, this value is empty.</p>
    pub fn ended_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.ended_at.as_ref()
    }
    /// <p>The impacted location, such as a city, that Amazon Web Services clients access application resources from.</p>
    pub fn client_location(&self) -> ::std::option::Option<&crate::types::ClientLocation> {
        self.client_location.as_ref()
    }
    /// <p>The type of network impairment.</p>
    pub fn event_type(&self) -> &crate::types::InternetEventType {
        &self.event_type
    }
    /// <p>The status of an internet event.</p>
    pub fn event_status(&self) -> &crate::types::InternetEventStatus {
        &self.event_status
    }
}
impl InternetEventSummary {
    /// Creates a new builder-style object to manufacture [`InternetEventSummary`](crate::types::InternetEventSummary).
    pub fn builder() -> crate::types::builders::InternetEventSummaryBuilder {
        crate::types::builders::InternetEventSummaryBuilder::default()
    }
}

/// A builder for [`InternetEventSummary`](crate::types::InternetEventSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InternetEventSummaryBuilder {
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_arn: ::std::option::Option<::std::string::String>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) client_location: ::std::option::Option<crate::types::ClientLocation>,
    pub(crate) event_type: ::std::option::Option<crate::types::InternetEventType>,
    pub(crate) event_status: ::std::option::Option<crate::types::InternetEventStatus>,
}
impl InternetEventSummaryBuilder {
    /// <p>The internally-generated identifier of an internet event.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The internally-generated identifier of an internet event.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The internally-generated identifier of an internet event.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>The Amazon Resource Name (ARN) of the internet event.</p>
    /// This field is required.
    pub fn event_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the internet event.</p>
    pub fn set_event_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the internet event.</p>
    pub fn get_event_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_arn
    }
    /// <p>The time when an internet event started.</p>
    /// This field is required.
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when an internet event started.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The time when an internet event started.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The time when an internet event ended. If the event hasn't ended yet, this value is empty.</p>
    pub fn ended_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.ended_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when an internet event ended. If the event hasn't ended yet, this value is empty.</p>
    pub fn set_ended_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.ended_at = input;
        self
    }
    /// <p>The time when an internet event ended. If the event hasn't ended yet, this value is empty.</p>
    pub fn get_ended_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.ended_at
    }
    /// <p>The impacted location, such as a city, that Amazon Web Services clients access application resources from.</p>
    /// This field is required.
    pub fn client_location(mut self, input: crate::types::ClientLocation) -> Self {
        self.client_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The impacted location, such as a city, that Amazon Web Services clients access application resources from.</p>
    pub fn set_client_location(mut self, input: ::std::option::Option<crate::types::ClientLocation>) -> Self {
        self.client_location = input;
        self
    }
    /// <p>The impacted location, such as a city, that Amazon Web Services clients access application resources from.</p>
    pub fn get_client_location(&self) -> &::std::option::Option<crate::types::ClientLocation> {
        &self.client_location
    }
    /// <p>The type of network impairment.</p>
    /// This field is required.
    pub fn event_type(mut self, input: crate::types::InternetEventType) -> Self {
        self.event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of network impairment.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::InternetEventType>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The type of network impairment.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::InternetEventType> {
        &self.event_type
    }
    /// <p>The status of an internet event.</p>
    /// This field is required.
    pub fn event_status(mut self, input: crate::types::InternetEventStatus) -> Self {
        self.event_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of an internet event.</p>
    pub fn set_event_status(mut self, input: ::std::option::Option<crate::types::InternetEventStatus>) -> Self {
        self.event_status = input;
        self
    }
    /// <p>The status of an internet event.</p>
    pub fn get_event_status(&self) -> &::std::option::Option<crate::types::InternetEventStatus> {
        &self.event_status
    }
    /// Consumes the builder and constructs a [`InternetEventSummary`](crate::types::InternetEventSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`event_id`](crate::types::builders::InternetEventSummaryBuilder::event_id)
    /// - [`event_arn`](crate::types::builders::InternetEventSummaryBuilder::event_arn)
    /// - [`started_at`](crate::types::builders::InternetEventSummaryBuilder::started_at)
    /// - [`event_type`](crate::types::builders::InternetEventSummaryBuilder::event_type)
    /// - [`event_status`](crate::types::builders::InternetEventSummaryBuilder::event_status)
    pub fn build(self) -> ::std::result::Result<crate::types::InternetEventSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InternetEventSummary {
            event_id: self.event_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_id",
                    "event_id was not specified but it is required when building InternetEventSummary",
                )
            })?,
            event_arn: self.event_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_arn",
                    "event_arn was not specified but it is required when building InternetEventSummary",
                )
            })?,
            started_at: self.started_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "started_at",
                    "started_at was not specified but it is required when building InternetEventSummary",
                )
            })?,
            ended_at: self.ended_at,
            client_location: self.client_location,
            event_type: self.event_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_type",
                    "event_type was not specified but it is required when building InternetEventSummary",
                )
            })?,
            event_status: self.event_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_status",
                    "event_status was not specified but it is required when building InternetEventSummary",
                )
            })?,
        })
    }
}
