// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMonitorOutput {
    /// <p>The name of the monitor.</p>
    pub monitor_name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub monitor_arn: ::std::string::String,
    /// <p>The resources monitored by the monitor. Resources are listed by their Amazon Resource Names (ARNs).</p>
    pub resources: ::std::vec::Vec<::std::string::String>,
    /// <p>The status of the monitor.</p>
    pub status: crate::types::MonitorConfigState,
    /// <p>The time when the monitor was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The last time that the monitor was modified.</p>
    pub modified_at: ::aws_smithy_types::DateTime,
    /// <p>The health of the data processing for the monitor.</p>
    pub processing_status: ::std::option::Option<crate::types::MonitorProcessingStatusCode>,
    /// <p>Additional information about the health of the data processing for the monitor.</p>
    pub processing_status_info: ::std::option::Option<::std::string::String>,
    /// <p>The tags that have been added to monitor.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the ASN or network provider, such as an internet service provider (ISP), that clients access the resources through. This limit can help control billing costs.</p>
    /// <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html">Choosing a city-network maximum value </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub max_city_networks_to_monitor: i32,
    /// <p>Publish internet measurements for Internet Monitor to another location, such as an Amazon S3 bucket. The measurements are also published to Amazon CloudWatch Logs.</p>
    pub internet_measurements_log_delivery: ::std::option::Option<crate::types::InternetMeasurementsLogDelivery>,
    /// <p>The percentage of the internet-facing traffic for your application to monitor with this monitor. If you set a city-networks maximum, that limit overrides the traffic percentage that you set.</p>
    /// <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMTrafficPercentage.html">Choosing an application traffic percentage to monitor </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub traffic_percentage_to_monitor: i32,
    /// <p>The list of health event threshold configurations. The threshold percentage for a health score determines, along with other configuration information, when Internet Monitor creates a health event when there's an internet issue that affects your application end users.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview"> Change health event thresholds</a> in the Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub health_events_config: ::std::option::Option<crate::types::HealthEventsConfig>,
    _request_id: Option<String>,
}
impl GetMonitorOutput {
    /// <p>The name of the monitor.</p>
    pub fn monitor_name(&self) -> &str {
        use std::ops::Deref;
        self.monitor_name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub fn monitor_arn(&self) -> &str {
        use std::ops::Deref;
        self.monitor_arn.deref()
    }
    /// <p>The resources monitored by the monitor. Resources are listed by their Amazon Resource Names (ARNs).</p>
    pub fn resources(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.resources.deref()
    }
    /// <p>The status of the monitor.</p>
    pub fn status(&self) -> &crate::types::MonitorConfigState {
        &self.status
    }
    /// <p>The time when the monitor was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The last time that the monitor was modified.</p>
    pub fn modified_at(&self) -> &::aws_smithy_types::DateTime {
        &self.modified_at
    }
    /// <p>The health of the data processing for the monitor.</p>
    pub fn processing_status(&self) -> ::std::option::Option<&crate::types::MonitorProcessingStatusCode> {
        self.processing_status.as_ref()
    }
    /// <p>Additional information about the health of the data processing for the monitor.</p>
    pub fn processing_status_info(&self) -> ::std::option::Option<&str> {
        self.processing_status_info.as_deref()
    }
    /// <p>The tags that have been added to monitor.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the ASN or network provider, such as an internet service provider (ISP), that clients access the resources through. This limit can help control billing costs.</p>
    /// <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html">Choosing a city-network maximum value </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub fn max_city_networks_to_monitor(&self) -> i32 {
        self.max_city_networks_to_monitor
    }
    /// <p>Publish internet measurements for Internet Monitor to another location, such as an Amazon S3 bucket. The measurements are also published to Amazon CloudWatch Logs.</p>
    pub fn internet_measurements_log_delivery(&self) -> ::std::option::Option<&crate::types::InternetMeasurementsLogDelivery> {
        self.internet_measurements_log_delivery.as_ref()
    }
    /// <p>The percentage of the internet-facing traffic for your application to monitor with this monitor. If you set a city-networks maximum, that limit overrides the traffic percentage that you set.</p>
    /// <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMTrafficPercentage.html">Choosing an application traffic percentage to monitor </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub fn traffic_percentage_to_monitor(&self) -> i32 {
        self.traffic_percentage_to_monitor
    }
    /// <p>The list of health event threshold configurations. The threshold percentage for a health score determines, along with other configuration information, when Internet Monitor creates a health event when there's an internet issue that affects your application end users.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview"> Change health event thresholds</a> in the Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub fn health_events_config(&self) -> ::std::option::Option<&crate::types::HealthEventsConfig> {
        self.health_events_config.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetMonitorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMonitorOutput {
    /// Creates a new builder-style object to manufacture [`GetMonitorOutput`](crate::operation::get_monitor::GetMonitorOutput).
    pub fn builder() -> crate::operation::get_monitor::builders::GetMonitorOutputBuilder {
        crate::operation::get_monitor::builders::GetMonitorOutputBuilder::default()
    }
}

/// A builder for [`GetMonitorOutput`](crate::operation::get_monitor::GetMonitorOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetMonitorOutputBuilder {
    pub(crate) monitor_name: ::std::option::Option<::std::string::String>,
    pub(crate) monitor_arn: ::std::option::Option<::std::string::String>,
    pub(crate) resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) status: ::std::option::Option<crate::types::MonitorConfigState>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) processing_status: ::std::option::Option<crate::types::MonitorProcessingStatusCode>,
    pub(crate) processing_status_info: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) max_city_networks_to_monitor: ::std::option::Option<i32>,
    pub(crate) internet_measurements_log_delivery: ::std::option::Option<crate::types::InternetMeasurementsLogDelivery>,
    pub(crate) traffic_percentage_to_monitor: ::std::option::Option<i32>,
    pub(crate) health_events_config: ::std::option::Option<crate::types::HealthEventsConfig>,
    _request_id: Option<String>,
}
impl GetMonitorOutputBuilder {
    /// <p>The name of the monitor.</p>
    /// This field is required.
    pub fn monitor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn set_monitor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_name = input;
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn get_monitor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_name
    }
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    /// This field is required.
    pub fn monitor_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub fn set_monitor_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub fn get_monitor_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_arn
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>The resources monitored by the monitor. Resources are listed by their Amazon Resource Names (ARNs).</p>
    pub fn resources(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input.into());
        self.resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resources monitored by the monitor. Resources are listed by their Amazon Resource Names (ARNs).</p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resources = input;
        self
    }
    /// <p>The resources monitored by the monitor. Resources are listed by their Amazon Resource Names (ARNs).</p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resources
    }
    /// <p>The status of the monitor.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::MonitorConfigState) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the monitor.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MonitorConfigState>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the monitor.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MonitorConfigState> {
        &self.status
    }
    /// <p>The time when the monitor was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the monitor was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time when the monitor was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The last time that the monitor was modified.</p>
    /// This field is required.
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the monitor was modified.</p>
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>The last time that the monitor was modified.</p>
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// <p>The health of the data processing for the monitor.</p>
    pub fn processing_status(mut self, input: crate::types::MonitorProcessingStatusCode) -> Self {
        self.processing_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The health of the data processing for the monitor.</p>
    pub fn set_processing_status(mut self, input: ::std::option::Option<crate::types::MonitorProcessingStatusCode>) -> Self {
        self.processing_status = input;
        self
    }
    /// <p>The health of the data processing for the monitor.</p>
    pub fn get_processing_status(&self) -> &::std::option::Option<crate::types::MonitorProcessingStatusCode> {
        &self.processing_status
    }
    /// <p>Additional information about the health of the data processing for the monitor.</p>
    pub fn processing_status_info(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.processing_status_info = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the health of the data processing for the monitor.</p>
    pub fn set_processing_status_info(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.processing_status_info = input;
        self
    }
    /// <p>Additional information about the health of the data processing for the monitor.</p>
    pub fn get_processing_status_info(&self) -> &::std::option::Option<::std::string::String> {
        &self.processing_status_info
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that have been added to monitor.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags that have been added to monitor.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags that have been added to monitor.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the ASN or network provider, such as an internet service provider (ISP), that clients access the resources through. This limit can help control billing costs.</p>
    /// <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html">Choosing a city-network maximum value </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub fn max_city_networks_to_monitor(mut self, input: i32) -> Self {
        self.max_city_networks_to_monitor = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the ASN or network provider, such as an internet service provider (ISP), that clients access the resources through. This limit can help control billing costs.</p>
    /// <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html">Choosing a city-network maximum value </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub fn set_max_city_networks_to_monitor(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_city_networks_to_monitor = input;
        self
    }
    /// <p>The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the ASN or network provider, such as an internet service provider (ISP), that clients access the resources through. This limit can help control billing costs.</p>
    /// <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html">Choosing a city-network maximum value </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub fn get_max_city_networks_to_monitor(&self) -> &::std::option::Option<i32> {
        &self.max_city_networks_to_monitor
    }
    /// <p>Publish internet measurements for Internet Monitor to another location, such as an Amazon S3 bucket. The measurements are also published to Amazon CloudWatch Logs.</p>
    pub fn internet_measurements_log_delivery(mut self, input: crate::types::InternetMeasurementsLogDelivery) -> Self {
        self.internet_measurements_log_delivery = ::std::option::Option::Some(input);
        self
    }
    /// <p>Publish internet measurements for Internet Monitor to another location, such as an Amazon S3 bucket. The measurements are also published to Amazon CloudWatch Logs.</p>
    pub fn set_internet_measurements_log_delivery(mut self, input: ::std::option::Option<crate::types::InternetMeasurementsLogDelivery>) -> Self {
        self.internet_measurements_log_delivery = input;
        self
    }
    /// <p>Publish internet measurements for Internet Monitor to another location, such as an Amazon S3 bucket. The measurements are also published to Amazon CloudWatch Logs.</p>
    pub fn get_internet_measurements_log_delivery(&self) -> &::std::option::Option<crate::types::InternetMeasurementsLogDelivery> {
        &self.internet_measurements_log_delivery
    }
    /// <p>The percentage of the internet-facing traffic for your application to monitor with this monitor. If you set a city-networks maximum, that limit overrides the traffic percentage that you set.</p>
    /// <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMTrafficPercentage.html">Choosing an application traffic percentage to monitor </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub fn traffic_percentage_to_monitor(mut self, input: i32) -> Self {
        self.traffic_percentage_to_monitor = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of the internet-facing traffic for your application to monitor with this monitor. If you set a city-networks maximum, that limit overrides the traffic percentage that you set.</p>
    /// <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMTrafficPercentage.html">Choosing an application traffic percentage to monitor </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub fn set_traffic_percentage_to_monitor(mut self, input: ::std::option::Option<i32>) -> Self {
        self.traffic_percentage_to_monitor = input;
        self
    }
    /// <p>The percentage of the internet-facing traffic for your application to monitor with this monitor. If you set a city-networks maximum, that limit overrides the traffic percentage that you set.</p>
    /// <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMTrafficPercentage.html">Choosing an application traffic percentage to monitor </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub fn get_traffic_percentage_to_monitor(&self) -> &::std::option::Option<i32> {
        &self.traffic_percentage_to_monitor
    }
    /// <p>The list of health event threshold configurations. The threshold percentage for a health score determines, along with other configuration information, when Internet Monitor creates a health event when there's an internet issue that affects your application end users.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview"> Change health event thresholds</a> in the Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub fn health_events_config(mut self, input: crate::types::HealthEventsConfig) -> Self {
        self.health_events_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The list of health event threshold configurations. The threshold percentage for a health score determines, along with other configuration information, when Internet Monitor creates a health event when there's an internet issue that affects your application end users.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview"> Change health event thresholds</a> in the Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub fn set_health_events_config(mut self, input: ::std::option::Option<crate::types::HealthEventsConfig>) -> Self {
        self.health_events_config = input;
        self
    }
    /// <p>The list of health event threshold configurations. The threshold percentage for a health score determines, along with other configuration information, when Internet Monitor creates a health event when there's an internet issue that affects your application end users.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview"> Change health event thresholds</a> in the Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    pub fn get_health_events_config(&self) -> &::std::option::Option<crate::types::HealthEventsConfig> {
        &self.health_events_config
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMonitorOutput`](crate::operation::get_monitor::GetMonitorOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`monitor_name`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::monitor_name)
    /// - [`monitor_arn`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::monitor_arn)
    /// - [`resources`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::resources)
    /// - [`status`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::status)
    /// - [`created_at`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::created_at)
    /// - [`modified_at`](crate::operation::get_monitor::builders::GetMonitorOutputBuilder::modified_at)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_monitor::GetMonitorOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_monitor::GetMonitorOutput {
            monitor_name: self.monitor_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "monitor_name",
                    "monitor_name was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            monitor_arn: self.monitor_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "monitor_arn",
                    "monitor_arn was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            resources: self.resources.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resources",
                    "resources was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            modified_at: self.modified_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "modified_at",
                    "modified_at was not specified but it is required when building GetMonitorOutput",
                )
            })?,
            processing_status: self.processing_status,
            processing_status_info: self.processing_status_info,
            tags: self.tags,
            max_city_networks_to_monitor: self.max_city_networks_to_monitor.unwrap_or_default(),
            internet_measurements_log_delivery: self.internet_measurements_log_delivery,
            traffic_percentage_to_monitor: self.traffic_percentage_to_monitor.unwrap_or_default(),
            health_events_config: self.health_events_config,
            _request_id: self._request_id,
        })
    }
}
