// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_backup_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BackupRuleInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.rule_name {
        object.key("RuleName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.target_backup_vault_name {
        object.key("TargetBackupVaultName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_3.as_str());
    }
    if let Some(var_4) = &input.start_window_minutes {
        object.key("StartWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.completion_window_minutes {
        object.key("CompletionWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.lifecycle {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Lifecycle").start_object();
        crate::protocol_serde::shape_lifecycle::ser_lifecycle(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.recovery_point_tags {
        #[allow(unused_mut)]
        let mut object_9 = object.key("RecoveryPointTags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.copy_actions {
        let mut array_13 = object.key("CopyActions").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_copy_action::ser_copy_action(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.enable_continuous_backup {
        object.key("EnableContinuousBackup").boolean(*var_16);
    }
    Ok(())
}
