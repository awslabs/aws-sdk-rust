// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_backup_selection(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BackupSelection,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("SelectionName").string(input.selection_name.as_str());
    }
    {
        object.key("IamRoleArn").string(input.iam_role_arn.as_str());
    }
    if let Some(var_1) = &input.resources {
        let mut array_2 = object.key("Resources").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.list_of_tags {
        let mut array_5 = object.key("ListOfTags").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_condition::ser_condition(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.not_resources {
        let mut array_9 = object.key("NotResources").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.conditions {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Conditions").start_object();
        crate::protocol_serde::shape_conditions::ser_conditions(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}

pub(crate) fn de_backup_selection<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::BackupSelection>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::BackupSelectionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "SelectionName" => {
                            builder = builder.set_selection_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "IamRoleArn" => {
                            builder = builder.set_iam_role_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Resources" => {
                            builder = builder.set_resources(crate::protocol_serde::shape_resource_arns::de_resource_arns(tokens)?);
                        }
                        "ListOfTags" => {
                            builder = builder.set_list_of_tags(crate::protocol_serde::shape_list_of_tags::de_list_of_tags(tokens)?);
                        }
                        "NotResources" => {
                            builder = builder.set_not_resources(crate::protocol_serde::shape_resource_arns::de_resource_arns(tokens)?);
                        }
                        "Conditions" => {
                            builder = builder.set_conditions(crate::protocol_serde::shape_conditions::de_conditions(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::backup_selection_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
