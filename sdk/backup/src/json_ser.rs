// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_backup_plan_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBackupPlanInput,
) {
    if let Some(var_1) = &input.backup_plan {
        let mut object_2 = object.key("BackupPlan").start_object();
        crate::json_ser::serialize_structure_backup_plan_input(&mut object_2, var_1);
        object_2.finish();
    }
    if let Some(var_3) = &input.backup_plan_tags {
        let mut object_4 = object.key("BackupPlanTags").start_object();
        for (key_5, value_6) in var_3 {
            {
                object_4.key(key_5).string(value_6);
            }
        }
        object_4.finish();
    }
    if let Some(var_7) = &input.creator_request_id {
        object.key("CreatorRequestId").string(var_7);
    }
}

pub fn serialize_structure_create_backup_selection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBackupSelectionInput,
) {
    if let Some(var_8) = &input.backup_selection {
        let mut object_9 = object.key("BackupSelection").start_object();
        crate::json_ser::serialize_structure_backup_selection(&mut object_9, var_8);
        object_9.finish();
    }
    if let Some(var_10) = &input.creator_request_id {
        object.key("CreatorRequestId").string(var_10);
    }
}

pub fn serialize_structure_create_backup_vault_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBackupVaultInput,
) {
    if let Some(var_11) = &input.backup_vault_tags {
        let mut object_12 = object.key("BackupVaultTags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14);
            }
        }
        object_12.finish();
    }
    if let Some(var_15) = &input.creator_request_id {
        object.key("CreatorRequestId").string(var_15);
    }
    if let Some(var_16) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_16);
    }
}

pub fn serialize_structure_create_framework_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFrameworkInput,
) {
    if let Some(var_17) = &input.framework_controls {
        let mut array_18 = object.key("FrameworkControls").start_array();
        for item_19 in var_17 {
            {
                let mut object_20 = array_18.value().start_object();
                crate::json_ser::serialize_structure_framework_control(&mut object_20, item_19);
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.framework_description {
        object.key("FrameworkDescription").string(var_21);
    }
    if let Some(var_22) = &input.framework_name {
        object.key("FrameworkName").string(var_22);
    }
    if let Some(var_23) = &input.framework_tags {
        let mut object_24 = object.key("FrameworkTags").start_object();
        for (key_25, value_26) in var_23 {
            {
                object_24.key(key_25).string(value_26);
            }
        }
        object_24.finish();
    }
    if let Some(var_27) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_27);
    }
}

pub fn serialize_structure_create_report_plan_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReportPlanInput,
) {
    if let Some(var_28) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_28);
    }
    if let Some(var_29) = &input.report_delivery_channel {
        let mut object_30 = object.key("ReportDeliveryChannel").start_object();
        crate::json_ser::serialize_structure_report_delivery_channel(&mut object_30, var_29);
        object_30.finish();
    }
    if let Some(var_31) = &input.report_plan_description {
        object.key("ReportPlanDescription").string(var_31);
    }
    if let Some(var_32) = &input.report_plan_name {
        object.key("ReportPlanName").string(var_32);
    }
    if let Some(var_33) = &input.report_plan_tags {
        let mut object_34 = object.key("ReportPlanTags").start_object();
        for (key_35, value_36) in var_33 {
            {
                object_34.key(key_35).string(value_36);
            }
        }
        object_34.finish();
    }
    if let Some(var_37) = &input.report_setting {
        let mut object_38 = object.key("ReportSetting").start_object();
        crate::json_ser::serialize_structure_report_setting(&mut object_38, var_37);
        object_38.finish();
    }
}

pub fn serialize_structure_get_backup_plan_from_json_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBackupPlanFromJsonInput,
) {
    if let Some(var_39) = &input.backup_plan_template_json {
        object.key("BackupPlanTemplateJson").string(var_39);
    }
}

pub fn serialize_structure_put_backup_vault_access_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutBackupVaultAccessPolicyInput,
) {
    if let Some(var_40) = &input.policy {
        object.key("Policy").string(var_40);
    }
}

pub fn serialize_structure_put_backup_vault_notifications_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutBackupVaultNotificationsInput,
) {
    if let Some(var_41) = &input.backup_vault_events {
        let mut array_42 = object.key("BackupVaultEvents").start_array();
        for item_43 in var_41 {
            {
                array_42.value().string(item_43.as_str());
            }
        }
        array_42.finish();
    }
    if let Some(var_44) = &input.sns_topic_arn {
        object.key("SNSTopicArn").string(var_44);
    }
}

pub fn serialize_structure_start_backup_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBackupJobInput,
) {
    if let Some(var_45) = &input.backup_options {
        let mut object_46 = object.key("BackupOptions").start_object();
        for (key_47, value_48) in var_45 {
            {
                object_46.key(key_47).string(value_48);
            }
        }
        object_46.finish();
    }
    if let Some(var_49) = &input.backup_vault_name {
        object.key("BackupVaultName").string(var_49);
    }
    if let Some(var_50) = &input.complete_window_minutes {
        object.key("CompleteWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_50).into()),
        );
    }
    if let Some(var_51) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_51);
    }
    if let Some(var_52) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_52);
    }
    if let Some(var_53) = &input.lifecycle {
        let mut object_54 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_lifecycle(&mut object_54, var_53);
        object_54.finish();
    }
    if let Some(var_55) = &input.recovery_point_tags {
        let mut object_56 = object.key("RecoveryPointTags").start_object();
        for (key_57, value_58) in var_55 {
            {
                object_56.key(key_57).string(value_58);
            }
        }
        object_56.finish();
    }
    if let Some(var_59) = &input.resource_arn {
        object.key("ResourceArn").string(var_59);
    }
    if let Some(var_60) = &input.start_window_minutes {
        object.key("StartWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_60).into()),
        );
    }
}

pub fn serialize_structure_start_copy_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCopyJobInput,
) {
    if let Some(var_61) = &input.destination_backup_vault_arn {
        object.key("DestinationBackupVaultArn").string(var_61);
    }
    if let Some(var_62) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_62);
    }
    if let Some(var_63) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_63);
    }
    if let Some(var_64) = &input.lifecycle {
        let mut object_65 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_lifecycle(&mut object_65, var_64);
        object_65.finish();
    }
    if let Some(var_66) = &input.recovery_point_arn {
        object.key("RecoveryPointArn").string(var_66);
    }
    if let Some(var_67) = &input.source_backup_vault_name {
        object.key("SourceBackupVaultName").string(var_67);
    }
}

pub fn serialize_structure_start_report_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReportJobInput,
) {
    if let Some(var_68) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_68);
    }
}

pub fn serialize_structure_start_restore_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartRestoreJobInput,
) {
    if let Some(var_69) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_69);
    }
    if let Some(var_70) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_70);
    }
    if let Some(var_71) = &input.metadata {
        let mut object_72 = object.key("Metadata").start_object();
        for (key_73, value_74) in var_71 {
            {
                object_72.key(key_73).string(value_74);
            }
        }
        object_72.finish();
    }
    if let Some(var_75) = &input.recovery_point_arn {
        object.key("RecoveryPointArn").string(var_75);
    }
    if let Some(var_76) = &input.resource_type {
        object.key("ResourceType").string(var_76);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_77) = &input.tags {
        let mut object_78 = object.key("Tags").start_object();
        for (key_79, value_80) in var_77 {
            {
                object_78.key(key_79).string(value_80);
            }
        }
        object_78.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_81) = &input.tag_key_list {
        let mut array_82 = object.key("TagKeyList").start_array();
        for item_83 in var_81 {
            {
                array_82.value().string(item_83);
            }
        }
        array_82.finish();
    }
}

pub fn serialize_structure_update_backup_plan_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBackupPlanInput,
) {
    if let Some(var_84) = &input.backup_plan {
        let mut object_85 = object.key("BackupPlan").start_object();
        crate::json_ser::serialize_structure_backup_plan_input(&mut object_85, var_84);
        object_85.finish();
    }
}

pub fn serialize_structure_update_framework_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFrameworkInput,
) {
    if let Some(var_86) = &input.framework_controls {
        let mut array_87 = object.key("FrameworkControls").start_array();
        for item_88 in var_86 {
            {
                let mut object_89 = array_87.value().start_object();
                crate::json_ser::serialize_structure_framework_control(&mut object_89, item_88);
                object_89.finish();
            }
        }
        array_87.finish();
    }
    if let Some(var_90) = &input.framework_description {
        object.key("FrameworkDescription").string(var_90);
    }
    if let Some(var_91) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_91);
    }
}

pub fn serialize_structure_update_global_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGlobalSettingsInput,
) {
    if let Some(var_92) = &input.global_settings {
        let mut object_93 = object.key("GlobalSettings").start_object();
        for (key_94, value_95) in var_92 {
            {
                object_93.key(key_94).string(value_95);
            }
        }
        object_93.finish();
    }
}

pub fn serialize_structure_update_recovery_point_lifecycle_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRecoveryPointLifecycleInput,
) {
    if let Some(var_96) = &input.lifecycle {
        let mut object_97 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_lifecycle(&mut object_97, var_96);
        object_97.finish();
    }
}

pub fn serialize_structure_update_region_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegionSettingsInput,
) {
    if let Some(var_98) = &input.resource_type_opt_in_preference {
        let mut object_99 = object.key("ResourceTypeOptInPreference").start_object();
        for (key_100, value_101) in var_98 {
            {
                object_99.key(key_100).boolean(*value_101);
            }
        }
        object_99.finish();
    }
}

pub fn serialize_structure_update_report_plan_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateReportPlanInput,
) {
    if let Some(var_102) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_102);
    }
    if let Some(var_103) = &input.report_delivery_channel {
        let mut object_104 = object.key("ReportDeliveryChannel").start_object();
        crate::json_ser::serialize_structure_report_delivery_channel(&mut object_104, var_103);
        object_104.finish();
    }
    if let Some(var_105) = &input.report_plan_description {
        object.key("ReportPlanDescription").string(var_105);
    }
    if let Some(var_106) = &input.report_setting {
        let mut object_107 = object.key("ReportSetting").start_object();
        crate::json_ser::serialize_structure_report_setting(&mut object_107, var_106);
        object_107.finish();
    }
}

pub fn serialize_structure_backup_plan_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BackupPlanInput,
) {
    if let Some(var_108) = &input.backup_plan_name {
        object.key("BackupPlanName").string(var_108);
    }
    if let Some(var_109) = &input.rules {
        let mut array_110 = object.key("Rules").start_array();
        for item_111 in var_109 {
            {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_backup_rule_input(&mut object_112, item_111);
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.advanced_backup_settings {
        let mut array_114 = object.key("AdvancedBackupSettings").start_array();
        for item_115 in var_113 {
            {
                let mut object_116 = array_114.value().start_object();
                crate::json_ser::serialize_structure_advanced_backup_setting(
                    &mut object_116,
                    item_115,
                );
                object_116.finish();
            }
        }
        array_114.finish();
    }
}

pub fn serialize_structure_backup_selection(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BackupSelection,
) {
    if let Some(var_117) = &input.selection_name {
        object.key("SelectionName").string(var_117);
    }
    if let Some(var_118) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_118);
    }
    if let Some(var_119) = &input.resources {
        let mut array_120 = object.key("Resources").start_array();
        for item_121 in var_119 {
            {
                array_120.value().string(item_121);
            }
        }
        array_120.finish();
    }
    if let Some(var_122) = &input.list_of_tags {
        let mut array_123 = object.key("ListOfTags").start_array();
        for item_124 in var_122 {
            {
                let mut object_125 = array_123.value().start_object();
                crate::json_ser::serialize_structure_condition(&mut object_125, item_124);
                object_125.finish();
            }
        }
        array_123.finish();
    }
}

pub fn serialize_structure_framework_control(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FrameworkControl,
) {
    if let Some(var_126) = &input.control_name {
        object.key("ControlName").string(var_126);
    }
    if let Some(var_127) = &input.control_input_parameters {
        let mut array_128 = object.key("ControlInputParameters").start_array();
        for item_129 in var_127 {
            {
                let mut object_130 = array_128.value().start_object();
                crate::json_ser::serialize_structure_control_input_parameter(
                    &mut object_130,
                    item_129,
                );
                object_130.finish();
            }
        }
        array_128.finish();
    }
    if let Some(var_131) = &input.control_scope {
        let mut object_132 = object.key("ControlScope").start_object();
        crate::json_ser::serialize_structure_control_scope(&mut object_132, var_131);
        object_132.finish();
    }
}

pub fn serialize_structure_report_delivery_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReportDeliveryChannel,
) {
    if let Some(var_133) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_133);
    }
    if let Some(var_134) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_134);
    }
    if let Some(var_135) = &input.formats {
        let mut array_136 = object.key("Formats").start_array();
        for item_137 in var_135 {
            {
                array_136.value().string(item_137);
            }
        }
        array_136.finish();
    }
}

pub fn serialize_structure_report_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReportSetting,
) {
    if let Some(var_138) = &input.report_template {
        object.key("ReportTemplate").string(var_138);
    }
}

pub fn serialize_structure_lifecycle(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Lifecycle,
) {
    if let Some(var_139) = &input.move_to_cold_storage_after_days {
        object.key("MoveToColdStorageAfterDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_139).into()),
        );
    }
    if let Some(var_140) = &input.delete_after_days {
        object.key("DeleteAfterDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_140).into()),
        );
    }
}

pub fn serialize_structure_backup_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BackupRuleInput,
) {
    if let Some(var_141) = &input.rule_name {
        object.key("RuleName").string(var_141);
    }
    if let Some(var_142) = &input.target_backup_vault_name {
        object.key("TargetBackupVaultName").string(var_142);
    }
    if let Some(var_143) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_143);
    }
    if let Some(var_144) = &input.start_window_minutes {
        object.key("StartWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_144).into()),
        );
    }
    if let Some(var_145) = &input.completion_window_minutes {
        object.key("CompletionWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_145).into()),
        );
    }
    if let Some(var_146) = &input.lifecycle {
        let mut object_147 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_lifecycle(&mut object_147, var_146);
        object_147.finish();
    }
    if let Some(var_148) = &input.recovery_point_tags {
        let mut object_149 = object.key("RecoveryPointTags").start_object();
        for (key_150, value_151) in var_148 {
            {
                object_149.key(key_150).string(value_151);
            }
        }
        object_149.finish();
    }
    if let Some(var_152) = &input.copy_actions {
        let mut array_153 = object.key("CopyActions").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_copy_action(&mut object_155, item_154);
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if let Some(var_156) = &input.enable_continuous_backup {
        object.key("EnableContinuousBackup").boolean(*var_156);
    }
}

pub fn serialize_structure_advanced_backup_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdvancedBackupSetting,
) {
    if let Some(var_157) = &input.resource_type {
        object.key("ResourceType").string(var_157);
    }
    if let Some(var_158) = &input.backup_options {
        let mut object_159 = object.key("BackupOptions").start_object();
        for (key_160, value_161) in var_158 {
            {
                object_159.key(key_160).string(value_161);
            }
        }
        object_159.finish();
    }
}

pub fn serialize_structure_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) {
    if let Some(var_162) = &input.condition_type {
        object.key("ConditionType").string(var_162.as_str());
    }
    if let Some(var_163) = &input.condition_key {
        object.key("ConditionKey").string(var_163);
    }
    if let Some(var_164) = &input.condition_value {
        object.key("ConditionValue").string(var_164);
    }
}

pub fn serialize_structure_control_input_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ControlInputParameter,
) {
    if let Some(var_165) = &input.parameter_name {
        object.key("ParameterName").string(var_165);
    }
    if let Some(var_166) = &input.parameter_value {
        object.key("ParameterValue").string(var_166);
    }
}

pub fn serialize_structure_control_scope(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ControlScope,
) {
    if let Some(var_167) = &input.compliance_resource_ids {
        let mut array_168 = object.key("ComplianceResourceIds").start_array();
        for item_169 in var_167 {
            {
                array_168.value().string(item_169);
            }
        }
        array_168.finish();
    }
    if let Some(var_170) = &input.compliance_resource_types {
        let mut array_171 = object.key("ComplianceResourceTypes").start_array();
        for item_172 in var_170 {
            {
                array_171.value().string(item_172);
            }
        }
        array_171.finish();
    }
    if let Some(var_173) = &input.tags {
        let mut object_174 = object.key("Tags").start_object();
        for (key_175, value_176) in var_173 {
            {
                object_174.key(key_175).string(value_176);
            }
        }
        object_174.finish();
    }
}

pub fn serialize_structure_copy_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CopyAction,
) {
    if let Some(var_177) = &input.lifecycle {
        let mut object_178 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_lifecycle(&mut object_178, var_177);
        object_178.finish();
    }
    if let Some(var_179) = &input.destination_backup_vault_arn {
        object.key("DestinationBackupVaultArn").string(var_179);
    }
}
