// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_backup_plan_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBackupPlanInput,
) {
    if let Some(var_1) = &input.backup_plan {
        let mut object_2 = object.key("BackupPlan").start_object();
        crate::json_ser::serialize_structure_backup_plan_input(&mut object_2, var_1);
        object_2.finish();
    }
    if let Some(var_3) = &input.backup_plan_tags {
        let mut object_4 = object.key("BackupPlanTags").start_object();
        for (key_5, value_6) in var_3 {
            {
                object_4.key(key_5).string(value_6);
            }
        }
        object_4.finish();
    }
    if let Some(var_7) = &input.creator_request_id {
        object.key("CreatorRequestId").string(var_7);
    }
}

pub fn serialize_structure_create_backup_selection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBackupSelectionInput,
) {
    if let Some(var_8) = &input.backup_selection {
        let mut object_9 = object.key("BackupSelection").start_object();
        crate::json_ser::serialize_structure_backup_selection(&mut object_9, var_8);
        object_9.finish();
    }
    if let Some(var_10) = &input.creator_request_id {
        object.key("CreatorRequestId").string(var_10);
    }
}

pub fn serialize_structure_create_backup_vault_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBackupVaultInput,
) {
    if let Some(var_11) = &input.backup_vault_tags {
        let mut object_12 = object.key("BackupVaultTags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14);
            }
        }
        object_12.finish();
    }
    if let Some(var_15) = &input.creator_request_id {
        object.key("CreatorRequestId").string(var_15);
    }
    if let Some(var_16) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_16);
    }
}

pub fn serialize_structure_get_backup_plan_from_json_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBackupPlanFromJsonInput,
) {
    if let Some(var_17) = &input.backup_plan_template_json {
        object.key("BackupPlanTemplateJson").string(var_17);
    }
}

pub fn serialize_structure_put_backup_vault_access_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutBackupVaultAccessPolicyInput,
) {
    if let Some(var_18) = &input.policy {
        object.key("Policy").string(var_18);
    }
}

pub fn serialize_structure_put_backup_vault_notifications_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutBackupVaultNotificationsInput,
) {
    if let Some(var_19) = &input.backup_vault_events {
        let mut array_20 = object.key("BackupVaultEvents").start_array();
        for item_21 in var_19 {
            {
                array_20.value().string(item_21.as_str());
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.sns_topic_arn {
        object.key("SNSTopicArn").string(var_22);
    }
}

pub fn serialize_structure_start_backup_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBackupJobInput,
) {
    if let Some(var_23) = &input.backup_options {
        let mut object_24 = object.key("BackupOptions").start_object();
        for (key_25, value_26) in var_23 {
            {
                object_24.key(key_25).string(value_26);
            }
        }
        object_24.finish();
    }
    if let Some(var_27) = &input.backup_vault_name {
        object.key("BackupVaultName").string(var_27);
    }
    if let Some(var_28) = &input.complete_window_minutes {
        object.key("CompleteWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_28).into()),
        );
    }
    if let Some(var_29) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_29);
    }
    if let Some(var_30) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_30);
    }
    if let Some(var_31) = &input.lifecycle {
        let mut object_32 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_lifecycle(&mut object_32, var_31);
        object_32.finish();
    }
    if let Some(var_33) = &input.recovery_point_tags {
        let mut object_34 = object.key("RecoveryPointTags").start_object();
        for (key_35, value_36) in var_33 {
            {
                object_34.key(key_35).string(value_36);
            }
        }
        object_34.finish();
    }
    if let Some(var_37) = &input.resource_arn {
        object.key("ResourceArn").string(var_37);
    }
    if let Some(var_38) = &input.start_window_minutes {
        object.key("StartWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_38).into()),
        );
    }
}

pub fn serialize_structure_start_copy_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCopyJobInput,
) {
    if let Some(var_39) = &input.destination_backup_vault_arn {
        object.key("DestinationBackupVaultArn").string(var_39);
    }
    if let Some(var_40) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_40);
    }
    if let Some(var_41) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_41);
    }
    if let Some(var_42) = &input.lifecycle {
        let mut object_43 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_lifecycle(&mut object_43, var_42);
        object_43.finish();
    }
    if let Some(var_44) = &input.recovery_point_arn {
        object.key("RecoveryPointArn").string(var_44);
    }
    if let Some(var_45) = &input.source_backup_vault_name {
        object.key("SourceBackupVaultName").string(var_45);
    }
}

pub fn serialize_structure_start_restore_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartRestoreJobInput,
) {
    if let Some(var_46) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_46);
    }
    if let Some(var_47) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_47);
    }
    if let Some(var_48) = &input.metadata {
        let mut object_49 = object.key("Metadata").start_object();
        for (key_50, value_51) in var_48 {
            {
                object_49.key(key_50).string(value_51);
            }
        }
        object_49.finish();
    }
    if let Some(var_52) = &input.recovery_point_arn {
        object.key("RecoveryPointArn").string(var_52);
    }
    if let Some(var_53) = &input.resource_type {
        object.key("ResourceType").string(var_53);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_54) = &input.tags {
        let mut object_55 = object.key("Tags").start_object();
        for (key_56, value_57) in var_54 {
            {
                object_55.key(key_56).string(value_57);
            }
        }
        object_55.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_58) = &input.tag_key_list {
        let mut array_59 = object.key("TagKeyList").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60);
            }
        }
        array_59.finish();
    }
}

pub fn serialize_structure_update_backup_plan_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBackupPlanInput,
) {
    if let Some(var_61) = &input.backup_plan {
        let mut object_62 = object.key("BackupPlan").start_object();
        crate::json_ser::serialize_structure_backup_plan_input(&mut object_62, var_61);
        object_62.finish();
    }
}

pub fn serialize_structure_update_global_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGlobalSettingsInput,
) {
    if let Some(var_63) = &input.global_settings {
        let mut object_64 = object.key("GlobalSettings").start_object();
        for (key_65, value_66) in var_63 {
            {
                object_64.key(key_65).string(value_66);
            }
        }
        object_64.finish();
    }
}

pub fn serialize_structure_update_recovery_point_lifecycle_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRecoveryPointLifecycleInput,
) {
    if let Some(var_67) = &input.lifecycle {
        let mut object_68 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_lifecycle(&mut object_68, var_67);
        object_68.finish();
    }
}

pub fn serialize_structure_update_region_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegionSettingsInput,
) {
    if let Some(var_69) = &input.resource_type_opt_in_preference {
        let mut object_70 = object.key("ResourceTypeOptInPreference").start_object();
        for (key_71, value_72) in var_69 {
            {
                object_70.key(key_71).boolean(*value_72);
            }
        }
        object_70.finish();
    }
}

pub fn serialize_structure_backup_plan_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BackupPlanInput,
) {
    if let Some(var_73) = &input.backup_plan_name {
        object.key("BackupPlanName").string(var_73);
    }
    if let Some(var_74) = &input.rules {
        let mut array_75 = object.key("Rules").start_array();
        for item_76 in var_74 {
            {
                let mut object_77 = array_75.value().start_object();
                crate::json_ser::serialize_structure_backup_rule_input(&mut object_77, item_76);
                object_77.finish();
            }
        }
        array_75.finish();
    }
    if let Some(var_78) = &input.advanced_backup_settings {
        let mut array_79 = object.key("AdvancedBackupSettings").start_array();
        for item_80 in var_78 {
            {
                let mut object_81 = array_79.value().start_object();
                crate::json_ser::serialize_structure_advanced_backup_setting(
                    &mut object_81,
                    item_80,
                );
                object_81.finish();
            }
        }
        array_79.finish();
    }
}

pub fn serialize_structure_backup_selection(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BackupSelection,
) {
    if let Some(var_82) = &input.selection_name {
        object.key("SelectionName").string(var_82);
    }
    if let Some(var_83) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_83);
    }
    if let Some(var_84) = &input.resources {
        let mut array_85 = object.key("Resources").start_array();
        for item_86 in var_84 {
            {
                array_85.value().string(item_86);
            }
        }
        array_85.finish();
    }
    if let Some(var_87) = &input.list_of_tags {
        let mut array_88 = object.key("ListOfTags").start_array();
        for item_89 in var_87 {
            {
                let mut object_90 = array_88.value().start_object();
                crate::json_ser::serialize_structure_condition(&mut object_90, item_89);
                object_90.finish();
            }
        }
        array_88.finish();
    }
}

pub fn serialize_structure_lifecycle(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Lifecycle,
) {
    if let Some(var_91) = &input.move_to_cold_storage_after_days {
        object.key("MoveToColdStorageAfterDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_91).into()),
        );
    }
    if let Some(var_92) = &input.delete_after_days {
        object.key("DeleteAfterDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_92).into()),
        );
    }
}

pub fn serialize_structure_backup_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BackupRuleInput,
) {
    if let Some(var_93) = &input.rule_name {
        object.key("RuleName").string(var_93);
    }
    if let Some(var_94) = &input.target_backup_vault_name {
        object.key("TargetBackupVaultName").string(var_94);
    }
    if let Some(var_95) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_95);
    }
    if let Some(var_96) = &input.start_window_minutes {
        object.key("StartWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_96).into()),
        );
    }
    if let Some(var_97) = &input.completion_window_minutes {
        object.key("CompletionWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    if let Some(var_98) = &input.lifecycle {
        let mut object_99 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_lifecycle(&mut object_99, var_98);
        object_99.finish();
    }
    if let Some(var_100) = &input.recovery_point_tags {
        let mut object_101 = object.key("RecoveryPointTags").start_object();
        for (key_102, value_103) in var_100 {
            {
                object_101.key(key_102).string(value_103);
            }
        }
        object_101.finish();
    }
    if let Some(var_104) = &input.copy_actions {
        let mut array_105 = object.key("CopyActions").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_copy_action(&mut object_107, item_106);
                object_107.finish();
            }
        }
        array_105.finish();
    }
    if let Some(var_108) = &input.enable_continuous_backup {
        object.key("EnableContinuousBackup").boolean(*var_108);
    }
}

pub fn serialize_structure_advanced_backup_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdvancedBackupSetting,
) {
    if let Some(var_109) = &input.resource_type {
        object.key("ResourceType").string(var_109);
    }
    if let Some(var_110) = &input.backup_options {
        let mut object_111 = object.key("BackupOptions").start_object();
        for (key_112, value_113) in var_110 {
            {
                object_111.key(key_112).string(value_113);
            }
        }
        object_111.finish();
    }
}

pub fn serialize_structure_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) {
    if let Some(var_114) = &input.condition_type {
        object.key("ConditionType").string(var_114.as_str());
    }
    if let Some(var_115) = &input.condition_key {
        object.key("ConditionKey").string(var_115);
    }
    if let Some(var_116) = &input.condition_value {
        object.key("ConditionValue").string(var_116);
    }
}

pub fn serialize_structure_copy_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CopyAction,
) {
    if let Some(var_117) = &input.lifecycle {
        let mut object_118 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_lifecycle(&mut object_118, var_117);
        object_118.finish();
    }
    if let Some(var_119) = &input.destination_backup_vault_arn {
        object.key("DestinationBackupVaultArn").string(var_119);
    }
}
