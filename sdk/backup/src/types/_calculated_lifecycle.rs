// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains <code>DeleteAt</code> and <code>MoveToColdStorageAt</code> timestamps, which are used to specify a lifecycle for a recovery point.</p>
/// <p>The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. Backup transitions and expires backups automatically according to the lifecycle that you define.</p>
/// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p>
/// <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CalculatedLifecycle {
    /// <p>A timestamp that specifies when to transition a recovery point to cold storage.</p>
    #[doc(hidden)]
    pub move_to_cold_storage_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A timestamp that specifies when to delete a recovery point.</p>
    #[doc(hidden)]
    pub delete_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl CalculatedLifecycle {
    /// <p>A timestamp that specifies when to transition a recovery point to cold storage.</p>
    pub fn move_to_cold_storage_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.move_to_cold_storage_at.as_ref()
    }
    /// <p>A timestamp that specifies when to delete a recovery point.</p>
    pub fn delete_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.delete_at.as_ref()
    }
}
impl CalculatedLifecycle {
    /// Creates a new builder-style object to manufacture [`CalculatedLifecycle`](crate::types::CalculatedLifecycle).
    pub fn builder() -> crate::types::builders::CalculatedLifecycleBuilder {
        crate::types::builders::CalculatedLifecycleBuilder::default()
    }
}

/// A builder for [`CalculatedLifecycle`](crate::types::CalculatedLifecycle).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CalculatedLifecycleBuilder {
    pub(crate) move_to_cold_storage_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) delete_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl CalculatedLifecycleBuilder {
    /// <p>A timestamp that specifies when to transition a recovery point to cold storage.</p>
    pub fn move_to_cold_storage_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.move_to_cold_storage_at = Some(input);
        self
    }
    /// <p>A timestamp that specifies when to transition a recovery point to cold storage.</p>
    pub fn set_move_to_cold_storage_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.move_to_cold_storage_at = input;
        self
    }
    /// <p>A timestamp that specifies when to delete a recovery point.</p>
    pub fn delete_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.delete_at = Some(input);
        self
    }
    /// <p>A timestamp that specifies when to delete a recovery point.</p>
    pub fn set_delete_at(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.delete_at = input;
        self
    }
    /// Consumes the builder and constructs a [`CalculatedLifecycle`](crate::types::CalculatedLifecycle).
    pub fn build(self) -> crate::types::CalculatedLifecycle {
        crate::types::CalculatedLifecycle {
            move_to_cold_storage_at: self.move_to_cold_storage_at,
            delete_at: self.delete_at,
        }
    }
}
