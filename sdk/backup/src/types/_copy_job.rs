// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains detailed information about a copy job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CopyJob {
    /// <p>The account ID that owns the copy job.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>Uniquely identifies a copy job.</p>
    pub copy_job_id: ::std::option::Option<::std::string::String>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a source copy vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub source_backup_vault_arn: ::std::option::Option<::std::string::String>,
    /// <p>An ARN that uniquely identifies a source recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub source_recovery_point_arn: ::std::option::Option<::std::string::String>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a destination copy vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub destination_backup_vault_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of destination backup vault where the copied recovery point is stored. Valid values are <code>BACKUP_VAULT</code> for standard backup vaults and <code>LOGICALLY_AIR_GAPPED_BACKUP_VAULT</code> for logically air-gapped vaults.</p>
    pub destination_vault_type: ::std::option::Option<::std::string::String>,
    /// <p>The lock state of the destination backup vault. For logically air-gapped vaults, this indicates whether the vault is locked in compliance mode. Valid values include <code>LOCKED</code> and <code>UNLOCKED</code>.</p>
    pub destination_vault_lock_state: ::std::option::Option<::std::string::String>,
    /// <p>An ARN that uniquely identifies a destination recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub destination_recovery_point_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the copied backup in the destination vault. This can be a customer-managed key or an Amazon Web Services managed key.</p>
    pub destination_encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the time period, in days, before a recovery point transitions to cold storage or is deleted.</p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the retention setting must be 90 days greater than the transition to cold after days setting. The transition to cold after days setting can't be changed after a backup has been transitioned to cold.</p>
    /// <p>Resource types that can transition to cold storage are listed in the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource">Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    /// <p>To remove the existing lifecycle and retention periods and keep your recovery points indefinitely, specify -1 for <code>MoveToColdStorageAfterDays</code> and <code>DeleteAfterDays</code>.</p>
    pub destination_recovery_point_lifecycle: ::std::option::Option<crate::types::Lifecycle>,
    /// <p>The Amazon Web Services resource to be copied; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The date and time a copy job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time a copy job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub completion_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current state of a copy job.</p>
    pub state: ::std::option::Option<crate::types::CopyJobState>,
    /// <p>A detailed message explaining the status of the job to copy a resource.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The size, in bytes, of a copy job.</p>
    pub backup_size_in_bytes: ::std::option::Option<i64>,
    /// <p>Specifies the IAM role ARN used to copy the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub iam_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Contains information about the backup plan and rule that Backup used to initiate the recovery point backup.</p>
    pub created_by: ::std::option::Option<crate::types::RecoveryPointCreator>,
    /// <p>The type of Amazon Web Services resource to be copied; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>This uniquely identifies a request to Backup to copy a resource. The return will be the parent (composite) job ID.</p>
    pub parent_job_id: ::std::option::Option<::std::string::String>,
    /// <p>This is a boolean value indicating this is a parent (composite) copy job.</p>
    pub is_parent: bool,
    /// <p>The identifier of a resource within a composite group, such as nested (child) recovery point belonging to a composite (parent) stack. The ID is transferred from the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html#resources-section-structure-syntax"> logical ID</a> within a stack.</p>
    pub composite_member_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The number of child (nested) copy jobs.</p>
    pub number_of_child_jobs: ::std::option::Option<i64>,
    /// <p>This returns the statistics of the included child (nested) copy jobs.</p>
    pub child_jobs_in_state: ::std::option::Option<::std::collections::HashMap<crate::types::CopyJobState, i64>>,
    /// <p>The non-unique name of the resource that belongs to the specified backup.</p>
    pub resource_name: ::std::option::Option<::std::string::String>,
    /// <p>This parameter is the job count for the specified message category.</p>
    /// <p>Example strings may include <code>AccessDenied</code>, <code>SUCCESS</code>, <code>AGGREGATE_ALL</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum</p>
    pub message_category: ::std::option::Option<::std::string::String>,
}
impl CopyJob {
    /// <p>The account ID that owns the copy job.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Uniquely identifies a copy job.</p>
    pub fn copy_job_id(&self) -> ::std::option::Option<&str> {
        self.copy_job_id.as_deref()
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a source copy vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn source_backup_vault_arn(&self) -> ::std::option::Option<&str> {
        self.source_backup_vault_arn.as_deref()
    }
    /// <p>An ARN that uniquely identifies a source recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn source_recovery_point_arn(&self) -> ::std::option::Option<&str> {
        self.source_recovery_point_arn.as_deref()
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a destination copy vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn destination_backup_vault_arn(&self) -> ::std::option::Option<&str> {
        self.destination_backup_vault_arn.as_deref()
    }
    /// <p>The type of destination backup vault where the copied recovery point is stored. Valid values are <code>BACKUP_VAULT</code> for standard backup vaults and <code>LOGICALLY_AIR_GAPPED_BACKUP_VAULT</code> for logically air-gapped vaults.</p>
    pub fn destination_vault_type(&self) -> ::std::option::Option<&str> {
        self.destination_vault_type.as_deref()
    }
    /// <p>The lock state of the destination backup vault. For logically air-gapped vaults, this indicates whether the vault is locked in compliance mode. Valid values include <code>LOCKED</code> and <code>UNLOCKED</code>.</p>
    pub fn destination_vault_lock_state(&self) -> ::std::option::Option<&str> {
        self.destination_vault_lock_state.as_deref()
    }
    /// <p>An ARN that uniquely identifies a destination recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn destination_recovery_point_arn(&self) -> ::std::option::Option<&str> {
        self.destination_recovery_point_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the copied backup in the destination vault. This can be a customer-managed key or an Amazon Web Services managed key.</p>
    pub fn destination_encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.destination_encryption_key_arn.as_deref()
    }
    /// <p>Specifies the time period, in days, before a recovery point transitions to cold storage or is deleted.</p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the retention setting must be 90 days greater than the transition to cold after days setting. The transition to cold after days setting can't be changed after a backup has been transitioned to cold.</p>
    /// <p>Resource types that can transition to cold storage are listed in the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource">Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    /// <p>To remove the existing lifecycle and retention periods and keep your recovery points indefinitely, specify -1 for <code>MoveToColdStorageAfterDays</code> and <code>DeleteAfterDays</code>.</p>
    pub fn destination_recovery_point_lifecycle(&self) -> ::std::option::Option<&crate::types::Lifecycle> {
        self.destination_recovery_point_lifecycle.as_ref()
    }
    /// <p>The Amazon Web Services resource to be copied; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The date and time a copy job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date and time a copy job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn completion_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completion_date.as_ref()
    }
    /// <p>The current state of a copy job.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::CopyJobState> {
        self.state.as_ref()
    }
    /// <p>A detailed message explaining the status of the job to copy a resource.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The size, in bytes, of a copy job.</p>
    pub fn backup_size_in_bytes(&self) -> ::std::option::Option<i64> {
        self.backup_size_in_bytes
    }
    /// <p>Specifies the IAM role ARN used to copy the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub fn iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>Contains information about the backup plan and rule that Backup used to initiate the recovery point backup.</p>
    pub fn created_by(&self) -> ::std::option::Option<&crate::types::RecoveryPointCreator> {
        self.created_by.as_ref()
    }
    /// <p>The type of Amazon Web Services resource to be copied; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>This uniquely identifies a request to Backup to copy a resource. The return will be the parent (composite) job ID.</p>
    pub fn parent_job_id(&self) -> ::std::option::Option<&str> {
        self.parent_job_id.as_deref()
    }
    /// <p>This is a boolean value indicating this is a parent (composite) copy job.</p>
    pub fn is_parent(&self) -> bool {
        self.is_parent
    }
    /// <p>The identifier of a resource within a composite group, such as nested (child) recovery point belonging to a composite (parent) stack. The ID is transferred from the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html#resources-section-structure-syntax"> logical ID</a> within a stack.</p>
    pub fn composite_member_identifier(&self) -> ::std::option::Option<&str> {
        self.composite_member_identifier.as_deref()
    }
    /// <p>The number of child (nested) copy jobs.</p>
    pub fn number_of_child_jobs(&self) -> ::std::option::Option<i64> {
        self.number_of_child_jobs
    }
    /// <p>This returns the statistics of the included child (nested) copy jobs.</p>
    pub fn child_jobs_in_state(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::CopyJobState, i64>> {
        self.child_jobs_in_state.as_ref()
    }
    /// <p>The non-unique name of the resource that belongs to the specified backup.</p>
    pub fn resource_name(&self) -> ::std::option::Option<&str> {
        self.resource_name.as_deref()
    }
    /// <p>This parameter is the job count for the specified message category.</p>
    /// <p>Example strings may include <code>AccessDenied</code>, <code>SUCCESS</code>, <code>AGGREGATE_ALL</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum</p>
    pub fn message_category(&self) -> ::std::option::Option<&str> {
        self.message_category.as_deref()
    }
}
impl CopyJob {
    /// Creates a new builder-style object to manufacture [`CopyJob`](crate::types::CopyJob).
    pub fn builder() -> crate::types::builders::CopyJobBuilder {
        crate::types::builders::CopyJobBuilder::default()
    }
}

/// A builder for [`CopyJob`](crate::types::CopyJob).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CopyJobBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) copy_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_backup_vault_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_recovery_point_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination_backup_vault_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination_vault_type: ::std::option::Option<::std::string::String>,
    pub(crate) destination_vault_lock_state: ::std::option::Option<::std::string::String>,
    pub(crate) destination_recovery_point_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination_encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination_recovery_point_lifecycle: ::std::option::Option<crate::types::Lifecycle>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completion_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) state: ::std::option::Option<crate::types::CopyJobState>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) backup_size_in_bytes: ::std::option::Option<i64>,
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<crate::types::RecoveryPointCreator>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) parent_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) is_parent: ::std::option::Option<bool>,
    pub(crate) composite_member_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_child_jobs: ::std::option::Option<i64>,
    pub(crate) child_jobs_in_state: ::std::option::Option<::std::collections::HashMap<crate::types::CopyJobState, i64>>,
    pub(crate) resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) message_category: ::std::option::Option<::std::string::String>,
}
impl CopyJobBuilder {
    /// <p>The account ID that owns the copy job.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID that owns the copy job.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account ID that owns the copy job.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>Uniquely identifies a copy job.</p>
    pub fn copy_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.copy_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Uniquely identifies a copy job.</p>
    pub fn set_copy_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.copy_job_id = input;
        self
    }
    /// <p>Uniquely identifies a copy job.</p>
    pub fn get_copy_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.copy_job_id
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a source copy vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn source_backup_vault_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_backup_vault_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a source copy vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn set_source_backup_vault_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_backup_vault_arn = input;
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a source copy vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn get_source_backup_vault_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_backup_vault_arn
    }
    /// <p>An ARN that uniquely identifies a source recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn source_recovery_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_recovery_point_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ARN that uniquely identifies a source recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn set_source_recovery_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_recovery_point_arn = input;
        self
    }
    /// <p>An ARN that uniquely identifies a source recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn get_source_recovery_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_recovery_point_arn
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a destination copy vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn destination_backup_vault_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_backup_vault_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a destination copy vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn set_destination_backup_vault_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_backup_vault_arn = input;
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a destination copy vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn get_destination_backup_vault_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_backup_vault_arn
    }
    /// <p>The type of destination backup vault where the copied recovery point is stored. Valid values are <code>BACKUP_VAULT</code> for standard backup vaults and <code>LOGICALLY_AIR_GAPPED_BACKUP_VAULT</code> for logically air-gapped vaults.</p>
    pub fn destination_vault_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_vault_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of destination backup vault where the copied recovery point is stored. Valid values are <code>BACKUP_VAULT</code> for standard backup vaults and <code>LOGICALLY_AIR_GAPPED_BACKUP_VAULT</code> for logically air-gapped vaults.</p>
    pub fn set_destination_vault_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_vault_type = input;
        self
    }
    /// <p>The type of destination backup vault where the copied recovery point is stored. Valid values are <code>BACKUP_VAULT</code> for standard backup vaults and <code>LOGICALLY_AIR_GAPPED_BACKUP_VAULT</code> for logically air-gapped vaults.</p>
    pub fn get_destination_vault_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_vault_type
    }
    /// <p>The lock state of the destination backup vault. For logically air-gapped vaults, this indicates whether the vault is locked in compliance mode. Valid values include <code>LOCKED</code> and <code>UNLOCKED</code>.</p>
    pub fn destination_vault_lock_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_vault_lock_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The lock state of the destination backup vault. For logically air-gapped vaults, this indicates whether the vault is locked in compliance mode. Valid values include <code>LOCKED</code> and <code>UNLOCKED</code>.</p>
    pub fn set_destination_vault_lock_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_vault_lock_state = input;
        self
    }
    /// <p>The lock state of the destination backup vault. For logically air-gapped vaults, this indicates whether the vault is locked in compliance mode. Valid values include <code>LOCKED</code> and <code>UNLOCKED</code>.</p>
    pub fn get_destination_vault_lock_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_vault_lock_state
    }
    /// <p>An ARN that uniquely identifies a destination recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn destination_recovery_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_recovery_point_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ARN that uniquely identifies a destination recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn set_destination_recovery_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_recovery_point_arn = input;
        self
    }
    /// <p>An ARN that uniquely identifies a destination recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn get_destination_recovery_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_recovery_point_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the copied backup in the destination vault. This can be a customer-managed key or an Amazon Web Services managed key.</p>
    pub fn destination_encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the copied backup in the destination vault. This can be a customer-managed key or an Amazon Web Services managed key.</p>
    pub fn set_destination_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_encryption_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the copied backup in the destination vault. This can be a customer-managed key or an Amazon Web Services managed key.</p>
    pub fn get_destination_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_encryption_key_arn
    }
    /// <p>Specifies the time period, in days, before a recovery point transitions to cold storage or is deleted.</p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the retention setting must be 90 days greater than the transition to cold after days setting. The transition to cold after days setting can't be changed after a backup has been transitioned to cold.</p>
    /// <p>Resource types that can transition to cold storage are listed in the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource">Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    /// <p>To remove the existing lifecycle and retention periods and keep your recovery points indefinitely, specify -1 for <code>MoveToColdStorageAfterDays</code> and <code>DeleteAfterDays</code>.</p>
    pub fn destination_recovery_point_lifecycle(mut self, input: crate::types::Lifecycle) -> Self {
        self.destination_recovery_point_lifecycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the time period, in days, before a recovery point transitions to cold storage or is deleted.</p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the retention setting must be 90 days greater than the transition to cold after days setting. The transition to cold after days setting can't be changed after a backup has been transitioned to cold.</p>
    /// <p>Resource types that can transition to cold storage are listed in the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource">Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    /// <p>To remove the existing lifecycle and retention periods and keep your recovery points indefinitely, specify -1 for <code>MoveToColdStorageAfterDays</code> and <code>DeleteAfterDays</code>.</p>
    pub fn set_destination_recovery_point_lifecycle(mut self, input: ::std::option::Option<crate::types::Lifecycle>) -> Self {
        self.destination_recovery_point_lifecycle = input;
        self
    }
    /// <p>Specifies the time period, in days, before a recovery point transitions to cold storage or is deleted.</p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the retention setting must be 90 days greater than the transition to cold after days setting. The transition to cold after days setting can't be changed after a backup has been transitioned to cold.</p>
    /// <p>Resource types that can transition to cold storage are listed in the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource">Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    /// <p>To remove the existing lifecycle and retention periods and keep your recovery points indefinitely, specify -1 for <code>MoveToColdStorageAfterDays</code> and <code>DeleteAfterDays</code>.</p>
    pub fn get_destination_recovery_point_lifecycle(&self) -> &::std::option::Option<crate::types::Lifecycle> {
        &self.destination_recovery_point_lifecycle
    }
    /// <p>The Amazon Web Services resource to be copied; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services resource to be copied; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Web Services resource to be copied; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The date and time a copy job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time a copy job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date and time a copy job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The date and time a copy job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn completion_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completion_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time a copy job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_completion_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completion_date = input;
        self
    }
    /// <p>The date and time a copy job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_completion_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completion_date
    }
    /// <p>The current state of a copy job.</p>
    pub fn state(mut self, input: crate::types::CopyJobState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of a copy job.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::CopyJobState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of a copy job.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::CopyJobState> {
        &self.state
    }
    /// <p>A detailed message explaining the status of the job to copy a resource.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed message explaining the status of the job to copy a resource.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A detailed message explaining the status of the job to copy a resource.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The size, in bytes, of a copy job.</p>
    pub fn backup_size_in_bytes(mut self, input: i64) -> Self {
        self.backup_size_in_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size, in bytes, of a copy job.</p>
    pub fn set_backup_size_in_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.backup_size_in_bytes = input;
        self
    }
    /// <p>The size, in bytes, of a copy job.</p>
    pub fn get_backup_size_in_bytes(&self) -> &::std::option::Option<i64> {
        &self.backup_size_in_bytes
    }
    /// <p>Specifies the IAM role ARN used to copy the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the IAM role ARN used to copy the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>Specifies the IAM role ARN used to copy the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// <p>Contains information about the backup plan and rule that Backup used to initiate the recovery point backup.</p>
    pub fn created_by(mut self, input: crate::types::RecoveryPointCreator) -> Self {
        self.created_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the backup plan and rule that Backup used to initiate the recovery point backup.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<crate::types::RecoveryPointCreator>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>Contains information about the backup plan and rule that Backup used to initiate the recovery point backup.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<crate::types::RecoveryPointCreator> {
        &self.created_by
    }
    /// <p>The type of Amazon Web Services resource to be copied; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of Amazon Web Services resource to be copied; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of Amazon Web Services resource to be copied; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>This uniquely identifies a request to Backup to copy a resource. The return will be the parent (composite) job ID.</p>
    pub fn parent_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This uniquely identifies a request to Backup to copy a resource. The return will be the parent (composite) job ID.</p>
    pub fn set_parent_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_job_id = input;
        self
    }
    /// <p>This uniquely identifies a request to Backup to copy a resource. The return will be the parent (composite) job ID.</p>
    pub fn get_parent_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_job_id
    }
    /// <p>This is a boolean value indicating this is a parent (composite) copy job.</p>
    pub fn is_parent(mut self, input: bool) -> Self {
        self.is_parent = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is a boolean value indicating this is a parent (composite) copy job.</p>
    pub fn set_is_parent(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_parent = input;
        self
    }
    /// <p>This is a boolean value indicating this is a parent (composite) copy job.</p>
    pub fn get_is_parent(&self) -> &::std::option::Option<bool> {
        &self.is_parent
    }
    /// <p>The identifier of a resource within a composite group, such as nested (child) recovery point belonging to a composite (parent) stack. The ID is transferred from the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html#resources-section-structure-syntax"> logical ID</a> within a stack.</p>
    pub fn composite_member_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.composite_member_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a resource within a composite group, such as nested (child) recovery point belonging to a composite (parent) stack. The ID is transferred from the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html#resources-section-structure-syntax"> logical ID</a> within a stack.</p>
    pub fn set_composite_member_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.composite_member_identifier = input;
        self
    }
    /// <p>The identifier of a resource within a composite group, such as nested (child) recovery point belonging to a composite (parent) stack. The ID is transferred from the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html#resources-section-structure-syntax"> logical ID</a> within a stack.</p>
    pub fn get_composite_member_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.composite_member_identifier
    }
    /// <p>The number of child (nested) copy jobs.</p>
    pub fn number_of_child_jobs(mut self, input: i64) -> Self {
        self.number_of_child_jobs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of child (nested) copy jobs.</p>
    pub fn set_number_of_child_jobs(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_child_jobs = input;
        self
    }
    /// <p>The number of child (nested) copy jobs.</p>
    pub fn get_number_of_child_jobs(&self) -> &::std::option::Option<i64> {
        &self.number_of_child_jobs
    }
    /// Adds a key-value pair to `child_jobs_in_state`.
    ///
    /// To override the contents of this collection use [`set_child_jobs_in_state`](Self::set_child_jobs_in_state).
    ///
    /// <p>This returns the statistics of the included child (nested) copy jobs.</p>
    pub fn child_jobs_in_state(mut self, k: crate::types::CopyJobState, v: i64) -> Self {
        let mut hash_map = self.child_jobs_in_state.unwrap_or_default();
        hash_map.insert(k, v);
        self.child_jobs_in_state = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>This returns the statistics of the included child (nested) copy jobs.</p>
    pub fn set_child_jobs_in_state(mut self, input: ::std::option::Option<::std::collections::HashMap<crate::types::CopyJobState, i64>>) -> Self {
        self.child_jobs_in_state = input;
        self
    }
    /// <p>This returns the statistics of the included child (nested) copy jobs.</p>
    pub fn get_child_jobs_in_state(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::CopyJobState, i64>> {
        &self.child_jobs_in_state
    }
    /// <p>The non-unique name of the resource that belongs to the specified backup.</p>
    pub fn resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The non-unique name of the resource that belongs to the specified backup.</p>
    pub fn set_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_name = input;
        self
    }
    /// <p>The non-unique name of the resource that belongs to the specified backup.</p>
    pub fn get_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_name
    }
    /// <p>This parameter is the job count for the specified message category.</p>
    /// <p>Example strings may include <code>AccessDenied</code>, <code>SUCCESS</code>, <code>AGGREGATE_ALL</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum</p>
    pub fn message_category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This parameter is the job count for the specified message category.</p>
    /// <p>Example strings may include <code>AccessDenied</code>, <code>SUCCESS</code>, <code>AGGREGATE_ALL</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum</p>
    pub fn set_message_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_category = input;
        self
    }
    /// <p>This parameter is the job count for the specified message category.</p>
    /// <p>Example strings may include <code>AccessDenied</code>, <code>SUCCESS</code>, <code>AGGREGATE_ALL</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum</p>
    pub fn get_message_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_category
    }
    /// Consumes the builder and constructs a [`CopyJob`](crate::types::CopyJob).
    pub fn build(self) -> crate::types::CopyJob {
        crate::types::CopyJob {
            account_id: self.account_id,
            copy_job_id: self.copy_job_id,
            source_backup_vault_arn: self.source_backup_vault_arn,
            source_recovery_point_arn: self.source_recovery_point_arn,
            destination_backup_vault_arn: self.destination_backup_vault_arn,
            destination_vault_type: self.destination_vault_type,
            destination_vault_lock_state: self.destination_vault_lock_state,
            destination_recovery_point_arn: self.destination_recovery_point_arn,
            destination_encryption_key_arn: self.destination_encryption_key_arn,
            destination_recovery_point_lifecycle: self.destination_recovery_point_lifecycle,
            resource_arn: self.resource_arn,
            creation_date: self.creation_date,
            completion_date: self.completion_date,
            state: self.state,
            status_message: self.status_message,
            backup_size_in_bytes: self.backup_size_in_bytes,
            iam_role_arn: self.iam_role_arn,
            created_by: self.created_by,
            resource_type: self.resource_type,
            parent_job_id: self.parent_job_id,
            is_parent: self.is_parent.unwrap_or_default(),
            composite_member_identifier: self.composite_member_identifier,
            number_of_child_jobs: self.number_of_child_jobs,
            child_jobs_in_state: self.child_jobs_in_state,
            resource_name: self.resource_name,
            message_category: self.message_category,
        }
    }
}
