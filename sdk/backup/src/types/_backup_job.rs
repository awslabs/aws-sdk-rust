// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains detailed information about a backup job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BackupJob {
    /// <p>The account ID that owns the backup job.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>Uniquely identifies a request to Backup to back up a resource.</p>
    pub backup_job_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created.</p>
    pub backup_vault_name: ::std::option::Option<::std::string::String>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub backup_vault_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of backup vault where the recovery point is stored. Valid values are <code>BACKUP_VAULT</code> for standard backup vaults and <code>LOGICALLY_AIR_GAPPED_BACKUP_VAULT</code> for logically air-gapped vaults.</p>
    pub vault_type: ::std::option::Option<::std::string::String>,
    /// <p>The lock state of the backup vault. For logically air-gapped vaults, this indicates whether the vault is locked in compliance mode. Valid values include <code>LOCKED</code> and <code>UNLOCKED</code>.</p>
    pub vault_lock_state: ::std::option::Option<::std::string::String>,
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub recovery_point_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the time period, in days, before a recovery point transitions to cold storage or is deleted.</p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the retention setting must be 90 days greater than the transition to cold after days setting. The transition to cold after days setting can't be changed after a backup has been transitioned to cold.</p>
    /// <p>Resource types that can transition to cold storage are listed in the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource">Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    /// <p>To remove the existing lifecycle and retention periods and keep your recovery points indefinitely, specify -1 for <code>MoveToColdStorageAfterDays</code> and <code>DeleteAfterDays</code>.</p>
    pub recovery_point_lifecycle: ::std::option::Option<crate::types::Lifecycle>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the backup. This can be a customer-managed key or an Amazon Web Services managed key, depending on the vault configuration.</p>
    pub encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>A boolean value indicating whether the backup is encrypted. All backups in Backup are encrypted, but this field indicates the encryption status for transparency.</p>
    pub is_encrypted: bool,
    /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the resource type.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The date and time a backup job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time a job to create a backup job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub completion_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current state of a backup job.</p>
    pub state: ::std::option::Option<crate::types::BackupJobState>,
    /// <p>A detailed message explaining the status of the job to back up a resource.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>Contains an estimated percentage complete of a job at the time the job status was queried.</p>
    pub percent_done: ::std::option::Option<::std::string::String>,
    /// <p>The size, in bytes, of a backup (recovery point).</p>
    /// <p>This value can render differently depending on the resource type as Backup pulls in data information from other Amazon Web Services services. For example, the value returned may show a value of <code>0</code>, which may differ from the anticipated value.</p>
    /// <p>The expected behavior for values by resource type are described as follows:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora, Amazon DocumentDB, and Amazon Neptune do not have this value populate from the operation <code>GetBackupJobStatus</code>.</p></li>
    /// <li>
    /// <p>For Amazon DynamoDB with advanced features, this value refers to the size of the recovery point (backup).</p></li>
    /// <li>
    /// <p>Amazon EC2 and Amazon EBS show volume size (provisioned storage) returned as part of this value. Amazon EBS does not return backup size information; snapshot size will have the same value as the original resource that was backed up.</p></li>
    /// <li>
    /// <p>For Amazon EFS, this value refers to the delta bytes transferred during a backup.</p></li>
    /// <li>
    /// <p>Amazon FSx does not populate this value from the operation <code>GetBackupJobStatus</code> for FSx file systems.</p></li>
    /// <li>
    /// <p>An Amazon RDS instance will show as <code>0</code>.</p></li>
    /// <li>
    /// <p>For virtual machines running VMware, this value is passed to Backup through an asynchronous workflow, which can mean this displayed value can under-represent the actual backup size.</p></li>
    /// </ul>
    pub backup_size_in_bytes: ::std::option::Option<i64>,
    /// <p>Specifies the IAM role ARN used to create the target recovery point. IAM roles other than the default role must include either <code>AWSBackup</code> or <code>AwsBackup</code> in the role name. For example, <code>arn:aws:iam::123456789012:role/AWSBackupRDSAccess</code>. Role names without those strings lack permissions to perform backup jobs.</p>
    pub iam_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Contains identifying information about the creation of a backup job, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan used to create it.</p>
    pub created_by: ::std::option::Option<crate::types::RecoveryPointCreator>,
    /// <p>The date and time a job to back up resources is expected to be completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>ExpectedCompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub expected_completion_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Specifies the time in Unix format and Coordinated Universal Time (UTC) when a backup job must be started before it is canceled. The value is calculated by adding the start window to the scheduled time. So if the scheduled time were 6:00 PM and the start window is 2 hours, the <code>StartBy</code> time would be 8:00 PM on the date specified. The value of <code>StartBy</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub start_by: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of Amazon Web Services resource to be backed up; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For Windows Volume Shadow Copy Service (VSS) backups, the only supported resource type is Amazon EC2.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The size in bytes transferred to a backup vault at the time that the job status was queried.</p>
    pub bytes_transferred: ::std::option::Option<i64>,
    /// <p>Specifies the backup option for a selected resource. This option is only available for Windows Volume Shadow Copy Service (VSS) backup jobs.</p>
    /// <p>Valid values: Set to <code>"WindowsVSS":"enabled"</code> to enable the <code>WindowsVSS</code> backup option and create a Windows VSS backup. Set to <code>"WindowsVSS":"disabled"</code> to create a regular backup. If you specify an invalid option, you get an <code>InvalidParameterValueException</code> exception.</p>
    pub backup_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Represents the type of backup for a backup job.</p>
    pub backup_type: ::std::option::Option<::std::string::String>,
    /// <p>This uniquely identifies a request to Backup to back up a resource. The return will be the parent (composite) job ID.</p>
    pub parent_job_id: ::std::option::Option<::std::string::String>,
    /// <p>This is a boolean value indicating this is a parent (composite) backup job.</p>
    pub is_parent: bool,
    /// <p>The non-unique name of the resource that belongs to the specified backup.</p>
    pub resource_name: ::std::option::Option<::std::string::String>,
    /// <p>The date on which the backup job was initiated.</p>
    pub initiation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>This parameter is the job count for the specified message category.</p>
    /// <p>Example strings may include <code>AccessDenied</code>, <code>SUCCESS</code>, <code>AGGREGATE_ALL</code>, and <code>INVALIDPARAMETERS</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub message_category: ::std::option::Option<::std::string::String>,
}
impl BackupJob {
    /// <p>The account ID that owns the backup job.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Uniquely identifies a request to Backup to back up a resource.</p>
    pub fn backup_job_id(&self) -> ::std::option::Option<&str> {
        self.backup_job_id.as_deref()
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created.</p>
    pub fn backup_vault_name(&self) -> ::std::option::Option<&str> {
        self.backup_vault_name.as_deref()
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn backup_vault_arn(&self) -> ::std::option::Option<&str> {
        self.backup_vault_arn.as_deref()
    }
    /// <p>The type of backup vault where the recovery point is stored. Valid values are <code>BACKUP_VAULT</code> for standard backup vaults and <code>LOGICALLY_AIR_GAPPED_BACKUP_VAULT</code> for logically air-gapped vaults.</p>
    pub fn vault_type(&self) -> ::std::option::Option<&str> {
        self.vault_type.as_deref()
    }
    /// <p>The lock state of the backup vault. For logically air-gapped vaults, this indicates whether the vault is locked in compliance mode. Valid values include <code>LOCKED</code> and <code>UNLOCKED</code>.</p>
    pub fn vault_lock_state(&self) -> ::std::option::Option<&str> {
        self.vault_lock_state.as_deref()
    }
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn recovery_point_arn(&self) -> ::std::option::Option<&str> {
        self.recovery_point_arn.as_deref()
    }
    /// <p>Specifies the time period, in days, before a recovery point transitions to cold storage or is deleted.</p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the retention setting must be 90 days greater than the transition to cold after days setting. The transition to cold after days setting can't be changed after a backup has been transitioned to cold.</p>
    /// <p>Resource types that can transition to cold storage are listed in the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource">Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    /// <p>To remove the existing lifecycle and retention periods and keep your recovery points indefinitely, specify -1 for <code>MoveToColdStorageAfterDays</code> and <code>DeleteAfterDays</code>.</p>
    pub fn recovery_point_lifecycle(&self) -> ::std::option::Option<&crate::types::Lifecycle> {
        self.recovery_point_lifecycle.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the backup. This can be a customer-managed key or an Amazon Web Services managed key, depending on the vault configuration.</p>
    pub fn encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
    /// <p>A boolean value indicating whether the backup is encrypted. All backups in Backup are encrypted, but this field indicates the encryption status for transparency.</p>
    pub fn is_encrypted(&self) -> bool {
        self.is_encrypted
    }
    /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the resource type.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The date and time a backup job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date and time a job to create a backup job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn completion_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completion_date.as_ref()
    }
    /// <p>The current state of a backup job.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::BackupJobState> {
        self.state.as_ref()
    }
    /// <p>A detailed message explaining the status of the job to back up a resource.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>Contains an estimated percentage complete of a job at the time the job status was queried.</p>
    pub fn percent_done(&self) -> ::std::option::Option<&str> {
        self.percent_done.as_deref()
    }
    /// <p>The size, in bytes, of a backup (recovery point).</p>
    /// <p>This value can render differently depending on the resource type as Backup pulls in data information from other Amazon Web Services services. For example, the value returned may show a value of <code>0</code>, which may differ from the anticipated value.</p>
    /// <p>The expected behavior for values by resource type are described as follows:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora, Amazon DocumentDB, and Amazon Neptune do not have this value populate from the operation <code>GetBackupJobStatus</code>.</p></li>
    /// <li>
    /// <p>For Amazon DynamoDB with advanced features, this value refers to the size of the recovery point (backup).</p></li>
    /// <li>
    /// <p>Amazon EC2 and Amazon EBS show volume size (provisioned storage) returned as part of this value. Amazon EBS does not return backup size information; snapshot size will have the same value as the original resource that was backed up.</p></li>
    /// <li>
    /// <p>For Amazon EFS, this value refers to the delta bytes transferred during a backup.</p></li>
    /// <li>
    /// <p>Amazon FSx does not populate this value from the operation <code>GetBackupJobStatus</code> for FSx file systems.</p></li>
    /// <li>
    /// <p>An Amazon RDS instance will show as <code>0</code>.</p></li>
    /// <li>
    /// <p>For virtual machines running VMware, this value is passed to Backup through an asynchronous workflow, which can mean this displayed value can under-represent the actual backup size.</p></li>
    /// </ul>
    pub fn backup_size_in_bytes(&self) -> ::std::option::Option<i64> {
        self.backup_size_in_bytes
    }
    /// <p>Specifies the IAM role ARN used to create the target recovery point. IAM roles other than the default role must include either <code>AWSBackup</code> or <code>AwsBackup</code> in the role name. For example, <code>arn:aws:iam::123456789012:role/AWSBackupRDSAccess</code>. Role names without those strings lack permissions to perform backup jobs.</p>
    pub fn iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>Contains identifying information about the creation of a backup job, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan used to create it.</p>
    pub fn created_by(&self) -> ::std::option::Option<&crate::types::RecoveryPointCreator> {
        self.created_by.as_ref()
    }
    /// <p>The date and time a job to back up resources is expected to be completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>ExpectedCompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn expected_completion_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expected_completion_date.as_ref()
    }
    /// <p>Specifies the time in Unix format and Coordinated Universal Time (UTC) when a backup job must be started before it is canceled. The value is calculated by adding the start window to the scheduled time. So if the scheduled time were 6:00 PM and the start window is 2 hours, the <code>StartBy</code> time would be 8:00 PM on the date specified. The value of <code>StartBy</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn start_by(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_by.as_ref()
    }
    /// <p>The type of Amazon Web Services resource to be backed up; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For Windows Volume Shadow Copy Service (VSS) backups, the only supported resource type is Amazon EC2.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The size in bytes transferred to a backup vault at the time that the job status was queried.</p>
    pub fn bytes_transferred(&self) -> ::std::option::Option<i64> {
        self.bytes_transferred
    }
    /// <p>Specifies the backup option for a selected resource. This option is only available for Windows Volume Shadow Copy Service (VSS) backup jobs.</p>
    /// <p>Valid values: Set to <code>"WindowsVSS":"enabled"</code> to enable the <code>WindowsVSS</code> backup option and create a Windows VSS backup. Set to <code>"WindowsVSS":"disabled"</code> to create a regular backup. If you specify an invalid option, you get an <code>InvalidParameterValueException</code> exception.</p>
    pub fn backup_options(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.backup_options.as_ref()
    }
    /// <p>Represents the type of backup for a backup job.</p>
    pub fn backup_type(&self) -> ::std::option::Option<&str> {
        self.backup_type.as_deref()
    }
    /// <p>This uniquely identifies a request to Backup to back up a resource. The return will be the parent (composite) job ID.</p>
    pub fn parent_job_id(&self) -> ::std::option::Option<&str> {
        self.parent_job_id.as_deref()
    }
    /// <p>This is a boolean value indicating this is a parent (composite) backup job.</p>
    pub fn is_parent(&self) -> bool {
        self.is_parent
    }
    /// <p>The non-unique name of the resource that belongs to the specified backup.</p>
    pub fn resource_name(&self) -> ::std::option::Option<&str> {
        self.resource_name.as_deref()
    }
    /// <p>The date on which the backup job was initiated.</p>
    pub fn initiation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.initiation_date.as_ref()
    }
    /// <p>This parameter is the job count for the specified message category.</p>
    /// <p>Example strings may include <code>AccessDenied</code>, <code>SUCCESS</code>, <code>AGGREGATE_ALL</code>, and <code>INVALIDPARAMETERS</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub fn message_category(&self) -> ::std::option::Option<&str> {
        self.message_category.as_deref()
    }
}
impl BackupJob {
    /// Creates a new builder-style object to manufacture [`BackupJob`](crate::types::BackupJob).
    pub fn builder() -> crate::types::builders::BackupJobBuilder {
        crate::types::builders::BackupJobBuilder::default()
    }
}

/// A builder for [`BackupJob`](crate::types::BackupJob).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BackupJobBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) backup_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) backup_vault_name: ::std::option::Option<::std::string::String>,
    pub(crate) backup_vault_arn: ::std::option::Option<::std::string::String>,
    pub(crate) vault_type: ::std::option::Option<::std::string::String>,
    pub(crate) vault_lock_state: ::std::option::Option<::std::string::String>,
    pub(crate) recovery_point_arn: ::std::option::Option<::std::string::String>,
    pub(crate) recovery_point_lifecycle: ::std::option::Option<crate::types::Lifecycle>,
    pub(crate) encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) is_encrypted: ::std::option::Option<bool>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completion_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) state: ::std::option::Option<crate::types::BackupJobState>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) percent_done: ::std::option::Option<::std::string::String>,
    pub(crate) backup_size_in_bytes: ::std::option::Option<i64>,
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<crate::types::RecoveryPointCreator>,
    pub(crate) expected_completion_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) start_by: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) bytes_transferred: ::std::option::Option<i64>,
    pub(crate) backup_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) backup_type: ::std::option::Option<::std::string::String>,
    pub(crate) parent_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) is_parent: ::std::option::Option<bool>,
    pub(crate) resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) initiation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) message_category: ::std::option::Option<::std::string::String>,
}
impl BackupJobBuilder {
    /// <p>The account ID that owns the backup job.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID that owns the backup job.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account ID that owns the backup job.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>Uniquely identifies a request to Backup to back up a resource.</p>
    pub fn backup_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Uniquely identifies a request to Backup to back up a resource.</p>
    pub fn set_backup_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_job_id = input;
        self
    }
    /// <p>Uniquely identifies a request to Backup to back up a resource.</p>
    pub fn get_backup_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_job_id
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created.</p>
    pub fn backup_vault_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_vault_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created.</p>
    pub fn set_backup_vault_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_vault_name = input;
        self
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created.</p>
    pub fn get_backup_vault_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_vault_name
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn backup_vault_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_vault_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn set_backup_vault_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_vault_arn = input;
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault</code>.</p>
    pub fn get_backup_vault_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_vault_arn
    }
    /// <p>The type of backup vault where the recovery point is stored. Valid values are <code>BACKUP_VAULT</code> for standard backup vaults and <code>LOGICALLY_AIR_GAPPED_BACKUP_VAULT</code> for logically air-gapped vaults.</p>
    pub fn vault_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vault_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of backup vault where the recovery point is stored. Valid values are <code>BACKUP_VAULT</code> for standard backup vaults and <code>LOGICALLY_AIR_GAPPED_BACKUP_VAULT</code> for logically air-gapped vaults.</p>
    pub fn set_vault_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vault_type = input;
        self
    }
    /// <p>The type of backup vault where the recovery point is stored. Valid values are <code>BACKUP_VAULT</code> for standard backup vaults and <code>LOGICALLY_AIR_GAPPED_BACKUP_VAULT</code> for logically air-gapped vaults.</p>
    pub fn get_vault_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.vault_type
    }
    /// <p>The lock state of the backup vault. For logically air-gapped vaults, this indicates whether the vault is locked in compliance mode. Valid values include <code>LOCKED</code> and <code>UNLOCKED</code>.</p>
    pub fn vault_lock_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vault_lock_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The lock state of the backup vault. For logically air-gapped vaults, this indicates whether the vault is locked in compliance mode. Valid values include <code>LOCKED</code> and <code>UNLOCKED</code>.</p>
    pub fn set_vault_lock_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vault_lock_state = input;
        self
    }
    /// <p>The lock state of the backup vault. For logically air-gapped vaults, this indicates whether the vault is locked in compliance mode. Valid values include <code>LOCKED</code> and <code>UNLOCKED</code>.</p>
    pub fn get_vault_lock_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.vault_lock_state
    }
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn recovery_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recovery_point_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn set_recovery_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recovery_point_arn = input;
        self
    }
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn get_recovery_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.recovery_point_arn
    }
    /// <p>Specifies the time period, in days, before a recovery point transitions to cold storage or is deleted.</p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the retention setting must be 90 days greater than the transition to cold after days setting. The transition to cold after days setting can't be changed after a backup has been transitioned to cold.</p>
    /// <p>Resource types that can transition to cold storage are listed in the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource">Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    /// <p>To remove the existing lifecycle and retention periods and keep your recovery points indefinitely, specify -1 for <code>MoveToColdStorageAfterDays</code> and <code>DeleteAfterDays</code>.</p>
    pub fn recovery_point_lifecycle(mut self, input: crate::types::Lifecycle) -> Self {
        self.recovery_point_lifecycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the time period, in days, before a recovery point transitions to cold storage or is deleted.</p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the retention setting must be 90 days greater than the transition to cold after days setting. The transition to cold after days setting can't be changed after a backup has been transitioned to cold.</p>
    /// <p>Resource types that can transition to cold storage are listed in the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource">Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    /// <p>To remove the existing lifecycle and retention periods and keep your recovery points indefinitely, specify -1 for <code>MoveToColdStorageAfterDays</code> and <code>DeleteAfterDays</code>.</p>
    pub fn set_recovery_point_lifecycle(mut self, input: ::std::option::Option<crate::types::Lifecycle>) -> Self {
        self.recovery_point_lifecycle = input;
        self
    }
    /// <p>Specifies the time period, in days, before a recovery point transitions to cold storage or is deleted.</p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the retention setting must be 90 days greater than the transition to cold after days setting. The transition to cold after days setting can't be changed after a backup has been transitioned to cold.</p>
    /// <p>Resource types that can transition to cold storage are listed in the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/backup-feature-availability.html#features-by-resource">Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    /// <p>To remove the existing lifecycle and retention periods and keep your recovery points indefinitely, specify -1 for <code>MoveToColdStorageAfterDays</code> and <code>DeleteAfterDays</code>.</p>
    pub fn get_recovery_point_lifecycle(&self) -> &::std::option::Option<crate::types::Lifecycle> {
        &self.recovery_point_lifecycle
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the backup. This can be a customer-managed key or an Amazon Web Services managed key, depending on the vault configuration.</p>
    pub fn encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the backup. This can be a customer-managed key or an Amazon Web Services managed key, depending on the vault configuration.</p>
    pub fn set_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the backup. This can be a customer-managed key or an Amazon Web Services managed key, depending on the vault configuration.</p>
    pub fn get_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key_arn
    }
    /// <p>A boolean value indicating whether the backup is encrypted. All backups in Backup are encrypted, but this field indicates the encryption status for transparency.</p>
    pub fn is_encrypted(mut self, input: bool) -> Self {
        self.is_encrypted = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean value indicating whether the backup is encrypted. All backups in Backup are encrypted, but this field indicates the encryption status for transparency.</p>
    pub fn set_is_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_encrypted = input;
        self
    }
    /// <p>A boolean value indicating whether the backup is encrypted. All backups in Backup are encrypted, but this field indicates the encryption status for transparency.</p>
    pub fn get_is_encrypted(&self) -> &::std::option::Option<bool> {
        &self.is_encrypted
    }
    /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the resource type.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the resource type.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the resource type.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The date and time a backup job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time a backup job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date and time a backup job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The date and time a job to create a backup job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn completion_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completion_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time a job to create a backup job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_completion_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completion_date = input;
        self
    }
    /// <p>The date and time a job to create a backup job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_completion_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completion_date
    }
    /// <p>The current state of a backup job.</p>
    pub fn state(mut self, input: crate::types::BackupJobState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of a backup job.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::BackupJobState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of a backup job.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::BackupJobState> {
        &self.state
    }
    /// <p>A detailed message explaining the status of the job to back up a resource.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed message explaining the status of the job to back up a resource.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A detailed message explaining the status of the job to back up a resource.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>Contains an estimated percentage complete of a job at the time the job status was queried.</p>
    pub fn percent_done(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.percent_done = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains an estimated percentage complete of a job at the time the job status was queried.</p>
    pub fn set_percent_done(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.percent_done = input;
        self
    }
    /// <p>Contains an estimated percentage complete of a job at the time the job status was queried.</p>
    pub fn get_percent_done(&self) -> &::std::option::Option<::std::string::String> {
        &self.percent_done
    }
    /// <p>The size, in bytes, of a backup (recovery point).</p>
    /// <p>This value can render differently depending on the resource type as Backup pulls in data information from other Amazon Web Services services. For example, the value returned may show a value of <code>0</code>, which may differ from the anticipated value.</p>
    /// <p>The expected behavior for values by resource type are described as follows:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora, Amazon DocumentDB, and Amazon Neptune do not have this value populate from the operation <code>GetBackupJobStatus</code>.</p></li>
    /// <li>
    /// <p>For Amazon DynamoDB with advanced features, this value refers to the size of the recovery point (backup).</p></li>
    /// <li>
    /// <p>Amazon EC2 and Amazon EBS show volume size (provisioned storage) returned as part of this value. Amazon EBS does not return backup size information; snapshot size will have the same value as the original resource that was backed up.</p></li>
    /// <li>
    /// <p>For Amazon EFS, this value refers to the delta bytes transferred during a backup.</p></li>
    /// <li>
    /// <p>Amazon FSx does not populate this value from the operation <code>GetBackupJobStatus</code> for FSx file systems.</p></li>
    /// <li>
    /// <p>An Amazon RDS instance will show as <code>0</code>.</p></li>
    /// <li>
    /// <p>For virtual machines running VMware, this value is passed to Backup through an asynchronous workflow, which can mean this displayed value can under-represent the actual backup size.</p></li>
    /// </ul>
    pub fn backup_size_in_bytes(mut self, input: i64) -> Self {
        self.backup_size_in_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size, in bytes, of a backup (recovery point).</p>
    /// <p>This value can render differently depending on the resource type as Backup pulls in data information from other Amazon Web Services services. For example, the value returned may show a value of <code>0</code>, which may differ from the anticipated value.</p>
    /// <p>The expected behavior for values by resource type are described as follows:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora, Amazon DocumentDB, and Amazon Neptune do not have this value populate from the operation <code>GetBackupJobStatus</code>.</p></li>
    /// <li>
    /// <p>For Amazon DynamoDB with advanced features, this value refers to the size of the recovery point (backup).</p></li>
    /// <li>
    /// <p>Amazon EC2 and Amazon EBS show volume size (provisioned storage) returned as part of this value. Amazon EBS does not return backup size information; snapshot size will have the same value as the original resource that was backed up.</p></li>
    /// <li>
    /// <p>For Amazon EFS, this value refers to the delta bytes transferred during a backup.</p></li>
    /// <li>
    /// <p>Amazon FSx does not populate this value from the operation <code>GetBackupJobStatus</code> for FSx file systems.</p></li>
    /// <li>
    /// <p>An Amazon RDS instance will show as <code>0</code>.</p></li>
    /// <li>
    /// <p>For virtual machines running VMware, this value is passed to Backup through an asynchronous workflow, which can mean this displayed value can under-represent the actual backup size.</p></li>
    /// </ul>
    pub fn set_backup_size_in_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.backup_size_in_bytes = input;
        self
    }
    /// <p>The size, in bytes, of a backup (recovery point).</p>
    /// <p>This value can render differently depending on the resource type as Backup pulls in data information from other Amazon Web Services services. For example, the value returned may show a value of <code>0</code>, which may differ from the anticipated value.</p>
    /// <p>The expected behavior for values by resource type are described as follows:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora, Amazon DocumentDB, and Amazon Neptune do not have this value populate from the operation <code>GetBackupJobStatus</code>.</p></li>
    /// <li>
    /// <p>For Amazon DynamoDB with advanced features, this value refers to the size of the recovery point (backup).</p></li>
    /// <li>
    /// <p>Amazon EC2 and Amazon EBS show volume size (provisioned storage) returned as part of this value. Amazon EBS does not return backup size information; snapshot size will have the same value as the original resource that was backed up.</p></li>
    /// <li>
    /// <p>For Amazon EFS, this value refers to the delta bytes transferred during a backup.</p></li>
    /// <li>
    /// <p>Amazon FSx does not populate this value from the operation <code>GetBackupJobStatus</code> for FSx file systems.</p></li>
    /// <li>
    /// <p>An Amazon RDS instance will show as <code>0</code>.</p></li>
    /// <li>
    /// <p>For virtual machines running VMware, this value is passed to Backup through an asynchronous workflow, which can mean this displayed value can under-represent the actual backup size.</p></li>
    /// </ul>
    pub fn get_backup_size_in_bytes(&self) -> &::std::option::Option<i64> {
        &self.backup_size_in_bytes
    }
    /// <p>Specifies the IAM role ARN used to create the target recovery point. IAM roles other than the default role must include either <code>AWSBackup</code> or <code>AwsBackup</code> in the role name. For example, <code>arn:aws:iam::123456789012:role/AWSBackupRDSAccess</code>. Role names without those strings lack permissions to perform backup jobs.</p>
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the IAM role ARN used to create the target recovery point. IAM roles other than the default role must include either <code>AWSBackup</code> or <code>AwsBackup</code> in the role name. For example, <code>arn:aws:iam::123456789012:role/AWSBackupRDSAccess</code>. Role names without those strings lack permissions to perform backup jobs.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>Specifies the IAM role ARN used to create the target recovery point. IAM roles other than the default role must include either <code>AWSBackup</code> or <code>AwsBackup</code> in the role name. For example, <code>arn:aws:iam::123456789012:role/AWSBackupRDSAccess</code>. Role names without those strings lack permissions to perform backup jobs.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// <p>Contains identifying information about the creation of a backup job, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan used to create it.</p>
    pub fn created_by(mut self, input: crate::types::RecoveryPointCreator) -> Self {
        self.created_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains identifying information about the creation of a backup job, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan used to create it.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<crate::types::RecoveryPointCreator>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>Contains identifying information about the creation of a backup job, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan used to create it.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<crate::types::RecoveryPointCreator> {
        &self.created_by
    }
    /// <p>The date and time a job to back up resources is expected to be completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>ExpectedCompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn expected_completion_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expected_completion_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time a job to back up resources is expected to be completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>ExpectedCompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_expected_completion_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expected_completion_date = input;
        self
    }
    /// <p>The date and time a job to back up resources is expected to be completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>ExpectedCompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_expected_completion_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expected_completion_date
    }
    /// <p>Specifies the time in Unix format and Coordinated Universal Time (UTC) when a backup job must be started before it is canceled. The value is calculated by adding the start window to the scheduled time. So if the scheduled time were 6:00 PM and the start window is 2 hours, the <code>StartBy</code> time would be 8:00 PM on the date specified. The value of <code>StartBy</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn start_by(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the time in Unix format and Coordinated Universal Time (UTC) when a backup job must be started before it is canceled. The value is calculated by adding the start window to the scheduled time. So if the scheduled time were 6:00 PM and the start window is 2 hours, the <code>StartBy</code> time would be 8:00 PM on the date specified. The value of <code>StartBy</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_start_by(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_by = input;
        self
    }
    /// <p>Specifies the time in Unix format and Coordinated Universal Time (UTC) when a backup job must be started before it is canceled. The value is calculated by adding the start window to the scheduled time. So if the scheduled time were 6:00 PM and the start window is 2 hours, the <code>StartBy</code> time would be 8:00 PM on the date specified. The value of <code>StartBy</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_start_by(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_by
    }
    /// <p>The type of Amazon Web Services resource to be backed up; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For Windows Volume Shadow Copy Service (VSS) backups, the only supported resource type is Amazon EC2.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of Amazon Web Services resource to be backed up; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For Windows Volume Shadow Copy Service (VSS) backups, the only supported resource type is Amazon EC2.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of Amazon Web Services resource to be backed up; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For Windows Volume Shadow Copy Service (VSS) backups, the only supported resource type is Amazon EC2.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The size in bytes transferred to a backup vault at the time that the job status was queried.</p>
    pub fn bytes_transferred(mut self, input: i64) -> Self {
        self.bytes_transferred = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size in bytes transferred to a backup vault at the time that the job status was queried.</p>
    pub fn set_bytes_transferred(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_transferred = input;
        self
    }
    /// <p>The size in bytes transferred to a backup vault at the time that the job status was queried.</p>
    pub fn get_bytes_transferred(&self) -> &::std::option::Option<i64> {
        &self.bytes_transferred
    }
    /// Adds a key-value pair to `backup_options`.
    ///
    /// To override the contents of this collection use [`set_backup_options`](Self::set_backup_options).
    ///
    /// <p>Specifies the backup option for a selected resource. This option is only available for Windows Volume Shadow Copy Service (VSS) backup jobs.</p>
    /// <p>Valid values: Set to <code>"WindowsVSS":"enabled"</code> to enable the <code>WindowsVSS</code> backup option and create a Windows VSS backup. Set to <code>"WindowsVSS":"disabled"</code> to create a regular backup. If you specify an invalid option, you get an <code>InvalidParameterValueException</code> exception.</p>
    pub fn backup_options(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.backup_options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.backup_options = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Specifies the backup option for a selected resource. This option is only available for Windows Volume Shadow Copy Service (VSS) backup jobs.</p>
    /// <p>Valid values: Set to <code>"WindowsVSS":"enabled"</code> to enable the <code>WindowsVSS</code> backup option and create a Windows VSS backup. Set to <code>"WindowsVSS":"disabled"</code> to create a regular backup. If you specify an invalid option, you get an <code>InvalidParameterValueException</code> exception.</p>
    pub fn set_backup_options(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.backup_options = input;
        self
    }
    /// <p>Specifies the backup option for a selected resource. This option is only available for Windows Volume Shadow Copy Service (VSS) backup jobs.</p>
    /// <p>Valid values: Set to <code>"WindowsVSS":"enabled"</code> to enable the <code>WindowsVSS</code> backup option and create a Windows VSS backup. Set to <code>"WindowsVSS":"disabled"</code> to create a regular backup. If you specify an invalid option, you get an <code>InvalidParameterValueException</code> exception.</p>
    pub fn get_backup_options(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.backup_options
    }
    /// <p>Represents the type of backup for a backup job.</p>
    pub fn backup_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Represents the type of backup for a backup job.</p>
    pub fn set_backup_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_type = input;
        self
    }
    /// <p>Represents the type of backup for a backup job.</p>
    pub fn get_backup_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_type
    }
    /// <p>This uniquely identifies a request to Backup to back up a resource. The return will be the parent (composite) job ID.</p>
    pub fn parent_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This uniquely identifies a request to Backup to back up a resource. The return will be the parent (composite) job ID.</p>
    pub fn set_parent_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_job_id = input;
        self
    }
    /// <p>This uniquely identifies a request to Backup to back up a resource. The return will be the parent (composite) job ID.</p>
    pub fn get_parent_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_job_id
    }
    /// <p>This is a boolean value indicating this is a parent (composite) backup job.</p>
    pub fn is_parent(mut self, input: bool) -> Self {
        self.is_parent = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is a boolean value indicating this is a parent (composite) backup job.</p>
    pub fn set_is_parent(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_parent = input;
        self
    }
    /// <p>This is a boolean value indicating this is a parent (composite) backup job.</p>
    pub fn get_is_parent(&self) -> &::std::option::Option<bool> {
        &self.is_parent
    }
    /// <p>The non-unique name of the resource that belongs to the specified backup.</p>
    pub fn resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The non-unique name of the resource that belongs to the specified backup.</p>
    pub fn set_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_name = input;
        self
    }
    /// <p>The non-unique name of the resource that belongs to the specified backup.</p>
    pub fn get_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_name
    }
    /// <p>The date on which the backup job was initiated.</p>
    pub fn initiation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.initiation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date on which the backup job was initiated.</p>
    pub fn set_initiation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.initiation_date = input;
        self
    }
    /// <p>The date on which the backup job was initiated.</p>
    pub fn get_initiation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.initiation_date
    }
    /// <p>This parameter is the job count for the specified message category.</p>
    /// <p>Example strings may include <code>AccessDenied</code>, <code>SUCCESS</code>, <code>AGGREGATE_ALL</code>, and <code>INVALIDPARAMETERS</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub fn message_category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This parameter is the job count for the specified message category.</p>
    /// <p>Example strings may include <code>AccessDenied</code>, <code>SUCCESS</code>, <code>AGGREGATE_ALL</code>, and <code>INVALIDPARAMETERS</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub fn set_message_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_category = input;
        self
    }
    /// <p>This parameter is the job count for the specified message category.</p>
    /// <p>Example strings may include <code>AccessDenied</code>, <code>SUCCESS</code>, <code>AGGREGATE_ALL</code>, and <code>INVALIDPARAMETERS</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub fn get_message_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_category
    }
    /// Consumes the builder and constructs a [`BackupJob`](crate::types::BackupJob).
    pub fn build(self) -> crate::types::BackupJob {
        crate::types::BackupJob {
            account_id: self.account_id,
            backup_job_id: self.backup_job_id,
            backup_vault_name: self.backup_vault_name,
            backup_vault_arn: self.backup_vault_arn,
            vault_type: self.vault_type,
            vault_lock_state: self.vault_lock_state,
            recovery_point_arn: self.recovery_point_arn,
            recovery_point_lifecycle: self.recovery_point_lifecycle,
            encryption_key_arn: self.encryption_key_arn,
            is_encrypted: self.is_encrypted.unwrap_or_default(),
            resource_arn: self.resource_arn,
            creation_date: self.creation_date,
            completion_date: self.completion_date,
            state: self.state,
            status_message: self.status_message,
            percent_done: self.percent_done,
            backup_size_in_bytes: self.backup_size_in_bytes,
            iam_role_arn: self.iam_role_arn,
            created_by: self.created_by,
            expected_completion_date: self.expected_completion_date,
            start_by: self.start_by,
            resource_type: self.resource_type,
            bytes_transferred: self.bytes_transferred,
            backup_options: self.backup_options,
            backup_type: self.backup_type,
            parent_job_id: self.parent_job_id,
            is_parent: self.is_parent.unwrap_or_default(),
            resource_name: self.resource_name,
            initiation_date: self.initiation_date,
            message_category: self.message_category,
        }
    }
}
