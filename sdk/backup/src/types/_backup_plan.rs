// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an optional backup plan display name and an array of <code>BackupRule</code> objects, each of which specifies a backup rule. Each rule in a backup plan is a separate scheduled task and can back up a different selection of Amazon Web Services resources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BackupPlan {
    /// <p>The display name of a backup plan. Must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    pub backup_plan_name: ::std::string::String,
    /// <p>An array of <code>BackupRule</code> objects, each of which specifies a scheduled task that is used to back up a selection of resources. </p>
    pub rules: ::std::vec::Vec<crate::types::BackupRule>,
    /// <p>Contains a list of <code>BackupOptions</code> for each resource type.</p>
    pub advanced_backup_settings: ::std::option::Option<::std::vec::Vec<crate::types::AdvancedBackupSetting>>,
}
impl BackupPlan {
    /// <p>The display name of a backup plan. Must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    pub fn backup_plan_name(&self) -> &str {
        use std::ops::Deref;
        self.backup_plan_name.deref()
    }
    /// <p>An array of <code>BackupRule</code> objects, each of which specifies a scheduled task that is used to back up a selection of resources. </p>
    pub fn rules(&self) -> &[crate::types::BackupRule] {
        use std::ops::Deref;
        self.rules.deref()
    }
    /// <p>Contains a list of <code>BackupOptions</code> for each resource type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.advanced_backup_settings.is_none()`.
    pub fn advanced_backup_settings(&self) -> &[crate::types::AdvancedBackupSetting] {
        self.advanced_backup_settings.as_deref().unwrap_or_default()
    }
}
impl BackupPlan {
    /// Creates a new builder-style object to manufacture [`BackupPlan`](crate::types::BackupPlan).
    pub fn builder() -> crate::types::builders::BackupPlanBuilder {
        crate::types::builders::BackupPlanBuilder::default()
    }
}

/// A builder for [`BackupPlan`](crate::types::BackupPlan).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BackupPlanBuilder {
    pub(crate) backup_plan_name: ::std::option::Option<::std::string::String>,
    pub(crate) rules: ::std::option::Option<::std::vec::Vec<crate::types::BackupRule>>,
    pub(crate) advanced_backup_settings: ::std::option::Option<::std::vec::Vec<crate::types::AdvancedBackupSetting>>,
}
impl BackupPlanBuilder {
    /// <p>The display name of a backup plan. Must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    /// This field is required.
    pub fn backup_plan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_plan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of a backup plan. Must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    pub fn set_backup_plan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_plan_name = input;
        self
    }
    /// <p>The display name of a backup plan. Must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    pub fn get_backup_plan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_plan_name
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>An array of <code>BackupRule</code> objects, each of which specifies a scheduled task that is used to back up a selection of resources. </p>
    pub fn rules(mut self, input: crate::types::BackupRule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>BackupRule</code> objects, each of which specifies a scheduled task that is used to back up a selection of resources. </p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BackupRule>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>An array of <code>BackupRule</code> objects, each of which specifies a scheduled task that is used to back up a selection of resources. </p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BackupRule>> {
        &self.rules
    }
    /// Appends an item to `advanced_backup_settings`.
    ///
    /// To override the contents of this collection use [`set_advanced_backup_settings`](Self::set_advanced_backup_settings).
    ///
    /// <p>Contains a list of <code>BackupOptions</code> for each resource type.</p>
    pub fn advanced_backup_settings(mut self, input: crate::types::AdvancedBackupSetting) -> Self {
        let mut v = self.advanced_backup_settings.unwrap_or_default();
        v.push(input);
        self.advanced_backup_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains a list of <code>BackupOptions</code> for each resource type.</p>
    pub fn set_advanced_backup_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AdvancedBackupSetting>>) -> Self {
        self.advanced_backup_settings = input;
        self
    }
    /// <p>Contains a list of <code>BackupOptions</code> for each resource type.</p>
    pub fn get_advanced_backup_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdvancedBackupSetting>> {
        &self.advanced_backup_settings
    }
    /// Consumes the builder and constructs a [`BackupPlan`](crate::types::BackupPlan).
    /// This method will fail if any of the following fields are not set:
    /// - [`backup_plan_name`](crate::types::builders::BackupPlanBuilder::backup_plan_name)
    /// - [`rules`](crate::types::builders::BackupPlanBuilder::rules)
    pub fn build(self) -> ::std::result::Result<crate::types::BackupPlan, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BackupPlan {
            backup_plan_name: self.backup_plan_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "backup_plan_name",
                    "backup_plan_name was not specified but it is required when building BackupPlan",
                )
            })?,
            rules: self.rules.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rules",
                    "rules was not specified but it is required when building BackupPlan",
                )
            })?,
            advanced_backup_settings: self.advanced_backup_settings,
        })
    }
}
