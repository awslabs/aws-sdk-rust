// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Includes information about tags you define to assign tagged resources to a backup plan.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConditionParameter {
    /// <p>The key in a key-value pair. For example, in the tag <code>Department: Accounting</code>, <code>Department</code> is the key.</p>
    #[doc(hidden)]
    pub condition_key: std::option::Option<std::string::String>,
    /// <p>The value in a key-value pair. For example, in the tag <code>Department: Accounting</code>, <code>Accounting</code> is the value.</p>
    #[doc(hidden)]
    pub condition_value: std::option::Option<std::string::String>,
}
impl ConditionParameter {
    /// <p>The key in a key-value pair. For example, in the tag <code>Department: Accounting</code>, <code>Department</code> is the key.</p>
    pub fn condition_key(&self) -> std::option::Option<&str> {
        self.condition_key.as_deref()
    }
    /// <p>The value in a key-value pair. For example, in the tag <code>Department: Accounting</code>, <code>Accounting</code> is the value.</p>
    pub fn condition_value(&self) -> std::option::Option<&str> {
        self.condition_value.as_deref()
    }
}
impl ConditionParameter {
    /// Creates a new builder-style object to manufacture [`ConditionParameter`](crate::types::ConditionParameter).
    pub fn builder() -> crate::types::builders::ConditionParameterBuilder {
        crate::types::builders::ConditionParameterBuilder::default()
    }
}

/// A builder for [`ConditionParameter`](crate::types::ConditionParameter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConditionParameterBuilder {
    pub(crate) condition_key: std::option::Option<std::string::String>,
    pub(crate) condition_value: std::option::Option<std::string::String>,
}
impl ConditionParameterBuilder {
    /// <p>The key in a key-value pair. For example, in the tag <code>Department: Accounting</code>, <code>Department</code> is the key.</p>
    pub fn condition_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.condition_key = Some(input.into());
        self
    }
    /// <p>The key in a key-value pair. For example, in the tag <code>Department: Accounting</code>, <code>Department</code> is the key.</p>
    pub fn set_condition_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.condition_key = input;
        self
    }
    /// <p>The value in a key-value pair. For example, in the tag <code>Department: Accounting</code>, <code>Accounting</code> is the value.</p>
    pub fn condition_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.condition_value = Some(input.into());
        self
    }
    /// <p>The value in a key-value pair. For example, in the tag <code>Department: Accounting</code>, <code>Accounting</code> is the value.</p>
    pub fn set_condition_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.condition_value = input;
        self
    }
    /// Consumes the builder and constructs a [`ConditionParameter`](crate::types::ConditionParameter).
    pub fn build(self) -> crate::types::ConditionParameter {
        crate::types::ConditionParameter {
            condition_key: self.condition_key,
            condition_value: self.condition_value,
        }
    }
}
