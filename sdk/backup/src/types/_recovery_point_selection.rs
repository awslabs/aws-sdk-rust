// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This specifies criteria to assign a set of resources, such as resource types or backup vaults.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecoveryPointSelection {
    /// <p>These are the names of the vaults in which the selected recovery points are contained.</p>
    pub vault_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>These are the resources included in the resource selection (including type of resources and vaults).</p>
    pub resource_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>This is a resource filter containing FromDate: DateTime and ToDate: DateTime. Both values are required. Future DateTime values are not permitted.</p>
    /// <p>The date and time are in Unix format and Coordinated Universal Time (UTC), and it is accurate to milliseconds ((milliseconds are optional). For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub date_range: ::std::option::Option<crate::types::DateRange>,
}
impl RecoveryPointSelection {
    /// <p>These are the names of the vaults in which the selected recovery points are contained.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vault_names.is_none()`.
    pub fn vault_names(&self) -> &[::std::string::String] {
        self.vault_names.as_deref().unwrap_or_default()
    }
    /// <p>These are the resources included in the resource selection (including type of resources and vaults).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_identifiers.is_none()`.
    pub fn resource_identifiers(&self) -> &[::std::string::String] {
        self.resource_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>This is a resource filter containing FromDate: DateTime and ToDate: DateTime. Both values are required. Future DateTime values are not permitted.</p>
    /// <p>The date and time are in Unix format and Coordinated Universal Time (UTC), and it is accurate to milliseconds ((milliseconds are optional). For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn date_range(&self) -> ::std::option::Option<&crate::types::DateRange> {
        self.date_range.as_ref()
    }
}
impl RecoveryPointSelection {
    /// Creates a new builder-style object to manufacture [`RecoveryPointSelection`](crate::types::RecoveryPointSelection).
    pub fn builder() -> crate::types::builders::RecoveryPointSelectionBuilder {
        crate::types::builders::RecoveryPointSelectionBuilder::default()
    }
}

/// A builder for [`RecoveryPointSelection`](crate::types::RecoveryPointSelection).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecoveryPointSelectionBuilder {
    pub(crate) vault_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) resource_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) date_range: ::std::option::Option<crate::types::DateRange>,
}
impl RecoveryPointSelectionBuilder {
    /// Appends an item to `vault_names`.
    ///
    /// To override the contents of this collection use [`set_vault_names`](Self::set_vault_names).
    ///
    /// <p>These are the names of the vaults in which the selected recovery points are contained.</p>
    pub fn vault_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.vault_names.unwrap_or_default();
        v.push(input.into());
        self.vault_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>These are the names of the vaults in which the selected recovery points are contained.</p>
    pub fn set_vault_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.vault_names = input;
        self
    }
    /// <p>These are the names of the vaults in which the selected recovery points are contained.</p>
    pub fn get_vault_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.vault_names
    }
    /// Appends an item to `resource_identifiers`.
    ///
    /// To override the contents of this collection use [`set_resource_identifiers`](Self::set_resource_identifiers).
    ///
    /// <p>These are the resources included in the resource selection (including type of resources and vaults).</p>
    pub fn resource_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resource_identifiers.unwrap_or_default();
        v.push(input.into());
        self.resource_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>These are the resources included in the resource selection (including type of resources and vaults).</p>
    pub fn set_resource_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resource_identifiers = input;
        self
    }
    /// <p>These are the resources included in the resource selection (including type of resources and vaults).</p>
    pub fn get_resource_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resource_identifiers
    }
    /// <p>This is a resource filter containing FromDate: DateTime and ToDate: DateTime. Both values are required. Future DateTime values are not permitted.</p>
    /// <p>The date and time are in Unix format and Coordinated Universal Time (UTC), and it is accurate to milliseconds ((milliseconds are optional). For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn date_range(mut self, input: crate::types::DateRange) -> Self {
        self.date_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is a resource filter containing FromDate: DateTime and ToDate: DateTime. Both values are required. Future DateTime values are not permitted.</p>
    /// <p>The date and time are in Unix format and Coordinated Universal Time (UTC), and it is accurate to milliseconds ((milliseconds are optional). For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_date_range(mut self, input: ::std::option::Option<crate::types::DateRange>) -> Self {
        self.date_range = input;
        self
    }
    /// <p>This is a resource filter containing FromDate: DateTime and ToDate: DateTime. Both values are required. Future DateTime values are not permitted.</p>
    /// <p>The date and time are in Unix format and Coordinated Universal Time (UTC), and it is accurate to milliseconds ((milliseconds are optional). For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_date_range(&self) -> &::std::option::Option<crate::types::DateRange> {
        &self.date_range
    }
    /// Consumes the builder and constructs a [`RecoveryPointSelection`](crate::types::RecoveryPointSelection).
    pub fn build(self) -> crate::types::RecoveryPointSelection {
        crate::types::RecoveryPointSelection {
            vault_names: self.vault_names,
            resource_identifiers: self.resource_identifiers,
            date_range: self.date_range,
        }
    }
}
