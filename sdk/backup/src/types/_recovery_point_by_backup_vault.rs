// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains detailed information about the recovery points stored in a backup vault.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecoveryPointByBackupVault {
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    #[doc(hidden)]
    pub recovery_point_arn: std::option::Option<std::string::String>,
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p>
    #[doc(hidden)]
    pub backup_vault_name: std::option::Option<std::string::String>,
    /// <p>An ARN that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    #[doc(hidden)]
    pub backup_vault_arn: std::option::Option<std::string::String>,
    /// <p>The backup vault where the recovery point was originally copied from. If the recovery point is restored to the same account this value will be <code>null</code>.</p>
    #[doc(hidden)]
    pub source_backup_vault_arn: std::option::Option<std::string::String>,
    /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the resource type.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The type of Amazon Web Services resource saved as a recovery point; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For Windows Volume Shadow Copy Service (VSS) backups, the only supported resource type is Amazon EC2.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>Contains identifying information about the creation of a recovery point, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan that is used to create it.</p>
    #[doc(hidden)]
    pub created_by: std::option::Option<crate::types::RecoveryPointCreator>,
    /// <p>Specifies the IAM role ARN used to create the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    #[doc(hidden)]
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>A status code specifying the state of the recovery point.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::RecoveryPointStatus>,
    /// <p>A message explaining the reason of the recovery point deletion failure.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The date and time a recovery point is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time a job to restore a recovery point is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    #[doc(hidden)]
    pub completion_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The size, in bytes, of a backup.</p>
    #[doc(hidden)]
    pub backup_size_in_bytes: std::option::Option<i64>,
    /// <p>A <code>CalculatedLifecycle</code> object containing <code>DeleteAt</code> and <code>MoveToColdStorageAt</code> timestamps.</p>
    #[doc(hidden)]
    pub calculated_lifecycle: std::option::Option<crate::types::CalculatedLifecycle>,
    /// <p>The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. Backup transitions and expires backups automatically according to the lifecycle that you define. </p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold. </p>
    /// <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    #[doc(hidden)]
    pub lifecycle: std::option::Option<crate::types::Lifecycle>,
    /// <p>The server-side encryption key that is used to protect your backups; for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    #[doc(hidden)]
    pub encryption_key_arn: std::option::Option<std::string::String>,
    /// <p>A Boolean value that is returned as <code>TRUE</code> if the specified recovery point is encrypted, or <code>FALSE</code> if the recovery point is not encrypted.</p>
    #[doc(hidden)]
    pub is_encrypted: bool,
    /// <p>The date and time a recovery point was last restored, in Unix format and Coordinated Universal Time (UTC). The value of <code>LastRestoreTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    #[doc(hidden)]
    pub last_restore_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>This is the Amazon Resource Name (ARN) of the parent (composite) recovery point.</p>
    #[doc(hidden)]
    pub parent_recovery_point_arn: std::option::Option<std::string::String>,
    /// <p>This is the identifier of a resource within a composite group, such as nested (child) recovery point belonging to a composite (parent) stack. The ID is transferred from the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html#resources-section-structure-syntax"> logical ID</a> within a stack.</p>
    #[doc(hidden)]
    pub composite_member_identifier: std::option::Option<std::string::String>,
    /// <p>This is a boolean value indicating this is a parent (composite) recovery point.</p>
    #[doc(hidden)]
    pub is_parent: bool,
}
impl RecoveryPointByBackupVault {
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn recovery_point_arn(&self) -> std::option::Option<&str> {
        self.recovery_point_arn.as_deref()
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p>
    pub fn backup_vault_name(&self) -> std::option::Option<&str> {
        self.backup_vault_name.as_deref()
    }
    /// <p>An ARN that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    pub fn backup_vault_arn(&self) -> std::option::Option<&str> {
        self.backup_vault_arn.as_deref()
    }
    /// <p>The backup vault where the recovery point was originally copied from. If the recovery point is restored to the same account this value will be <code>null</code>.</p>
    pub fn source_backup_vault_arn(&self) -> std::option::Option<&str> {
        self.source_backup_vault_arn.as_deref()
    }
    /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the resource type.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The type of Amazon Web Services resource saved as a recovery point; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For Windows Volume Shadow Copy Service (VSS) backups, the only supported resource type is Amazon EC2.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>Contains identifying information about the creation of a recovery point, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan that is used to create it.</p>
    pub fn created_by(&self) -> std::option::Option<&crate::types::RecoveryPointCreator> {
        self.created_by.as_ref()
    }
    /// <p>Specifies the IAM role ARN used to create the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub fn iam_role_arn(&self) -> std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>A status code specifying the state of the recovery point.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::RecoveryPointStatus> {
        self.status.as_ref()
    }
    /// <p>A message explaining the reason of the recovery point deletion failure.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The date and time a recovery point is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date and time a job to restore a recovery point is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn completion_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completion_date.as_ref()
    }
    /// <p>The size, in bytes, of a backup.</p>
    pub fn backup_size_in_bytes(&self) -> std::option::Option<i64> {
        self.backup_size_in_bytes
    }
    /// <p>A <code>CalculatedLifecycle</code> object containing <code>DeleteAt</code> and <code>MoveToColdStorageAt</code> timestamps.</p>
    pub fn calculated_lifecycle(&self) -> std::option::Option<&crate::types::CalculatedLifecycle> {
        self.calculated_lifecycle.as_ref()
    }
    /// <p>The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. Backup transitions and expires backups automatically according to the lifecycle that you define. </p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold. </p>
    /// <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    pub fn lifecycle(&self) -> std::option::Option<&crate::types::Lifecycle> {
        self.lifecycle.as_ref()
    }
    /// <p>The server-side encryption key that is used to protect your backups; for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub fn encryption_key_arn(&self) -> std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
    /// <p>A Boolean value that is returned as <code>TRUE</code> if the specified recovery point is encrypted, or <code>FALSE</code> if the recovery point is not encrypted.</p>
    pub fn is_encrypted(&self) -> bool {
        self.is_encrypted
    }
    /// <p>The date and time a recovery point was last restored, in Unix format and Coordinated Universal Time (UTC). The value of <code>LastRestoreTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn last_restore_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_restore_time.as_ref()
    }
    /// <p>This is the Amazon Resource Name (ARN) of the parent (composite) recovery point.</p>
    pub fn parent_recovery_point_arn(&self) -> std::option::Option<&str> {
        self.parent_recovery_point_arn.as_deref()
    }
    /// <p>This is the identifier of a resource within a composite group, such as nested (child) recovery point belonging to a composite (parent) stack. The ID is transferred from the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html#resources-section-structure-syntax"> logical ID</a> within a stack.</p>
    pub fn composite_member_identifier(&self) -> std::option::Option<&str> {
        self.composite_member_identifier.as_deref()
    }
    /// <p>This is a boolean value indicating this is a parent (composite) recovery point.</p>
    pub fn is_parent(&self) -> bool {
        self.is_parent
    }
}
impl RecoveryPointByBackupVault {
    /// Creates a new builder-style object to manufacture [`RecoveryPointByBackupVault`](crate::types::RecoveryPointByBackupVault).
    pub fn builder() -> crate::types::builders::RecoveryPointByBackupVaultBuilder {
        crate::types::builders::RecoveryPointByBackupVaultBuilder::default()
    }
}

/// A builder for [`RecoveryPointByBackupVault`](crate::types::RecoveryPointByBackupVault).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecoveryPointByBackupVaultBuilder {
    pub(crate) recovery_point_arn: std::option::Option<std::string::String>,
    pub(crate) backup_vault_name: std::option::Option<std::string::String>,
    pub(crate) backup_vault_arn: std::option::Option<std::string::String>,
    pub(crate) source_backup_vault_arn: std::option::Option<std::string::String>,
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<std::string::String>,
    pub(crate) created_by: std::option::Option<crate::types::RecoveryPointCreator>,
    pub(crate) iam_role_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::RecoveryPointStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) completion_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) backup_size_in_bytes: std::option::Option<i64>,
    pub(crate) calculated_lifecycle: std::option::Option<crate::types::CalculatedLifecycle>,
    pub(crate) lifecycle: std::option::Option<crate::types::Lifecycle>,
    pub(crate) encryption_key_arn: std::option::Option<std::string::String>,
    pub(crate) is_encrypted: std::option::Option<bool>,
    pub(crate) last_restore_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) parent_recovery_point_arn: std::option::Option<std::string::String>,
    pub(crate) composite_member_identifier: std::option::Option<std::string::String>,
    pub(crate) is_parent: std::option::Option<bool>,
}
impl RecoveryPointByBackupVaultBuilder {
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn recovery_point_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.recovery_point_arn = Some(input.into());
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn set_recovery_point_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recovery_point_arn = input;
        self
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p>
    pub fn backup_vault_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.backup_vault_name = Some(input.into());
        self
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p>
    pub fn set_backup_vault_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.backup_vault_name = input;
        self
    }
    /// <p>An ARN that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    pub fn backup_vault_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.backup_vault_arn = Some(input.into());
        self
    }
    /// <p>An ARN that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    pub fn set_backup_vault_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.backup_vault_arn = input;
        self
    }
    /// <p>The backup vault where the recovery point was originally copied from. If the recovery point is restored to the same account this value will be <code>null</code>.</p>
    pub fn source_backup_vault_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_backup_vault_arn = Some(input.into());
        self
    }
    /// <p>The backup vault where the recovery point was originally copied from. If the recovery point is restored to the same account this value will be <code>null</code>.</p>
    pub fn set_source_backup_vault_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_backup_vault_arn = input;
        self
    }
    /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the resource type.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the resource type.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The type of Amazon Web Services resource saved as a recovery point; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For Windows Volume Shadow Copy Service (VSS) backups, the only supported resource type is Amazon EC2.</p>
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// <p>The type of Amazon Web Services resource saved as a recovery point; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For Windows Volume Shadow Copy Service (VSS) backups, the only supported resource type is Amazon EC2.</p>
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Contains identifying information about the creation of a recovery point, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan that is used to create it.</p>
    pub fn created_by(mut self, input: crate::types::RecoveryPointCreator) -> Self {
        self.created_by = Some(input);
        self
    }
    /// <p>Contains identifying information about the creation of a recovery point, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan that is used to create it.</p>
    pub fn set_created_by(
        mut self,
        input: std::option::Option<crate::types::RecoveryPointCreator>,
    ) -> Self {
        self.created_by = input;
        self
    }
    /// <p>Specifies the IAM role ARN used to create the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.iam_role_arn = Some(input.into());
        self
    }
    /// <p>Specifies the IAM role ARN used to create the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>A status code specifying the state of the recovery point.</p>
    pub fn status(mut self, input: crate::types::RecoveryPointStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>A status code specifying the state of the recovery point.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::RecoveryPointStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>A message explaining the reason of the recovery point deletion failure.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>A message explaining the reason of the recovery point deletion failure.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The date and time a recovery point is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The date and time a recovery point is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date and time a job to restore a recovery point is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn completion_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.completion_date = Some(input);
        self
    }
    /// <p>The date and time a job to restore a recovery point is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_completion_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.completion_date = input;
        self
    }
    /// <p>The size, in bytes, of a backup.</p>
    pub fn backup_size_in_bytes(mut self, input: i64) -> Self {
        self.backup_size_in_bytes = Some(input);
        self
    }
    /// <p>The size, in bytes, of a backup.</p>
    pub fn set_backup_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.backup_size_in_bytes = input;
        self
    }
    /// <p>A <code>CalculatedLifecycle</code> object containing <code>DeleteAt</code> and <code>MoveToColdStorageAt</code> timestamps.</p>
    pub fn calculated_lifecycle(mut self, input: crate::types::CalculatedLifecycle) -> Self {
        self.calculated_lifecycle = Some(input);
        self
    }
    /// <p>A <code>CalculatedLifecycle</code> object containing <code>DeleteAt</code> and <code>MoveToColdStorageAt</code> timestamps.</p>
    pub fn set_calculated_lifecycle(
        mut self,
        input: std::option::Option<crate::types::CalculatedLifecycle>,
    ) -> Self {
        self.calculated_lifecycle = input;
        self
    }
    /// <p>The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. Backup transitions and expires backups automatically according to the lifecycle that you define. </p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold. </p>
    /// <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    pub fn lifecycle(mut self, input: crate::types::Lifecycle) -> Self {
        self.lifecycle = Some(input);
        self
    }
    /// <p>The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. Backup transitions and expires backups automatically according to the lifecycle that you define. </p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold. </p>
    /// <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
    pub fn set_lifecycle(mut self, input: std::option::Option<crate::types::Lifecycle>) -> Self {
        self.lifecycle = input;
        self
    }
    /// <p>The server-side encryption key that is used to protect your backups; for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub fn encryption_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_key_arn = Some(input.into());
        self
    }
    /// <p>The server-side encryption key that is used to protect your backups; for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub fn set_encryption_key_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// <p>A Boolean value that is returned as <code>TRUE</code> if the specified recovery point is encrypted, or <code>FALSE</code> if the recovery point is not encrypted.</p>
    pub fn is_encrypted(mut self, input: bool) -> Self {
        self.is_encrypted = Some(input);
        self
    }
    /// <p>A Boolean value that is returned as <code>TRUE</code> if the specified recovery point is encrypted, or <code>FALSE</code> if the recovery point is not encrypted.</p>
    pub fn set_is_encrypted(mut self, input: std::option::Option<bool>) -> Self {
        self.is_encrypted = input;
        self
    }
    /// <p>The date and time a recovery point was last restored, in Unix format and Coordinated Universal Time (UTC). The value of <code>LastRestoreTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn last_restore_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_restore_time = Some(input);
        self
    }
    /// <p>The date and time a recovery point was last restored, in Unix format and Coordinated Universal Time (UTC). The value of <code>LastRestoreTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_last_restore_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_restore_time = input;
        self
    }
    /// <p>This is the Amazon Resource Name (ARN) of the parent (composite) recovery point.</p>
    pub fn parent_recovery_point_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_recovery_point_arn = Some(input.into());
        self
    }
    /// <p>This is the Amazon Resource Name (ARN) of the parent (composite) recovery point.</p>
    pub fn set_parent_recovery_point_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.parent_recovery_point_arn = input;
        self
    }
    /// <p>This is the identifier of a resource within a composite group, such as nested (child) recovery point belonging to a composite (parent) stack. The ID is transferred from the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html#resources-section-structure-syntax"> logical ID</a> within a stack.</p>
    pub fn composite_member_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.composite_member_identifier = Some(input.into());
        self
    }
    /// <p>This is the identifier of a resource within a composite group, such as nested (child) recovery point belonging to a composite (parent) stack. The ID is transferred from the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html#resources-section-structure-syntax"> logical ID</a> within a stack.</p>
    pub fn set_composite_member_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.composite_member_identifier = input;
        self
    }
    /// <p>This is a boolean value indicating this is a parent (composite) recovery point.</p>
    pub fn is_parent(mut self, input: bool) -> Self {
        self.is_parent = Some(input);
        self
    }
    /// <p>This is a boolean value indicating this is a parent (composite) recovery point.</p>
    pub fn set_is_parent(mut self, input: std::option::Option<bool>) -> Self {
        self.is_parent = input;
        self
    }
    /// Consumes the builder and constructs a [`RecoveryPointByBackupVault`](crate::types::RecoveryPointByBackupVault).
    pub fn build(self) -> crate::types::RecoveryPointByBackupVault {
        crate::types::RecoveryPointByBackupVault {
            recovery_point_arn: self.recovery_point_arn,
            backup_vault_name: self.backup_vault_name,
            backup_vault_arn: self.backup_vault_arn,
            source_backup_vault_arn: self.source_backup_vault_arn,
            resource_arn: self.resource_arn,
            resource_type: self.resource_type,
            created_by: self.created_by,
            iam_role_arn: self.iam_role_arn,
            status: self.status,
            status_message: self.status_message,
            creation_date: self.creation_date,
            completion_date: self.completion_date,
            backup_size_in_bytes: self.backup_size_in_bytes,
            calculated_lifecycle: self.calculated_lifecycle,
            lifecycle: self.lifecycle,
            encryption_key_arn: self.encryption_key_arn,
            is_encrypted: self.is_encrypted.unwrap_or_default(),
            last_restore_time: self.last_restore_time,
            parent_recovery_point_arn: self.parent_recovery_point_arn,
            composite_member_identifier: self.composite_member_identifier,
            is_parent: self.is_parent.unwrap_or_default(),
        }
    }
}
