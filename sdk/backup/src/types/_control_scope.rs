// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A framework consists of one or more controls. Each control has its own control scope. The control scope can include one or more resource types, a combination of a tag key and value, or a combination of one resource type and one resource ID. If no scope is specified, evaluations for the rule are triggered when any resource in your recording group changes in configuration.</p> <note>
/// <p>To set a control scope that includes all of a particular resource, leave the <code>ControlScope</code> empty or do not pass it when calling <code>CreateFramework</code>.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ControlScope {
    /// <p>The ID of the only Amazon Web Services resource that you want your control scope to contain.</p>
    #[doc(hidden)]
    pub compliance_resource_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Describes whether the control scope includes one or more types of resources, such as <code>EFS</code> or <code>RDS</code>.</p>
    #[doc(hidden)]
    pub compliance_resource_types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The tag key-value pair applied to those Amazon Web Services resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided. The tag value is optional, but it cannot be an empty string. The structure to assign a tag is: <code>[{"Key":"string","Value":"string"}]</code>.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ControlScope {
    /// <p>The ID of the only Amazon Web Services resource that you want your control scope to contain.</p>
    pub fn compliance_resource_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.compliance_resource_ids.as_deref()
    }
    /// <p>Describes whether the control scope includes one or more types of resources, such as <code>EFS</code> or <code>RDS</code>.</p>
    pub fn compliance_resource_types(&self) -> std::option::Option<&[std::string::String]> {
        self.compliance_resource_types.as_deref()
    }
    /// <p>The tag key-value pair applied to those Amazon Web Services resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided. The tag value is optional, but it cannot be an empty string. The structure to assign a tag is: <code>[{"Key":"string","Value":"string"}]</code>.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl ControlScope {
    /// Creates a new builder-style object to manufacture [`ControlScope`](crate::types::ControlScope).
    pub fn builder() -> crate::types::builders::ControlScopeBuilder {
        crate::types::builders::ControlScopeBuilder::default()
    }
}

/// A builder for [`ControlScope`](crate::types::ControlScope).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ControlScopeBuilder {
    pub(crate) compliance_resource_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) compliance_resource_types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ControlScopeBuilder {
    /// Appends an item to `compliance_resource_ids`.
    ///
    /// To override the contents of this collection use [`set_compliance_resource_ids`](Self::set_compliance_resource_ids).
    ///
    /// <p>The ID of the only Amazon Web Services resource that you want your control scope to contain.</p>
    pub fn compliance_resource_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.compliance_resource_ids.unwrap_or_default();
        v.push(input.into());
        self.compliance_resource_ids = Some(v);
        self
    }
    /// <p>The ID of the only Amazon Web Services resource that you want your control scope to contain.</p>
    pub fn set_compliance_resource_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.compliance_resource_ids = input;
        self
    }
    /// Appends an item to `compliance_resource_types`.
    ///
    /// To override the contents of this collection use [`set_compliance_resource_types`](Self::set_compliance_resource_types).
    ///
    /// <p>Describes whether the control scope includes one or more types of resources, such as <code>EFS</code> or <code>RDS</code>.</p>
    pub fn compliance_resource_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.compliance_resource_types.unwrap_or_default();
        v.push(input.into());
        self.compliance_resource_types = Some(v);
        self
    }
    /// <p>Describes whether the control scope includes one or more types of resources, such as <code>EFS</code> or <code>RDS</code>.</p>
    pub fn set_compliance_resource_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.compliance_resource_types = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag key-value pair applied to those Amazon Web Services resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided. The tag value is optional, but it cannot be an empty string. The structure to assign a tag is: <code>[{"Key":"string","Value":"string"}]</code>.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tag key-value pair applied to those Amazon Web Services resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided. The tag value is optional, but it cannot be an empty string. The structure to assign a tag is: <code>[{"Key":"string","Value":"string"}]</code>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`ControlScope`](crate::types::ControlScope).
    pub fn build(self) -> crate::types::ControlScope {
        crate::types::ControlScope {
            compliance_resource_ids: self.compliance_resource_ids,
            compliance_resource_types: self.compliance_resource_types,
            tags: self.tags,
        }
    }
}
