// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FrameworkControl {
    /// <p>The name of a control. This name is between 1 and 256 characters.</p>
    pub control_name: ::std::string::String,
    /// <p>A list of <code>ParameterName</code> and <code>ParameterValue</code> pairs.</p>
    pub control_input_parameters: ::std::option::Option<::std::vec::Vec<crate::types::ControlInputParameter>>,
    /// <p>The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.</p>
    pub control_scope: ::std::option::Option<crate::types::ControlScope>,
}
impl FrameworkControl {
    /// <p>The name of a control. This name is between 1 and 256 characters.</p>
    pub fn control_name(&self) -> &str {
        use std::ops::Deref;
        self.control_name.deref()
    }
    /// <p>A list of <code>ParameterName</code> and <code>ParameterValue</code> pairs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.control_input_parameters.is_none()`.
    pub fn control_input_parameters(&self) -> &[crate::types::ControlInputParameter] {
        self.control_input_parameters.as_deref().unwrap_or_default()
    }
    /// <p>The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.</p>
    pub fn control_scope(&self) -> ::std::option::Option<&crate::types::ControlScope> {
        self.control_scope.as_ref()
    }
}
impl FrameworkControl {
    /// Creates a new builder-style object to manufacture [`FrameworkControl`](crate::types::FrameworkControl).
    pub fn builder() -> crate::types::builders::FrameworkControlBuilder {
        crate::types::builders::FrameworkControlBuilder::default()
    }
}

/// A builder for [`FrameworkControl`](crate::types::FrameworkControl).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FrameworkControlBuilder {
    pub(crate) control_name: ::std::option::Option<::std::string::String>,
    pub(crate) control_input_parameters: ::std::option::Option<::std::vec::Vec<crate::types::ControlInputParameter>>,
    pub(crate) control_scope: ::std::option::Option<crate::types::ControlScope>,
}
impl FrameworkControlBuilder {
    /// <p>The name of a control. This name is between 1 and 256 characters.</p>
    /// This field is required.
    pub fn control_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.control_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a control. This name is between 1 and 256 characters.</p>
    pub fn set_control_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.control_name = input;
        self
    }
    /// <p>The name of a control. This name is between 1 and 256 characters.</p>
    pub fn get_control_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.control_name
    }
    /// Appends an item to `control_input_parameters`.
    ///
    /// To override the contents of this collection use [`set_control_input_parameters`](Self::set_control_input_parameters).
    ///
    /// <p>A list of <code>ParameterName</code> and <code>ParameterValue</code> pairs.</p>
    pub fn control_input_parameters(mut self, input: crate::types::ControlInputParameter) -> Self {
        let mut v = self.control_input_parameters.unwrap_or_default();
        v.push(input);
        self.control_input_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>ParameterName</code> and <code>ParameterValue</code> pairs.</p>
    pub fn set_control_input_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ControlInputParameter>>) -> Self {
        self.control_input_parameters = input;
        self
    }
    /// <p>A list of <code>ParameterName</code> and <code>ParameterValue</code> pairs.</p>
    pub fn get_control_input_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ControlInputParameter>> {
        &self.control_input_parameters
    }
    /// <p>The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.</p>
    pub fn control_scope(mut self, input: crate::types::ControlScope) -> Self {
        self.control_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.</p>
    pub fn set_control_scope(mut self, input: ::std::option::Option<crate::types::ControlScope>) -> Self {
        self.control_scope = input;
        self
    }
    /// <p>The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.</p>
    pub fn get_control_scope(&self) -> &::std::option::Option<crate::types::ControlScope> {
        &self.control_scope
    }
    /// Consumes the builder and constructs a [`FrameworkControl`](crate::types::FrameworkControl).
    /// This method will fail if any of the following fields are not set:
    /// - [`control_name`](crate::types::builders::FrameworkControlBuilder::control_name)
    pub fn build(self) -> ::std::result::Result<crate::types::FrameworkControl, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FrameworkControl {
            control_name: self.control_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "control_name",
                    "control_name was not specified but it is required when building FrameworkControl",
                )
            })?,
            control_input_parameters: self.control_input_parameters,
            control_scope: self.control_scope,
        })
    }
}
