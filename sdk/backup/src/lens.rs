// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_backup_jobs_output_next_token(
    input: &crate::operation::list_backup_jobs::ListBackupJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_backup_plan_templates_output_next_token(
    input: &crate::operation::list_backup_plan_templates::ListBackupPlanTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_backup_plan_versions_output_next_token(
    input: &crate::operation::list_backup_plan_versions::ListBackupPlanVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_backup_plans_output_next_token(
    input: &crate::operation::list_backup_plans::ListBackupPlansOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_backup_selections_output_next_token(
    input: &crate::operation::list_backup_selections::ListBackupSelectionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_backup_vaults_output_next_token(
    input: &crate::operation::list_backup_vaults::ListBackupVaultsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_copy_jobs_output_next_token(
    input: &crate::operation::list_copy_jobs::ListCopyJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_frameworks_output_next_token(
    input: &crate::operation::list_frameworks::ListFrameworksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_legal_holds_output_next_token(
    input: &crate::operation::list_legal_holds::ListLegalHoldsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_protected_resources_output_next_token(
    input: &crate::operation::list_protected_resources::ListProtectedResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_recovery_points_by_backup_vault_output_next_token(
    input: &crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVaultOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_recovery_points_by_legal_hold_output_next_token(
    input: &crate::operation::list_recovery_points_by_legal_hold::ListRecoveryPointsByLegalHoldOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_recovery_points_by_resource_output_next_token(
    input: &crate::operation::list_recovery_points_by_resource::ListRecoveryPointsByResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_report_jobs_output_next_token(
    input: &crate::operation::list_report_jobs::ListReportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_report_plans_output_next_token(
    input: &crate::operation::list_report_plans::ListReportPlansOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_restore_jobs_output_next_token(
    input: &crate::operation::list_restore_jobs::ListRestoreJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_tags_output_next_token(
    input: &crate::operation::list_tags::ListTagsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_backup_jobs_output_backup_jobs(
    input: crate::operation::list_backup_jobs::ListBackupJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::BackupJob>> {
    let input = match input.backup_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_backup_plan_templates_output_backup_plan_templates_list(
    input: crate::operation::list_backup_plan_templates::ListBackupPlanTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::BackupPlanTemplatesListMember>> {
    let input = match input.backup_plan_templates_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_backup_plan_versions_output_backup_plan_versions_list(
    input: crate::operation::list_backup_plan_versions::ListBackupPlanVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::BackupPlansListMember>> {
    let input = match input.backup_plan_versions_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_backup_plans_output_backup_plans_list(
    input: crate::operation::list_backup_plans::ListBackupPlansOutput,
) -> std::option::Option<std::vec::Vec<crate::types::BackupPlansListMember>> {
    let input = match input.backup_plans_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_backup_selections_output_backup_selections_list(
    input: crate::operation::list_backup_selections::ListBackupSelectionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::BackupSelectionsListMember>> {
    let input = match input.backup_selections_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_backup_vaults_output_backup_vault_list(
    input: crate::operation::list_backup_vaults::ListBackupVaultsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::BackupVaultListMember>> {
    let input = match input.backup_vault_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_copy_jobs_output_copy_jobs(
    input: crate::operation::list_copy_jobs::ListCopyJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CopyJob>> {
    let input = match input.copy_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_legal_holds_output_legal_holds(
    input: crate::operation::list_legal_holds::ListLegalHoldsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::LegalHold>> {
    let input = match input.legal_holds {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_protected_resources_output_results(
    input: crate::operation::list_protected_resources::ListProtectedResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ProtectedResource>> {
    let input = match input.results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_recovery_points_by_backup_vault_output_recovery_points(
    input: crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVaultOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RecoveryPointByBackupVault>> {
    let input = match input.recovery_points {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_recovery_points_by_legal_hold_output_recovery_points(
    input: crate::operation::list_recovery_points_by_legal_hold::ListRecoveryPointsByLegalHoldOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RecoveryPointMember>> {
    let input = match input.recovery_points {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_recovery_points_by_resource_output_recovery_points(
    input: crate::operation::list_recovery_points_by_resource::ListRecoveryPointsByResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RecoveryPointByResource>> {
    let input = match input.recovery_points {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_restore_jobs_output_restore_jobs(
    input: crate::operation::list_restore_jobs::ListRestoreJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RestoreJobsListMember>> {
    let input = match input.restore_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
