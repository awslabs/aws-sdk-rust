// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn backup_plan_correct_errors(mut builder: crate::types::builders::BackupPlanBuilder) -> crate::types::builders::BackupPlanBuilder {
    if builder.backup_plan_name.is_none() {
        builder.backup_plan_name = Some(Default::default())
    }
    if builder.rules.is_none() {
        builder.rules = Some(Default::default())
    }
    builder
}

pub(crate) fn backup_selection_correct_errors(
    mut builder: crate::types::builders::BackupSelectionBuilder,
) -> crate::types::builders::BackupSelectionBuilder {
    if builder.selection_name.is_none() {
        builder.selection_name = Some(Default::default())
    }
    if builder.iam_role_arn.is_none() {
        builder.iam_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn date_range_correct_errors(mut builder: crate::types::builders::DateRangeBuilder) -> crate::types::builders::DateRangeBuilder {
    if builder.from_date.is_none() {
        builder.from_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.to_date.is_none() {
        builder.to_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn framework_control_correct_errors(
    mut builder: crate::types::builders::FrameworkControlBuilder,
) -> crate::types::builders::FrameworkControlBuilder {
    if builder.control_name.is_none() {
        builder.control_name = Some(Default::default())
    }
    builder
}

pub(crate) fn report_delivery_channel_correct_errors(
    mut builder: crate::types::builders::ReportDeliveryChannelBuilder,
) -> crate::types::builders::ReportDeliveryChannelBuilder {
    if builder.s3_bucket_name.is_none() {
        builder.s3_bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn report_setting_correct_errors(
    mut builder: crate::types::builders::ReportSettingBuilder,
) -> crate::types::builders::ReportSettingBuilder {
    if builder.report_template.is_none() {
        builder.report_template = Some(Default::default())
    }
    builder
}

pub(crate) fn backup_rule_correct_errors(mut builder: crate::types::builders::BackupRuleBuilder) -> crate::types::builders::BackupRuleBuilder {
    if builder.rule_name.is_none() {
        builder.rule_name = Some(Default::default())
    }
    if builder.target_backup_vault_name.is_none() {
        builder.target_backup_vault_name = Some(Default::default())
    }
    builder
}

pub(crate) fn condition_correct_errors(mut builder: crate::types::builders::ConditionBuilder) -> crate::types::builders::ConditionBuilder {
    if builder.condition_type.is_none() {
        builder.condition_type = "no value was set".parse::<crate::types::ConditionType>().ok()
    }
    if builder.condition_key.is_none() {
        builder.condition_key = Some(Default::default())
    }
    if builder.condition_value.is_none() {
        builder.condition_value = Some(Default::default())
    }
    builder
}

pub(crate) fn copy_action_correct_errors(mut builder: crate::types::builders::CopyActionBuilder) -> crate::types::builders::CopyActionBuilder {
    if builder.destination_backup_vault_arn.is_none() {
        builder.destination_backup_vault_arn = Some(Default::default())
    }
    builder
}
