// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Contains <code>DeleteAt</code> and <code>MoveToColdStorageAt</code> timestamps, which
/// are used to specify a lifecycle for a recovery point.</p>
/// <p>The lifecycle defines when a protected resource is transitioned to cold storage and when
/// it expires. AWS Backup transitions and expires backups automatically according to the
/// lifecycle that you define.</p>
/// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90
/// days. Therefore, the “expire after days” setting must be 90 days greater than the
/// “transition to cold after days” setting. The “transition to cold after days” setting cannot
/// be changed after a backup has been transitioned to cold.</p>
/// <p>Only Amazon EFS file system backups can be transitioned to cold storage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CalculatedLifecycle {
    /// <p>A timestamp that specifies when to transition a recovery point to cold storage.</p>
    pub move_to_cold_storage_at: std::option::Option<smithy_types::Instant>,
    /// <p>A timestamp that specifies when to delete a recovery point.</p>
    pub delete_at: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for CalculatedLifecycle {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CalculatedLifecycle");
        formatter.field("move_to_cold_storage_at", &self.move_to_cold_storage_at);
        formatter.field("delete_at", &self.delete_at);
        formatter.finish()
    }
}
/// See [`CalculatedLifecycle`](crate::model::CalculatedLifecycle)
pub mod calculated_lifecycle {
    /// A builder for [`CalculatedLifecycle`](crate::model::CalculatedLifecycle)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) move_to_cold_storage_at: std::option::Option<smithy_types::Instant>,
        pub(crate) delete_at: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        /// <p>A timestamp that specifies when to transition a recovery point to cold storage.</p>
        pub fn move_to_cold_storage_at(mut self, input: smithy_types::Instant) -> Self {
            self.move_to_cold_storage_at = Some(input);
            self
        }
        pub fn set_move_to_cold_storage_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.move_to_cold_storage_at = input;
            self
        }
        /// <p>A timestamp that specifies when to delete a recovery point.</p>
        pub fn delete_at(mut self, input: smithy_types::Instant) -> Self {
            self.delete_at = Some(input);
            self
        }
        pub fn set_delete_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.delete_at = input;
            self
        }
        /// Consumes the builder and constructs a [`CalculatedLifecycle`](crate::model::CalculatedLifecycle)
        pub fn build(self) -> crate::model::CalculatedLifecycle {
            crate::model::CalculatedLifecycle {
                move_to_cold_storage_at: self.move_to_cold_storage_at,
                delete_at: self.delete_at,
            }
        }
    }
}
impl CalculatedLifecycle {
    /// Creates a new builder-style object to manufacture [`CalculatedLifecycle`](crate::model::CalculatedLifecycle)
    pub fn builder() -> crate::model::calculated_lifecycle::Builder {
        crate::model::calculated_lifecycle::Builder::default()
    }
}

/// <p>Contains an array of <code>Transition</code> objects specifying how long in days before
/// a recovery point transitions to cold storage or is deleted.</p>
/// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90
/// days. Therefore, on the console, the “expire after days” setting must be 90 days greater
/// than the “transition to cold after days” setting. The “transition to cold after days”
/// setting cannot be changed after a backup has been transitioned to cold.</p>
/// <p>Only Amazon EFS file system backups can be transitioned to cold storage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Lifecycle {
    /// <p>Specifies the number of days after creation that a recovery point is moved to cold
    /// storage.</p>
    pub move_to_cold_storage_after_days: std::option::Option<i64>,
    /// <p>Specifies the number of days after creation that a recovery point is deleted. Must be
    /// greater than 90 days plus <code>MoveToColdStorageAfterDays</code>.</p>
    pub delete_after_days: std::option::Option<i64>,
}
impl std::fmt::Debug for Lifecycle {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Lifecycle");
        formatter.field(
            "move_to_cold_storage_after_days",
            &self.move_to_cold_storage_after_days,
        );
        formatter.field("delete_after_days", &self.delete_after_days);
        formatter.finish()
    }
}
/// See [`Lifecycle`](crate::model::Lifecycle)
pub mod lifecycle {
    /// A builder for [`Lifecycle`](crate::model::Lifecycle)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) move_to_cold_storage_after_days: std::option::Option<i64>,
        pub(crate) delete_after_days: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>Specifies the number of days after creation that a recovery point is moved to cold
        /// storage.</p>
        pub fn move_to_cold_storage_after_days(mut self, input: i64) -> Self {
            self.move_to_cold_storage_after_days = Some(input);
            self
        }
        pub fn set_move_to_cold_storage_after_days(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.move_to_cold_storage_after_days = input;
            self
        }
        /// <p>Specifies the number of days after creation that a recovery point is deleted. Must be
        /// greater than 90 days plus <code>MoveToColdStorageAfterDays</code>.</p>
        pub fn delete_after_days(mut self, input: i64) -> Self {
            self.delete_after_days = Some(input);
            self
        }
        pub fn set_delete_after_days(mut self, input: std::option::Option<i64>) -> Self {
            self.delete_after_days = input;
            self
        }
        /// Consumes the builder and constructs a [`Lifecycle`](crate::model::Lifecycle)
        pub fn build(self) -> crate::model::Lifecycle {
            crate::model::Lifecycle {
                move_to_cold_storage_after_days: self.move_to_cold_storage_after_days,
                delete_after_days: self.delete_after_days,
            }
        }
    }
}
impl Lifecycle {
    /// Creates a new builder-style object to manufacture [`Lifecycle`](crate::model::Lifecycle)
    pub fn builder() -> crate::model::lifecycle::Builder {
        crate::model::lifecycle::Builder::default()
    }
}

/// <p>A list of backup options for each resource type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AdvancedBackupSetting {
    /// <p>Specifies an object containing resource type and backup options. The only supported
    /// resource type is Amazon EC2 instances with Windows VSS. For an CloudFormation example, see
    /// the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/integrate-cloudformation-with-aws-backup.html">sample
    /// CloudFormation template to enable Windows VSS</a> in the <i>AWS Backup User
    /// Guide</i>.</p>
    /// <p>Valid values: <code>EC2</code>.</p>
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>Specifies the backup option for a selected resource. This option is only available for
    /// Windows VSS backup jobs.</p>
    /// <p>Valid values: </p>
    /// <p>Set to <code>"WindowsVSS":"enabled"</code> to enable the WindowsVSS backup option and
    /// create a VSS Windows backup. </p>
    /// <p>Set to <code>"WindowsVSS":"disabled"</code> to create a regular backup. The WindowsVSS
    /// option is not enabled by default.</p>
    /// <p>If you specify an invalid option, you get an <code>InvalidParameterValueException</code>
    /// exception.</p>
    /// <p>For more information about Windows VSS backups, see <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/windows-backups.html">Creating a VSS-Enabled Windows
    /// Backup</a>.</p>
    pub backup_options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl std::fmt::Debug for AdvancedBackupSetting {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AdvancedBackupSetting");
        formatter.field("resource_type", &self.resource_type);
        formatter.field("backup_options", &self.backup_options);
        formatter.finish()
    }
}
/// See [`AdvancedBackupSetting`](crate::model::AdvancedBackupSetting)
pub mod advanced_backup_setting {
    /// A builder for [`AdvancedBackupSetting`](crate::model::AdvancedBackupSetting)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_type: std::option::Option<std::string::String>,
        pub(crate) backup_options: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>Specifies an object containing resource type and backup options. The only supported
        /// resource type is Amazon EC2 instances with Windows VSS. For an CloudFormation example, see
        /// the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/integrate-cloudformation-with-aws-backup.html">sample
        /// CloudFormation template to enable Windows VSS</a> in the <i>AWS Backup User
        /// Guide</i>.</p>
        /// <p>Valid values: <code>EC2</code>.</p>
        pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_type = Some(input.into());
            self
        }
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        pub fn backup_options(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.backup_options.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.backup_options = Some(hash_map);
            self
        }
        pub fn set_backup_options(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.backup_options = input;
            self
        }
        /// Consumes the builder and constructs a [`AdvancedBackupSetting`](crate::model::AdvancedBackupSetting)
        pub fn build(self) -> crate::model::AdvancedBackupSetting {
            crate::model::AdvancedBackupSetting {
                resource_type: self.resource_type,
                backup_options: self.backup_options,
            }
        }
    }
}
impl AdvancedBackupSetting {
    /// Creates a new builder-style object to manufacture [`AdvancedBackupSetting`](crate::model::AdvancedBackupSetting)
    pub fn builder() -> crate::model::advanced_backup_setting::Builder {
        crate::model::advanced_backup_setting::Builder::default()
    }
}

/// <p>Contains an optional backup plan display name and an array of <code>BackupRule</code>
/// objects, each of which specifies a backup rule. Each rule in a backup plan is a separate
/// scheduled task and can back up a different selection of AWS resources. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BackupPlanInput {
    /// <p>The optional display name of a backup plan.</p>
    pub backup_plan_name: std::option::Option<std::string::String>,
    /// <p>An array of <code>BackupRule</code> objects, each of which specifies a scheduled task
    /// that is used to back up a selection of resources.</p>
    pub rules: std::option::Option<std::vec::Vec<crate::model::BackupRuleInput>>,
    /// <p>Specifies a list of <code>BackupOptions</code> for each resource type. These settings
    /// are only available for Windows VSS backup jobs.</p>
    pub advanced_backup_settings:
        std::option::Option<std::vec::Vec<crate::model::AdvancedBackupSetting>>,
}
impl std::fmt::Debug for BackupPlanInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BackupPlanInput");
        formatter.field("backup_plan_name", &self.backup_plan_name);
        formatter.field("rules", &self.rules);
        formatter.field("advanced_backup_settings", &self.advanced_backup_settings);
        formatter.finish()
    }
}
/// See [`BackupPlanInput`](crate::model::BackupPlanInput)
pub mod backup_plan_input {
    /// A builder for [`BackupPlanInput`](crate::model::BackupPlanInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) backup_plan_name: std::option::Option<std::string::String>,
        pub(crate) rules: std::option::Option<std::vec::Vec<crate::model::BackupRuleInput>>,
        pub(crate) advanced_backup_settings:
            std::option::Option<std::vec::Vec<crate::model::AdvancedBackupSetting>>,
    }
    impl Builder {
        /// <p>The optional display name of a backup plan.</p>
        pub fn backup_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_plan_name = Some(input.into());
            self
        }
        pub fn set_backup_plan_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_plan_name = input;
            self
        }
        pub fn rules(mut self, input: impl Into<crate::model::BackupRuleInput>) -> Self {
            let mut v = self.rules.unwrap_or_default();
            v.push(input.into());
            self.rules = Some(v);
            self
        }
        pub fn set_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BackupRuleInput>>,
        ) -> Self {
            self.rules = input;
            self
        }
        pub fn advanced_backup_settings(
            mut self,
            input: impl Into<crate::model::AdvancedBackupSetting>,
        ) -> Self {
            let mut v = self.advanced_backup_settings.unwrap_or_default();
            v.push(input.into());
            self.advanced_backup_settings = Some(v);
            self
        }
        pub fn set_advanced_backup_settings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AdvancedBackupSetting>>,
        ) -> Self {
            self.advanced_backup_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`BackupPlanInput`](crate::model::BackupPlanInput)
        pub fn build(self) -> crate::model::BackupPlanInput {
            crate::model::BackupPlanInput {
                backup_plan_name: self.backup_plan_name,
                rules: self.rules,
                advanced_backup_settings: self.advanced_backup_settings,
            }
        }
    }
}
impl BackupPlanInput {
    /// Creates a new builder-style object to manufacture [`BackupPlanInput`](crate::model::BackupPlanInput)
    pub fn builder() -> crate::model::backup_plan_input::Builder {
        crate::model::backup_plan_input::Builder::default()
    }
}

/// <p>Specifies a scheduled task used to back up a selection of resources.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BackupRuleInput {
    /// <p>An optional display name for a backup rule.</p>
    pub rule_name: std::option::Option<std::string::String>,
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified
    /// by names that are unique to the account used to create them and the AWS Region where they
    /// are created. They consist of lowercase letters, numbers, and hyphens.</p>
    pub target_backup_vault_name: std::option::Option<std::string::String>,
    /// <p>A CRON expression specifying when AWS Backup initiates a backup job.</p>
    pub schedule_expression: std::option::Option<std::string::String>,
    /// <p>A value in minutes after a backup is scheduled before a job will be canceled if it
    /// doesn't start successfully. This value is optional.</p>
    pub start_window_minutes: std::option::Option<i64>,
    /// <p>A value in minutes after a backup job is successfully started before it must be
    /// completed or it will be canceled by AWS Backup. This value is optional.</p>
    pub completion_window_minutes: std::option::Option<i64>,
    /// <p>The lifecycle defines when a protected resource is transitioned to cold storage and when
    /// it expires. AWS Backup will transition and expire backups automatically according to the
    /// lifecycle that you define. </p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90
    /// days. Therefore, the “expire after days” setting must be 90 days greater than the
    /// “transition to cold after days” setting. The “transition to cold after days” setting cannot
    /// be changed after a backup has been transitioned to cold. </p>
    /// <p>Only Amazon EFS file system backups can be transitioned to cold storage.</p>
    pub lifecycle: std::option::Option<crate::model::Lifecycle>,
    /// <p>To help organize your resources, you can assign your own metadata to the resources that
    /// you create. Each tag is a key-value pair.</p>
    pub recovery_point_tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>An array of <code>CopyAction</code> objects, which contains the details of the copy
    /// operation.</p>
    pub copy_actions: std::option::Option<std::vec::Vec<crate::model::CopyAction>>,
    /// <p>Specifies whether AWS Backup creates continuous backups. True causes AWS Backup to
    /// create continuous backups capable of point-in-time restore (PITR). False (or not specified)
    /// causes AWS Backup to create snapshot backups.</p>
    pub enable_continuous_backup: std::option::Option<bool>,
}
impl std::fmt::Debug for BackupRuleInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BackupRuleInput");
        formatter.field("rule_name", &self.rule_name);
        formatter.field("target_backup_vault_name", &self.target_backup_vault_name);
        formatter.field("schedule_expression", &self.schedule_expression);
        formatter.field("start_window_minutes", &self.start_window_minutes);
        formatter.field("completion_window_minutes", &self.completion_window_minutes);
        formatter.field("lifecycle", &self.lifecycle);
        formatter.field("recovery_point_tags", &"*** Sensitive Data Redacted ***");
        formatter.field("copy_actions", &self.copy_actions);
        formatter.field("enable_continuous_backup", &self.enable_continuous_backup);
        formatter.finish()
    }
}
/// See [`BackupRuleInput`](crate::model::BackupRuleInput)
pub mod backup_rule_input {
    /// A builder for [`BackupRuleInput`](crate::model::BackupRuleInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) rule_name: std::option::Option<std::string::String>,
        pub(crate) target_backup_vault_name: std::option::Option<std::string::String>,
        pub(crate) schedule_expression: std::option::Option<std::string::String>,
        pub(crate) start_window_minutes: std::option::Option<i64>,
        pub(crate) completion_window_minutes: std::option::Option<i64>,
        pub(crate) lifecycle: std::option::Option<crate::model::Lifecycle>,
        pub(crate) recovery_point_tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) copy_actions: std::option::Option<std::vec::Vec<crate::model::CopyAction>>,
        pub(crate) enable_continuous_backup: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>An optional display name for a backup rule.</p>
        pub fn rule_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.rule_name = Some(input.into());
            self
        }
        pub fn set_rule_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.rule_name = input;
            self
        }
        /// <p>The name of a logical container where backups are stored. Backup vaults are identified
        /// by names that are unique to the account used to create them and the AWS Region where they
        /// are created. They consist of lowercase letters, numbers, and hyphens.</p>
        pub fn target_backup_vault_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.target_backup_vault_name = Some(input.into());
            self
        }
        pub fn set_target_backup_vault_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_backup_vault_name = input;
            self
        }
        /// <p>A CRON expression specifying when AWS Backup initiates a backup job.</p>
        pub fn schedule_expression(mut self, input: impl Into<std::string::String>) -> Self {
            self.schedule_expression = Some(input.into());
            self
        }
        pub fn set_schedule_expression(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.schedule_expression = input;
            self
        }
        /// <p>A value in minutes after a backup is scheduled before a job will be canceled if it
        /// doesn't start successfully. This value is optional.</p>
        pub fn start_window_minutes(mut self, input: i64) -> Self {
            self.start_window_minutes = Some(input);
            self
        }
        pub fn set_start_window_minutes(mut self, input: std::option::Option<i64>) -> Self {
            self.start_window_minutes = input;
            self
        }
        /// <p>A value in minutes after a backup job is successfully started before it must be
        /// completed or it will be canceled by AWS Backup. This value is optional.</p>
        pub fn completion_window_minutes(mut self, input: i64) -> Self {
            self.completion_window_minutes = Some(input);
            self
        }
        pub fn set_completion_window_minutes(mut self, input: std::option::Option<i64>) -> Self {
            self.completion_window_minutes = input;
            self
        }
        /// <p>The lifecycle defines when a protected resource is transitioned to cold storage and when
        /// it expires. AWS Backup will transition and expire backups automatically according to the
        /// lifecycle that you define. </p>
        /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90
        /// days. Therefore, the “expire after days” setting must be 90 days greater than the
        /// “transition to cold after days” setting. The “transition to cold after days” setting cannot
        /// be changed after a backup has been transitioned to cold. </p>
        /// <p>Only Amazon EFS file system backups can be transitioned to cold storage.</p>
        pub fn lifecycle(mut self, input: crate::model::Lifecycle) -> Self {
            self.lifecycle = Some(input);
            self
        }
        pub fn set_lifecycle(
            mut self,
            input: std::option::Option<crate::model::Lifecycle>,
        ) -> Self {
            self.lifecycle = input;
            self
        }
        pub fn recovery_point_tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.recovery_point_tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.recovery_point_tags = Some(hash_map);
            self
        }
        pub fn set_recovery_point_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.recovery_point_tags = input;
            self
        }
        pub fn copy_actions(mut self, input: impl Into<crate::model::CopyAction>) -> Self {
            let mut v = self.copy_actions.unwrap_or_default();
            v.push(input.into());
            self.copy_actions = Some(v);
            self
        }
        pub fn set_copy_actions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CopyAction>>,
        ) -> Self {
            self.copy_actions = input;
            self
        }
        /// <p>Specifies whether AWS Backup creates continuous backups. True causes AWS Backup to
        /// create continuous backups capable of point-in-time restore (PITR). False (or not specified)
        /// causes AWS Backup to create snapshot backups.</p>
        pub fn enable_continuous_backup(mut self, input: bool) -> Self {
            self.enable_continuous_backup = Some(input);
            self
        }
        pub fn set_enable_continuous_backup(mut self, input: std::option::Option<bool>) -> Self {
            self.enable_continuous_backup = input;
            self
        }
        /// Consumes the builder and constructs a [`BackupRuleInput`](crate::model::BackupRuleInput)
        pub fn build(self) -> crate::model::BackupRuleInput {
            crate::model::BackupRuleInput {
                rule_name: self.rule_name,
                target_backup_vault_name: self.target_backup_vault_name,
                schedule_expression: self.schedule_expression,
                start_window_minutes: self.start_window_minutes,
                completion_window_minutes: self.completion_window_minutes,
                lifecycle: self.lifecycle,
                recovery_point_tags: self.recovery_point_tags,
                copy_actions: self.copy_actions,
                enable_continuous_backup: self.enable_continuous_backup,
            }
        }
    }
}
impl BackupRuleInput {
    /// Creates a new builder-style object to manufacture [`BackupRuleInput`](crate::model::BackupRuleInput)
    pub fn builder() -> crate::model::backup_rule_input::Builder {
        crate::model::backup_rule_input::Builder::default()
    }
}

/// <p>The details of the copy operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyAction {
    /// <p>Contains an array of <code>Transition</code> objects specifying how long in days before
    /// a recovery point transitions to cold storage or is deleted.</p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90
    /// days. Therefore, on the console, the “expire after days” setting must be 90 days greater
    /// than the “transition to cold after days” setting. The “transition to cold after days”
    /// setting cannot be changed after a backup has been transitioned to cold.</p>
    /// <p>Only Amazon EFS file system backups can be transitioned to cold storage.</p>
    pub lifecycle: std::option::Option<crate::model::Lifecycle>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for
    /// the copied backup. For example,
    /// <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    pub destination_backup_vault_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CopyAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyAction");
        formatter.field("lifecycle", &self.lifecycle);
        formatter.field(
            "destination_backup_vault_arn",
            &self.destination_backup_vault_arn,
        );
        formatter.finish()
    }
}
/// See [`CopyAction`](crate::model::CopyAction)
pub mod copy_action {
    /// A builder for [`CopyAction`](crate::model::CopyAction)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lifecycle: std::option::Option<crate::model::Lifecycle>,
        pub(crate) destination_backup_vault_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Contains an array of <code>Transition</code> objects specifying how long in days before
        /// a recovery point transitions to cold storage or is deleted.</p>
        /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90
        /// days. Therefore, on the console, the “expire after days” setting must be 90 days greater
        /// than the “transition to cold after days” setting. The “transition to cold after days”
        /// setting cannot be changed after a backup has been transitioned to cold.</p>
        /// <p>Only Amazon EFS file system backups can be transitioned to cold storage.</p>
        pub fn lifecycle(mut self, input: crate::model::Lifecycle) -> Self {
            self.lifecycle = Some(input);
            self
        }
        pub fn set_lifecycle(
            mut self,
            input: std::option::Option<crate::model::Lifecycle>,
        ) -> Self {
            self.lifecycle = input;
            self
        }
        /// <p>An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for
        /// the copied backup. For example,
        /// <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
        pub fn destination_backup_vault_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.destination_backup_vault_arn = Some(input.into());
            self
        }
        pub fn set_destination_backup_vault_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.destination_backup_vault_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CopyAction`](crate::model::CopyAction)
        pub fn build(self) -> crate::model::CopyAction {
            crate::model::CopyAction {
                lifecycle: self.lifecycle,
                destination_backup_vault_arn: self.destination_backup_vault_arn,
            }
        }
    }
}
impl CopyAction {
    /// Creates a new builder-style object to manufacture [`CopyAction`](crate::model::CopyAction)
    pub fn builder() -> crate::model::copy_action::Builder {
        crate::model::copy_action::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum BackupVaultEvent {
    BackupJobCompleted,
    BackupJobExpired,
    BackupJobFailed,
    BackupJobStarted,
    BackupJobSuccessful,
    BackupPlanCreated,
    BackupPlanModified,
    CopyJobFailed,
    CopyJobStarted,
    CopyJobSuccessful,
    RecoveryPointModified,
    RestoreJobCompleted,
    RestoreJobFailed,
    RestoreJobStarted,
    RestoreJobSuccessful,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for BackupVaultEvent {
    fn from(s: &str) -> Self {
        match s {
            "BACKUP_JOB_COMPLETED" => BackupVaultEvent::BackupJobCompleted,
            "BACKUP_JOB_EXPIRED" => BackupVaultEvent::BackupJobExpired,
            "BACKUP_JOB_FAILED" => BackupVaultEvent::BackupJobFailed,
            "BACKUP_JOB_STARTED" => BackupVaultEvent::BackupJobStarted,
            "BACKUP_JOB_SUCCESSFUL" => BackupVaultEvent::BackupJobSuccessful,
            "BACKUP_PLAN_CREATED" => BackupVaultEvent::BackupPlanCreated,
            "BACKUP_PLAN_MODIFIED" => BackupVaultEvent::BackupPlanModified,
            "COPY_JOB_FAILED" => BackupVaultEvent::CopyJobFailed,
            "COPY_JOB_STARTED" => BackupVaultEvent::CopyJobStarted,
            "COPY_JOB_SUCCESSFUL" => BackupVaultEvent::CopyJobSuccessful,
            "RECOVERY_POINT_MODIFIED" => BackupVaultEvent::RecoveryPointModified,
            "RESTORE_JOB_COMPLETED" => BackupVaultEvent::RestoreJobCompleted,
            "RESTORE_JOB_FAILED" => BackupVaultEvent::RestoreJobFailed,
            "RESTORE_JOB_STARTED" => BackupVaultEvent::RestoreJobStarted,
            "RESTORE_JOB_SUCCESSFUL" => BackupVaultEvent::RestoreJobSuccessful,
            other => BackupVaultEvent::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for BackupVaultEvent {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(BackupVaultEvent::from(s))
    }
}
impl BackupVaultEvent {
    pub fn as_str(&self) -> &str {
        match self {
            BackupVaultEvent::BackupJobCompleted => "BACKUP_JOB_COMPLETED",
            BackupVaultEvent::BackupJobExpired => "BACKUP_JOB_EXPIRED",
            BackupVaultEvent::BackupJobFailed => "BACKUP_JOB_FAILED",
            BackupVaultEvent::BackupJobStarted => "BACKUP_JOB_STARTED",
            BackupVaultEvent::BackupJobSuccessful => "BACKUP_JOB_SUCCESSFUL",
            BackupVaultEvent::BackupPlanCreated => "BACKUP_PLAN_CREATED",
            BackupVaultEvent::BackupPlanModified => "BACKUP_PLAN_MODIFIED",
            BackupVaultEvent::CopyJobFailed => "COPY_JOB_FAILED",
            BackupVaultEvent::CopyJobStarted => "COPY_JOB_STARTED",
            BackupVaultEvent::CopyJobSuccessful => "COPY_JOB_SUCCESSFUL",
            BackupVaultEvent::RecoveryPointModified => "RECOVERY_POINT_MODIFIED",
            BackupVaultEvent::RestoreJobCompleted => "RESTORE_JOB_COMPLETED",
            BackupVaultEvent::RestoreJobFailed => "RESTORE_JOB_FAILED",
            BackupVaultEvent::RestoreJobStarted => "RESTORE_JOB_STARTED",
            BackupVaultEvent::RestoreJobSuccessful => "RESTORE_JOB_SUCCESSFUL",
            BackupVaultEvent::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &[
            "BACKUP_JOB_COMPLETED",
            "BACKUP_JOB_EXPIRED",
            "BACKUP_JOB_FAILED",
            "BACKUP_JOB_STARTED",
            "BACKUP_JOB_SUCCESSFUL",
            "BACKUP_PLAN_CREATED",
            "BACKUP_PLAN_MODIFIED",
            "COPY_JOB_FAILED",
            "COPY_JOB_STARTED",
            "COPY_JOB_SUCCESSFUL",
            "RECOVERY_POINT_MODIFIED",
            "RESTORE_JOB_COMPLETED",
            "RESTORE_JOB_FAILED",
            "RESTORE_JOB_STARTED",
            "RESTORE_JOB_SUCCESSFUL",
        ]
    }
}
impl AsRef<str> for BackupVaultEvent {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Contains metadata about a restore job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreJobsListMember {
    /// <p>The account ID that owns the restore job.</p>
    pub account_id: std::option::Option<std::string::String>,
    /// <p>Uniquely identifies the job that restores a recovery point.</p>
    pub restore_job_id: std::option::Option<std::string::String>,
    /// <p>An ARN that uniquely identifies a recovery point; for example,
    /// <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub recovery_point_arn: std::option::Option<std::string::String>,
    /// <p>The date and time a restore job is created, in Unix format and Coordinated Universal
    /// Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For
    /// example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
    /// AM.</p>
    pub creation_date: std::option::Option<smithy_types::Instant>,
    /// <p>The date and time a job to restore a recovery point is completed, in Unix format and
    /// Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to
    /// milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018
    /// 12:11:30.087 AM.</p>
    pub completion_date: std::option::Option<smithy_types::Instant>,
    /// <p>A status code specifying the state of the job initiated by AWS Backup to restore a
    /// recovery point.</p>
    pub status: std::option::Option<crate::model::RestoreJobStatus>,
    /// <p>A detailed message explaining the status of the job to restore a recovery point.</p>
    pub status_message: std::option::Option<std::string::String>,
    /// <p>Contains an estimated percentage complete of a job at the time the job status was
    /// queried.</p>
    pub percent_done: std::option::Option<std::string::String>,
    /// <p>The size, in bytes, of the restored resource.</p>
    pub backup_size_in_bytes: std::option::Option<i64>,
    /// <p>Specifies the IAM role ARN used to create the target recovery point; for example,
    /// <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>The amount of time in minutes that a job restoring a recovery point is expected to
    /// take.</p>
    pub expected_completion_time_minutes: std::option::Option<i64>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN
    /// depends on the resource type.</p>
    pub created_resource_arn: std::option::Option<std::string::String>,
    /// <p>The resource type of the listed restore jobs; for example, an Amazon Elastic Block Store
    /// (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For VSS
    /// Windows backups, the only supported resource type is Amazon EC2.</p>
    pub resource_type: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RestoreJobsListMember {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreJobsListMember");
        formatter.field("account_id", &self.account_id);
        formatter.field("restore_job_id", &self.restore_job_id);
        formatter.field("recovery_point_arn", &self.recovery_point_arn);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("completion_date", &self.completion_date);
        formatter.field("status", &self.status);
        formatter.field("status_message", &self.status_message);
        formatter.field("percent_done", &self.percent_done);
        formatter.field("backup_size_in_bytes", &self.backup_size_in_bytes);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field(
            "expected_completion_time_minutes",
            &self.expected_completion_time_minutes,
        );
        formatter.field("created_resource_arn", &self.created_resource_arn);
        formatter.field("resource_type", &self.resource_type);
        formatter.finish()
    }
}
/// See [`RestoreJobsListMember`](crate::model::RestoreJobsListMember)
pub mod restore_jobs_list_member {
    /// A builder for [`RestoreJobsListMember`](crate::model::RestoreJobsListMember)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_id: std::option::Option<std::string::String>,
        pub(crate) restore_job_id: std::option::Option<std::string::String>,
        pub(crate) recovery_point_arn: std::option::Option<std::string::String>,
        pub(crate) creation_date: std::option::Option<smithy_types::Instant>,
        pub(crate) completion_date: std::option::Option<smithy_types::Instant>,
        pub(crate) status: std::option::Option<crate::model::RestoreJobStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) percent_done: std::option::Option<std::string::String>,
        pub(crate) backup_size_in_bytes: std::option::Option<i64>,
        pub(crate) iam_role_arn: std::option::Option<std::string::String>,
        pub(crate) expected_completion_time_minutes: std::option::Option<i64>,
        pub(crate) created_resource_arn: std::option::Option<std::string::String>,
        pub(crate) resource_type: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The account ID that owns the restore job.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.account_id = Some(input.into());
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.account_id = input;
            self
        }
        /// <p>Uniquely identifies the job that restores a recovery point.</p>
        pub fn restore_job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.restore_job_id = Some(input.into());
            self
        }
        pub fn set_restore_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.restore_job_id = input;
            self
        }
        /// <p>An ARN that uniquely identifies a recovery point; for example,
        /// <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
        pub fn recovery_point_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.recovery_point_arn = Some(input.into());
            self
        }
        pub fn set_recovery_point_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recovery_point_arn = input;
            self
        }
        /// <p>The date and time a restore job is created, in Unix format and Coordinated Universal
        /// Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For
        /// example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
        /// AM.</p>
        pub fn creation_date(mut self, input: smithy_types::Instant) -> Self {
            self.creation_date = Some(input);
            self
        }
        pub fn set_creation_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.creation_date = input;
            self
        }
        /// <p>The date and time a job to restore a recovery point is completed, in Unix format and
        /// Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to
        /// milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018
        /// 12:11:30.087 AM.</p>
        pub fn completion_date(mut self, input: smithy_types::Instant) -> Self {
            self.completion_date = Some(input);
            self
        }
        pub fn set_completion_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.completion_date = input;
            self
        }
        /// <p>A status code specifying the state of the job initiated by AWS Backup to restore a
        /// recovery point.</p>
        pub fn status(mut self, input: crate::model::RestoreJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::RestoreJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A detailed message explaining the status of the job to restore a recovery point.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>Contains an estimated percentage complete of a job at the time the job status was
        /// queried.</p>
        pub fn percent_done(mut self, input: impl Into<std::string::String>) -> Self {
            self.percent_done = Some(input.into());
            self
        }
        pub fn set_percent_done(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.percent_done = input;
            self
        }
        /// <p>The size, in bytes, of the restored resource.</p>
        pub fn backup_size_in_bytes(mut self, input: i64) -> Self {
            self.backup_size_in_bytes = Some(input);
            self
        }
        pub fn set_backup_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
            self.backup_size_in_bytes = input;
            self
        }
        /// <p>Specifies the IAM role ARN used to create the target recovery point; for example,
        /// <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
        pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.iam_role_arn = Some(input.into());
            self
        }
        pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.iam_role_arn = input;
            self
        }
        /// <p>The amount of time in minutes that a job restoring a recovery point is expected to
        /// take.</p>
        pub fn expected_completion_time_minutes(mut self, input: i64) -> Self {
            self.expected_completion_time_minutes = Some(input);
            self
        }
        pub fn set_expected_completion_time_minutes(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.expected_completion_time_minutes = input;
            self
        }
        /// <p>An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN
        /// depends on the resource type.</p>
        pub fn created_resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.created_resource_arn = Some(input.into());
            self
        }
        pub fn set_created_resource_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.created_resource_arn = input;
            self
        }
        /// <p>The resource type of the listed restore jobs; for example, an Amazon Elastic Block Store
        /// (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For VSS
        /// Windows backups, the only supported resource type is Amazon EC2.</p>
        pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_type = Some(input.into());
            self
        }
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreJobsListMember`](crate::model::RestoreJobsListMember)
        pub fn build(self) -> crate::model::RestoreJobsListMember {
            crate::model::RestoreJobsListMember {
                account_id: self.account_id,
                restore_job_id: self.restore_job_id,
                recovery_point_arn: self.recovery_point_arn,
                creation_date: self.creation_date,
                completion_date: self.completion_date,
                status: self.status,
                status_message: self.status_message,
                percent_done: self.percent_done,
                backup_size_in_bytes: self.backup_size_in_bytes,
                iam_role_arn: self.iam_role_arn,
                expected_completion_time_minutes: self.expected_completion_time_minutes,
                created_resource_arn: self.created_resource_arn,
                resource_type: self.resource_type,
            }
        }
    }
}
impl RestoreJobsListMember {
    /// Creates a new builder-style object to manufacture [`RestoreJobsListMember`](crate::model::RestoreJobsListMember)
    pub fn builder() -> crate::model::restore_jobs_list_member::Builder {
        crate::model::restore_jobs_list_member::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum RestoreJobStatus {
    Aborted,
    Completed,
    Failed,
    Pending,
    Running,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for RestoreJobStatus {
    fn from(s: &str) -> Self {
        match s {
            "ABORTED" => RestoreJobStatus::Aborted,
            "COMPLETED" => RestoreJobStatus::Completed,
            "FAILED" => RestoreJobStatus::Failed,
            "PENDING" => RestoreJobStatus::Pending,
            "RUNNING" => RestoreJobStatus::Running,
            other => RestoreJobStatus::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for RestoreJobStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(RestoreJobStatus::from(s))
    }
}
impl RestoreJobStatus {
    pub fn as_str(&self) -> &str {
        match self {
            RestoreJobStatus::Aborted => "ABORTED",
            RestoreJobStatus::Completed => "COMPLETED",
            RestoreJobStatus::Failed => "FAILED",
            RestoreJobStatus::Pending => "PENDING",
            RestoreJobStatus::Running => "RUNNING",
            RestoreJobStatus::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["ABORTED", "COMPLETED", "FAILED", "PENDING", "RUNNING"]
    }
}
impl AsRef<str> for RestoreJobStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Contains detailed information about a saved recovery point.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RecoveryPointByResource {
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example,
    /// <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub recovery_point_arn: std::option::Option<std::string::String>,
    /// <p>The date and time a recovery point is created, in Unix format and Coordinated Universal
    /// Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For
    /// example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
    /// AM.</p>
    pub creation_date: std::option::Option<smithy_types::Instant>,
    /// <p>A status code specifying the state of the recovery point.</p>
    pub status: std::option::Option<crate::model::RecoveryPointStatus>,
    /// <p>The server-side encryption key that is used to protect your backups; for example,
    /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub encryption_key_arn: std::option::Option<std::string::String>,
    /// <p>The size, in bytes, of a backup.</p>
    pub backup_size_bytes: std::option::Option<i64>,
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified
    /// by names that are unique to the account used to create them and the AWS Region where they
    /// are created. They consist of lowercase letters, numbers, and hyphens.</p>
    pub backup_vault_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RecoveryPointByResource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RecoveryPointByResource");
        formatter.field("recovery_point_arn", &self.recovery_point_arn);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("status", &self.status);
        formatter.field("encryption_key_arn", &self.encryption_key_arn);
        formatter.field("backup_size_bytes", &self.backup_size_bytes);
        formatter.field("backup_vault_name", &self.backup_vault_name);
        formatter.finish()
    }
}
/// See [`RecoveryPointByResource`](crate::model::RecoveryPointByResource)
pub mod recovery_point_by_resource {
    /// A builder for [`RecoveryPointByResource`](crate::model::RecoveryPointByResource)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) recovery_point_arn: std::option::Option<std::string::String>,
        pub(crate) creation_date: std::option::Option<smithy_types::Instant>,
        pub(crate) status: std::option::Option<crate::model::RecoveryPointStatus>,
        pub(crate) encryption_key_arn: std::option::Option<std::string::String>,
        pub(crate) backup_size_bytes: std::option::Option<i64>,
        pub(crate) backup_vault_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example,
        /// <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
        pub fn recovery_point_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.recovery_point_arn = Some(input.into());
            self
        }
        pub fn set_recovery_point_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recovery_point_arn = input;
            self
        }
        /// <p>The date and time a recovery point is created, in Unix format and Coordinated Universal
        /// Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For
        /// example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
        /// AM.</p>
        pub fn creation_date(mut self, input: smithy_types::Instant) -> Self {
            self.creation_date = Some(input);
            self
        }
        pub fn set_creation_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.creation_date = input;
            self
        }
        /// <p>A status code specifying the state of the recovery point.</p>
        pub fn status(mut self, input: crate::model::RecoveryPointStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::RecoveryPointStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The server-side encryption key that is used to protect your backups; for example,
        /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
        pub fn encryption_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.encryption_key_arn = Some(input.into());
            self
        }
        pub fn set_encryption_key_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.encryption_key_arn = input;
            self
        }
        /// <p>The size, in bytes, of a backup.</p>
        pub fn backup_size_bytes(mut self, input: i64) -> Self {
            self.backup_size_bytes = Some(input);
            self
        }
        pub fn set_backup_size_bytes(mut self, input: std::option::Option<i64>) -> Self {
            self.backup_size_bytes = input;
            self
        }
        /// <p>The name of a logical container where backups are stored. Backup vaults are identified
        /// by names that are unique to the account used to create them and the AWS Region where they
        /// are created. They consist of lowercase letters, numbers, and hyphens.</p>
        pub fn backup_vault_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_vault_name = Some(input.into());
            self
        }
        pub fn set_backup_vault_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_vault_name = input;
            self
        }
        /// Consumes the builder and constructs a [`RecoveryPointByResource`](crate::model::RecoveryPointByResource)
        pub fn build(self) -> crate::model::RecoveryPointByResource {
            crate::model::RecoveryPointByResource {
                recovery_point_arn: self.recovery_point_arn,
                creation_date: self.creation_date,
                status: self.status,
                encryption_key_arn: self.encryption_key_arn,
                backup_size_bytes: self.backup_size_bytes,
                backup_vault_name: self.backup_vault_name,
            }
        }
    }
}
impl RecoveryPointByResource {
    /// Creates a new builder-style object to manufacture [`RecoveryPointByResource`](crate::model::RecoveryPointByResource)
    pub fn builder() -> crate::model::recovery_point_by_resource::Builder {
        crate::model::recovery_point_by_resource::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum RecoveryPointStatus {
    Completed,
    Deleting,
    Expired,
    Partial,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for RecoveryPointStatus {
    fn from(s: &str) -> Self {
        match s {
            "COMPLETED" => RecoveryPointStatus::Completed,
            "DELETING" => RecoveryPointStatus::Deleting,
            "EXPIRED" => RecoveryPointStatus::Expired,
            "PARTIAL" => RecoveryPointStatus::Partial,
            other => RecoveryPointStatus::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for RecoveryPointStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(RecoveryPointStatus::from(s))
    }
}
impl RecoveryPointStatus {
    pub fn as_str(&self) -> &str {
        match self {
            RecoveryPointStatus::Completed => "COMPLETED",
            RecoveryPointStatus::Deleting => "DELETING",
            RecoveryPointStatus::Expired => "EXPIRED",
            RecoveryPointStatus::Partial => "PARTIAL",
            RecoveryPointStatus::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["COMPLETED", "DELETING", "EXPIRED", "PARTIAL"]
    }
}
impl AsRef<str> for RecoveryPointStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Contains detailed information about the recovery points stored in a backup vault.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RecoveryPointByBackupVault {
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example,
    /// <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub recovery_point_arn: std::option::Option<std::string::String>,
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified
    /// by names that are unique to the account used to create them and the AWS Region where they
    /// are created. They consist of lowercase letters, numbers, and hyphens.</p>
    pub backup_vault_name: std::option::Option<std::string::String>,
    /// <p>An ARN that uniquely identifies a backup vault; for example,
    /// <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    pub backup_vault_arn: std::option::Option<std::string::String>,
    /// <p>The backup vault where the recovery point was originally copied from. If the recovery
    /// point is restored to the same account this value will be <code>null</code>.</p>
    pub source_backup_vault_arn: std::option::Option<std::string::String>,
    /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the
    /// resource type.</p>
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The type of AWS resource saved as a recovery point; for example, an Amazon Elastic Block
    /// Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.
    /// For VSS Windows backups, the only supported resource type is Amazon EC2.</p>
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>Contains identifying information about the creation of a recovery point, including the
    /// <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>,
    /// and <code>BackupRuleId</code> of the backup plan that is used to create it.</p>
    pub created_by: std::option::Option<crate::model::RecoveryPointCreator>,
    /// <p>Specifies the IAM role ARN used to create the target recovery point; for example,
    /// <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>A status code specifying the state of the recovery point.</p>
    pub status: std::option::Option<crate::model::RecoveryPointStatus>,
    /// <p>The date and time a recovery point is created, in Unix format and Coordinated Universal
    /// Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For
    /// example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
    /// AM.</p>
    pub creation_date: std::option::Option<smithy_types::Instant>,
    /// <p>The date and time a job to restore a recovery point is completed, in Unix format and
    /// Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to
    /// milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018
    /// 12:11:30.087 AM.</p>
    pub completion_date: std::option::Option<smithy_types::Instant>,
    /// <p>The size, in bytes, of a backup.</p>
    pub backup_size_in_bytes: std::option::Option<i64>,
    /// <p>A <code>CalculatedLifecycle</code> object containing <code>DeleteAt</code> and
    /// <code>MoveToColdStorageAt</code> timestamps.</p>
    pub calculated_lifecycle: std::option::Option<crate::model::CalculatedLifecycle>,
    /// <p>The lifecycle defines when a protected resource is transitioned to cold storage and when
    /// it expires. AWS Backup transitions and expires backups automatically according to the
    /// lifecycle that you define. </p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90
    /// days. Therefore, the “expire after days” setting must be 90 days greater than the
    /// “transition to cold after days” setting. The “transition to cold after days” setting cannot
    /// be changed after a backup has been transitioned to cold. </p>
    /// <p>Only Amazon EFS file system backups can be transitioned to cold storage.</p>
    pub lifecycle: std::option::Option<crate::model::Lifecycle>,
    /// <p>The server-side encryption key that is used to protect your backups; for example,
    /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub encryption_key_arn: std::option::Option<std::string::String>,
    /// <p>A Boolean value that is returned as <code>TRUE</code> if the specified recovery point is
    /// encrypted, or <code>FALSE</code> if the recovery point is not encrypted.</p>
    pub is_encrypted: bool,
    /// <p>The date and time a recovery point was last restored, in Unix format and Coordinated
    /// Universal Time (UTC). The value of <code>LastRestoreTime</code> is accurate to
    /// milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018
    /// 12:11:30.087 AM.</p>
    pub last_restore_time: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for RecoveryPointByBackupVault {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RecoveryPointByBackupVault");
        formatter.field("recovery_point_arn", &self.recovery_point_arn);
        formatter.field("backup_vault_name", &self.backup_vault_name);
        formatter.field("backup_vault_arn", &self.backup_vault_arn);
        formatter.field("source_backup_vault_arn", &self.source_backup_vault_arn);
        formatter.field("resource_arn", &self.resource_arn);
        formatter.field("resource_type", &self.resource_type);
        formatter.field("created_by", &self.created_by);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("status", &self.status);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("completion_date", &self.completion_date);
        formatter.field("backup_size_in_bytes", &self.backup_size_in_bytes);
        formatter.field("calculated_lifecycle", &self.calculated_lifecycle);
        formatter.field("lifecycle", &self.lifecycle);
        formatter.field("encryption_key_arn", &self.encryption_key_arn);
        formatter.field("is_encrypted", &self.is_encrypted);
        formatter.field("last_restore_time", &self.last_restore_time);
        formatter.finish()
    }
}
/// See [`RecoveryPointByBackupVault`](crate::model::RecoveryPointByBackupVault)
pub mod recovery_point_by_backup_vault {
    /// A builder for [`RecoveryPointByBackupVault`](crate::model::RecoveryPointByBackupVault)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) recovery_point_arn: std::option::Option<std::string::String>,
        pub(crate) backup_vault_name: std::option::Option<std::string::String>,
        pub(crate) backup_vault_arn: std::option::Option<std::string::String>,
        pub(crate) source_backup_vault_arn: std::option::Option<std::string::String>,
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        pub(crate) resource_type: std::option::Option<std::string::String>,
        pub(crate) created_by: std::option::Option<crate::model::RecoveryPointCreator>,
        pub(crate) iam_role_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::RecoveryPointStatus>,
        pub(crate) creation_date: std::option::Option<smithy_types::Instant>,
        pub(crate) completion_date: std::option::Option<smithy_types::Instant>,
        pub(crate) backup_size_in_bytes: std::option::Option<i64>,
        pub(crate) calculated_lifecycle: std::option::Option<crate::model::CalculatedLifecycle>,
        pub(crate) lifecycle: std::option::Option<crate::model::Lifecycle>,
        pub(crate) encryption_key_arn: std::option::Option<std::string::String>,
        pub(crate) is_encrypted: std::option::Option<bool>,
        pub(crate) last_restore_time: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        /// <p>An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example,
        /// <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
        pub fn recovery_point_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.recovery_point_arn = Some(input.into());
            self
        }
        pub fn set_recovery_point_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recovery_point_arn = input;
            self
        }
        /// <p>The name of a logical container where backups are stored. Backup vaults are identified
        /// by names that are unique to the account used to create them and the AWS Region where they
        /// are created. They consist of lowercase letters, numbers, and hyphens.</p>
        pub fn backup_vault_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_vault_name = Some(input.into());
            self
        }
        pub fn set_backup_vault_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_vault_name = input;
            self
        }
        /// <p>An ARN that uniquely identifies a backup vault; for example,
        /// <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
        pub fn backup_vault_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_vault_arn = Some(input.into());
            self
        }
        pub fn set_backup_vault_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_vault_arn = input;
            self
        }
        /// <p>The backup vault where the recovery point was originally copied from. If the recovery
        /// point is restored to the same account this value will be <code>null</code>.</p>
        pub fn source_backup_vault_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_backup_vault_arn = Some(input.into());
            self
        }
        pub fn set_source_backup_vault_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_backup_vault_arn = input;
            self
        }
        /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the
        /// resource type.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        /// <p>The type of AWS resource saved as a recovery point; for example, an Amazon Elastic Block
        /// Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.
        /// For VSS Windows backups, the only supported resource type is Amazon EC2.</p>
        pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_type = Some(input.into());
            self
        }
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// <p>Contains identifying information about the creation of a recovery point, including the
        /// <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>,
        /// and <code>BackupRuleId</code> of the backup plan that is used to create it.</p>
        pub fn created_by(mut self, input: crate::model::RecoveryPointCreator) -> Self {
            self.created_by = Some(input);
            self
        }
        pub fn set_created_by(
            mut self,
            input: std::option::Option<crate::model::RecoveryPointCreator>,
        ) -> Self {
            self.created_by = input;
            self
        }
        /// <p>Specifies the IAM role ARN used to create the target recovery point; for example,
        /// <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
        pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.iam_role_arn = Some(input.into());
            self
        }
        pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.iam_role_arn = input;
            self
        }
        /// <p>A status code specifying the state of the recovery point.</p>
        pub fn status(mut self, input: crate::model::RecoveryPointStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::RecoveryPointStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The date and time a recovery point is created, in Unix format and Coordinated Universal
        /// Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For
        /// example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
        /// AM.</p>
        pub fn creation_date(mut self, input: smithy_types::Instant) -> Self {
            self.creation_date = Some(input);
            self
        }
        pub fn set_creation_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.creation_date = input;
            self
        }
        /// <p>The date and time a job to restore a recovery point is completed, in Unix format and
        /// Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to
        /// milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018
        /// 12:11:30.087 AM.</p>
        pub fn completion_date(mut self, input: smithy_types::Instant) -> Self {
            self.completion_date = Some(input);
            self
        }
        pub fn set_completion_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.completion_date = input;
            self
        }
        /// <p>The size, in bytes, of a backup.</p>
        pub fn backup_size_in_bytes(mut self, input: i64) -> Self {
            self.backup_size_in_bytes = Some(input);
            self
        }
        pub fn set_backup_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
            self.backup_size_in_bytes = input;
            self
        }
        /// <p>A <code>CalculatedLifecycle</code> object containing <code>DeleteAt</code> and
        /// <code>MoveToColdStorageAt</code> timestamps.</p>
        pub fn calculated_lifecycle(mut self, input: crate::model::CalculatedLifecycle) -> Self {
            self.calculated_lifecycle = Some(input);
            self
        }
        pub fn set_calculated_lifecycle(
            mut self,
            input: std::option::Option<crate::model::CalculatedLifecycle>,
        ) -> Self {
            self.calculated_lifecycle = input;
            self
        }
        /// <p>The lifecycle defines when a protected resource is transitioned to cold storage and when
        /// it expires. AWS Backup transitions and expires backups automatically according to the
        /// lifecycle that you define. </p>
        /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90
        /// days. Therefore, the “expire after days” setting must be 90 days greater than the
        /// “transition to cold after days” setting. The “transition to cold after days” setting cannot
        /// be changed after a backup has been transitioned to cold. </p>
        /// <p>Only Amazon EFS file system backups can be transitioned to cold storage.</p>
        pub fn lifecycle(mut self, input: crate::model::Lifecycle) -> Self {
            self.lifecycle = Some(input);
            self
        }
        pub fn set_lifecycle(
            mut self,
            input: std::option::Option<crate::model::Lifecycle>,
        ) -> Self {
            self.lifecycle = input;
            self
        }
        /// <p>The server-side encryption key that is used to protect your backups; for example,
        /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
        pub fn encryption_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.encryption_key_arn = Some(input.into());
            self
        }
        pub fn set_encryption_key_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.encryption_key_arn = input;
            self
        }
        /// <p>A Boolean value that is returned as <code>TRUE</code> if the specified recovery point is
        /// encrypted, or <code>FALSE</code> if the recovery point is not encrypted.</p>
        pub fn is_encrypted(mut self, input: bool) -> Self {
            self.is_encrypted = Some(input);
            self
        }
        pub fn set_is_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.is_encrypted = input;
            self
        }
        /// <p>The date and time a recovery point was last restored, in Unix format and Coordinated
        /// Universal Time (UTC). The value of <code>LastRestoreTime</code> is accurate to
        /// milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018
        /// 12:11:30.087 AM.</p>
        pub fn last_restore_time(mut self, input: smithy_types::Instant) -> Self {
            self.last_restore_time = Some(input);
            self
        }
        pub fn set_last_restore_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_restore_time = input;
            self
        }
        /// Consumes the builder and constructs a [`RecoveryPointByBackupVault`](crate::model::RecoveryPointByBackupVault)
        pub fn build(self) -> crate::model::RecoveryPointByBackupVault {
            crate::model::RecoveryPointByBackupVault {
                recovery_point_arn: self.recovery_point_arn,
                backup_vault_name: self.backup_vault_name,
                backup_vault_arn: self.backup_vault_arn,
                source_backup_vault_arn: self.source_backup_vault_arn,
                resource_arn: self.resource_arn,
                resource_type: self.resource_type,
                created_by: self.created_by,
                iam_role_arn: self.iam_role_arn,
                status: self.status,
                creation_date: self.creation_date,
                completion_date: self.completion_date,
                backup_size_in_bytes: self.backup_size_in_bytes,
                calculated_lifecycle: self.calculated_lifecycle,
                lifecycle: self.lifecycle,
                encryption_key_arn: self.encryption_key_arn,
                is_encrypted: self.is_encrypted.unwrap_or_default(),
                last_restore_time: self.last_restore_time,
            }
        }
    }
}
impl RecoveryPointByBackupVault {
    /// Creates a new builder-style object to manufacture [`RecoveryPointByBackupVault`](crate::model::RecoveryPointByBackupVault)
    pub fn builder() -> crate::model::recovery_point_by_backup_vault::Builder {
        crate::model::recovery_point_by_backup_vault::Builder::default()
    }
}

/// <p>Contains information about the backup plan and rule that AWS Backup used to initiate the
/// recovery point backup.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RecoveryPointCreator {
    /// <p>Uniquely identifies a backup plan.</p>
    pub backup_plan_id: std::option::Option<std::string::String>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup plan; for example,
    /// <code>arn:aws:backup:us-east-1:123456789012:plan:8F81F553-3A74-4A3F-B93D-B3360DC80C50</code>.</p>
    pub backup_plan_arn: std::option::Option<std::string::String>,
    /// <p>Version IDs are unique, randomly generated, Unicode, UTF-8 encoded strings that are at
    /// most 1,024 bytes long. They cannot be edited.</p>
    pub backup_plan_version: std::option::Option<std::string::String>,
    /// <p>Uniquely identifies a rule used to schedule the backup of a selection of
    /// resources.</p>
    pub backup_rule_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RecoveryPointCreator {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RecoveryPointCreator");
        formatter.field("backup_plan_id", &self.backup_plan_id);
        formatter.field("backup_plan_arn", &self.backup_plan_arn);
        formatter.field("backup_plan_version", &self.backup_plan_version);
        formatter.field("backup_rule_id", &self.backup_rule_id);
        formatter.finish()
    }
}
/// See [`RecoveryPointCreator`](crate::model::RecoveryPointCreator)
pub mod recovery_point_creator {
    /// A builder for [`RecoveryPointCreator`](crate::model::RecoveryPointCreator)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) backup_plan_id: std::option::Option<std::string::String>,
        pub(crate) backup_plan_arn: std::option::Option<std::string::String>,
        pub(crate) backup_plan_version: std::option::Option<std::string::String>,
        pub(crate) backup_rule_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Uniquely identifies a backup plan.</p>
        pub fn backup_plan_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_plan_id = Some(input.into());
            self
        }
        pub fn set_backup_plan_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_plan_id = input;
            self
        }
        /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup plan; for example,
        /// <code>arn:aws:backup:us-east-1:123456789012:plan:8F81F553-3A74-4A3F-B93D-B3360DC80C50</code>.</p>
        pub fn backup_plan_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_plan_arn = Some(input.into());
            self
        }
        pub fn set_backup_plan_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_plan_arn = input;
            self
        }
        /// <p>Version IDs are unique, randomly generated, Unicode, UTF-8 encoded strings that are at
        /// most 1,024 bytes long. They cannot be edited.</p>
        pub fn backup_plan_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_plan_version = Some(input.into());
            self
        }
        pub fn set_backup_plan_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_plan_version = input;
            self
        }
        /// <p>Uniquely identifies a rule used to schedule the backup of a selection of
        /// resources.</p>
        pub fn backup_rule_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_rule_id = Some(input.into());
            self
        }
        pub fn set_backup_rule_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_rule_id = input;
            self
        }
        /// Consumes the builder and constructs a [`RecoveryPointCreator`](crate::model::RecoveryPointCreator)
        pub fn build(self) -> crate::model::RecoveryPointCreator {
            crate::model::RecoveryPointCreator {
                backup_plan_id: self.backup_plan_id,
                backup_plan_arn: self.backup_plan_arn,
                backup_plan_version: self.backup_plan_version,
                backup_rule_id: self.backup_rule_id,
            }
        }
    }
}
impl RecoveryPointCreator {
    /// Creates a new builder-style object to manufacture [`RecoveryPointCreator`](crate::model::RecoveryPointCreator)
    pub fn builder() -> crate::model::recovery_point_creator::Builder {
        crate::model::recovery_point_creator::Builder::default()
    }
}

/// <p>A structure that contains information about a backed-up resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ProtectedResource {
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN
    /// depends on the resource type.</p>
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The type of AWS resource; for example, an Amazon Elastic Block Store (Amazon EBS) volume
    /// or an Amazon Relational Database Service (Amazon RDS) database. For VSS Windows backups,
    /// the only supported resource type is Amazon EC2.</p>
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>The date and time a resource was last backed up, in Unix format and Coordinated
    /// Universal Time (UTC). The value of <code>LastBackupTime</code> is accurate to milliseconds.
    /// For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
    /// AM.</p>
    pub last_backup_time: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for ProtectedResource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ProtectedResource");
        formatter.field("resource_arn", &self.resource_arn);
        formatter.field("resource_type", &self.resource_type);
        formatter.field("last_backup_time", &self.last_backup_time);
        formatter.finish()
    }
}
/// See [`ProtectedResource`](crate::model::ProtectedResource)
pub mod protected_resource {
    /// A builder for [`ProtectedResource`](crate::model::ProtectedResource)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        pub(crate) resource_type: std::option::Option<std::string::String>,
        pub(crate) last_backup_time: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        /// <p>An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN
        /// depends on the resource type.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        /// <p>The type of AWS resource; for example, an Amazon Elastic Block Store (Amazon EBS) volume
        /// or an Amazon Relational Database Service (Amazon RDS) database. For VSS Windows backups,
        /// the only supported resource type is Amazon EC2.</p>
        pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_type = Some(input.into());
            self
        }
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// <p>The date and time a resource was last backed up, in Unix format and Coordinated
        /// Universal Time (UTC). The value of <code>LastBackupTime</code> is accurate to milliseconds.
        /// For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
        /// AM.</p>
        pub fn last_backup_time(mut self, input: smithy_types::Instant) -> Self {
            self.last_backup_time = Some(input);
            self
        }
        pub fn set_last_backup_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_backup_time = input;
            self
        }
        /// Consumes the builder and constructs a [`ProtectedResource`](crate::model::ProtectedResource)
        pub fn build(self) -> crate::model::ProtectedResource {
            crate::model::ProtectedResource {
                resource_arn: self.resource_arn,
                resource_type: self.resource_type,
                last_backup_time: self.last_backup_time,
            }
        }
    }
}
impl ProtectedResource {
    /// Creates a new builder-style object to manufacture [`ProtectedResource`](crate::model::ProtectedResource)
    pub fn builder() -> crate::model::protected_resource::Builder {
        crate::model::protected_resource::Builder::default()
    }
}

/// <p>Contains detailed information about a copy job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyJob {
    /// <p>The account ID that owns the copy job.</p>
    pub account_id: std::option::Option<std::string::String>,
    /// <p>Uniquely identifies a copy job.</p>
    pub copy_job_id: std::option::Option<std::string::String>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a source copy vault; for example,
    /// <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>. </p>
    pub source_backup_vault_arn: std::option::Option<std::string::String>,
    /// <p>An ARN that uniquely identifies a source recovery point; for example,
    /// <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub source_recovery_point_arn: std::option::Option<std::string::String>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a destination copy vault; for
    /// example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    pub destination_backup_vault_arn: std::option::Option<std::string::String>,
    /// <p>An ARN that uniquely identifies a destination recovery point; for example,
    /// <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub destination_recovery_point_arn: std::option::Option<std::string::String>,
    /// <p>The AWS resource to be copied; for example, an Amazon Elastic Block Store (Amazon EBS)
    /// volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The date and time a copy job is created, in Unix format and Coordinated Universal Time
    /// (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the
    /// value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub creation_date: std::option::Option<smithy_types::Instant>,
    /// <p>The date and time a copy job is completed, in Unix format and Coordinated Universal Time
    /// (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example,
    /// the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub completion_date: std::option::Option<smithy_types::Instant>,
    /// <p>The current state of a copy job.</p>
    pub state: std::option::Option<crate::model::CopyJobState>,
    /// <p>A detailed message explaining the status of the job to copy a resource.</p>
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The size, in bytes, of a copy job.</p>
    pub backup_size_in_bytes: std::option::Option<i64>,
    /// <p>Specifies the IAM role ARN used to copy the target recovery point; for example,
    /// <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>Contains information about the backup plan and rule that AWS Backup used to initiate the
    /// recovery point backup.</p>
    pub created_by: std::option::Option<crate::model::RecoveryPointCreator>,
    /// <p>The type of AWS resource to be copied; for example, an Amazon Elastic Block Store
    /// (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub resource_type: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CopyJob {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyJob");
        formatter.field("account_id", &self.account_id);
        formatter.field("copy_job_id", &self.copy_job_id);
        formatter.field("source_backup_vault_arn", &self.source_backup_vault_arn);
        formatter.field("source_recovery_point_arn", &self.source_recovery_point_arn);
        formatter.field(
            "destination_backup_vault_arn",
            &self.destination_backup_vault_arn,
        );
        formatter.field(
            "destination_recovery_point_arn",
            &self.destination_recovery_point_arn,
        );
        formatter.field("resource_arn", &self.resource_arn);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("completion_date", &self.completion_date);
        formatter.field("state", &self.state);
        formatter.field("status_message", &self.status_message);
        formatter.field("backup_size_in_bytes", &self.backup_size_in_bytes);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("created_by", &self.created_by);
        formatter.field("resource_type", &self.resource_type);
        formatter.finish()
    }
}
/// See [`CopyJob`](crate::model::CopyJob)
pub mod copy_job {
    /// A builder for [`CopyJob`](crate::model::CopyJob)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_id: std::option::Option<std::string::String>,
        pub(crate) copy_job_id: std::option::Option<std::string::String>,
        pub(crate) source_backup_vault_arn: std::option::Option<std::string::String>,
        pub(crate) source_recovery_point_arn: std::option::Option<std::string::String>,
        pub(crate) destination_backup_vault_arn: std::option::Option<std::string::String>,
        pub(crate) destination_recovery_point_arn: std::option::Option<std::string::String>,
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        pub(crate) creation_date: std::option::Option<smithy_types::Instant>,
        pub(crate) completion_date: std::option::Option<smithy_types::Instant>,
        pub(crate) state: std::option::Option<crate::model::CopyJobState>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) backup_size_in_bytes: std::option::Option<i64>,
        pub(crate) iam_role_arn: std::option::Option<std::string::String>,
        pub(crate) created_by: std::option::Option<crate::model::RecoveryPointCreator>,
        pub(crate) resource_type: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The account ID that owns the copy job.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.account_id = Some(input.into());
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.account_id = input;
            self
        }
        /// <p>Uniquely identifies a copy job.</p>
        pub fn copy_job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.copy_job_id = Some(input.into());
            self
        }
        pub fn set_copy_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.copy_job_id = input;
            self
        }
        /// <p>An Amazon Resource Name (ARN) that uniquely identifies a source copy vault; for example,
        /// <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>. </p>
        pub fn source_backup_vault_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_backup_vault_arn = Some(input.into());
            self
        }
        pub fn set_source_backup_vault_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_backup_vault_arn = input;
            self
        }
        /// <p>An ARN that uniquely identifies a source recovery point; for example,
        /// <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
        pub fn source_recovery_point_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_recovery_point_arn = Some(input.into());
            self
        }
        pub fn set_source_recovery_point_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_recovery_point_arn = input;
            self
        }
        /// <p>An Amazon Resource Name (ARN) that uniquely identifies a destination copy vault; for
        /// example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
        pub fn destination_backup_vault_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.destination_backup_vault_arn = Some(input.into());
            self
        }
        pub fn set_destination_backup_vault_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.destination_backup_vault_arn = input;
            self
        }
        /// <p>An ARN that uniquely identifies a destination recovery point; for example,
        /// <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
        pub fn destination_recovery_point_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.destination_recovery_point_arn = Some(input.into());
            self
        }
        pub fn set_destination_recovery_point_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.destination_recovery_point_arn = input;
            self
        }
        /// <p>The AWS resource to be copied; for example, an Amazon Elastic Block Store (Amazon EBS)
        /// volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        /// <p>The date and time a copy job is created, in Unix format and Coordinated Universal Time
        /// (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the
        /// value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
        pub fn creation_date(mut self, input: smithy_types::Instant) -> Self {
            self.creation_date = Some(input);
            self
        }
        pub fn set_creation_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.creation_date = input;
            self
        }
        /// <p>The date and time a copy job is completed, in Unix format and Coordinated Universal Time
        /// (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example,
        /// the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
        pub fn completion_date(mut self, input: smithy_types::Instant) -> Self {
            self.completion_date = Some(input);
            self
        }
        pub fn set_completion_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.completion_date = input;
            self
        }
        /// <p>The current state of a copy job.</p>
        pub fn state(mut self, input: crate::model::CopyJobState) -> Self {
            self.state = Some(input);
            self
        }
        pub fn set_state(mut self, input: std::option::Option<crate::model::CopyJobState>) -> Self {
            self.state = input;
            self
        }
        /// <p>A detailed message explaining the status of the job to copy a resource.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>The size, in bytes, of a copy job.</p>
        pub fn backup_size_in_bytes(mut self, input: i64) -> Self {
            self.backup_size_in_bytes = Some(input);
            self
        }
        pub fn set_backup_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
            self.backup_size_in_bytes = input;
            self
        }
        /// <p>Specifies the IAM role ARN used to copy the target recovery point; for example,
        /// <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
        pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.iam_role_arn = Some(input.into());
            self
        }
        pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.iam_role_arn = input;
            self
        }
        /// <p>Contains information about the backup plan and rule that AWS Backup used to initiate the
        /// recovery point backup.</p>
        pub fn created_by(mut self, input: crate::model::RecoveryPointCreator) -> Self {
            self.created_by = Some(input);
            self
        }
        pub fn set_created_by(
            mut self,
            input: std::option::Option<crate::model::RecoveryPointCreator>,
        ) -> Self {
            self.created_by = input;
            self
        }
        /// <p>The type of AWS resource to be copied; for example, an Amazon Elastic Block Store
        /// (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
        pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_type = Some(input.into());
            self
        }
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// Consumes the builder and constructs a [`CopyJob`](crate::model::CopyJob)
        pub fn build(self) -> crate::model::CopyJob {
            crate::model::CopyJob {
                account_id: self.account_id,
                copy_job_id: self.copy_job_id,
                source_backup_vault_arn: self.source_backup_vault_arn,
                source_recovery_point_arn: self.source_recovery_point_arn,
                destination_backup_vault_arn: self.destination_backup_vault_arn,
                destination_recovery_point_arn: self.destination_recovery_point_arn,
                resource_arn: self.resource_arn,
                creation_date: self.creation_date,
                completion_date: self.completion_date,
                state: self.state,
                status_message: self.status_message,
                backup_size_in_bytes: self.backup_size_in_bytes,
                iam_role_arn: self.iam_role_arn,
                created_by: self.created_by,
                resource_type: self.resource_type,
            }
        }
    }
}
impl CopyJob {
    /// Creates a new builder-style object to manufacture [`CopyJob`](crate::model::CopyJob)
    pub fn builder() -> crate::model::copy_job::Builder {
        crate::model::copy_job::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CopyJobState {
    Completed,
    Created,
    Failed,
    Running,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for CopyJobState {
    fn from(s: &str) -> Self {
        match s {
            "COMPLETED" => CopyJobState::Completed,
            "CREATED" => CopyJobState::Created,
            "FAILED" => CopyJobState::Failed,
            "RUNNING" => CopyJobState::Running,
            other => CopyJobState::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for CopyJobState {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CopyJobState::from(s))
    }
}
impl CopyJobState {
    pub fn as_str(&self) -> &str {
        match self {
            CopyJobState::Completed => "COMPLETED",
            CopyJobState::Created => "CREATED",
            CopyJobState::Failed => "FAILED",
            CopyJobState::Running => "RUNNING",
            CopyJobState::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["COMPLETED", "CREATED", "FAILED", "RUNNING"]
    }
}
impl AsRef<str> for CopyJobState {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Contains metadata about a backup vault.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BackupVaultListMember {
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified
    /// by names that are unique to the account used to create them and the AWS Region where they
    /// are created. They consist of lowercase letters, numbers, and hyphens.</p>
    pub backup_vault_name: std::option::Option<std::string::String>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example,
    /// <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    pub backup_vault_arn: std::option::Option<std::string::String>,
    /// <p>The date and time a resource backup is created, in Unix format and Coordinated Universal
    /// Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For
    /// example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
    /// AM.</p>
    pub creation_date: std::option::Option<smithy_types::Instant>,
    /// <p>The server-side encryption key that is used to protect your backups; for example,
    /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub encryption_key_arn: std::option::Option<std::string::String>,
    /// <p>A unique string that identifies the request and allows failed requests to be retried
    /// without the risk of running the operation twice.</p>
    pub creator_request_id: std::option::Option<std::string::String>,
    /// <p>The number of recovery points that are stored in a backup vault.</p>
    pub number_of_recovery_points: i64,
}
impl std::fmt::Debug for BackupVaultListMember {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BackupVaultListMember");
        formatter.field("backup_vault_name", &self.backup_vault_name);
        formatter.field("backup_vault_arn", &self.backup_vault_arn);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("encryption_key_arn", &self.encryption_key_arn);
        formatter.field("creator_request_id", &self.creator_request_id);
        formatter.field("number_of_recovery_points", &self.number_of_recovery_points);
        formatter.finish()
    }
}
/// See [`BackupVaultListMember`](crate::model::BackupVaultListMember)
pub mod backup_vault_list_member {
    /// A builder for [`BackupVaultListMember`](crate::model::BackupVaultListMember)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) backup_vault_name: std::option::Option<std::string::String>,
        pub(crate) backup_vault_arn: std::option::Option<std::string::String>,
        pub(crate) creation_date: std::option::Option<smithy_types::Instant>,
        pub(crate) encryption_key_arn: std::option::Option<std::string::String>,
        pub(crate) creator_request_id: std::option::Option<std::string::String>,
        pub(crate) number_of_recovery_points: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The name of a logical container where backups are stored. Backup vaults are identified
        /// by names that are unique to the account used to create them and the AWS Region where they
        /// are created. They consist of lowercase letters, numbers, and hyphens.</p>
        pub fn backup_vault_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_vault_name = Some(input.into());
            self
        }
        pub fn set_backup_vault_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_vault_name = input;
            self
        }
        /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example,
        /// <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
        pub fn backup_vault_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_vault_arn = Some(input.into());
            self
        }
        pub fn set_backup_vault_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_vault_arn = input;
            self
        }
        /// <p>The date and time a resource backup is created, in Unix format and Coordinated Universal
        /// Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For
        /// example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
        /// AM.</p>
        pub fn creation_date(mut self, input: smithy_types::Instant) -> Self {
            self.creation_date = Some(input);
            self
        }
        pub fn set_creation_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.creation_date = input;
            self
        }
        /// <p>The server-side encryption key that is used to protect your backups; for example,
        /// <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
        pub fn encryption_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.encryption_key_arn = Some(input.into());
            self
        }
        pub fn set_encryption_key_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.encryption_key_arn = input;
            self
        }
        /// <p>A unique string that identifies the request and allows failed requests to be retried
        /// without the risk of running the operation twice.</p>
        pub fn creator_request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.creator_request_id = Some(input.into());
            self
        }
        pub fn set_creator_request_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.creator_request_id = input;
            self
        }
        /// <p>The number of recovery points that are stored in a backup vault.</p>
        pub fn number_of_recovery_points(mut self, input: i64) -> Self {
            self.number_of_recovery_points = Some(input);
            self
        }
        pub fn set_number_of_recovery_points(mut self, input: std::option::Option<i64>) -> Self {
            self.number_of_recovery_points = input;
            self
        }
        /// Consumes the builder and constructs a [`BackupVaultListMember`](crate::model::BackupVaultListMember)
        pub fn build(self) -> crate::model::BackupVaultListMember {
            crate::model::BackupVaultListMember {
                backup_vault_name: self.backup_vault_name,
                backup_vault_arn: self.backup_vault_arn,
                creation_date: self.creation_date,
                encryption_key_arn: self.encryption_key_arn,
                creator_request_id: self.creator_request_id,
                number_of_recovery_points: self.number_of_recovery_points.unwrap_or_default(),
            }
        }
    }
}
impl BackupVaultListMember {
    /// Creates a new builder-style object to manufacture [`BackupVaultListMember`](crate::model::BackupVaultListMember)
    pub fn builder() -> crate::model::backup_vault_list_member::Builder {
        crate::model::backup_vault_list_member::Builder::default()
    }
}

/// <p>Contains metadata about a <code>BackupSelection</code> object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BackupSelectionsListMember {
    /// <p>Uniquely identifies a request to assign a set of resources to a backup plan.</p>
    pub selection_id: std::option::Option<std::string::String>,
    /// <p>The display name of a resource selection document.</p>
    pub selection_name: std::option::Option<std::string::String>,
    /// <p>Uniquely identifies a backup plan.</p>
    pub backup_plan_id: std::option::Option<std::string::String>,
    /// <p>The date and time a backup plan is created, in Unix format and Coordinated Universal
    /// Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For
    /// example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
    /// AM.</p>
    pub creation_date: std::option::Option<smithy_types::Instant>,
    /// <p>A unique string that identifies the request and allows failed requests to be retried
    /// without the risk of running the operation twice.</p>
    pub creator_request_id: std::option::Option<std::string::String>,
    /// <p>Specifies the IAM role Amazon Resource Name (ARN) to create the target recovery point;
    /// for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub iam_role_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for BackupSelectionsListMember {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BackupSelectionsListMember");
        formatter.field("selection_id", &self.selection_id);
        formatter.field("selection_name", &self.selection_name);
        formatter.field("backup_plan_id", &self.backup_plan_id);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("creator_request_id", &self.creator_request_id);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.finish()
    }
}
/// See [`BackupSelectionsListMember`](crate::model::BackupSelectionsListMember)
pub mod backup_selections_list_member {
    /// A builder for [`BackupSelectionsListMember`](crate::model::BackupSelectionsListMember)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) selection_id: std::option::Option<std::string::String>,
        pub(crate) selection_name: std::option::Option<std::string::String>,
        pub(crate) backup_plan_id: std::option::Option<std::string::String>,
        pub(crate) creation_date: std::option::Option<smithy_types::Instant>,
        pub(crate) creator_request_id: std::option::Option<std::string::String>,
        pub(crate) iam_role_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Uniquely identifies a request to assign a set of resources to a backup plan.</p>
        pub fn selection_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.selection_id = Some(input.into());
            self
        }
        pub fn set_selection_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.selection_id = input;
            self
        }
        /// <p>The display name of a resource selection document.</p>
        pub fn selection_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.selection_name = Some(input.into());
            self
        }
        pub fn set_selection_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.selection_name = input;
            self
        }
        /// <p>Uniquely identifies a backup plan.</p>
        pub fn backup_plan_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_plan_id = Some(input.into());
            self
        }
        pub fn set_backup_plan_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_plan_id = input;
            self
        }
        /// <p>The date and time a backup plan is created, in Unix format and Coordinated Universal
        /// Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For
        /// example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
        /// AM.</p>
        pub fn creation_date(mut self, input: smithy_types::Instant) -> Self {
            self.creation_date = Some(input);
            self
        }
        pub fn set_creation_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.creation_date = input;
            self
        }
        /// <p>A unique string that identifies the request and allows failed requests to be retried
        /// without the risk of running the operation twice.</p>
        pub fn creator_request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.creator_request_id = Some(input.into());
            self
        }
        pub fn set_creator_request_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.creator_request_id = input;
            self
        }
        /// <p>Specifies the IAM role Amazon Resource Name (ARN) to create the target recovery point;
        /// for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
        pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.iam_role_arn = Some(input.into());
            self
        }
        pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.iam_role_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`BackupSelectionsListMember`](crate::model::BackupSelectionsListMember)
        pub fn build(self) -> crate::model::BackupSelectionsListMember {
            crate::model::BackupSelectionsListMember {
                selection_id: self.selection_id,
                selection_name: self.selection_name,
                backup_plan_id: self.backup_plan_id,
                creation_date: self.creation_date,
                creator_request_id: self.creator_request_id,
                iam_role_arn: self.iam_role_arn,
            }
        }
    }
}
impl BackupSelectionsListMember {
    /// Creates a new builder-style object to manufacture [`BackupSelectionsListMember`](crate::model::BackupSelectionsListMember)
    pub fn builder() -> crate::model::backup_selections_list_member::Builder {
        crate::model::backup_selections_list_member::Builder::default()
    }
}

/// <p>Contains metadata about a backup plan.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BackupPlansListMember {
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup plan; for example,
    /// <code>arn:aws:backup:us-east-1:123456789012:plan:8F81F553-3A74-4A3F-B93D-B3360DC80C50</code>.</p>
    pub backup_plan_arn: std::option::Option<std::string::String>,
    /// <p>Uniquely identifies a backup plan.</p>
    pub backup_plan_id: std::option::Option<std::string::String>,
    /// <p>The date and time a resource backup plan is created, in Unix format and Coordinated
    /// Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds.
    /// For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
    /// AM.</p>
    pub creation_date: std::option::Option<smithy_types::Instant>,
    /// <p>The date and time a backup plan is deleted, in Unix format and Coordinated Universal
    /// Time (UTC). The value of <code>DeletionDate</code> is accurate to milliseconds. For
    /// example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
    /// AM.</p>
    pub deletion_date: std::option::Option<smithy_types::Instant>,
    /// <p>Unique, randomly generated, Unicode, UTF-8 encoded strings that are at most 1,024 bytes
    /// long. Version IDs cannot be edited.</p>
    pub version_id: std::option::Option<std::string::String>,
    /// <p>The display name of a saved backup plan.</p>
    pub backup_plan_name: std::option::Option<std::string::String>,
    /// <p>A unique string that identifies the request and allows failed requests to be retried
    /// without the risk of running the operation twice.</p>
    pub creator_request_id: std::option::Option<std::string::String>,
    /// <p>The last time a job to back up resources was run with this rule. A date and time, in
    /// Unix format and Coordinated Universal Time (UTC). The value of
    /// <code>LastExecutionDate</code> is accurate to milliseconds. For example, the value
    /// 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub last_execution_date: std::option::Option<smithy_types::Instant>,
    /// <p>Contains a list of <code>BackupOptions</code> for a resource type.</p>
    pub advanced_backup_settings:
        std::option::Option<std::vec::Vec<crate::model::AdvancedBackupSetting>>,
}
impl std::fmt::Debug for BackupPlansListMember {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BackupPlansListMember");
        formatter.field("backup_plan_arn", &self.backup_plan_arn);
        formatter.field("backup_plan_id", &self.backup_plan_id);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("deletion_date", &self.deletion_date);
        formatter.field("version_id", &self.version_id);
        formatter.field("backup_plan_name", &self.backup_plan_name);
        formatter.field("creator_request_id", &self.creator_request_id);
        formatter.field("last_execution_date", &self.last_execution_date);
        formatter.field("advanced_backup_settings", &self.advanced_backup_settings);
        formatter.finish()
    }
}
/// See [`BackupPlansListMember`](crate::model::BackupPlansListMember)
pub mod backup_plans_list_member {
    /// A builder for [`BackupPlansListMember`](crate::model::BackupPlansListMember)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) backup_plan_arn: std::option::Option<std::string::String>,
        pub(crate) backup_plan_id: std::option::Option<std::string::String>,
        pub(crate) creation_date: std::option::Option<smithy_types::Instant>,
        pub(crate) deletion_date: std::option::Option<smithy_types::Instant>,
        pub(crate) version_id: std::option::Option<std::string::String>,
        pub(crate) backup_plan_name: std::option::Option<std::string::String>,
        pub(crate) creator_request_id: std::option::Option<std::string::String>,
        pub(crate) last_execution_date: std::option::Option<smithy_types::Instant>,
        pub(crate) advanced_backup_settings:
            std::option::Option<std::vec::Vec<crate::model::AdvancedBackupSetting>>,
    }
    impl Builder {
        /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup plan; for example,
        /// <code>arn:aws:backup:us-east-1:123456789012:plan:8F81F553-3A74-4A3F-B93D-B3360DC80C50</code>.</p>
        pub fn backup_plan_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_plan_arn = Some(input.into());
            self
        }
        pub fn set_backup_plan_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_plan_arn = input;
            self
        }
        /// <p>Uniquely identifies a backup plan.</p>
        pub fn backup_plan_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_plan_id = Some(input.into());
            self
        }
        pub fn set_backup_plan_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_plan_id = input;
            self
        }
        /// <p>The date and time a resource backup plan is created, in Unix format and Coordinated
        /// Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds.
        /// For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
        /// AM.</p>
        pub fn creation_date(mut self, input: smithy_types::Instant) -> Self {
            self.creation_date = Some(input);
            self
        }
        pub fn set_creation_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.creation_date = input;
            self
        }
        /// <p>The date and time a backup plan is deleted, in Unix format and Coordinated Universal
        /// Time (UTC). The value of <code>DeletionDate</code> is accurate to milliseconds. For
        /// example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087
        /// AM.</p>
        pub fn deletion_date(mut self, input: smithy_types::Instant) -> Self {
            self.deletion_date = Some(input);
            self
        }
        pub fn set_deletion_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.deletion_date = input;
            self
        }
        /// <p>Unique, randomly generated, Unicode, UTF-8 encoded strings that are at most 1,024 bytes
        /// long. Version IDs cannot be edited.</p>
        pub fn version_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.version_id = Some(input.into());
            self
        }
        pub fn set_version_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version_id = input;
            self
        }
        /// <p>The display name of a saved backup plan.</p>
        pub fn backup_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_plan_name = Some(input.into());
            self
        }
        pub fn set_backup_plan_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_plan_name = input;
            self
        }
        /// <p>A unique string that identifies the request and allows failed requests to be retried
        /// without the risk of running the operation twice.</p>
        pub fn creator_request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.creator_request_id = Some(input.into());
            self
        }
        pub fn set_creator_request_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.creator_request_id = input;
            self
        }
        /// <p>The last time a job to back up resources was run with this rule. A date and time, in
        /// Unix format and Coordinated Universal Time (UTC). The value of
        /// <code>LastExecutionDate</code> is accurate to milliseconds. For example, the value
        /// 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
        pub fn last_execution_date(mut self, input: smithy_types::Instant) -> Self {
            self.last_execution_date = Some(input);
            self
        }
        pub fn set_last_execution_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_execution_date = input;
            self
        }
        pub fn advanced_backup_settings(
            mut self,
            input: impl Into<crate::model::AdvancedBackupSetting>,
        ) -> Self {
            let mut v = self.advanced_backup_settings.unwrap_or_default();
            v.push(input.into());
            self.advanced_backup_settings = Some(v);
            self
        }
        pub fn set_advanced_backup_settings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AdvancedBackupSetting>>,
        ) -> Self {
            self.advanced_backup_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`BackupPlansListMember`](crate::model::BackupPlansListMember)
        pub fn build(self) -> crate::model::BackupPlansListMember {
            crate::model::BackupPlansListMember {
                backup_plan_arn: self.backup_plan_arn,
                backup_plan_id: self.backup_plan_id,
                creation_date: self.creation_date,
                deletion_date: self.deletion_date,
                version_id: self.version_id,
                backup_plan_name: self.backup_plan_name,
                creator_request_id: self.creator_request_id,
                last_execution_date: self.last_execution_date,
                advanced_backup_settings: self.advanced_backup_settings,
            }
        }
    }
}
impl BackupPlansListMember {
    /// Creates a new builder-style object to manufacture [`BackupPlansListMember`](crate::model::BackupPlansListMember)
    pub fn builder() -> crate::model::backup_plans_list_member::Builder {
        crate::model::backup_plans_list_member::Builder::default()
    }
}

/// <p>An object specifying metadata associated with a backup plan template.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BackupPlanTemplatesListMember {
    /// <p>Uniquely identifies a stored backup plan template.</p>
    pub backup_plan_template_id: std::option::Option<std::string::String>,
    /// <p>The optional display name of a backup plan template.</p>
    pub backup_plan_template_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for BackupPlanTemplatesListMember {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BackupPlanTemplatesListMember");
        formatter.field("backup_plan_template_id", &self.backup_plan_template_id);
        formatter.field("backup_plan_template_name", &self.backup_plan_template_name);
        formatter.finish()
    }
}
/// See [`BackupPlanTemplatesListMember`](crate::model::BackupPlanTemplatesListMember)
pub mod backup_plan_templates_list_member {
    /// A builder for [`BackupPlanTemplatesListMember`](crate::model::BackupPlanTemplatesListMember)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) backup_plan_template_id: std::option::Option<std::string::String>,
        pub(crate) backup_plan_template_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Uniquely identifies a stored backup plan template.</p>
        pub fn backup_plan_template_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_plan_template_id = Some(input.into());
            self
        }
        pub fn set_backup_plan_template_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_plan_template_id = input;
            self
        }
        /// <p>The optional display name of a backup plan template.</p>
        pub fn backup_plan_template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_plan_template_name = Some(input.into());
            self
        }
        pub fn set_backup_plan_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_plan_template_name = input;
            self
        }
        /// Consumes the builder and constructs a [`BackupPlanTemplatesListMember`](crate::model::BackupPlanTemplatesListMember)
        pub fn build(self) -> crate::model::BackupPlanTemplatesListMember {
            crate::model::BackupPlanTemplatesListMember {
                backup_plan_template_id: self.backup_plan_template_id,
                backup_plan_template_name: self.backup_plan_template_name,
            }
        }
    }
}
impl BackupPlanTemplatesListMember {
    /// Creates a new builder-style object to manufacture [`BackupPlanTemplatesListMember`](crate::model::BackupPlanTemplatesListMember)
    pub fn builder() -> crate::model::backup_plan_templates_list_member::Builder {
        crate::model::backup_plan_templates_list_member::Builder::default()
    }
}

/// <p>Contains detailed information about a backup job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BackupJob {
    /// <p>The account ID that owns the backup job.</p>
    pub account_id: std::option::Option<std::string::String>,
    /// <p>Uniquely identifies a request to AWS Backup to back up a resource.</p>
    pub backup_job_id: std::option::Option<std::string::String>,
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified
    /// by names that are unique to the account used to create them and the AWS Region where they
    /// are created. They consist of lowercase letters, numbers, and hyphens.</p>
    pub backup_vault_name: std::option::Option<std::string::String>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example,
    /// <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    pub backup_vault_arn: std::option::Option<std::string::String>,
    /// <p>An ARN that uniquely identifies a recovery point; for example,
    /// <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub recovery_point_arn: std::option::Option<std::string::String>,
    /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the
    /// resource type.</p>
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The date and time a backup job is created, in Unix format and Coordinated Universal Time
    /// (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the
    /// value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub creation_date: std::option::Option<smithy_types::Instant>,
    /// <p>The date and time a job to create a backup job is completed, in Unix format and
    /// Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to
    /// milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018
    /// 12:11:30.087 AM.</p>
    pub completion_date: std::option::Option<smithy_types::Instant>,
    /// <p>The current state of a resource recovery point.</p>
    pub state: std::option::Option<crate::model::BackupJobState>,
    /// <p>A detailed message explaining the status of the job to back up a resource.</p>
    pub status_message: std::option::Option<std::string::String>,
    /// <p>Contains an estimated percentage complete of a job at the time the job status was
    /// queried.</p>
    pub percent_done: std::option::Option<std::string::String>,
    /// <p>The size, in bytes, of a backup.</p>
    pub backup_size_in_bytes: std::option::Option<i64>,
    /// <p>Specifies the IAM role ARN used to create the target recovery point. IAM roles other
    /// than the default role must include either <code>AWSBackup</code> or <code>AwsBackup</code>
    /// in the role name. For example,
    /// <code>arn:aws:iam::123456789012:role/AWSBackupRDSAccess</code>. Role names without those
    /// strings lack permissions to perform backup jobs.</p>
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>Contains identifying information about the creation of a backup job, including the
    /// <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>,
    /// and <code>BackupRuleId</code> of the backup plan used to create it.</p>
    pub created_by: std::option::Option<crate::model::RecoveryPointCreator>,
    /// <p>The date and time a job to back up resources is expected to be completed, in Unix format
    /// and Coordinated Universal Time (UTC). The value of <code>ExpectedCompletionDate</code> is
    /// accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January
    /// 26, 2018 12:11:30.087 AM.</p>
    pub expected_completion_date: std::option::Option<smithy_types::Instant>,
    /// <p>Specifies the time in Unix format and Coordinated Universal Time (UTC) when a backup job
    /// must be started before it is canceled. The value is calculated by adding the start window
    /// to the scheduled time. So if the scheduled time were 6:00 PM and the start window is 2
    /// hours, the <code>StartBy</code> time would be 8:00 PM on the date specified. The value of
    /// <code>StartBy</code> is accurate to milliseconds. For example, the value 1516925490.087
    /// represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub start_by: std::option::Option<smithy_types::Instant>,
    /// <p>The type of AWS resource to be backed up; for example, an Amazon Elastic Block Store
    /// (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For VSS
    /// Windows backups, the only supported resource type is Amazon EC2.</p>
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>The size in bytes transferred to a backup vault at the time that the job status was
    /// queried.</p>
    pub bytes_transferred: std::option::Option<i64>,
    /// <p>Specifies the backup option for a selected resource. This option is only available for
    /// Windows VSS backup jobs.</p>
    /// <p>Valid values: Set to <code>"WindowsVSS”:“enabled"</code> to enable WindowsVSS backup
    /// option and create a VSS Windows backup. Set to “WindowsVSS”:”disabled” to create a regular
    /// backup. If you specify an invalid option, you get an
    /// <code>InvalidParameterValueException</code> exception.</p>
    pub backup_options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Represents the type of backup for a backup job.</p>
    pub backup_type: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for BackupJob {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BackupJob");
        formatter.field("account_id", &self.account_id);
        formatter.field("backup_job_id", &self.backup_job_id);
        formatter.field("backup_vault_name", &self.backup_vault_name);
        formatter.field("backup_vault_arn", &self.backup_vault_arn);
        formatter.field("recovery_point_arn", &self.recovery_point_arn);
        formatter.field("resource_arn", &self.resource_arn);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("completion_date", &self.completion_date);
        formatter.field("state", &self.state);
        formatter.field("status_message", &self.status_message);
        formatter.field("percent_done", &self.percent_done);
        formatter.field("backup_size_in_bytes", &self.backup_size_in_bytes);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("created_by", &self.created_by);
        formatter.field("expected_completion_date", &self.expected_completion_date);
        formatter.field("start_by", &self.start_by);
        formatter.field("resource_type", &self.resource_type);
        formatter.field("bytes_transferred", &self.bytes_transferred);
        formatter.field("backup_options", &self.backup_options);
        formatter.field("backup_type", &self.backup_type);
        formatter.finish()
    }
}
/// See [`BackupJob`](crate::model::BackupJob)
pub mod backup_job {
    /// A builder for [`BackupJob`](crate::model::BackupJob)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_id: std::option::Option<std::string::String>,
        pub(crate) backup_job_id: std::option::Option<std::string::String>,
        pub(crate) backup_vault_name: std::option::Option<std::string::String>,
        pub(crate) backup_vault_arn: std::option::Option<std::string::String>,
        pub(crate) recovery_point_arn: std::option::Option<std::string::String>,
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        pub(crate) creation_date: std::option::Option<smithy_types::Instant>,
        pub(crate) completion_date: std::option::Option<smithy_types::Instant>,
        pub(crate) state: std::option::Option<crate::model::BackupJobState>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) percent_done: std::option::Option<std::string::String>,
        pub(crate) backup_size_in_bytes: std::option::Option<i64>,
        pub(crate) iam_role_arn: std::option::Option<std::string::String>,
        pub(crate) created_by: std::option::Option<crate::model::RecoveryPointCreator>,
        pub(crate) expected_completion_date: std::option::Option<smithy_types::Instant>,
        pub(crate) start_by: std::option::Option<smithy_types::Instant>,
        pub(crate) resource_type: std::option::Option<std::string::String>,
        pub(crate) bytes_transferred: std::option::Option<i64>,
        pub(crate) backup_options: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) backup_type: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The account ID that owns the backup job.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.account_id = Some(input.into());
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.account_id = input;
            self
        }
        /// <p>Uniquely identifies a request to AWS Backup to back up a resource.</p>
        pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_job_id = Some(input.into());
            self
        }
        pub fn set_backup_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_job_id = input;
            self
        }
        /// <p>The name of a logical container where backups are stored. Backup vaults are identified
        /// by names that are unique to the account used to create them and the AWS Region where they
        /// are created. They consist of lowercase letters, numbers, and hyphens.</p>
        pub fn backup_vault_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_vault_name = Some(input.into());
            self
        }
        pub fn set_backup_vault_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_vault_name = input;
            self
        }
        /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example,
        /// <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
        pub fn backup_vault_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_vault_arn = Some(input.into());
            self
        }
        pub fn set_backup_vault_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_vault_arn = input;
            self
        }
        /// <p>An ARN that uniquely identifies a recovery point; for example,
        /// <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
        pub fn recovery_point_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.recovery_point_arn = Some(input.into());
            self
        }
        pub fn set_recovery_point_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recovery_point_arn = input;
            self
        }
        /// <p>An ARN that uniquely identifies a resource. The format of the ARN depends on the
        /// resource type.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        /// <p>The date and time a backup job is created, in Unix format and Coordinated Universal Time
        /// (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the
        /// value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
        pub fn creation_date(mut self, input: smithy_types::Instant) -> Self {
            self.creation_date = Some(input);
            self
        }
        pub fn set_creation_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.creation_date = input;
            self
        }
        /// <p>The date and time a job to create a backup job is completed, in Unix format and
        /// Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to
        /// milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018
        /// 12:11:30.087 AM.</p>
        pub fn completion_date(mut self, input: smithy_types::Instant) -> Self {
            self.completion_date = Some(input);
            self
        }
        pub fn set_completion_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.completion_date = input;
            self
        }
        /// <p>The current state of a resource recovery point.</p>
        pub fn state(mut self, input: crate::model::BackupJobState) -> Self {
            self.state = Some(input);
            self
        }
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::BackupJobState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>A detailed message explaining the status of the job to back up a resource.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>Contains an estimated percentage complete of a job at the time the job status was
        /// queried.</p>
        pub fn percent_done(mut self, input: impl Into<std::string::String>) -> Self {
            self.percent_done = Some(input.into());
            self
        }
        pub fn set_percent_done(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.percent_done = input;
            self
        }
        /// <p>The size, in bytes, of a backup.</p>
        pub fn backup_size_in_bytes(mut self, input: i64) -> Self {
            self.backup_size_in_bytes = Some(input);
            self
        }
        pub fn set_backup_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
            self.backup_size_in_bytes = input;
            self
        }
        /// <p>Specifies the IAM role ARN used to create the target recovery point. IAM roles other
        /// than the default role must include either <code>AWSBackup</code> or <code>AwsBackup</code>
        /// in the role name. For example,
        /// <code>arn:aws:iam::123456789012:role/AWSBackupRDSAccess</code>. Role names without those
        /// strings lack permissions to perform backup jobs.</p>
        pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.iam_role_arn = Some(input.into());
            self
        }
        pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.iam_role_arn = input;
            self
        }
        /// <p>Contains identifying information about the creation of a backup job, including the
        /// <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>,
        /// and <code>BackupRuleId</code> of the backup plan used to create it.</p>
        pub fn created_by(mut self, input: crate::model::RecoveryPointCreator) -> Self {
            self.created_by = Some(input);
            self
        }
        pub fn set_created_by(
            mut self,
            input: std::option::Option<crate::model::RecoveryPointCreator>,
        ) -> Self {
            self.created_by = input;
            self
        }
        /// <p>The date and time a job to back up resources is expected to be completed, in Unix format
        /// and Coordinated Universal Time (UTC). The value of <code>ExpectedCompletionDate</code> is
        /// accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January
        /// 26, 2018 12:11:30.087 AM.</p>
        pub fn expected_completion_date(mut self, input: smithy_types::Instant) -> Self {
            self.expected_completion_date = Some(input);
            self
        }
        pub fn set_expected_completion_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.expected_completion_date = input;
            self
        }
        /// <p>Specifies the time in Unix format and Coordinated Universal Time (UTC) when a backup job
        /// must be started before it is canceled. The value is calculated by adding the start window
        /// to the scheduled time. So if the scheduled time were 6:00 PM and the start window is 2
        /// hours, the <code>StartBy</code> time would be 8:00 PM on the date specified. The value of
        /// <code>StartBy</code> is accurate to milliseconds. For example, the value 1516925490.087
        /// represents Friday, January 26, 2018 12:11:30.087 AM.</p>
        pub fn start_by(mut self, input: smithy_types::Instant) -> Self {
            self.start_by = Some(input);
            self
        }
        pub fn set_start_by(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.start_by = input;
            self
        }
        /// <p>The type of AWS resource to be backed up; for example, an Amazon Elastic Block Store
        /// (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database. For VSS
        /// Windows backups, the only supported resource type is Amazon EC2.</p>
        pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_type = Some(input.into());
            self
        }
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// <p>The size in bytes transferred to a backup vault at the time that the job status was
        /// queried.</p>
        pub fn bytes_transferred(mut self, input: i64) -> Self {
            self.bytes_transferred = Some(input);
            self
        }
        pub fn set_bytes_transferred(mut self, input: std::option::Option<i64>) -> Self {
            self.bytes_transferred = input;
            self
        }
        pub fn backup_options(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.backup_options.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.backup_options = Some(hash_map);
            self
        }
        pub fn set_backup_options(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.backup_options = input;
            self
        }
        /// <p>Represents the type of backup for a backup job.</p>
        pub fn backup_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_type = Some(input.into());
            self
        }
        pub fn set_backup_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.backup_type = input;
            self
        }
        /// Consumes the builder and constructs a [`BackupJob`](crate::model::BackupJob)
        pub fn build(self) -> crate::model::BackupJob {
            crate::model::BackupJob {
                account_id: self.account_id,
                backup_job_id: self.backup_job_id,
                backup_vault_name: self.backup_vault_name,
                backup_vault_arn: self.backup_vault_arn,
                recovery_point_arn: self.recovery_point_arn,
                resource_arn: self.resource_arn,
                creation_date: self.creation_date,
                completion_date: self.completion_date,
                state: self.state,
                status_message: self.status_message,
                percent_done: self.percent_done,
                backup_size_in_bytes: self.backup_size_in_bytes,
                iam_role_arn: self.iam_role_arn,
                created_by: self.created_by,
                expected_completion_date: self.expected_completion_date,
                start_by: self.start_by,
                resource_type: self.resource_type,
                bytes_transferred: self.bytes_transferred,
                backup_options: self.backup_options,
                backup_type: self.backup_type,
            }
        }
    }
}
impl BackupJob {
    /// Creates a new builder-style object to manufacture [`BackupJob`](crate::model::BackupJob)
    pub fn builder() -> crate::model::backup_job::Builder {
        crate::model::backup_job::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum BackupJobState {
    Aborted,
    Aborting,
    Completed,
    Created,
    Expired,
    Failed,
    Pending,
    Running,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for BackupJobState {
    fn from(s: &str) -> Self {
        match s {
            "ABORTED" => BackupJobState::Aborted,
            "ABORTING" => BackupJobState::Aborting,
            "COMPLETED" => BackupJobState::Completed,
            "CREATED" => BackupJobState::Created,
            "EXPIRED" => BackupJobState::Expired,
            "FAILED" => BackupJobState::Failed,
            "PENDING" => BackupJobState::Pending,
            "RUNNING" => BackupJobState::Running,
            other => BackupJobState::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for BackupJobState {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(BackupJobState::from(s))
    }
}
impl BackupJobState {
    pub fn as_str(&self) -> &str {
        match self {
            BackupJobState::Aborted => "ABORTED",
            BackupJobState::Aborting => "ABORTING",
            BackupJobState::Completed => "COMPLETED",
            BackupJobState::Created => "CREATED",
            BackupJobState::Expired => "EXPIRED",
            BackupJobState::Failed => "FAILED",
            BackupJobState::Pending => "PENDING",
            BackupJobState::Running => "RUNNING",
            BackupJobState::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &[
            "ABORTED",
            "ABORTING",
            "COMPLETED",
            "CREATED",
            "EXPIRED",
            "FAILED",
            "PENDING",
            "RUNNING",
        ]
    }
}
impl AsRef<str> for BackupJobState {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Used to specify a set of resources to a backup plan.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BackupSelection {
    /// <p>The display name of a resource selection document.</p>
    pub selection_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the IAM role that AWS Backup uses to authenticate when backing up the target
    /// resource; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>An array of strings that contain Amazon Resource Names (ARNs)
    /// of resources to assign to a backup plan.</p>
    pub resources: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An array of conditions used to specify a set of resources to assign to a backup plan;
    /// for example, <code>"StringEquals": {"ec2:ResourceTag/Department": "accounting"</code>.
    /// Assigns the backup plan to every resource with at least one matching tag.</p>
    pub list_of_tags: std::option::Option<std::vec::Vec<crate::model::Condition>>,
}
impl std::fmt::Debug for BackupSelection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BackupSelection");
        formatter.field("selection_name", &self.selection_name);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("resources", &self.resources);
        formatter.field("list_of_tags", &self.list_of_tags);
        formatter.finish()
    }
}
/// See [`BackupSelection`](crate::model::BackupSelection)
pub mod backup_selection {
    /// A builder for [`BackupSelection`](crate::model::BackupSelection)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) selection_name: std::option::Option<std::string::String>,
        pub(crate) iam_role_arn: std::option::Option<std::string::String>,
        pub(crate) resources: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) list_of_tags: std::option::Option<std::vec::Vec<crate::model::Condition>>,
    }
    impl Builder {
        /// <p>The display name of a resource selection document.</p>
        pub fn selection_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.selection_name = Some(input.into());
            self
        }
        pub fn set_selection_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.selection_name = input;
            self
        }
        /// <p>The ARN of the IAM role that AWS Backup uses to authenticate when backing up the target
        /// resource; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
        pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.iam_role_arn = Some(input.into());
            self
        }
        pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.iam_role_arn = input;
            self
        }
        pub fn resources(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.resources.unwrap_or_default();
            v.push(input.into());
            self.resources = Some(v);
            self
        }
        pub fn set_resources(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.resources = input;
            self
        }
        pub fn list_of_tags(mut self, input: impl Into<crate::model::Condition>) -> Self {
            let mut v = self.list_of_tags.unwrap_or_default();
            v.push(input.into());
            self.list_of_tags = Some(v);
            self
        }
        pub fn set_list_of_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Condition>>,
        ) -> Self {
            self.list_of_tags = input;
            self
        }
        /// Consumes the builder and constructs a [`BackupSelection`](crate::model::BackupSelection)
        pub fn build(self) -> crate::model::BackupSelection {
            crate::model::BackupSelection {
                selection_name: self.selection_name,
                iam_role_arn: self.iam_role_arn,
                resources: self.resources,
                list_of_tags: self.list_of_tags,
            }
        }
    }
}
impl BackupSelection {
    /// Creates a new builder-style object to manufacture [`BackupSelection`](crate::model::BackupSelection)
    pub fn builder() -> crate::model::backup_selection::Builder {
        crate::model::backup_selection::Builder::default()
    }
}

/// <p>Contains an array of triplets made up of a condition type (such as
/// <code>StringEquals</code>), a key, and a value. Conditions are used to filter resources
/// in a selection that is assigned to a backup plan.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Condition {
    /// <p>An operation, such as <code>StringEquals</code>, that is applied to a key-value pair
    /// used to filter resources in a selection.</p>
    pub condition_type: std::option::Option<crate::model::ConditionType>,
    /// <p>The key in a key-value pair. For example, in <code>"ec2:ResourceTag/Department":
    /// "accounting"</code>, <code>"ec2:ResourceTag/Department"</code> is the key.</p>
    pub condition_key: std::option::Option<std::string::String>,
    /// <p>The value in a key-value pair. For example, in <code>"ec2:ResourceTag/Department":
    /// "accounting"</code>, <code>"accounting"</code> is the value.</p>
    pub condition_value: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for Condition {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Condition");
        formatter.field("condition_type", &self.condition_type);
        formatter.field("condition_key", &self.condition_key);
        formatter.field("condition_value", &self.condition_value);
        formatter.finish()
    }
}
/// See [`Condition`](crate::model::Condition)
pub mod condition {
    /// A builder for [`Condition`](crate::model::Condition)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) condition_type: std::option::Option<crate::model::ConditionType>,
        pub(crate) condition_key: std::option::Option<std::string::String>,
        pub(crate) condition_value: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>An operation, such as <code>StringEquals</code>, that is applied to a key-value pair
        /// used to filter resources in a selection.</p>
        pub fn condition_type(mut self, input: crate::model::ConditionType) -> Self {
            self.condition_type = Some(input);
            self
        }
        pub fn set_condition_type(
            mut self,
            input: std::option::Option<crate::model::ConditionType>,
        ) -> Self {
            self.condition_type = input;
            self
        }
        /// <p>The key in a key-value pair. For example, in <code>"ec2:ResourceTag/Department":
        /// "accounting"</code>, <code>"ec2:ResourceTag/Department"</code> is the key.</p>
        pub fn condition_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.condition_key = Some(input.into());
            self
        }
        pub fn set_condition_key(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.condition_key = input;
            self
        }
        /// <p>The value in a key-value pair. For example, in <code>"ec2:ResourceTag/Department":
        /// "accounting"</code>, <code>"accounting"</code> is the value.</p>
        pub fn condition_value(mut self, input: impl Into<std::string::String>) -> Self {
            self.condition_value = Some(input.into());
            self
        }
        pub fn set_condition_value(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.condition_value = input;
            self
        }
        /// Consumes the builder and constructs a [`Condition`](crate::model::Condition)
        pub fn build(self) -> crate::model::Condition {
            crate::model::Condition {
                condition_type: self.condition_type,
                condition_key: self.condition_key,
                condition_value: self.condition_value,
            }
        }
    }
}
impl Condition {
    /// Creates a new builder-style object to manufacture [`Condition`](crate::model::Condition)
    pub fn builder() -> crate::model::condition::Builder {
        crate::model::condition::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ConditionType {
    Stringequals,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for ConditionType {
    fn from(s: &str) -> Self {
        match s {
            "STRINGEQUALS" => ConditionType::Stringequals,
            other => ConditionType::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for ConditionType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ConditionType::from(s))
    }
}
impl ConditionType {
    pub fn as_str(&self) -> &str {
        match self {
            ConditionType::Stringequals => "STRINGEQUALS",
            ConditionType::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["STRINGEQUALS"]
    }
}
impl AsRef<str> for ConditionType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Contains an optional backup plan display name and an array of <code>BackupRule</code>
/// objects, each of which specifies a backup rule. Each rule in a backup plan is a separate
/// scheduled task and can back up a different selection of AWS resources.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BackupPlan {
    /// <p>The display name of a backup plan.</p>
    pub backup_plan_name: std::option::Option<std::string::String>,
    /// <p>An array of <code>BackupRule</code> objects, each of which specifies a scheduled task
    /// that is used to back up a selection of resources. </p>
    pub rules: std::option::Option<std::vec::Vec<crate::model::BackupRule>>,
    /// <p>Contains a list of <code>BackupOptions</code> for each resource type.</p>
    pub advanced_backup_settings:
        std::option::Option<std::vec::Vec<crate::model::AdvancedBackupSetting>>,
}
impl std::fmt::Debug for BackupPlan {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BackupPlan");
        formatter.field("backup_plan_name", &self.backup_plan_name);
        formatter.field("rules", &self.rules);
        formatter.field("advanced_backup_settings", &self.advanced_backup_settings);
        formatter.finish()
    }
}
/// See [`BackupPlan`](crate::model::BackupPlan)
pub mod backup_plan {
    /// A builder for [`BackupPlan`](crate::model::BackupPlan)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) backup_plan_name: std::option::Option<std::string::String>,
        pub(crate) rules: std::option::Option<std::vec::Vec<crate::model::BackupRule>>,
        pub(crate) advanced_backup_settings:
            std::option::Option<std::vec::Vec<crate::model::AdvancedBackupSetting>>,
    }
    impl Builder {
        /// <p>The display name of a backup plan.</p>
        pub fn backup_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.backup_plan_name = Some(input.into());
            self
        }
        pub fn set_backup_plan_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backup_plan_name = input;
            self
        }
        pub fn rules(mut self, input: impl Into<crate::model::BackupRule>) -> Self {
            let mut v = self.rules.unwrap_or_default();
            v.push(input.into());
            self.rules = Some(v);
            self
        }
        pub fn set_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BackupRule>>,
        ) -> Self {
            self.rules = input;
            self
        }
        pub fn advanced_backup_settings(
            mut self,
            input: impl Into<crate::model::AdvancedBackupSetting>,
        ) -> Self {
            let mut v = self.advanced_backup_settings.unwrap_or_default();
            v.push(input.into());
            self.advanced_backup_settings = Some(v);
            self
        }
        pub fn set_advanced_backup_settings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AdvancedBackupSetting>>,
        ) -> Self {
            self.advanced_backup_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`BackupPlan`](crate::model::BackupPlan)
        pub fn build(self) -> crate::model::BackupPlan {
            crate::model::BackupPlan {
                backup_plan_name: self.backup_plan_name,
                rules: self.rules,
                advanced_backup_settings: self.advanced_backup_settings,
            }
        }
    }
}
impl BackupPlan {
    /// Creates a new builder-style object to manufacture [`BackupPlan`](crate::model::BackupPlan)
    pub fn builder() -> crate::model::backup_plan::Builder {
        crate::model::backup_plan::Builder::default()
    }
}

/// <p>Specifies a scheduled task used to back up a selection of resources.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BackupRule {
    /// <p>An optional display name for a backup rule.</p>
    pub rule_name: std::option::Option<std::string::String>,
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified
    /// by names that are unique to the account used to create them and the AWS Region where they
    /// are created. They consist of lowercase letters, numbers, and hyphens.</p>
    pub target_backup_vault_name: std::option::Option<std::string::String>,
    /// <p>A CRON expression specifying when AWS Backup initiates a backup job. For more
    /// information about cron expressions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html">Schedule Expressions for Rules</a> in the <i>Amazon CloudWatch Events User
    /// Guide.</i>. Prior to specifying a value for this parameter, we recommend testing
    /// your cron expression using one of the many available cron generator and testing
    /// tools.</p>
    pub schedule_expression: std::option::Option<std::string::String>,
    /// <p>A value in minutes after a backup is scheduled before a job will be canceled if it
    /// doesn't start successfully. This value is optional.</p>
    pub start_window_minutes: std::option::Option<i64>,
    /// <p>A value in minutes after a backup job is successfully started before it must be
    /// completed or it will be canceled by AWS Backup. This value is optional.</p>
    pub completion_window_minutes: std::option::Option<i64>,
    /// <p>The lifecycle defines when a protected resource is transitioned to cold storage and when
    /// it expires. AWS Backup transitions and expires backups automatically according to the
    /// lifecycle that you define. </p>
    /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90
    /// days. Therefore, the “expire after days” setting must be 90 days greater than the
    /// “transition to cold after days” setting. The “transition to cold after days” setting cannot
    /// be changed after a backup has been transitioned to cold. </p>
    /// <p>Only Amazon EFS file system backups can be transitioned to cold storage.</p>
    pub lifecycle: std::option::Option<crate::model::Lifecycle>,
    /// <p>An array of key-value pair strings that are assigned to resources that are associated
    /// with this rule when restored from backup.</p>
    pub recovery_point_tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Uniquely identifies a rule that is used to schedule the backup of a selection of
    /// resources.</p>
    pub rule_id: std::option::Option<std::string::String>,
    /// <p>An array of <code>CopyAction</code> objects, which contains the details of the copy
    /// operation.</p>
    pub copy_actions: std::option::Option<std::vec::Vec<crate::model::CopyAction>>,
    /// <p>Specifies whether AWS Backup creates continuous backups. True causes AWS Backup to
    /// create continuous backups capable of point-in-time restore (PITR). False (or not specified)
    /// causes AWS Backup to create snapshot backups.</p>
    pub enable_continuous_backup: std::option::Option<bool>,
}
impl std::fmt::Debug for BackupRule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BackupRule");
        formatter.field("rule_name", &self.rule_name);
        formatter.field("target_backup_vault_name", &self.target_backup_vault_name);
        formatter.field("schedule_expression", &self.schedule_expression);
        formatter.field("start_window_minutes", &self.start_window_minutes);
        formatter.field("completion_window_minutes", &self.completion_window_minutes);
        formatter.field("lifecycle", &self.lifecycle);
        formatter.field("recovery_point_tags", &"*** Sensitive Data Redacted ***");
        formatter.field("rule_id", &self.rule_id);
        formatter.field("copy_actions", &self.copy_actions);
        formatter.field("enable_continuous_backup", &self.enable_continuous_backup);
        formatter.finish()
    }
}
/// See [`BackupRule`](crate::model::BackupRule)
pub mod backup_rule {
    /// A builder for [`BackupRule`](crate::model::BackupRule)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) rule_name: std::option::Option<std::string::String>,
        pub(crate) target_backup_vault_name: std::option::Option<std::string::String>,
        pub(crate) schedule_expression: std::option::Option<std::string::String>,
        pub(crate) start_window_minutes: std::option::Option<i64>,
        pub(crate) completion_window_minutes: std::option::Option<i64>,
        pub(crate) lifecycle: std::option::Option<crate::model::Lifecycle>,
        pub(crate) recovery_point_tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) rule_id: std::option::Option<std::string::String>,
        pub(crate) copy_actions: std::option::Option<std::vec::Vec<crate::model::CopyAction>>,
        pub(crate) enable_continuous_backup: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>An optional display name for a backup rule.</p>
        pub fn rule_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.rule_name = Some(input.into());
            self
        }
        pub fn set_rule_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.rule_name = input;
            self
        }
        /// <p>The name of a logical container where backups are stored. Backup vaults are identified
        /// by names that are unique to the account used to create them and the AWS Region where they
        /// are created. They consist of lowercase letters, numbers, and hyphens.</p>
        pub fn target_backup_vault_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.target_backup_vault_name = Some(input.into());
            self
        }
        pub fn set_target_backup_vault_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_backup_vault_name = input;
            self
        }
        /// <p>A CRON expression specifying when AWS Backup initiates a backup job. For more
        /// information about cron expressions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html">Schedule Expressions for Rules</a> in the <i>Amazon CloudWatch Events User
        /// Guide.</i>. Prior to specifying a value for this parameter, we recommend testing
        /// your cron expression using one of the many available cron generator and testing
        /// tools.</p>
        pub fn schedule_expression(mut self, input: impl Into<std::string::String>) -> Self {
            self.schedule_expression = Some(input.into());
            self
        }
        pub fn set_schedule_expression(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.schedule_expression = input;
            self
        }
        /// <p>A value in minutes after a backup is scheduled before a job will be canceled if it
        /// doesn't start successfully. This value is optional.</p>
        pub fn start_window_minutes(mut self, input: i64) -> Self {
            self.start_window_minutes = Some(input);
            self
        }
        pub fn set_start_window_minutes(mut self, input: std::option::Option<i64>) -> Self {
            self.start_window_minutes = input;
            self
        }
        /// <p>A value in minutes after a backup job is successfully started before it must be
        /// completed or it will be canceled by AWS Backup. This value is optional.</p>
        pub fn completion_window_minutes(mut self, input: i64) -> Self {
            self.completion_window_minutes = Some(input);
            self
        }
        pub fn set_completion_window_minutes(mut self, input: std::option::Option<i64>) -> Self {
            self.completion_window_minutes = input;
            self
        }
        /// <p>The lifecycle defines when a protected resource is transitioned to cold storage and when
        /// it expires. AWS Backup transitions and expires backups automatically according to the
        /// lifecycle that you define. </p>
        /// <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90
        /// days. Therefore, the “expire after days” setting must be 90 days greater than the
        /// “transition to cold after days” setting. The “transition to cold after days” setting cannot
        /// be changed after a backup has been transitioned to cold. </p>
        /// <p>Only Amazon EFS file system backups can be transitioned to cold storage.</p>
        pub fn lifecycle(mut self, input: crate::model::Lifecycle) -> Self {
            self.lifecycle = Some(input);
            self
        }
        pub fn set_lifecycle(
            mut self,
            input: std::option::Option<crate::model::Lifecycle>,
        ) -> Self {
            self.lifecycle = input;
            self
        }
        pub fn recovery_point_tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.recovery_point_tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.recovery_point_tags = Some(hash_map);
            self
        }
        pub fn set_recovery_point_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.recovery_point_tags = input;
            self
        }
        /// <p>Uniquely identifies a rule that is used to schedule the backup of a selection of
        /// resources.</p>
        pub fn rule_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.rule_id = Some(input.into());
            self
        }
        pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.rule_id = input;
            self
        }
        pub fn copy_actions(mut self, input: impl Into<crate::model::CopyAction>) -> Self {
            let mut v = self.copy_actions.unwrap_or_default();
            v.push(input.into());
            self.copy_actions = Some(v);
            self
        }
        pub fn set_copy_actions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CopyAction>>,
        ) -> Self {
            self.copy_actions = input;
            self
        }
        /// <p>Specifies whether AWS Backup creates continuous backups. True causes AWS Backup to
        /// create continuous backups capable of point-in-time restore (PITR). False (or not specified)
        /// causes AWS Backup to create snapshot backups.</p>
        pub fn enable_continuous_backup(mut self, input: bool) -> Self {
            self.enable_continuous_backup = Some(input);
            self
        }
        pub fn set_enable_continuous_backup(mut self, input: std::option::Option<bool>) -> Self {
            self.enable_continuous_backup = input;
            self
        }
        /// Consumes the builder and constructs a [`BackupRule`](crate::model::BackupRule)
        pub fn build(self) -> crate::model::BackupRule {
            crate::model::BackupRule {
                rule_name: self.rule_name,
                target_backup_vault_name: self.target_backup_vault_name,
                schedule_expression: self.schedule_expression,
                start_window_minutes: self.start_window_minutes,
                completion_window_minutes: self.completion_window_minutes,
                lifecycle: self.lifecycle,
                recovery_point_tags: self.recovery_point_tags,
                rule_id: self.rule_id,
                copy_actions: self.copy_actions,
                enable_continuous_backup: self.enable_continuous_backup,
            }
        }
    }
}
impl BackupRule {
    /// Creates a new builder-style object to manufacture [`BackupRule`](crate::model::BackupRule)
    pub fn builder() -> crate::model::backup_rule::Builder {
        crate::model::backup_rule::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum StorageClass {
    Cold,
    Deleted,
    Warm,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for StorageClass {
    fn from(s: &str) -> Self {
        match s {
            "COLD" => StorageClass::Cold,
            "DELETED" => StorageClass::Deleted,
            "WARM" => StorageClass::Warm,
            other => StorageClass::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for StorageClass {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(StorageClass::from(s))
    }
}
impl StorageClass {
    pub fn as_str(&self) -> &str {
        match self {
            StorageClass::Cold => "COLD",
            StorageClass::Deleted => "DELETED",
            StorageClass::Warm => "WARM",
            StorageClass::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["COLD", "DELETED", "WARM"]
    }
}
impl AsRef<str> for StorageClass {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
