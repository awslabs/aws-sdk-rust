// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_recovery_points_by_backup_vault::_list_recovery_points_by_backup_vault_output::ListRecoveryPointsByBackupVaultOutputBuilder;

pub use crate::operation::list_recovery_points_by_backup_vault::_list_recovery_points_by_backup_vault_input::ListRecoveryPointsByBackupVaultInputBuilder;

impl ListRecoveryPointsByBackupVaultInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVaultOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVaultError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_recovery_points_by_backup_vault();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListRecoveryPointsByBackupVault`.
///
/// <p>Returns detailed information about the recovery points stored in a backup vault.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListRecoveryPointsByBackupVaultFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_recovery_points_by_backup_vault::builders::ListRecoveryPointsByBackupVaultInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVaultOutput,
        crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVaultError,
    > for ListRecoveryPointsByBackupVaultFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVaultOutput,
            crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVaultError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListRecoveryPointsByBackupVaultFluentBuilder {
    /// Creates a new `ListRecoveryPointsByBackupVault`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListRecoveryPointsByBackupVault as a reference.
    pub fn as_input(&self) -> &crate::operation::list_recovery_points_by_backup_vault::builders::ListRecoveryPointsByBackupVaultInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVaultOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVaultError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVault::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVault::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVaultOutput,
        crate::operation::list_recovery_points_by_backup_vault::ListRecoveryPointsByBackupVaultError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_recovery_points_by_backup_vault::paginator::ListRecoveryPointsByBackupVaultPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_recovery_points_by_backup_vault::paginator::ListRecoveryPointsByBackupVaultPaginator {
        crate::operation::list_recovery_points_by_backup_vault::paginator::ListRecoveryPointsByBackupVaultPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p> <note>
    /// <p>Backup vault name might not be available when a supported service creates the backup.</p>
    /// </note>
    pub fn backup_vault_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.backup_vault_name(input.into());
        self
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p> <note>
    /// <p>Backup vault name might not be available when a supported service creates the backup.</p>
    /// </note>
    pub fn set_backup_vault_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_backup_vault_name(input);
        self
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p> <note>
    /// <p>Backup vault name might not be available when a supported service creates the backup.</p>
    /// </note>
    pub fn get_backup_vault_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_backup_vault_name()
    }
    /// <p>This parameter will sort the list of recovery points by account ID.</p>
    pub fn backup_vault_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.backup_vault_account_id(input.into());
        self
    }
    /// <p>This parameter will sort the list of recovery points by account ID.</p>
    pub fn set_backup_vault_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_backup_vault_account_id(input);
        self
    }
    /// <p>This parameter will sort the list of recovery points by account ID.</p>
    pub fn get_backup_vault_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_backup_vault_account_id()
    }
    /// <p>The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of items to be returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of items to be returned.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of items to be returned.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>Returns only recovery points that match the specified resource Amazon Resource Name (ARN).</p>
    pub fn by_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.by_resource_arn(input.into());
        self
    }
    /// <p>Returns only recovery points that match the specified resource Amazon Resource Name (ARN).</p>
    pub fn set_by_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_by_resource_arn(input);
        self
    }
    /// <p>Returns only recovery points that match the specified resource Amazon Resource Name (ARN).</p>
    pub fn get_by_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_by_resource_arn()
    }
    /// <p>Returns only recovery points that match the specified resource type.</p>
    pub fn by_resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.by_resource_type(input.into());
        self
    }
    /// <p>Returns only recovery points that match the specified resource type.</p>
    pub fn set_by_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_by_resource_type(input);
        self
    }
    /// <p>Returns only recovery points that match the specified resource type.</p>
    pub fn get_by_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_by_resource_type()
    }
    /// <p>Returns only recovery points that match the specified backup plan ID.</p>
    pub fn by_backup_plan_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.by_backup_plan_id(input.into());
        self
    }
    /// <p>Returns only recovery points that match the specified backup plan ID.</p>
    pub fn set_by_backup_plan_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_by_backup_plan_id(input);
        self
    }
    /// <p>Returns only recovery points that match the specified backup plan ID.</p>
    pub fn get_by_backup_plan_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_by_backup_plan_id()
    }
    /// <p>Returns only recovery points that were created before the specified timestamp.</p>
    pub fn by_created_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.by_created_before(input);
        self
    }
    /// <p>Returns only recovery points that were created before the specified timestamp.</p>
    pub fn set_by_created_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_by_created_before(input);
        self
    }
    /// <p>Returns only recovery points that were created before the specified timestamp.</p>
    pub fn get_by_created_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_by_created_before()
    }
    /// <p>Returns only recovery points that were created after the specified timestamp.</p>
    pub fn by_created_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.by_created_after(input);
        self
    }
    /// <p>Returns only recovery points that were created after the specified timestamp.</p>
    pub fn set_by_created_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_by_created_after(input);
        self
    }
    /// <p>Returns only recovery points that were created after the specified timestamp.</p>
    pub fn get_by_created_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_by_created_after()
    }
    /// <p>This returns only recovery points that match the specified parent (composite) recovery point Amazon Resource Name (ARN).</p>
    pub fn by_parent_recovery_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.by_parent_recovery_point_arn(input.into());
        self
    }
    /// <p>This returns only recovery points that match the specified parent (composite) recovery point Amazon Resource Name (ARN).</p>
    pub fn set_by_parent_recovery_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_by_parent_recovery_point_arn(input);
        self
    }
    /// <p>This returns only recovery points that match the specified parent (composite) recovery point Amazon Resource Name (ARN).</p>
    pub fn get_by_parent_recovery_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_by_parent_recovery_point_arn()
    }
}
