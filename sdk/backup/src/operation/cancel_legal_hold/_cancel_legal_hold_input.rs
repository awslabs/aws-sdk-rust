// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CancelLegalHoldInput {
    /// <p>Legal hold ID required to remove the specified legal hold on a recovery point.</p>
    pub legal_hold_id: ::std::option::Option<::std::string::String>,
    /// <p>String describing the reason for removing the legal hold.</p>
    pub cancel_description: ::std::option::Option<::std::string::String>,
    /// <p>The integer amount in days specifying amount of days after this API operation to remove legal hold.</p>
    pub retain_record_in_days: ::std::option::Option<i64>,
}
impl CancelLegalHoldInput {
    /// <p>Legal hold ID required to remove the specified legal hold on a recovery point.</p>
    pub fn legal_hold_id(&self) -> ::std::option::Option<&str> {
        self.legal_hold_id.as_deref()
    }
    /// <p>String describing the reason for removing the legal hold.</p>
    pub fn cancel_description(&self) -> ::std::option::Option<&str> {
        self.cancel_description.as_deref()
    }
    /// <p>The integer amount in days specifying amount of days after this API operation to remove legal hold.</p>
    pub fn retain_record_in_days(&self) -> ::std::option::Option<i64> {
        self.retain_record_in_days
    }
}
impl CancelLegalHoldInput {
    /// Creates a new builder-style object to manufacture [`CancelLegalHoldInput`](crate::operation::cancel_legal_hold::CancelLegalHoldInput).
    pub fn builder() -> crate::operation::cancel_legal_hold::builders::CancelLegalHoldInputBuilder {
        crate::operation::cancel_legal_hold::builders::CancelLegalHoldInputBuilder::default()
    }
}

/// A builder for [`CancelLegalHoldInput`](crate::operation::cancel_legal_hold::CancelLegalHoldInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CancelLegalHoldInputBuilder {
    pub(crate) legal_hold_id: ::std::option::Option<::std::string::String>,
    pub(crate) cancel_description: ::std::option::Option<::std::string::String>,
    pub(crate) retain_record_in_days: ::std::option::Option<i64>,
}
impl CancelLegalHoldInputBuilder {
    /// <p>Legal hold ID required to remove the specified legal hold on a recovery point.</p>
    /// This field is required.
    pub fn legal_hold_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.legal_hold_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Legal hold ID required to remove the specified legal hold on a recovery point.</p>
    pub fn set_legal_hold_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.legal_hold_id = input;
        self
    }
    /// <p>Legal hold ID required to remove the specified legal hold on a recovery point.</p>
    pub fn get_legal_hold_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.legal_hold_id
    }
    /// <p>String describing the reason for removing the legal hold.</p>
    /// This field is required.
    pub fn cancel_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cancel_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>String describing the reason for removing the legal hold.</p>
    pub fn set_cancel_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cancel_description = input;
        self
    }
    /// <p>String describing the reason for removing the legal hold.</p>
    pub fn get_cancel_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.cancel_description
    }
    /// <p>The integer amount in days specifying amount of days after this API operation to remove legal hold.</p>
    pub fn retain_record_in_days(mut self, input: i64) -> Self {
        self.retain_record_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The integer amount in days specifying amount of days after this API operation to remove legal hold.</p>
    pub fn set_retain_record_in_days(mut self, input: ::std::option::Option<i64>) -> Self {
        self.retain_record_in_days = input;
        self
    }
    /// <p>The integer amount in days specifying amount of days after this API operation to remove legal hold.</p>
    pub fn get_retain_record_in_days(&self) -> &::std::option::Option<i64> {
        &self.retain_record_in_days
    }
    /// Consumes the builder and constructs a [`CancelLegalHoldInput`](crate::operation::cancel_legal_hold::CancelLegalHoldInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::cancel_legal_hold::CancelLegalHoldInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::cancel_legal_hold::CancelLegalHoldInput {
            legal_hold_id: self.legal_hold_id,
            cancel_description: self.cancel_description,
            retain_record_in_days: self.retain_record_in_days,
        })
    }
}
