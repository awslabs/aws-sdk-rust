// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLegalHoldInput {
    /// <p>This is the ID required to use <code>GetLegalHold</code>. This unique ID is associated with a specific legal hold.</p>
    #[doc(hidden)]
    pub legal_hold_id: std::option::Option<std::string::String>,
}
impl GetLegalHoldInput {
    /// <p>This is the ID required to use <code>GetLegalHold</code>. This unique ID is associated with a specific legal hold.</p>
    pub fn legal_hold_id(&self) -> std::option::Option<&str> {
        self.legal_hold_id.as_deref()
    }
}
impl GetLegalHoldInput {
    /// Creates a new builder-style object to manufacture [`GetLegalHoldInput`](crate::operation::get_legal_hold::GetLegalHoldInput).
    pub fn builder() -> crate::operation::get_legal_hold::builders::GetLegalHoldInputBuilder {
        crate::operation::get_legal_hold::builders::GetLegalHoldInputBuilder::default()
    }
}

/// A builder for [`GetLegalHoldInput`](crate::operation::get_legal_hold::GetLegalHoldInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetLegalHoldInputBuilder {
    pub(crate) legal_hold_id: std::option::Option<std::string::String>,
}
impl GetLegalHoldInputBuilder {
    /// <p>This is the ID required to use <code>GetLegalHold</code>. This unique ID is associated with a specific legal hold.</p>
    pub fn legal_hold_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.legal_hold_id = Some(input.into());
        self
    }
    /// <p>This is the ID required to use <code>GetLegalHold</code>. This unique ID is associated with a specific legal hold.</p>
    pub fn set_legal_hold_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.legal_hold_id = input;
        self
    }
    /// Consumes the builder and constructs a [`GetLegalHoldInput`](crate::operation::get_legal_hold::GetLegalHoldInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_legal_hold::GetLegalHoldInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_legal_hold::GetLegalHoldInput {
            legal_hold_id: self.legal_hold_id,
        })
    }
}
