// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListReportPlansOutput {
    /// <p>A list of your report plans with detailed information for each plan. This information includes the Amazon Resource Name (ARN), report plan name, description, settings, delivery channel, deployment status, creation time, and last times the report plan attempted to and successfully ran.</p>
    #[doc(hidden)]
    pub report_plans: std::option::Option<std::vec::Vec<crate::types::ReportPlan>>,
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListReportPlansOutput {
    /// <p>A list of your report plans with detailed information for each plan. This information includes the Amazon Resource Name (ARN), report plan name, description, settings, delivery channel, deployment status, creation time, and last times the report plan attempted to and successfully ran.</p>
    pub fn report_plans(&self) -> std::option::Option<&[crate::types::ReportPlan]> {
        self.report_plans.as_deref()
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListReportPlansOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListReportPlansOutput {
    /// Creates a new builder-style object to manufacture [`ListReportPlansOutput`](crate::operation::list_report_plans::ListReportPlansOutput).
    pub fn builder() -> crate::operation::list_report_plans::builders::ListReportPlansOutputBuilder
    {
        crate::operation::list_report_plans::builders::ListReportPlansOutputBuilder::default()
    }
}

/// A builder for [`ListReportPlansOutput`](crate::operation::list_report_plans::ListReportPlansOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListReportPlansOutputBuilder {
    pub(crate) report_plans: std::option::Option<std::vec::Vec<crate::types::ReportPlan>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListReportPlansOutputBuilder {
    /// Appends an item to `report_plans`.
    ///
    /// To override the contents of this collection use [`set_report_plans`](Self::set_report_plans).
    ///
    /// <p>A list of your report plans with detailed information for each plan. This information includes the Amazon Resource Name (ARN), report plan name, description, settings, delivery channel, deployment status, creation time, and last times the report plan attempted to and successfully ran.</p>
    pub fn report_plans(mut self, input: crate::types::ReportPlan) -> Self {
        let mut v = self.report_plans.unwrap_or_default();
        v.push(input);
        self.report_plans = Some(v);
        self
    }
    /// <p>A list of your report plans with detailed information for each plan. This information includes the Amazon Resource Name (ARN), report plan name, description, settings, delivery channel, deployment status, creation time, and last times the report plan attempted to and successfully ran.</p>
    pub fn set_report_plans(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReportPlan>>,
    ) -> Self {
        self.report_plans = input;
        self
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListReportPlansOutput`](crate::operation::list_report_plans::ListReportPlansOutput).
    pub fn build(self) -> crate::operation::list_report_plans::ListReportPlansOutput {
        crate::operation::list_report_plans::ListReportPlansOutput {
            report_plans: self.report_plans,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
