// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeBackupJobOutput {
    /// <p>Returns the account ID that owns the backup job.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>Uniquely identifies a request to Backup to back up a resource.</p>
    #[doc(hidden)]
    pub backup_job_id: std::option::Option<std::string::String>,
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p>
    #[doc(hidden)]
    pub backup_vault_name: std::option::Option<std::string::String>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    #[doc(hidden)]
    pub backup_vault_arn: std::option::Option<std::string::String>,
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    #[doc(hidden)]
    pub recovery_point_arn: std::option::Option<std::string::String>,
    /// <p>An ARN that uniquely identifies a saved resource. The format of the ARN depends on the resource type.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The date and time that a backup job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that a job to create a backup job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    #[doc(hidden)]
    pub completion_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current state of a resource recovery point.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::BackupJobState>,
    /// <p>A detailed message explaining the status of the job to back up a resource.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>Contains an estimated percentage that is complete of a job at the time the job status was queried.</p>
    #[doc(hidden)]
    pub percent_done: std::option::Option<std::string::String>,
    /// <p>The size, in bytes, of a backup.</p>
    #[doc(hidden)]
    pub backup_size_in_bytes: std::option::Option<i64>,
    /// <p>Specifies the IAM role ARN used to create the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    #[doc(hidden)]
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>Contains identifying information about the creation of a backup job, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan that is used to create it.</p>
    #[doc(hidden)]
    pub created_by: std::option::Option<crate::types::RecoveryPointCreator>,
    /// <p>The type of Amazon Web Services resource to be backed up; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>The size in bytes transferred to a backup vault at the time that the job status was queried.</p>
    #[doc(hidden)]
    pub bytes_transferred: std::option::Option<i64>,
    /// <p>The date and time that a job to back up resources is expected to be completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>ExpectedCompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    #[doc(hidden)]
    pub expected_completion_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies the time in Unix format and Coordinated Universal Time (UTC) when a backup job must be started before it is canceled. The value is calculated by adding the start window to the scheduled time. So if the scheduled time were 6:00 PM and the start window is 2 hours, the <code>StartBy</code> time would be 8:00 PM on the date specified. The value of <code>StartBy</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    #[doc(hidden)]
    pub start_by: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Represents the options specified as part of backup plan or on-demand backup job.</p>
    #[doc(hidden)]
    pub backup_options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Represents the actual backup type selected for a backup job. For example, if a successful Windows Volume Shadow Copy Service (VSS) backup was taken, <code>BackupType</code> returns <code>"WindowsVSS"</code>. If <code>BackupType</code> is empty, then the backup type was a regular backup.</p>
    #[doc(hidden)]
    pub backup_type: std::option::Option<std::string::String>,
    /// <p>This returns the parent (composite) resource backup job ID.</p>
    #[doc(hidden)]
    pub parent_job_id: std::option::Option<std::string::String>,
    /// <p>This returns the boolean value that a backup job is a parent (composite) job.</p>
    #[doc(hidden)]
    pub is_parent: bool,
    /// <p>This returns the number of child (nested) backup jobs.</p>
    #[doc(hidden)]
    pub number_of_child_jobs: std::option::Option<i64>,
    /// <p>This returns the statistics of the included child (nested) backup jobs.</p>
    #[doc(hidden)]
    pub child_jobs_in_state:
        std::option::Option<std::collections::HashMap<crate::types::BackupJobState, i64>>,
    _request_id: Option<String>,
}
impl DescribeBackupJobOutput {
    /// <p>Returns the account ID that owns the backup job.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Uniquely identifies a request to Backup to back up a resource.</p>
    pub fn backup_job_id(&self) -> std::option::Option<&str> {
        self.backup_job_id.as_deref()
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p>
    pub fn backup_vault_name(&self) -> std::option::Option<&str> {
        self.backup_vault_name.as_deref()
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    pub fn backup_vault_arn(&self) -> std::option::Option<&str> {
        self.backup_vault_arn.as_deref()
    }
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn recovery_point_arn(&self) -> std::option::Option<&str> {
        self.recovery_point_arn.as_deref()
    }
    /// <p>An ARN that uniquely identifies a saved resource. The format of the ARN depends on the resource type.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The date and time that a backup job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date and time that a job to create a backup job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn completion_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completion_date.as_ref()
    }
    /// <p>The current state of a resource recovery point.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::BackupJobState> {
        self.state.as_ref()
    }
    /// <p>A detailed message explaining the status of the job to back up a resource.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>Contains an estimated percentage that is complete of a job at the time the job status was queried.</p>
    pub fn percent_done(&self) -> std::option::Option<&str> {
        self.percent_done.as_deref()
    }
    /// <p>The size, in bytes, of a backup.</p>
    pub fn backup_size_in_bytes(&self) -> std::option::Option<i64> {
        self.backup_size_in_bytes
    }
    /// <p>Specifies the IAM role ARN used to create the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub fn iam_role_arn(&self) -> std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>Contains identifying information about the creation of a backup job, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan that is used to create it.</p>
    pub fn created_by(&self) -> std::option::Option<&crate::types::RecoveryPointCreator> {
        self.created_by.as_ref()
    }
    /// <p>The type of Amazon Web Services resource to be backed up; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The size in bytes transferred to a backup vault at the time that the job status was queried.</p>
    pub fn bytes_transferred(&self) -> std::option::Option<i64> {
        self.bytes_transferred
    }
    /// <p>The date and time that a job to back up resources is expected to be completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>ExpectedCompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn expected_completion_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expected_completion_date.as_ref()
    }
    /// <p>Specifies the time in Unix format and Coordinated Universal Time (UTC) when a backup job must be started before it is canceled. The value is calculated by adding the start window to the scheduled time. So if the scheduled time were 6:00 PM and the start window is 2 hours, the <code>StartBy</code> time would be 8:00 PM on the date specified. The value of <code>StartBy</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn start_by(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_by.as_ref()
    }
    /// <p>Represents the options specified as part of backup plan or on-demand backup job.</p>
    pub fn backup_options(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.backup_options.as_ref()
    }
    /// <p>Represents the actual backup type selected for a backup job. For example, if a successful Windows Volume Shadow Copy Service (VSS) backup was taken, <code>BackupType</code> returns <code>"WindowsVSS"</code>. If <code>BackupType</code> is empty, then the backup type was a regular backup.</p>
    pub fn backup_type(&self) -> std::option::Option<&str> {
        self.backup_type.as_deref()
    }
    /// <p>This returns the parent (composite) resource backup job ID.</p>
    pub fn parent_job_id(&self) -> std::option::Option<&str> {
        self.parent_job_id.as_deref()
    }
    /// <p>This returns the boolean value that a backup job is a parent (composite) job.</p>
    pub fn is_parent(&self) -> bool {
        self.is_parent
    }
    /// <p>This returns the number of child (nested) backup jobs.</p>
    pub fn number_of_child_jobs(&self) -> std::option::Option<i64> {
        self.number_of_child_jobs
    }
    /// <p>This returns the statistics of the included child (nested) backup jobs.</p>
    pub fn child_jobs_in_state(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<crate::types::BackupJobState, i64>> {
        self.child_jobs_in_state.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeBackupJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeBackupJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribeBackupJobOutput`](crate::operation::describe_backup_job::DescribeBackupJobOutput).
    pub fn builder(
    ) -> crate::operation::describe_backup_job::builders::DescribeBackupJobOutputBuilder {
        crate::operation::describe_backup_job::builders::DescribeBackupJobOutputBuilder::default()
    }
}

/// A builder for [`DescribeBackupJobOutput`](crate::operation::describe_backup_job::DescribeBackupJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeBackupJobOutputBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) backup_job_id: std::option::Option<std::string::String>,
    pub(crate) backup_vault_name: std::option::Option<std::string::String>,
    pub(crate) backup_vault_arn: std::option::Option<std::string::String>,
    pub(crate) recovery_point_arn: std::option::Option<std::string::String>,
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) completion_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) state: std::option::Option<crate::types::BackupJobState>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) percent_done: std::option::Option<std::string::String>,
    pub(crate) backup_size_in_bytes: std::option::Option<i64>,
    pub(crate) iam_role_arn: std::option::Option<std::string::String>,
    pub(crate) created_by: std::option::Option<crate::types::RecoveryPointCreator>,
    pub(crate) resource_type: std::option::Option<std::string::String>,
    pub(crate) bytes_transferred: std::option::Option<i64>,
    pub(crate) expected_completion_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) start_by: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) backup_options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) backup_type: std::option::Option<std::string::String>,
    pub(crate) parent_job_id: std::option::Option<std::string::String>,
    pub(crate) is_parent: std::option::Option<bool>,
    pub(crate) number_of_child_jobs: std::option::Option<i64>,
    pub(crate) child_jobs_in_state:
        std::option::Option<std::collections::HashMap<crate::types::BackupJobState, i64>>,
    _request_id: Option<String>,
}
impl DescribeBackupJobOutputBuilder {
    /// <p>Returns the account ID that owns the backup job.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>Returns the account ID that owns the backup job.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Uniquely identifies a request to Backup to back up a resource.</p>
    pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.backup_job_id = Some(input.into());
        self
    }
    /// <p>Uniquely identifies a request to Backup to back up a resource.</p>
    pub fn set_backup_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.backup_job_id = input;
        self
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p>
    pub fn backup_vault_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.backup_vault_name = Some(input.into());
        self
    }
    /// <p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p>
    pub fn set_backup_vault_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.backup_vault_name = input;
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    pub fn backup_vault_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.backup_vault_arn = Some(input.into());
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.</p>
    pub fn set_backup_vault_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.backup_vault_arn = input;
        self
    }
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn recovery_point_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.recovery_point_arn = Some(input.into());
        self
    }
    /// <p>An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</p>
    pub fn set_recovery_point_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recovery_point_arn = input;
        self
    }
    /// <p>An ARN that uniquely identifies a saved resource. The format of the ARN depends on the resource type.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>An ARN that uniquely identifies a saved resource. The format of the ARN depends on the resource type.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The date and time that a backup job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The date and time that a backup job is created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreationDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date and time that a job to create a backup job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn completion_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.completion_date = Some(input);
        self
    }
    /// <p>The date and time that a job to create a backup job is completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_completion_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.completion_date = input;
        self
    }
    /// <p>The current state of a resource recovery point.</p>
    pub fn state(mut self, input: crate::types::BackupJobState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The current state of a resource recovery point.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::BackupJobState>) -> Self {
        self.state = input;
        self
    }
    /// <p>A detailed message explaining the status of the job to back up a resource.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>A detailed message explaining the status of the job to back up a resource.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Contains an estimated percentage that is complete of a job at the time the job status was queried.</p>
    pub fn percent_done(mut self, input: impl Into<std::string::String>) -> Self {
        self.percent_done = Some(input.into());
        self
    }
    /// <p>Contains an estimated percentage that is complete of a job at the time the job status was queried.</p>
    pub fn set_percent_done(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.percent_done = input;
        self
    }
    /// <p>The size, in bytes, of a backup.</p>
    pub fn backup_size_in_bytes(mut self, input: i64) -> Self {
        self.backup_size_in_bytes = Some(input);
        self
    }
    /// <p>The size, in bytes, of a backup.</p>
    pub fn set_backup_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.backup_size_in_bytes = input;
        self
    }
    /// <p>Specifies the IAM role ARN used to create the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.iam_role_arn = Some(input.into());
        self
    }
    /// <p>Specifies the IAM role ARN used to create the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.</p>
    pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>Contains identifying information about the creation of a backup job, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan that is used to create it.</p>
    pub fn created_by(mut self, input: crate::types::RecoveryPointCreator) -> Self {
        self.created_by = Some(input);
        self
    }
    /// <p>Contains identifying information about the creation of a backup job, including the <code>BackupPlanArn</code>, <code>BackupPlanId</code>, <code>BackupPlanVersion</code>, and <code>BackupRuleId</code> of the backup plan that is used to create it.</p>
    pub fn set_created_by(
        mut self,
        input: std::option::Option<crate::types::RecoveryPointCreator>,
    ) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The type of Amazon Web Services resource to be backed up; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// <p>The type of Amazon Web Services resource to be backed up; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The size in bytes transferred to a backup vault at the time that the job status was queried.</p>
    pub fn bytes_transferred(mut self, input: i64) -> Self {
        self.bytes_transferred = Some(input);
        self
    }
    /// <p>The size in bytes transferred to a backup vault at the time that the job status was queried.</p>
    pub fn set_bytes_transferred(mut self, input: std::option::Option<i64>) -> Self {
        self.bytes_transferred = input;
        self
    }
    /// <p>The date and time that a job to back up resources is expected to be completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>ExpectedCompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn expected_completion_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expected_completion_date = Some(input);
        self
    }
    /// <p>The date and time that a job to back up resources is expected to be completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>ExpectedCompletionDate</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_expected_completion_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.expected_completion_date = input;
        self
    }
    /// <p>Specifies the time in Unix format and Coordinated Universal Time (UTC) when a backup job must be started before it is canceled. The value is calculated by adding the start window to the scheduled time. So if the scheduled time were 6:00 PM and the start window is 2 hours, the <code>StartBy</code> time would be 8:00 PM on the date specified. The value of <code>StartBy</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn start_by(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_by = Some(input);
        self
    }
    /// <p>Specifies the time in Unix format and Coordinated Universal Time (UTC) when a backup job must be started before it is canceled. The value is calculated by adding the start window to the scheduled time. So if the scheduled time were 6:00 PM and the start window is 2 hours, the <code>StartBy</code> time would be 8:00 PM on the date specified. The value of <code>StartBy</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_start_by(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.start_by = input;
        self
    }
    /// Adds a key-value pair to `backup_options`.
    ///
    /// To override the contents of this collection use [`set_backup_options`](Self::set_backup_options).
    ///
    /// <p>Represents the options specified as part of backup plan or on-demand backup job.</p>
    pub fn backup_options(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.backup_options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.backup_options = Some(hash_map);
        self
    }
    /// <p>Represents the options specified as part of backup plan or on-demand backup job.</p>
    pub fn set_backup_options(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.backup_options = input;
        self
    }
    /// <p>Represents the actual backup type selected for a backup job. For example, if a successful Windows Volume Shadow Copy Service (VSS) backup was taken, <code>BackupType</code> returns <code>"WindowsVSS"</code>. If <code>BackupType</code> is empty, then the backup type was a regular backup.</p>
    pub fn backup_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.backup_type = Some(input.into());
        self
    }
    /// <p>Represents the actual backup type selected for a backup job. For example, if a successful Windows Volume Shadow Copy Service (VSS) backup was taken, <code>BackupType</code> returns <code>"WindowsVSS"</code>. If <code>BackupType</code> is empty, then the backup type was a regular backup.</p>
    pub fn set_backup_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.backup_type = input;
        self
    }
    /// <p>This returns the parent (composite) resource backup job ID.</p>
    pub fn parent_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_job_id = Some(input.into());
        self
    }
    /// <p>This returns the parent (composite) resource backup job ID.</p>
    pub fn set_parent_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parent_job_id = input;
        self
    }
    /// <p>This returns the boolean value that a backup job is a parent (composite) job.</p>
    pub fn is_parent(mut self, input: bool) -> Self {
        self.is_parent = Some(input);
        self
    }
    /// <p>This returns the boolean value that a backup job is a parent (composite) job.</p>
    pub fn set_is_parent(mut self, input: std::option::Option<bool>) -> Self {
        self.is_parent = input;
        self
    }
    /// <p>This returns the number of child (nested) backup jobs.</p>
    pub fn number_of_child_jobs(mut self, input: i64) -> Self {
        self.number_of_child_jobs = Some(input);
        self
    }
    /// <p>This returns the number of child (nested) backup jobs.</p>
    pub fn set_number_of_child_jobs(mut self, input: std::option::Option<i64>) -> Self {
        self.number_of_child_jobs = input;
        self
    }
    /// Adds a key-value pair to `child_jobs_in_state`.
    ///
    /// To override the contents of this collection use [`set_child_jobs_in_state`](Self::set_child_jobs_in_state).
    ///
    /// <p>This returns the statistics of the included child (nested) backup jobs.</p>
    pub fn child_jobs_in_state(mut self, k: crate::types::BackupJobState, v: i64) -> Self {
        let mut hash_map = self.child_jobs_in_state.unwrap_or_default();
        hash_map.insert(k, v);
        self.child_jobs_in_state = Some(hash_map);
        self
    }
    /// <p>This returns the statistics of the included child (nested) backup jobs.</p>
    pub fn set_child_jobs_in_state(
        mut self,
        input: std::option::Option<std::collections::HashMap<crate::types::BackupJobState, i64>>,
    ) -> Self {
        self.child_jobs_in_state = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeBackupJobOutput`](crate::operation::describe_backup_job::DescribeBackupJobOutput).
    pub fn build(self) -> crate::operation::describe_backup_job::DescribeBackupJobOutput {
        crate::operation::describe_backup_job::DescribeBackupJobOutput {
            account_id: self.account_id,
            backup_job_id: self.backup_job_id,
            backup_vault_name: self.backup_vault_name,
            backup_vault_arn: self.backup_vault_arn,
            recovery_point_arn: self.recovery_point_arn,
            resource_arn: self.resource_arn,
            creation_date: self.creation_date,
            completion_date: self.completion_date,
            state: self.state,
            status_message: self.status_message,
            percent_done: self.percent_done,
            backup_size_in_bytes: self.backup_size_in_bytes,
            iam_role_arn: self.iam_role_arn,
            created_by: self.created_by,
            resource_type: self.resource_type,
            bytes_transferred: self.bytes_transferred,
            expected_completion_date: self.expected_completion_date,
            start_by: self.start_by,
            backup_options: self.backup_options,
            backup_type: self.backup_type,
            parent_job_id: self.parent_job_id,
            is_parent: self.is_parent.unwrap_or_default(),
            number_of_child_jobs: self.number_of_child_jobs,
            child_jobs_in_state: self.child_jobs_in_state,
            _request_id: self._request_id,
        }
    }
}
