// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCopyJobsInput {
    /// <p>The next item following a partial list of returned items. For example, if a request is made to return maxResults number of items, NextToken allows you to return more items in your list starting at the location pointed to by the next token. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of items to be returned.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>Returns only copy jobs that match the specified resource Amazon Resource Name (ARN). </p>
    #[doc(hidden)]
    pub by_resource_arn: std::option::Option<std::string::String>,
    /// <p>Returns only copy jobs that are in the specified state.</p>
    #[doc(hidden)]
    pub by_state: std::option::Option<crate::types::CopyJobState>,
    /// <p>Returns only copy jobs that were created before the specified date.</p>
    #[doc(hidden)]
    pub by_created_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Returns only copy jobs that were created after the specified date.</p>
    #[doc(hidden)]
    pub by_created_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Returns only backup jobs for the specified resources:</p>
    /// <ul>
    /// <li> <p> <code>Aurora</code> for Amazon Aurora</p> </li>
    /// <li> <p> <code>DocumentDB</code> for Amazon DocumentDB (with MongoDB compatibility)</p> </li>
    /// <li> <p> <code>DynamoDB</code> for Amazon DynamoDB</p> </li>
    /// <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li>
    /// <li> <p> <code>EC2</code> for Amazon Elastic Compute Cloud</p> </li>
    /// <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li>
    /// <li> <p> <code>FSx</code> for Amazon FSx</p> </li>
    /// <li> <p> <code>Neptune</code> for Amazon Neptune</p> </li>
    /// <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li>
    /// <li> <p> <code>Storage Gateway</code> for Storage Gateway</p> </li>
    /// <li> <p> <code>S3</code> for Amazon S3</p> </li>
    /// <li> <p> <code>VirtualMachine</code> for virtual machines</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub by_resource_type: std::option::Option<std::string::String>,
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a source backup vault to copy from; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>. </p>
    #[doc(hidden)]
    pub by_destination_vault_arn: std::option::Option<std::string::String>,
    /// <p>The account ID to list the jobs from. Returns only copy jobs associated with the specified account ID.</p>
    #[doc(hidden)]
    pub by_account_id: std::option::Option<std::string::String>,
    /// <p>Returns only copy jobs completed before a date expressed in Unix format and Coordinated Universal Time (UTC).</p>
    #[doc(hidden)]
    pub by_complete_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Returns only copy jobs completed after a date expressed in Unix format and Coordinated Universal Time (UTC).</p>
    #[doc(hidden)]
    pub by_complete_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>This is a filter to list child (nested) jobs based on parent job ID.</p>
    #[doc(hidden)]
    pub by_parent_job_id: std::option::Option<std::string::String>,
}
impl ListCopyJobsInput {
    /// <p>The next item following a partial list of returned items. For example, if a request is made to return maxResults number of items, NextToken allows you to return more items in your list starting at the location pointed to by the next token. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to be returned.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>Returns only copy jobs that match the specified resource Amazon Resource Name (ARN). </p>
    pub fn by_resource_arn(&self) -> std::option::Option<&str> {
        self.by_resource_arn.as_deref()
    }
    /// <p>Returns only copy jobs that are in the specified state.</p>
    pub fn by_state(&self) -> std::option::Option<&crate::types::CopyJobState> {
        self.by_state.as_ref()
    }
    /// <p>Returns only copy jobs that were created before the specified date.</p>
    pub fn by_created_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.by_created_before.as_ref()
    }
    /// <p>Returns only copy jobs that were created after the specified date.</p>
    pub fn by_created_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.by_created_after.as_ref()
    }
    /// <p>Returns only backup jobs for the specified resources:</p>
    /// <ul>
    /// <li> <p> <code>Aurora</code> for Amazon Aurora</p> </li>
    /// <li> <p> <code>DocumentDB</code> for Amazon DocumentDB (with MongoDB compatibility)</p> </li>
    /// <li> <p> <code>DynamoDB</code> for Amazon DynamoDB</p> </li>
    /// <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li>
    /// <li> <p> <code>EC2</code> for Amazon Elastic Compute Cloud</p> </li>
    /// <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li>
    /// <li> <p> <code>FSx</code> for Amazon FSx</p> </li>
    /// <li> <p> <code>Neptune</code> for Amazon Neptune</p> </li>
    /// <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li>
    /// <li> <p> <code>Storage Gateway</code> for Storage Gateway</p> </li>
    /// <li> <p> <code>S3</code> for Amazon S3</p> </li>
    /// <li> <p> <code>VirtualMachine</code> for virtual machines</p> </li>
    /// </ul>
    pub fn by_resource_type(&self) -> std::option::Option<&str> {
        self.by_resource_type.as_deref()
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a source backup vault to copy from; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>. </p>
    pub fn by_destination_vault_arn(&self) -> std::option::Option<&str> {
        self.by_destination_vault_arn.as_deref()
    }
    /// <p>The account ID to list the jobs from. Returns only copy jobs associated with the specified account ID.</p>
    pub fn by_account_id(&self) -> std::option::Option<&str> {
        self.by_account_id.as_deref()
    }
    /// <p>Returns only copy jobs completed before a date expressed in Unix format and Coordinated Universal Time (UTC).</p>
    pub fn by_complete_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.by_complete_before.as_ref()
    }
    /// <p>Returns only copy jobs completed after a date expressed in Unix format and Coordinated Universal Time (UTC).</p>
    pub fn by_complete_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.by_complete_after.as_ref()
    }
    /// <p>This is a filter to list child (nested) jobs based on parent job ID.</p>
    pub fn by_parent_job_id(&self) -> std::option::Option<&str> {
        self.by_parent_job_id.as_deref()
    }
}
impl ListCopyJobsInput {
    /// Creates a new builder-style object to manufacture [`ListCopyJobsInput`](crate::operation::list_copy_jobs::ListCopyJobsInput).
    pub fn builder() -> crate::operation::list_copy_jobs::builders::ListCopyJobsInputBuilder {
        crate::operation::list_copy_jobs::builders::ListCopyJobsInputBuilder::default()
    }
}

/// A builder for [`ListCopyJobsInput`](crate::operation::list_copy_jobs::ListCopyJobsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListCopyJobsInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) by_resource_arn: std::option::Option<std::string::String>,
    pub(crate) by_state: std::option::Option<crate::types::CopyJobState>,
    pub(crate) by_created_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) by_created_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) by_resource_type: std::option::Option<std::string::String>,
    pub(crate) by_destination_vault_arn: std::option::Option<std::string::String>,
    pub(crate) by_account_id: std::option::Option<std::string::String>,
    pub(crate) by_complete_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) by_complete_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) by_parent_job_id: std::option::Option<std::string::String>,
}
impl ListCopyJobsInputBuilder {
    /// <p>The next item following a partial list of returned items. For example, if a request is made to return maxResults number of items, NextToken allows you to return more items in your list starting at the location pointed to by the next token. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The next item following a partial list of returned items. For example, if a request is made to return maxResults number of items, NextToken allows you to return more items in your list starting at the location pointed to by the next token. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of items to be returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of items to be returned.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Returns only copy jobs that match the specified resource Amazon Resource Name (ARN). </p>
    pub fn by_resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.by_resource_arn = Some(input.into());
        self
    }
    /// <p>Returns only copy jobs that match the specified resource Amazon Resource Name (ARN). </p>
    pub fn set_by_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.by_resource_arn = input;
        self
    }
    /// <p>Returns only copy jobs that are in the specified state.</p>
    pub fn by_state(mut self, input: crate::types::CopyJobState) -> Self {
        self.by_state = Some(input);
        self
    }
    /// <p>Returns only copy jobs that are in the specified state.</p>
    pub fn set_by_state(mut self, input: std::option::Option<crate::types::CopyJobState>) -> Self {
        self.by_state = input;
        self
    }
    /// <p>Returns only copy jobs that were created before the specified date.</p>
    pub fn by_created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.by_created_before = Some(input);
        self
    }
    /// <p>Returns only copy jobs that were created before the specified date.</p>
    pub fn set_by_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.by_created_before = input;
        self
    }
    /// <p>Returns only copy jobs that were created after the specified date.</p>
    pub fn by_created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.by_created_after = Some(input);
        self
    }
    /// <p>Returns only copy jobs that were created after the specified date.</p>
    pub fn set_by_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.by_created_after = input;
        self
    }
    /// <p>Returns only backup jobs for the specified resources:</p>
    /// <ul>
    /// <li> <p> <code>Aurora</code> for Amazon Aurora</p> </li>
    /// <li> <p> <code>DocumentDB</code> for Amazon DocumentDB (with MongoDB compatibility)</p> </li>
    /// <li> <p> <code>DynamoDB</code> for Amazon DynamoDB</p> </li>
    /// <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li>
    /// <li> <p> <code>EC2</code> for Amazon Elastic Compute Cloud</p> </li>
    /// <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li>
    /// <li> <p> <code>FSx</code> for Amazon FSx</p> </li>
    /// <li> <p> <code>Neptune</code> for Amazon Neptune</p> </li>
    /// <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li>
    /// <li> <p> <code>Storage Gateway</code> for Storage Gateway</p> </li>
    /// <li> <p> <code>S3</code> for Amazon S3</p> </li>
    /// <li> <p> <code>VirtualMachine</code> for virtual machines</p> </li>
    /// </ul>
    pub fn by_resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.by_resource_type = Some(input.into());
        self
    }
    /// <p>Returns only backup jobs for the specified resources:</p>
    /// <ul>
    /// <li> <p> <code>Aurora</code> for Amazon Aurora</p> </li>
    /// <li> <p> <code>DocumentDB</code> for Amazon DocumentDB (with MongoDB compatibility)</p> </li>
    /// <li> <p> <code>DynamoDB</code> for Amazon DynamoDB</p> </li>
    /// <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li>
    /// <li> <p> <code>EC2</code> for Amazon Elastic Compute Cloud</p> </li>
    /// <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li>
    /// <li> <p> <code>FSx</code> for Amazon FSx</p> </li>
    /// <li> <p> <code>Neptune</code> for Amazon Neptune</p> </li>
    /// <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li>
    /// <li> <p> <code>Storage Gateway</code> for Storage Gateway</p> </li>
    /// <li> <p> <code>S3</code> for Amazon S3</p> </li>
    /// <li> <p> <code>VirtualMachine</code> for virtual machines</p> </li>
    /// </ul>
    pub fn set_by_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.by_resource_type = input;
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a source backup vault to copy from; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>. </p>
    pub fn by_destination_vault_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.by_destination_vault_arn = Some(input.into());
        self
    }
    /// <p>An Amazon Resource Name (ARN) that uniquely identifies a source backup vault to copy from; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>. </p>
    pub fn set_by_destination_vault_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.by_destination_vault_arn = input;
        self
    }
    /// <p>The account ID to list the jobs from. Returns only copy jobs associated with the specified account ID.</p>
    pub fn by_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.by_account_id = Some(input.into());
        self
    }
    /// <p>The account ID to list the jobs from. Returns only copy jobs associated with the specified account ID.</p>
    pub fn set_by_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.by_account_id = input;
        self
    }
    /// <p>Returns only copy jobs completed before a date expressed in Unix format and Coordinated Universal Time (UTC).</p>
    pub fn by_complete_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.by_complete_before = Some(input);
        self
    }
    /// <p>Returns only copy jobs completed before a date expressed in Unix format and Coordinated Universal Time (UTC).</p>
    pub fn set_by_complete_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.by_complete_before = input;
        self
    }
    /// <p>Returns only copy jobs completed after a date expressed in Unix format and Coordinated Universal Time (UTC).</p>
    pub fn by_complete_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.by_complete_after = Some(input);
        self
    }
    /// <p>Returns only copy jobs completed after a date expressed in Unix format and Coordinated Universal Time (UTC).</p>
    pub fn set_by_complete_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.by_complete_after = input;
        self
    }
    /// <p>This is a filter to list child (nested) jobs based on parent job ID.</p>
    pub fn by_parent_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.by_parent_job_id = Some(input.into());
        self
    }
    /// <p>This is a filter to list child (nested) jobs based on parent job ID.</p>
    pub fn set_by_parent_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.by_parent_job_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ListCopyJobsInput`](crate::operation::list_copy_jobs::ListCopyJobsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_copy_jobs::ListCopyJobsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_copy_jobs::ListCopyJobsInput {
            next_token: self.next_token,
            max_results: self.max_results,
            by_resource_arn: self.by_resource_arn,
            by_state: self.by_state,
            by_created_before: self.by_created_before,
            by_created_after: self.by_created_after,
            by_resource_type: self.by_resource_type,
            by_destination_vault_arn: self.by_destination_vault_arn,
            by_account_id: self.by_account_id,
            by_complete_before: self.by_complete_before,
            by_complete_after: self.by_complete_after,
            by_parent_job_id: self.by_parent_job_id,
        })
    }
}
