// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_restore_testing_selection::_create_restore_testing_selection_output::CreateRestoreTestingSelectionOutputBuilder;

pub use crate::operation::create_restore_testing_selection::_create_restore_testing_selection_input::CreateRestoreTestingSelectionInputBuilder;

impl crate::operation::create_restore_testing_selection::builders::CreateRestoreTestingSelectionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_restore_testing_selection::CreateRestoreTestingSelectionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_restore_testing_selection::CreateRestoreTestingSelectionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_restore_testing_selection();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateRestoreTestingSelection`.
///
/// <p>This request can be sent after CreateRestoreTestingPlan request returns successfully. This is the second part of creating a resource testing plan, and it must be completed sequentially.</p>
/// <p>This consists of <code>RestoreTestingSelectionName</code>, <code>ProtectedResourceType</code>, and one of the following:</p>
/// <ul>
/// <li>
/// <p><code>ProtectedResourceArns</code></p></li>
/// <li>
/// <p><code>ProtectedResourceConditions</code></p></li>
/// </ul>
/// <p>Each protected resource type can have one single value.</p>
/// <p>A restore testing selection can include a wildcard value ("*") for <code>ProtectedResourceArns</code> along with <code>ProtectedResourceConditions</code>. Alternatively, you can include up to 30 specific protected resource ARNs in <code>ProtectedResourceArns</code>.</p>
/// <p>Cannot select by both protected resource types AND specific ARNs. Request will fail if both are included.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateRestoreTestingSelectionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_restore_testing_selection::builders::CreateRestoreTestingSelectionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_restore_testing_selection::CreateRestoreTestingSelectionOutput,
        crate::operation::create_restore_testing_selection::CreateRestoreTestingSelectionError,
    > for CreateRestoreTestingSelectionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_restore_testing_selection::CreateRestoreTestingSelectionOutput,
            crate::operation::create_restore_testing_selection::CreateRestoreTestingSelectionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateRestoreTestingSelectionFluentBuilder {
    /// Creates a new `CreateRestoreTestingSelection`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateRestoreTestingSelection as a reference.
    pub fn as_input(&self) -> &crate::operation::create_restore_testing_selection::builders::CreateRestoreTestingSelectionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_restore_testing_selection::CreateRestoreTestingSelectionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_restore_testing_selection::CreateRestoreTestingSelectionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_restore_testing_selection::CreateRestoreTestingSelection::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_restore_testing_selection::CreateRestoreTestingSelection::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_restore_testing_selection::CreateRestoreTestingSelectionOutput,
        crate::operation::create_restore_testing_selection::CreateRestoreTestingSelectionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>This is an optional unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice. If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    pub fn creator_request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.creator_request_id(input.into());
        self
    }
    /// <p>This is an optional unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice. If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    pub fn set_creator_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_creator_request_id(input);
        self
    }
    /// <p>This is an optional unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice. If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>
    pub fn get_creator_request_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_creator_request_id()
    }
    /// <p>Input the restore testing plan name that was returned from the related CreateRestoreTestingPlan request.</p>
    pub fn restore_testing_plan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.restore_testing_plan_name(input.into());
        self
    }
    /// <p>Input the restore testing plan name that was returned from the related CreateRestoreTestingPlan request.</p>
    pub fn set_restore_testing_plan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_restore_testing_plan_name(input);
        self
    }
    /// <p>Input the restore testing plan name that was returned from the related CreateRestoreTestingPlan request.</p>
    pub fn get_restore_testing_plan_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_restore_testing_plan_name()
    }
    /// <p>This consists of <code>RestoreTestingSelectionName</code>, <code>ProtectedResourceType</code>, and one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ProtectedResourceArns</code></p></li>
    /// <li>
    /// <p><code>ProtectedResourceConditions</code></p></li>
    /// </ul>
    /// <p>Each protected resource type can have one single value.</p>
    /// <p>A restore testing selection can include a wildcard value ("*") for <code>ProtectedResourceArns</code> along with <code>ProtectedResourceConditions</code>. Alternatively, you can include up to 30 specific protected resource ARNs in <code>ProtectedResourceArns</code>.</p>
    pub fn restore_testing_selection(mut self, input: crate::types::RestoreTestingSelectionForCreate) -> Self {
        self.inner = self.inner.restore_testing_selection(input);
        self
    }
    /// <p>This consists of <code>RestoreTestingSelectionName</code>, <code>ProtectedResourceType</code>, and one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ProtectedResourceArns</code></p></li>
    /// <li>
    /// <p><code>ProtectedResourceConditions</code></p></li>
    /// </ul>
    /// <p>Each protected resource type can have one single value.</p>
    /// <p>A restore testing selection can include a wildcard value ("*") for <code>ProtectedResourceArns</code> along with <code>ProtectedResourceConditions</code>. Alternatively, you can include up to 30 specific protected resource ARNs in <code>ProtectedResourceArns</code>.</p>
    pub fn set_restore_testing_selection(mut self, input: ::std::option::Option<crate::types::RestoreTestingSelectionForCreate>) -> Self {
        self.inner = self.inner.set_restore_testing_selection(input);
        self
    }
    /// <p>This consists of <code>RestoreTestingSelectionName</code>, <code>ProtectedResourceType</code>, and one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ProtectedResourceArns</code></p></li>
    /// <li>
    /// <p><code>ProtectedResourceConditions</code></p></li>
    /// </ul>
    /// <p>Each protected resource type can have one single value.</p>
    /// <p>A restore testing selection can include a wildcard value ("*") for <code>ProtectedResourceArns</code> along with <code>ProtectedResourceConditions</code>. Alternatively, you can include up to 30 specific protected resource ARNs in <code>ProtectedResourceArns</code>.</p>
    pub fn get_restore_testing_selection(&self) -> &::std::option::Option<crate::types::RestoreTestingSelectionForCreate> {
        self.inner.get_restore_testing_selection()
    }
}
