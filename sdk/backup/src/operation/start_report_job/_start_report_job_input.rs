// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartReportJobInput {
    /// <p>The unique name of a report plan.</p>
    #[doc(hidden)]
    pub report_plan_name: std::option::Option<std::string::String>,
    /// <p>A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>StartReportJobInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.</p>
    #[doc(hidden)]
    pub idempotency_token: std::option::Option<std::string::String>,
}
impl StartReportJobInput {
    /// <p>The unique name of a report plan.</p>
    pub fn report_plan_name(&self) -> std::option::Option<&str> {
        self.report_plan_name.as_deref()
    }
    /// <p>A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>StartReportJobInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.</p>
    pub fn idempotency_token(&self) -> std::option::Option<&str> {
        self.idempotency_token.as_deref()
    }
}
impl StartReportJobInput {
    /// Creates a new builder-style object to manufacture [`StartReportJobInput`](crate::operation::start_report_job::StartReportJobInput).
    pub fn builder() -> crate::operation::start_report_job::builders::StartReportJobInputBuilder {
        crate::operation::start_report_job::builders::StartReportJobInputBuilder::default()
    }
}

/// A builder for [`StartReportJobInput`](crate::operation::start_report_job::StartReportJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartReportJobInputBuilder {
    pub(crate) report_plan_name: std::option::Option<std::string::String>,
    pub(crate) idempotency_token: std::option::Option<std::string::String>,
}
impl StartReportJobInputBuilder {
    /// <p>The unique name of a report plan.</p>
    pub fn report_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.report_plan_name = Some(input.into());
        self
    }
    /// <p>The unique name of a report plan.</p>
    pub fn set_report_plan_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.report_plan_name = input;
        self
    }
    /// <p>A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>StartReportJobInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.</p>
    pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.idempotency_token = Some(input.into());
        self
    }
    /// <p>A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>StartReportJobInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.</p>
    pub fn set_idempotency_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.idempotency_token = input;
        self
    }
    /// Consumes the builder and constructs a [`StartReportJobInput`](crate::operation::start_report_job::StartReportJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_report_job::StartReportJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::start_report_job::StartReportJobInput {
            report_plan_name: self.report_plan_name,
            idempotency_token: self.idempotency_token,
        })
    }
}
