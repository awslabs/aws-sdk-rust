// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_region_settings::_update_region_settings_output::UpdateRegionSettingsOutputBuilder;

pub use crate::operation::update_region_settings::_update_region_settings_input::UpdateRegionSettingsInputBuilder;

/// Fluent builder constructing a request to `UpdateRegionSettings`.
///
/// <p>Updates the current service opt-in settings for the Region. If service-opt-in is enabled for a service, Backup tries to protect that service's resources in this Region, when the resource is included in an on-demand backup or scheduled backup plan. Otherwise, Backup does not try to protect that service's resources in this Region. Use the <code>DescribeRegionSettings</code> API to determine the resource types that are supported.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRegionSettingsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_region_settings::builders::UpdateRegionSettingsInputBuilder,
}
impl UpdateRegionSettingsFluentBuilder {
    /// Creates a new `UpdateRegionSettings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_region_settings::UpdateRegionSettings,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_region_settings::UpdateRegionSettingsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_region_settings::UpdateRegionSettingsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_region_settings::UpdateRegionSettingsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Adds a key-value pair to `ResourceTypeOptInPreference`.
    ///
    /// To override the contents of this collection use [`set_resource_type_opt_in_preference`](Self::set_resource_type_opt_in_preference).
    ///
    /// <p>Updates the list of services along with the opt-in preferences for the Region.</p>
    pub fn resource_type_opt_in_preference(
        mut self,
        k: impl Into<std::string::String>,
        v: bool,
    ) -> Self {
        self.inner = self.inner.resource_type_opt_in_preference(k.into(), v);
        self
    }
    /// <p>Updates the list of services along with the opt-in preferences for the Region.</p>
    pub fn set_resource_type_opt_in_preference(
        mut self,
        input: std::option::Option<std::collections::HashMap<std::string::String, bool>>,
    ) -> Self {
        self.inner = self.inner.set_resource_type_opt_in_preference(input);
        self
    }
    /// Adds a key-value pair to `ResourceTypeManagementPreference`.
    ///
    /// To override the contents of this collection use [`set_resource_type_management_preference`](Self::set_resource_type_management_preference).
    ///
    /// <p>Enables or disables full Backup management of backups for a resource type. To enable full Backup management for DynamoDB along with <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/advanced-ddb-backup.html"> Backup's advanced DynamoDB backup features</a>, follow the procedure to <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/advanced-ddb-backup.html#advanced-ddb-backup-enable-cli"> enable advanced DynamoDB backup programmatically</a>.</p>
    pub fn resource_type_management_preference(
        mut self,
        k: impl Into<std::string::String>,
        v: bool,
    ) -> Self {
        self.inner = self.inner.resource_type_management_preference(k.into(), v);
        self
    }
    /// <p>Enables or disables full Backup management of backups for a resource type. To enable full Backup management for DynamoDB along with <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/advanced-ddb-backup.html"> Backup's advanced DynamoDB backup features</a>, follow the procedure to <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/advanced-ddb-backup.html#advanced-ddb-backup-enable-cli"> enable advanced DynamoDB backup programmatically</a>.</p>
    pub fn set_resource_type_management_preference(
        mut self,
        input: std::option::Option<std::collections::HashMap<std::string::String, bool>>,
    ) -> Self {
        self.inner = self.inner.set_resource_type_management_preference(input);
        self
    }
}
