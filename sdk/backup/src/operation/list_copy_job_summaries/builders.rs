// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_copy_job_summaries::_list_copy_job_summaries_output::ListCopyJobSummariesOutputBuilder;

pub use crate::operation::list_copy_job_summaries::_list_copy_job_summaries_input::ListCopyJobSummariesInputBuilder;

impl crate::operation::list_copy_job_summaries::builders::ListCopyJobSummariesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_copy_job_summaries::ListCopyJobSummariesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_copy_job_summaries::ListCopyJobSummariesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_copy_job_summaries();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListCopyJobSummaries`.
///
/// <p>This request obtains a list of copy jobs created or running within the the most recent 30 days. You can include parameters AccountID, State, ResourceType, MessageCategory, AggregationPeriod, MaxResults, or NextToken to filter results.</p>
/// <p>This request returns a summary that contains Region, Account, State, RestourceType, MessageCategory, StartTime, EndTime, and Count of included jobs.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListCopyJobSummariesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_copy_job_summaries::builders::ListCopyJobSummariesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_copy_job_summaries::ListCopyJobSummariesOutput,
        crate::operation::list_copy_job_summaries::ListCopyJobSummariesError,
    > for ListCopyJobSummariesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_copy_job_summaries::ListCopyJobSummariesOutput,
            crate::operation::list_copy_job_summaries::ListCopyJobSummariesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListCopyJobSummariesFluentBuilder {
    /// Creates a new `ListCopyJobSummaries`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListCopyJobSummaries as a reference.
    pub fn as_input(&self) -> &crate::operation::list_copy_job_summaries::builders::ListCopyJobSummariesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_copy_job_summaries::ListCopyJobSummariesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_copy_job_summaries::ListCopyJobSummariesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_copy_job_summaries::ListCopyJobSummaries::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_copy_job_summaries::ListCopyJobSummaries::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_copy_job_summaries::ListCopyJobSummariesOutput,
        crate::operation::list_copy_job_summaries::ListCopyJobSummariesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_copy_job_summaries::paginator::ListCopyJobSummariesPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_copy_job_summaries::paginator::ListCopyJobSummariesPaginator {
        crate::operation::list_copy_job_summaries::paginator::ListCopyJobSummariesPaginator::new(self.handle, self.inner)
    }
    /// <p>Returns the job count for the specified account.</p>
    /// <p>If the request is sent from a member account or an account not part of Amazon Web Services Organizations, jobs within requestor's account will be returned.</p>
    /// <p>Root, admin, and delegated administrator accounts can use the value ANY to return job counts from every account in the organization.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts from all accounts within the authenticated organization, then returns the sum.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>Returns the job count for the specified account.</p>
    /// <p>If the request is sent from a member account or an account not part of Amazon Web Services Organizations, jobs within requestor's account will be returned.</p>
    /// <p>Root, admin, and delegated administrator accounts can use the value ANY to return job counts from every account in the organization.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts from all accounts within the authenticated organization, then returns the sum.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>Returns the job count for the specified account.</p>
    /// <p>If the request is sent from a member account or an account not part of Amazon Web Services Organizations, jobs within requestor's account will be returned.</p>
    /// <p>Root, admin, and delegated administrator accounts can use the value ANY to return job counts from every account in the organization.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts from all accounts within the authenticated organization, then returns the sum.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_account_id()
    }
    /// <p>This parameter returns the job count for jobs with the specified state.</p>
    /// <p>The the value ANY returns count of all states.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all states and returns the sum.</p>
    pub fn state(mut self, input: crate::types::CopyJobStatus) -> Self {
        self.inner = self.inner.state(input);
        self
    }
    /// <p>This parameter returns the job count for jobs with the specified state.</p>
    /// <p>The the value ANY returns count of all states.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all states and returns the sum.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::CopyJobStatus>) -> Self {
        self.inner = self.inner.set_state(input);
        self
    }
    /// <p>This parameter returns the job count for jobs with the specified state.</p>
    /// <p>The the value ANY returns count of all states.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all states and returns the sum.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::CopyJobStatus> {
        self.inner.get_state()
    }
    /// <p>Returns the job count for the specified resource type. Use request <code>GetSupportedResourceTypes</code> to obtain strings for supported resource types.</p>
    /// <p>The the value ANY returns count of all resource types.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all resource types and returns the sum.</p>
    /// <p>The type of Amazon Web Services resource to be backed up; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_type(input.into());
        self
    }
    /// <p>Returns the job count for the specified resource type. Use request <code>GetSupportedResourceTypes</code> to obtain strings for supported resource types.</p>
    /// <p>The the value ANY returns count of all resource types.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all resource types and returns the sum.</p>
    /// <p>The type of Amazon Web Services resource to be backed up; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_type(input);
        self
    }
    /// <p>Returns the job count for the specified resource type. Use request <code>GetSupportedResourceTypes</code> to obtain strings for supported resource types.</p>
    /// <p>The the value ANY returns count of all resource types.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all resource types and returns the sum.</p>
    /// <p>The type of Amazon Web Services resource to be backed up; for example, an Amazon Elastic Block Store (Amazon EBS) volume or an Amazon Relational Database Service (Amazon RDS) database.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_type()
    }
    /// <p>This parameter returns the job count for the specified message category.</p>
    /// <p>Example accepted strings include <code>AccessDenied</code>, <code>Success</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of accepted MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub fn message_category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.message_category(input.into());
        self
    }
    /// <p>This parameter returns the job count for the specified message category.</p>
    /// <p>Example accepted strings include <code>AccessDenied</code>, <code>Success</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of accepted MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub fn set_message_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_message_category(input);
        self
    }
    /// <p>This parameter returns the job count for the specified message category.</p>
    /// <p>Example accepted strings include <code>AccessDenied</code>, <code>Success</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of accepted MessageCategory strings.</p>
    /// <p>The the value ANY returns count of all message categories.</p>
    /// <p><code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub fn get_message_category(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_message_category()
    }
    /// <p>This is the period that sets the boundaries for returned results.</p>
    /// <ul>
    /// <li>
    /// <p><code>ONE_DAY</code> for daily job count for the prior 14 days.</p></li>
    /// <li>
    /// <p><code>SEVEN_DAYS</code> for the aggregated job count for the prior 7 days.</p></li>
    /// <li>
    /// <p><code>FOURTEEN_DAYS</code> for aggregated job count for prior 14 days.</p></li>
    /// </ul>
    pub fn aggregation_period(mut self, input: crate::types::AggregationPeriod) -> Self {
        self.inner = self.inner.aggregation_period(input);
        self
    }
    /// <p>This is the period that sets the boundaries for returned results.</p>
    /// <ul>
    /// <li>
    /// <p><code>ONE_DAY</code> for daily job count for the prior 14 days.</p></li>
    /// <li>
    /// <p><code>SEVEN_DAYS</code> for the aggregated job count for the prior 7 days.</p></li>
    /// <li>
    /// <p><code>FOURTEEN_DAYS</code> for aggregated job count for prior 14 days.</p></li>
    /// </ul>
    pub fn set_aggregation_period(mut self, input: ::std::option::Option<crate::types::AggregationPeriod>) -> Self {
        self.inner = self.inner.set_aggregation_period(input);
        self
    }
    /// <p>This is the period that sets the boundaries for returned results.</p>
    /// <ul>
    /// <li>
    /// <p><code>ONE_DAY</code> for daily job count for the prior 14 days.</p></li>
    /// <li>
    /// <p><code>SEVEN_DAYS</code> for the aggregated job count for the prior 7 days.</p></li>
    /// <li>
    /// <p><code>FOURTEEN_DAYS</code> for aggregated job count for prior 14 days.</p></li>
    /// </ul>
    pub fn get_aggregation_period(&self) -> &::std::option::Option<crate::types::AggregationPeriod> {
        self.inner.get_aggregation_period()
    }
    /// <p>This parameter sets the maximum number of items to be returned.</p>
    /// <p>The value is an integer. Range of accepted values is from 1 to 500.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>This parameter sets the maximum number of items to be returned.</p>
    /// <p>The value is an integer. Range of accepted values is from 1 to 500.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>This parameter sets the maximum number of items to be returned.</p>
    /// <p>The value is an integer. Range of accepted values is from 1 to 500.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>The next item following a partial list of returned resources. For example, if a request is made to return <code>MaxResults</code> number of resources, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The next item following a partial list of returned resources. For example, if a request is made to return <code>MaxResults</code> number of resources, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The next item following a partial list of returned resources. For example, if a request is made to return <code>MaxResults</code> number of resources, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
