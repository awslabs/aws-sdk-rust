// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListReportJobsInput {
    /// <p>Returns only report jobs with the specified report plan name.</p>
    pub by_report_plan_name: ::std::option::Option<::std::string::String>,
    /// <p>Returns only report jobs that were created before the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub by_creation_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Returns only report jobs that were created after the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub by_creation_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Returns only report jobs that are in the specified status. The statuses are:</p>
    /// <p> <code>CREATED | RUNNING | COMPLETED | FAILED</code> </p>
    pub by_status: ::std::option::Option<::std::string::String>,
    /// <p>The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListReportJobsInput {
    /// <p>Returns only report jobs with the specified report plan name.</p>
    pub fn by_report_plan_name(&self) -> ::std::option::Option<&str> {
        self.by_report_plan_name.as_deref()
    }
    /// <p>Returns only report jobs that were created before the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub fn by_creation_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.by_creation_before.as_ref()
    }
    /// <p>Returns only report jobs that were created after the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub fn by_creation_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.by_creation_after.as_ref()
    }
    /// <p>Returns only report jobs that are in the specified status. The statuses are:</p>
    /// <p> <code>CREATED | RUNNING | COMPLETED | FAILED</code> </p>
    pub fn by_status(&self) -> ::std::option::Option<&str> {
        self.by_status.as_deref()
    }
    /// <p>The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListReportJobsInput {
    /// Creates a new builder-style object to manufacture [`ListReportJobsInput`](crate::operation::list_report_jobs::ListReportJobsInput).
    pub fn builder() -> crate::operation::list_report_jobs::builders::ListReportJobsInputBuilder {
        crate::operation::list_report_jobs::builders::ListReportJobsInputBuilder::default()
    }
}

/// A builder for [`ListReportJobsInput`](crate::operation::list_report_jobs::ListReportJobsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListReportJobsInputBuilder {
    pub(crate) by_report_plan_name: ::std::option::Option<::std::string::String>,
    pub(crate) by_creation_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) by_creation_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) by_status: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListReportJobsInputBuilder {
    /// <p>Returns only report jobs with the specified report plan name.</p>
    pub fn by_report_plan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.by_report_plan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns only report jobs with the specified report plan name.</p>
    pub fn set_by_report_plan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.by_report_plan_name = input;
        self
    }
    /// <p>Returns only report jobs with the specified report plan name.</p>
    pub fn get_by_report_plan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.by_report_plan_name
    }
    /// <p>Returns only report jobs that were created before the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub fn by_creation_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.by_creation_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns only report jobs that were created before the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub fn set_by_creation_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.by_creation_before = input;
        self
    }
    /// <p>Returns only report jobs that were created before the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub fn get_by_creation_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.by_creation_before
    }
    /// <p>Returns only report jobs that were created after the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub fn by_creation_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.by_creation_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns only report jobs that were created after the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub fn set_by_creation_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.by_creation_after = input;
        self
    }
    /// <p>Returns only report jobs that were created after the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub fn get_by_creation_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.by_creation_after
    }
    /// <p>Returns only report jobs that are in the specified status. The statuses are:</p>
    /// <p> <code>CREATED | RUNNING | COMPLETED | FAILED</code> </p>
    pub fn by_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.by_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns only report jobs that are in the specified status. The statuses are:</p>
    /// <p> <code>CREATED | RUNNING | COMPLETED | FAILED</code> </p>
    pub fn set_by_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.by_status = input;
        self
    }
    /// <p>Returns only report jobs that are in the specified status. The statuses are:</p>
    /// <p> <code>CREATED | RUNNING | COMPLETED | FAILED</code> </p>
    pub fn get_by_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.by_status
    }
    /// <p>The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListReportJobsInput`](crate::operation::list_report_jobs::ListReportJobsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_report_jobs::ListReportJobsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_report_jobs::ListReportJobsInput {
            by_report_plan_name: self.by_report_plan_name,
            by_creation_before: self.by_creation_before,
            by_creation_after: self.by_creation_after,
            by_status: self.by_status,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
