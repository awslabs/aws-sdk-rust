// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_report_jobs::_list_report_jobs_output::ListReportJobsOutputBuilder;

pub use crate::operation::list_report_jobs::_list_report_jobs_input::ListReportJobsInputBuilder;

/// Fluent builder constructing a request to `ListReportJobs`.
///
/// <p>Returns details about your report jobs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListReportJobsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_report_jobs::builders::ListReportJobsInputBuilder,
}
impl ListReportJobsFluentBuilder {
    /// Creates a new `ListReportJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_report_jobs::ListReportJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_report_jobs::ListReportJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_report_jobs::ListReportJobsOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_report_jobs::ListReportJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_report_jobs::paginator::ListReportJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_report_jobs::paginator::ListReportJobsPaginator {
        crate::operation::list_report_jobs::paginator::ListReportJobsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>Returns only report jobs with the specified report plan name.</p>
    pub fn by_report_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.by_report_plan_name(input.into());
        self
    }
    /// <p>Returns only report jobs with the specified report plan name.</p>
    pub fn set_by_report_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_by_report_plan_name(input);
        self
    }
    /// <p>Returns only report jobs that were created before the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub fn by_creation_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.by_creation_before(input);
        self
    }
    /// <p>Returns only report jobs that were created before the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub fn set_by_creation_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_by_creation_before(input);
        self
    }
    /// <p>Returns only report jobs that were created after the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub fn by_creation_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.by_creation_after(input);
        self
    }
    /// <p>Returns only report jobs that were created after the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p>
    pub fn set_by_creation_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_by_creation_after(input);
        self
    }
    /// <p>Returns only report jobs that are in the specified status. The statuses are:</p>
    /// <p> <code>CREATED | RUNNING | COMPLETED | FAILED</code> </p>
    pub fn by_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.by_status(input.into());
        self
    }
    /// <p>Returns only report jobs that are in the specified status. The statuses are:</p>
    /// <p> <code>CREATED | RUNNING | COMPLETED | FAILED</code> </p>
    pub fn set_by_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_by_status(input);
        self
    }
    /// <p>The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
