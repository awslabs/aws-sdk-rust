// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLogicallyAirGappedBackupVault`](crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`backup_vault_name(impl Into<String>)`](crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder::backup_vault_name) / [`set_backup_vault_name(Option<String>)`](crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder::set_backup_vault_name):<br>required: **true**<br><p>This is the name of the vault that is being created.</p><br>
    ///   - [`backup_vault_tags(impl Into<String>, impl Into<String>)`](crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder::backup_vault_tags) / [`set_backup_vault_tags(Option<HashMap::<String, String>>)`](crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder::set_backup_vault_tags):<br>required: **false**<br><p>These are the tags that will be included in the newly-created vault.</p><br>
    ///   - [`creator_request_id(impl Into<String>)`](crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder::creator_request_id) / [`set_creator_request_id(Option<String>)`](crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder::set_creator_request_id):<br>required: **false**<br><p>This is the ID of the creation request.</p><br>
    ///   - [`min_retention_days(i64)`](crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder::min_retention_days) / [`set_min_retention_days(Option<i64>)`](crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder::set_min_retention_days):<br>required: **true**<br><p>This setting specifies the minimum retention period that the vault retains its recovery points. If this parameter is not specified, no minimum retention period is enforced.</p>  <p>If specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or longer than the minimum retention period. If a job retention period is shorter than that minimum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault.</p><br>
    ///   - [`max_retention_days(i64)`](crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder::max_retention_days) / [`set_max_retention_days(Option<i64>)`](crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder::set_max_retention_days):<br>required: **true**<br><p>This is the setting that specifies the maximum retention period that the vault retains its recovery points. If this parameter is not specified, Backup does not enforce a maximum retention period on the recovery points in the vault (allowing indefinite storage).</p>  <p>If specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or shorter than the maximum retention period. If the job retention period is longer than that maximum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault.</p><br>
    /// - On success, responds with [`CreateLogicallyAirGappedBackupVaultOutput`](crate::operation::create_logically_air_gapped_backup_vault::CreateLogicallyAirGappedBackupVaultOutput) with field(s):
    ///   - [`backup_vault_name(Option<String>)`](crate::operation::create_logically_air_gapped_backup_vault::CreateLogicallyAirGappedBackupVaultOutput::backup_vault_name): <p>The name of a logical container where backups are stored. Logically air-gapped backup vaults are identified by names that are unique to the account used to create them and the Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p>
    ///   - [`backup_vault_arn(Option<String>)`](crate::operation::create_logically_air_gapped_backup_vault::CreateLogicallyAirGappedBackupVaultOutput::backup_vault_arn): <p>This is the ARN (Amazon Resource Name) of the vault being created.</p>
    ///   - [`creation_date(Option<DateTime>)`](crate::operation::create_logically_air_gapped_backup_vault::CreateLogicallyAirGappedBackupVaultOutput::creation_date): <p>The date and time when the vault was created.</p>  <p>This value is in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    ///   - [`vault_state(Option<VaultState>)`](crate::operation::create_logically_air_gapped_backup_vault::CreateLogicallyAirGappedBackupVaultOutput::vault_state): <p>This is the current state of the vault.</p>
    /// - On failure, responds with [`SdkError<CreateLogicallyAirGappedBackupVaultError>`](crate::operation::create_logically_air_gapped_backup_vault::CreateLogicallyAirGappedBackupVaultError)
    pub fn create_logically_air_gapped_backup_vault(
        &self,
    ) -> crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder {
        crate::operation::create_logically_air_gapped_backup_vault::builders::CreateLogicallyAirGappedBackupVaultFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
