// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListReportJobs`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`by_report_plan_name(impl Into<String>)`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::by_report_plan_name) / [`set_by_report_plan_name(Option<String>)`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::set_by_report_plan_name):<br>required: **false**<br><p>Returns only report jobs with the specified report plan name.</p><br>
    ///   - [`by_creation_before(DateTime)`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::by_creation_before) / [`set_by_creation_before(Option<DateTime>)`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::set_by_creation_before):<br>required: **false**<br><p>Returns only report jobs that were created before the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p><br>
    ///   - [`by_creation_after(DateTime)`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::by_creation_after) / [`set_by_creation_after(Option<DateTime>)`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::set_by_creation_after):<br>required: **false**<br><p>Returns only report jobs that were created after the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</p><br>
    ///   - [`by_status(impl Into<String>)`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::by_status) / [`set_by_status(Option<String>)`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::set_by_status):<br>required: **false**<br><p>Returns only report jobs that are in the specified status. The statuses are:</p>  <p> <code>CREATED | RUNNING | COMPLETED | FAILED</code> </p><br>
    ///   - [`max_results(i32)`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::set_max_results):<br>required: **false**<br><p>The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::set_next_token):<br>required: **false**<br><p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p><br>
    /// - On success, responds with [`ListReportJobsOutput`](crate::operation::list_report_jobs::ListReportJobsOutput) with field(s):
    ///   - [`report_jobs(Option<Vec::<ReportJob>>)`](crate::operation::list_report_jobs::ListReportJobsOutput::report_jobs): <p>Details about your report jobs in JSON format.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_report_jobs::ListReportJobsOutput::next_token): <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    /// - On failure, responds with [`SdkError<ListReportJobsError>`](crate::operation::list_report_jobs::ListReportJobsError)
    pub fn list_report_jobs(&self) -> crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder {
        crate::operation::list_report_jobs::builders::ListReportJobsFluentBuilder::new(self.handle.clone())
    }
}
