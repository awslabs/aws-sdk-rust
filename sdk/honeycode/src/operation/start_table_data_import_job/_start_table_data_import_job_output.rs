// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartTableDataImportJobOutput {
    /// <p> The id that is assigned to this import job. Future requests to find out the status of this import job need to send this id in the appropriate parameter in the request. </p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p> The status of the import job immediately after submitting the request. </p>
    #[doc(hidden)]
    pub job_status: std::option::Option<crate::types::TableDataImportJobStatus>,
    _request_id: Option<String>,
}
impl StartTableDataImportJobOutput {
    /// <p> The id that is assigned to this import job. Future requests to find out the status of this import job need to send this id in the appropriate parameter in the request. </p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p> The status of the import job immediately after submitting the request. </p>
    pub fn job_status(&self) -> std::option::Option<&crate::types::TableDataImportJobStatus> {
        self.job_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartTableDataImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartTableDataImportJobOutput {
    /// Creates a new builder-style object to manufacture [`StartTableDataImportJobOutput`](crate::operation::start_table_data_import_job::StartTableDataImportJobOutput).
    pub fn builder(
    ) -> crate::operation::start_table_data_import_job::builders::StartTableDataImportJobOutputBuilder
    {
        crate::operation::start_table_data_import_job::builders::StartTableDataImportJobOutputBuilder::default()
    }
}

/// A builder for [`StartTableDataImportJobOutput`](crate::operation::start_table_data_import_job::StartTableDataImportJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartTableDataImportJobOutputBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) job_status: std::option::Option<crate::types::TableDataImportJobStatus>,
    _request_id: Option<String>,
}
impl StartTableDataImportJobOutputBuilder {
    /// <p> The id that is assigned to this import job. Future requests to find out the status of this import job need to send this id in the appropriate parameter in the request. </p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p> The id that is assigned to this import job. Future requests to find out the status of this import job need to send this id in the appropriate parameter in the request. </p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p> The status of the import job immediately after submitting the request. </p>
    pub fn job_status(mut self, input: crate::types::TableDataImportJobStatus) -> Self {
        self.job_status = Some(input);
        self
    }
    /// <p> The status of the import job immediately after submitting the request. </p>
    pub fn set_job_status(
        mut self,
        input: std::option::Option<crate::types::TableDataImportJobStatus>,
    ) -> Self {
        self.job_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartTableDataImportJobOutput`](crate::operation::start_table_data_import_job::StartTableDataImportJobOutput).
    pub fn build(
        self,
    ) -> crate::operation::start_table_data_import_job::StartTableDataImportJobOutput {
        crate::operation::start_table_data_import_job::StartTableDataImportJobOutput {
            job_id: self.job_id,
            job_status: self.job_status,
            _request_id: self._request_id,
        }
    }
}
