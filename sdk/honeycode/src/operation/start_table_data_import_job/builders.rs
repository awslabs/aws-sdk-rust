// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_table_data_import_job::_start_table_data_import_job_output::StartTableDataImportJobOutputBuilder;

pub use crate::operation::start_table_data_import_job::_start_table_data_import_job_input::StartTableDataImportJobInputBuilder;

impl crate::operation::start_table_data_import_job::builders::StartTableDataImportJobInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_table_data_import_job::StartTableDataImportJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_table_data_import_job::StartTableDataImportJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_table_data_import_job();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartTableDataImportJob`.
///
/// <p>The StartTableDataImportJob API allows you to start an import job on a table. This API will only return the id of the job that was started. To find out the status of the import request, you need to call the DescribeTableDataImportJob API.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartTableDataImportJobFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_table_data_import_job::builders::StartTableDataImportJobInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_table_data_import_job::StartTableDataImportJobOutput,
        crate::operation::start_table_data_import_job::StartTableDataImportJobError,
    > for StartTableDataImportJobFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_table_data_import_job::StartTableDataImportJobOutput,
            crate::operation::start_table_data_import_job::StartTableDataImportJobError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartTableDataImportJobFluentBuilder {
    /// Creates a new `StartTableDataImportJob`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartTableDataImportJob as a reference.
    pub fn as_input(&self) -> &crate::operation::start_table_data_import_job::builders::StartTableDataImportJobInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_table_data_import_job::StartTableDataImportJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_table_data_import_job::StartTableDataImportJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_table_data_import_job::StartTableDataImportJob::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_table_data_import_job::StartTableDataImportJob::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_table_data_import_job::StartTableDataImportJobOutput,
        crate::operation::start_table_data_import_job::StartTableDataImportJobError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the workbook where the rows are being imported.</p>
    /// <p>If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.</p>
    pub fn workbook_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.workbook_id(input.into());
        self
    }
    /// <p>The ID of the workbook where the rows are being imported.</p>
    /// <p>If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.</p>
    pub fn set_workbook_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_workbook_id(input);
        self
    }
    /// <p>The ID of the workbook where the rows are being imported.</p>
    /// <p>If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.</p>
    pub fn get_workbook_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_workbook_id()
    }
    /// <p>The source of the data that is being imported. The size of source must be no larger than 100 MB. Source must have no more than 100,000 cells and no more than 1,000 rows.</p>
    pub fn data_source(mut self, input: crate::types::ImportDataSource) -> Self {
        self.inner = self.inner.data_source(input);
        self
    }
    /// <p>The source of the data that is being imported. The size of source must be no larger than 100 MB. Source must have no more than 100,000 cells and no more than 1,000 rows.</p>
    pub fn set_data_source(mut self, input: ::std::option::Option<crate::types::ImportDataSource>) -> Self {
        self.inner = self.inner.set_data_source(input);
        self
    }
    /// <p>The source of the data that is being imported. The size of source must be no larger than 100 MB. Source must have no more than 100,000 cells and no more than 1,000 rows.</p>
    pub fn get_data_source(&self) -> &::std::option::Option<crate::types::ImportDataSource> {
        self.inner.get_data_source()
    }
    /// <p>The format of the data that is being imported. Currently the only option supported is "DELIMITED_TEXT".</p>
    pub fn data_format(mut self, input: crate::types::ImportSourceDataFormat) -> Self {
        self.inner = self.inner.data_format(input);
        self
    }
    /// <p>The format of the data that is being imported. Currently the only option supported is "DELIMITED_TEXT".</p>
    pub fn set_data_format(mut self, input: ::std::option::Option<crate::types::ImportSourceDataFormat>) -> Self {
        self.inner = self.inner.set_data_format(input);
        self
    }
    /// <p>The format of the data that is being imported. Currently the only option supported is "DELIMITED_TEXT".</p>
    pub fn get_data_format(&self) -> &::std::option::Option<crate::types::ImportSourceDataFormat> {
        self.inner.get_data_format()
    }
    /// <p>The ID of the table where the rows are being imported.</p>
    /// <p>If a table with the specified id could not be found, this API throws ResourceNotFoundException.</p>
    pub fn destination_table_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.destination_table_id(input.into());
        self
    }
    /// <p>The ID of the table where the rows are being imported.</p>
    /// <p>If a table with the specified id could not be found, this API throws ResourceNotFoundException.</p>
    pub fn set_destination_table_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_destination_table_id(input);
        self
    }
    /// <p>The ID of the table where the rows are being imported.</p>
    /// <p>If a table with the specified id could not be found, this API throws ResourceNotFoundException.</p>
    pub fn get_destination_table_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_destination_table_id()
    }
    /// <p>The options for customizing this import request.</p>
    pub fn import_options(mut self, input: crate::types::ImportOptions) -> Self {
        self.inner = self.inner.import_options(input);
        self
    }
    /// <p>The options for customizing this import request.</p>
    pub fn set_import_options(mut self, input: ::std::option::Option<crate::types::ImportOptions>) -> Self {
        self.inner = self.inner.set_import_options(input);
        self
    }
    /// <p>The options for customizing this import request.</p>
    pub fn get_import_options(&self) -> &::std::option::Option<crate::types::ImportOptions> {
        self.inner.get_import_options()
    }
    /// <p>The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again.</p>
    /// <p>Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again.</p>
    /// <p>Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again.</p>
    /// <p>Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
}
