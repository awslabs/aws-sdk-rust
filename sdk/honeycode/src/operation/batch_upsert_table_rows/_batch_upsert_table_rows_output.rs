// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchUpsertTableRowsOutput {
    /// <p> A map with the batch item id as the key and the result of the upsert operation as the value. The result of the upsert operation specifies whether existing rows were updated or a new row was appended, along with the list of row ids that were affected. </p>
    #[doc(hidden)]
    pub rows: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::UpsertRowsResult>,
    >,
    /// <p>The updated workbook cursor after updating or appending rows in the table.</p>
    #[doc(hidden)]
    pub workbook_cursor: i64,
    /// <p> The list of batch items in the request that could not be updated or appended in the table. Each element in this list contains one item from the request that could not be updated in the table along with the reason why that item could not be updated or appended. </p>
    #[doc(hidden)]
    pub failed_batch_items: std::option::Option<std::vec::Vec<crate::types::FailedBatchItem>>,
    _request_id: Option<String>,
}
impl BatchUpsertTableRowsOutput {
    /// <p> A map with the batch item id as the key and the result of the upsert operation as the value. The result of the upsert operation specifies whether existing rows were updated or a new row was appended, along with the list of row ids that were affected. </p>
    pub fn rows(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::UpsertRowsResult>,
    > {
        self.rows.as_ref()
    }
    /// <p>The updated workbook cursor after updating or appending rows in the table.</p>
    pub fn workbook_cursor(&self) -> i64 {
        self.workbook_cursor
    }
    /// <p> The list of batch items in the request that could not be updated or appended in the table. Each element in this list contains one item from the request that could not be updated in the table along with the reason why that item could not be updated or appended. </p>
    pub fn failed_batch_items(&self) -> std::option::Option<&[crate::types::FailedBatchItem]> {
        self.failed_batch_items.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchUpsertTableRowsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchUpsertTableRowsOutput {
    /// Creates a new builder-style object to manufacture [`BatchUpsertTableRowsOutput`](crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsOutput).
    pub fn builder(
    ) -> crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsOutputBuilder
    {
        crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsOutputBuilder::default()
    }
}

/// A builder for [`BatchUpsertTableRowsOutput`](crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchUpsertTableRowsOutputBuilder {
    pub(crate) rows: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::UpsertRowsResult>,
    >,
    pub(crate) workbook_cursor: std::option::Option<i64>,
    pub(crate) failed_batch_items:
        std::option::Option<std::vec::Vec<crate::types::FailedBatchItem>>,
    _request_id: Option<String>,
}
impl BatchUpsertTableRowsOutputBuilder {
    /// Adds a key-value pair to `rows`.
    ///
    /// To override the contents of this collection use [`set_rows`](Self::set_rows).
    ///
    /// <p> A map with the batch item id as the key and the result of the upsert operation as the value. The result of the upsert operation specifies whether existing rows were updated or a new row was appended, along with the list of row ids that were affected. </p>
    pub fn rows(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::UpsertRowsResult,
    ) -> Self {
        let mut hash_map = self.rows.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.rows = Some(hash_map);
        self
    }
    /// <p> A map with the batch item id as the key and the result of the upsert operation as the value. The result of the upsert operation specifies whether existing rows were updated or a new row was appended, along with the list of row ids that were affected. </p>
    pub fn set_rows(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::UpsertRowsResult>,
        >,
    ) -> Self {
        self.rows = input;
        self
    }
    /// <p>The updated workbook cursor after updating or appending rows in the table.</p>
    pub fn workbook_cursor(mut self, input: i64) -> Self {
        self.workbook_cursor = Some(input);
        self
    }
    /// <p>The updated workbook cursor after updating or appending rows in the table.</p>
    pub fn set_workbook_cursor(mut self, input: std::option::Option<i64>) -> Self {
        self.workbook_cursor = input;
        self
    }
    /// Appends an item to `failed_batch_items`.
    ///
    /// To override the contents of this collection use [`set_failed_batch_items`](Self::set_failed_batch_items).
    ///
    /// <p> The list of batch items in the request that could not be updated or appended in the table. Each element in this list contains one item from the request that could not be updated in the table along with the reason why that item could not be updated or appended. </p>
    pub fn failed_batch_items(mut self, input: crate::types::FailedBatchItem) -> Self {
        let mut v = self.failed_batch_items.unwrap_or_default();
        v.push(input);
        self.failed_batch_items = Some(v);
        self
    }
    /// <p> The list of batch items in the request that could not be updated or appended in the table. Each element in this list contains one item from the request that could not be updated in the table along with the reason why that item could not be updated or appended. </p>
    pub fn set_failed_batch_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FailedBatchItem>>,
    ) -> Self {
        self.failed_batch_items = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchUpsertTableRowsOutput`](crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsOutput).
    pub fn build(self) -> crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsOutput {
        crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsOutput {
            rows: self.rows,
            workbook_cursor: self.workbook_cursor.unwrap_or_default(),
            failed_batch_items: self.failed_batch_items,
            _request_id: self._request_id,
        }
    }
}
