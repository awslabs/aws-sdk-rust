// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchUpsertTableRowsInput {
    /// <p>The ID of the workbook where the rows are being upserted.</p>
    /// <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub workbook_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the table where the rows are being upserted.</p>
    /// <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub table_id: ::std::option::Option<::std::string::String>,
    /// <p> The list of rows to upsert in the table. Each item in this list needs to have a batch item id to uniquely identify the element in the request, a filter expression to find the rows to update for that element and the cell values to set for each column in the upserted rows. You need to specify at least one item in this list. </p>
    /// <p> Note that if one of the filter formulas in the request fails to evaluate because of an error or one of the column ids in any of the rows does not exist in the table, then the request fails and no updates are made to the table. </p>
    pub rows_to_upsert: ::std::option::Option<::std::vec::Vec<crate::types::UpsertRowData>>,
    /// <p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p>
    /// <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
}
impl BatchUpsertTableRowsInput {
    /// <p>The ID of the workbook where the rows are being upserted.</p>
    /// <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn workbook_id(&self) -> ::std::option::Option<&str> {
        self.workbook_id.as_deref()
    }
    /// <p>The ID of the table where the rows are being upserted.</p>
    /// <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn table_id(&self) -> ::std::option::Option<&str> {
        self.table_id.as_deref()
    }
    /// <p> The list of rows to upsert in the table. Each item in this list needs to have a batch item id to uniquely identify the element in the request, a filter expression to find the rows to update for that element and the cell values to set for each column in the upserted rows. You need to specify at least one item in this list. </p>
    /// <p> Note that if one of the filter formulas in the request fails to evaluate because of an error or one of the column ids in any of the rows does not exist in the table, then the request fails and no updates are made to the table. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rows_to_upsert.is_none()`.
    pub fn rows_to_upsert(&self) -> &[crate::types::UpsertRowData] {
        self.rows_to_upsert.as_deref().unwrap_or_default()
    }
    /// <p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p>
    /// <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
}
impl BatchUpsertTableRowsInput {
    /// Creates a new builder-style object to manufacture [`BatchUpsertTableRowsInput`](crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsInput).
    pub fn builder() -> crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsInputBuilder {
        crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsInputBuilder::default()
    }
}

/// A builder for [`BatchUpsertTableRowsInput`](crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchUpsertTableRowsInputBuilder {
    pub(crate) workbook_id: ::std::option::Option<::std::string::String>,
    pub(crate) table_id: ::std::option::Option<::std::string::String>,
    pub(crate) rows_to_upsert: ::std::option::Option<::std::vec::Vec<crate::types::UpsertRowData>>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
}
impl BatchUpsertTableRowsInputBuilder {
    /// <p>The ID of the workbook where the rows are being upserted.</p>
    /// <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    /// This field is required.
    pub fn workbook_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workbook_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workbook where the rows are being upserted.</p>
    /// <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn set_workbook_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workbook_id = input;
        self
    }
    /// <p>The ID of the workbook where the rows are being upserted.</p>
    /// <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn get_workbook_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workbook_id
    }
    /// <p>The ID of the table where the rows are being upserted.</p>
    /// <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    /// This field is required.
    pub fn table_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the table where the rows are being upserted.</p>
    /// <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn set_table_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_id = input;
        self
    }
    /// <p>The ID of the table where the rows are being upserted.</p>
    /// <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn get_table_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_id
    }
    /// Appends an item to `rows_to_upsert`.
    ///
    /// To override the contents of this collection use [`set_rows_to_upsert`](Self::set_rows_to_upsert).
    ///
    /// <p> The list of rows to upsert in the table. Each item in this list needs to have a batch item id to uniquely identify the element in the request, a filter expression to find the rows to update for that element and the cell values to set for each column in the upserted rows. You need to specify at least one item in this list. </p>
    /// <p> Note that if one of the filter formulas in the request fails to evaluate because of an error or one of the column ids in any of the rows does not exist in the table, then the request fails and no updates are made to the table. </p>
    pub fn rows_to_upsert(mut self, input: crate::types::UpsertRowData) -> Self {
        let mut v = self.rows_to_upsert.unwrap_or_default();
        v.push(input);
        self.rows_to_upsert = ::std::option::Option::Some(v);
        self
    }
    /// <p> The list of rows to upsert in the table. Each item in this list needs to have a batch item id to uniquely identify the element in the request, a filter expression to find the rows to update for that element and the cell values to set for each column in the upserted rows. You need to specify at least one item in this list. </p>
    /// <p> Note that if one of the filter formulas in the request fails to evaluate because of an error or one of the column ids in any of the rows does not exist in the table, then the request fails and no updates are made to the table. </p>
    pub fn set_rows_to_upsert(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UpsertRowData>>) -> Self {
        self.rows_to_upsert = input;
        self
    }
    /// <p> The list of rows to upsert in the table. Each item in this list needs to have a batch item id to uniquely identify the element in the request, a filter expression to find the rows to update for that element and the cell values to set for each column in the upserted rows. You need to specify at least one item in this list. </p>
    /// <p> Note that if one of the filter formulas in the request fails to evaluate because of an error or one of the column ids in any of the rows does not exist in the table, then the request fails and no updates are made to the table. </p>
    pub fn get_rows_to_upsert(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UpsertRowData>> {
        &self.rows_to_upsert
    }
    /// <p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p>
    /// <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p>
    /// <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p>
    /// <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Consumes the builder and constructs a [`BatchUpsertTableRowsInput`](crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsInput {
            workbook_id: self.workbook_id,
            table_id: self.table_id,
            rows_to_upsert: self.rows_to_upsert,
            client_request_token: self.client_request_token,
        })
    }
}
