// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchCreateTableRowsOutput {
    /// <p>The updated workbook cursor after adding the new rows at the end of the table.</p>
    #[doc(hidden)]
    pub workbook_cursor: i64,
    /// <p>The map of batch item id to the row id that was created for that item.</p>
    #[doc(hidden)]
    pub created_rows:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p> The list of batch items in the request that could not be added to the table. Each element in this list contains one item from the request that could not be added to the table along with the reason why that item could not be added. </p>
    #[doc(hidden)]
    pub failed_batch_items: std::option::Option<std::vec::Vec<crate::types::FailedBatchItem>>,
    _request_id: Option<String>,
}
impl BatchCreateTableRowsOutput {
    /// <p>The updated workbook cursor after adding the new rows at the end of the table.</p>
    pub fn workbook_cursor(&self) -> i64 {
        self.workbook_cursor
    }
    /// <p>The map of batch item id to the row id that was created for that item.</p>
    pub fn created_rows(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.created_rows.as_ref()
    }
    /// <p> The list of batch items in the request that could not be added to the table. Each element in this list contains one item from the request that could not be added to the table along with the reason why that item could not be added. </p>
    pub fn failed_batch_items(&self) -> std::option::Option<&[crate::types::FailedBatchItem]> {
        self.failed_batch_items.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchCreateTableRowsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchCreateTableRowsOutput {
    /// Creates a new builder-style object to manufacture [`BatchCreateTableRowsOutput`](crate::operation::batch_create_table_rows::BatchCreateTableRowsOutput).
    pub fn builder(
    ) -> crate::operation::batch_create_table_rows::builders::BatchCreateTableRowsOutputBuilder
    {
        crate::operation::batch_create_table_rows::builders::BatchCreateTableRowsOutputBuilder::default()
    }
}

/// A builder for [`BatchCreateTableRowsOutput`](crate::operation::batch_create_table_rows::BatchCreateTableRowsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchCreateTableRowsOutputBuilder {
    pub(crate) workbook_cursor: std::option::Option<i64>,
    pub(crate) created_rows:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) failed_batch_items:
        std::option::Option<std::vec::Vec<crate::types::FailedBatchItem>>,
    _request_id: Option<String>,
}
impl BatchCreateTableRowsOutputBuilder {
    /// <p>The updated workbook cursor after adding the new rows at the end of the table.</p>
    pub fn workbook_cursor(mut self, input: i64) -> Self {
        self.workbook_cursor = Some(input);
        self
    }
    /// <p>The updated workbook cursor after adding the new rows at the end of the table.</p>
    pub fn set_workbook_cursor(mut self, input: std::option::Option<i64>) -> Self {
        self.workbook_cursor = input;
        self
    }
    /// Adds a key-value pair to `created_rows`.
    ///
    /// To override the contents of this collection use [`set_created_rows`](Self::set_created_rows).
    ///
    /// <p>The map of batch item id to the row id that was created for that item.</p>
    pub fn created_rows(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.created_rows.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.created_rows = Some(hash_map);
        self
    }
    /// <p>The map of batch item id to the row id that was created for that item.</p>
    pub fn set_created_rows(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.created_rows = input;
        self
    }
    /// Appends an item to `failed_batch_items`.
    ///
    /// To override the contents of this collection use [`set_failed_batch_items`](Self::set_failed_batch_items).
    ///
    /// <p> The list of batch items in the request that could not be added to the table. Each element in this list contains one item from the request that could not be added to the table along with the reason why that item could not be added. </p>
    pub fn failed_batch_items(mut self, input: crate::types::FailedBatchItem) -> Self {
        let mut v = self.failed_batch_items.unwrap_or_default();
        v.push(input);
        self.failed_batch_items = Some(v);
        self
    }
    /// <p> The list of batch items in the request that could not be added to the table. Each element in this list contains one item from the request that could not be added to the table along with the reason why that item could not be added. </p>
    pub fn set_failed_batch_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FailedBatchItem>>,
    ) -> Self {
        self.failed_batch_items = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchCreateTableRowsOutput`](crate::operation::batch_create_table_rows::BatchCreateTableRowsOutput).
    pub fn build(self) -> crate::operation::batch_create_table_rows::BatchCreateTableRowsOutput {
        crate::operation::batch_create_table_rows::BatchCreateTableRowsOutput {
            workbook_cursor: self.workbook_cursor.unwrap_or_default(),
            created_rows: self.created_rows,
            failed_batch_items: self.failed_batch_items,
            _request_id: self._request_id,
        }
    }
}
