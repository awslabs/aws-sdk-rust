// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_delete_table_rows::_batch_delete_table_rows_output::BatchDeleteTableRowsOutputBuilder;

pub use crate::operation::batch_delete_table_rows::_batch_delete_table_rows_input::BatchDeleteTableRowsInputBuilder;

impl crate::operation::batch_delete_table_rows::builders::BatchDeleteTableRowsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::batch_delete_table_rows::BatchDeleteTableRowsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_table_rows::BatchDeleteTableRowsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.batch_delete_table_rows();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `BatchDeleteTableRows`.
///
/// <p>The BatchDeleteTableRows API allows you to delete one or more rows from a table in a workbook. You need to specify the ids of the rows that you want to delete from the table.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct BatchDeleteTableRowsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::batch_delete_table_rows::builders::BatchDeleteTableRowsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::batch_delete_table_rows::BatchDeleteTableRowsOutput,
        crate::operation::batch_delete_table_rows::BatchDeleteTableRowsError,
    > for BatchDeleteTableRowsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::batch_delete_table_rows::BatchDeleteTableRowsOutput,
            crate::operation::batch_delete_table_rows::BatchDeleteTableRowsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl BatchDeleteTableRowsFluentBuilder {
    /// Creates a new `BatchDeleteTableRows`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the BatchDeleteTableRows as a reference.
    pub fn as_input(&self) -> &crate::operation::batch_delete_table_rows::builders::BatchDeleteTableRowsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_delete_table_rows::BatchDeleteTableRowsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_table_rows::BatchDeleteTableRowsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::batch_delete_table_rows::BatchDeleteTableRows::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::batch_delete_table_rows::BatchDeleteTableRows::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::batch_delete_table_rows::BatchDeleteTableRowsOutput,
        crate::operation::batch_delete_table_rows::BatchDeleteTableRowsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the workbook where the rows are being deleted.</p>
    /// <p>If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.</p>
    pub fn workbook_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.workbook_id(input.into());
        self
    }
    /// <p>The ID of the workbook where the rows are being deleted.</p>
    /// <p>If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.</p>
    pub fn set_workbook_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_workbook_id(input);
        self
    }
    /// <p>The ID of the workbook where the rows are being deleted.</p>
    /// <p>If a workbook with the specified id could not be found, this API throws ResourceNotFoundException.</p>
    pub fn get_workbook_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_workbook_id()
    }
    /// <p>The ID of the table where the rows are being deleted.</p>
    /// <p>If a table with the specified id could not be found, this API throws ResourceNotFoundException.</p>
    pub fn table_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.table_id(input.into());
        self
    }
    /// <p>The ID of the table where the rows are being deleted.</p>
    /// <p>If a table with the specified id could not be found, this API throws ResourceNotFoundException.</p>
    pub fn set_table_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_table_id(input);
        self
    }
    /// <p>The ID of the table where the rows are being deleted.</p>
    /// <p>If a table with the specified id could not be found, this API throws ResourceNotFoundException.</p>
    pub fn get_table_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_table_id()
    }
    ///
    /// Appends an item to `rowIds`.
    ///
    /// To override the contents of this collection use [`set_row_ids`](Self::set_row_ids).
    ///
    /// <p>The list of row ids to delete from the table. You need to specify at least one row id in this list.</p>
    /// <p>Note that if one of the row ids provided in the request does not exist in the table, then the request fails and no rows are deleted from the table.</p>
    pub fn row_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.row_ids(input.into());
        self
    }
    /// <p>The list of row ids to delete from the table. You need to specify at least one row id in this list.</p>
    /// <p>Note that if one of the row ids provided in the request does not exist in the table, then the request fails and no rows are deleted from the table.</p>
    pub fn set_row_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_row_ids(input);
        self
    }
    /// <p>The list of row ids to delete from the table. You need to specify at least one row id in this list.</p>
    /// <p>Note that if one of the row ids provided in the request does not exist in the table, then the request fails and no rows are deleted from the table.</p>
    pub fn get_row_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_row_ids()
    }
    /// <p>The request token for performing the delete action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again.</p>
    /// <p>Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>The request token for performing the delete action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again.</p>
    /// <p>Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The request token for performing the delete action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again.</p>
    /// <p>Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
}
