// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryTableRowsInput {
    /// <p>The ID of the workbook whose table rows are being queried.</p>
    /// <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub workbook_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the table whose rows are being queried.</p>
    /// <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub table_id: ::std::option::Option<::std::string::String>,
    /// <p>An object that represents a filter formula along with the id of the context row under which the filter function needs to evaluate.</p>
    pub filter_formula: ::std::option::Option<crate::types::Filter>,
    /// <p>The maximum number of rows to return in each page of the results.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p>
    /// <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl QueryTableRowsInput {
    /// <p>The ID of the workbook whose table rows are being queried.</p>
    /// <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn workbook_id(&self) -> ::std::option::Option<&str> {
        self.workbook_id.as_deref()
    }
    /// <p>The ID of the table whose rows are being queried.</p>
    /// <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn table_id(&self) -> ::std::option::Option<&str> {
        self.table_id.as_deref()
    }
    /// <p>An object that represents a filter formula along with the id of the context row under which the filter function needs to evaluate.</p>
    pub fn filter_formula(&self) -> ::std::option::Option<&crate::types::Filter> {
        self.filter_formula.as_ref()
    }
    /// <p>The maximum number of rows to return in each page of the results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p>
    /// <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl QueryTableRowsInput {
    /// Creates a new builder-style object to manufacture [`QueryTableRowsInput`](crate::operation::query_table_rows::QueryTableRowsInput).
    pub fn builder() -> crate::operation::query_table_rows::builders::QueryTableRowsInputBuilder {
        crate::operation::query_table_rows::builders::QueryTableRowsInputBuilder::default()
    }
}

/// A builder for [`QueryTableRowsInput`](crate::operation::query_table_rows::QueryTableRowsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct QueryTableRowsInputBuilder {
    pub(crate) workbook_id: ::std::option::Option<::std::string::String>,
    pub(crate) table_id: ::std::option::Option<::std::string::String>,
    pub(crate) filter_formula: ::std::option::Option<crate::types::Filter>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl QueryTableRowsInputBuilder {
    /// <p>The ID of the workbook whose table rows are being queried.</p>
    /// <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    /// This field is required.
    pub fn workbook_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workbook_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workbook whose table rows are being queried.</p>
    /// <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn set_workbook_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workbook_id = input;
        self
    }
    /// <p>The ID of the workbook whose table rows are being queried.</p>
    /// <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn get_workbook_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workbook_id
    }
    /// <p>The ID of the table whose rows are being queried.</p>
    /// <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    /// This field is required.
    pub fn table_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the table whose rows are being queried.</p>
    /// <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn set_table_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_id = input;
        self
    }
    /// <p>The ID of the table whose rows are being queried.</p>
    /// <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn get_table_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_id
    }
    /// <p>An object that represents a filter formula along with the id of the context row under which the filter function needs to evaluate.</p>
    /// This field is required.
    pub fn filter_formula(mut self, input: crate::types::Filter) -> Self {
        self.filter_formula = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that represents a filter formula along with the id of the context row under which the filter function needs to evaluate.</p>
    pub fn set_filter_formula(mut self, input: ::std::option::Option<crate::types::Filter>) -> Self {
        self.filter_formula = input;
        self
    }
    /// <p>An object that represents a filter formula along with the id of the context row under which the filter function needs to evaluate.</p>
    pub fn get_filter_formula(&self) -> &::std::option::Option<crate::types::Filter> {
        &self.filter_formula
    }
    /// <p>The maximum number of rows to return in each page of the results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of rows to return in each page of the results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of rows to return in each page of the results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p>
    /// <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p>
    /// <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p>
    /// <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`QueryTableRowsInput`](crate::operation::query_table_rows::QueryTableRowsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::query_table_rows::QueryTableRowsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::query_table_rows::QueryTableRowsInput {
            workbook_id: self.workbook_id,
            table_id: self.table_id,
            filter_formula: self.filter_formula,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
