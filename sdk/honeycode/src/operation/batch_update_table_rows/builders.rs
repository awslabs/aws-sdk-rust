// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_update_table_rows::_batch_update_table_rows_output::BatchUpdateTableRowsOutputBuilder;

pub use crate::operation::batch_update_table_rows::_batch_update_table_rows_input::BatchUpdateTableRowsInputBuilder;

/// Fluent builder constructing a request to `BatchUpdateTableRows`.
///
/// <p> The BatchUpdateTableRows API allows you to update one or more rows in a table in a workbook. </p>
/// <p> You can specify the values to set in some or all of the columns in the table for the specified rows. If a column is not explicitly specified in a particular row, then that column will not be updated for that row. To clear out the data in a specific cell, you need to set the value as an empty string (""). </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchUpdateTableRowsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::batch_update_table_rows::builders::BatchUpdateTableRowsInputBuilder,
}
impl BatchUpdateTableRowsFluentBuilder {
    /// Creates a new `BatchUpdateTableRows`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::batch_update_table_rows::BatchUpdateTableRows,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::batch_update_table_rows::BatchUpdateTableRowsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::batch_update_table_rows::BatchUpdateTableRowsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::batch_update_table_rows::BatchUpdateTableRowsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the workbook where the rows are being updated.</p>
    /// <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn workbook_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workbook_id(input.into());
        self
    }
    /// <p>The ID of the workbook where the rows are being updated.</p>
    /// <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn set_workbook_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workbook_id(input);
        self
    }
    /// <p>The ID of the table where the rows are being updated.</p>
    /// <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn table_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.table_id(input.into());
        self
    }
    /// <p>The ID of the table where the rows are being updated.</p>
    /// <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
    pub fn set_table_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_table_id(input);
        self
    }
    /// Appends an item to `rowsToUpdate`.
    ///
    /// To override the contents of this collection use [`set_rows_to_update`](Self::set_rows_to_update).
    ///
    /// <p> The list of rows to update in the table. Each item in this list needs to contain the row id to update along with the map of column id to cell values for each column in that row that needs to be updated. You need to specify at least one row in this list, and for each row, you need to specify at least one column to update. </p>
    /// <p> Note that if one of the row or column ids in the request does not exist in the table, then the request fails and no updates are made to the table. </p>
    pub fn rows_to_update(mut self, input: crate::types::UpdateRowData) -> Self {
        self.inner = self.inner.rows_to_update(input);
        self
    }
    /// <p> The list of rows to update in the table. Each item in this list needs to contain the row id to update along with the map of column id to cell values for each column in that row that needs to be updated. You need to specify at least one row in this list, and for each row, you need to specify at least one column to update. </p>
    /// <p> Note that if one of the row or column ids in the request does not exist in the table, then the request fails and no updates are made to the table. </p>
    pub fn set_rows_to_update(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UpdateRowData>>,
    ) -> Self {
        self.inner = self.inner.set_rows_to_update(input);
        self
    }
    /// <p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p>
    /// <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p>
    /// <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}
