// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetScreenDataInput {
    /// <p>The ID of the workbook that contains the screen.</p>
    pub workbook_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the app that contains the screen.</p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the screen.</p>
    pub screen_id: ::std::option::Option<::std::string::String>,
    /// <p> Variables are optional and are needed only if the screen requires them to render correctly. Variables are specified as a map where the key is the name of the variable as defined on the screen. The value is an object which currently has only one property, rawValue, which holds the value of the variable to be passed to the screen. </p>
    pub variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::VariableValue>>,
    /// <p> The number of results to be returned on a single page. Specify a number between 1 and 100. The maximum value is 100. </p>
    /// <p> This parameter is optional. If you don't specify this parameter, the default page size is 100. </p>
    pub max_results: ::std::option::Option<i32>,
    /// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p>
    /// <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl GetScreenDataInput {
    /// <p>The ID of the workbook that contains the screen.</p>
    pub fn workbook_id(&self) -> ::std::option::Option<&str> {
        self.workbook_id.as_deref()
    }
    /// <p>The ID of the app that contains the screen.</p>
    pub fn app_id(&self) -> ::std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The ID of the screen.</p>
    pub fn screen_id(&self) -> ::std::option::Option<&str> {
        self.screen_id.as_deref()
    }
    /// <p> Variables are optional and are needed only if the screen requires them to render correctly. Variables are specified as a map where the key is the name of the variable as defined on the screen. The value is an object which currently has only one property, rawValue, which holds the value of the variable to be passed to the screen. </p>
    pub fn variables(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::VariableValue>> {
        self.variables.as_ref()
    }
    /// <p> The number of results to be returned on a single page. Specify a number between 1 and 100. The maximum value is 100. </p>
    /// <p> This parameter is optional. If you don't specify this parameter, the default page size is 100. </p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p>
    /// <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::std::fmt::Debug for GetScreenDataInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetScreenDataInput");
        formatter.field("workbook_id", &self.workbook_id);
        formatter.field("app_id", &self.app_id);
        formatter.field("screen_id", &self.screen_id);
        formatter.field("variables", &"*** Sensitive Data Redacted ***");
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
impl GetScreenDataInput {
    /// Creates a new builder-style object to manufacture [`GetScreenDataInput`](crate::operation::get_screen_data::GetScreenDataInput).
    pub fn builder() -> crate::operation::get_screen_data::builders::GetScreenDataInputBuilder {
        crate::operation::get_screen_data::builders::GetScreenDataInputBuilder::default()
    }
}

/// A builder for [`GetScreenDataInput`](crate::operation::get_screen_data::GetScreenDataInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetScreenDataInputBuilder {
    pub(crate) workbook_id: ::std::option::Option<::std::string::String>,
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) screen_id: ::std::option::Option<::std::string::String>,
    pub(crate) variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::VariableValue>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl GetScreenDataInputBuilder {
    /// <p>The ID of the workbook that contains the screen.</p>
    /// This field is required.
    pub fn workbook_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workbook_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workbook that contains the screen.</p>
    pub fn set_workbook_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workbook_id = input;
        self
    }
    /// <p>The ID of the workbook that contains the screen.</p>
    pub fn get_workbook_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workbook_id
    }
    /// <p>The ID of the app that contains the screen.</p>
    /// This field is required.
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the app that contains the screen.</p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The ID of the app that contains the screen.</p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// <p>The ID of the screen.</p>
    /// This field is required.
    pub fn screen_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.screen_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the screen.</p>
    pub fn set_screen_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.screen_id = input;
        self
    }
    /// <p>The ID of the screen.</p>
    pub fn get_screen_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.screen_id
    }
    /// Adds a key-value pair to `variables`.
    ///
    /// To override the contents of this collection use [`set_variables`](Self::set_variables).
    ///
    /// <p> Variables are optional and are needed only if the screen requires them to render correctly. Variables are specified as a map where the key is the name of the variable as defined on the screen. The value is an object which currently has only one property, rawValue, which holds the value of the variable to be passed to the screen. </p>
    pub fn variables(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::VariableValue) -> Self {
        let mut hash_map = self.variables.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.variables = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p> Variables are optional and are needed only if the screen requires them to render correctly. Variables are specified as a map where the key is the name of the variable as defined on the screen. The value is an object which currently has only one property, rawValue, which holds the value of the variable to be passed to the screen. </p>
    pub fn set_variables(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::VariableValue>>,
    ) -> Self {
        self.variables = input;
        self
    }
    /// <p> Variables are optional and are needed only if the screen requires them to render correctly. Variables are specified as a map where the key is the name of the variable as defined on the screen. The value is an object which currently has only one property, rawValue, which holds the value of the variable to be passed to the screen. </p>
    pub fn get_variables(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::VariableValue>> {
        &self.variables
    }
    /// <p> The number of results to be returned on a single page. Specify a number between 1 and 100. The maximum value is 100. </p>
    /// <p> This parameter is optional. If you don't specify this parameter, the default page size is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of results to be returned on a single page. Specify a number between 1 and 100. The maximum value is 100. </p>
    /// <p> This parameter is optional. If you don't specify this parameter, the default page size is 100. </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p> The number of results to be returned on a single page. Specify a number between 1 and 100. The maximum value is 100. </p>
    /// <p> This parameter is optional. If you don't specify this parameter, the default page size is 100. </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p>
    /// <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p>
    /// <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p>
    /// <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`GetScreenDataInput`](crate::operation::get_screen_data::GetScreenDataInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_screen_data::GetScreenDataInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_screen_data::GetScreenDataInput {
            workbook_id: self.workbook_id,
            app_id: self.app_id,
            screen_id: self.screen_id,
            variables: self.variables,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
impl ::std::fmt::Debug for GetScreenDataInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetScreenDataInputBuilder");
        formatter.field("workbook_id", &self.workbook_id);
        formatter.field("app_id", &self.app_id);
        formatter.field("screen_id", &self.screen_id);
        formatter.field("variables", &"*** Sensitive Data Redacted ***");
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
