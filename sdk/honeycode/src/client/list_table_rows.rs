// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListTableRows`](crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workbook_id(impl Into<String>)`](crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder::workbook_id) / [`set_workbook_id(Option<String>)`](crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder::set_workbook_id):<br>required: **true**<br><p>The ID of the workbook that contains the table whose rows are being retrieved.</p>  <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p><br>
    ///   - [`table_id(impl Into<String>)`](crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder::table_id) / [`set_table_id(Option<String>)`](crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder::set_table_id):<br>required: **true**<br><p>The ID of the table whose rows are being retrieved.</p>  <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p><br>
    ///   - [`row_ids(impl Into<String>)`](crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder::row_ids) / [`set_row_ids(Option<Vec::<String>>)`](crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder::set_row_ids):<br>required: **false**<br><p> This parameter is optional. If one or more row ids are specified in this list, then only the specified row ids are returned in the result. If no row ids are specified here, then all the rows in the table are returned. </p><br>
    ///   - [`max_results(i32)`](crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of rows to return in each page of the results.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder::set_next_token):<br>required: **false**<br><p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p>  <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p><br>
    /// - On success, responds with [`ListTableRowsOutput`](crate::operation::list_table_rows::ListTableRowsOutput) with field(s):
    ///   - [`column_ids(Vec::<String>)`](crate::operation::list_table_rows::ListTableRowsOutput::column_ids): <p> The list of columns in the table whose row data is returned in the result. </p>
    ///   - [`rows(Vec::<TableRow>)`](crate::operation::list_table_rows::ListTableRowsOutput::rows): <p> The list of rows in the table. Note that this result is paginated, so this list contains a maximum of 100 rows. </p>
    ///   - [`row_ids_not_found(Option<Vec::<String>>)`](crate::operation::list_table_rows::ListTableRowsOutput::row_ids_not_found): <p> The list of row ids included in the request that were not found in the table. </p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_table_rows::ListTableRowsOutput::next_token): <p> Provides the pagination token to load the next page if there are more results matching the request. If a pagination token is not present in the response, it means that all data matching the request has been loaded. </p>
    ///   - [`workbook_cursor(i64)`](crate::operation::list_table_rows::ListTableRowsOutput::workbook_cursor): <p> Indicates the cursor of the workbook at which the data returned by this request is read. Workbook cursor keeps increasing with every update and the increments are not sequential. </p>
    /// - On failure, responds with [`SdkError<ListTableRowsError>`](crate::operation::list_table_rows::ListTableRowsError)
    pub fn list_table_rows(&self) -> crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder {
        crate::operation::list_table_rows::builders::ListTableRowsFluentBuilder::new(self.handle.clone())
    }
}
