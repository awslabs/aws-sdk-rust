// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetScreenData`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workbook_id(impl Into<String>)`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::workbook_id) / [`set_workbook_id(Option<String>)`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::set_workbook_id): <p>The ID of the workbook that contains the screen.</p>
    ///   - [`app_id(impl Into<String>)`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::app_id) / [`set_app_id(Option<String>)`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::set_app_id): <p>The ID of the app that contains the screen.</p>
    ///   - [`screen_id(impl Into<String>)`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::screen_id) / [`set_screen_id(Option<String>)`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::set_screen_id): <p>The ID of the screen.</p>
    ///   - [`variables(HashMap<String, VariableValue>)`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::variables) / [`set_variables(Option<HashMap<String, VariableValue>>)`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::set_variables): <p> Variables are optional and are needed only if the screen requires them to render correctly. Variables are specified as a map where the key is the name of the variable as defined on the screen. The value is an object which currently has only one property, rawValue, which holds the value of the variable to be passed to the screen. </p>
    ///   - [`max_results(i32)`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::set_max_results): <p> The number of results to be returned on a single page. Specify a number between 1 and 100. The maximum value is 100. </p>  <p> This parameter is optional. If you don't specify this parameter, the default page size is 100. </p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::set_next_token): <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p>  <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
    /// - On success, responds with [`GetScreenDataOutput`](crate::operation::get_screen_data::GetScreenDataOutput) with field(s):
    ///   - [`results(Option<HashMap<String, ResultSet>>)`](crate::operation::get_screen_data::GetScreenDataOutput::results): <p>A map of all the rows on the screen keyed by block name.</p>
    ///   - [`workbook_cursor(i64)`](crate::operation::get_screen_data::GetScreenDataOutput::workbook_cursor): <p> Indicates the cursor of the workbook at which the data returned by this workbook is read. Workbook cursor keeps increasing with every update and the increments are not sequential. </p>
    ///   - [`next_token(Option<String>)`](crate::operation::get_screen_data::GetScreenDataOutput::next_token): <p> Provides the pagination token to load the next page if there are more results matching the request. If a pagination token is not present in the response, it means that all data matching the query has been loaded. </p>
    /// - On failure, responds with [`SdkError<GetScreenDataError>`](crate::operation::get_screen_data::GetScreenDataError)
    pub fn get_screen_data(
        &self,
    ) -> crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder {
        crate::operation::get_screen_data::builders::GetScreenDataFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
