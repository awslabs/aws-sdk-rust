// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchUpsertTableRows`](crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workbook_id(impl Into<String>)`](crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsFluentBuilder::workbook_id) / [`set_workbook_id(Option<String>)`](crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsFluentBuilder::set_workbook_id):<br>required: **true**<br><p>The ID of the workbook where the rows are being upserted.</p>  <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p><br>
    ///   - [`table_id(impl Into<String>)`](crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsFluentBuilder::table_id) / [`set_table_id(Option<String>)`](crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsFluentBuilder::set_table_id):<br>required: **true**<br><p>The ID of the table where the rows are being upserted.</p>  <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p><br>
    ///   - [`rows_to_upsert(UpsertRowData)`](crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsFluentBuilder::rows_to_upsert) / [`set_rows_to_upsert(Option<Vec::<UpsertRowData>>)`](crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsFluentBuilder::set_rows_to_upsert):<br>required: **true**<br><p> The list of rows to upsert in the table. Each item in this list needs to have a batch item id to uniquely identify the element in the request, a filter expression to find the rows to update for that element and the cell values to set for each column in the upserted rows. You need to specify at least one item in this list. </p>  <p> Note that if one of the filter formulas in the request fails to evaluate because of an error or one of the column ids in any of the rows does not exist in the table, then the request fails and no updates are made to the table. </p><br>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsFluentBuilder::set_client_request_token):<br>required: **false**<br><p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p>  <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p><br>
    /// - On success, responds with [`BatchUpsertTableRowsOutput`](crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsOutput) with field(s):
    ///   - [`rows(HashMap::<String, UpsertRowsResult>)`](crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsOutput::rows): <p> A map with the batch item id as the key and the result of the upsert operation as the value. The result of the upsert operation specifies whether existing rows were updated or a new row was appended, along with the list of row ids that were affected. </p>
    ///   - [`workbook_cursor(i64)`](crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsOutput::workbook_cursor): <p>The updated workbook cursor after updating or appending rows in the table.</p>
    ///   - [`failed_batch_items(Option<Vec::<FailedBatchItem>>)`](crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsOutput::failed_batch_items): <p> The list of batch items in the request that could not be updated or appended in the table. Each element in this list contains one item from the request that could not be updated in the table along with the reason why that item could not be updated or appended. </p>
    /// - On failure, responds with [`SdkError<BatchUpsertTableRowsError>`](crate::operation::batch_upsert_table_rows::BatchUpsertTableRowsError)
    pub fn batch_upsert_table_rows(&self) -> crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsFluentBuilder {
        crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsFluentBuilder::new(self.handle.clone())
    }
}
