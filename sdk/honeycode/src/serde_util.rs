// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_create_table_rows_output_correct_errors(
    mut builder: crate::operation::batch_create_table_rows::builders::BatchCreateTableRowsOutputBuilder,
) -> crate::operation::batch_create_table_rows::builders::BatchCreateTableRowsOutputBuilder {
    if builder.workbook_cursor.is_none() {
        builder.workbook_cursor = Some(Default::default())
    }
    if builder.created_rows.is_none() {
        builder.created_rows = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_delete_table_rows_output_correct_errors(
    mut builder: crate::operation::batch_delete_table_rows::builders::BatchDeleteTableRowsOutputBuilder,
) -> crate::operation::batch_delete_table_rows::builders::BatchDeleteTableRowsOutputBuilder {
    if builder.workbook_cursor.is_none() {
        builder.workbook_cursor = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_update_table_rows_output_correct_errors(
    mut builder: crate::operation::batch_update_table_rows::builders::BatchUpdateTableRowsOutputBuilder,
) -> crate::operation::batch_update_table_rows::builders::BatchUpdateTableRowsOutputBuilder {
    if builder.workbook_cursor.is_none() {
        builder.workbook_cursor = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_upsert_table_rows_output_correct_errors(
    mut builder: crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsOutputBuilder,
) -> crate::operation::batch_upsert_table_rows::builders::BatchUpsertTableRowsOutputBuilder {
    if builder.rows.is_none() {
        builder.rows = Some(Default::default())
    }
    if builder.workbook_cursor.is_none() {
        builder.workbook_cursor = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_table_data_import_job_output_correct_errors(
    mut builder: crate::operation::describe_table_data_import_job::builders::DescribeTableDataImportJobOutputBuilder,
) -> crate::operation::describe_table_data_import_job::builders::DescribeTableDataImportJobOutputBuilder {
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::TableDataImportJobStatus>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.job_metadata.is_none() {
        builder.job_metadata = {
            let builder = crate::types::builders::TableDataImportJobMetadataBuilder::default();
            crate::serde_util::table_data_import_job_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_screen_data_output_correct_errors(
    mut builder: crate::operation::get_screen_data::builders::GetScreenDataOutputBuilder,
) -> crate::operation::get_screen_data::builders::GetScreenDataOutputBuilder {
    if builder.results.is_none() {
        builder.results = Some(Default::default())
    }
    if builder.workbook_cursor.is_none() {
        builder.workbook_cursor = Some(Default::default())
    }
    builder
}

pub(crate) fn invoke_screen_automation_output_correct_errors(
    mut builder: crate::operation::invoke_screen_automation::builders::InvokeScreenAutomationOutputBuilder,
) -> crate::operation::invoke_screen_automation::builders::InvokeScreenAutomationOutputBuilder {
    if builder.workbook_cursor.is_none() {
        builder.workbook_cursor = Some(Default::default())
    }
    builder
}

pub(crate) fn list_table_columns_output_correct_errors(
    mut builder: crate::operation::list_table_columns::builders::ListTableColumnsOutputBuilder,
) -> crate::operation::list_table_columns::builders::ListTableColumnsOutputBuilder {
    if builder.table_columns.is_none() {
        builder.table_columns = Some(Default::default())
    }
    builder
}

pub(crate) fn list_table_rows_output_correct_errors(
    mut builder: crate::operation::list_table_rows::builders::ListTableRowsOutputBuilder,
) -> crate::operation::list_table_rows::builders::ListTableRowsOutputBuilder {
    if builder.column_ids.is_none() {
        builder.column_ids = Some(Default::default())
    }
    if builder.rows.is_none() {
        builder.rows = Some(Default::default())
    }
    if builder.workbook_cursor.is_none() {
        builder.workbook_cursor = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tables_output_correct_errors(
    mut builder: crate::operation::list_tables::builders::ListTablesOutputBuilder,
) -> crate::operation::list_tables::builders::ListTablesOutputBuilder {
    if builder.tables.is_none() {
        builder.tables = Some(Default::default())
    }
    builder
}

pub(crate) fn query_table_rows_output_correct_errors(
    mut builder: crate::operation::query_table_rows::builders::QueryTableRowsOutputBuilder,
) -> crate::operation::query_table_rows::builders::QueryTableRowsOutputBuilder {
    if builder.column_ids.is_none() {
        builder.column_ids = Some(Default::default())
    }
    if builder.rows.is_none() {
        builder.rows = Some(Default::default())
    }
    if builder.workbook_cursor.is_none() {
        builder.workbook_cursor = Some(Default::default())
    }
    builder
}

pub(crate) fn start_table_data_import_job_output_correct_errors(
    mut builder: crate::operation::start_table_data_import_job::builders::StartTableDataImportJobOutputBuilder,
) -> crate::operation::start_table_data_import_job::builders::StartTableDataImportJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::TableDataImportJobStatus>().ok()
    }
    builder
}

pub(crate) fn table_data_import_job_metadata_correct_errors(
    mut builder: crate::types::builders::TableDataImportJobMetadataBuilder,
) -> crate::types::builders::TableDataImportJobMetadataBuilder {
    if builder.submitter.is_none() {
        builder.submitter = {
            let builder = crate::types::builders::ImportJobSubmitterBuilder::default();
            Some(builder.build())
        }
    }
    if builder.submit_time.is_none() {
        builder.submit_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.import_options.is_none() {
        builder.import_options = {
            let builder = crate::types::builders::ImportOptionsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::ImportDataSourceBuilder::default();
            Some(crate::serde_util::import_data_source_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn import_data_source_correct_errors(
    mut builder: crate::types::builders::ImportDataSourceBuilder,
) -> crate::types::builders::ImportDataSourceBuilder {
    if builder.data_source_config.is_none() {
        builder.data_source_config = {
            let builder = crate::types::builders::ImportDataSourceConfigBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn failed_batch_item_correct_errors(
    mut builder: crate::types::builders::FailedBatchItemBuilder,
) -> crate::types::builders::FailedBatchItemBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn result_set_correct_errors(mut builder: crate::types::builders::ResultSetBuilder) -> crate::types::builders::ResultSetBuilder {
    if builder.headers.is_none() {
        builder.headers = Some(Default::default())
    }
    if builder.rows.is_none() {
        builder.rows = Some(Default::default())
    }
    builder
}

pub(crate) fn table_row_correct_errors(mut builder: crate::types::builders::TableRowBuilder) -> crate::types::builders::TableRowBuilder {
    if builder.row_id.is_none() {
        builder.row_id = Some(Default::default())
    }
    if builder.cells.is_none() {
        builder.cells = Some(Default::default())
    }
    builder
}

pub(crate) fn upsert_rows_result_correct_errors(
    mut builder: crate::types::builders::UpsertRowsResultBuilder,
) -> crate::types::builders::UpsertRowsResultBuilder {
    if builder.row_ids.is_none() {
        builder.row_ids = Some(Default::default())
    }
    if builder.upsert_action.is_none() {
        builder.upsert_action = "no value was set".parse::<crate::types::UpsertAction>().ok()
    }
    builder
}

pub(crate) fn delimited_text_import_options_correct_errors(
    mut builder: crate::types::builders::DelimitedTextImportOptionsBuilder,
) -> crate::types::builders::DelimitedTextImportOptionsBuilder {
    if builder.delimiter.is_none() {
        builder.delimiter = Some(Default::default())
    }
    builder
}

pub(crate) fn column_metadata_correct_errors(
    mut builder: crate::types::builders::ColumnMetadataBuilder,
) -> crate::types::builders::ColumnMetadataBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::Format>().ok()
    }
    builder
}

pub(crate) fn result_row_correct_errors(mut builder: crate::types::builders::ResultRowBuilder) -> crate::types::builders::ResultRowBuilder {
    if builder.data_items.is_none() {
        builder.data_items = Some(Default::default())
    }
    builder
}
