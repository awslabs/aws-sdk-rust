// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input variables to the app to be used by the InvokeScreenAutomation action request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct VariableValue {
    /// <p>Raw value of the variable.</p>
    pub raw_value: ::std::string::String,
}
impl VariableValue {
    /// <p>Raw value of the variable.</p>
    pub fn raw_value(&self) -> &str {
        use std::ops::Deref;
        self.raw_value.deref()
    }
}
impl ::std::fmt::Debug for VariableValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VariableValue");
        formatter.field("raw_value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl VariableValue {
    /// Creates a new builder-style object to manufacture [`VariableValue`](crate::types::VariableValue).
    pub fn builder() -> crate::types::builders::VariableValueBuilder {
        crate::types::builders::VariableValueBuilder::default()
    }
}

/// A builder for [`VariableValue`](crate::types::VariableValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct VariableValueBuilder {
    pub(crate) raw_value: ::std::option::Option<::std::string::String>,
}
impl VariableValueBuilder {
    /// <p>Raw value of the variable.</p>
    /// This field is required.
    pub fn raw_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.raw_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Raw value of the variable.</p>
    pub fn set_raw_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.raw_value = input;
        self
    }
    /// <p>Raw value of the variable.</p>
    pub fn get_raw_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.raw_value
    }
    /// Consumes the builder and constructs a [`VariableValue`](crate::types::VariableValue).
    /// This method will fail if any of the following fields are not set:
    /// - [`raw_value`](crate::types::builders::VariableValueBuilder::raw_value)
    pub fn build(self) -> ::std::result::Result<crate::types::VariableValue, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VariableValue {
            raw_value: self.raw_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "raw_value",
                    "raw_value was not specified but it is required when building VariableValue",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for VariableValueBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VariableValueBuilder");
        formatter.field("raw_value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
