// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input variables to the app to be used by the InvokeScreenAutomation action request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct VariableValue {
    /// <p>Raw value of the variable.</p>
    #[doc(hidden)]
    pub raw_value: std::option::Option<std::string::String>,
}
impl VariableValue {
    /// <p>Raw value of the variable.</p>
    pub fn raw_value(&self) -> std::option::Option<&str> {
        self.raw_value.as_deref()
    }
}
impl std::fmt::Debug for VariableValue {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("VariableValue");
        formatter.field("raw_value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl VariableValue {
    /// Creates a new builder-style object to manufacture [`VariableValue`](crate::types::VariableValue).
    pub fn builder() -> crate::types::builders::VariableValueBuilder {
        crate::types::builders::VariableValueBuilder::default()
    }
}

/// A builder for [`VariableValue`](crate::types::VariableValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct VariableValueBuilder {
    pub(crate) raw_value: std::option::Option<std::string::String>,
}
impl VariableValueBuilder {
    /// <p>Raw value of the variable.</p>
    pub fn raw_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.raw_value = Some(input.into());
        self
    }
    /// <p>Raw value of the variable.</p>
    pub fn set_raw_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.raw_value = input;
        self
    }
    /// Consumes the builder and constructs a [`VariableValue`](crate::types::VariableValue).
    pub fn build(self) -> crate::types::VariableValue {
        crate::types::VariableValue {
            raw_value: self.raw_value,
        }
    }
}
impl std::fmt::Debug for VariableValueBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("VariableValueBuilder");
        formatter.field("raw_value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
