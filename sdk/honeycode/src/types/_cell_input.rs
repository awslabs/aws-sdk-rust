// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> CellInput object contains the data needed to create or update cells in a table. </p> <note>
/// <p> CellInput object has only a facts field or a fact field, but not both. A 400 bad request will be thrown if both fact and facts field are present. </p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CellInput {
    /// <p> Fact represents the data that is entered into a cell. This data can be free text or a formula. Formulas need to start with the equals (=) sign. </p>
    pub fact: ::std::option::Option<::std::string::String>,
    /// <p> A list representing the values that are entered into a ROWSET cell. Facts list can have either only values or rowIDs, and rowIDs should from the same table. </p>
    pub facts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CellInput {
    /// <p> Fact represents the data that is entered into a cell. This data can be free text or a formula. Formulas need to start with the equals (=) sign. </p>
    pub fn fact(&self) -> ::std::option::Option<&str> {
        self.fact.as_deref()
    }
    /// <p> A list representing the values that are entered into a ROWSET cell. Facts list can have either only values or rowIDs, and rowIDs should from the same table. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.facts.is_none()`.
    pub fn facts(&self) -> &[::std::string::String] {
        self.facts.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CellInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CellInput");
        formatter.field("fact", &"*** Sensitive Data Redacted ***");
        formatter.field("facts", &self.facts);
        formatter.finish()
    }
}
impl CellInput {
    /// Creates a new builder-style object to manufacture [`CellInput`](crate::types::CellInput).
    pub fn builder() -> crate::types::builders::CellInputBuilder {
        crate::types::builders::CellInputBuilder::default()
    }
}

/// A builder for [`CellInput`](crate::types::CellInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CellInputBuilder {
    pub(crate) fact: ::std::option::Option<::std::string::String>,
    pub(crate) facts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CellInputBuilder {
    /// <p> Fact represents the data that is entered into a cell. This data can be free text or a formula. Formulas need to start with the equals (=) sign. </p>
    pub fn fact(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fact = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Fact represents the data that is entered into a cell. This data can be free text or a formula. Formulas need to start with the equals (=) sign. </p>
    pub fn set_fact(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fact = input;
        self
    }
    /// <p> Fact represents the data that is entered into a cell. This data can be free text or a formula. Formulas need to start with the equals (=) sign. </p>
    pub fn get_fact(&self) -> &::std::option::Option<::std::string::String> {
        &self.fact
    }
    /// Appends an item to `facts`.
    ///
    /// To override the contents of this collection use [`set_facts`](Self::set_facts).
    ///
    /// <p> A list representing the values that are entered into a ROWSET cell. Facts list can have either only values or rowIDs, and rowIDs should from the same table. </p>
    pub fn facts(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.facts.unwrap_or_default();
        v.push(input.into());
        self.facts = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list representing the values that are entered into a ROWSET cell. Facts list can have either only values or rowIDs, and rowIDs should from the same table. </p>
    pub fn set_facts(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.facts = input;
        self
    }
    /// <p> A list representing the values that are entered into a ROWSET cell. Facts list can have either only values or rowIDs, and rowIDs should from the same table. </p>
    pub fn get_facts(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.facts
    }
    /// Consumes the builder and constructs a [`CellInput`](crate::types::CellInput).
    pub fn build(self) -> crate::types::CellInput {
        crate::types::CellInput {
            fact: self.fact,
            facts: self.facts,
        }
    }
}
impl ::std::fmt::Debug for CellInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CellInputBuilder");
        formatter.field("fact", &"*** Sensitive Data Redacted ***");
        formatter.field("facts", &self.facts);
        formatter.finish()
    }
}
