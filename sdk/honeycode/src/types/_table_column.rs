// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains attributes about a single column in a table</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TableColumn {
    /// <p>The id of the column in the table.</p>
    #[doc(hidden)]
    pub table_column_id: std::option::Option<std::string::String>,
    /// <p>The name of the column in the table.</p>
    #[doc(hidden)]
    pub table_column_name: std::option::Option<std::string::String>,
    /// <p> The column level format that is applied in the table. An empty value in this field means that the column format is the default value 'AUTO'. </p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::Format>,
}
impl TableColumn {
    /// <p>The id of the column in the table.</p>
    pub fn table_column_id(&self) -> std::option::Option<&str> {
        self.table_column_id.as_deref()
    }
    /// <p>The name of the column in the table.</p>
    pub fn table_column_name(&self) -> std::option::Option<&str> {
        self.table_column_name.as_deref()
    }
    /// <p> The column level format that is applied in the table. An empty value in this field means that the column format is the default value 'AUTO'. </p>
    pub fn format(&self) -> std::option::Option<&crate::types::Format> {
        self.format.as_ref()
    }
}
impl TableColumn {
    /// Creates a new builder-style object to manufacture [`TableColumn`](crate::types::TableColumn).
    pub fn builder() -> crate::types::builders::TableColumnBuilder {
        crate::types::builders::TableColumnBuilder::default()
    }
}

/// A builder for [`TableColumn`](crate::types::TableColumn).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TableColumnBuilder {
    pub(crate) table_column_id: std::option::Option<std::string::String>,
    pub(crate) table_column_name: std::option::Option<std::string::String>,
    pub(crate) format: std::option::Option<crate::types::Format>,
}
impl TableColumnBuilder {
    /// <p>The id of the column in the table.</p>
    pub fn table_column_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_column_id = Some(input.into());
        self
    }
    /// <p>The id of the column in the table.</p>
    pub fn set_table_column_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_column_id = input;
        self
    }
    /// <p>The name of the column in the table.</p>
    pub fn table_column_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_column_name = Some(input.into());
        self
    }
    /// <p>The name of the column in the table.</p>
    pub fn set_table_column_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.table_column_name = input;
        self
    }
    /// <p> The column level format that is applied in the table. An empty value in this field means that the column format is the default value 'AUTO'. </p>
    pub fn format(mut self, input: crate::types::Format) -> Self {
        self.format = Some(input);
        self
    }
    /// <p> The column level format that is applied in the table. An empty value in this field means that the column format is the default value 'AUTO'. </p>
    pub fn set_format(mut self, input: std::option::Option<crate::types::Format>) -> Self {
        self.format = input;
        self
    }
    /// Consumes the builder and constructs a [`TableColumn`](crate::types::TableColumn).
    pub fn build(self) -> crate::types::TableColumn {
        crate::types::TableColumn {
            table_column_id: self.table_column_id,
            table_column_name: self.table_column_name,
            format: self.format,
        }
    }
}
