// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> An object that represents the result of a single upsert row request. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpsertRowsResult {
    /// <p> The list of row ids that were changed as part of an upsert row operation. If the upsert resulted in an update, this list could potentially contain multiple rows that matched the filter and hence got updated. If the upsert resulted in an append, this list would only have the single row that was appended. </p>
    pub row_ids: ::std::vec::Vec<::std::string::String>,
    /// <p> The result of the upsert action. </p>
    pub upsert_action: crate::types::UpsertAction,
}
impl UpsertRowsResult {
    /// <p> The list of row ids that were changed as part of an upsert row operation. If the upsert resulted in an update, this list could potentially contain multiple rows that matched the filter and hence got updated. If the upsert resulted in an append, this list would only have the single row that was appended. </p>
    pub fn row_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.row_ids.deref()
    }
    /// <p> The result of the upsert action. </p>
    pub fn upsert_action(&self) -> &crate::types::UpsertAction {
        &self.upsert_action
    }
}
impl UpsertRowsResult {
    /// Creates a new builder-style object to manufacture [`UpsertRowsResult`](crate::types::UpsertRowsResult).
    pub fn builder() -> crate::types::builders::UpsertRowsResultBuilder {
        crate::types::builders::UpsertRowsResultBuilder::default()
    }
}

/// A builder for [`UpsertRowsResult`](crate::types::UpsertRowsResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpsertRowsResultBuilder {
    pub(crate) row_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) upsert_action: ::std::option::Option<crate::types::UpsertAction>,
}
impl UpsertRowsResultBuilder {
    /// Appends an item to `row_ids`.
    ///
    /// To override the contents of this collection use [`set_row_ids`](Self::set_row_ids).
    ///
    /// <p> The list of row ids that were changed as part of an upsert row operation. If the upsert resulted in an update, this list could potentially contain multiple rows that matched the filter and hence got updated. If the upsert resulted in an append, this list would only have the single row that was appended. </p>
    pub fn row_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.row_ids.unwrap_or_default();
        v.push(input.into());
        self.row_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p> The list of row ids that were changed as part of an upsert row operation. If the upsert resulted in an update, this list could potentially contain multiple rows that matched the filter and hence got updated. If the upsert resulted in an append, this list would only have the single row that was appended. </p>
    pub fn set_row_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.row_ids = input;
        self
    }
    /// <p> The list of row ids that were changed as part of an upsert row operation. If the upsert resulted in an update, this list could potentially contain multiple rows that matched the filter and hence got updated. If the upsert resulted in an append, this list would only have the single row that was appended. </p>
    pub fn get_row_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.row_ids
    }
    /// <p> The result of the upsert action. </p>
    /// This field is required.
    pub fn upsert_action(mut self, input: crate::types::UpsertAction) -> Self {
        self.upsert_action = ::std::option::Option::Some(input);
        self
    }
    /// <p> The result of the upsert action. </p>
    pub fn set_upsert_action(mut self, input: ::std::option::Option<crate::types::UpsertAction>) -> Self {
        self.upsert_action = input;
        self
    }
    /// <p> The result of the upsert action. </p>
    pub fn get_upsert_action(&self) -> &::std::option::Option<crate::types::UpsertAction> {
        &self.upsert_action
    }
    /// Consumes the builder and constructs a [`UpsertRowsResult`](crate::types::UpsertRowsResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`row_ids`](crate::types::builders::UpsertRowsResultBuilder::row_ids)
    /// - [`upsert_action`](crate::types::builders::UpsertRowsResultBuilder::upsert_action)
    pub fn build(self) -> ::std::result::Result<crate::types::UpsertRowsResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UpsertRowsResult {
            row_ids: self.row_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "row_ids",
                    "row_ids was not specified but it is required when building UpsertRowsResult",
                )
            })?,
            upsert_action: self.upsert_action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "upsert_action",
                    "upsert_action was not specified but it is required when building UpsertRowsResult",
                )
            })?,
        })
    }
}
