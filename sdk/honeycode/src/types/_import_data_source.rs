// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that has details about the source of the data that was submitted for import.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportDataSource {
    /// <p>The configuration parameters for the data source of the import</p>
    pub data_source_config: ::std::option::Option<crate::types::ImportDataSourceConfig>,
}
impl ImportDataSource {
    /// <p>The configuration parameters for the data source of the import</p>
    pub fn data_source_config(&self) -> ::std::option::Option<&crate::types::ImportDataSourceConfig> {
        self.data_source_config.as_ref()
    }
}
impl ImportDataSource {
    /// Creates a new builder-style object to manufacture [`ImportDataSource`](crate::types::ImportDataSource).
    pub fn builder() -> crate::types::builders::ImportDataSourceBuilder {
        crate::types::builders::ImportDataSourceBuilder::default()
    }
}

/// A builder for [`ImportDataSource`](crate::types::ImportDataSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportDataSourceBuilder {
    pub(crate) data_source_config: ::std::option::Option<crate::types::ImportDataSourceConfig>,
}
impl ImportDataSourceBuilder {
    /// <p>The configuration parameters for the data source of the import</p>
    /// This field is required.
    pub fn data_source_config(mut self, input: crate::types::ImportDataSourceConfig) -> Self {
        self.data_source_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration parameters for the data source of the import</p>
    pub fn set_data_source_config(mut self, input: ::std::option::Option<crate::types::ImportDataSourceConfig>) -> Self {
        self.data_source_config = input;
        self
    }
    /// <p>The configuration parameters for the data source of the import</p>
    pub fn get_data_source_config(&self) -> &::std::option::Option<crate::types::ImportDataSourceConfig> {
        &self.data_source_config
    }
    /// Consumes the builder and constructs a [`ImportDataSource`](crate::types::ImportDataSource).
    pub fn build(self) -> crate::types::ImportDataSource {
        crate::types::ImportDataSource {
            data_source_config: self.data_source_config,
        }
    }
}
