// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single row in the ResultSet.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResultRow {
    /// <p>The ID for a particular row.</p>
    #[doc(hidden)]
    pub row_id: std::option::Option<std::string::String>,
    /// <p>List of all the data cells in a row.</p>
    #[doc(hidden)]
    pub data_items: std::option::Option<std::vec::Vec<crate::types::DataItem>>,
}
impl ResultRow {
    /// <p>The ID for a particular row.</p>
    pub fn row_id(&self) -> std::option::Option<&str> {
        self.row_id.as_deref()
    }
    /// <p>List of all the data cells in a row.</p>
    pub fn data_items(&self) -> std::option::Option<&[crate::types::DataItem]> {
        self.data_items.as_deref()
    }
}
impl ResultRow {
    /// Creates a new builder-style object to manufacture [`ResultRow`](crate::types::ResultRow).
    pub fn builder() -> crate::types::builders::ResultRowBuilder {
        crate::types::builders::ResultRowBuilder::default()
    }
}

/// A builder for [`ResultRow`](crate::types::ResultRow).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResultRowBuilder {
    pub(crate) row_id: std::option::Option<std::string::String>,
    pub(crate) data_items: std::option::Option<std::vec::Vec<crate::types::DataItem>>,
}
impl ResultRowBuilder {
    /// <p>The ID for a particular row.</p>
    pub fn row_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.row_id = Some(input.into());
        self
    }
    /// <p>The ID for a particular row.</p>
    pub fn set_row_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.row_id = input;
        self
    }
    /// Appends an item to `data_items`.
    ///
    /// To override the contents of this collection use [`set_data_items`](Self::set_data_items).
    ///
    /// <p>List of all the data cells in a row.</p>
    pub fn data_items(mut self, input: crate::types::DataItem) -> Self {
        let mut v = self.data_items.unwrap_or_default();
        v.push(input);
        self.data_items = Some(v);
        self
    }
    /// <p>List of all the data cells in a row.</p>
    pub fn set_data_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataItem>>,
    ) -> Self {
        self.data_items = input;
        self
    }
    /// Consumes the builder and constructs a [`ResultRow`](crate::types::ResultRow).
    pub fn build(self) -> crate::types::ResultRow {
        crate::types::ResultRow {
            row_id: self.row_id,
            data_items: self.data_items,
        }
    }
}
