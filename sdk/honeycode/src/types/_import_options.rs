// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains the options specified by the sumitter of the import request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportOptions {
    /// <p>Options relating to the destination of the import request.</p>
    #[doc(hidden)]
    pub destination_options: std::option::Option<crate::types::DestinationOptions>,
    /// <p>Options relating to parsing delimited text. Required if dataFormat is DELIMITED_TEXT.</p>
    #[doc(hidden)]
    pub delimited_text_options: std::option::Option<crate::types::DelimitedTextImportOptions>,
}
impl ImportOptions {
    /// <p>Options relating to the destination of the import request.</p>
    pub fn destination_options(&self) -> std::option::Option<&crate::types::DestinationOptions> {
        self.destination_options.as_ref()
    }
    /// <p>Options relating to parsing delimited text. Required if dataFormat is DELIMITED_TEXT.</p>
    pub fn delimited_text_options(
        &self,
    ) -> std::option::Option<&crate::types::DelimitedTextImportOptions> {
        self.delimited_text_options.as_ref()
    }
}
impl ImportOptions {
    /// Creates a new builder-style object to manufacture [`ImportOptions`](crate::types::ImportOptions).
    pub fn builder() -> crate::types::builders::ImportOptionsBuilder {
        crate::types::builders::ImportOptionsBuilder::default()
    }
}

/// A builder for [`ImportOptions`](crate::types::ImportOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImportOptionsBuilder {
    pub(crate) destination_options: std::option::Option<crate::types::DestinationOptions>,
    pub(crate) delimited_text_options:
        std::option::Option<crate::types::DelimitedTextImportOptions>,
}
impl ImportOptionsBuilder {
    /// <p>Options relating to the destination of the import request.</p>
    pub fn destination_options(mut self, input: crate::types::DestinationOptions) -> Self {
        self.destination_options = Some(input);
        self
    }
    /// <p>Options relating to the destination of the import request.</p>
    pub fn set_destination_options(
        mut self,
        input: std::option::Option<crate::types::DestinationOptions>,
    ) -> Self {
        self.destination_options = input;
        self
    }
    /// <p>Options relating to parsing delimited text. Required if dataFormat is DELIMITED_TEXT.</p>
    pub fn delimited_text_options(
        mut self,
        input: crate::types::DelimitedTextImportOptions,
    ) -> Self {
        self.delimited_text_options = Some(input);
        self
    }
    /// <p>Options relating to parsing delimited text. Required if dataFormat is DELIMITED_TEXT.</p>
    pub fn set_delimited_text_options(
        mut self,
        input: std::option::Option<crate::types::DelimitedTextImportOptions>,
    ) -> Self {
        self.delimited_text_options = input;
        self
    }
    /// Consumes the builder and constructs a [`ImportOptions`](crate::types::ImportOptions).
    pub fn build(self) -> crate::types::ImportOptions {
        crate::types::ImportOptions {
            destination_options: self.destination_options,
            delimited_text_options: self.delimited_text_options,
        }
    }
}
