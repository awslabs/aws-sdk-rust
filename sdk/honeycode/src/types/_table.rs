// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the properties of a table in a workbook.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Table {
    /// <p>The id of the table.</p>
    #[doc(hidden)]
    pub table_id: std::option::Option<std::string::String>,
    /// <p>The name of the table.</p>
    #[doc(hidden)]
    pub table_name: std::option::Option<std::string::String>,
}
impl Table {
    /// <p>The id of the table.</p>
    pub fn table_id(&self) -> std::option::Option<&str> {
        self.table_id.as_deref()
    }
    /// <p>The name of the table.</p>
    pub fn table_name(&self) -> std::option::Option<&str> {
        self.table_name.as_deref()
    }
}
impl Table {
    /// Creates a new builder-style object to manufacture [`Table`](crate::types::Table).
    pub fn builder() -> crate::types::builders::TableBuilder {
        crate::types::builders::TableBuilder::default()
    }
}

/// A builder for [`Table`](crate::types::Table).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TableBuilder {
    pub(crate) table_id: std::option::Option<std::string::String>,
    pub(crate) table_name: std::option::Option<std::string::String>,
}
impl TableBuilder {
    /// <p>The id of the table.</p>
    pub fn table_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_id = Some(input.into());
        self
    }
    /// <p>The id of the table.</p>
    pub fn set_table_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_id = input;
        self
    }
    /// <p>The name of the table.</p>
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_name = Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// Consumes the builder and constructs a [`Table`](crate::types::Table).
    pub fn build(self) -> crate::types::Table {
        crate::types::Table {
            table_id: self.table_id,
            table_name: self.table_name,
        }
    }
}
