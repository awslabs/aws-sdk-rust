// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Data needed to create a single row in a table as part of the BatchCreateTableRows request. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateRowData {
    /// <p> The id of the row that needs to be updated. </p>
    #[doc(hidden)]
    pub row_id: std::option::Option<std::string::String>,
    /// <p> A map representing the cells to update in the given row. The key is the column id of the cell and the value is the CellInput object that represents the data to set in that cell. </p>
    #[doc(hidden)]
    pub cells_to_update: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::CellInput>,
    >,
}
impl UpdateRowData {
    /// <p> The id of the row that needs to be updated. </p>
    pub fn row_id(&self) -> std::option::Option<&str> {
        self.row_id.as_deref()
    }
    /// <p> A map representing the cells to update in the given row. The key is the column id of the cell and the value is the CellInput object that represents the data to set in that cell. </p>
    pub fn cells_to_update(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, crate::types::CellInput>>
    {
        self.cells_to_update.as_ref()
    }
}
impl UpdateRowData {
    /// Creates a new builder-style object to manufacture [`UpdateRowData`](crate::types::UpdateRowData).
    pub fn builder() -> crate::types::builders::UpdateRowDataBuilder {
        crate::types::builders::UpdateRowDataBuilder::default()
    }
}

/// A builder for [`UpdateRowData`](crate::types::UpdateRowData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateRowDataBuilder {
    pub(crate) row_id: std::option::Option<std::string::String>,
    pub(crate) cells_to_update: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::CellInput>,
    >,
}
impl UpdateRowDataBuilder {
    /// <p> The id of the row that needs to be updated. </p>
    pub fn row_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.row_id = Some(input.into());
        self
    }
    /// <p> The id of the row that needs to be updated. </p>
    pub fn set_row_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.row_id = input;
        self
    }
    /// Adds a key-value pair to `cells_to_update`.
    ///
    /// To override the contents of this collection use [`set_cells_to_update`](Self::set_cells_to_update).
    ///
    /// <p> A map representing the cells to update in the given row. The key is the column id of the cell and the value is the CellInput object that represents the data to set in that cell. </p>
    pub fn cells_to_update(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::CellInput,
    ) -> Self {
        let mut hash_map = self.cells_to_update.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.cells_to_update = Some(hash_map);
        self
    }
    /// <p> A map representing the cells to update in the given row. The key is the column id of the cell and the value is the CellInput object that represents the data to set in that cell. </p>
    pub fn set_cells_to_update(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::CellInput>,
        >,
    ) -> Self {
        self.cells_to_update = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateRowData`](crate::types::UpdateRowData).
    pub fn build(self) -> crate::types::UpdateRowData {
        crate::types::UpdateRowData {
            row_id: self.row_id,
            cells_to_update: self.cells_to_update,
        }
    }
}
