// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Data needed to create a single row in a table as part of the BatchCreateTableRows request. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRowData {
    /// <p> An external identifier that represents the single row that is being created as part of the BatchCreateTableRows request. This can be any string that you can use to identify the row in the request. The BatchCreateTableRows API puts the batch item id in the results to allow you to link data in the request to data in the results. </p>
    pub batch_item_id: ::std::string::String,
    /// <p> A map representing the cells to create in the new row. The key is the column id of the cell and the value is the CellInput object that represents the data to set in that cell. </p>
    pub cells_to_create: ::std::collections::HashMap<::std::string::String, crate::types::CellInput>,
}
impl CreateRowData {
    /// <p> An external identifier that represents the single row that is being created as part of the BatchCreateTableRows request. This can be any string that you can use to identify the row in the request. The BatchCreateTableRows API puts the batch item id in the results to allow you to link data in the request to data in the results. </p>
    pub fn batch_item_id(&self) -> &str {
        use std::ops::Deref;
        self.batch_item_id.deref()
    }
    /// <p> A map representing the cells to create in the new row. The key is the column id of the cell and the value is the CellInput object that represents the data to set in that cell. </p>
    pub fn cells_to_create(&self) -> &::std::collections::HashMap<::std::string::String, crate::types::CellInput> {
        &self.cells_to_create
    }
}
impl CreateRowData {
    /// Creates a new builder-style object to manufacture [`CreateRowData`](crate::types::CreateRowData).
    pub fn builder() -> crate::types::builders::CreateRowDataBuilder {
        crate::types::builders::CreateRowDataBuilder::default()
    }
}

/// A builder for [`CreateRowData`](crate::types::CreateRowData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateRowDataBuilder {
    pub(crate) batch_item_id: ::std::option::Option<::std::string::String>,
    pub(crate) cells_to_create: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CellInput>>,
}
impl CreateRowDataBuilder {
    /// <p> An external identifier that represents the single row that is being created as part of the BatchCreateTableRows request. This can be any string that you can use to identify the row in the request. The BatchCreateTableRows API puts the batch item id in the results to allow you to link data in the request to data in the results. </p>
    /// This field is required.
    pub fn batch_item_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.batch_item_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> An external identifier that represents the single row that is being created as part of the BatchCreateTableRows request. This can be any string that you can use to identify the row in the request. The BatchCreateTableRows API puts the batch item id in the results to allow you to link data in the request to data in the results. </p>
    pub fn set_batch_item_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.batch_item_id = input;
        self
    }
    /// <p> An external identifier that represents the single row that is being created as part of the BatchCreateTableRows request. This can be any string that you can use to identify the row in the request. The BatchCreateTableRows API puts the batch item id in the results to allow you to link data in the request to data in the results. </p>
    pub fn get_batch_item_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.batch_item_id
    }
    /// Adds a key-value pair to `cells_to_create`.
    ///
    /// To override the contents of this collection use [`set_cells_to_create`](Self::set_cells_to_create).
    ///
    /// <p> A map representing the cells to create in the new row. The key is the column id of the cell and the value is the CellInput object that represents the data to set in that cell. </p>
    pub fn cells_to_create(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::CellInput) -> Self {
        let mut hash_map = self.cells_to_create.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.cells_to_create = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p> A map representing the cells to create in the new row. The key is the column id of the cell and the value is the CellInput object that represents the data to set in that cell. </p>
    pub fn set_cells_to_create(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CellInput>>,
    ) -> Self {
        self.cells_to_create = input;
        self
    }
    /// <p> A map representing the cells to create in the new row. The key is the column id of the cell and the value is the CellInput object that represents the data to set in that cell. </p>
    pub fn get_cells_to_create(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CellInput>> {
        &self.cells_to_create
    }
    /// Consumes the builder and constructs a [`CreateRowData`](crate::types::CreateRowData).
    /// This method will fail if any of the following fields are not set:
    /// - [`batch_item_id`](crate::types::builders::CreateRowDataBuilder::batch_item_id)
    /// - [`cells_to_create`](crate::types::builders::CreateRowDataBuilder::cells_to_create)
    pub fn build(self) -> ::std::result::Result<crate::types::CreateRowData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CreateRowData {
            batch_item_id: self.batch_item_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "batch_item_id",
                    "batch_item_id was not specified but it is required when building CreateRowData",
                )
            })?,
            cells_to_create: self.cells_to_create.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cells_to_create",
                    "cells_to_create was not specified but it is required when building CreateRowData",
                )
            })?,
        })
    }
}
