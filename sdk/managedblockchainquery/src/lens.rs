// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_asset_contracts_output_next_token(
    input: &crate::operation::list_asset_contracts::ListAssetContractsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_token_balances_output_next_token(
    input: &crate::operation::list_token_balances::ListTokenBalancesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_transaction_events_output_next_token(
    input: &crate::operation::list_transaction_events::ListTransactionEventsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_transactions_output_next_token(
    input: &crate::operation::list_transactions::ListTransactionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_asset_contracts_output_contracts(
    input: crate::operation::list_asset_contracts::ListAssetContractsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssetContract>> {
    let input = input.contracts;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_token_balances_output_token_balances(
    input: crate::operation::list_token_balances::ListTokenBalancesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TokenBalance>> {
    let input = input.token_balances;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_transaction_events_output_events(
    input: crate::operation::list_transaction_events::ListTransactionEventsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TransactionEvent>> {
    let input = input.events;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_transactions_output_transactions(
    input: crate::operation::list_transactions::ListTransactionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TransactionOutputItem>> {
    let input = input.transactions;
    ::std::option::Option::Some(input)
}
