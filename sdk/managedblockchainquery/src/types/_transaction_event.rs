// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The container for the properties of a transaction event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransactionEvent {
    /// <p>The blockchain network where the transaction occurred.</p>
    pub network: crate::types::QueryNetwork,
    /// <p>The hash of the transaction. It is generated whenever a transaction is verified and added to the blockchain.</p>
    pub transaction_hash: ::std::string::String,
    /// <p>The type of transaction event.</p>
    pub event_type: crate::types::QueryTransactionEventType,
    /// <p>The wallet address initiating the transaction. It can either be a public key or a contract.</p>
    pub from: ::std::option::Option<::std::string::String>,
    /// <p>The wallet address receiving the transaction. It can either be a public key or a contract.</p>
    pub to: ::std::option::Option<::std::string::String>,
    /// <p>The value that was transacted.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>The blockchain address. for the contract</p>
    pub contract_address: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the token involved in the transaction.</p>
    pub token_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the transaction. It is generated whenever a transaction is verified and added to the blockchain.</p>
    pub transaction_id: ::std::option::Option<::std::string::String>,
    /// <p>The position of the vout in the transaction output list.</p>
    pub vout_index: ::std::option::Option<i32>,
}
impl TransactionEvent {
    /// <p>The blockchain network where the transaction occurred.</p>
    pub fn network(&self) -> &crate::types::QueryNetwork {
        &self.network
    }
    /// <p>The hash of the transaction. It is generated whenever a transaction is verified and added to the blockchain.</p>
    pub fn transaction_hash(&self) -> &str {
        use std::ops::Deref;
        self.transaction_hash.deref()
    }
    /// <p>The type of transaction event.</p>
    pub fn event_type(&self) -> &crate::types::QueryTransactionEventType {
        &self.event_type
    }
    /// <p>The wallet address initiating the transaction. It can either be a public key or a contract.</p>
    pub fn from(&self) -> ::std::option::Option<&str> {
        self.from.as_deref()
    }
    /// <p>The wallet address receiving the transaction. It can either be a public key or a contract.</p>
    pub fn to(&self) -> ::std::option::Option<&str> {
        self.to.as_deref()
    }
    /// <p>The value that was transacted.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The blockchain address. for the contract</p>
    pub fn contract_address(&self) -> ::std::option::Option<&str> {
        self.contract_address.as_deref()
    }
    /// <p>The unique identifier for the token involved in the transaction.</p>
    pub fn token_id(&self) -> ::std::option::Option<&str> {
        self.token_id.as_deref()
    }
    /// <p>The unique identifier of the transaction. It is generated whenever a transaction is verified and added to the blockchain.</p>
    pub fn transaction_id(&self) -> ::std::option::Option<&str> {
        self.transaction_id.as_deref()
    }
    /// <p>The position of the vout in the transaction output list.</p>
    pub fn vout_index(&self) -> ::std::option::Option<i32> {
        self.vout_index
    }
}
impl TransactionEvent {
    /// Creates a new builder-style object to manufacture [`TransactionEvent`](crate::types::TransactionEvent).
    pub fn builder() -> crate::types::builders::TransactionEventBuilder {
        crate::types::builders::TransactionEventBuilder::default()
    }
}

/// A builder for [`TransactionEvent`](crate::types::TransactionEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TransactionEventBuilder {
    pub(crate) network: ::std::option::Option<crate::types::QueryNetwork>,
    pub(crate) transaction_hash: ::std::option::Option<::std::string::String>,
    pub(crate) event_type: ::std::option::Option<crate::types::QueryTransactionEventType>,
    pub(crate) from: ::std::option::Option<::std::string::String>,
    pub(crate) to: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) contract_address: ::std::option::Option<::std::string::String>,
    pub(crate) token_id: ::std::option::Option<::std::string::String>,
    pub(crate) transaction_id: ::std::option::Option<::std::string::String>,
    pub(crate) vout_index: ::std::option::Option<i32>,
}
impl TransactionEventBuilder {
    /// <p>The blockchain network where the transaction occurred.</p>
    /// This field is required.
    pub fn network(mut self, input: crate::types::QueryNetwork) -> Self {
        self.network = ::std::option::Option::Some(input);
        self
    }
    /// <p>The blockchain network where the transaction occurred.</p>
    pub fn set_network(mut self, input: ::std::option::Option<crate::types::QueryNetwork>) -> Self {
        self.network = input;
        self
    }
    /// <p>The blockchain network where the transaction occurred.</p>
    pub fn get_network(&self) -> &::std::option::Option<crate::types::QueryNetwork> {
        &self.network
    }
    /// <p>The hash of the transaction. It is generated whenever a transaction is verified and added to the blockchain.</p>
    /// This field is required.
    pub fn transaction_hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transaction_hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hash of the transaction. It is generated whenever a transaction is verified and added to the blockchain.</p>
    pub fn set_transaction_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transaction_hash = input;
        self
    }
    /// <p>The hash of the transaction. It is generated whenever a transaction is verified and added to the blockchain.</p>
    pub fn get_transaction_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.transaction_hash
    }
    /// <p>The type of transaction event.</p>
    /// This field is required.
    pub fn event_type(mut self, input: crate::types::QueryTransactionEventType) -> Self {
        self.event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of transaction event.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::QueryTransactionEventType>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The type of transaction event.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::QueryTransactionEventType> {
        &self.event_type
    }
    /// <p>The wallet address initiating the transaction. It can either be a public key or a contract.</p>
    pub fn from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.from = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The wallet address initiating the transaction. It can either be a public key or a contract.</p>
    pub fn set_from(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.from = input;
        self
    }
    /// <p>The wallet address initiating the transaction. It can either be a public key or a contract.</p>
    pub fn get_from(&self) -> &::std::option::Option<::std::string::String> {
        &self.from
    }
    /// <p>The wallet address receiving the transaction. It can either be a public key or a contract.</p>
    pub fn to(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.to = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The wallet address receiving the transaction. It can either be a public key or a contract.</p>
    pub fn set_to(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.to = input;
        self
    }
    /// <p>The wallet address receiving the transaction. It can either be a public key or a contract.</p>
    pub fn get_to(&self) -> &::std::option::Option<::std::string::String> {
        &self.to
    }
    /// <p>The value that was transacted.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value that was transacted.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value that was transacted.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The blockchain address. for the contract</p>
    pub fn contract_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contract_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The blockchain address. for the contract</p>
    pub fn set_contract_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contract_address = input;
        self
    }
    /// <p>The blockchain address. for the contract</p>
    pub fn get_contract_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.contract_address
    }
    /// <p>The unique identifier for the token involved in the transaction.</p>
    pub fn token_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the token involved in the transaction.</p>
    pub fn set_token_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token_id = input;
        self
    }
    /// <p>The unique identifier for the token involved in the transaction.</p>
    pub fn get_token_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.token_id
    }
    /// <p>The unique identifier of the transaction. It is generated whenever a transaction is verified and added to the blockchain.</p>
    pub fn transaction_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transaction_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the transaction. It is generated whenever a transaction is verified and added to the blockchain.</p>
    pub fn set_transaction_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transaction_id = input;
        self
    }
    /// <p>The unique identifier of the transaction. It is generated whenever a transaction is verified and added to the blockchain.</p>
    pub fn get_transaction_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transaction_id
    }
    /// <p>The position of the vout in the transaction output list.</p>
    pub fn vout_index(mut self, input: i32) -> Self {
        self.vout_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The position of the vout in the transaction output list.</p>
    pub fn set_vout_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.vout_index = input;
        self
    }
    /// <p>The position of the vout in the transaction output list.</p>
    pub fn get_vout_index(&self) -> &::std::option::Option<i32> {
        &self.vout_index
    }
    /// Consumes the builder and constructs a [`TransactionEvent`](crate::types::TransactionEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`network`](crate::types::builders::TransactionEventBuilder::network)
    /// - [`transaction_hash`](crate::types::builders::TransactionEventBuilder::transaction_hash)
    /// - [`event_type`](crate::types::builders::TransactionEventBuilder::event_type)
    pub fn build(self) -> ::std::result::Result<crate::types::TransactionEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TransactionEvent {
            network: self.network.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "network",
                    "network was not specified but it is required when building TransactionEvent",
                )
            })?,
            transaction_hash: self.transaction_hash.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "transaction_hash",
                    "transaction_hash was not specified but it is required when building TransactionEvent",
                )
            })?,
            event_type: self.event_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_type",
                    "event_type was not specified but it is required when building TransactionEvent",
                )
            })?,
            from: self.from,
            to: self.to,
            value: self.value,
            contract_address: self.contract_address,
            token_id: self.token_id,
            transaction_id: self.transaction_id,
            vout_index: self.vout_index,
        })
    }
}
