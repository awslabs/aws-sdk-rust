// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The container of the token filter like the contract address on a given blockchain network or a unique token identifier on a given blockchain network.</p> <note>
/// <p>You must always specify the network property of this container when using this operation.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TokenFilter {
    /// <p>The blockchain network of the token.</p>
    pub network: crate::types::QueryNetwork,
    /// <p>This is the address of the contract.</p>
    pub contract_address: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the token.</p>
    pub token_id: ::std::option::Option<::std::string::String>,
}
impl TokenFilter {
    /// <p>The blockchain network of the token.</p>
    pub fn network(&self) -> &crate::types::QueryNetwork {
        &self.network
    }
    /// <p>This is the address of the contract.</p>
    pub fn contract_address(&self) -> ::std::option::Option<&str> {
        self.contract_address.as_deref()
    }
    /// <p>The unique identifier of the token.</p>
    pub fn token_id(&self) -> ::std::option::Option<&str> {
        self.token_id.as_deref()
    }
}
impl TokenFilter {
    /// Creates a new builder-style object to manufacture [`TokenFilter`](crate::types::TokenFilter).
    pub fn builder() -> crate::types::builders::TokenFilterBuilder {
        crate::types::builders::TokenFilterBuilder::default()
    }
}

/// A builder for [`TokenFilter`](crate::types::TokenFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TokenFilterBuilder {
    pub(crate) network: ::std::option::Option<crate::types::QueryNetwork>,
    pub(crate) contract_address: ::std::option::Option<::std::string::String>,
    pub(crate) token_id: ::std::option::Option<::std::string::String>,
}
impl TokenFilterBuilder {
    /// <p>The blockchain network of the token.</p>
    /// This field is required.
    pub fn network(mut self, input: crate::types::QueryNetwork) -> Self {
        self.network = ::std::option::Option::Some(input);
        self
    }
    /// <p>The blockchain network of the token.</p>
    pub fn set_network(mut self, input: ::std::option::Option<crate::types::QueryNetwork>) -> Self {
        self.network = input;
        self
    }
    /// <p>The blockchain network of the token.</p>
    pub fn get_network(&self) -> &::std::option::Option<crate::types::QueryNetwork> {
        &self.network
    }
    /// <p>This is the address of the contract.</p>
    pub fn contract_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contract_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This is the address of the contract.</p>
    pub fn set_contract_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contract_address = input;
        self
    }
    /// <p>This is the address of the contract.</p>
    pub fn get_contract_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.contract_address
    }
    /// <p>The unique identifier of the token.</p>
    pub fn token_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the token.</p>
    pub fn set_token_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token_id = input;
        self
    }
    /// <p>The unique identifier of the token.</p>
    pub fn get_token_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.token_id
    }
    /// Consumes the builder and constructs a [`TokenFilter`](crate::types::TokenFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`network`](crate::types::builders::TokenFilterBuilder::network)
    pub fn build(self) -> ::std::result::Result<crate::types::TokenFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TokenFilter {
            network: self.network.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "network",
                    "network was not specified but it is required when building TokenFilter",
                )
            })?,
            contract_address: self.contract_address,
            token_id: self.token_id,
        })
    }
}
