// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This container contains information about an contract.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetContract {
    /// <p>The container for the contract identifier containing its blockchain network and address.</p>
    pub contract_identifier: ::std::option::Option<crate::types::ContractIdentifier>,
    /// <p>The token standard of the contract.</p>
    pub token_standard: crate::types::QueryTokenStandard,
    /// <p>The address of the contract deployer.</p>
    pub deployer_address: ::std::string::String,
}
impl AssetContract {
    /// <p>The container for the contract identifier containing its blockchain network and address.</p>
    pub fn contract_identifier(&self) -> ::std::option::Option<&crate::types::ContractIdentifier> {
        self.contract_identifier.as_ref()
    }
    /// <p>The token standard of the contract.</p>
    pub fn token_standard(&self) -> &crate::types::QueryTokenStandard {
        &self.token_standard
    }
    /// <p>The address of the contract deployer.</p>
    pub fn deployer_address(&self) -> &str {
        use std::ops::Deref;
        self.deployer_address.deref()
    }
}
impl AssetContract {
    /// Creates a new builder-style object to manufacture [`AssetContract`](crate::types::AssetContract).
    pub fn builder() -> crate::types::builders::AssetContractBuilder {
        crate::types::builders::AssetContractBuilder::default()
    }
}

/// A builder for [`AssetContract`](crate::types::AssetContract).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetContractBuilder {
    pub(crate) contract_identifier: ::std::option::Option<crate::types::ContractIdentifier>,
    pub(crate) token_standard: ::std::option::Option<crate::types::QueryTokenStandard>,
    pub(crate) deployer_address: ::std::option::Option<::std::string::String>,
}
impl AssetContractBuilder {
    /// <p>The container for the contract identifier containing its blockchain network and address.</p>
    /// This field is required.
    pub fn contract_identifier(mut self, input: crate::types::ContractIdentifier) -> Self {
        self.contract_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for the contract identifier containing its blockchain network and address.</p>
    pub fn set_contract_identifier(mut self, input: ::std::option::Option<crate::types::ContractIdentifier>) -> Self {
        self.contract_identifier = input;
        self
    }
    /// <p>The container for the contract identifier containing its blockchain network and address.</p>
    pub fn get_contract_identifier(&self) -> &::std::option::Option<crate::types::ContractIdentifier> {
        &self.contract_identifier
    }
    /// <p>The token standard of the contract.</p>
    /// This field is required.
    pub fn token_standard(mut self, input: crate::types::QueryTokenStandard) -> Self {
        self.token_standard = ::std::option::Option::Some(input);
        self
    }
    /// <p>The token standard of the contract.</p>
    pub fn set_token_standard(mut self, input: ::std::option::Option<crate::types::QueryTokenStandard>) -> Self {
        self.token_standard = input;
        self
    }
    /// <p>The token standard of the contract.</p>
    pub fn get_token_standard(&self) -> &::std::option::Option<crate::types::QueryTokenStandard> {
        &self.token_standard
    }
    /// <p>The address of the contract deployer.</p>
    /// This field is required.
    pub fn deployer_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployer_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The address of the contract deployer.</p>
    pub fn set_deployer_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployer_address = input;
        self
    }
    /// <p>The address of the contract deployer.</p>
    pub fn get_deployer_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployer_address
    }
    /// Consumes the builder and constructs a [`AssetContract`](crate::types::AssetContract).
    /// This method will fail if any of the following fields are not set:
    /// - [`token_standard`](crate::types::builders::AssetContractBuilder::token_standard)
    /// - [`deployer_address`](crate::types::builders::AssetContractBuilder::deployer_address)
    pub fn build(self) -> ::std::result::Result<crate::types::AssetContract, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssetContract {
            contract_identifier: self.contract_identifier,
            token_standard: self.token_standard.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "token_standard",
                    "token_standard was not specified but it is required when building AssetContract",
                )
            })?,
            deployer_address: self.deployer_address.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "deployer_address",
                    "deployer_address was not specified but it is required when building AssetContract",
                )
            })?,
        })
    }
}
