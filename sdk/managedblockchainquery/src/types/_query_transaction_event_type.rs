// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `QueryTransactionEventType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let querytransactioneventtype = unimplemented!();
/// match querytransactioneventtype {
///     QueryTransactionEventType::BitcoinVin => { /* ... */ },
///     QueryTransactionEventType::BitcoinVout => { /* ... */ },
///     QueryTransactionEventType::Erc1155Transfer => { /* ... */ },
///     QueryTransactionEventType::Erc20Burn => { /* ... */ },
///     QueryTransactionEventType::Erc20Deposit => { /* ... */ },
///     QueryTransactionEventType::Erc20Mint => { /* ... */ },
///     QueryTransactionEventType::Erc20Transfer => { /* ... */ },
///     QueryTransactionEventType::Erc20Withdrawal => { /* ... */ },
///     QueryTransactionEventType::Erc721Transfer => { /* ... */ },
///     QueryTransactionEventType::EthTransfer => { /* ... */ },
///     QueryTransactionEventType::InternalEthTransfer => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `querytransactioneventtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `QueryTransactionEventType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `QueryTransactionEventType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `QueryTransactionEventType::NewFeature` is defined.
/// Specifically, when `querytransactioneventtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `QueryTransactionEventType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum QueryTransactionEventType {
    /// A Bitcoin Vin transfer type
    BitcoinVin,
    /// A Bitcoin Vout transfer type
    BitcoinVout,
    /// An ERC1155 transfer type
    Erc1155Transfer,
    /// An ERC20_BURN transfer type
    Erc20Burn,
    /// An ERC20_DEPOSIT transfer type
    Erc20Deposit,
    /// An ERC20_MINT transfer type
    Erc20Mint,
    /// An ERC20 transfer type
    Erc20Transfer,
    /// An ERC20_WITHDRAWAL transfer type
    Erc20Withdrawal,
    /// An ERC721 transfer type
    Erc721Transfer,
    /// An ETH transfer type
    EthTransfer,
    /// An internal ETH transfer type
    InternalEthTransfer,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for QueryTransactionEventType {
    fn from(s: &str) -> Self {
        match s {
            "BITCOIN_VIN" => QueryTransactionEventType::BitcoinVin,
            "BITCOIN_VOUT" => QueryTransactionEventType::BitcoinVout,
            "ERC1155_TRANSFER" => QueryTransactionEventType::Erc1155Transfer,
            "ERC20_BURN" => QueryTransactionEventType::Erc20Burn,
            "ERC20_DEPOSIT" => QueryTransactionEventType::Erc20Deposit,
            "ERC20_MINT" => QueryTransactionEventType::Erc20Mint,
            "ERC20_TRANSFER" => QueryTransactionEventType::Erc20Transfer,
            "ERC20_WITHDRAWAL" => QueryTransactionEventType::Erc20Withdrawal,
            "ERC721_TRANSFER" => QueryTransactionEventType::Erc721Transfer,
            "ETH_TRANSFER" => QueryTransactionEventType::EthTransfer,
            "INTERNAL_ETH_TRANSFER" => QueryTransactionEventType::InternalEthTransfer,
            other => QueryTransactionEventType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for QueryTransactionEventType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(QueryTransactionEventType::from(s))
    }
}
impl QueryTransactionEventType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            QueryTransactionEventType::BitcoinVin => "BITCOIN_VIN",
            QueryTransactionEventType::BitcoinVout => "BITCOIN_VOUT",
            QueryTransactionEventType::Erc1155Transfer => "ERC1155_TRANSFER",
            QueryTransactionEventType::Erc20Burn => "ERC20_BURN",
            QueryTransactionEventType::Erc20Deposit => "ERC20_DEPOSIT",
            QueryTransactionEventType::Erc20Mint => "ERC20_MINT",
            QueryTransactionEventType::Erc20Transfer => "ERC20_TRANSFER",
            QueryTransactionEventType::Erc20Withdrawal => "ERC20_WITHDRAWAL",
            QueryTransactionEventType::Erc721Transfer => "ERC721_TRANSFER",
            QueryTransactionEventType::EthTransfer => "ETH_TRANSFER",
            QueryTransactionEventType::InternalEthTransfer => "INTERNAL_ETH_TRANSFER",
            QueryTransactionEventType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BITCOIN_VIN",
            "BITCOIN_VOUT",
            "ERC1155_TRANSFER",
            "ERC20_BURN",
            "ERC20_DEPOSIT",
            "ERC20_MINT",
            "ERC20_TRANSFER",
            "ERC20_WITHDRAWAL",
            "ERC721_TRANSFER",
            "ETH_TRANSFER",
            "INTERNAL_ETH_TRANSFER",
        ]
    }
}
impl ::std::convert::AsRef<str> for QueryTransactionEventType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl QueryTransactionEventType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for QueryTransactionEventType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            QueryTransactionEventType::BitcoinVin => write!(f, "BITCOIN_VIN"),
            QueryTransactionEventType::BitcoinVout => write!(f, "BITCOIN_VOUT"),
            QueryTransactionEventType::Erc1155Transfer => write!(f, "ERC1155_TRANSFER"),
            QueryTransactionEventType::Erc20Burn => write!(f, "ERC20_BURN"),
            QueryTransactionEventType::Erc20Deposit => write!(f, "ERC20_DEPOSIT"),
            QueryTransactionEventType::Erc20Mint => write!(f, "ERC20_MINT"),
            QueryTransactionEventType::Erc20Transfer => write!(f, "ERC20_TRANSFER"),
            QueryTransactionEventType::Erc20Withdrawal => write!(f, "ERC20_WITHDRAWAL"),
            QueryTransactionEventType::Erc721Transfer => write!(f, "ERC721_TRANSFER"),
            QueryTransactionEventType::EthTransfer => write!(f, "ETH_TRANSFER"),
            QueryTransactionEventType::InternalEthTransfer => write!(f, "INTERNAL_ETH_TRANSFER"),
            QueryTransactionEventType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
