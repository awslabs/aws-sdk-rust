// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The container for the input for getting a token balance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetTokenBalanceInputItem {
    /// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note>
    /// <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p>
    /// </note>
    pub token_identifier: ::std::option::Option<crate::types::TokenIdentifier>,
    /// <p>The container for the identifier of the owner.</p>
    pub owner_identifier: ::std::option::Option<crate::types::OwnerIdentifier>,
    /// <p>The container for time.</p>
    pub at_blockchain_instant: ::std::option::Option<crate::types::BlockchainInstant>,
}
impl BatchGetTokenBalanceInputItem {
    /// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note>
    /// <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p>
    /// </note>
    pub fn token_identifier(&self) -> ::std::option::Option<&crate::types::TokenIdentifier> {
        self.token_identifier.as_ref()
    }
    /// <p>The container for the identifier of the owner.</p>
    pub fn owner_identifier(&self) -> ::std::option::Option<&crate::types::OwnerIdentifier> {
        self.owner_identifier.as_ref()
    }
    /// <p>The container for time.</p>
    pub fn at_blockchain_instant(&self) -> ::std::option::Option<&crate::types::BlockchainInstant> {
        self.at_blockchain_instant.as_ref()
    }
}
impl BatchGetTokenBalanceInputItem {
    /// Creates a new builder-style object to manufacture [`BatchGetTokenBalanceInputItem`](crate::types::BatchGetTokenBalanceInputItem).
    pub fn builder() -> crate::types::builders::BatchGetTokenBalanceInputItemBuilder {
        crate::types::builders::BatchGetTokenBalanceInputItemBuilder::default()
    }
}

/// A builder for [`BatchGetTokenBalanceInputItem`](crate::types::BatchGetTokenBalanceInputItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetTokenBalanceInputItemBuilder {
    pub(crate) token_identifier: ::std::option::Option<crate::types::TokenIdentifier>,
    pub(crate) owner_identifier: ::std::option::Option<crate::types::OwnerIdentifier>,
    pub(crate) at_blockchain_instant: ::std::option::Option<crate::types::BlockchainInstant>,
}
impl BatchGetTokenBalanceInputItemBuilder {
    /// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note>
    /// <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p>
    /// </note>
    /// This field is required.
    pub fn token_identifier(mut self, input: crate::types::TokenIdentifier) -> Self {
        self.token_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note>
    /// <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p>
    /// </note>
    pub fn set_token_identifier(mut self, input: ::std::option::Option<crate::types::TokenIdentifier>) -> Self {
        self.token_identifier = input;
        self
    }
    /// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note>
    /// <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p>
    /// </note>
    pub fn get_token_identifier(&self) -> &::std::option::Option<crate::types::TokenIdentifier> {
        &self.token_identifier
    }
    /// <p>The container for the identifier of the owner.</p>
    /// This field is required.
    pub fn owner_identifier(mut self, input: crate::types::OwnerIdentifier) -> Self {
        self.owner_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for the identifier of the owner.</p>
    pub fn set_owner_identifier(mut self, input: ::std::option::Option<crate::types::OwnerIdentifier>) -> Self {
        self.owner_identifier = input;
        self
    }
    /// <p>The container for the identifier of the owner.</p>
    pub fn get_owner_identifier(&self) -> &::std::option::Option<crate::types::OwnerIdentifier> {
        &self.owner_identifier
    }
    /// <p>The container for time.</p>
    pub fn at_blockchain_instant(mut self, input: crate::types::BlockchainInstant) -> Self {
        self.at_blockchain_instant = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for time.</p>
    pub fn set_at_blockchain_instant(mut self, input: ::std::option::Option<crate::types::BlockchainInstant>) -> Self {
        self.at_blockchain_instant = input;
        self
    }
    /// <p>The container for time.</p>
    pub fn get_at_blockchain_instant(&self) -> &::std::option::Option<crate::types::BlockchainInstant> {
        &self.at_blockchain_instant
    }
    /// Consumes the builder and constructs a [`BatchGetTokenBalanceInputItem`](crate::types::BatchGetTokenBalanceInputItem).
    pub fn build(self) -> crate::types::BatchGetTokenBalanceInputItem {
        crate::types::BatchGetTokenBalanceInputItem {
            token_identifier: self.token_identifier,
            owner_identifier: self.owner_identifier,
            at_blockchain_instant: self.at_blockchain_instant,
        }
    }
}
