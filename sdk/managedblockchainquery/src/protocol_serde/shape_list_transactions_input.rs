// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_transactions_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_transactions::ListTransactionsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.address {
        object.key("address").string(var_1.as_str());
    }
    if let Some(var_2) = &input.from_blockchain_instant {
        #[allow(unused_mut)]
        let mut object_3 = object.key("fromBlockchainInstant").start_object();
        crate::protocol_serde::shape_blockchain_instant::ser_blockchain_instant(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.network {
        object.key("network").string(var_5.as_str());
    }
    if let Some(var_6) = &input.next_token {
        object.key("nextToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.sort {
        #[allow(unused_mut)]
        let mut object_8 = object.key("sort").start_object();
        crate::protocol_serde::shape_list_transactions_sort::ser_list_transactions_sort(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.to_blockchain_instant {
        #[allow(unused_mut)]
        let mut object_10 = object.key("toBlockchainInstant").start_object();
        crate::protocol_serde::shape_blockchain_instant::ser_blockchain_instant(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
