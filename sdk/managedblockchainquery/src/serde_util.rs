// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn batch_get_token_balance_output_correct_errors(
    mut builder: crate::operation::batch_get_token_balance::builders::BatchGetTokenBalanceOutputBuilder,
) -> crate::operation::batch_get_token_balance::builders::BatchGetTokenBalanceOutputBuilder {
    if builder.token_balances.is_none() {
        builder.token_balances = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn get_asset_contract_output_correct_errors(
    mut builder: crate::operation::get_asset_contract::builders::GetAssetContractOutputBuilder,
) -> crate::operation::get_asset_contract::builders::GetAssetContractOutputBuilder {
    if builder.contract_identifier.is_none() {
        builder.contract_identifier = {
            let builder = crate::types::builders::ContractIdentifierBuilder::default();
            crate::serde_util::contract_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.token_standard.is_none() {
        builder.token_standard = "no value was set".parse::<crate::types::QueryTokenStandard>().ok()
    }
    if builder.deployer_address.is_none() {
        builder.deployer_address = Some(Default::default())
    }
    builder
}

pub(crate) fn get_token_balance_output_correct_errors(
    mut builder: crate::operation::get_token_balance::builders::GetTokenBalanceOutputBuilder,
) -> crate::operation::get_token_balance::builders::GetTokenBalanceOutputBuilder {
    if builder.balance.is_none() {
        builder.balance = Some(Default::default())
    }
    if builder.at_blockchain_instant.is_none() {
        builder.at_blockchain_instant = {
            let builder = crate::types::builders::BlockchainInstantBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_transaction_output_correct_errors(
    mut builder: crate::operation::get_transaction::builders::GetTransactionOutputBuilder,
) -> crate::operation::get_transaction::builders::GetTransactionOutputBuilder {
    if builder.transaction.is_none() {
        builder.transaction = {
            let builder = crate::types::builders::TransactionBuilder::default();
            crate::serde_util::transaction_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_asset_contracts_output_correct_errors(
    mut builder: crate::operation::list_asset_contracts::builders::ListAssetContractsOutputBuilder,
) -> crate::operation::list_asset_contracts::builders::ListAssetContractsOutputBuilder {
    if builder.contracts.is_none() {
        builder.contracts = Some(Default::default())
    }
    builder
}

pub(crate) fn list_token_balances_output_correct_errors(
    mut builder: crate::operation::list_token_balances::builders::ListTokenBalancesOutputBuilder,
) -> crate::operation::list_token_balances::builders::ListTokenBalancesOutputBuilder {
    if builder.token_balances.is_none() {
        builder.token_balances = Some(Default::default())
    }
    builder
}

pub(crate) fn list_transaction_events_output_correct_errors(
    mut builder: crate::operation::list_transaction_events::builders::ListTransactionEventsOutputBuilder,
) -> crate::operation::list_transaction_events::builders::ListTransactionEventsOutputBuilder {
    if builder.events.is_none() {
        builder.events = Some(Default::default())
    }
    builder
}

pub(crate) fn list_transactions_output_correct_errors(
    mut builder: crate::operation::list_transactions::builders::ListTransactionsOutputBuilder,
) -> crate::operation::list_transactions::builders::ListTransactionsOutputBuilder {
    if builder.transactions.is_none() {
        builder.transactions = Some(Default::default())
    }
    builder
}

pub(crate) fn contract_identifier_correct_errors(
    mut builder: crate::types::builders::ContractIdentifierBuilder,
) -> crate::types::builders::ContractIdentifierBuilder {
    if builder.network.is_none() {
        builder.network = "no value was set".parse::<crate::types::QueryNetwork>().ok()
    }
    if builder.contract_address.is_none() {
        builder.contract_address = Some(Default::default())
    }
    builder
}

pub(crate) fn transaction_correct_errors(mut builder: crate::types::builders::TransactionBuilder) -> crate::types::builders::TransactionBuilder {
    if builder.network.is_none() {
        builder.network = "no value was set".parse::<crate::types::QueryNetwork>().ok()
    }
    if builder.transaction_hash.is_none() {
        builder.transaction_hash = Some(Default::default())
    }
    if builder.transaction_timestamp.is_none() {
        builder.transaction_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.transaction_index.is_none() {
        builder.transaction_index = Some(Default::default())
    }
    if builder.number_of_transactions.is_none() {
        builder.number_of_transactions = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QueryTransactionStatus>().ok()
    }
    if builder.to.is_none() {
        builder.to = Some(Default::default())
    }
    builder
}

pub(crate) fn owner_identifier_correct_errors(
    mut builder: crate::types::builders::OwnerIdentifierBuilder,
) -> crate::types::builders::OwnerIdentifierBuilder {
    if builder.address.is_none() {
        builder.address = Some(Default::default())
    }
    builder
}

pub(crate) fn token_identifier_correct_errors(
    mut builder: crate::types::builders::TokenIdentifierBuilder,
) -> crate::types::builders::TokenIdentifierBuilder {
    if builder.network.is_none() {
        builder.network = "no value was set".parse::<crate::types::QueryNetwork>().ok()
    }
    builder
}

pub(crate) fn asset_contract_correct_errors(
    mut builder: crate::types::builders::AssetContractBuilder,
) -> crate::types::builders::AssetContractBuilder {
    if builder.contract_identifier.is_none() {
        builder.contract_identifier = {
            let builder = crate::types::builders::ContractIdentifierBuilder::default();
            crate::serde_util::contract_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.token_standard.is_none() {
        builder.token_standard = "no value was set".parse::<crate::types::QueryTokenStandard>().ok()
    }
    if builder.deployer_address.is_none() {
        builder.deployer_address = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_token_balance_error_item_correct_errors(
    mut builder: crate::types::builders::BatchGetTokenBalanceErrorItemBuilder,
) -> crate::types::builders::BatchGetTokenBalanceErrorItemBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    if builder.error_type.is_none() {
        builder.error_type = "no value was set".parse::<crate::types::ErrorType>().ok()
    }
    builder
}

pub(crate) fn batch_get_token_balance_output_item_correct_errors(
    mut builder: crate::types::builders::BatchGetTokenBalanceOutputItemBuilder,
) -> crate::types::builders::BatchGetTokenBalanceOutputItemBuilder {
    if builder.balance.is_none() {
        builder.balance = Some(Default::default())
    }
    if builder.at_blockchain_instant.is_none() {
        builder.at_blockchain_instant = {
            let builder = crate::types::builders::BlockchainInstantBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn token_balance_correct_errors(mut builder: crate::types::builders::TokenBalanceBuilder) -> crate::types::builders::TokenBalanceBuilder {
    if builder.balance.is_none() {
        builder.balance = Some(Default::default())
    }
    if builder.at_blockchain_instant.is_none() {
        builder.at_blockchain_instant = {
            let builder = crate::types::builders::BlockchainInstantBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn transaction_event_correct_errors(
    mut builder: crate::types::builders::TransactionEventBuilder,
) -> crate::types::builders::TransactionEventBuilder {
    if builder.network.is_none() {
        builder.network = "no value was set".parse::<crate::types::QueryNetwork>().ok()
    }
    if builder.transaction_hash.is_none() {
        builder.transaction_hash = Some(Default::default())
    }
    if builder.event_type.is_none() {
        builder.event_type = "no value was set".parse::<crate::types::QueryTransactionEventType>().ok()
    }
    builder
}

pub(crate) fn transaction_output_item_correct_errors(
    mut builder: crate::types::builders::TransactionOutputItemBuilder,
) -> crate::types::builders::TransactionOutputItemBuilder {
    if builder.transaction_hash.is_none() {
        builder.transaction_hash = Some(Default::default())
    }
    if builder.network.is_none() {
        builder.network = "no value was set".parse::<crate::types::QueryNetwork>().ok()
    }
    if builder.transaction_timestamp.is_none() {
        builder.transaction_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}
