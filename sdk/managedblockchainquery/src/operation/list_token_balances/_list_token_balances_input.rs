// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTokenBalancesInput {
    /// <p>The contract or wallet address on the blockchain network by which to filter the request. You must specify the <code>address</code> property of the <code>ownerFilter</code> when listing balances of tokens owned by the address.</p>
    pub owner_filter: ::std::option::Option<crate::types::OwnerFilter>,
    /// <p>The contract address or a token identifier on the blockchain network by which to filter the request. You must specify the <code>contractAddress</code> property of this container when listing tokens minted by a contract.</p> <note>
    /// <p>You must always specify the network property of this container when using this operation.</p>
    /// </note>
    pub token_filter: ::std::option::Option<crate::types::TokenFilter>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of token balances to return.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListTokenBalancesInput {
    /// <p>The contract or wallet address on the blockchain network by which to filter the request. You must specify the <code>address</code> property of the <code>ownerFilter</code> when listing balances of tokens owned by the address.</p>
    pub fn owner_filter(&self) -> ::std::option::Option<&crate::types::OwnerFilter> {
        self.owner_filter.as_ref()
    }
    /// <p>The contract address or a token identifier on the blockchain network by which to filter the request. You must specify the <code>contractAddress</code> property of this container when listing tokens minted by a contract.</p> <note>
    /// <p>You must always specify the network property of this container when using this operation.</p>
    /// </note>
    pub fn token_filter(&self) -> ::std::option::Option<&crate::types::TokenFilter> {
        self.token_filter.as_ref()
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of token balances to return.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListTokenBalancesInput {
    /// Creates a new builder-style object to manufacture [`ListTokenBalancesInput`](crate::operation::list_token_balances::ListTokenBalancesInput).
    pub fn builder() -> crate::operation::list_token_balances::builders::ListTokenBalancesInputBuilder {
        crate::operation::list_token_balances::builders::ListTokenBalancesInputBuilder::default()
    }
}

/// A builder for [`ListTokenBalancesInput`](crate::operation::list_token_balances::ListTokenBalancesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListTokenBalancesInputBuilder {
    pub(crate) owner_filter: ::std::option::Option<crate::types::OwnerFilter>,
    pub(crate) token_filter: ::std::option::Option<crate::types::TokenFilter>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListTokenBalancesInputBuilder {
    /// <p>The contract or wallet address on the blockchain network by which to filter the request. You must specify the <code>address</code> property of the <code>ownerFilter</code> when listing balances of tokens owned by the address.</p>
    pub fn owner_filter(mut self, input: crate::types::OwnerFilter) -> Self {
        self.owner_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The contract or wallet address on the blockchain network by which to filter the request. You must specify the <code>address</code> property of the <code>ownerFilter</code> when listing balances of tokens owned by the address.</p>
    pub fn set_owner_filter(mut self, input: ::std::option::Option<crate::types::OwnerFilter>) -> Self {
        self.owner_filter = input;
        self
    }
    /// <p>The contract or wallet address on the blockchain network by which to filter the request. You must specify the <code>address</code> property of the <code>ownerFilter</code> when listing balances of tokens owned by the address.</p>
    pub fn get_owner_filter(&self) -> &::std::option::Option<crate::types::OwnerFilter> {
        &self.owner_filter
    }
    /// <p>The contract address or a token identifier on the blockchain network by which to filter the request. You must specify the <code>contractAddress</code> property of this container when listing tokens minted by a contract.</p> <note>
    /// <p>You must always specify the network property of this container when using this operation.</p>
    /// </note>
    /// This field is required.
    pub fn token_filter(mut self, input: crate::types::TokenFilter) -> Self {
        self.token_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The contract address or a token identifier on the blockchain network by which to filter the request. You must specify the <code>contractAddress</code> property of this container when listing tokens minted by a contract.</p> <note>
    /// <p>You must always specify the network property of this container when using this operation.</p>
    /// </note>
    pub fn set_token_filter(mut self, input: ::std::option::Option<crate::types::TokenFilter>) -> Self {
        self.token_filter = input;
        self
    }
    /// <p>The contract address or a token identifier on the blockchain network by which to filter the request. You must specify the <code>contractAddress</code> property of this container when listing tokens minted by a contract.</p> <note>
    /// <p>You must always specify the network property of this container when using this operation.</p>
    /// </note>
    pub fn get_token_filter(&self) -> &::std::option::Option<crate::types::TokenFilter> {
        &self.token_filter
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of token balances to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of token balances to return.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of token balances to return.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListTokenBalancesInput`](crate::operation::list_token_balances::ListTokenBalancesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_token_balances::ListTokenBalancesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_token_balances::ListTokenBalancesInput {
            owner_filter: self.owner_filter,
            token_filter: self.token_filter,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
