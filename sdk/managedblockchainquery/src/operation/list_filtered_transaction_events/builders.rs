// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_filtered_transaction_events::_list_filtered_transaction_events_output::ListFilteredTransactionEventsOutputBuilder;

pub use crate::operation::list_filtered_transaction_events::_list_filtered_transaction_events_input::ListFilteredTransactionEventsInputBuilder;

impl crate::operation::list_filtered_transaction_events::builders::ListFilteredTransactionEventsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_filtered_transaction_events();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListFilteredTransactionEvents`.
///
/// <p>Lists all the transaction events for an address on the blockchain.</p><note>
/// <p>This operation is only supported on the Bitcoin networks.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListFilteredTransactionEventsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_filtered_transaction_events::builders::ListFilteredTransactionEventsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsOutput,
        crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsError,
    > for ListFilteredTransactionEventsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsOutput,
            crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListFilteredTransactionEventsFluentBuilder {
    /// Creates a new `ListFilteredTransactionEvents`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListFilteredTransactionEvents as a reference.
    pub fn as_input(&self) -> &crate::operation::list_filtered_transaction_events::builders::ListFilteredTransactionEventsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_filtered_transaction_events::ListFilteredTransactionEvents::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_filtered_transaction_events::ListFilteredTransactionEvents::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsOutput,
        crate::operation::list_filtered_transaction_events::ListFilteredTransactionEventsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_filtered_transaction_events::paginator::ListFilteredTransactionEventsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_filtered_transaction_events::paginator::ListFilteredTransactionEventsPaginator {
        crate::operation::list_filtered_transaction_events::paginator::ListFilteredTransactionEventsPaginator::new(self.handle, self.inner)
    }
    /// <p>The blockchain network where the transaction occurred.</p>
    /// <p>Valid Values: <code>BITCOIN_MAINNET</code> | <code>BITCOIN_TESTNET</code></p>
    pub fn network(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.network(input.into());
        self
    }
    /// <p>The blockchain network where the transaction occurred.</p>
    /// <p>Valid Values: <code>BITCOIN_MAINNET</code> | <code>BITCOIN_TESTNET</code></p>
    pub fn set_network(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_network(input);
        self
    }
    /// <p>The blockchain network where the transaction occurred.</p>
    /// <p>Valid Values: <code>BITCOIN_MAINNET</code> | <code>BITCOIN_TESTNET</code></p>
    pub fn get_network(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_network()
    }
    /// <p>This is the unique public address on the blockchain for which the transaction events are being requested.</p>
    pub fn address_identifier_filter(mut self, input: crate::types::AddressIdentifierFilter) -> Self {
        self.inner = self.inner.address_identifier_filter(input);
        self
    }
    /// <p>This is the unique public address on the blockchain for which the transaction events are being requested.</p>
    pub fn set_address_identifier_filter(mut self, input: ::std::option::Option<crate::types::AddressIdentifierFilter>) -> Self {
        self.inner = self.inner.set_address_identifier_filter(input);
        self
    }
    /// <p>This is the unique public address on the blockchain for which the transaction events are being requested.</p>
    pub fn get_address_identifier_filter(&self) -> &::std::option::Option<crate::types::AddressIdentifierFilter> {
        self.inner.get_address_identifier_filter()
    }
    /// <p>This container specifies the time frame for the transaction events returned in the response.</p>
    pub fn time_filter(mut self, input: crate::types::TimeFilter) -> Self {
        self.inner = self.inner.time_filter(input);
        self
    }
    /// <p>This container specifies the time frame for the transaction events returned in the response.</p>
    pub fn set_time_filter(mut self, input: ::std::option::Option<crate::types::TimeFilter>) -> Self {
        self.inner = self.inner.set_time_filter(input);
        self
    }
    /// <p>This container specifies the time frame for the transaction events returned in the response.</p>
    pub fn get_time_filter(&self) -> &::std::option::Option<crate::types::TimeFilter> {
        self.inner.get_time_filter()
    }
    /// <p>This container specifies filtering attributes related to BITCOIN_VOUT event types</p>
    pub fn vout_filter(mut self, input: crate::types::VoutFilter) -> Self {
        self.inner = self.inner.vout_filter(input);
        self
    }
    /// <p>This container specifies filtering attributes related to BITCOIN_VOUT event types</p>
    pub fn set_vout_filter(mut self, input: ::std::option::Option<crate::types::VoutFilter>) -> Self {
        self.inner = self.inner.set_vout_filter(input);
        self
    }
    /// <p>This container specifies filtering attributes related to BITCOIN_VOUT event types</p>
    pub fn get_vout_filter(&self) -> &::std::option::Option<crate::types::VoutFilter> {
        self.inner.get_vout_filter()
    }
    /// <p>The container for the <code>ConfirmationStatusFilter</code> that filters for the <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a> of the results.</p>
    pub fn confirmation_status_filter(mut self, input: crate::types::ConfirmationStatusFilter) -> Self {
        self.inner = self.inner.confirmation_status_filter(input);
        self
    }
    /// <p>The container for the <code>ConfirmationStatusFilter</code> that filters for the <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a> of the results.</p>
    pub fn set_confirmation_status_filter(mut self, input: ::std::option::Option<crate::types::ConfirmationStatusFilter>) -> Self {
        self.inner = self.inner.set_confirmation_status_filter(input);
        self
    }
    /// <p>The container for the <code>ConfirmationStatusFilter</code> that filters for the <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality"> <i>finality</i> </a> of the results.</p>
    pub fn get_confirmation_status_filter(&self) -> &::std::option::Option<crate::types::ConfirmationStatusFilter> {
        self.inner.get_confirmation_status_filter()
    }
    /// <p>The order by which the results will be sorted.</p>
    pub fn sort(mut self, input: crate::types::ListFilteredTransactionEventsSort) -> Self {
        self.inner = self.inner.sort(input);
        self
    }
    /// <p>The order by which the results will be sorted.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::ListFilteredTransactionEventsSort>) -> Self {
        self.inner = self.inner.set_sort(input);
        self
    }
    /// <p>The order by which the results will be sorted.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::ListFilteredTransactionEventsSort> {
        self.inner.get_sort()
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of transaction events to list.</p>
    /// <p>Default: <code>100</code></p><note>
    /// <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p>
    /// <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p>
    /// </note>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of transaction events to list.</p>
    /// <p>Default: <code>100</code></p><note>
    /// <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p>
    /// <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p>
    /// </note>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of transaction events to list.</p>
    /// <p>Default: <code>100</code></p><note>
    /// <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p>
    /// <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p>
    /// </note>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
