// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_fleet_attributes_output_next_token(
    input: &crate::operation::describe_fleet_attributes::DescribeFleetAttributesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_fleet_capacity_output_next_token(
    input: &crate::operation::describe_fleet_capacity::DescribeFleetCapacityOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_fleet_events_output_next_token(
    input: &crate::operation::describe_fleet_events::DescribeFleetEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_fleet_location_attributes_output_next_token(
    input: &crate::operation::describe_fleet_location_attributes::DescribeFleetLocationAttributesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_fleet_utilization_output_next_token(
    input: &crate::operation::describe_fleet_utilization::DescribeFleetUtilizationOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_game_server_instances_output_next_token(
    input: &crate::operation::describe_game_server_instances::DescribeGameServerInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_game_session_details_output_next_token(
    input: &crate::operation::describe_game_session_details::DescribeGameSessionDetailsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_game_session_queues_output_next_token(
    input: &crate::operation::describe_game_session_queues::DescribeGameSessionQueuesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_game_sessions_output_next_token(
    input: &crate::operation::describe_game_sessions::DescribeGameSessionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_instances_output_next_token(
    input: &crate::operation::describe_instances::DescribeInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_matchmaking_configurations_output_next_token(
    input: &crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_matchmaking_rule_sets_output_next_token(
    input: &crate::operation::describe_matchmaking_rule_sets::DescribeMatchmakingRuleSetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_player_sessions_output_next_token(
    input: &crate::operation::describe_player_sessions::DescribePlayerSessionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_scaling_policies_output_next_token(
    input: &crate::operation::describe_scaling_policies::DescribeScalingPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_aliases_output_next_token(
    input: &crate::operation::list_aliases::ListAliasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_builds_output_next_token(
    input: &crate::operation::list_builds::ListBuildsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_compute_output_next_token(
    input: &crate::operation::list_compute::ListComputeOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_fleets_output_next_token(
    input: &crate::operation::list_fleets::ListFleetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_game_server_groups_output_next_token(
    input: &crate::operation::list_game_server_groups::ListGameServerGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_game_servers_output_next_token(
    input: &crate::operation::list_game_servers::ListGameServersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_locations_output_next_token(
    input: &crate::operation::list_locations::ListLocationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_scripts_output_next_token(
    input: &crate::operation::list_scripts::ListScriptsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_game_sessions_output_next_token(
    input: &crate::operation::search_game_sessions::SearchGameSessionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_fleet_attributes_output_fleet_attributes(
    input: crate::operation::describe_fleet_attributes::DescribeFleetAttributesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::FleetAttributes>> {
    let input = match input.fleet_attributes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_fleet_capacity_output_fleet_capacity(
    input: crate::operation::describe_fleet_capacity::DescribeFleetCapacityOutput,
) -> std::option::Option<std::vec::Vec<crate::types::FleetCapacity>> {
    let input = match input.fleet_capacity {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_fleet_events_output_events(
    input: crate::operation::describe_fleet_events::DescribeFleetEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Event>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_fleet_utilization_output_fleet_utilization(
    input: crate::operation::describe_fleet_utilization::DescribeFleetUtilizationOutput,
) -> std::option::Option<std::vec::Vec<crate::types::FleetUtilization>> {
    let input = match input.fleet_utilization {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_game_server_instances_output_game_server_instances(
    input: crate::operation::describe_game_server_instances::DescribeGameServerInstancesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GameServerInstance>> {
    let input = match input.game_server_instances {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_game_session_details_output_game_session_details(
    input: crate::operation::describe_game_session_details::DescribeGameSessionDetailsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GameSessionDetail>> {
    let input = match input.game_session_details {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_game_session_queues_output_game_session_queues(
    input: crate::operation::describe_game_session_queues::DescribeGameSessionQueuesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GameSessionQueue>> {
    let input = match input.game_session_queues {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_game_sessions_output_game_sessions(
    input: crate::operation::describe_game_sessions::DescribeGameSessionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GameSession>> {
    let input = match input.game_sessions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_instances_output_instances(
    input: crate::operation::describe_instances::DescribeInstancesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Instance>> {
    let input = match input.instances {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_matchmaking_configurations_output_configurations(
    input: crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MatchmakingConfiguration>> {
    let input = match input.configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_matchmaking_rule_sets_output_rule_sets(
    input: crate::operation::describe_matchmaking_rule_sets::DescribeMatchmakingRuleSetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MatchmakingRuleSet>> {
    let input = match input.rule_sets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_player_sessions_output_player_sessions(
    input: crate::operation::describe_player_sessions::DescribePlayerSessionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PlayerSession>> {
    let input = match input.player_sessions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_scaling_policies_output_scaling_policies(
    input: crate::operation::describe_scaling_policies::DescribeScalingPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ScalingPolicy>> {
    let input = match input.scaling_policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_aliases_output_aliases(
    input: crate::operation::list_aliases::ListAliasesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Alias>> {
    let input = match input.aliases {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_builds_output_builds(
    input: crate::operation::list_builds::ListBuildsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Build>> {
    let input = match input.builds {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_compute_output_compute_list(
    input: crate::operation::list_compute::ListComputeOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Compute>> {
    let input = match input.compute_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_fleets_output_fleet_ids(
    input: crate::operation::list_fleets::ListFleetsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.fleet_ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_game_server_groups_output_game_server_groups(
    input: crate::operation::list_game_server_groups::ListGameServerGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GameServerGroup>> {
    let input = match input.game_server_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_game_servers_output_game_servers(
    input: crate::operation::list_game_servers::ListGameServersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GameServer>> {
    let input = match input.game_servers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_locations_output_locations(
    input: crate::operation::list_locations::ListLocationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::LocationModel>> {
    let input = match input.locations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_scripts_output_scripts(
    input: crate::operation::list_scripts::ListScriptsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Script>> {
    let input = match input.scripts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_search_game_sessions_output_game_sessions(
    input: crate::operation::search_game_sessions::SearchGameSessionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GameSession>> {
    let input = match input.game_sessions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
