// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon GameLift
///
/// Client for invoking operations on Amazon GameLift. Each operation on Amazon GameLift is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_gamelift::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_gamelift::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_gamelift::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AcceptMatch`](crate::client::fluent_builders::AcceptMatch) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ticket_id(impl Into<String>)`](crate::client::fluent_builders::AcceptMatch::ticket_id) / [`set_ticket_id(Option<String>)`](crate::client::fluent_builders::AcceptMatch::set_ticket_id): <p>A unique identifier for a matchmaking ticket. The ticket must be in status <code>REQUIRES_ACCEPTANCE</code>; otherwise this request will fail.</p>
    ///   - [`player_ids(Vec<String>)`](crate::client::fluent_builders::AcceptMatch::player_ids) / [`set_player_ids(Option<Vec<String>>)`](crate::client::fluent_builders::AcceptMatch::set_player_ids): <p>A unique identifier for a player delivering the response. This parameter can include one or multiple player IDs.</p>
    ///   - [`acceptance_type(AcceptanceType)`](crate::client::fluent_builders::AcceptMatch::acceptance_type) / [`set_acceptance_type(Option<AcceptanceType>)`](crate::client::fluent_builders::AcceptMatch::set_acceptance_type): <p>Player response to the proposed match.</p>
    /// - On success, responds with [`AcceptMatchOutput`](crate::output::AcceptMatchOutput)

    /// - On failure, responds with [`SdkError<AcceptMatchError>`](crate::error::AcceptMatchError)
    pub fn accept_match(&self) -> crate::client::fluent_builders::AcceptMatch {
        crate::client::fluent_builders::AcceptMatch::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ClaimGameServer`](crate::client::fluent_builders::ClaimGameServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::ClaimGameServer::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::ClaimGameServer::set_game_server_group_name): <p>A unique identifier for the game server group where the game server is running. If you are not specifying a game server to claim, this value identifies where you want GameLift FleetIQ to look for an available game server to claim. </p>
    ///   - [`game_server_id(impl Into<String>)`](crate::client::fluent_builders::ClaimGameServer::game_server_id) / [`set_game_server_id(Option<String>)`](crate::client::fluent_builders::ClaimGameServer::set_game_server_id): <p>A custom string that uniquely identifies the game server to claim. If this parameter is left empty, GameLift FleetIQ searches for an available game server in the specified game server group.</p>
    ///   - [`game_server_data(impl Into<String>)`](crate::client::fluent_builders::ClaimGameServer::game_server_data) / [`set_game_server_data(Option<String>)`](crate::client::fluent_builders::ClaimGameServer::set_game_server_data): <p>A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers. </p>
    /// - On success, responds with [`ClaimGameServerOutput`](crate::output::ClaimGameServerOutput) with field(s):
    ///   - [`game_server(Option<GameServer>)`](crate::output::ClaimGameServerOutput::game_server): <p>Object that describes the newly claimed game server.</p>
    /// - On failure, responds with [`SdkError<ClaimGameServerError>`](crate::error::ClaimGameServerError)
    pub fn claim_game_server(&self) -> crate::client::fluent_builders::ClaimGameServer {
        crate::client::fluent_builders::ClaimGameServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateAlias`](crate::client::fluent_builders::CreateAlias) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateAlias::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateAlias::set_name): <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateAlias::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateAlias::set_description): <p>A human-readable description of the alias.</p>
    ///   - [`routing_strategy(RoutingStrategy)`](crate::client::fluent_builders::CreateAlias::routing_strategy) / [`set_routing_strategy(Option<RoutingStrategy>)`](crate::client::fluent_builders::CreateAlias::set_routing_strategy): <p>The routing configuration, including routing type and fleet target, for the alias. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateAlias::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateAlias::set_tags): <p>A list of labels to assign to the new alias resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// - On success, responds with [`CreateAliasOutput`](crate::output::CreateAliasOutput) with field(s):
    ///   - [`alias(Option<Alias>)`](crate::output::CreateAliasOutput::alias): <p>The newly created alias resource.</p>
    /// - On failure, responds with [`SdkError<CreateAliasError>`](crate::error::CreateAliasError)
    pub fn create_alias(&self) -> crate::client::fluent_builders::CreateAlias {
        crate::client::fluent_builders::CreateAlias::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateBuild`](crate::client::fluent_builders::CreateBuild) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateBuild::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateBuild::set_name): <p>A descriptive label associated with a build. Build names do not need to be unique. You can change this value later. </p>
    ///   - [`version(impl Into<String>)`](crate::client::fluent_builders::CreateBuild::version) / [`set_version(Option<String>)`](crate::client::fluent_builders::CreateBuild::set_version): <p>Version information associated with a build or script. Version strings do not need to be unique. You can change this value later. </p>
    ///   - [`storage_location(S3Location)`](crate::client::fluent_builders::CreateBuild::storage_location) / [`set_storage_location(Option<S3Location>)`](crate::client::fluent_builders::CreateBuild::set_storage_location): <p>Information indicating where your game build files are stored. Use this parameter only when creating a build with files stored in an Amazon S3 bucket that you own. The storage location must specify an Amazon S3 bucket name and key. The location must also specify a role ARN that you set up to allow Amazon GameLift to access your Amazon S3 bucket. The S3 bucket and your new build must be in the same Region.</p>  <p>If a <code>StorageLocation</code> is specified, the size of your file can be found in your Amazon S3 bucket. Amazon GameLift will report a <code>SizeOnDisk</code> of 0. </p>
    ///   - [`operating_system(OperatingSystem)`](crate::client::fluent_builders::CreateBuild::operating_system) / [`set_operating_system(Option<OperatingSystem>)`](crate::client::fluent_builders::CreateBuild::set_operating_system): <p>The operating system that you built the game server binaries to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system. If an operating system is not specified when creating a build, GameLift uses the default value (WINDOWS_2012). This value cannot be changed later.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateBuild::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateBuild::set_tags): <p>A list of labels to assign to the new build resource. Tags are developer defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>. Once the resource is created, you can use <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_TagResource.html">TagResource</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UntagResource.html">UntagResource</a>, and <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ListTagsForResource.html">ListTagsForResource</a> to add, remove, and view tags. The maximum tag limit may be lower than stated. See the Amazon Web Services General Reference for actual tagging limits.</p>
    ///   - [`server_sdk_version(impl Into<String>)`](crate::client::fluent_builders::CreateBuild::server_sdk_version) / [`set_server_sdk_version(Option<String>)`](crate::client::fluent_builders::CreateBuild::set_server_sdk_version): <p>A server SDK version you used when integrating your game server build with GameLift. For more information see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/integration-custom-intro.html">Integrate games with custom game servers</a>.</p>
    /// - On success, responds with [`CreateBuildOutput`](crate::output::CreateBuildOutput) with field(s):
    ///   - [`build_value(Option<Build>)`](crate::output::CreateBuildOutput::build_value): <p>The newly created build resource, including a unique build IDs and status. </p>
    ///   - [`upload_credentials(Option<AwsCredentials>)`](crate::output::CreateBuildOutput::upload_credentials): <p>This element is returned only when the operation is called without a storage location. It contains credentials to use when you are uploading a build file to an Amazon S3 bucket that is owned by Amazon GameLift. Credentials have a limited life span. To refresh these credentials, call <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_RequestUploadCredentials.html">RequestUploadCredentials</a>. </p>
    ///   - [`storage_location(Option<S3Location>)`](crate::output::CreateBuildOutput::storage_location): <p>Amazon S3 location for your game build file, including bucket name and key.</p>
    /// - On failure, responds with [`SdkError<CreateBuildError>`](crate::error::CreateBuildError)
    pub fn create_build(&self) -> crate::client::fluent_builders::CreateBuild {
        crate::client::fluent_builders::CreateBuild::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateFleet`](crate::client::fluent_builders::CreateFleet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateFleet::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateFleet::set_name): <p>A descriptive label that is associated with a fleet. Fleet names do not need to be unique.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateFleet::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateFleet::set_description): <p>A description for the fleet.</p>
    ///   - [`build_id(impl Into<String>)`](crate::client::fluent_builders::CreateFleet::build_id) / [`set_build_id(Option<String>)`](crate::client::fluent_builders::CreateFleet::set_build_id): <p>The unique identifier for a custom game server build to be deployed on fleet instances. You can use either the build ID or ARN. The build must be uploaded to GameLift and in <code>READY</code> status. This fleet property cannot be changed later.</p>
    ///   - [`script_id(impl Into<String>)`](crate::client::fluent_builders::CreateFleet::script_id) / [`set_script_id(Option<String>)`](crate::client::fluent_builders::CreateFleet::set_script_id): <p>The unique identifier for a Realtime configuration script to be deployed on fleet instances. You can use either the script ID or ARN. Scripts must be uploaded to GameLift prior to creating the fleet. This fleet property cannot be changed later.</p>
    ///   - [`server_launch_path(impl Into<String>)`](crate::client::fluent_builders::CreateFleet::server_launch_path) / [`set_server_launch_path(Option<String>)`](crate::client::fluent_builders::CreateFleet::set_server_launch_path): <p> <b>This parameter is no longer used.</b> Specify a server launch path using the <code>RuntimeConfiguration</code> parameter. Requests that use this parameter instead continue to be valid.</p>
    ///   - [`server_launch_parameters(impl Into<String>)`](crate::client::fluent_builders::CreateFleet::server_launch_parameters) / [`set_server_launch_parameters(Option<String>)`](crate::client::fluent_builders::CreateFleet::set_server_launch_parameters): <p> <b>This parameter is no longer used.</b> Specify server launch parameters using the <code>RuntimeConfiguration</code> parameter. Requests that use this parameter instead continue to be valid.</p>
    ///   - [`log_paths(Vec<String>)`](crate::client::fluent_builders::CreateFleet::log_paths) / [`set_log_paths(Option<Vec<String>>)`](crate::client::fluent_builders::CreateFleet::set_log_paths): <p> <b>This parameter is no longer used.</b> To specify where GameLift should store log files once a server process shuts down, use the GameLift server API <code>ProcessReady()</code> and specify one or more directory paths in <code>logParameters</code>. For more information, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-initialize">Initialize the server process</a> in the <i>GameLift Developer Guide</i>. </p>
    ///   - [`ec2_instance_type(Ec2InstanceType)`](crate::client::fluent_builders::CreateFleet::ec2_instance_type) / [`set_ec2_instance_type(Option<Ec2InstanceType>)`](crate::client::fluent_builders::CreateFleet::set_ec2_instance_type): <p>The GameLift-supported Amazon EC2 instance type to use for all fleet instances. Instance type determines the computing resources that will be used to host your game servers, including CPU, memory, storage, and networking capacity. See <a href="http://aws.amazon.com/ec2/instance-types/">Amazon Elastic Compute Cloud Instance Types</a> for detailed descriptions of Amazon EC2 instance types.</p>
    ///   - [`ec2_inbound_permissions(Vec<IpPermission>)`](crate::client::fluent_builders::CreateFleet::ec2_inbound_permissions) / [`set_ec2_inbound_permissions(Option<Vec<IpPermission>>)`](crate::client::fluent_builders::CreateFleet::set_ec2_inbound_permissions): <p>The allowed IP address ranges and port settings that allow inbound traffic to access game sessions on this fleet. If the fleet is hosting a custom game build, this property must be set before players can connect to game sessions. For Realtime Servers fleets, GameLift automatically sets TCP and UDP ranges. </p>
    ///   - [`new_game_session_protection_policy(ProtectionPolicy)`](crate::client::fluent_builders::CreateFleet::new_game_session_protection_policy) / [`set_new_game_session_protection_policy(Option<ProtectionPolicy>)`](crate::client::fluent_builders::CreateFleet::set_new_game_session_protection_policy): <p>The status of termination protection for active game sessions on the fleet. By default, this property is set to <code>NoProtection</code>. You can also set game session protection for an individual game session by calling <a href="gamelift/latest/apireference/API_UpdateGameSession.html">UpdateGameSession</a>.</p>  <ul>   <li> <p> <b>NoProtection</b> - Game sessions can be terminated during active gameplay as a result of a scale-down event. </p> </li>   <li> <p> <b>FullProtection</b> - Game sessions in <code>ACTIVE</code> status cannot be terminated during a scale-down event.</p> </li>  </ul>
    ///   - [`runtime_configuration(RuntimeConfiguration)`](crate::client::fluent_builders::CreateFleet::runtime_configuration) / [`set_runtime_configuration(Option<RuntimeConfiguration>)`](crate::client::fluent_builders::CreateFleet::set_runtime_configuration): <p>Instructions for how to launch and maintain server processes on instances in the fleet. The runtime configuration defines one or more server process configurations, each identifying a build executable or Realtime script file and the number of processes of that type to run concurrently. </p> <note>   <p>The <code>RuntimeConfiguration</code> parameter is required unless the fleet is being configured using the older parameters <code>ServerLaunchPath</code> and <code>ServerLaunchParameters</code>, which are still supported for backward compatibility.</p>  </note>
    ///   - [`resource_creation_limit_policy(ResourceCreationLimitPolicy)`](crate::client::fluent_builders::CreateFleet::resource_creation_limit_policy) / [`set_resource_creation_limit_policy(Option<ResourceCreationLimitPolicy>)`](crate::client::fluent_builders::CreateFleet::set_resource_creation_limit_policy): <p>A policy that limits the number of game sessions that an individual player can create on instances in this fleet within a specified span of time.</p>
    ///   - [`metric_groups(Vec<String>)`](crate::client::fluent_builders::CreateFleet::metric_groups) / [`set_metric_groups(Option<Vec<String>>)`](crate::client::fluent_builders::CreateFleet::set_metric_groups): <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to. A metric group is used to aggregate the metrics for multiple fleets. You can specify an existing metric group name or set a new name to create a new metric group. A fleet can be included in only one metric group at a time. </p>
    ///   - [`peer_vpc_aws_account_id(impl Into<String>)`](crate::client::fluent_builders::CreateFleet::peer_vpc_aws_account_id) / [`set_peer_vpc_aws_account_id(Option<String>)`](crate::client::fluent_builders::CreateFleet::set_peer_vpc_aws_account_id): <p>Used when peering your GameLift fleet with a VPC, the unique identifier for the Amazon Web Services account that owns the VPC. You can find your account ID in the Amazon Web Services Management Console under account settings. </p>
    ///   - [`peer_vpc_id(impl Into<String>)`](crate::client::fluent_builders::CreateFleet::peer_vpc_id) / [`set_peer_vpc_id(Option<String>)`](crate::client::fluent_builders::CreateFleet::set_peer_vpc_id): <p>A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the <a href="https://console.aws.amazon.com/vpc/">VPC Dashboard</a> in the Amazon Web Services Management Console. Learn more about VPC peering in <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with GameLift Fleets</a>.</p>
    ///   - [`fleet_type(FleetType)`](crate::client::fluent_builders::CreateFleet::fleet_type) / [`set_fleet_type(Option<FleetType>)`](crate::client::fluent_builders::CreateFleet::set_fleet_type): <p>Indicates whether to use On-Demand or Spot instances for this fleet. By default, this property is set to <code>ON_DEMAND</code>. Learn more about when to use <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot"> On-Demand versus Spot Instances</a>. This property cannot be changed after the fleet is created.</p>
    ///   - [`instance_role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateFleet::instance_role_arn) / [`set_instance_role_arn(Option<String>)`](crate::client::fluent_builders::CreateFleet::set_instance_role_arn): <p>A unique identifier for an IAM role that manages access to your Amazon Web Services services. With an instance role ARN set, any application that runs on an instance in this fleet can assume the role, including install scripts, server processes, and daemons (background processes). Create a role or look up a role's ARN by using the <a href="https://console.aws.amazon.com/iam/">IAM dashboard</a> in the Amazon Web Services Management Console. Learn more about using on-box credentials for your game servers at <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html"> Access external resources from a game server</a>. This property cannot be changed after the fleet is created.</p>
    ///   - [`certificate_configuration(CertificateConfiguration)`](crate::client::fluent_builders::CreateFleet::certificate_configuration) / [`set_certificate_configuration(Option<CertificateConfiguration>)`](crate::client::fluent_builders::CreateFleet::set_certificate_configuration): <p>Prompts GameLift to generate a TLS/SSL certificate for the fleet. GameLift uses the certificates to encrypt traffic between game clients and the game servers running on GameLift. By default, the <code>CertificateConfiguration</code> is <code>DISABLED</code>. You can't change this property after you create the fleet. </p>  <p>Certificate Manager (ACM) certificates expire after 13 months. Certificate expiration can cause fleets to fail, preventing players from connecting to instances in the fleet. We recommend you replace fleets before 13 months, consider using fleet aliases for a smooth transition.</p> <note>   <p>ACM isn't available in all Amazon Web Services regions. A fleet creation request with certificate generation enabled in an unsupported Region, fails with a 4xx error. For more information about the supported Regions, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-regions.html">Supported Regions</a> in the <i>Certificate Manager User Guide</i>.</p>  </note>
    ///   - [`locations(Vec<LocationConfiguration>)`](crate::client::fluent_builders::CreateFleet::locations) / [`set_locations(Option<Vec<LocationConfiguration>>)`](crate::client::fluent_builders::CreateFleet::set_locations): <p>A set of remote locations to deploy additional instances to and manage as part of the fleet. This parameter can only be used when creating fleets in Amazon Web Services Regions that support multiple locations. You can add any GameLift-supported Amazon Web Services Region as a remote location, in the form of an Amazon Web Services Region code such as <code>us-west-2</code>. To create a fleet with instances in the home Region only, omit this parameter. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateFleet::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateFleet::set_tags): <p>A list of labels to assign to the new fleet resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ///   - [`compute_type(ComputeType)`](crate::client::fluent_builders::CreateFleet::compute_type) / [`set_compute_type(Option<ComputeType>)`](crate::client::fluent_builders::CreateFleet::set_compute_type): <p>The type of compute resource used to host your game servers. You can use your own compute resources with GameLift Anywhere or use Amazon EC2 instances with managed GameLift.</p>
    ///   - [`anywhere_configuration(AnywhereConfiguration)`](crate::client::fluent_builders::CreateFleet::anywhere_configuration) / [`set_anywhere_configuration(Option<AnywhereConfiguration>)`](crate::client::fluent_builders::CreateFleet::set_anywhere_configuration): <p>GameLift Anywhere configuration options.</p>
    /// - On success, responds with [`CreateFleetOutput`](crate::output::CreateFleetOutput) with field(s):
    ///   - [`fleet_attributes(Option<FleetAttributes>)`](crate::output::CreateFleetOutput::fleet_attributes): <p>The properties for the new fleet, including the current status. All fleets are placed in <code>NEW</code> status on creation. </p>
    ///   - [`location_states(Option<Vec<LocationState>>)`](crate::output::CreateFleetOutput::location_states): <p>The fleet's locations and life-cycle status of each location. For new fleets, the status of all locations is set to <code>NEW</code>. During fleet creation, GameLift updates each location status as instances are deployed there and prepared for game hosting. This list includes an entry for the fleet's home Region. For fleets with no remote locations, only one entry, representing the home Region, is returned.</p>
    /// - On failure, responds with [`SdkError<CreateFleetError>`](crate::error::CreateFleetError)
    pub fn create_fleet(&self) -> crate::client::fluent_builders::CreateFleet {
        crate::client::fluent_builders::CreateFleet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateFleetLocations`](crate::client::fluent_builders::CreateFleetLocations) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::CreateFleetLocations::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::CreateFleetLocations::set_fleet_id): <p>A unique identifier for the fleet to add locations to. You can use either the fleet ID or ARN value.</p>
    ///   - [`locations(Vec<LocationConfiguration>)`](crate::client::fluent_builders::CreateFleetLocations::locations) / [`set_locations(Option<Vec<LocationConfiguration>>)`](crate::client::fluent_builders::CreateFleetLocations::set_locations): <p>A list of locations to deploy additional instances to and manage as part of the fleet. You can add any GameLift-supported Amazon Web Services Region as a remote location, in the form of an Amazon Web Services Region code such as <code>us-west-2</code>. </p>
    /// - On success, responds with [`CreateFleetLocationsOutput`](crate::output::CreateFleetLocationsOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::CreateFleetLocationsOutput::fleet_id): <p>A unique identifier for the fleet that was updated with new locations.</p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::CreateFleetLocationsOutput::fleet_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>. </p>
    ///   - [`location_states(Option<Vec<LocationState>>)`](crate::output::CreateFleetLocationsOutput::location_states): <p>The remote locations that are being added to the fleet, and the life-cycle status of each location. For new locations, the status is set to <code>NEW</code>. During location creation, GameLift updates each location's status as instances are deployed there and prepared for game hosting. This list does not include the fleet home Region or any remote locations that were already added to the fleet.</p>
    /// - On failure, responds with [`SdkError<CreateFleetLocationsError>`](crate::error::CreateFleetLocationsError)
    pub fn create_fleet_locations(&self) -> crate::client::fluent_builders::CreateFleetLocations {
        crate::client::fluent_builders::CreateFleetLocations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateGameServerGroup`](crate::client::fluent_builders::CreateGameServerGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::CreateGameServerGroup::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::CreateGameServerGroup::set_game_server_group_name): <p>An identifier for the new game server group. This value is used to generate unique ARN identifiers for the Amazon EC2 Auto Scaling group and the GameLift FleetIQ game server group. The name must be unique per Region per Amazon Web Services account.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateGameServerGroup::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::CreateGameServerGroup::set_role_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) for an IAM role that allows Amazon GameLift to access your Amazon EC2 Auto Scaling groups.</p>
    ///   - [`min_size(i32)`](crate::client::fluent_builders::CreateGameServerGroup::min_size) / [`set_min_size(Option<i32>)`](crate::client::fluent_builders::CreateGameServerGroup::set_min_size): <p>The minimum number of instances allowed in the Amazon EC2 Auto Scaling group. During automatic scaling events, GameLift FleetIQ and Amazon EC2 do not scale down the group below this minimum. In production, this value should be set to at least 1. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the Amazon Web Services console or APIs.</p>
    ///   - [`max_size(i32)`](crate::client::fluent_builders::CreateGameServerGroup::max_size) / [`set_max_size(Option<i32>)`](crate::client::fluent_builders::CreateGameServerGroup::set_max_size): <p>The maximum number of instances allowed in the Amazon EC2 Auto Scaling group. During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the Amazon Web Services console or APIs.</p>
    ///   - [`launch_template(LaunchTemplateSpecification)`](crate::client::fluent_builders::CreateGameServerGroup::launch_template) / [`set_launch_template(Option<LaunchTemplateSpecification>)`](crate::client::fluent_builders::CreateGameServerGroup::set_launch_template): <p>The Amazon EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group. You can specify the template using either the template name or ID. For help with creating a launch template, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a Launch Template for an Auto Scaling Group</a> in the <i>Amazon Elastic Compute Cloud Auto Scaling User Guide</i>. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the Amazon Web Services console or APIs.</p> <note>   <p>If you specify network interfaces in your launch template, you must explicitly set the property <code>AssociatePublicIpAddress</code> to "true". If no network interface is specified in the launch template, GameLift FleetIQ uses your account's default VPC.</p>  </note>
    ///   - [`instance_definitions(Vec<InstanceDefinition>)`](crate::client::fluent_builders::CreateGameServerGroup::instance_definitions) / [`set_instance_definitions(Option<Vec<InstanceDefinition>>)`](crate::client::fluent_builders::CreateGameServerGroup::set_instance_definitions): <p>The Amazon EC2 instance types and sizes to use in the Auto Scaling group. The instance definitions must specify at least two different instance types that are supported by GameLift FleetIQ. For more information on instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">EC2 Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. You can optionally specify capacity weighting for each instance type. If no weight value is specified for an instance type, it is set to the default value "1". For more information about capacity weighting, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html"> Instance Weighting for Amazon EC2 Auto Scaling</a> in the Amazon EC2 Auto Scaling User Guide.</p>
    ///   - [`auto_scaling_policy(GameServerGroupAutoScalingPolicy)`](crate::client::fluent_builders::CreateGameServerGroup::auto_scaling_policy) / [`set_auto_scaling_policy(Option<GameServerGroupAutoScalingPolicy>)`](crate::client::fluent_builders::CreateGameServerGroup::set_auto_scaling_policy): <p>Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting. The scaling policy uses the metric <code>"PercentUtilizedGameServers"</code> to maintain a buffer of idle game servers that can immediately accommodate new games and players. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the Amazon Web Services console or APIs.</p>
    ///   - [`balancing_strategy(BalancingStrategy)`](crate::client::fluent_builders::CreateGameServerGroup::balancing_strategy) / [`set_balancing_strategy(Option<BalancingStrategy>)`](crate::client::fluent_builders::CreateGameServerGroup::set_balancing_strategy): <p>Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the game server group. Method options include the following:</p>  <ul>   <li> <p> <code>SPOT_ONLY</code> - Only Spot Instances are used in the game server group. If Spot Instances are unavailable or not viable for game hosting, the game server group provides no hosting capacity until Spot Instances can again be used. Until then, no new instances are started, and the existing nonviable Spot Instances are terminated (after current gameplay ends) and are not replaced.</p> </li>   <li> <p> <code>SPOT_PREFERRED</code> - (default value) Spot Instances are used whenever available in the game server group. If Spot Instances are unavailable, the game server group continues to provide hosting capacity by falling back to On-Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends) and are replaced with new On-Demand Instances.</p> </li>   <li> <p> <code>ON_DEMAND_ONLY</code> - Only On-Demand Instances are used in the game server group. No Spot Instances are used, even when available, while this balancing strategy is in force.</p> </li>  </ul>
    ///   - [`game_server_protection_policy(GameServerProtectionPolicy)`](crate::client::fluent_builders::CreateGameServerGroup::game_server_protection_policy) / [`set_game_server_protection_policy(Option<GameServerProtectionPolicy>)`](crate::client::fluent_builders::CreateGameServerGroup::set_game_server_protection_policy): <p>A flag that indicates whether instances in the game server group are protected from early termination. Unprotected instances that have active game servers running might be terminated during a scale-down event, causing players to be dropped from the game. Protected instances cannot be terminated while there are active game servers running except in the event of a forced game server group deletion (see ). An exception to this is with Spot Instances, which can be terminated by Amazon Web Services regardless of protection status. This property is set to <code>NO_PROTECTION</code> by default.</p>
    ///   - [`vpc_subnets(Vec<String>)`](crate::client::fluent_builders::CreateGameServerGroup::vpc_subnets) / [`set_vpc_subnets(Option<Vec<String>>)`](crate::client::fluent_builders::CreateGameServerGroup::set_vpc_subnets): <p>A list of virtual private cloud (VPC) subnets to use with instances in the game server group. By default, all GameLift FleetIQ-supported Availability Zones are used. You can use this parameter to specify VPCs that you've set up. This property cannot be updated after the game server group is created, and the corresponding Auto Scaling group will always use the property value that is set with this request, even if the Auto Scaling group is updated directly.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateGameServerGroup::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateGameServerGroup::set_tags): <p>A list of labels to assign to the new game server group resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources is useful for resource management, access management, and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// - On success, responds with [`CreateGameServerGroupOutput`](crate::output::CreateGameServerGroupOutput) with field(s):
    ///   - [`game_server_group(Option<GameServerGroup>)`](crate::output::CreateGameServerGroupOutput::game_server_group): <p>The newly created game server group object, including the new ARN value for the GameLift FleetIQ game server group and the object's status. The Amazon EC2 Auto Scaling group ARN is initially null, since the group has not yet been created. This value is added once the game server group status reaches <code>ACTIVE</code>. </p>
    /// - On failure, responds with [`SdkError<CreateGameServerGroupError>`](crate::error::CreateGameServerGroupError)
    pub fn create_game_server_group(
        &self,
    ) -> crate::client::fluent_builders::CreateGameServerGroup {
        crate::client::fluent_builders::CreateGameServerGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateGameSession`](crate::client::fluent_builders::CreateGameSession) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::CreateGameSession::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::CreateGameSession::set_fleet_id): <p>A unique identifier for the fleet to create a game session in. You can use either the fleet ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.</p>
    ///   - [`alias_id(impl Into<String>)`](crate::client::fluent_builders::CreateGameSession::alias_id) / [`set_alias_id(Option<String>)`](crate::client::fluent_builders::CreateGameSession::set_alias_id): <p>A unique identifier for the alias associated with the fleet to create a game session in. You can use either the alias ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.</p>
    ///   - [`maximum_player_session_count(i32)`](crate::client::fluent_builders::CreateGameSession::maximum_player_session_count) / [`set_maximum_player_session_count(Option<i32>)`](crate::client::fluent_builders::CreateGameSession::set_maximum_player_session_count): <p>The maximum number of players that can be connected simultaneously to the game session.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateGameSession::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateGameSession::set_name): <p>A descriptive label that is associated with a game session. Session names do not need to be unique.</p>
    ///   - [`game_properties(Vec<GameProperty>)`](crate::client::fluent_builders::CreateGameSession::game_properties) / [`set_game_properties(Option<Vec<GameProperty>>)`](crate::client::fluent_builders::CreateGameSession::set_game_properties): <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).</p>
    ///   - [`creator_id(impl Into<String>)`](crate::client::fluent_builders::CreateGameSession::creator_id) / [`set_creator_id(Option<String>)`](crate::client::fluent_builders::CreateGameSession::set_creator_id): <p>A unique identifier for a player or entity creating the game session. This parameter is required when requesting a new game session on a fleet with a resource creation limit policy. This type of policy limits the number of concurrent active game sessions that one player can create within a certain time span. GameLift uses the CreatorId to evaluate the new request against the policy.</p>
    ///   - [`game_session_id(impl Into<String>)`](crate::client::fluent_builders::CreateGameSession::game_session_id) / [`set_game_session_id(Option<String>)`](crate::client::fluent_builders::CreateGameSession::set_game_session_id): <p> <i>This parameter is deprecated. Use <code>IdempotencyToken</code> instead.</i> </p>  <p>Custom string that uniquely identifies a request for a new game session. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID.</p>
    ///   - [`idempotency_token(impl Into<String>)`](crate::client::fluent_builders::CreateGameSession::idempotency_token) / [`set_idempotency_token(Option<String>)`](crate::client::fluent_builders::CreateGameSession::set_idempotency_token): <p>Custom string that uniquely identifies the new game session request. This is useful for ensuring that game session requests with the same idempotency token are processed only once. Subsequent requests with the same string return the original <code>GameSession</code> object, with an updated status. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID. A game session ARN has the following format: <code>arn:aws:gamelift:   <region>    ::gamesession/    <fleet id>     /     <custom id string or idempotency token></custom>    </fleet>   </region></code>. Idempotency tokens remain in use for 30 days after a game session has ended; game session objects are retained for this time period and then deleted.</p>
    ///   - [`game_session_data(impl Into<String>)`](crate::client::fluent_builders::CreateGameSession::game_session_data) / [`set_game_session_data(Option<String>)`](crate::client::fluent_builders::CreateGameSession::set_game_session_data): <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::CreateGameSession::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::CreateGameSession::set_location): <p>A fleet's remote location to place the new game session in. If this parameter is not set, the new game session is placed in the fleet's home Region. Specify a remote location with an Amazon Web Services Region code such as <code>us-west-2</code>. </p>
    /// - On success, responds with [`CreateGameSessionOutput`](crate::output::CreateGameSessionOutput) with field(s):
    ///   - [`game_session(Option<GameSession>)`](crate::output::CreateGameSessionOutput::game_session): <p>Object that describes the newly created game session record.</p>
    /// - On failure, responds with [`SdkError<CreateGameSessionError>`](crate::error::CreateGameSessionError)
    pub fn create_game_session(&self) -> crate::client::fluent_builders::CreateGameSession {
        crate::client::fluent_builders::CreateGameSession::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateGameSessionQueue`](crate::client::fluent_builders::CreateGameSessionQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateGameSessionQueue::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_name): <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region.</p>
    ///   - [`timeout_in_seconds(i32)`](crate::client::fluent_builders::CreateGameSessionQueue::timeout_in_seconds) / [`set_timeout_in_seconds(Option<i32>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_timeout_in_seconds): <p>The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.</p>
    ///   - [`player_latency_policies(Vec<PlayerLatencyPolicy>)`](crate::client::fluent_builders::CreateGameSessionQueue::player_latency_policies) / [`set_player_latency_policies(Option<Vec<PlayerLatencyPolicy>>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_player_latency_policies): <p>A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value.</p>
    ///   - [`destinations(Vec<GameSessionQueueDestination>)`](crate::client::fluent_builders::CreateGameSessionQueue::destinations) / [`set_destinations(Option<Vec<GameSessionQueueDestination>>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_destinations): <p>A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.</p>
    ///   - [`filter_configuration(FilterConfiguration)`](crate::client::fluent_builders::CreateGameSessionQueue::filter_configuration) / [`set_filter_configuration(Option<FilterConfiguration>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_filter_configuration): <p>A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as <code>us-west-2</code>. If this parameter is not set, game sessions can be placed in any queue location. </p>
    ///   - [`priority_configuration(PriorityConfiguration)`](crate::client::fluent_builders::CreateGameSessionQueue::priority_configuration) / [`set_priority_configuration(Option<PriorityConfiguration>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_priority_configuration): <p>Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process. </p>
    ///   - [`custom_event_data(impl Into<String>)`](crate::client::fluent_builders::CreateGameSessionQueue::custom_event_data) / [`set_custom_event_data(Option<String>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_custom_event_data): <p>Information to be added to all events that are related to this game session queue.</p>
    ///   - [`notification_target(impl Into<String>)`](crate::client::fluent_builders::CreateGameSessionQueue::notification_target) / [`set_notification_target(Option<String>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_notification_target): <p>An SNS topic ARN that is set up to receive game session placement notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html"> Setting up notifications for game session placement</a>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateGameSessionQueue::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_tags): <p>A list of labels to assign to the new game session queue resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// - On success, responds with [`CreateGameSessionQueueOutput`](crate::output::CreateGameSessionQueueOutput) with field(s):
    ///   - [`game_session_queue(Option<GameSessionQueue>)`](crate::output::CreateGameSessionQueueOutput::game_session_queue): <p>An object that describes the newly created game session queue.</p>
    /// - On failure, responds with [`SdkError<CreateGameSessionQueueError>`](crate::error::CreateGameSessionQueueError)
    pub fn create_game_session_queue(
        &self,
    ) -> crate::client::fluent_builders::CreateGameSessionQueue {
        crate::client::fluent_builders::CreateGameSessionQueue::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLocation`](crate::client::fluent_builders::CreateLocation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`location_name(impl Into<String>)`](crate::client::fluent_builders::CreateLocation::location_name) / [`set_location_name(Option<String>)`](crate::client::fluent_builders::CreateLocation::set_location_name): <p>A descriptive name for the custom location.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateLocation::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateLocation::set_tags): <p>A list of labels to assign to the new matchmaking configuration resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Rareference</i>.</p>
    /// - On success, responds with [`CreateLocationOutput`](crate::output::CreateLocationOutput) with field(s):
    ///   - [`location(Option<LocationModel>)`](crate::output::CreateLocationOutput::location): <p>The details of the custom location you created.</p>
    /// - On failure, responds with [`SdkError<CreateLocationError>`](crate::error::CreateLocationError)
    pub fn create_location(&self) -> crate::client::fluent_builders::CreateLocation {
        crate::client::fluent_builders::CreateLocation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateMatchmakingConfiguration`](crate::client::fluent_builders::CreateMatchmakingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_name): <p>A unique identifier for the matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_description): <p>A human-readable description of the matchmaking configuration. </p>
    ///   - [`game_session_queue_arns(Vec<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::game_session_queue_arns) / [`set_game_session_queue_arns(Option<Vec<String>>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_game_session_queue_arns): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::gamesessionqueue/    <queue name></queue>   </region></code>. Queues can be located in any Region. Queues are used to start new GameLift-hosted game sessions for matches that are created with this matchmaking configuration. If <code>FlexMatchMode</code> is set to <code>STANDALONE</code>, do not set this parameter. </p>
    ///   - [`request_timeout_seconds(i32)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::request_timeout_seconds) / [`set_request_timeout_seconds(Option<i32>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_request_timeout_seconds): <p>The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.</p>
    ///   - [`acceptance_timeout_seconds(i32)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::acceptance_timeout_seconds) / [`set_acceptance_timeout_seconds(Option<i32>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_acceptance_timeout_seconds): <p>The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required. </p>
    ///   - [`acceptance_required(bool)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::acceptance_required) / [`set_acceptance_required(Option<bool>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_acceptance_required): <p>A flag that determines whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to <code>TRUE</code>. With this option enabled, matchmaking tickets use the status <code>REQUIRES_ACCEPTANCE</code> to indicate when a completed potential match is waiting for player acceptance. </p>
    ///   - [`rule_set_name(impl Into<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::rule_set_name) / [`set_rule_set_name(Option<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_rule_set_name): <p>A unique identifier for the matchmaking rule set to use with this configuration. You can use either the rule set name or ARN value. A matchmaking configuration can only use rule sets that are defined in the same Region.</p>
    ///   - [`notification_target(impl Into<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::notification_target) / [`set_notification_target(Option<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_notification_target): <p>An SNS topic ARN that is set up to receive matchmaking notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html"> Setting up notifications for matchmaking</a> for more information.</p>
    ///   - [`additional_player_count(i32)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::additional_player_count) / [`set_additional_player_count(Option<i32>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_additional_player_count): <p>The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used if <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    ///   - [`custom_event_data(impl Into<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::custom_event_data) / [`set_custom_event_data(Option<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_custom_event_data): <p>Information to be added to all events related to this matchmaking configuration. </p>
    ///   - [`game_properties(Vec<GameProperty>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::game_properties) / [`set_game_properties(Option<Vec<GameProperty>>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_game_properties): <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <code>GameSession</code> object that is created for a successful match. This parameter is not used if <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    ///   - [`game_session_data(impl Into<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::game_session_data) / [`set_game_session_data(Option<String>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_game_session_data): <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <code>GameSession</code> object that is created for a successful match. This parameter is not used if <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    ///   - [`backfill_mode(BackfillMode)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::backfill_mode) / [`set_backfill_mode(Option<BackfillMode>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_backfill_mode): <p>The method used to backfill game sessions that are created with this matchmaking configuration. Specify <code>MANUAL</code> when your game manages backfill requests manually or does not use the match backfill feature. Specify <code>AUTOMATIC</code> to have GameLift create a backfill request whenever a game session has one or more open slots. Learn more about manual and automatic backfill in <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html"> Backfill Existing Games with FlexMatch</a>. Automatic backfill is not available when <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    ///   - [`flex_match_mode(FlexMatchMode)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::flex_match_mode) / [`set_flex_match_mode(Option<FlexMatchMode>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_flex_match_mode): <p>Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution. </p>  <ul>   <li> <p> <b>STANDALONE</b> - FlexMatch forms matches and returns match information, including players and team assignments, in a <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded"> MatchmakingSucceeded</a> event.</p> </li>   <li> <p> <b>WITH_QUEUE</b> - FlexMatch forms matches and uses the specified GameLift queue to start a game session for the match. </p> </li>  </ul>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateMatchmakingConfiguration::set_tags): <p>A list of labels to assign to the new matchmaking configuration resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// - On success, responds with [`CreateMatchmakingConfigurationOutput`](crate::output::CreateMatchmakingConfigurationOutput) with field(s):
    ///   - [`configuration(Option<MatchmakingConfiguration>)`](crate::output::CreateMatchmakingConfigurationOutput::configuration): <p>Object that describes the newly created matchmaking configuration.</p>
    /// - On failure, responds with [`SdkError<CreateMatchmakingConfigurationError>`](crate::error::CreateMatchmakingConfigurationError)
    pub fn create_matchmaking_configuration(
        &self,
    ) -> crate::client::fluent_builders::CreateMatchmakingConfiguration {
        crate::client::fluent_builders::CreateMatchmakingConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateMatchmakingRuleSet`](crate::client::fluent_builders::CreateMatchmakingRuleSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateMatchmakingRuleSet::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateMatchmakingRuleSet::set_name): <p>A unique identifier for the matchmaking rule set. A matchmaking configuration identifies the rule set it uses by this name value. Note that the rule set name is different from the optional <code>name</code> field in the rule set body.</p>
    ///   - [`rule_set_body(impl Into<String>)`](crate::client::fluent_builders::CreateMatchmakingRuleSet::rule_set_body) / [`set_rule_set_body(Option<String>)`](crate::client::fluent_builders::CreateMatchmakingRuleSet::set_rule_set_body): <p>A collection of matchmaking rules, formatted as a JSON string. Comments are not allowed in JSON, but most elements support a description field.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateMatchmakingRuleSet::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateMatchmakingRuleSet::set_tags): <p>A list of labels to assign to the new matchmaking rule set resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// - On success, responds with [`CreateMatchmakingRuleSetOutput`](crate::output::CreateMatchmakingRuleSetOutput) with field(s):
    ///   - [`rule_set(Option<MatchmakingRuleSet>)`](crate::output::CreateMatchmakingRuleSetOutput::rule_set): <p>The newly created matchmaking rule set.</p>
    /// - On failure, responds with [`SdkError<CreateMatchmakingRuleSetError>`](crate::error::CreateMatchmakingRuleSetError)
    pub fn create_matchmaking_rule_set(
        &self,
    ) -> crate::client::fluent_builders::CreateMatchmakingRuleSet {
        crate::client::fluent_builders::CreateMatchmakingRuleSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreatePlayerSession`](crate::client::fluent_builders::CreatePlayerSession) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_session_id(impl Into<String>)`](crate::client::fluent_builders::CreatePlayerSession::game_session_id) / [`set_game_session_id(Option<String>)`](crate::client::fluent_builders::CreatePlayerSession::set_game_session_id): <p>A unique identifier for the game session to add a player to.</p>
    ///   - [`player_id(impl Into<String>)`](crate::client::fluent_builders::CreatePlayerSession::player_id) / [`set_player_id(Option<String>)`](crate::client::fluent_builders::CreatePlayerSession::set_player_id): <p>A unique identifier for a player. Player IDs are developer-defined.</p>
    ///   - [`player_data(impl Into<String>)`](crate::client::fluent_builders::CreatePlayerSession::player_data) / [`set_player_data(Option<String>)`](crate::client::fluent_builders::CreatePlayerSession::set_player_data): <p>Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.</p>
    /// - On success, responds with [`CreatePlayerSessionOutput`](crate::output::CreatePlayerSessionOutput) with field(s):
    ///   - [`player_session(Option<PlayerSession>)`](crate::output::CreatePlayerSessionOutput::player_session): <p>Object that describes the newly created player session record.</p>
    /// - On failure, responds with [`SdkError<CreatePlayerSessionError>`](crate::error::CreatePlayerSessionError)
    pub fn create_player_session(&self) -> crate::client::fluent_builders::CreatePlayerSession {
        crate::client::fluent_builders::CreatePlayerSession::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreatePlayerSessions`](crate::client::fluent_builders::CreatePlayerSessions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_session_id(impl Into<String>)`](crate::client::fluent_builders::CreatePlayerSessions::game_session_id) / [`set_game_session_id(Option<String>)`](crate::client::fluent_builders::CreatePlayerSessions::set_game_session_id): <p>A unique identifier for the game session to add players to.</p>
    ///   - [`player_ids(Vec<String>)`](crate::client::fluent_builders::CreatePlayerSessions::player_ids) / [`set_player_ids(Option<Vec<String>>)`](crate::client::fluent_builders::CreatePlayerSessions::set_player_ids): <p>List of unique identifiers for the players to be added.</p>
    ///   - [`player_data_map(HashMap<String, String>)`](crate::client::fluent_builders::CreatePlayerSessions::player_data_map) / [`set_player_data_map(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreatePlayerSessions::set_player_data_map): <p>Map of string pairs, each specifying a player ID and a set of developer-defined information related to the player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. Any player data strings for player IDs that are not included in the <code>PlayerIds</code> parameter are ignored. </p>
    /// - On success, responds with [`CreatePlayerSessionsOutput`](crate::output::CreatePlayerSessionsOutput) with field(s):
    ///   - [`player_sessions(Option<Vec<PlayerSession>>)`](crate::output::CreatePlayerSessionsOutput::player_sessions): <p>A collection of player session objects created for the added players.</p>
    /// - On failure, responds with [`SdkError<CreatePlayerSessionsError>`](crate::error::CreatePlayerSessionsError)
    pub fn create_player_sessions(&self) -> crate::client::fluent_builders::CreatePlayerSessions {
        crate::client::fluent_builders::CreatePlayerSessions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateScript`](crate::client::fluent_builders::CreateScript) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateScript::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateScript::set_name): <p>A descriptive label that is associated with a script. Script names do not need to be unique. You can use <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateScript.html">UpdateScript</a> to change this value later. </p>
    ///   - [`version(impl Into<String>)`](crate::client::fluent_builders::CreateScript::version) / [`set_version(Option<String>)`](crate::client::fluent_builders::CreateScript::set_version): <p>Version information associated with a build or script. Version strings do not need to be unique. You can use <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateScript.html">UpdateScript</a> to change this value later. </p>
    ///   - [`storage_location(S3Location)`](crate::client::fluent_builders::CreateScript::storage_location) / [`set_storage_location(Option<S3Location>)`](crate::client::fluent_builders::CreateScript::set_storage_location): <p>The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the <code>ObjectVersion</code> parameter to specify an earlier version. </p>
    ///   - [`zip_file(Blob)`](crate::client::fluent_builders::CreateScript::zip_file) / [`set_zip_file(Option<Blob>)`](crate::client::fluent_builders::CreateScript::set_zip_file): <p>A data object containing your Realtime scripts and dependencies as a zip file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.</p>  <p>When using the Amazon Web Services CLI tool to create a script, this parameter is set to the zip file name. It must be prepended with the string "fileb://" to indicate that the file data is a binary object. For example: <code>--zip-file fileb://myRealtimeScript.zip</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateScript::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateScript::set_tags): <p>A list of labels to assign to the new script resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>. Once the resource is created, you can use <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_TagResource.html">TagResource</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UntagResource.html">UntagResource</a>, and <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ListTagsForResource.html">ListTagsForResource</a> to add, remove, and view tags. The maximum tag limit may be lower than stated. See the Amazon Web Services General Reference for actual tagging limits.</p>
    /// - On success, responds with [`CreateScriptOutput`](crate::output::CreateScriptOutput) with field(s):
    ///   - [`script(Option<Script>)`](crate::output::CreateScriptOutput::script): <p>The newly created script record with a unique script ID and ARN. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the <i>CreateScript</i> request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.</p>
    /// - On failure, responds with [`SdkError<CreateScriptError>`](crate::error::CreateScriptError)
    pub fn create_script(&self) -> crate::client::fluent_builders::CreateScript {
        crate::client::fluent_builders::CreateScript::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateVpcPeeringAuthorization`](crate::client::fluent_builders::CreateVpcPeeringAuthorization) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_lift_aws_account_id(impl Into<String>)`](crate::client::fluent_builders::CreateVpcPeeringAuthorization::game_lift_aws_account_id) / [`set_game_lift_aws_account_id(Option<String>)`](crate::client::fluent_builders::CreateVpcPeeringAuthorization::set_game_lift_aws_account_id): <p>A unique identifier for the Amazon Web Services account that you use to manage your GameLift fleet. You can find your Account ID in the Amazon Web Services Management Console under account settings.</p>
    ///   - [`peer_vpc_id(impl Into<String>)`](crate::client::fluent_builders::CreateVpcPeeringAuthorization::peer_vpc_id) / [`set_peer_vpc_id(Option<String>)`](crate::client::fluent_builders::CreateVpcPeeringAuthorization::set_peer_vpc_id): <p>A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the <a href="https://console.aws.amazon.com/vpc/">VPC Dashboard</a> in the Amazon Web Services Management Console. Learn more about VPC peering in <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with GameLift Fleets</a>.</p>
    /// - On success, responds with [`CreateVpcPeeringAuthorizationOutput`](crate::output::CreateVpcPeeringAuthorizationOutput) with field(s):
    ///   - [`vpc_peering_authorization(Option<VpcPeeringAuthorization>)`](crate::output::CreateVpcPeeringAuthorizationOutput::vpc_peering_authorization): <p>Details on the requested VPC peering authorization, including expiration.</p>
    /// - On failure, responds with [`SdkError<CreateVpcPeeringAuthorizationError>`](crate::error::CreateVpcPeeringAuthorizationError)
    pub fn create_vpc_peering_authorization(
        &self,
    ) -> crate::client::fluent_builders::CreateVpcPeeringAuthorization {
        crate::client::fluent_builders::CreateVpcPeeringAuthorization::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateVpcPeeringConnection`](crate::client::fluent_builders::CreateVpcPeeringConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::CreateVpcPeeringConnection::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::CreateVpcPeeringConnection::set_fleet_id): <p>A unique identifier for the fleet. You can use either the fleet ID or ARN value. This tells Amazon GameLift which GameLift VPC to peer with. </p>
    ///   - [`peer_vpc_aws_account_id(impl Into<String>)`](crate::client::fluent_builders::CreateVpcPeeringConnection::peer_vpc_aws_account_id) / [`set_peer_vpc_aws_account_id(Option<String>)`](crate::client::fluent_builders::CreateVpcPeeringConnection::set_peer_vpc_aws_account_id): <p>A unique identifier for the Amazon Web Services account with the VPC that you want to peer your Amazon GameLift fleet with. You can find your Account ID in the Amazon Web Services Management Console under account settings.</p>
    ///   - [`peer_vpc_id(impl Into<String>)`](crate::client::fluent_builders::CreateVpcPeeringConnection::peer_vpc_id) / [`set_peer_vpc_id(Option<String>)`](crate::client::fluent_builders::CreateVpcPeeringConnection::set_peer_vpc_id): <p>A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the <a href="https://console.aws.amazon.com/vpc/">VPC Dashboard</a> in the Amazon Web Services Management Console. Learn more about VPC peering in <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with GameLift Fleets</a>.</p>
    /// - On success, responds with [`CreateVpcPeeringConnectionOutput`](crate::output::CreateVpcPeeringConnectionOutput)

    /// - On failure, responds with [`SdkError<CreateVpcPeeringConnectionError>`](crate::error::CreateVpcPeeringConnectionError)
    pub fn create_vpc_peering_connection(
        &self,
    ) -> crate::client::fluent_builders::CreateVpcPeeringConnection {
        crate::client::fluent_builders::CreateVpcPeeringConnection::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAlias`](crate::client::fluent_builders::DeleteAlias) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`alias_id(impl Into<String>)`](crate::client::fluent_builders::DeleteAlias::alias_id) / [`set_alias_id(Option<String>)`](crate::client::fluent_builders::DeleteAlias::set_alias_id): <p>A unique identifier of the alias that you want to delete. You can use either the alias ID or ARN value.</p>
    /// - On success, responds with [`DeleteAliasOutput`](crate::output::DeleteAliasOutput)

    /// - On failure, responds with [`SdkError<DeleteAliasError>`](crate::error::DeleteAliasError)
    pub fn delete_alias(&self) -> crate::client::fluent_builders::DeleteAlias {
        crate::client::fluent_builders::DeleteAlias::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteBuild`](crate::client::fluent_builders::DeleteBuild) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`build_id(impl Into<String>)`](crate::client::fluent_builders::DeleteBuild::build_id) / [`set_build_id(Option<String>)`](crate::client::fluent_builders::DeleteBuild::set_build_id): <p>A unique identifier for the build to delete. You can use either the build ID or ARN value. </p>
    /// - On success, responds with [`DeleteBuildOutput`](crate::output::DeleteBuildOutput)

    /// - On failure, responds with [`SdkError<DeleteBuildError>`](crate::error::DeleteBuildError)
    pub fn delete_build(&self) -> crate::client::fluent_builders::DeleteBuild {
        crate::client::fluent_builders::DeleteBuild::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteFleet`](crate::client::fluent_builders::DeleteFleet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DeleteFleet::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DeleteFleet::set_fleet_id): <p>A unique identifier for the fleet to be deleted. You can use either the fleet ID or ARN value.</p>
    /// - On success, responds with [`DeleteFleetOutput`](crate::output::DeleteFleetOutput)

    /// - On failure, responds with [`SdkError<DeleteFleetError>`](crate::error::DeleteFleetError)
    pub fn delete_fleet(&self) -> crate::client::fluent_builders::DeleteFleet {
        crate::client::fluent_builders::DeleteFleet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteFleetLocations`](crate::client::fluent_builders::DeleteFleetLocations) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DeleteFleetLocations::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DeleteFleetLocations::set_fleet_id): <p>A unique identifier for the fleet to delete locations for. You can use either the fleet ID or ARN value.</p>
    ///   - [`locations(Vec<String>)`](crate::client::fluent_builders::DeleteFleetLocations::locations) / [`set_locations(Option<Vec<String>>)`](crate::client::fluent_builders::DeleteFleetLocations::set_locations): <p>The list of fleet locations to delete. Specify locations in the form of an Amazon Web Services Region code, such as <code>us-west-2</code>.</p>
    /// - On success, responds with [`DeleteFleetLocationsOutput`](crate::output::DeleteFleetLocationsOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::DeleteFleetLocationsOutput::fleet_id): <p>A unique identifier for the fleet that location attributes are being deleted for.</p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::DeleteFleetLocationsOutput::fleet_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>.</p>
    ///   - [`location_states(Option<Vec<LocationState>>)`](crate::output::DeleteFleetLocationsOutput::location_states): <p>The remote locations that are being deleted, with each location status set to <code>DELETING</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteFleetLocationsError>`](crate::error::DeleteFleetLocationsError)
    pub fn delete_fleet_locations(&self) -> crate::client::fluent_builders::DeleteFleetLocations {
        crate::client::fluent_builders::DeleteFleetLocations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteGameServerGroup`](crate::client::fluent_builders::DeleteGameServerGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::DeleteGameServerGroup::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::DeleteGameServerGroup::set_game_server_group_name): <p>A unique identifier for the game server group. Use either the name or ARN value.</p>
    ///   - [`delete_option(GameServerGroupDeleteOption)`](crate::client::fluent_builders::DeleteGameServerGroup::delete_option) / [`set_delete_option(Option<GameServerGroupDeleteOption>)`](crate::client::fluent_builders::DeleteGameServerGroup::set_delete_option): <p>The type of delete to perform. Options include the following:</p>  <ul>   <li> <p> <code>SAFE_DELETE</code> – (default) Terminates the game server group and Amazon EC2 Auto Scaling group only when it has no game servers that are in <code>UTILIZED</code> status.</p> </li>   <li> <p> <code>FORCE_DELETE</code> – Terminates the game server group, including all active game servers regardless of their utilization status, and the Amazon EC2 Auto Scaling group. </p> </li>   <li> <p> <code>RETAIN</code> – Does a safe delete of the game server group but retains the Amazon EC2 Auto Scaling group as is.</p> </li>  </ul>
    /// - On success, responds with [`DeleteGameServerGroupOutput`](crate::output::DeleteGameServerGroupOutput) with field(s):
    ///   - [`game_server_group(Option<GameServerGroup>)`](crate::output::DeleteGameServerGroupOutput::game_server_group): <p>An object that describes the deleted game server group resource, with status updated to <code>DELETE_SCHEDULED</code>. </p>
    /// - On failure, responds with [`SdkError<DeleteGameServerGroupError>`](crate::error::DeleteGameServerGroupError)
    pub fn delete_game_server_group(
        &self,
    ) -> crate::client::fluent_builders::DeleteGameServerGroup {
        crate::client::fluent_builders::DeleteGameServerGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteGameSessionQueue`](crate::client::fluent_builders::DeleteGameSessionQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteGameSessionQueue::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteGameSessionQueue::set_name): <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region. You can use either the queue ID or ARN value. </p>
    /// - On success, responds with [`DeleteGameSessionQueueOutput`](crate::output::DeleteGameSessionQueueOutput)

    /// - On failure, responds with [`SdkError<DeleteGameSessionQueueError>`](crate::error::DeleteGameSessionQueueError)
    pub fn delete_game_session_queue(
        &self,
    ) -> crate::client::fluent_builders::DeleteGameSessionQueue {
        crate::client::fluent_builders::DeleteGameSessionQueue::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLocation`](crate::client::fluent_builders::DeleteLocation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`location_name(impl Into<String>)`](crate::client::fluent_builders::DeleteLocation::location_name) / [`set_location_name(Option<String>)`](crate::client::fluent_builders::DeleteLocation::set_location_name): <p>The location name of the custom location to be deleted.</p>
    /// - On success, responds with [`DeleteLocationOutput`](crate::output::DeleteLocationOutput)

    /// - On failure, responds with [`SdkError<DeleteLocationError>`](crate::error::DeleteLocationError)
    pub fn delete_location(&self) -> crate::client::fluent_builders::DeleteLocation {
        crate::client::fluent_builders::DeleteLocation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteMatchmakingConfiguration`](crate::client::fluent_builders::DeleteMatchmakingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteMatchmakingConfiguration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteMatchmakingConfiguration::set_name): <p>A unique identifier for the matchmaking configuration. You can use either the configuration name or ARN value.</p>
    /// - On success, responds with [`DeleteMatchmakingConfigurationOutput`](crate::output::DeleteMatchmakingConfigurationOutput)

    /// - On failure, responds with [`SdkError<DeleteMatchmakingConfigurationError>`](crate::error::DeleteMatchmakingConfigurationError)
    pub fn delete_matchmaking_configuration(
        &self,
    ) -> crate::client::fluent_builders::DeleteMatchmakingConfiguration {
        crate::client::fluent_builders::DeleteMatchmakingConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteMatchmakingRuleSet`](crate::client::fluent_builders::DeleteMatchmakingRuleSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteMatchmakingRuleSet::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteMatchmakingRuleSet::set_name): <p>A unique identifier for the matchmaking rule set to be deleted. (Note: The rule set name is different from the optional "name" field in the rule set body.) You can use either the rule set name or ARN value.</p>
    /// - On success, responds with [`DeleteMatchmakingRuleSetOutput`](crate::output::DeleteMatchmakingRuleSetOutput)

    /// - On failure, responds with [`SdkError<DeleteMatchmakingRuleSetError>`](crate::error::DeleteMatchmakingRuleSetError)
    pub fn delete_matchmaking_rule_set(
        &self,
    ) -> crate::client::fluent_builders::DeleteMatchmakingRuleSet {
        crate::client::fluent_builders::DeleteMatchmakingRuleSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteScalingPolicy`](crate::client::fluent_builders::DeleteScalingPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteScalingPolicy::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteScalingPolicy::set_name): <p>A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.</p>
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DeleteScalingPolicy::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DeleteScalingPolicy::set_fleet_id): <p>A unique identifier for the fleet to be deleted. You can use either the fleet ID or ARN value.</p>
    /// - On success, responds with [`DeleteScalingPolicyOutput`](crate::output::DeleteScalingPolicyOutput)

    /// - On failure, responds with [`SdkError<DeleteScalingPolicyError>`](crate::error::DeleteScalingPolicyError)
    pub fn delete_scaling_policy(&self) -> crate::client::fluent_builders::DeleteScalingPolicy {
        crate::client::fluent_builders::DeleteScalingPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteScript`](crate::client::fluent_builders::DeleteScript) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`script_id(impl Into<String>)`](crate::client::fluent_builders::DeleteScript::script_id) / [`set_script_id(Option<String>)`](crate::client::fluent_builders::DeleteScript::set_script_id): <p>A unique identifier for the Realtime script to delete. You can use either the script ID or ARN value.</p>
    /// - On success, responds with [`DeleteScriptOutput`](crate::output::DeleteScriptOutput)

    /// - On failure, responds with [`SdkError<DeleteScriptError>`](crate::error::DeleteScriptError)
    pub fn delete_script(&self) -> crate::client::fluent_builders::DeleteScript {
        crate::client::fluent_builders::DeleteScript::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteVpcPeeringAuthorization`](crate::client::fluent_builders::DeleteVpcPeeringAuthorization) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_lift_aws_account_id(impl Into<String>)`](crate::client::fluent_builders::DeleteVpcPeeringAuthorization::game_lift_aws_account_id) / [`set_game_lift_aws_account_id(Option<String>)`](crate::client::fluent_builders::DeleteVpcPeeringAuthorization::set_game_lift_aws_account_id): <p>A unique identifier for the Amazon Web Services account that you use to manage your GameLift fleet. You can find your Account ID in the Amazon Web Services Management Console under account settings.</p>
    ///   - [`peer_vpc_id(impl Into<String>)`](crate::client::fluent_builders::DeleteVpcPeeringAuthorization::peer_vpc_id) / [`set_peer_vpc_id(Option<String>)`](crate::client::fluent_builders::DeleteVpcPeeringAuthorization::set_peer_vpc_id): <p>A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the <a href="https://console.aws.amazon.com/vpc/">VPC Dashboard</a> in the Amazon Web Services Management Console. Learn more about VPC peering in <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html">VPC Peering with GameLift Fleets</a>.</p>
    /// - On success, responds with [`DeleteVpcPeeringAuthorizationOutput`](crate::output::DeleteVpcPeeringAuthorizationOutput)

    /// - On failure, responds with [`SdkError<DeleteVpcPeeringAuthorizationError>`](crate::error::DeleteVpcPeeringAuthorizationError)
    pub fn delete_vpc_peering_authorization(
        &self,
    ) -> crate::client::fluent_builders::DeleteVpcPeeringAuthorization {
        crate::client::fluent_builders::DeleteVpcPeeringAuthorization::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteVpcPeeringConnection`](crate::client::fluent_builders::DeleteVpcPeeringConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DeleteVpcPeeringConnection::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DeleteVpcPeeringConnection::set_fleet_id): <p>A unique identifier for the fleet. This fleet specified must match the fleet referenced in the VPC peering connection record. You can use either the fleet ID or ARN value.</p>
    ///   - [`vpc_peering_connection_id(impl Into<String>)`](crate::client::fluent_builders::DeleteVpcPeeringConnection::vpc_peering_connection_id) / [`set_vpc_peering_connection_id(Option<String>)`](crate::client::fluent_builders::DeleteVpcPeeringConnection::set_vpc_peering_connection_id): <p>A unique identifier for a VPC peering connection.</p>
    /// - On success, responds with [`DeleteVpcPeeringConnectionOutput`](crate::output::DeleteVpcPeeringConnectionOutput)

    /// - On failure, responds with [`SdkError<DeleteVpcPeeringConnectionError>`](crate::error::DeleteVpcPeeringConnectionError)
    pub fn delete_vpc_peering_connection(
        &self,
    ) -> crate::client::fluent_builders::DeleteVpcPeeringConnection {
        crate::client::fluent_builders::DeleteVpcPeeringConnection::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeregisterCompute`](crate::client::fluent_builders::DeregisterCompute) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DeregisterCompute::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DeregisterCompute::set_fleet_id): <p>&gt;A unique identifier for the fleet the compute resource is registered to.</p>
    ///   - [`compute_name(impl Into<String>)`](crate::client::fluent_builders::DeregisterCompute::compute_name) / [`set_compute_name(Option<String>)`](crate::client::fluent_builders::DeregisterCompute::set_compute_name): <p>The name of the compute resource you want to delete.</p>
    /// - On success, responds with [`DeregisterComputeOutput`](crate::output::DeregisterComputeOutput)

    /// - On failure, responds with [`SdkError<DeregisterComputeError>`](crate::error::DeregisterComputeError)
    pub fn deregister_compute(&self) -> crate::client::fluent_builders::DeregisterCompute {
        crate::client::fluent_builders::DeregisterCompute::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeregisterGameServer`](crate::client::fluent_builders::DeregisterGameServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::DeregisterGameServer::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::DeregisterGameServer::set_game_server_group_name): <p>A unique identifier for the game server group where the game server is running.</p>
    ///   - [`game_server_id(impl Into<String>)`](crate::client::fluent_builders::DeregisterGameServer::game_server_id) / [`set_game_server_id(Option<String>)`](crate::client::fluent_builders::DeregisterGameServer::set_game_server_id): <p>A custom string that uniquely identifies the game server to deregister.</p>
    /// - On success, responds with [`DeregisterGameServerOutput`](crate::output::DeregisterGameServerOutput)

    /// - On failure, responds with [`SdkError<DeregisterGameServerError>`](crate::error::DeregisterGameServerError)
    pub fn deregister_game_server(&self) -> crate::client::fluent_builders::DeregisterGameServer {
        crate::client::fluent_builders::DeregisterGameServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeAlias`](crate::client::fluent_builders::DescribeAlias) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`alias_id(impl Into<String>)`](crate::client::fluent_builders::DescribeAlias::alias_id) / [`set_alias_id(Option<String>)`](crate::client::fluent_builders::DescribeAlias::set_alias_id): <p>The unique identifier for the fleet alias that you want to retrieve. You can use either the alias ID or ARN value. </p>
    /// - On success, responds with [`DescribeAliasOutput`](crate::output::DescribeAliasOutput) with field(s):
    ///   - [`alias(Option<Alias>)`](crate::output::DescribeAliasOutput::alias): <p>The requested alias resource.</p>
    /// - On failure, responds with [`SdkError<DescribeAliasError>`](crate::error::DescribeAliasError)
    pub fn describe_alias(&self) -> crate::client::fluent_builders::DescribeAlias {
        crate::client::fluent_builders::DescribeAlias::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeBuild`](crate::client::fluent_builders::DescribeBuild) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`build_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBuild::build_id) / [`set_build_id(Option<String>)`](crate::client::fluent_builders::DescribeBuild::set_build_id): <p>A unique identifier for the build to retrieve properties for. You can use either the build ID or ARN value. </p>
    /// - On success, responds with [`DescribeBuildOutput`](crate::output::DescribeBuildOutput) with field(s):
    ///   - [`build_value(Option<Build>)`](crate::output::DescribeBuildOutput::build_value): <p>Set of properties describing the requested build.</p>
    /// - On failure, responds with [`SdkError<DescribeBuildError>`](crate::error::DescribeBuildError)
    pub fn describe_build(&self) -> crate::client::fluent_builders::DescribeBuild {
        crate::client::fluent_builders::DescribeBuild::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeCompute`](crate::client::fluent_builders::DescribeCompute) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DescribeCompute::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DescribeCompute::set_fleet_id): <p>A unique identifier for the fleet the compute is registered to.</p>
    ///   - [`compute_name(impl Into<String>)`](crate::client::fluent_builders::DescribeCompute::compute_name) / [`set_compute_name(Option<String>)`](crate::client::fluent_builders::DescribeCompute::set_compute_name): <p>A descriptive label that is associated with the compute resource registered to your fleet.</p>
    /// - On success, responds with [`DescribeComputeOutput`](crate::output::DescribeComputeOutput) with field(s):
    ///   - [`compute(Option<Compute>)`](crate::output::DescribeComputeOutput::compute): <p>The details of the compute resource you registered to the specified fleet.</p>
    /// - On failure, responds with [`SdkError<DescribeComputeError>`](crate::error::DescribeComputeError)
    pub fn describe_compute(&self) -> crate::client::fluent_builders::DescribeCompute {
        crate::client::fluent_builders::DescribeCompute::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeEC2InstanceLimits`](crate::client::fluent_builders::DescribeEC2InstanceLimits) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ec2_instance_type(Ec2InstanceType)`](crate::client::fluent_builders::DescribeEC2InstanceLimits::ec2_instance_type) / [`set_ec2_instance_type(Option<Ec2InstanceType>)`](crate::client::fluent_builders::DescribeEC2InstanceLimits::set_ec2_instance_type): <p>Name of an Amazon EC2 instance type that is supported in GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Do not specify a value for this parameter to retrieve limits for all instance types.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::DescribeEC2InstanceLimits::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::DescribeEC2InstanceLimits::set_location): <p>The name of a remote location to request instance limits for, in the form of an Amazon Web Services Region code such as <code>us-west-2</code>.</p>
    /// - On success, responds with [`DescribeEc2InstanceLimitsOutput`](crate::output::DescribeEc2InstanceLimitsOutput) with field(s):
    ///   - [`ec2_instance_limits(Option<Vec<Ec2InstanceLimit>>)`](crate::output::DescribeEc2InstanceLimitsOutput::ec2_instance_limits): <p>The maximum number of instances for the specified instance type.</p>
    /// - On failure, responds with [`SdkError<DescribeEC2InstanceLimitsError>`](crate::error::DescribeEC2InstanceLimitsError)
    pub fn describe_ec2_instance_limits(
        &self,
    ) -> crate::client::fluent_builders::DescribeEC2InstanceLimits {
        crate::client::fluent_builders::DescribeEC2InstanceLimits::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeFleetAttributes`](crate::client::fluent_builders::DescribeFleetAttributes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeFleetAttributes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_ids(Vec<String>)`](crate::client::fluent_builders::DescribeFleetAttributes::fleet_ids) / [`set_fleet_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeFleetAttributes::set_fleet_ids): <p>A list of unique fleet identifiers to retrieve attributes for. You can use either the fleet ID or ARN value. To retrieve attributes for all current fleets, do not include this parameter. </p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeFleetAttributes::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeFleetAttributes::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetAttributes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeFleetAttributes::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.</p>
    /// - On success, responds with [`DescribeFleetAttributesOutput`](crate::output::DescribeFleetAttributesOutput) with field(s):
    ///   - [`fleet_attributes(Option<Vec<FleetAttributes>>)`](crate::output::DescribeFleetAttributesOutput::fleet_attributes): <p>A collection of objects containing attribute metadata for each requested fleet ID. Attribute objects are returned only for fleets that currently exist.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeFleetAttributesOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeFleetAttributesError>`](crate::error::DescribeFleetAttributesError)
    pub fn describe_fleet_attributes(
        &self,
    ) -> crate::client::fluent_builders::DescribeFleetAttributes {
        crate::client::fluent_builders::DescribeFleetAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeFleetCapacity`](crate::client::fluent_builders::DescribeFleetCapacity) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeFleetCapacity::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_ids(Vec<String>)`](crate::client::fluent_builders::DescribeFleetCapacity::fleet_ids) / [`set_fleet_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeFleetCapacity::set_fleet_ids): <p>A unique identifier for the fleet to retrieve capacity information for. You can use either the fleet ID or ARN value. Leave this parameter empty to retrieve capacity information for all fleets.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeFleetCapacity::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeFleetCapacity::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetCapacity::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeFleetCapacity::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.</p>
    /// - On success, responds with [`DescribeFleetCapacityOutput`](crate::output::DescribeFleetCapacityOutput) with field(s):
    ///   - [`fleet_capacity(Option<Vec<FleetCapacity>>)`](crate::output::DescribeFleetCapacityOutput::fleet_capacity): <p>A collection of objects that contains capacity information for each requested fleet ID. Capacity objects are returned only for fleets that currently exist.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeFleetCapacityOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeFleetCapacityError>`](crate::error::DescribeFleetCapacityError)
    pub fn describe_fleet_capacity(&self) -> crate::client::fluent_builders::DescribeFleetCapacity {
        crate::client::fluent_builders::DescribeFleetCapacity::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeFleetEvents`](crate::client::fluent_builders::DescribeFleetEvents) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeFleetEvents::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetEvents::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DescribeFleetEvents::set_fleet_id): <p>A unique identifier for the fleet to get event logs for. You can use either the fleet ID or ARN value.</p>
    ///   - [`start_time(DateTime)`](crate::client::fluent_builders::DescribeFleetEvents::start_time) / [`set_start_time(Option<DateTime>)`](crate::client::fluent_builders::DescribeFleetEvents::set_start_time): <p>The earliest date to retrieve event logs for. If no start time is specified, this call returns entries starting from when the fleet was created to the specified end time. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").</p>
    ///   - [`end_time(DateTime)`](crate::client::fluent_builders::DescribeFleetEvents::end_time) / [`set_end_time(Option<DateTime>)`](crate::client::fluent_builders::DescribeFleetEvents::set_end_time): <p>The most recent date to retrieve event logs for. If no end time is specified, this call returns entries from the specified start time up to the present. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeFleetEvents::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeFleetEvents::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetEvents::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeFleetEvents::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`DescribeFleetEventsOutput`](crate::output::DescribeFleetEventsOutput) with field(s):
    ///   - [`events(Option<Vec<Event>>)`](crate::output::DescribeFleetEventsOutput::events): <p>A collection of objects containing event log entries for the specified fleet.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeFleetEventsOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeFleetEventsError>`](crate::error::DescribeFleetEventsError)
    pub fn describe_fleet_events(&self) -> crate::client::fluent_builders::DescribeFleetEvents {
        crate::client::fluent_builders::DescribeFleetEvents::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeFleetLocationAttributes`](crate::client::fluent_builders::DescribeFleetLocationAttributes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeFleetLocationAttributes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetLocationAttributes::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DescribeFleetLocationAttributes::set_fleet_id): <p>A unique identifier for the fleet to retrieve remote locations for. You can use either the fleet ID or ARN value.</p>
    ///   - [`locations(Vec<String>)`](crate::client::fluent_builders::DescribeFleetLocationAttributes::locations) / [`set_locations(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeFleetLocationAttributes::set_locations): <p>A list of fleet locations to retrieve information for. Specify locations in the form of an Amazon Web Services Region code, such as <code>us-west-2</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeFleetLocationAttributes::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeFleetLocationAttributes::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This limit is not currently enforced.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetLocationAttributes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeFleetLocationAttributes::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`DescribeFleetLocationAttributesOutput`](crate::output::DescribeFleetLocationAttributesOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::DescribeFleetLocationAttributesOutput::fleet_id): <p>A unique identifier for the fleet that location attributes were requested for.</p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::DescribeFleetLocationAttributesOutput::fleet_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>.</p>
    ///   - [`location_attributes(Option<Vec<LocationAttributes>>)`](crate::output::DescribeFleetLocationAttributesOutput::location_attributes): <p> Location-specific information on the requested fleet's remote locations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeFleetLocationAttributesOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeFleetLocationAttributesError>`](crate::error::DescribeFleetLocationAttributesError)
    pub fn describe_fleet_location_attributes(
        &self,
    ) -> crate::client::fluent_builders::DescribeFleetLocationAttributes {
        crate::client::fluent_builders::DescribeFleetLocationAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeFleetLocationCapacity`](crate::client::fluent_builders::DescribeFleetLocationCapacity) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetLocationCapacity::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DescribeFleetLocationCapacity::set_fleet_id): <p>A unique identifier for the fleet to request location capacity for. You can use either the fleet ID or ARN value.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetLocationCapacity::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::DescribeFleetLocationCapacity::set_location): <p>The fleet location to retrieve capacity information for. Specify a location in the form of an Amazon Web Services Region code, such as <code>us-west-2</code>.</p>
    /// - On success, responds with [`DescribeFleetLocationCapacityOutput`](crate::output::DescribeFleetLocationCapacityOutput) with field(s):
    ///   - [`fleet_capacity(Option<FleetCapacity>)`](crate::output::DescribeFleetLocationCapacityOutput::fleet_capacity): <p>Resource capacity information for the requested fleet location. Capacity objects are returned only for fleets and locations that currently exist.</p>
    /// - On failure, responds with [`SdkError<DescribeFleetLocationCapacityError>`](crate::error::DescribeFleetLocationCapacityError)
    pub fn describe_fleet_location_capacity(
        &self,
    ) -> crate::client::fluent_builders::DescribeFleetLocationCapacity {
        crate::client::fluent_builders::DescribeFleetLocationCapacity::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeFleetLocationUtilization`](crate::client::fluent_builders::DescribeFleetLocationUtilization) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetLocationUtilization::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DescribeFleetLocationUtilization::set_fleet_id): <p>A unique identifier for the fleet to request location utilization for. You can use either the fleet ID or ARN value.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetLocationUtilization::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::DescribeFleetLocationUtilization::set_location): <p>The fleet location to retrieve utilization information for. Specify a location in the form of an Amazon Web Services Region code, such as <code>us-west-2</code>.</p>
    /// - On success, responds with [`DescribeFleetLocationUtilizationOutput`](crate::output::DescribeFleetLocationUtilizationOutput) with field(s):
    ///   - [`fleet_utilization(Option<FleetUtilization>)`](crate::output::DescribeFleetLocationUtilizationOutput::fleet_utilization): <p>Utilization information for the requested fleet location. Utilization objects are returned only for fleets and locations that currently exist.</p>
    /// - On failure, responds with [`SdkError<DescribeFleetLocationUtilizationError>`](crate::error::DescribeFleetLocationUtilizationError)
    pub fn describe_fleet_location_utilization(
        &self,
    ) -> crate::client::fluent_builders::DescribeFleetLocationUtilization {
        crate::client::fluent_builders::DescribeFleetLocationUtilization::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeFleetPortSettings`](crate::client::fluent_builders::DescribeFleetPortSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetPortSettings::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DescribeFleetPortSettings::set_fleet_id): <p>A unique identifier for the fleet to retrieve port settings for. You can use either the fleet ID or ARN value.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetPortSettings::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::DescribeFleetPortSettings::set_location): <p>A remote location to check for status of port setting updates. Use the Amazon Web Services Region code format, such as <code>us-west-2</code>.</p>
    /// - On success, responds with [`DescribeFleetPortSettingsOutput`](crate::output::DescribeFleetPortSettingsOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::DescribeFleetPortSettingsOutput::fleet_id): <p>A unique identifier for the fleet that was requested. </p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::DescribeFleetPortSettingsOutput::fleet_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>.</p>
    ///   - [`inbound_permissions(Option<Vec<IpPermission>>)`](crate::output::DescribeFleetPortSettingsOutput::inbound_permissions): <p>The port settings for the requested fleet ID.</p>
    ///   - [`update_status(Option<LocationUpdateStatus>)`](crate::output::DescribeFleetPortSettingsOutput::update_status): <p>The current status of updates to the fleet's port settings in the requested fleet location. A status of <code>PENDING_UPDATE</code> indicates that an update was requested for the fleet but has not yet been completed for the location.</p>
    ///   - [`location(Option<String>)`](crate::output::DescribeFleetPortSettingsOutput::location): <p>The requested fleet location, expressed as an Amazon Web Services Region code, such as <code>us-west-2</code>. </p>
    /// - On failure, responds with [`SdkError<DescribeFleetPortSettingsError>`](crate::error::DescribeFleetPortSettingsError)
    pub fn describe_fleet_port_settings(
        &self,
    ) -> crate::client::fluent_builders::DescribeFleetPortSettings {
        crate::client::fluent_builders::DescribeFleetPortSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeFleetUtilization`](crate::client::fluent_builders::DescribeFleetUtilization) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeFleetUtilization::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_ids(Vec<String>)`](crate::client::fluent_builders::DescribeFleetUtilization::fleet_ids) / [`set_fleet_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeFleetUtilization::set_fleet_ids): <p>A unique identifier for the fleet to retrieve utilization data for. You can use either the fleet ID or ARN value. To retrieve attributes for all current fleets, do not include this parameter. </p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeFleetUtilization::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeFleetUtilization::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeFleetUtilization::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeFleetUtilization::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.</p>
    /// - On success, responds with [`DescribeFleetUtilizationOutput`](crate::output::DescribeFleetUtilizationOutput) with field(s):
    ///   - [`fleet_utilization(Option<Vec<FleetUtilization>>)`](crate::output::DescribeFleetUtilizationOutput::fleet_utilization): <p>A collection of objects containing utilization information for each requested fleet ID. Utilization objects are returned only for fleets that currently exist.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeFleetUtilizationOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeFleetUtilizationError>`](crate::error::DescribeFleetUtilizationError)
    pub fn describe_fleet_utilization(
        &self,
    ) -> crate::client::fluent_builders::DescribeFleetUtilization {
        crate::client::fluent_builders::DescribeFleetUtilization::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeGameServer`](crate::client::fluent_builders::DescribeGameServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::DescribeGameServer::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::DescribeGameServer::set_game_server_group_name): <p>A unique identifier for the game server group where the game server is running.</p>
    ///   - [`game_server_id(impl Into<String>)`](crate::client::fluent_builders::DescribeGameServer::game_server_id) / [`set_game_server_id(Option<String>)`](crate::client::fluent_builders::DescribeGameServer::set_game_server_id): <p>A custom string that uniquely identifies the game server information to be retrieved.</p>
    /// - On success, responds with [`DescribeGameServerOutput`](crate::output::DescribeGameServerOutput) with field(s):
    ///   - [`game_server(Option<GameServer>)`](crate::output::DescribeGameServerOutput::game_server): <p>Object that describes the requested game server.</p>
    /// - On failure, responds with [`SdkError<DescribeGameServerError>`](crate::error::DescribeGameServerError)
    pub fn describe_game_server(&self) -> crate::client::fluent_builders::DescribeGameServer {
        crate::client::fluent_builders::DescribeGameServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeGameServerGroup`](crate::client::fluent_builders::DescribeGameServerGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::DescribeGameServerGroup::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::DescribeGameServerGroup::set_game_server_group_name): <p>A unique identifier for the game server group. Use either the name or ARN value.</p>
    /// - On success, responds with [`DescribeGameServerGroupOutput`](crate::output::DescribeGameServerGroupOutput) with field(s):
    ///   - [`game_server_group(Option<GameServerGroup>)`](crate::output::DescribeGameServerGroupOutput::game_server_group): <p>An object with the property settings for the requested game server group resource. </p>
    /// - On failure, responds with [`SdkError<DescribeGameServerGroupError>`](crate::error::DescribeGameServerGroupError)
    pub fn describe_game_server_group(
        &self,
    ) -> crate::client::fluent_builders::DescribeGameServerGroup {
        crate::client::fluent_builders::DescribeGameServerGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeGameServerInstances`](crate::client::fluent_builders::DescribeGameServerInstances) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeGameServerInstances::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::DescribeGameServerInstances::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::DescribeGameServerInstances::set_game_server_group_name): <p>A unique identifier for the game server group. Use either the name or ARN value.</p>
    ///   - [`instance_ids(Vec<String>)`](crate::client::fluent_builders::DescribeGameServerInstances::instance_ids) / [`set_instance_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeGameServerInstances::set_instance_ids): <p>The Amazon EC2 instance IDs that you want to retrieve status on. Amazon EC2 instance IDs use a 17-character format, for example: <code>i-1234567890abcdef0</code>. To retrieve all instances in the game server group, leave this parameter empty. </p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeGameServerInstances::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeGameServerInstances::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeGameServerInstances::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeGameServerInstances::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`DescribeGameServerInstancesOutput`](crate::output::DescribeGameServerInstancesOutput) with field(s):
    ///   - [`game_server_instances(Option<Vec<GameServerInstance>>)`](crate::output::DescribeGameServerInstancesOutput::game_server_instances): <p>The collection of requested game server instances.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeGameServerInstancesOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeGameServerInstancesError>`](crate::error::DescribeGameServerInstancesError)
    pub fn describe_game_server_instances(
        &self,
    ) -> crate::client::fluent_builders::DescribeGameServerInstances {
        crate::client::fluent_builders::DescribeGameServerInstances::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeGameSessionDetails`](crate::client::fluent_builders::DescribeGameSessionDetails) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeGameSessionDetails::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessionDetails::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DescribeGameSessionDetails::set_fleet_id): <p>A unique identifier for the fleet to retrieve all game sessions active on the fleet. You can use either the fleet ID or ARN value.</p>
    ///   - [`game_session_id(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessionDetails::game_session_id) / [`set_game_session_id(Option<String>)`](crate::client::fluent_builders::DescribeGameSessionDetails::set_game_session_id): <p>A unique identifier for the game session to retrieve. </p>
    ///   - [`alias_id(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessionDetails::alias_id) / [`set_alias_id(Option<String>)`](crate::client::fluent_builders::DescribeGameSessionDetails::set_alias_id): <p>A unique identifier for the alias associated with the fleet to retrieve all game sessions for. You can use either the alias ID or ARN value.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessionDetails::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::DescribeGameSessionDetails::set_location): <p>A fleet location to get game session details for. You can specify a fleet's home Region or a remote location. Use the Amazon Web Services Region code format, such as <code>us-west-2</code>. </p>
    ///   - [`status_filter(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessionDetails::status_filter) / [`set_status_filter(Option<String>)`](crate::client::fluent_builders::DescribeGameSessionDetails::set_status_filter): <p>Game session status to filter results on. Possible game session statuses include <code>ACTIVE</code>, <code>TERMINATED</code>, <code>ACTIVATING</code> and <code>TERMINATING</code> (the last two are transitory). </p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeGameSessionDetails::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeGameSessionDetails::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessionDetails::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeGameSessionDetails::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`DescribeGameSessionDetailsOutput`](crate::output::DescribeGameSessionDetailsOutput) with field(s):
    ///   - [`game_session_details(Option<Vec<GameSessionDetail>>)`](crate::output::DescribeGameSessionDetailsOutput::game_session_details): <p>A collection of properties for each game session that matches the request.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeGameSessionDetailsOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeGameSessionDetailsError>`](crate::error::DescribeGameSessionDetailsError)
    pub fn describe_game_session_details(
        &self,
    ) -> crate::client::fluent_builders::DescribeGameSessionDetails {
        crate::client::fluent_builders::DescribeGameSessionDetails::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeGameSessionPlacement`](crate::client::fluent_builders::DescribeGameSessionPlacement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`placement_id(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessionPlacement::placement_id) / [`set_placement_id(Option<String>)`](crate::client::fluent_builders::DescribeGameSessionPlacement::set_placement_id): <p>A unique identifier for a game session placement to retrieve.</p>
    /// - On success, responds with [`DescribeGameSessionPlacementOutput`](crate::output::DescribeGameSessionPlacementOutput) with field(s):
    ///   - [`game_session_placement(Option<GameSessionPlacement>)`](crate::output::DescribeGameSessionPlacementOutput::game_session_placement): <p>Object that describes the requested game session placement.</p>
    /// - On failure, responds with [`SdkError<DescribeGameSessionPlacementError>`](crate::error::DescribeGameSessionPlacementError)
    pub fn describe_game_session_placement(
        &self,
    ) -> crate::client::fluent_builders::DescribeGameSessionPlacement {
        crate::client::fluent_builders::DescribeGameSessionPlacement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeGameSessionQueues`](crate::client::fluent_builders::DescribeGameSessionQueues) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeGameSessionQueues::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`names(Vec<String>)`](crate::client::fluent_builders::DescribeGameSessionQueues::names) / [`set_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeGameSessionQueues::set_names): <p>A list of queue names to retrieve information for. You can use either the queue ID or ARN value. To request settings for all queues, leave this parameter empty. </p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeGameSessionQueues::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeGameSessionQueues::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. You can request up to 50 results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessionQueues::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeGameSessionQueues::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`DescribeGameSessionQueuesOutput`](crate::output::DescribeGameSessionQueuesOutput) with field(s):
    ///   - [`game_session_queues(Option<Vec<GameSessionQueue>>)`](crate::output::DescribeGameSessionQueuesOutput::game_session_queues): <p>A collection of objects that describe the requested game session queues.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeGameSessionQueuesOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeGameSessionQueuesError>`](crate::error::DescribeGameSessionQueuesError)
    pub fn describe_game_session_queues(
        &self,
    ) -> crate::client::fluent_builders::DescribeGameSessionQueues {
        crate::client::fluent_builders::DescribeGameSessionQueues::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeGameSessions`](crate::client::fluent_builders::DescribeGameSessions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeGameSessions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessions::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DescribeGameSessions::set_fleet_id): <p>A unique identifier for the fleet to retrieve game sessions for. You can use either the fleet ID or ARN value. </p>
    ///   - [`game_session_id(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessions::game_session_id) / [`set_game_session_id(Option<String>)`](crate::client::fluent_builders::DescribeGameSessions::set_game_session_id): <p>A unique identifier for the game session to retrieve. </p>
    ///   - [`alias_id(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessions::alias_id) / [`set_alias_id(Option<String>)`](crate::client::fluent_builders::DescribeGameSessions::set_alias_id): <p>A unique identifier for the alias associated with the fleet to retrieve game sessions for. You can use either the alias ID or ARN value.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessions::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::DescribeGameSessions::set_location): <p>A fleet location to get game sessions for. You can specify a fleet's home Region or a remote location. Use the Amazon Web Services Region code format, such as <code>us-west-2</code>. </p>
    ///   - [`status_filter(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessions::status_filter) / [`set_status_filter(Option<String>)`](crate::client::fluent_builders::DescribeGameSessions::set_status_filter): <p>Game session status to filter results on. You can filter on the following states: <code>ACTIVE</code>, <code>TERMINATED</code>, <code>ACTIVATING</code>, and <code>TERMINATING</code>. The last two are transitory and used for only very brief periods of time. </p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeGameSessions::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeGameSessions::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeGameSessions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeGameSessions::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`DescribeGameSessionsOutput`](crate::output::DescribeGameSessionsOutput) with field(s):
    ///   - [`game_sessions(Option<Vec<GameSession>>)`](crate::output::DescribeGameSessionsOutput::game_sessions): <p>A collection of properties for each game session that matches the request.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeGameSessionsOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeGameSessionsError>`](crate::error::DescribeGameSessionsError)
    pub fn describe_game_sessions(&self) -> crate::client::fluent_builders::DescribeGameSessions {
        crate::client::fluent_builders::DescribeGameSessions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeInstances`](crate::client::fluent_builders::DescribeInstances) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeInstances::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DescribeInstances::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DescribeInstances::set_fleet_id): <p>A unique identifier for the fleet to retrieve instance information for. You can use either the fleet ID or ARN value.</p>
    ///   - [`instance_id(impl Into<String>)`](crate::client::fluent_builders::DescribeInstances::instance_id) / [`set_instance_id(Option<String>)`](crate::client::fluent_builders::DescribeInstances::set_instance_id): <p>A unique identifier for an instance to retrieve. Specify an instance ID or leave blank to retrieve all instances in the fleet.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeInstances::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeInstances::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeInstances::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeInstances::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::DescribeInstances::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::DescribeInstances::set_location): <p>The name of a location to retrieve instance information for, in the form of an Amazon Web Services Region code such as <code>us-west-2</code>. </p>
    /// - On success, responds with [`DescribeInstancesOutput`](crate::output::DescribeInstancesOutput) with field(s):
    ///   - [`instances(Option<Vec<Instance>>)`](crate::output::DescribeInstancesOutput::instances): <p>A collection of objects containing properties for each instance returned.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeInstancesOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeInstancesError>`](crate::error::DescribeInstancesError)
    pub fn describe_instances(&self) -> crate::client::fluent_builders::DescribeInstances {
        crate::client::fluent_builders::DescribeInstances::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeMatchmaking`](crate::client::fluent_builders::DescribeMatchmaking) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ticket_ids(Vec<String>)`](crate::client::fluent_builders::DescribeMatchmaking::ticket_ids) / [`set_ticket_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeMatchmaking::set_ticket_ids): <p>A unique identifier for a matchmaking ticket. You can include up to 10 ID values. </p>
    /// - On success, responds with [`DescribeMatchmakingOutput`](crate::output::DescribeMatchmakingOutput) with field(s):
    ///   - [`ticket_list(Option<Vec<MatchmakingTicket>>)`](crate::output::DescribeMatchmakingOutput::ticket_list): <p>A collection of existing matchmaking ticket objects matching the request.</p>
    /// - On failure, responds with [`SdkError<DescribeMatchmakingError>`](crate::error::DescribeMatchmakingError)
    pub fn describe_matchmaking(&self) -> crate::client::fluent_builders::DescribeMatchmaking {
        crate::client::fluent_builders::DescribeMatchmaking::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeMatchmakingConfigurations`](crate::client::fluent_builders::DescribeMatchmakingConfigurations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeMatchmakingConfigurations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`names(Vec<String>)`](crate::client::fluent_builders::DescribeMatchmakingConfigurations::names) / [`set_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeMatchmakingConfigurations::set_names): <p>A unique identifier for the matchmaking configuration(s) to retrieve. You can use either the configuration name or ARN value. To request all existing configurations, leave this parameter empty.</p>
    ///   - [`rule_set_name(impl Into<String>)`](crate::client::fluent_builders::DescribeMatchmakingConfigurations::rule_set_name) / [`set_rule_set_name(Option<String>)`](crate::client::fluent_builders::DescribeMatchmakingConfigurations::set_rule_set_name): <p>A unique identifier for the matchmaking rule set. You can use either the rule set name or ARN value. Use this parameter to retrieve all matchmaking configurations that use this rule set.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeMatchmakingConfigurations::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeMatchmakingConfigurations::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is limited to 10.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeMatchmakingConfigurations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeMatchmakingConfigurations::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`DescribeMatchmakingConfigurationsOutput`](crate::output::DescribeMatchmakingConfigurationsOutput) with field(s):
    ///   - [`configurations(Option<Vec<MatchmakingConfiguration>>)`](crate::output::DescribeMatchmakingConfigurationsOutput::configurations): <p>A collection of requested matchmaking configurations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeMatchmakingConfigurationsOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeMatchmakingConfigurationsError>`](crate::error::DescribeMatchmakingConfigurationsError)
    pub fn describe_matchmaking_configurations(
        &self,
    ) -> crate::client::fluent_builders::DescribeMatchmakingConfigurations {
        crate::client::fluent_builders::DescribeMatchmakingConfigurations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeMatchmakingRuleSets`](crate::client::fluent_builders::DescribeMatchmakingRuleSets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeMatchmakingRuleSets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`names(Vec<String>)`](crate::client::fluent_builders::DescribeMatchmakingRuleSets::names) / [`set_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeMatchmakingRuleSets::set_names): <p>A list of one or more matchmaking rule set names to retrieve details for. (Note: The rule set name is different from the optional "name" field in the rule set body.) You can use either the rule set name or ARN value. </p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeMatchmakingRuleSets::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeMatchmakingRuleSets::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeMatchmakingRuleSets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeMatchmakingRuleSets::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`DescribeMatchmakingRuleSetsOutput`](crate::output::DescribeMatchmakingRuleSetsOutput) with field(s):
    ///   - [`rule_sets(Option<Vec<MatchmakingRuleSet>>)`](crate::output::DescribeMatchmakingRuleSetsOutput::rule_sets): <p>A collection of requested matchmaking rule set objects. </p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeMatchmakingRuleSetsOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeMatchmakingRuleSetsError>`](crate::error::DescribeMatchmakingRuleSetsError)
    pub fn describe_matchmaking_rule_sets(
        &self,
    ) -> crate::client::fluent_builders::DescribeMatchmakingRuleSets {
        crate::client::fluent_builders::DescribeMatchmakingRuleSets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribePlayerSessions`](crate::client::fluent_builders::DescribePlayerSessions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribePlayerSessions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_session_id(impl Into<String>)`](crate::client::fluent_builders::DescribePlayerSessions::game_session_id) / [`set_game_session_id(Option<String>)`](crate::client::fluent_builders::DescribePlayerSessions::set_game_session_id): <p>A unique identifier for the game session to retrieve player sessions for.</p>
    ///   - [`player_id(impl Into<String>)`](crate::client::fluent_builders::DescribePlayerSessions::player_id) / [`set_player_id(Option<String>)`](crate::client::fluent_builders::DescribePlayerSessions::set_player_id): <p>A unique identifier for a player to retrieve player sessions for.</p>
    ///   - [`player_session_id(impl Into<String>)`](crate::client::fluent_builders::DescribePlayerSessions::player_session_id) / [`set_player_session_id(Option<String>)`](crate::client::fluent_builders::DescribePlayerSessions::set_player_session_id): <p>A unique identifier for a player session to retrieve.</p>
    ///   - [`player_session_status_filter(impl Into<String>)`](crate::client::fluent_builders::DescribePlayerSessions::player_session_status_filter) / [`set_player_session_status_filter(Option<String>)`](crate::client::fluent_builders::DescribePlayerSessions::set_player_session_status_filter): <p>Player session status to filter results on. Note that when a PlayerSessionId or PlayerId is provided in a DescribePlayerSessions request, then the PlayerSessionStatusFilter has no effect on the response.</p>  <p>Possible player session statuses include the following:</p>  <ul>   <li> <p> <b>RESERVED</b> -- The player session request has been received, but the player has not yet connected to the server process and/or been validated. </p> </li>   <li> <p> <b>ACTIVE</b> -- The player has been validated by the server process and is currently connected.</p> </li>   <li> <p> <b>COMPLETED</b> -- The player connection has been dropped.</p> </li>   <li> <p> <b>TIMEDOUT</b> -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).</p> </li>  </ul>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribePlayerSessions::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribePlayerSessions::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. If a player session ID is specified, this parameter is ignored.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribePlayerSessions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribePlayerSessions::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. If a player session ID is specified, this parameter is ignored.</p>
    /// - On success, responds with [`DescribePlayerSessionsOutput`](crate::output::DescribePlayerSessionsOutput) with field(s):
    ///   - [`player_sessions(Option<Vec<PlayerSession>>)`](crate::output::DescribePlayerSessionsOutput::player_sessions): <p>A collection of objects containing properties for each player session that matches the request.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribePlayerSessionsOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribePlayerSessionsError>`](crate::error::DescribePlayerSessionsError)
    pub fn describe_player_sessions(
        &self,
    ) -> crate::client::fluent_builders::DescribePlayerSessions {
        crate::client::fluent_builders::DescribePlayerSessions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeRuntimeConfiguration`](crate::client::fluent_builders::DescribeRuntimeConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DescribeRuntimeConfiguration::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DescribeRuntimeConfiguration::set_fleet_id): <p>A unique identifier for the fleet to get the runtime configuration for. You can use either the fleet ID or ARN value.</p>
    /// - On success, responds with [`DescribeRuntimeConfigurationOutput`](crate::output::DescribeRuntimeConfigurationOutput) with field(s):
    ///   - [`runtime_configuration(Option<RuntimeConfiguration>)`](crate::output::DescribeRuntimeConfigurationOutput::runtime_configuration): <p>Instructions that describe how server processes should be launched and maintained on each instance in the fleet.</p>
    /// - On failure, responds with [`SdkError<DescribeRuntimeConfigurationError>`](crate::error::DescribeRuntimeConfigurationError)
    pub fn describe_runtime_configuration(
        &self,
    ) -> crate::client::fluent_builders::DescribeRuntimeConfiguration {
        crate::client::fluent_builders::DescribeRuntimeConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeScalingPolicies`](crate::client::fluent_builders::DescribeScalingPolicies) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeScalingPolicies::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DescribeScalingPolicies::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DescribeScalingPolicies::set_fleet_id): <p>A unique identifier for the fleet for which to retrieve scaling policies. You can use either the fleet ID or ARN value.</p>
    ///   - [`status_filter(ScalingStatusType)`](crate::client::fluent_builders::DescribeScalingPolicies::status_filter) / [`set_status_filter(Option<ScalingStatusType>)`](crate::client::fluent_builders::DescribeScalingPolicies::set_status_filter): <p>Scaling policy status to filter results on. A scaling policy is only in force when in an <code>ACTIVE</code> status.</p>  <ul>   <li> <p> <b>ACTIVE</b> -- The scaling policy is currently in force.</p> </li>   <li> <p> <b>UPDATEREQUESTED</b> -- A request to update the scaling policy has been received.</p> </li>   <li> <p> <b>UPDATING</b> -- A change is being made to the scaling policy.</p> </li>   <li> <p> <b>DELETEREQUESTED</b> -- A request to delete the scaling policy has been received.</p> </li>   <li> <p> <b>DELETING</b> -- The scaling policy is being deleted.</p> </li>   <li> <p> <b>DELETED</b> -- The scaling policy has been deleted.</p> </li>   <li> <p> <b>ERROR</b> -- An error occurred in creating the policy. It should be removed and recreated.</p> </li>  </ul>
    ///   - [`limit(i32)`](crate::client::fluent_builders::DescribeScalingPolicies::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::DescribeScalingPolicies::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeScalingPolicies::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeScalingPolicies::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::DescribeScalingPolicies::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::DescribeScalingPolicies::set_location): <p> The fleet location. If you don't specify this value, the response contains the scaling policies of every location in the fleet. </p>
    /// - On success, responds with [`DescribeScalingPoliciesOutput`](crate::output::DescribeScalingPoliciesOutput) with field(s):
    ///   - [`scaling_policies(Option<Vec<ScalingPolicy>>)`](crate::output::DescribeScalingPoliciesOutput::scaling_policies): <p>A collection of objects containing the scaling policies matching the request.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeScalingPoliciesOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<DescribeScalingPoliciesError>`](crate::error::DescribeScalingPoliciesError)
    pub fn describe_scaling_policies(
        &self,
    ) -> crate::client::fluent_builders::DescribeScalingPolicies {
        crate::client::fluent_builders::DescribeScalingPolicies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeScript`](crate::client::fluent_builders::DescribeScript) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`script_id(impl Into<String>)`](crate::client::fluent_builders::DescribeScript::script_id) / [`set_script_id(Option<String>)`](crate::client::fluent_builders::DescribeScript::set_script_id): <p>A unique identifier for the Realtime script to retrieve properties for. You can use either the script ID or ARN value.</p>
    /// - On success, responds with [`DescribeScriptOutput`](crate::output::DescribeScriptOutput) with field(s):
    ///   - [`script(Option<Script>)`](crate::output::DescribeScriptOutput::script): <p>A set of properties describing the requested script.</p>
    /// - On failure, responds with [`SdkError<DescribeScriptError>`](crate::error::DescribeScriptError)
    pub fn describe_script(&self) -> crate::client::fluent_builders::DescribeScript {
        crate::client::fluent_builders::DescribeScript::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeVpcPeeringAuthorizations`](crate::client::fluent_builders::DescribeVpcPeeringAuthorizations) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DescribeVpcPeeringAuthorizations::send) it.

    /// - On success, responds with [`DescribeVpcPeeringAuthorizationsOutput`](crate::output::DescribeVpcPeeringAuthorizationsOutput) with field(s):
    ///   - [`vpc_peering_authorizations(Option<Vec<VpcPeeringAuthorization>>)`](crate::output::DescribeVpcPeeringAuthorizationsOutput::vpc_peering_authorizations): <p>A collection of objects that describe all valid VPC peering operations for the current Amazon Web Services account.</p>
    /// - On failure, responds with [`SdkError<DescribeVpcPeeringAuthorizationsError>`](crate::error::DescribeVpcPeeringAuthorizationsError)
    pub fn describe_vpc_peering_authorizations(
        &self,
    ) -> crate::client::fluent_builders::DescribeVpcPeeringAuthorizations {
        crate::client::fluent_builders::DescribeVpcPeeringAuthorizations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeVpcPeeringConnections`](crate::client::fluent_builders::DescribeVpcPeeringConnections) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::DescribeVpcPeeringConnections::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::DescribeVpcPeeringConnections::set_fleet_id): <p>A unique identifier for the fleet. You can use either the fleet ID or ARN value.</p>
    /// - On success, responds with [`DescribeVpcPeeringConnectionsOutput`](crate::output::DescribeVpcPeeringConnectionsOutput) with field(s):
    ///   - [`vpc_peering_connections(Option<Vec<VpcPeeringConnection>>)`](crate::output::DescribeVpcPeeringConnectionsOutput::vpc_peering_connections): <p>A collection of VPC peering connection records that match the request.</p>
    /// - On failure, responds with [`SdkError<DescribeVpcPeeringConnectionsError>`](crate::error::DescribeVpcPeeringConnectionsError)
    pub fn describe_vpc_peering_connections(
        &self,
    ) -> crate::client::fluent_builders::DescribeVpcPeeringConnections {
        crate::client::fluent_builders::DescribeVpcPeeringConnections::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetComputeAccess`](crate::client::fluent_builders::GetComputeAccess) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::GetComputeAccess::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::GetComputeAccess::set_fleet_id): <p>A unique identifier for the fleet that the compute resource is registered to.</p>
    ///   - [`compute_name(impl Into<String>)`](crate::client::fluent_builders::GetComputeAccess::compute_name) / [`set_compute_name(Option<String>)`](crate::client::fluent_builders::GetComputeAccess::set_compute_name): <p>The name of the compute resource you are requesting credentials for.</p>
    /// - On success, responds with [`GetComputeAccessOutput`](crate::output::GetComputeAccessOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::GetComputeAccessOutput::fleet_id): <p>The fleet ID of compute resource.</p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::GetComputeAccessOutput::fleet_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>.</p>
    ///   - [`compute_name(Option<String>)`](crate::output::GetComputeAccessOutput::compute_name): <p>The name of the compute resource you requested credentials for.</p>
    ///   - [`compute_arn(Option<String>)`](crate::output::GetComputeAccessOutput::compute_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift compute resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::compute/compute-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>.</p>
    ///   - [`credentials(Option<AwsCredentials>)`](crate::output::GetComputeAccessOutput::credentials): <p>The access credentials for the compute resource.</p>
    /// - On failure, responds with [`SdkError<GetComputeAccessError>`](crate::error::GetComputeAccessError)
    pub fn get_compute_access(&self) -> crate::client::fluent_builders::GetComputeAccess {
        crate::client::fluent_builders::GetComputeAccess::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetComputeAuthToken`](crate::client::fluent_builders::GetComputeAuthToken) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::GetComputeAuthToken::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::GetComputeAuthToken::set_fleet_id): <p>A unique identifier for the fleet that the compute is registered to.</p>
    ///   - [`compute_name(impl Into<String>)`](crate::client::fluent_builders::GetComputeAuthToken::compute_name) / [`set_compute_name(Option<String>)`](crate::client::fluent_builders::GetComputeAuthToken::set_compute_name): <p>The name of the compute resource you are requesting the authorization token for.</p>
    /// - On success, responds with [`GetComputeAuthTokenOutput`](crate::output::GetComputeAuthTokenOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::GetComputeAuthTokenOutput::fleet_id): <p>A unique identifier for the fleet that the compute is registered to.</p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::GetComputeAuthTokenOutput::fleet_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>.</p>
    ///   - [`compute_name(Option<String>)`](crate::output::GetComputeAuthTokenOutput::compute_name): <p>The name of the compute resource you are requesting the authorization token for.</p>
    ///   - [`compute_arn(Option<String>)`](crate::output::GetComputeAuthTokenOutput::compute_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift compute resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::compute/compute-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code> </p>
    ///   - [`auth_token(Option<String>)`](crate::output::GetComputeAuthTokenOutput::auth_token): <p>The authorization token that your game server uses to authenticate with GameLift.</p>
    ///   - [`expiration_timestamp(Option<DateTime>)`](crate::output::GetComputeAuthTokenOutput::expiration_timestamp): <p>The amount of time until the authorization token is no longer valid. To continue using the compute resource for game server hosting, renew the authorization token by using this operation again.</p>
    /// - On failure, responds with [`SdkError<GetComputeAuthTokenError>`](crate::error::GetComputeAuthTokenError)
    pub fn get_compute_auth_token(&self) -> crate::client::fluent_builders::GetComputeAuthToken {
        crate::client::fluent_builders::GetComputeAuthToken::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetGameSessionLogUrl`](crate::client::fluent_builders::GetGameSessionLogUrl) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_session_id(impl Into<String>)`](crate::client::fluent_builders::GetGameSessionLogUrl::game_session_id) / [`set_game_session_id(Option<String>)`](crate::client::fluent_builders::GetGameSessionLogUrl::set_game_session_id): <p>A unique identifier for the game session to get logs for. </p>
    /// - On success, responds with [`GetGameSessionLogUrlOutput`](crate::output::GetGameSessionLogUrlOutput) with field(s):
    ///   - [`pre_signed_url(Option<String>)`](crate::output::GetGameSessionLogUrlOutput::pre_signed_url): <p>Location of the requested game session logs, available for download. This URL is valid for 15 minutes, after which S3 will reject any download request using this URL. You can request a new URL any time within the 14-day period that the logs are retained.</p>
    /// - On failure, responds with [`SdkError<GetGameSessionLogUrlError>`](crate::error::GetGameSessionLogUrlError)
    pub fn get_game_session_log_url(&self) -> crate::client::fluent_builders::GetGameSessionLogUrl {
        crate::client::fluent_builders::GetGameSessionLogUrl::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetInstanceAccess`](crate::client::fluent_builders::GetInstanceAccess) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::GetInstanceAccess::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::GetInstanceAccess::set_fleet_id): <p>A unique identifier for the fleet that contains the instance you want access to. You can use either the fleet ID or ARN value. The fleet can be in any of the following statuses: <code>ACTIVATING</code>, <code>ACTIVE</code>, or <code>ERROR</code>. Fleets with an <code>ERROR</code> status may be accessible for a short time before they are deleted.</p>
    ///   - [`instance_id(impl Into<String>)`](crate::client::fluent_builders::GetInstanceAccess::instance_id) / [`set_instance_id(Option<String>)`](crate::client::fluent_builders::GetInstanceAccess::set_instance_id): <p>A unique identifier for the instance you want to get access to. You can access an instance in any status.</p>
    /// - On success, responds with [`GetInstanceAccessOutput`](crate::output::GetInstanceAccessOutput) with field(s):
    ///   - [`instance_access(Option<InstanceAccess>)`](crate::output::GetInstanceAccessOutput::instance_access): <p>The connection information for a fleet instance, including IP address and access credentials.</p>
    /// - On failure, responds with [`SdkError<GetInstanceAccessError>`](crate::error::GetInstanceAccessError)
    pub fn get_instance_access(&self) -> crate::client::fluent_builders::GetInstanceAccess {
        crate::client::fluent_builders::GetInstanceAccess::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListAliases`](crate::client::fluent_builders::ListAliases) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListAliases::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`routing_strategy_type(RoutingStrategyType)`](crate::client::fluent_builders::ListAliases::routing_strategy_type) / [`set_routing_strategy_type(Option<RoutingStrategyType>)`](crate::client::fluent_builders::ListAliases::set_routing_strategy_type): <p>The routing type to filter results on. Use this parameter to retrieve only aliases with a certain routing type. To retrieve all aliases, leave this parameter empty.</p>  <p>Possible routing types include the following:</p>  <ul>   <li> <p> <b>SIMPLE</b> -- The alias resolves to one specific fleet. Use this type when routing to active fleets.</p> </li>   <li> <p> <b>TERMINAL</b> -- The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_RoutingStrategy.html">RoutingStrategy</a> message embedded.</p> </li>  </ul>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListAliases::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListAliases::set_name): <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListAliases::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListAliases::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListAliases::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListAliases::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`ListAliasesOutput`](crate::output::ListAliasesOutput) with field(s):
    ///   - [`aliases(Option<Vec<Alias>>)`](crate::output::ListAliasesOutput::aliases): <p>A collection of alias resources that match the request parameters.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListAliasesOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<ListAliasesError>`](crate::error::ListAliasesError)
    pub fn list_aliases(&self) -> crate::client::fluent_builders::ListAliases {
        crate::client::fluent_builders::ListAliases::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListBuilds`](crate::client::fluent_builders::ListBuilds) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListBuilds::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`status(BuildStatus)`](crate::client::fluent_builders::ListBuilds::status) / [`set_status(Option<BuildStatus>)`](crate::client::fluent_builders::ListBuilds::set_status): <p>Build status to filter results by. To retrieve all builds, leave this parameter empty.</p>  <p>Possible build statuses include the following:</p>  <ul>   <li> <p> <b>INITIALIZED</b> -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value. </p> </li>   <li> <p> <b>READY</b> -- The game build has been successfully uploaded. You can now create new fleets for this build.</p> </li>   <li> <p> <b>FAILED</b> -- The game build upload failed. You cannot create new fleets for this build. </p> </li>  </ul>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListBuilds::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListBuilds::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListBuilds::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListBuilds::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`ListBuildsOutput`](crate::output::ListBuildsOutput) with field(s):
    ///   - [`builds(Option<Vec<Build>>)`](crate::output::ListBuildsOutput::builds): <p>A collection of build resources that match the request.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListBuildsOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<ListBuildsError>`](crate::error::ListBuildsError)
    pub fn list_builds(&self) -> crate::client::fluent_builders::ListBuilds {
        crate::client::fluent_builders::ListBuilds::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCompute`](crate::client::fluent_builders::ListCompute) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCompute::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::ListCompute::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::ListCompute::set_fleet_id): <p>A unique identifier for the fleet the compute resources are registered to.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::ListCompute::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::ListCompute::set_location): <p>The name of the custom location that the compute resources are assigned to.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListCompute::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListCompute::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCompute::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCompute::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`ListComputeOutput`](crate::output::ListComputeOutput) with field(s):
    ///   - [`compute_list(Option<Vec<Compute>>)`](crate::output::ListComputeOutput::compute_list): <p>A list of compute resources registered to the fleet you specified.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListComputeOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<ListComputeError>`](crate::error::ListComputeError)
    pub fn list_compute(&self) -> crate::client::fluent_builders::ListCompute {
        crate::client::fluent_builders::ListCompute::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListFleets`](crate::client::fluent_builders::ListFleets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFleets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`build_id(impl Into<String>)`](crate::client::fluent_builders::ListFleets::build_id) / [`set_build_id(Option<String>)`](crate::client::fluent_builders::ListFleets::set_build_id): <p>A unique identifier for the build to request fleets for. Use this parameter to return only fleets using a specified build. Use either the build ID or ARN value.</p>
    ///   - [`script_id(impl Into<String>)`](crate::client::fluent_builders::ListFleets::script_id) / [`set_script_id(Option<String>)`](crate::client::fluent_builders::ListFleets::set_script_id): <p>A unique identifier for the Realtime script to request fleets for. Use this parameter to return only fleets using a specified script. Use either the script ID or ARN value.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListFleets::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListFleets::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFleets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFleets::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`ListFleetsOutput`](crate::output::ListFleetsOutput) with field(s):
    ///   - [`fleet_ids(Option<Vec<String>>)`](crate::output::ListFleetsOutput::fleet_ids): <p>A set of fleet IDs that match the list request.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFleetsOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<ListFleetsError>`](crate::error::ListFleetsError)
    pub fn list_fleets(&self) -> crate::client::fluent_builders::ListFleets {
        crate::client::fluent_builders::ListFleets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListGameServerGroups`](crate::client::fluent_builders::ListGameServerGroups) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListGameServerGroups::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListGameServerGroups::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListGameServerGroups::set_limit): <p>The game server groups' limit.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListGameServerGroups::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListGameServerGroups::set_next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    /// - On success, responds with [`ListGameServerGroupsOutput`](crate::output::ListGameServerGroupsOutput) with field(s):
    ///   - [`game_server_groups(Option<Vec<GameServerGroup>>)`](crate::output::ListGameServerGroupsOutput::game_server_groups): <p>The game server groups' game server groups.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListGameServerGroupsOutput::next_token): <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListGameServerGroupsError>`](crate::error::ListGameServerGroupsError)
    pub fn list_game_server_groups(&self) -> crate::client::fluent_builders::ListGameServerGroups {
        crate::client::fluent_builders::ListGameServerGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListGameServers`](crate::client::fluent_builders::ListGameServers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListGameServers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::ListGameServers::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::ListGameServers::set_game_server_group_name): <p>An identifier for the game server group to retrieve a list of game servers from. Use either the name or ARN value.</p>
    ///   - [`sort_order(SortOrder)`](crate::client::fluent_builders::ListGameServers::sort_order) / [`set_sort_order(Option<SortOrder>)`](crate::client::fluent_builders::ListGameServers::set_sort_order): <p>Indicates how to sort the returned data based on game server registration timestamp. Use <code>ASCENDING</code> to retrieve oldest game servers first, or use <code>DESCENDING</code> to retrieve newest game servers first. If this parameter is left empty, game servers are returned in no particular order.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListGameServers::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListGameServers::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListGameServers::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListGameServers::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`ListGameServersOutput`](crate::output::ListGameServersOutput) with field(s):
    ///   - [`game_servers(Option<Vec<GameServer>>)`](crate::output::ListGameServersOutput::game_servers): <p>A collection of game server objects that match the request.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListGameServersOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<ListGameServersError>`](crate::error::ListGameServersError)
    pub fn list_game_servers(&self) -> crate::client::fluent_builders::ListGameServers {
        crate::client::fluent_builders::ListGameServers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListLocations`](crate::client::fluent_builders::ListLocations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListLocations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(Vec<LocationFilter>)`](crate::client::fluent_builders::ListLocations::filters) / [`set_filters(Option<Vec<LocationFilter>>)`](crate::client::fluent_builders::ListLocations::set_filters): <p>Filters the list for <code>AWS</code> or <code>CUSTOM</code> locations.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListLocations::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListLocations::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLocations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLocations::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`ListLocationsOutput`](crate::output::ListLocationsOutput) with field(s):
    ///   - [`locations(Option<Vec<LocationModel>>)`](crate::output::ListLocationsOutput::locations): <p>A collection of locations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListLocationsOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<ListLocationsError>`](crate::error::ListLocationsError)
    pub fn list_locations(&self) -> crate::client::fluent_builders::ListLocations {
        crate::client::fluent_builders::ListLocations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListScripts`](crate::client::fluent_builders::ListScripts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListScripts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListScripts::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListScripts::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListScripts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListScripts::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`ListScriptsOutput`](crate::output::ListScriptsOutput) with field(s):
    ///   - [`scripts(Option<Vec<Script>>)`](crate::output::ListScriptsOutput::scripts): <p>A set of properties describing the requested script.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListScriptsOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<ListScriptsError>`](crate::error::ListScriptsError)
    pub fn list_scripts(&self) -> crate::client::fluent_builders::ListScripts {
        crate::client::fluent_builders::ListScripts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to and uniquely identifies the GameLift resource that you want to retrieve tags for. GameLift resource ARNs are included in the data object for the resource, which can be retrieved by calling a List or Describe operation for the resource type. </p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The collection of tags that have been assigned to the specified resource. </p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutScalingPolicy`](crate::client::fluent_builders::PutScalingPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::PutScalingPolicy::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::PutScalingPolicy::set_name): <p>A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique. A fleet can have only one scaling policy with the same name.</p>
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::PutScalingPolicy::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::PutScalingPolicy::set_fleet_id): <p>A unique identifier for the fleet to apply this policy to. You can use either the fleet ID or ARN value. The fleet cannot be in any of the following statuses: ERROR or DELETING.</p>
    ///   - [`scaling_adjustment(i32)`](crate::client::fluent_builders::PutScalingPolicy::scaling_adjustment) / [`set_scaling_adjustment(i32)`](crate::client::fluent_builders::PutScalingPolicy::set_scaling_adjustment): <p>Amount of adjustment to make, based on the scaling adjustment type.</p>
    ///   - [`scaling_adjustment_type(ScalingAdjustmentType)`](crate::client::fluent_builders::PutScalingPolicy::scaling_adjustment_type) / [`set_scaling_adjustment_type(Option<ScalingAdjustmentType>)`](crate::client::fluent_builders::PutScalingPolicy::set_scaling_adjustment_type): <p>The type of adjustment to make to a fleet's instance count:</p>  <ul>   <li> <p> <b>ChangeInCapacity</b> -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.</p> </li>   <li> <p> <b>ExactCapacity</b> -- set the instance count to the scaling adjustment value.</p> </li>   <li> <p> <b>PercentChangeInCapacity</b> -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down; for example, a value of "-10" scales the fleet down by 10%.</p> </li>  </ul>
    ///   - [`threshold(f64)`](crate::client::fluent_builders::PutScalingPolicy::threshold) / [`set_threshold(f64)`](crate::client::fluent_builders::PutScalingPolicy::set_threshold): <p>Metric value used to trigger a scaling event.</p>
    ///   - [`comparison_operator(ComparisonOperatorType)`](crate::client::fluent_builders::PutScalingPolicy::comparison_operator) / [`set_comparison_operator(Option<ComparisonOperatorType>)`](crate::client::fluent_builders::PutScalingPolicy::set_comparison_operator): <p>Comparison operator to use when measuring the metric against the threshold value.</p>
    ///   - [`evaluation_periods(i32)`](crate::client::fluent_builders::PutScalingPolicy::evaluation_periods) / [`set_evaluation_periods(Option<i32>)`](crate::client::fluent_builders::PutScalingPolicy::set_evaluation_periods): <p>Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.</p>
    ///   - [`metric_name(MetricName)`](crate::client::fluent_builders::PutScalingPolicy::metric_name) / [`set_metric_name(Option<MetricName>)`](crate::client::fluent_builders::PutScalingPolicy::set_metric_name): <p>Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For detailed descriptions of fleet metrics, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/monitoring-cloudwatch.html">Monitor Amazon GameLift with Amazon CloudWatch</a>. </p>  <ul>   <li> <p> <b>ActivatingGameSessions</b> -- Game sessions in the process of being created.</p> </li>   <li> <p> <b>ActiveGameSessions</b> -- Game sessions that are currently running.</p> </li>   <li> <p> <b>ActiveInstances</b> -- Fleet instances that are currently running at least one game session.</p> </li>   <li> <p> <b>AvailableGameSessions</b> -- Additional game sessions that fleet could host simultaneously, given current capacity.</p> </li>   <li> <p> <b>AvailablePlayerSessions</b> -- Empty player slots in currently active game sessions. This includes game sessions that are not currently accepting players. Reserved player slots are not included.</p> </li>   <li> <p> <b>CurrentPlayerSessions</b> -- Player slots in active game sessions that are being used by a player or are reserved for a player. </p> </li>   <li> <p> <b>IdleInstances</b> -- Active instances that are currently hosting zero game sessions. </p> </li>   <li> <p> <b>PercentAvailableGameSessions</b> -- Unused percentage of the total number of game sessions that a fleet could host simultaneously, given current capacity. Use this metric for a target-based scaling policy.</p> </li>   <li> <p> <b>PercentIdleInstances</b> -- Percentage of the total number of active instances that are hosting zero game sessions.</p> </li>   <li> <p> <b>QueueDepth</b> -- Pending game session placement requests, in any queue, where the current fleet is the top-priority destination.</p> </li>   <li> <p> <b>WaitTime</b> -- Current wait time for pending game session placement requests, in any queue, where the current fleet is the top-priority destination. </p> </li>  </ul>
    ///   - [`policy_type(PolicyType)`](crate::client::fluent_builders::PutScalingPolicy::policy_type) / [`set_policy_type(Option<PolicyType>)`](crate::client::fluent_builders::PutScalingPolicy::set_policy_type): <p>The type of scaling policy to create. For a target-based policy, set the parameter <i>MetricName</i> to 'PercentAvailableGameSessions' and specify a <i>TargetConfiguration</i>. For a rule-based policy set the following parameters: <i>MetricName</i>, <i>ComparisonOperator</i>, <i>Threshold</i>, <i>EvaluationPeriods</i>, <i>ScalingAdjustmentType</i>, and <i>ScalingAdjustment</i>.</p>
    ///   - [`target_configuration(TargetConfiguration)`](crate::client::fluent_builders::PutScalingPolicy::target_configuration) / [`set_target_configuration(Option<TargetConfiguration>)`](crate::client::fluent_builders::PutScalingPolicy::set_target_configuration): <p>An object that contains settings for a target-based scaling policy.</p>
    /// - On success, responds with [`PutScalingPolicyOutput`](crate::output::PutScalingPolicyOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::PutScalingPolicyOutput::name): <p>A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.</p>
    /// - On failure, responds with [`SdkError<PutScalingPolicyError>`](crate::error::PutScalingPolicyError)
    pub fn put_scaling_policy(&self) -> crate::client::fluent_builders::PutScalingPolicy {
        crate::client::fluent_builders::PutScalingPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RegisterCompute`](crate::client::fluent_builders::RegisterCompute) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::RegisterCompute::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::RegisterCompute::set_fleet_id): <p>A unique identifier for the fleet to register the compute to. You can use either the fleet ID or ARN value.</p>
    ///   - [`compute_name(impl Into<String>)`](crate::client::fluent_builders::RegisterCompute::compute_name) / [`set_compute_name(Option<String>)`](crate::client::fluent_builders::RegisterCompute::set_compute_name): <p>A descriptive label that is associated with the compute resource registered to your fleet.</p>
    ///   - [`certificate_path(impl Into<String>)`](crate::client::fluent_builders::RegisterCompute::certificate_path) / [`set_certificate_path(Option<String>)`](crate::client::fluent_builders::RegisterCompute::set_certificate_path): <p>The path to the TLS certificate on your compute resource. The path and certificate are not validated by GameLift.</p>
    ///   - [`dns_name(impl Into<String>)`](crate::client::fluent_builders::RegisterCompute::dns_name) / [`set_dns_name(Option<String>)`](crate::client::fluent_builders::RegisterCompute::set_dns_name): <p>The DNS name of the compute resource. GameLift requires the DNS name or IP address to manage your compute resource.</p>
    ///   - [`ip_address(impl Into<String>)`](crate::client::fluent_builders::RegisterCompute::ip_address) / [`set_ip_address(Option<String>)`](crate::client::fluent_builders::RegisterCompute::set_ip_address): <p>The IP address of the compute resource. GameLift requires the DNS name or IP address to manage your compute resource.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::RegisterCompute::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::RegisterCompute::set_location): <p>The name of the custom location you added to the fleet you are registering this compute resource to.</p>
    /// - On success, responds with [`RegisterComputeOutput`](crate::output::RegisterComputeOutput) with field(s):
    ///   - [`compute(Option<Compute>)`](crate::output::RegisterComputeOutput::compute): <p>The details of the compute resource you registered to the specified fleet.</p>
    /// - On failure, responds with [`SdkError<RegisterComputeError>`](crate::error::RegisterComputeError)
    pub fn register_compute(&self) -> crate::client::fluent_builders::RegisterCompute {
        crate::client::fluent_builders::RegisterCompute::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RegisterGameServer`](crate::client::fluent_builders::RegisterGameServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::RegisterGameServer::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::RegisterGameServer::set_game_server_group_name): <p>A unique identifier for the game server group where the game server is running.</p>
    ///   - [`game_server_id(impl Into<String>)`](crate::client::fluent_builders::RegisterGameServer::game_server_id) / [`set_game_server_id(Option<String>)`](crate::client::fluent_builders::RegisterGameServer::set_game_server_id): <p>A custom string that uniquely identifies the game server to register. Game server IDs are developer-defined and must be unique across all game server groups in your Amazon Web Services account.</p>
    ///   - [`instance_id(impl Into<String>)`](crate::client::fluent_builders::RegisterGameServer::instance_id) / [`set_instance_id(Option<String>)`](crate::client::fluent_builders::RegisterGameServer::set_instance_id): <p>The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: <code>i-1234567890abcdef0</code>.</p>
    ///   - [`connection_info(impl Into<String>)`](crate::client::fluent_builders::RegisterGameServer::connection_info) / [`set_connection_info(Option<String>)`](crate::client::fluent_builders::RegisterGameServer::set_connection_info): <p>Information that is needed to make inbound client connections to the game server. This might include the IP address and port, DNS name, and other information.</p>
    ///   - [`game_server_data(impl Into<String>)`](crate::client::fluent_builders::RegisterGameServer::game_server_data) / [`set_game_server_data(Option<String>)`](crate::client::fluent_builders::RegisterGameServer::set_game_server_data): <p>A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers. </p>
    /// - On success, responds with [`RegisterGameServerOutput`](crate::output::RegisterGameServerOutput) with field(s):
    ///   - [`game_server(Option<GameServer>)`](crate::output::RegisterGameServerOutput::game_server): <p>Object that describes the newly registered game server.</p>
    /// - On failure, responds with [`SdkError<RegisterGameServerError>`](crate::error::RegisterGameServerError)
    pub fn register_game_server(&self) -> crate::client::fluent_builders::RegisterGameServer {
        crate::client::fluent_builders::RegisterGameServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RequestUploadCredentials`](crate::client::fluent_builders::RequestUploadCredentials) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`build_id(impl Into<String>)`](crate::client::fluent_builders::RequestUploadCredentials::build_id) / [`set_build_id(Option<String>)`](crate::client::fluent_builders::RequestUploadCredentials::set_build_id): <p>A unique identifier for the build to get credentials for. You can use either the build ID or ARN value. </p>
    /// - On success, responds with [`RequestUploadCredentialsOutput`](crate::output::RequestUploadCredentialsOutput) with field(s):
    ///   - [`upload_credentials(Option<AwsCredentials>)`](crate::output::RequestUploadCredentialsOutput::upload_credentials): <p>Amazon Web Services credentials required when uploading a game build to the storage location. These credentials have a limited lifespan and are valid only for the build they were issued for.</p>
    ///   - [`storage_location(Option<S3Location>)`](crate::output::RequestUploadCredentialsOutput::storage_location): <p>Amazon S3 path and key, identifying where the game build files are stored.</p>
    /// - On failure, responds with [`SdkError<RequestUploadCredentialsError>`](crate::error::RequestUploadCredentialsError)
    pub fn request_upload_credentials(
        &self,
    ) -> crate::client::fluent_builders::RequestUploadCredentials {
        crate::client::fluent_builders::RequestUploadCredentials::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ResolveAlias`](crate::client::fluent_builders::ResolveAlias) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`alias_id(impl Into<String>)`](crate::client::fluent_builders::ResolveAlias::alias_id) / [`set_alias_id(Option<String>)`](crate::client::fluent_builders::ResolveAlias::set_alias_id): <p>The unique identifier of the alias that you want to retrieve a fleet ID for. You can use either the alias ID or ARN value.</p>
    /// - On success, responds with [`ResolveAliasOutput`](crate::output::ResolveAliasOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::ResolveAliasOutput::fleet_id): <p>The fleet identifier that the alias is pointing to.</p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::ResolveAliasOutput::fleet_arn): <p> The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) associated with the GameLift fleet resource that this alias points to. </p>
    /// - On failure, responds with [`SdkError<ResolveAliasError>`](crate::error::ResolveAliasError)
    pub fn resolve_alias(&self) -> crate::client::fluent_builders::ResolveAlias {
        crate::client::fluent_builders::ResolveAlias::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ResumeGameServerGroup`](crate::client::fluent_builders::ResumeGameServerGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::ResumeGameServerGroup::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::ResumeGameServerGroup::set_game_server_group_name): <p>A unique identifier for the game server group. Use either the name or ARN value.</p>
    ///   - [`resume_actions(Vec<GameServerGroupAction>)`](crate::client::fluent_builders::ResumeGameServerGroup::resume_actions) / [`set_resume_actions(Option<Vec<GameServerGroupAction>>)`](crate::client::fluent_builders::ResumeGameServerGroup::set_resume_actions): <p>The activity to resume for this game server group.</p>
    /// - On success, responds with [`ResumeGameServerGroupOutput`](crate::output::ResumeGameServerGroupOutput) with field(s):
    ///   - [`game_server_group(Option<GameServerGroup>)`](crate::output::ResumeGameServerGroupOutput::game_server_group): <p>An object that describes the game server group resource, with the <code>SuspendedActions</code> property updated to reflect the resumed activity.</p>
    /// - On failure, responds with [`SdkError<ResumeGameServerGroupError>`](crate::error::ResumeGameServerGroupError)
    pub fn resume_game_server_group(
        &self,
    ) -> crate::client::fluent_builders::ResumeGameServerGroup {
        crate::client::fluent_builders::ResumeGameServerGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SearchGameSessions`](crate::client::fluent_builders::SearchGameSessions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::SearchGameSessions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::SearchGameSessions::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::SearchGameSessions::set_fleet_id): <p>A unique identifier for the fleet to search for active game sessions. You can use either the fleet ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.</p>
    ///   - [`alias_id(impl Into<String>)`](crate::client::fluent_builders::SearchGameSessions::alias_id) / [`set_alias_id(Option<String>)`](crate::client::fluent_builders::SearchGameSessions::set_alias_id): <p>A unique identifier for the alias associated with the fleet to search for active game sessions. You can use either the alias ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::SearchGameSessions::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::SearchGameSessions::set_location): <p>A fleet location to search for game sessions. You can specify a fleet's home Region or a remote location. Use the Amazon Web Services Region code format, such as <code>us-west-2</code>. </p>
    ///   - [`filter_expression(impl Into<String>)`](crate::client::fluent_builders::SearchGameSessions::filter_expression) / [`set_filter_expression(Option<String>)`](crate::client::fluent_builders::SearchGameSessions::set_filter_expression): <p>String containing the search criteria for the session search. If no filter expression is included, the request returns results for all game sessions in the fleet that are in <code>ACTIVE</code> status.</p>  <p>A filter expression can contain one or multiple conditions. Each condition consists of the following:</p>  <ul>   <li> <p> <b>Operand</b> -- Name of a game session attribute. Valid values are <code>gameSessionName</code>, <code>gameSessionId</code>, <code>gameSessionProperties</code>, <code>maximumSessions</code>, <code>creationTimeMillis</code>, <code>playerSessionCount</code>, <code>hasAvailablePlayerSessions</code>.</p> </li>   <li> <p> <b>Comparator</b> -- Valid comparators are: <code>=</code>, <code>&lt;&gt;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>. </p> </li>   <li> <p> <b>Value</b> -- Value to be searched for. Values may be numbers, boolean values (true/false) or strings depending on the operand. String values are case sensitive and must be enclosed in single quotes. Special characters must be escaped. Boolean and string values can only be used with the comparators <code>=</code> and <code>&lt;&gt;</code>. For example, the following filter expression searches on <code>gameSessionName</code>: "<code>FilterExpression": "gameSessionName = 'Matt\\'s Awesome Game 1'"</code>. </p> </li>  </ul>  <p>To chain multiple conditions in a single expression, use the logical keywords <code>AND</code>, <code>OR</code>, and <code>NOT</code> and parentheses as needed. For example: <code>x AND y AND NOT z</code>, <code>NOT (x OR y)</code>.</p>  <p>Session search evaluates conditions from left to right using the following precedence rules:</p>  <ol>   <li> <p> <code>=</code>, <code>&lt;&gt;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> </p> </li>   <li> <p>Parentheses</p> </li>   <li> <p>NOT</p> </li>   <li> <p>AND</p> </li>   <li> <p>OR</p> </li>  </ol>  <p>For example, this filter expression retrieves game sessions hosting at least ten players that have an open player slot: <code>"maximumSessions&gt;=10 AND hasAvailablePlayerSessions=true"</code>. </p>
    ///   - [`sort_expression(impl Into<String>)`](crate::client::fluent_builders::SearchGameSessions::sort_expression) / [`set_sort_expression(Option<String>)`](crate::client::fluent_builders::SearchGameSessions::set_sort_expression): <p>Instructions on how to sort the search results. If no sort expression is included, the request returns results in random order. A sort expression consists of the following elements:</p>  <ul>   <li> <p> <b>Operand</b> -- Name of a game session attribute. Valid values are <code>gameSessionName</code>, <code>gameSessionId</code>, <code>gameSessionProperties</code>, <code>maximumSessions</code>, <code>creationTimeMillis</code>, <code>playerSessionCount</code>, <code>hasAvailablePlayerSessions</code>.</p> </li>   <li> <p> <b>Order</b> -- Valid sort orders are <code>ASC</code> (ascending) and <code>DESC</code> (descending).</p> </li>  </ul>  <p>For example, this sort expression returns the oldest active sessions first: <code>"SortExpression": "creationTimeMillis ASC"</code>. Results with a null value for the sort operand are returned at the end of the list.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::SearchGameSessions::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::SearchGameSessions::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. The maximum number of results returned is 20, even if this value is not set or is set higher than 20. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::SearchGameSessions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::SearchGameSessions::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`SearchGameSessionsOutput`](crate::output::SearchGameSessionsOutput) with field(s):
    ///   - [`game_sessions(Option<Vec<GameSession>>)`](crate::output::SearchGameSessionsOutput::game_sessions): <p>A collection of objects containing game session properties for each session that matches the request.</p>
    ///   - [`next_token(Option<String>)`](crate::output::SearchGameSessionsOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<SearchGameSessionsError>`](crate::error::SearchGameSessionsError)
    pub fn search_game_sessions(&self) -> crate::client::fluent_builders::SearchGameSessions {
        crate::client::fluent_builders::SearchGameSessions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartFleetActions`](crate::client::fluent_builders::StartFleetActions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::StartFleetActions::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::StartFleetActions::set_fleet_id): <p>A unique identifier for the fleet to restart actions on. You can use either the fleet ID or ARN value.</p>
    ///   - [`actions(Vec<FleetAction>)`](crate::client::fluent_builders::StartFleetActions::actions) / [`set_actions(Option<Vec<FleetAction>>)`](crate::client::fluent_builders::StartFleetActions::set_actions): <p>List of actions to restart on the fleet.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::StartFleetActions::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::StartFleetActions::set_location): <p>The fleet location to restart fleet actions for. Specify a location in the form of an Amazon Web Services Region code, such as <code>us-west-2</code>.</p>
    /// - On success, responds with [`StartFleetActionsOutput`](crate::output::StartFleetActionsOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::StartFleetActionsOutput::fleet_id): <p>A unique identifier for the fleet to restart actions on.</p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::StartFleetActionsOutput::fleet_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>.</p>
    /// - On failure, responds with [`SdkError<StartFleetActionsError>`](crate::error::StartFleetActionsError)
    pub fn start_fleet_actions(&self) -> crate::client::fluent_builders::StartFleetActions {
        crate::client::fluent_builders::StartFleetActions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartGameSessionPlacement`](crate::client::fluent_builders::StartGameSessionPlacement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`placement_id(impl Into<String>)`](crate::client::fluent_builders::StartGameSessionPlacement::placement_id) / [`set_placement_id(Option<String>)`](crate::client::fluent_builders::StartGameSessionPlacement::set_placement_id): <p>A unique identifier to assign to the new game session placement. This value is developer-defined. The value must be unique across all Regions and cannot be reused.</p>
    ///   - [`game_session_queue_name(impl Into<String>)`](crate::client::fluent_builders::StartGameSessionPlacement::game_session_queue_name) / [`set_game_session_queue_name(Option<String>)`](crate::client::fluent_builders::StartGameSessionPlacement::set_game_session_queue_name): <p>Name of the queue to use to place the new game session. You can use either the queue name or ARN value. </p>
    ///   - [`game_properties(Vec<GameProperty>)`](crate::client::fluent_builders::StartGameSessionPlacement::game_properties) / [`set_game_properties(Option<Vec<GameProperty>>)`](crate::client::fluent_builders::StartGameSessionPlacement::set_game_properties): <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).</p>
    ///   - [`maximum_player_session_count(i32)`](crate::client::fluent_builders::StartGameSessionPlacement::maximum_player_session_count) / [`set_maximum_player_session_count(Option<i32>)`](crate::client::fluent_builders::StartGameSessionPlacement::set_maximum_player_session_count): <p>The maximum number of players that can be connected simultaneously to the game session.</p>
    ///   - [`game_session_name(impl Into<String>)`](crate::client::fluent_builders::StartGameSessionPlacement::game_session_name) / [`set_game_session_name(Option<String>)`](crate::client::fluent_builders::StartGameSessionPlacement::set_game_session_name): <p>A descriptive label that is associated with a game session. Session names do not need to be unique.</p>
    ///   - [`player_latencies(Vec<PlayerLatency>)`](crate::client::fluent_builders::StartGameSessionPlacement::player_latencies) / [`set_player_latencies(Option<Vec<PlayerLatency>>)`](crate::client::fluent_builders::StartGameSessionPlacement::set_player_latencies): <p>A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to Amazon Web Services Regions. This information is used to try to place the new game session where it can offer the best possible gameplay experience for the players. </p>
    ///   - [`desired_player_sessions(Vec<DesiredPlayerSession>)`](crate::client::fluent_builders::StartGameSessionPlacement::desired_player_sessions) / [`set_desired_player_sessions(Option<Vec<DesiredPlayerSession>>)`](crate::client::fluent_builders::StartGameSessionPlacement::set_desired_player_sessions): <p>Set of information on each player to create a player session for.</p>
    ///   - [`game_session_data(impl Into<String>)`](crate::client::fluent_builders::StartGameSessionPlacement::game_session_data) / [`set_game_session_data(Option<String>)`](crate::client::fluent_builders::StartGameSessionPlacement::set_game_session_data): <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the <code>GameSession</code> object with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>).</p>
    /// - On success, responds with [`StartGameSessionPlacementOutput`](crate::output::StartGameSessionPlacementOutput) with field(s):
    ///   - [`game_session_placement(Option<GameSessionPlacement>)`](crate::output::StartGameSessionPlacementOutput::game_session_placement): <p>Object that describes the newly created game session placement. This object includes all the information provided in the request, as well as start/end time stamps and placement status. </p>
    /// - On failure, responds with [`SdkError<StartGameSessionPlacementError>`](crate::error::StartGameSessionPlacementError)
    pub fn start_game_session_placement(
        &self,
    ) -> crate::client::fluent_builders::StartGameSessionPlacement {
        crate::client::fluent_builders::StartGameSessionPlacement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartMatchBackfill`](crate::client::fluent_builders::StartMatchBackfill) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ticket_id(impl Into<String>)`](crate::client::fluent_builders::StartMatchBackfill::ticket_id) / [`set_ticket_id(Option<String>)`](crate::client::fluent_builders::StartMatchBackfill::set_ticket_id): <p>A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the match backfill ticket status and retrieve match results.</p>
    ///   - [`configuration_name(impl Into<String>)`](crate::client::fluent_builders::StartMatchBackfill::configuration_name) / [`set_configuration_name(Option<String>)`](crate::client::fluent_builders::StartMatchBackfill::set_configuration_name): <p>Name of the matchmaker to use for this request. You can use either the configuration name or ARN value. The ARN of the matchmaker that was used with the original game session is listed in the <code>GameSession</code> object, <code>MatchmakerData</code> property.</p>
    ///   - [`game_session_arn(impl Into<String>)`](crate::client::fluent_builders::StartMatchBackfill::game_session_arn) / [`set_game_session_arn(Option<String>)`](crate::client::fluent_builders::StartMatchBackfill::set_game_session_arn): <p>A unique identifier for the game session. Use the game session ID. When using FlexMatch as a standalone matchmaking solution, this parameter is not needed. </p>
    ///   - [`players(Vec<Player>)`](crate::client::fluent_builders::StartMatchBackfill::players) / [`set_players(Option<Vec<Player>>)`](crate::client::fluent_builders::StartMatchBackfill::set_players): <p>Match information on all players that are currently assigned to the game session. This information is used by the matchmaker to find new players and add them to the existing game.</p>  <p>You can include up to 199 <code>Players</code> in a <code>StartMatchBackfill</code> request.</p>  <ul>   <li> <p>PlayerID, PlayerAttributes, Team -- This information is maintained in the <code>GameSession</code> object, <code>MatchmakerData</code> property, for all players who are currently assigned to the game session. The matchmaker data is in JSON syntax, formatted as a string. For more details, see <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data"> Match Data</a>. </p> <p>The backfill request must specify the team membership for every player. Do not specify team if you are not using backfill.</p> </li>   <li> <p>LatencyInMs -- If the matchmaker uses player latency, include a latency value, in milliseconds, for the Region that the game session is currently in. Do not include latency values for any other Region.</p> </li>  </ul>
    /// - On success, responds with [`StartMatchBackfillOutput`](crate::output::StartMatchBackfillOutput) with field(s):
    ///   - [`matchmaking_ticket(Option<MatchmakingTicket>)`](crate::output::StartMatchBackfillOutput::matchmaking_ticket): <p>Ticket representing the backfill matchmaking request. This object includes the information in the request, ticket status, and match results as generated during the matchmaking process.</p>
    /// - On failure, responds with [`SdkError<StartMatchBackfillError>`](crate::error::StartMatchBackfillError)
    pub fn start_match_backfill(&self) -> crate::client::fluent_builders::StartMatchBackfill {
        crate::client::fluent_builders::StartMatchBackfill::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartMatchmaking`](crate::client::fluent_builders::StartMatchmaking) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ticket_id(impl Into<String>)`](crate::client::fluent_builders::StartMatchmaking::ticket_id) / [`set_ticket_id(Option<String>)`](crate::client::fluent_builders::StartMatchmaking::set_ticket_id): <p>A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the matchmaking ticket status and retrieve match results.</p>
    ///   - [`configuration_name(impl Into<String>)`](crate::client::fluent_builders::StartMatchmaking::configuration_name) / [`set_configuration_name(Option<String>)`](crate::client::fluent_builders::StartMatchmaking::set_configuration_name): <p>Name of the matchmaking configuration to use for this request. Matchmaking configurations must exist in the same Region as this request. You can use either the configuration name or ARN value.</p>
    ///   - [`players(Vec<Player>)`](crate::client::fluent_builders::StartMatchmaking::players) / [`set_players(Option<Vec<Player>>)`](crate::client::fluent_builders::StartMatchmaking::set_players): <p>Information on each player to be matched. This information must include a player ID, and may contain player attributes and latency data to be used in the matchmaking process. After a successful match, <code>Player</code> objects contain the name of the team the player is assigned to.</p>  <p>You can include up to 10 <code>Players</code> in a <code>StartMatchmaking</code> request.</p>
    /// - On success, responds with [`StartMatchmakingOutput`](crate::output::StartMatchmakingOutput) with field(s):
    ///   - [`matchmaking_ticket(Option<MatchmakingTicket>)`](crate::output::StartMatchmakingOutput::matchmaking_ticket): <p>Ticket representing the matchmaking request. This object include the information included in the request, ticket status, and match results as generated during the matchmaking process.</p>
    /// - On failure, responds with [`SdkError<StartMatchmakingError>`](crate::error::StartMatchmakingError)
    pub fn start_matchmaking(&self) -> crate::client::fluent_builders::StartMatchmaking {
        crate::client::fluent_builders::StartMatchmaking::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopFleetActions`](crate::client::fluent_builders::StopFleetActions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::StopFleetActions::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::StopFleetActions::set_fleet_id): <p>A unique identifier for the fleet to stop actions on. You can use either the fleet ID or ARN value.</p>
    ///   - [`actions(Vec<FleetAction>)`](crate::client::fluent_builders::StopFleetActions::actions) / [`set_actions(Option<Vec<FleetAction>>)`](crate::client::fluent_builders::StopFleetActions::set_actions): <p>List of actions to suspend on the fleet. </p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::StopFleetActions::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::StopFleetActions::set_location): <p>The fleet location to stop fleet actions for. Specify a location in the form of an Amazon Web Services Region code, such as <code>us-west-2</code>.</p>
    /// - On success, responds with [`StopFleetActionsOutput`](crate::output::StopFleetActionsOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::StopFleetActionsOutput::fleet_id): <p>A unique identifier for the fleet to stop actions on.</p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::StopFleetActionsOutput::fleet_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>.</p>
    /// - On failure, responds with [`SdkError<StopFleetActionsError>`](crate::error::StopFleetActionsError)
    pub fn stop_fleet_actions(&self) -> crate::client::fluent_builders::StopFleetActions {
        crate::client::fluent_builders::StopFleetActions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopGameSessionPlacement`](crate::client::fluent_builders::StopGameSessionPlacement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`placement_id(impl Into<String>)`](crate::client::fluent_builders::StopGameSessionPlacement::placement_id) / [`set_placement_id(Option<String>)`](crate::client::fluent_builders::StopGameSessionPlacement::set_placement_id): <p>A unique identifier for a game session placement to stop.</p>
    /// - On success, responds with [`StopGameSessionPlacementOutput`](crate::output::StopGameSessionPlacementOutput) with field(s):
    ///   - [`game_session_placement(Option<GameSessionPlacement>)`](crate::output::StopGameSessionPlacementOutput::game_session_placement): <p>Object that describes the canceled game session placement, with <code>CANCELLED</code> status and an end time stamp. </p>
    /// - On failure, responds with [`SdkError<StopGameSessionPlacementError>`](crate::error::StopGameSessionPlacementError)
    pub fn stop_game_session_placement(
        &self,
    ) -> crate::client::fluent_builders::StopGameSessionPlacement {
        crate::client::fluent_builders::StopGameSessionPlacement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopMatchmaking`](crate::client::fluent_builders::StopMatchmaking) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ticket_id(impl Into<String>)`](crate::client::fluent_builders::StopMatchmaking::ticket_id) / [`set_ticket_id(Option<String>)`](crate::client::fluent_builders::StopMatchmaking::set_ticket_id): <p>A unique identifier for a matchmaking ticket.</p>
    /// - On success, responds with [`StopMatchmakingOutput`](crate::output::StopMatchmakingOutput)

    /// - On failure, responds with [`SdkError<StopMatchmakingError>`](crate::error::StopMatchmakingError)
    pub fn stop_matchmaking(&self) -> crate::client::fluent_builders::StopMatchmaking {
        crate::client::fluent_builders::StopMatchmaking::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SuspendGameServerGroup`](crate::client::fluent_builders::SuspendGameServerGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::SuspendGameServerGroup::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::SuspendGameServerGroup::set_game_server_group_name): <p>A unique identifier for the game server group. Use either the name or ARN value.</p>
    ///   - [`suspend_actions(Vec<GameServerGroupAction>)`](crate::client::fluent_builders::SuspendGameServerGroup::suspend_actions) / [`set_suspend_actions(Option<Vec<GameServerGroupAction>>)`](crate::client::fluent_builders::SuspendGameServerGroup::set_suspend_actions): <p>The activity to suspend for this game server group.</p>
    /// - On success, responds with [`SuspendGameServerGroupOutput`](crate::output::SuspendGameServerGroupOutput) with field(s):
    ///   - [`game_server_group(Option<GameServerGroup>)`](crate::output::SuspendGameServerGroupOutput::game_server_group): <p>An object that describes the game server group resource, with the <code>SuspendedActions</code> property updated to reflect the suspended activity.</p>
    /// - On failure, responds with [`SdkError<SuspendGameServerGroupError>`](crate::error::SuspendGameServerGroupError)
    pub fn suspend_game_server_group(
        &self,
    ) -> crate::client::fluent_builders::SuspendGameServerGroup {
        crate::client::fluent_builders::SuspendGameServerGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to and uniquely identifies the GameLift resource that you want to assign tags to. GameLift resource ARNs are included in the data object for the resource, which can be retrieved by calling a List or Describe operation for the resource type. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>A list of one or more tags to assign to the specified GameLift resource. Tags are developer-defined and structured as key-value pairs. The maximum tag limit may be lower than stated. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> for actual tagging limits.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to and uniquely identifies the GameLift resource that you want to remove tags from. GameLift resource ARNs are included in the data object for the resource, which can be retrieved by calling a List or Describe operation for the resource type. </p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>A list of one or more tag keys to remove from the specified GameLift resource. An Amazon Web Services resource can have only one tag with a specific tag key, so specifying the tag key identifies which tag to remove. </p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateAlias`](crate::client::fluent_builders::UpdateAlias) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`alias_id(impl Into<String>)`](crate::client::fluent_builders::UpdateAlias::alias_id) / [`set_alias_id(Option<String>)`](crate::client::fluent_builders::UpdateAlias::set_alias_id): <p>A unique identifier for the alias that you want to update. You can use either the alias ID or ARN value.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateAlias::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateAlias::set_name): <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateAlias::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateAlias::set_description): <p>A human-readable description of the alias.</p>
    ///   - [`routing_strategy(RoutingStrategy)`](crate::client::fluent_builders::UpdateAlias::routing_strategy) / [`set_routing_strategy(Option<RoutingStrategy>)`](crate::client::fluent_builders::UpdateAlias::set_routing_strategy): <p>The routing configuration, including routing type and fleet target, for the alias.</p>
    /// - On success, responds with [`UpdateAliasOutput`](crate::output::UpdateAliasOutput) with field(s):
    ///   - [`alias(Option<Alias>)`](crate::output::UpdateAliasOutput::alias): <p>The updated alias resource.</p>
    /// - On failure, responds with [`SdkError<UpdateAliasError>`](crate::error::UpdateAliasError)
    pub fn update_alias(&self) -> crate::client::fluent_builders::UpdateAlias {
        crate::client::fluent_builders::UpdateAlias::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateBuild`](crate::client::fluent_builders::UpdateBuild) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`build_id(impl Into<String>)`](crate::client::fluent_builders::UpdateBuild::build_id) / [`set_build_id(Option<String>)`](crate::client::fluent_builders::UpdateBuild::set_build_id): <p>A unique identifier for the build to update. You can use either the build ID or ARN value. </p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateBuild::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateBuild::set_name): <p>A descriptive label associated with a build. Build names do not need to be unique. </p>
    ///   - [`version(impl Into<String>)`](crate::client::fluent_builders::UpdateBuild::version) / [`set_version(Option<String>)`](crate::client::fluent_builders::UpdateBuild::set_version): <p>Version information associated with a build or script. Version strings do not need to be unique.</p>
    /// - On success, responds with [`UpdateBuildOutput`](crate::output::UpdateBuildOutput) with field(s):
    ///   - [`build_value(Option<Build>)`](crate::output::UpdateBuildOutput::build_value): <p>The updated build resource.</p>
    /// - On failure, responds with [`SdkError<UpdateBuildError>`](crate::error::UpdateBuildError)
    pub fn update_build(&self) -> crate::client::fluent_builders::UpdateBuild {
        crate::client::fluent_builders::UpdateBuild::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFleetAttributes`](crate::client::fluent_builders::UpdateFleetAttributes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::UpdateFleetAttributes::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::UpdateFleetAttributes::set_fleet_id): <p>A unique identifier for the fleet to update attribute metadata for. You can use either the fleet ID or ARN value.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateFleetAttributes::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateFleetAttributes::set_name): <p>A descriptive label that is associated with a fleet. Fleet names do not need to be unique.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateFleetAttributes::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateFleetAttributes::set_description): <p>A human-readable description of a fleet.</p>
    ///   - [`new_game_session_protection_policy(ProtectionPolicy)`](crate::client::fluent_builders::UpdateFleetAttributes::new_game_session_protection_policy) / [`set_new_game_session_protection_policy(Option<ProtectionPolicy>)`](crate::client::fluent_builders::UpdateFleetAttributes::set_new_game_session_protection_policy): <p>The game session protection policy to apply to all new instances created in this fleet. Instances that already exist are not affected. You can set protection for individual instances using <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateGameSession.html">UpdateGameSession</a> .</p>  <ul>   <li> <p> <b>NoProtection</b> -- The game session can be terminated during a scale-down event.</p> </li>   <li> <p> <b>FullProtection</b> -- If the game session is in an <code>ACTIVE</code> status, it cannot be terminated during a scale-down event.</p> </li>  </ul>
    ///   - [`resource_creation_limit_policy(ResourceCreationLimitPolicy)`](crate::client::fluent_builders::UpdateFleetAttributes::resource_creation_limit_policy) / [`set_resource_creation_limit_policy(Option<ResourceCreationLimitPolicy>)`](crate::client::fluent_builders::UpdateFleetAttributes::set_resource_creation_limit_policy): <p>Policy settings that limit the number of game sessions an individual player can create over a span of time. </p>
    ///   - [`metric_groups(Vec<String>)`](crate::client::fluent_builders::UpdateFleetAttributes::metric_groups) / [`set_metric_groups(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateFleetAttributes::set_metric_groups): <p>The name of a metric group to add this fleet to. Use a metric group in Amazon CloudWatch to aggregate the metrics from multiple fleets. Provide an existing metric group name, or create a new metric group by providing a new name. A fleet can only be in one metric group at a time.</p>
    ///   - [`anywhere_configuration(AnywhereConfiguration)`](crate::client::fluent_builders::UpdateFleetAttributes::anywhere_configuration) / [`set_anywhere_configuration(Option<AnywhereConfiguration>)`](crate::client::fluent_builders::UpdateFleetAttributes::set_anywhere_configuration): <p>GameLift Anywhere configuration options.</p>
    /// - On success, responds with [`UpdateFleetAttributesOutput`](crate::output::UpdateFleetAttributesOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::UpdateFleetAttributesOutput::fleet_id): <p>A unique identifier for the fleet that was updated.</p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::UpdateFleetAttributesOutput::fleet_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>.</p>
    /// - On failure, responds with [`SdkError<UpdateFleetAttributesError>`](crate::error::UpdateFleetAttributesError)
    pub fn update_fleet_attributes(&self) -> crate::client::fluent_builders::UpdateFleetAttributes {
        crate::client::fluent_builders::UpdateFleetAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFleetCapacity`](crate::client::fluent_builders::UpdateFleetCapacity) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::UpdateFleetCapacity::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::UpdateFleetCapacity::set_fleet_id): <p>A unique identifier for the fleet to update capacity settings for. You can use either the fleet ID or ARN value.</p>
    ///   - [`desired_instances(i32)`](crate::client::fluent_builders::UpdateFleetCapacity::desired_instances) / [`set_desired_instances(Option<i32>)`](crate::client::fluent_builders::UpdateFleetCapacity::set_desired_instances): <p>The number of Amazon EC2 instances you want to maintain in the specified fleet location. This value must fall between the minimum and maximum size limits.</p>
    ///   - [`min_size(i32)`](crate::client::fluent_builders::UpdateFleetCapacity::min_size) / [`set_min_size(Option<i32>)`](crate::client::fluent_builders::UpdateFleetCapacity::set_min_size): <p>The minimum number of instances that are allowed in the specified fleet location. If this parameter is not set, the default is 0.</p>
    ///   - [`max_size(i32)`](crate::client::fluent_builders::UpdateFleetCapacity::max_size) / [`set_max_size(Option<i32>)`](crate::client::fluent_builders::UpdateFleetCapacity::set_max_size): <p>The maximum number of instances that are allowed in the specified fleet location. If this parameter is not set, the default is 1.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::UpdateFleetCapacity::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::UpdateFleetCapacity::set_location): <p>The name of a remote location to update fleet capacity settings for, in the form of an Amazon Web Services Region code such as <code>us-west-2</code>.</p>
    /// - On success, responds with [`UpdateFleetCapacityOutput`](crate::output::UpdateFleetCapacityOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::UpdateFleetCapacityOutput::fleet_id): <p>A unique identifier for the fleet that was updated.</p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::UpdateFleetCapacityOutput::fleet_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>. </p>
    ///   - [`location(Option<String>)`](crate::output::UpdateFleetCapacityOutput::location): <p>The remote location being updated, expressed as an Amazon Web Services Region code, such as <code>us-west-2</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateFleetCapacityError>`](crate::error::UpdateFleetCapacityError)
    pub fn update_fleet_capacity(&self) -> crate::client::fluent_builders::UpdateFleetCapacity {
        crate::client::fluent_builders::UpdateFleetCapacity::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFleetPortSettings`](crate::client::fluent_builders::UpdateFleetPortSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::UpdateFleetPortSettings::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::UpdateFleetPortSettings::set_fleet_id): <p>A unique identifier for the fleet to update port settings for. You can use either the fleet ID or ARN value.</p>
    ///   - [`inbound_permission_authorizations(Vec<IpPermission>)`](crate::client::fluent_builders::UpdateFleetPortSettings::inbound_permission_authorizations) / [`set_inbound_permission_authorizations(Option<Vec<IpPermission>>)`](crate::client::fluent_builders::UpdateFleetPortSettings::set_inbound_permission_authorizations): <p>A collection of port settings to be added to the fleet resource.</p>
    ///   - [`inbound_permission_revocations(Vec<IpPermission>)`](crate::client::fluent_builders::UpdateFleetPortSettings::inbound_permission_revocations) / [`set_inbound_permission_revocations(Option<Vec<IpPermission>>)`](crate::client::fluent_builders::UpdateFleetPortSettings::set_inbound_permission_revocations): <p>A collection of port settings to be removed from the fleet resource.</p>
    /// - On success, responds with [`UpdateFleetPortSettingsOutput`](crate::output::UpdateFleetPortSettingsOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::UpdateFleetPortSettingsOutput::fleet_id): <p>A unique identifier for the fleet that was updated.</p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::UpdateFleetPortSettingsOutput::fleet_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>.</p>
    /// - On failure, responds with [`SdkError<UpdateFleetPortSettingsError>`](crate::error::UpdateFleetPortSettingsError)
    pub fn update_fleet_port_settings(
        &self,
    ) -> crate::client::fluent_builders::UpdateFleetPortSettings {
        crate::client::fluent_builders::UpdateFleetPortSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateGameServer`](crate::client::fluent_builders::UpdateGameServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::UpdateGameServer::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::UpdateGameServer::set_game_server_group_name): <p>A unique identifier for the game server group where the game server is running.</p>
    ///   - [`game_server_id(impl Into<String>)`](crate::client::fluent_builders::UpdateGameServer::game_server_id) / [`set_game_server_id(Option<String>)`](crate::client::fluent_builders::UpdateGameServer::set_game_server_id): <p>A custom string that uniquely identifies the game server to update.</p>
    ///   - [`game_server_data(impl Into<String>)`](crate::client::fluent_builders::UpdateGameServer::game_server_data) / [`set_game_server_data(Option<String>)`](crate::client::fluent_builders::UpdateGameServer::set_game_server_data): <p>A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers. </p>
    ///   - [`utilization_status(GameServerUtilizationStatus)`](crate::client::fluent_builders::UpdateGameServer::utilization_status) / [`set_utilization_status(Option<GameServerUtilizationStatus>)`](crate::client::fluent_builders::UpdateGameServer::set_utilization_status): <p>Indicates whether the game server is available or is currently hosting gameplay.</p>
    ///   - [`health_check(GameServerHealthCheck)`](crate::client::fluent_builders::UpdateGameServer::health_check) / [`set_health_check(Option<GameServerHealthCheck>)`](crate::client::fluent_builders::UpdateGameServer::set_health_check): <p>Indicates health status of the game server. A request that includes this parameter updates the game server's <i>LastHealthCheckTime</i> timestamp. </p>
    /// - On success, responds with [`UpdateGameServerOutput`](crate::output::UpdateGameServerOutput) with field(s):
    ///   - [`game_server(Option<GameServer>)`](crate::output::UpdateGameServerOutput::game_server): <p>Object that describes the newly updated game server.</p>
    /// - On failure, responds with [`SdkError<UpdateGameServerError>`](crate::error::UpdateGameServerError)
    pub fn update_game_server(&self) -> crate::client::fluent_builders::UpdateGameServer {
        crate::client::fluent_builders::UpdateGameServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateGameServerGroup`](crate::client::fluent_builders::UpdateGameServerGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::UpdateGameServerGroup::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::UpdateGameServerGroup::set_game_server_group_name): <p>A unique identifier for the game server group. Use either the name or ARN value.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateGameServerGroup::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::UpdateGameServerGroup::set_role_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) for an IAM role that allows Amazon GameLift to access your Amazon EC2 Auto Scaling groups.</p>
    ///   - [`instance_definitions(Vec<InstanceDefinition>)`](crate::client::fluent_builders::UpdateGameServerGroup::instance_definitions) / [`set_instance_definitions(Option<Vec<InstanceDefinition>>)`](crate::client::fluent_builders::UpdateGameServerGroup::set_instance_definitions): <p>An updated list of Amazon EC2 instance types to use in the Auto Scaling group. The instance definitions must specify at least two different instance types that are supported by GameLift FleetIQ. This updated list replaces the entire current list of instance definitions for the game server group. For more information on instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">EC2 Instance Types</a> in the <i>Amazon EC2 User Guide</i>. You can optionally specify capacity weighting for each instance type. If no weight value is specified for an instance type, it is set to the default value "1". For more information about capacity weighting, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html"> Instance Weighting for Amazon EC2 Auto Scaling</a> in the Amazon EC2 Auto Scaling User Guide.</p>
    ///   - [`game_server_protection_policy(GameServerProtectionPolicy)`](crate::client::fluent_builders::UpdateGameServerGroup::game_server_protection_policy) / [`set_game_server_protection_policy(Option<GameServerProtectionPolicy>)`](crate::client::fluent_builders::UpdateGameServerGroup::set_game_server_protection_policy): <p>A flag that indicates whether instances in the game server group are protected from early termination. Unprotected instances that have active game servers running might be terminated during a scale-down event, causing players to be dropped from the game. Protected instances cannot be terminated while there are active game servers running except in the event of a forced game server group deletion (see ). An exception to this is with Spot Instances, which can be terminated by Amazon Web Services regardless of protection status. This property is set to <code>NO_PROTECTION</code> by default.</p>
    ///   - [`balancing_strategy(BalancingStrategy)`](crate::client::fluent_builders::UpdateGameServerGroup::balancing_strategy) / [`set_balancing_strategy(Option<BalancingStrategy>)`](crate::client::fluent_builders::UpdateGameServerGroup::set_balancing_strategy): <p>Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the game server group. Method options include the following:</p>  <ul>   <li> <p> <code>SPOT_ONLY</code> - Only Spot Instances are used in the game server group. If Spot Instances are unavailable or not viable for game hosting, the game server group provides no hosting capacity until Spot Instances can again be used. Until then, no new instances are started, and the existing nonviable Spot Instances are terminated (after current gameplay ends) and are not replaced.</p> </li>   <li> <p> <code>SPOT_PREFERRED</code> - (default value) Spot Instances are used whenever available in the game server group. If Spot Instances are unavailable, the game server group continues to provide hosting capacity by falling back to On-Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends) and are replaced with new On-Demand Instances.</p> </li>   <li> <p> <code>ON_DEMAND_ONLY</code> - Only On-Demand Instances are used in the game server group. No Spot Instances are used, even when available, while this balancing strategy is in force.</p> </li>  </ul>
    /// - On success, responds with [`UpdateGameServerGroupOutput`](crate::output::UpdateGameServerGroupOutput) with field(s):
    ///   - [`game_server_group(Option<GameServerGroup>)`](crate::output::UpdateGameServerGroupOutput::game_server_group): <p>An object that describes the game server group resource with updated properties. </p>
    /// - On failure, responds with [`SdkError<UpdateGameServerGroupError>`](crate::error::UpdateGameServerGroupError)
    pub fn update_game_server_group(
        &self,
    ) -> crate::client::fluent_builders::UpdateGameServerGroup {
        crate::client::fluent_builders::UpdateGameServerGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateGameSession`](crate::client::fluent_builders::UpdateGameSession) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_session_id(impl Into<String>)`](crate::client::fluent_builders::UpdateGameSession::game_session_id) / [`set_game_session_id(Option<String>)`](crate::client::fluent_builders::UpdateGameSession::set_game_session_id): <p>A unique identifier for the game session to update. </p>
    ///   - [`maximum_player_session_count(i32)`](crate::client::fluent_builders::UpdateGameSession::maximum_player_session_count) / [`set_maximum_player_session_count(Option<i32>)`](crate::client::fluent_builders::UpdateGameSession::set_maximum_player_session_count): <p>The maximum number of players that can be connected simultaneously to the game session.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateGameSession::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateGameSession::set_name): <p>A descriptive label that is associated with a game session. Session names do not need to be unique.</p>
    ///   - [`player_session_creation_policy(PlayerSessionCreationPolicy)`](crate::client::fluent_builders::UpdateGameSession::player_session_creation_policy) / [`set_player_session_creation_policy(Option<PlayerSessionCreationPolicy>)`](crate::client::fluent_builders::UpdateGameSession::set_player_session_creation_policy): <p>A policy that determines whether the game session is accepting new players.</p>
    ///   - [`protection_policy(ProtectionPolicy)`](crate::client::fluent_builders::UpdateGameSession::protection_policy) / [`set_protection_policy(Option<ProtectionPolicy>)`](crate::client::fluent_builders::UpdateGameSession::set_protection_policy): <p>Game session protection policy to apply to this game session only.</p>  <ul>   <li> <p> <b>NoProtection</b> -- The game session can be terminated during a scale-down event.</p> </li>   <li> <p> <b>FullProtection</b> -- If the game session is in an <code>ACTIVE</code> status, it cannot be terminated during a scale-down event.</p> </li>  </ul>
    /// - On success, responds with [`UpdateGameSessionOutput`](crate::output::UpdateGameSessionOutput) with field(s):
    ///   - [`game_session(Option<GameSession>)`](crate::output::UpdateGameSessionOutput::game_session): <p>The updated game session properties.</p>
    /// - On failure, responds with [`SdkError<UpdateGameSessionError>`](crate::error::UpdateGameSessionError)
    pub fn update_game_session(&self) -> crate::client::fluent_builders::UpdateGameSession {
        crate::client::fluent_builders::UpdateGameSession::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateGameSessionQueue`](crate::client::fluent_builders::UpdateGameSessionQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateGameSessionQueue::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateGameSessionQueue::set_name): <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region. You can use either the queue ID or ARN value. </p>
    ///   - [`timeout_in_seconds(i32)`](crate::client::fluent_builders::UpdateGameSessionQueue::timeout_in_seconds) / [`set_timeout_in_seconds(Option<i32>)`](crate::client::fluent_builders::UpdateGameSessionQueue::set_timeout_in_seconds): <p>The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.</p>
    ///   - [`player_latency_policies(Vec<PlayerLatencyPolicy>)`](crate::client::fluent_builders::UpdateGameSessionQueue::player_latency_policies) / [`set_player_latency_policies(Option<Vec<PlayerLatencyPolicy>>)`](crate::client::fluent_builders::UpdateGameSessionQueue::set_player_latency_policies): <p>A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value. When updating policies, provide a complete collection of policies.</p>
    ///   - [`destinations(Vec<GameSessionQueueDestination>)`](crate::client::fluent_builders::UpdateGameSessionQueue::destinations) / [`set_destinations(Option<Vec<GameSessionQueueDestination>>)`](crate::client::fluent_builders::UpdateGameSessionQueue::set_destinations): <p>A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference. When updating this list, provide a complete list of destinations.</p>
    ///   - [`filter_configuration(FilterConfiguration)`](crate::client::fluent_builders::UpdateGameSessionQueue::filter_configuration) / [`set_filter_configuration(Option<FilterConfiguration>)`](crate::client::fluent_builders::UpdateGameSessionQueue::set_filter_configuration): <p>A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as <code>us-west-2</code>. If this parameter is not set, game sessions can be placed in any queue location. To remove an existing filter configuration, pass in an empty set.</p>
    ///   - [`priority_configuration(PriorityConfiguration)`](crate::client::fluent_builders::UpdateGameSessionQueue::priority_configuration) / [`set_priority_configuration(Option<PriorityConfiguration>)`](crate::client::fluent_builders::UpdateGameSessionQueue::set_priority_configuration): <p>Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process. To remove an existing priority configuration, pass in an empty set.</p>
    ///   - [`custom_event_data(impl Into<String>)`](crate::client::fluent_builders::UpdateGameSessionQueue::custom_event_data) / [`set_custom_event_data(Option<String>)`](crate::client::fluent_builders::UpdateGameSessionQueue::set_custom_event_data): <p>Information to be added to all events that are related to this game session queue.</p>
    ///   - [`notification_target(impl Into<String>)`](crate::client::fluent_builders::UpdateGameSessionQueue::notification_target) / [`set_notification_target(Option<String>)`](crate::client::fluent_builders::UpdateGameSessionQueue::set_notification_target): <p>An SNS topic ARN that is set up to receive game session placement notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html"> Setting up notifications for game session placement</a>.</p>
    /// - On success, responds with [`UpdateGameSessionQueueOutput`](crate::output::UpdateGameSessionQueueOutput) with field(s):
    ///   - [`game_session_queue(Option<GameSessionQueue>)`](crate::output::UpdateGameSessionQueueOutput::game_session_queue): <p>An object that describes the newly updated game session queue.</p>
    /// - On failure, responds with [`SdkError<UpdateGameSessionQueueError>`](crate::error::UpdateGameSessionQueueError)
    pub fn update_game_session_queue(
        &self,
    ) -> crate::client::fluent_builders::UpdateGameSessionQueue {
        crate::client::fluent_builders::UpdateGameSessionQueue::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateMatchmakingConfiguration`](crate::client::fluent_builders::UpdateMatchmakingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_name): <p>A unique identifier for the matchmaking configuration to update. You can use either the configuration name or ARN value. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_description): <p>A description for the matchmaking configuration.</p>
    ///   - [`game_session_queue_arns(Vec<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::game_session_queue_arns) / [`set_game_session_queue_arns(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_game_session_queue_arns): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::gamesessionqueue/    <queue name></queue>   </region></code>. Queues can be located in any Region. Queues are used to start new GameLift-hosted game sessions for matches that are created with this matchmaking configuration. If <code>FlexMatchMode</code> is set to <code>STANDALONE</code>, do not set this parameter.</p>
    ///   - [`request_timeout_seconds(i32)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::request_timeout_seconds) / [`set_request_timeout_seconds(Option<i32>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_request_timeout_seconds): <p>The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.</p>
    ///   - [`acceptance_timeout_seconds(i32)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::acceptance_timeout_seconds) / [`set_acceptance_timeout_seconds(Option<i32>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_acceptance_timeout_seconds): <p>The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.</p>
    ///   - [`acceptance_required(bool)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::acceptance_required) / [`set_acceptance_required(Option<bool>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_acceptance_required): <p>A flag that indicates whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE. With this option enabled, matchmaking tickets use the status <code>REQUIRES_ACCEPTANCE</code> to indicate when a completed potential match is waiting for player acceptance. </p>
    ///   - [`rule_set_name(impl Into<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::rule_set_name) / [`set_rule_set_name(Option<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_rule_set_name): <p>A unique identifier for the matchmaking rule set to use with this configuration. You can use either the rule set name or ARN value. A matchmaking configuration can only use rule sets that are defined in the same Region.</p>
    ///   - [`notification_target(impl Into<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::notification_target) / [`set_notification_target(Option<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_notification_target): <p>An SNS topic ARN that is set up to receive matchmaking notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html"> Setting up notifications for matchmaking</a> for more information.</p>
    ///   - [`additional_player_count(i32)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::additional_player_count) / [`set_additional_player_count(Option<i32>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_additional_player_count): <p>The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used if <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    ///   - [`custom_event_data(impl Into<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::custom_event_data) / [`set_custom_event_data(Option<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_custom_event_data): <p>Information to add to all events related to the matchmaking configuration. </p>
    ///   - [`game_properties(Vec<GameProperty>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::game_properties) / [`set_game_properties(Option<Vec<GameProperty>>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_game_properties): <p>A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the new <code>GameSession</code> object that is created for a successful match. This parameter is not used if <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    ///   - [`game_session_data(impl Into<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::game_session_data) / [`set_game_session_data(Option<String>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_game_session_data): <p>A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession">Start a Game Session</a>). This information is added to the game session that is created for a successful match. This parameter is not used if <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    ///   - [`backfill_mode(BackfillMode)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::backfill_mode) / [`set_backfill_mode(Option<BackfillMode>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_backfill_mode): <p>The method that is used to backfill game sessions created with this matchmaking configuration. Specify MANUAL when your game manages backfill requests manually or does not use the match backfill feature. Specify AUTOMATIC to have GameLift create a match backfill request whenever a game session has one or more open slots. Learn more about manual and automatic backfill in <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html">Backfill Existing Games with FlexMatch</a>. Automatic backfill is not available when <code>FlexMatchMode</code> is set to <code>STANDALONE</code>.</p>
    ///   - [`flex_match_mode(FlexMatchMode)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::flex_match_mode) / [`set_flex_match_mode(Option<FlexMatchMode>)`](crate::client::fluent_builders::UpdateMatchmakingConfiguration::set_flex_match_mode): <p>Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution. </p>  <ul>   <li> <p> <b>STANDALONE</b> - FlexMatch forms matches and returns match information, including players and team assignments, in a <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded"> MatchmakingSucceeded</a> event.</p> </li>   <li> <p> <b>WITH_QUEUE</b> - FlexMatch forms matches and uses the specified GameLift queue to start a game session for the match. </p> </li>  </ul>
    /// - On success, responds with [`UpdateMatchmakingConfigurationOutput`](crate::output::UpdateMatchmakingConfigurationOutput) with field(s):
    ///   - [`configuration(Option<MatchmakingConfiguration>)`](crate::output::UpdateMatchmakingConfigurationOutput::configuration): <p>The updated matchmaking configuration.</p>
    /// - On failure, responds with [`SdkError<UpdateMatchmakingConfigurationError>`](crate::error::UpdateMatchmakingConfigurationError)
    pub fn update_matchmaking_configuration(
        &self,
    ) -> crate::client::fluent_builders::UpdateMatchmakingConfiguration {
        crate::client::fluent_builders::UpdateMatchmakingConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateRuntimeConfiguration`](crate::client::fluent_builders::UpdateRuntimeConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::UpdateRuntimeConfiguration::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::UpdateRuntimeConfiguration::set_fleet_id): <p>A unique identifier for the fleet to update runtime configuration for. You can use either the fleet ID or ARN value.</p>
    ///   - [`runtime_configuration(RuntimeConfiguration)`](crate::client::fluent_builders::UpdateRuntimeConfiguration::runtime_configuration) / [`set_runtime_configuration(Option<RuntimeConfiguration>)`](crate::client::fluent_builders::UpdateRuntimeConfiguration::set_runtime_configuration): <p>Instructions for alaunching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime Servers script. The runtime configuration lists the types of server processes to run on an instance, how to launch them, and the number of processes to run concurrently.</p>
    /// - On success, responds with [`UpdateRuntimeConfigurationOutput`](crate::output::UpdateRuntimeConfigurationOutput) with field(s):
    ///   - [`runtime_configuration(Option<RuntimeConfiguration>)`](crate::output::UpdateRuntimeConfigurationOutput::runtime_configuration): <p>The runtime configuration currently in use by all instances in the fleet. If the update was successful, all property changes are shown. </p>
    /// - On failure, responds with [`SdkError<UpdateRuntimeConfigurationError>`](crate::error::UpdateRuntimeConfigurationError)
    pub fn update_runtime_configuration(
        &self,
    ) -> crate::client::fluent_builders::UpdateRuntimeConfiguration {
        crate::client::fluent_builders::UpdateRuntimeConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateScript`](crate::client::fluent_builders::UpdateScript) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`script_id(impl Into<String>)`](crate::client::fluent_builders::UpdateScript::script_id) / [`set_script_id(Option<String>)`](crate::client::fluent_builders::UpdateScript::set_script_id): <p>A unique identifier for the Realtime script to update. You can use either the script ID or ARN value.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateScript::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateScript::set_name): <p>A descriptive label that is associated with a script. Script names do not need to be unique.</p>
    ///   - [`version(impl Into<String>)`](crate::client::fluent_builders::UpdateScript::version) / [`set_version(Option<String>)`](crate::client::fluent_builders::UpdateScript::set_version): <p>Version information associated with a build or script. Version strings do not need to be unique.</p>
    ///   - [`storage_location(S3Location)`](crate::client::fluent_builders::UpdateScript::storage_location) / [`set_storage_location(Option<S3Location>)`](crate::client::fluent_builders::UpdateScript::set_storage_location): <p>The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the <code>ObjectVersion</code> parameter to specify an earlier version. </p>
    ///   - [`zip_file(Blob)`](crate::client::fluent_builders::UpdateScript::zip_file) / [`set_zip_file(Option<Blob>)`](crate::client::fluent_builders::UpdateScript::set_zip_file): <p>A data object containing your Realtime scripts and dependencies as a zip file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB.</p>  <p>When using the Amazon Web Services CLI tool to create a script, this parameter is set to the zip file name. It must be prepended with the string "fileb://" to indicate that the file data is a binary object. For example: <code>--zip-file fileb://myRealtimeScript.zip</code>.</p>
    /// - On success, responds with [`UpdateScriptOutput`](crate::output::UpdateScriptOutput) with field(s):
    ///   - [`script(Option<Script>)`](crate::output::UpdateScriptOutput::script): <p>The newly created script record with a unique script ID. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the <i>CreateScript</i> request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.</p>
    /// - On failure, responds with [`SdkError<UpdateScriptError>`](crate::error::UpdateScriptError)
    pub fn update_script(&self) -> crate::client::fluent_builders::UpdateScript {
        crate::client::fluent_builders::UpdateScript::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ValidateMatchmakingRuleSet`](crate::client::fluent_builders::ValidateMatchmakingRuleSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_set_body(impl Into<String>)`](crate::client::fluent_builders::ValidateMatchmakingRuleSet::rule_set_body) / [`set_rule_set_body(Option<String>)`](crate::client::fluent_builders::ValidateMatchmakingRuleSet::set_rule_set_body): <p>A collection of matchmaking rules to validate, formatted as a JSON string.</p>
    /// - On success, responds with [`ValidateMatchmakingRuleSetOutput`](crate::output::ValidateMatchmakingRuleSetOutput) with field(s):
    ///   - [`valid(Option<bool>)`](crate::output::ValidateMatchmakingRuleSetOutput::valid): <p>A response indicating whether the rule set is valid.</p>
    /// - On failure, responds with [`SdkError<ValidateMatchmakingRuleSetError>`](crate::error::ValidateMatchmakingRuleSetError)
    pub fn validate_matchmaking_rule_set(
        &self,
    ) -> crate::client::fluent_builders::ValidateMatchmakingRuleSet {
        crate::client::fluent_builders::ValidateMatchmakingRuleSet::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
