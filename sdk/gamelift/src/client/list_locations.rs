// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListLocations`](crate::client::fluent_builders::ListLocations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListLocations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(Vec<LocationFilter>)`](crate::client::fluent_builders::ListLocations::filters) / [`set_filters(Option<Vec<LocationFilter>>)`](crate::client::fluent_builders::ListLocations::set_filters): <p>Filters the list for <code>AWS</code> or <code>CUSTOM</code> locations.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListLocations::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListLocations::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLocations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLocations::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`ListLocationsOutput`](crate::output::ListLocationsOutput) with field(s):
    ///   - [`locations(Option<Vec<LocationModel>>)`](crate::output::ListLocationsOutput::locations): <p>A collection of locations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListLocationsOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<ListLocationsError>`](crate::error::ListLocationsError)
    pub fn list_locations(&self) -> crate::client::fluent_builders::ListLocations {
        crate::client::fluent_builders::ListLocations::new(self.handle.clone())
    }
}
