// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreatePlayerSession`](crate::client::fluent_builders::CreatePlayerSession) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_session_id(impl Into<String>)`](crate::client::fluent_builders::CreatePlayerSession::game_session_id) / [`set_game_session_id(Option<String>)`](crate::client::fluent_builders::CreatePlayerSession::set_game_session_id): <p>A unique identifier for the game session to add a player to.</p>
    ///   - [`player_id(impl Into<String>)`](crate::client::fluent_builders::CreatePlayerSession::player_id) / [`set_player_id(Option<String>)`](crate::client::fluent_builders::CreatePlayerSession::set_player_id): <p>A unique identifier for a player. Player IDs are developer-defined.</p>
    ///   - [`player_data(impl Into<String>)`](crate::client::fluent_builders::CreatePlayerSession::player_data) / [`set_player_data(Option<String>)`](crate::client::fluent_builders::CreatePlayerSession::set_player_data): <p>Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.</p>
    /// - On success, responds with [`CreatePlayerSessionOutput`](crate::output::CreatePlayerSessionOutput) with field(s):
    ///   - [`player_session(Option<PlayerSession>)`](crate::output::CreatePlayerSessionOutput::player_session): <p>Object that describes the newly created player session record.</p>
    /// - On failure, responds with [`SdkError<CreatePlayerSessionError>`](crate::error::CreatePlayerSessionError)
    pub fn create_player_session(&self) -> crate::client::fluent_builders::CreatePlayerSession {
        crate::client::fluent_builders::CreatePlayerSession::new(self.handle.clone())
    }
}
