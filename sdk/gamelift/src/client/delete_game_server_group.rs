// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteGameServerGroup`](crate::client::fluent_builders::DeleteGameServerGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::client::fluent_builders::DeleteGameServerGroup::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::client::fluent_builders::DeleteGameServerGroup::set_game_server_group_name): <p>A unique identifier for the game server group. Use either the name or ARN value.</p>
    ///   - [`delete_option(GameServerGroupDeleteOption)`](crate::client::fluent_builders::DeleteGameServerGroup::delete_option) / [`set_delete_option(Option<GameServerGroupDeleteOption>)`](crate::client::fluent_builders::DeleteGameServerGroup::set_delete_option): <p>The type of delete to perform. Options include the following:</p>  <ul>   <li> <p> <code>SAFE_DELETE</code> – (default) Terminates the game server group and Amazon EC2 Auto Scaling group only when it has no game servers that are in <code>UTILIZED</code> status.</p> </li>   <li> <p> <code>FORCE_DELETE</code> – Terminates the game server group, including all active game servers regardless of their utilization status, and the Amazon EC2 Auto Scaling group. </p> </li>   <li> <p> <code>RETAIN</code> – Does a safe delete of the game server group but retains the Amazon EC2 Auto Scaling group as is.</p> </li>  </ul>
    /// - On success, responds with [`DeleteGameServerGroupOutput`](crate::output::DeleteGameServerGroupOutput) with field(s):
    ///   - [`game_server_group(Option<GameServerGroup>)`](crate::output::DeleteGameServerGroupOutput::game_server_group): <p>An object that describes the deleted game server group resource, with status updated to <code>DELETE_SCHEDULED</code>. </p>
    /// - On failure, responds with [`SdkError<DeleteGameServerGroupError>`](crate::error::DeleteGameServerGroupError)
    pub fn delete_game_server_group(
        &self,
    ) -> crate::client::fluent_builders::DeleteGameServerGroup {
        crate::client::fluent_builders::DeleteGameServerGroup::new(self.handle.clone())
    }
}
