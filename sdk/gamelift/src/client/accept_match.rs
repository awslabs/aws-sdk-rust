// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AcceptMatch`](crate::client::fluent_builders::AcceptMatch) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ticket_id(impl Into<String>)`](crate::client::fluent_builders::AcceptMatch::ticket_id) / [`set_ticket_id(Option<String>)`](crate::client::fluent_builders::AcceptMatch::set_ticket_id): <p>A unique identifier for a matchmaking ticket. The ticket must be in status <code>REQUIRES_ACCEPTANCE</code>; otherwise this request will fail.</p>
    ///   - [`player_ids(Vec<String>)`](crate::client::fluent_builders::AcceptMatch::player_ids) / [`set_player_ids(Option<Vec<String>>)`](crate::client::fluent_builders::AcceptMatch::set_player_ids): <p>A unique identifier for a player delivering the response. This parameter can include one or multiple player IDs.</p>
    ///   - [`acceptance_type(AcceptanceType)`](crate::client::fluent_builders::AcceptMatch::acceptance_type) / [`set_acceptance_type(Option<AcceptanceType>)`](crate::client::fluent_builders::AcceptMatch::set_acceptance_type): <p>Player response to the proposed match.</p>
    /// - On success, responds with [`AcceptMatchOutput`](crate::output::AcceptMatchOutput)
    /// - On failure, responds with [`SdkError<AcceptMatchError>`](crate::error::AcceptMatchError)
    pub fn accept_match(&self) -> crate::client::fluent_builders::AcceptMatch {
        crate::client::fluent_builders::AcceptMatch::new(self.handle.clone())
    }
}
