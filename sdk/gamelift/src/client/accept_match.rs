// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AcceptMatch`](crate::operation::accept_match::builders::AcceptMatchFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ticket_id(impl Into<String>)`](crate::operation::accept_match::builders::AcceptMatchFluentBuilder::ticket_id) / [`set_ticket_id(Option<String>)`](crate::operation::accept_match::builders::AcceptMatchFluentBuilder::set_ticket_id):<br>required: **true**<br><p>A unique identifier for a matchmaking ticket. The ticket must be in status <code>REQUIRES_ACCEPTANCE</code>; otherwise this request will fail.</p><br>
    ///   - [`player_ids(impl Into<String>)`](crate::operation::accept_match::builders::AcceptMatchFluentBuilder::player_ids) / [`set_player_ids(Option<Vec::<String>>)`](crate::operation::accept_match::builders::AcceptMatchFluentBuilder::set_player_ids):<br>required: **true**<br><p>A unique identifier for a player delivering the response. This parameter can include one or multiple player IDs.</p><br>
    ///   - [`acceptance_type(AcceptanceType)`](crate::operation::accept_match::builders::AcceptMatchFluentBuilder::acceptance_type) / [`set_acceptance_type(Option<AcceptanceType>)`](crate::operation::accept_match::builders::AcceptMatchFluentBuilder::set_acceptance_type):<br>required: **true**<br><p>Player response to the proposed match.</p><br>
    /// - On success, responds with [`AcceptMatchOutput`](crate::operation::accept_match::AcceptMatchOutput)
    /// - On failure, responds with [`SdkError<AcceptMatchError>`](crate::operation::accept_match::AcceptMatchError)
    pub fn accept_match(&self) -> crate::operation::accept_match::builders::AcceptMatchFluentBuilder {
        crate::operation::accept_match::builders::AcceptMatchFluentBuilder::new(self.handle.clone())
    }
}
