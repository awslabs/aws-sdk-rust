// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateBuild`](crate::operation::create_build::builders::CreateBuildFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_build::builders::CreateBuildFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_build::builders::CreateBuildFluentBuilder::set_name): <p>A descriptive label associated with a build. Build names do not need to be unique. You can change this value later. </p>
    ///   - [`version(impl Into<String>)`](crate::operation::create_build::builders::CreateBuildFluentBuilder::version) / [`set_version(Option<String>)`](crate::operation::create_build::builders::CreateBuildFluentBuilder::set_version): <p>Version information associated with a build or script. Version strings do not need to be unique. You can change this value later. </p>
    ///   - [`storage_location(S3Location)`](crate::operation::create_build::builders::CreateBuildFluentBuilder::storage_location) / [`set_storage_location(Option<S3Location>)`](crate::operation::create_build::builders::CreateBuildFluentBuilder::set_storage_location): <p>Information indicating where your game build files are stored. Use this parameter only when creating a build with files stored in an Amazon S3 bucket that you own. The storage location must specify an Amazon S3 bucket name and key. The location must also specify a role ARN that you set up to allow Amazon GameLift to access your Amazon S3 bucket. The S3 bucket and your new build must be in the same Region.</p>  <p>If a <code>StorageLocation</code> is specified, the size of your file can be found in your Amazon S3 bucket. Amazon GameLift will report a <code>SizeOnDisk</code> of 0. </p>
    ///   - [`operating_system(OperatingSystem)`](crate::operation::create_build::builders::CreateBuildFluentBuilder::operating_system) / [`set_operating_system(Option<OperatingSystem>)`](crate::operation::create_build::builders::CreateBuildFluentBuilder::set_operating_system): <p>The operating system that you built the game server binaries to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system. If an operating system is not specified when creating a build, GameLift uses the default value (WINDOWS_2012). This value cannot be changed later.</p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_build::builders::CreateBuildFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_build::builders::CreateBuildFluentBuilder::set_tags): <p>A list of labels to assign to the new build resource. Tags are developer defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>. Once the resource is created, you can use <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_TagResource.html">TagResource</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UntagResource.html">UntagResource</a>, and <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ListTagsForResource.html">ListTagsForResource</a> to add, remove, and view tags. The maximum tag limit may be lower than stated. See the Amazon Web Services General Reference for actual tagging limits.</p>
    ///   - [`server_sdk_version(impl Into<String>)`](crate::operation::create_build::builders::CreateBuildFluentBuilder::server_sdk_version) / [`set_server_sdk_version(Option<String>)`](crate::operation::create_build::builders::CreateBuildFluentBuilder::set_server_sdk_version): <p>A server SDK version you used when integrating your game server build with GameLift. For more information see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/integration-custom-intro.html">Integrate games with custom game servers</a>.</p>
    /// - On success, responds with [`CreateBuildOutput`](crate::operation::create_build::CreateBuildOutput) with field(s):
    ///   - [`build_value(Option<Build>)`](crate::operation::create_build::CreateBuildOutput::build_value): <p>The newly created build resource, including a unique build IDs and status. </p>
    ///   - [`upload_credentials(Option<AwsCredentials>)`](crate::operation::create_build::CreateBuildOutput::upload_credentials): <p>This element is returned only when the operation is called without a storage location. It contains credentials to use when you are uploading a build file to an Amazon S3 bucket that is owned by Amazon GameLift. Credentials have a limited life span. To refresh these credentials, call <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_RequestUploadCredentials.html">RequestUploadCredentials</a>. </p>
    ///   - [`storage_location(Option<S3Location>)`](crate::operation::create_build::CreateBuildOutput::storage_location): <p>Amazon S3 location for your game build file, including bucket name and key.</p>
    /// - On failure, responds with [`SdkError<CreateBuildError>`](crate::operation::create_build::CreateBuildError)
    pub fn create_build(
        &self,
    ) -> crate::operation::create_build::builders::CreateBuildFluentBuilder {
        crate::operation::create_build::builders::CreateBuildFluentBuilder::new(self.handle.clone())
    }
}
