// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetInstanceAccess`](crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder::fleet_id) / [`set_fleet_id(Option<String>)`](crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder::set_fleet_id):<br>required: **true**<br><p>A unique identifier for the fleet that contains the instance you want to access. You can request access to instances in EC2 fleets with the following statuses: <code>ACTIVATING</code>, <code>ACTIVE</code>, or <code>ERROR</code>. Use either a fleet ID or an ARN value. </p> <note>   <p>You can access fleets in <code>ERROR</code> status for a short period of time before Amazon GameLift deletes them.</p>  </note><br>
    ///   - [`instance_id(impl Into<String>)`](crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder::instance_id) / [`set_instance_id(Option<String>)`](crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder::set_instance_id):<br>required: **true**<br><p>A unique identifier for the instance you want to access. You can access an instance in any status.</p><br>
    /// - On success, responds with [`GetInstanceAccessOutput`](crate::operation::get_instance_access::GetInstanceAccessOutput) with field(s):
    ///   - [`instance_access(Option<InstanceAccess>)`](crate::operation::get_instance_access::GetInstanceAccessOutput::instance_access): <p>The connection information for a fleet instance, including IP address and access credentials.</p>
    /// - On failure, responds with [`SdkError<GetInstanceAccessError>`](crate::operation::get_instance_access::GetInstanceAccessError)
    pub fn get_instance_access(&self) -> crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder {
        crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder::new(self.handle.clone())
    }
}
