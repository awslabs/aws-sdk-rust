// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetInstanceAccess`](crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder::fleet_id) / [`set_fleet_id(Option<String>)`](crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder::set_fleet_id): <p>A unique identifier for the fleet that contains the instance you want access to. You can use either the fleet ID or ARN value. The fleet can be in any of the following statuses: <code>ACTIVATING</code>, <code>ACTIVE</code>, or <code>ERROR</code>. Fleets with an <code>ERROR</code> status may be accessible for a short time before they are deleted.</p>
    ///   - [`instance_id(impl Into<String>)`](crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder::instance_id) / [`set_instance_id(Option<String>)`](crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder::set_instance_id): <p>A unique identifier for the instance you want to get access to. You can access an instance in any status.</p>
    /// - On success, responds with [`GetInstanceAccessOutput`](crate::operation::get_instance_access::GetInstanceAccessOutput) with field(s):
    ///   - [`instance_access(Option<InstanceAccess>)`](crate::operation::get_instance_access::GetInstanceAccessOutput::instance_access): <p>The connection information for a fleet instance, including IP address and access credentials.</p>
    /// - On failure, responds with [`SdkError<GetInstanceAccessError>`](crate::operation::get_instance_access::GetInstanceAccessError)
    pub fn get_instance_access(
        &self,
    ) -> crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder {
        crate::operation::get_instance_access::builders::GetInstanceAccessFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
