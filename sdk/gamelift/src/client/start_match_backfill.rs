// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartMatchBackfill`](crate::operation::start_match_backfill::builders::StartMatchBackfillFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ticket_id(impl Into<String>)`](crate::operation::start_match_backfill::builders::StartMatchBackfillFluentBuilder::ticket_id) / [`set_ticket_id(Option<String>)`](crate::operation::start_match_backfill::builders::StartMatchBackfillFluentBuilder::set_ticket_id): <p>A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the match backfill ticket status and retrieve match results.</p>
    ///   - [`configuration_name(impl Into<String>)`](crate::operation::start_match_backfill::builders::StartMatchBackfillFluentBuilder::configuration_name) / [`set_configuration_name(Option<String>)`](crate::operation::start_match_backfill::builders::StartMatchBackfillFluentBuilder::set_configuration_name): <p>Name of the matchmaker to use for this request. You can use either the configuration name or ARN value. The ARN of the matchmaker that was used with the original game session is listed in the <code>GameSession</code> object, <code>MatchmakerData</code> property.</p>
    ///   - [`game_session_arn(impl Into<String>)`](crate::operation::start_match_backfill::builders::StartMatchBackfillFluentBuilder::game_session_arn) / [`set_game_session_arn(Option<String>)`](crate::operation::start_match_backfill::builders::StartMatchBackfillFluentBuilder::set_game_session_arn): <p>A unique identifier for the game session. Use the game session ID. When using FlexMatch as a standalone matchmaking solution, this parameter is not needed. </p>
    ///   - [`players(Vec<Player>)`](crate::operation::start_match_backfill::builders::StartMatchBackfillFluentBuilder::players) / [`set_players(Option<Vec<Player>>)`](crate::operation::start_match_backfill::builders::StartMatchBackfillFluentBuilder::set_players): <p>Match information on all players that are currently assigned to the game session. This information is used by the matchmaker to find new players and add them to the existing game.</p>  <p>You can include up to 199 <code>Players</code> in a <code>StartMatchBackfill</code> request.</p>  <ul>   <li> <p>PlayerID, PlayerAttributes, Team -- This information is maintained in the <code>GameSession</code> object, <code>MatchmakerData</code> property, for all players who are currently assigned to the game session. The matchmaker data is in JSON syntax, formatted as a string. For more details, see <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data"> Match Data</a>. </p> <p>The backfill request must specify the team membership for every player. Do not specify team if you are not using backfill.</p> </li>   <li> <p>LatencyInMs -- If the matchmaker uses player latency, include a latency value, in milliseconds, for the Region that the game session is currently in. Do not include latency values for any other Region.</p> </li>  </ul>
    /// - On success, responds with [`StartMatchBackfillOutput`](crate::operation::start_match_backfill::StartMatchBackfillOutput) with field(s):
    ///   - [`matchmaking_ticket(Option<MatchmakingTicket>)`](crate::operation::start_match_backfill::StartMatchBackfillOutput::matchmaking_ticket): <p>Ticket representing the backfill matchmaking request. This object includes the information in the request, ticket status, and match results as generated during the matchmaking process.</p>
    /// - On failure, responds with [`SdkError<StartMatchBackfillError>`](crate::operation::start_match_backfill::StartMatchBackfillError)
    pub fn start_match_backfill(
        &self,
    ) -> crate::operation::start_match_backfill::builders::StartMatchBackfillFluentBuilder {
        crate::operation::start_match_backfill::builders::StartMatchBackfillFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
