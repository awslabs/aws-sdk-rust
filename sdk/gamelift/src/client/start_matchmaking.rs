// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartMatchmaking`](crate::operation::start_matchmaking::builders::StartMatchmakingFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ticket_id(impl Into<String>)`](crate::operation::start_matchmaking::builders::StartMatchmakingFluentBuilder::ticket_id) / [`set_ticket_id(Option<String>)`](crate::operation::start_matchmaking::builders::StartMatchmakingFluentBuilder::set_ticket_id): <p>A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the matchmaking ticket status and retrieve match results.</p>
    ///   - [`configuration_name(impl Into<String>)`](crate::operation::start_matchmaking::builders::StartMatchmakingFluentBuilder::configuration_name) / [`set_configuration_name(Option<String>)`](crate::operation::start_matchmaking::builders::StartMatchmakingFluentBuilder::set_configuration_name): <p>Name of the matchmaking configuration to use for this request. Matchmaking configurations must exist in the same Region as this request. You can use either the configuration name or ARN value.</p>
    ///   - [`players(Vec<Player>)`](crate::operation::start_matchmaking::builders::StartMatchmakingFluentBuilder::players) / [`set_players(Option<Vec<Player>>)`](crate::operation::start_matchmaking::builders::StartMatchmakingFluentBuilder::set_players): <p>Information on each player to be matched. This information must include a player ID, and may contain player attributes and latency data to be used in the matchmaking process. After a successful match, <code>Player</code> objects contain the name of the team the player is assigned to.</p>  <p>You can include up to 10 <code>Players</code> in a <code>StartMatchmaking</code> request.</p>
    /// - On success, responds with [`StartMatchmakingOutput`](crate::operation::start_matchmaking::StartMatchmakingOutput) with field(s):
    ///   - [`matchmaking_ticket(Option<MatchmakingTicket>)`](crate::operation::start_matchmaking::StartMatchmakingOutput::matchmaking_ticket): <p>Ticket representing the matchmaking request. This object include the information included in the request, ticket status, and match results as generated during the matchmaking process.</p>
    /// - On failure, responds with [`SdkError<StartMatchmakingError>`](crate::operation::start_matchmaking::StartMatchmakingError)
    pub fn start_matchmaking(
        &self,
    ) -> crate::operation::start_matchmaking::builders::StartMatchmakingFluentBuilder {
        crate::operation::start_matchmaking::builders::StartMatchmakingFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
