// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateGameServerGroup`](crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder::set_game_server_group_name): <p>A unique identifier for the game server group. Use either the name or ARN value.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder::set_role_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) for an IAM role that allows Amazon GameLift to access your Amazon EC2 Auto Scaling groups.</p>
    ///   - [`instance_definitions(Vec<InstanceDefinition>)`](crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder::instance_definitions) / [`set_instance_definitions(Option<Vec<InstanceDefinition>>)`](crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder::set_instance_definitions): <p>An updated list of Amazon EC2 instance types to use in the Auto Scaling group. The instance definitions must specify at least two different instance types that are supported by GameLift FleetIQ. This updated list replaces the entire current list of instance definitions for the game server group. For more information on instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">EC2 Instance Types</a> in the <i>Amazon EC2 User Guide</i>. You can optionally specify capacity weighting for each instance type. If no weight value is specified for an instance type, it is set to the default value "1". For more information about capacity weighting, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html"> Instance Weighting for Amazon EC2 Auto Scaling</a> in the Amazon EC2 Auto Scaling User Guide.</p>
    ///   - [`game_server_protection_policy(GameServerProtectionPolicy)`](crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder::game_server_protection_policy) / [`set_game_server_protection_policy(Option<GameServerProtectionPolicy>)`](crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder::set_game_server_protection_policy): <p>A flag that indicates whether instances in the game server group are protected from early termination. Unprotected instances that have active game servers running might be terminated during a scale-down event, causing players to be dropped from the game. Protected instances cannot be terminated while there are active game servers running except in the event of a forced game server group deletion (see ). An exception to this is with Spot Instances, which can be terminated by Amazon Web Services regardless of protection status. This property is set to <code>NO_PROTECTION</code> by default.</p>
    ///   - [`balancing_strategy(BalancingStrategy)`](crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder::balancing_strategy) / [`set_balancing_strategy(Option<BalancingStrategy>)`](crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder::set_balancing_strategy): <p>Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the game server group. Method options include the following:</p>  <ul>   <li> <p> <code>SPOT_ONLY</code> - Only Spot Instances are used in the game server group. If Spot Instances are unavailable or not viable for game hosting, the game server group provides no hosting capacity until Spot Instances can again be used. Until then, no new instances are started, and the existing nonviable Spot Instances are terminated (after current gameplay ends) and are not replaced.</p> </li>   <li> <p> <code>SPOT_PREFERRED</code> - (default value) Spot Instances are used whenever available in the game server group. If Spot Instances are unavailable, the game server group continues to provide hosting capacity by falling back to On-Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends) and are replaced with new On-Demand Instances.</p> </li>   <li> <p> <code>ON_DEMAND_ONLY</code> - Only On-Demand Instances are used in the game server group. No Spot Instances are used, even when available, while this balancing strategy is in force.</p> </li>  </ul>
    /// - On success, responds with [`UpdateGameServerGroupOutput`](crate::operation::update_game_server_group::UpdateGameServerGroupOutput) with field(s):
    ///   - [`game_server_group(Option<GameServerGroup>)`](crate::operation::update_game_server_group::UpdateGameServerGroupOutput::game_server_group): <p>An object that describes the game server group resource with updated properties. </p>
    /// - On failure, responds with [`SdkError<UpdateGameServerGroupError>`](crate::operation::update_game_server_group::UpdateGameServerGroupError)
    pub fn update_game_server_group(
        &self,
    ) -> crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder
    {
        crate::operation::update_game_server_group::builders::UpdateGameServerGroupFluentBuilder::new(self.handle.clone())
    }
}
