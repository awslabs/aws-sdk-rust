// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListAliases`](crate::operation::list_aliases::builders::ListAliasesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_aliases::builders::ListAliasesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`routing_strategy_type(RoutingStrategyType)`](crate::operation::list_aliases::builders::ListAliasesFluentBuilder::routing_strategy_type) / [`set_routing_strategy_type(Option<RoutingStrategyType>)`](crate::operation::list_aliases::builders::ListAliasesFluentBuilder::set_routing_strategy_type): <p>The routing type to filter results on. Use this parameter to retrieve only aliases with a certain routing type. To retrieve all aliases, leave this parameter empty.</p>  <p>Possible routing types include the following:</p>  <ul>   <li> <p> <b>SIMPLE</b> -- The alias resolves to one specific fleet. Use this type when routing to active fleets.</p> </li>   <li> <p> <b>TERMINAL</b> -- The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_RoutingStrategy.html">RoutingStrategy</a> message embedded.</p> </li>  </ul>
    ///   - [`name(impl Into<String>)`](crate::operation::list_aliases::builders::ListAliasesFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::list_aliases::builders::ListAliasesFluentBuilder::set_name): <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    ///   - [`limit(i32)`](crate::operation::list_aliases::builders::ListAliasesFluentBuilder::limit) / [`set_limit(Option<i32>)`](crate::operation::list_aliases::builders::ListAliasesFluentBuilder::set_limit): <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_aliases::builders::ListAliasesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_aliases::builders::ListAliasesFluentBuilder::set_next_token): <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    /// - On success, responds with [`ListAliasesOutput`](crate::operation::list_aliases::ListAliasesOutput) with field(s):
    ///   - [`aliases(Option<Vec<Alias>>)`](crate::operation::list_aliases::ListAliasesOutput::aliases): <p>A collection of alias resources that match the request parameters.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_aliases::ListAliasesOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<ListAliasesError>`](crate::operation::list_aliases::ListAliasesError)
    pub fn list_aliases(
        &self,
    ) -> crate::operation::list_aliases::builders::ListAliasesFluentBuilder {
        crate::operation::list_aliases::builders::ListAliasesFluentBuilder::new(self.handle.clone())
    }
}
