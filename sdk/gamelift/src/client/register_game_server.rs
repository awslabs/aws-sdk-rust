// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RegisterGameServer`](crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder::set_game_server_group_name): <p>A unique identifier for the game server group where the game server is running.</p>
    ///   - [`game_server_id(impl Into<String>)`](crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder::game_server_id) / [`set_game_server_id(Option<String>)`](crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder::set_game_server_id): <p>A custom string that uniquely identifies the game server to register. Game server IDs are developer-defined and must be unique across all game server groups in your Amazon Web Services account.</p>
    ///   - [`instance_id(impl Into<String>)`](crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder::instance_id) / [`set_instance_id(Option<String>)`](crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder::set_instance_id): <p>The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: <code>i-1234567890abcdef0</code>.</p>
    ///   - [`connection_info(impl Into<String>)`](crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder::connection_info) / [`set_connection_info(Option<String>)`](crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder::set_connection_info): <p>Information that is needed to make inbound client connections to the game server. This might include the IP address and port, DNS name, and other information.</p>
    ///   - [`game_server_data(impl Into<String>)`](crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder::game_server_data) / [`set_game_server_data(Option<String>)`](crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder::set_game_server_data): <p>A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers. </p>
    /// - On success, responds with [`RegisterGameServerOutput`](crate::operation::register_game_server::RegisterGameServerOutput) with field(s):
    ///   - [`game_server(Option<GameServer>)`](crate::operation::register_game_server::RegisterGameServerOutput::game_server): <p>Object that describes the newly registered game server.</p>
    /// - On failure, responds with [`SdkError<RegisterGameServerError>`](crate::operation::register_game_server::RegisterGameServerError)
    pub fn register_game_server(
        &self,
    ) -> crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder {
        crate::operation::register_game_server::builders::RegisterGameServerFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
