// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ResumeGameServerGroup`](crate::operation::resume_game_server_group::builders::ResumeGameServerGroupFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_server_group_name(impl Into<String>)`](crate::operation::resume_game_server_group::builders::ResumeGameServerGroupFluentBuilder::game_server_group_name) / [`set_game_server_group_name(Option<String>)`](crate::operation::resume_game_server_group::builders::ResumeGameServerGroupFluentBuilder::set_game_server_group_name):<br>required: **true**<br><p>A unique identifier for the game server group. Use either the name or ARN value.</p><br>
    ///   - [`resume_actions(GameServerGroupAction)`](crate::operation::resume_game_server_group::builders::ResumeGameServerGroupFluentBuilder::resume_actions) / [`set_resume_actions(Option<Vec::<GameServerGroupAction>>)`](crate::operation::resume_game_server_group::builders::ResumeGameServerGroupFluentBuilder::set_resume_actions):<br>required: **true**<br><p>The activity to resume for this game server group.</p><br>
    /// - On success, responds with [`ResumeGameServerGroupOutput`](crate::operation::resume_game_server_group::ResumeGameServerGroupOutput) with field(s):
    ///   - [`game_server_group(Option<GameServerGroup>)`](crate::operation::resume_game_server_group::ResumeGameServerGroupOutput::game_server_group): <p>An object that describes the game server group resource, with the <code>SuspendedActions</code> property updated to reflect the resumed activity.</p>
    /// - On failure, responds with [`SdkError<ResumeGameServerGroupError>`](crate::operation::resume_game_server_group::ResumeGameServerGroupError)
    pub fn resume_game_server_group(&self) -> crate::operation::resume_game_server_group::builders::ResumeGameServerGroupFluentBuilder {
        crate::operation::resume_game_server_group::builders::ResumeGameServerGroupFluentBuilder::new(self.handle.clone())
    }
}
