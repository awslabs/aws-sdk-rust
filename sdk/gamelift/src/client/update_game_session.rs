// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateGameSession`](crate::client::fluent_builders::UpdateGameSession) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_session_id(impl Into<String>)`](crate::client::fluent_builders::UpdateGameSession::game_session_id) / [`set_game_session_id(Option<String>)`](crate::client::fluent_builders::UpdateGameSession::set_game_session_id): <p>A unique identifier for the game session to update. </p>
    ///   - [`maximum_player_session_count(i32)`](crate::client::fluent_builders::UpdateGameSession::maximum_player_session_count) / [`set_maximum_player_session_count(Option<i32>)`](crate::client::fluent_builders::UpdateGameSession::set_maximum_player_session_count): <p>The maximum number of players that can be connected simultaneously to the game session.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateGameSession::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateGameSession::set_name): <p>A descriptive label that is associated with a game session. Session names do not need to be unique.</p>
    ///   - [`player_session_creation_policy(PlayerSessionCreationPolicy)`](crate::client::fluent_builders::UpdateGameSession::player_session_creation_policy) / [`set_player_session_creation_policy(Option<PlayerSessionCreationPolicy>)`](crate::client::fluent_builders::UpdateGameSession::set_player_session_creation_policy): <p>A policy that determines whether the game session is accepting new players.</p>
    ///   - [`protection_policy(ProtectionPolicy)`](crate::client::fluent_builders::UpdateGameSession::protection_policy) / [`set_protection_policy(Option<ProtectionPolicy>)`](crate::client::fluent_builders::UpdateGameSession::set_protection_policy): <p>Game session protection policy to apply to this game session only.</p>  <ul>   <li> <p> <b>NoProtection</b> -- The game session can be terminated during a scale-down event.</p> </li>   <li> <p> <b>FullProtection</b> -- If the game session is in an <code>ACTIVE</code> status, it cannot be terminated during a scale-down event.</p> </li>  </ul>
    /// - On success, responds with [`UpdateGameSessionOutput`](crate::output::UpdateGameSessionOutput) with field(s):
    ///   - [`game_session(Option<GameSession>)`](crate::output::UpdateGameSessionOutput::game_session): <p>The updated game session properties.</p>
    /// - On failure, responds with [`SdkError<UpdateGameSessionError>`](crate::error::UpdateGameSessionError)
    pub fn update_game_session(&self) -> crate::client::fluent_builders::UpdateGameSession {
        crate::client::fluent_builders::UpdateGameSession::new(self.handle.clone())
    }
}
