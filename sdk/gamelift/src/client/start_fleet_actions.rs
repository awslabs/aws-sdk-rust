// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartFleetActions`](crate::client::fluent_builders::StartFleetActions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::client::fluent_builders::StartFleetActions::fleet_id) / [`set_fleet_id(Option<String>)`](crate::client::fluent_builders::StartFleetActions::set_fleet_id): <p>A unique identifier for the fleet to restart actions on. You can use either the fleet ID or ARN value.</p>
    ///   - [`actions(Vec<FleetAction>)`](crate::client::fluent_builders::StartFleetActions::actions) / [`set_actions(Option<Vec<FleetAction>>)`](crate::client::fluent_builders::StartFleetActions::set_actions): <p>List of actions to restart on the fleet.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::StartFleetActions::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::StartFleetActions::set_location): <p>The fleet location to restart fleet actions for. Specify a location in the form of an Amazon Web Services Region code, such as <code>us-west-2</code>.</p>
    /// - On success, responds with [`StartFleetActionsOutput`](crate::output::StartFleetActionsOutput) with field(s):
    ///   - [`fleet_id(Option<String>)`](crate::output::StartFleetActionsOutput::fleet_id): <p>A unique identifier for the fleet to restart actions on.</p>
    ///   - [`fleet_arn(Option<String>)`](crate::output::StartFleetActionsOutput::fleet_arn): <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:   <region>    ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912   </region></code>.</p>
    /// - On failure, responds with [`SdkError<StartFleetActionsError>`](crate::error::StartFleetActionsError)
    pub fn start_fleet_actions(&self) -> crate::client::fluent_builders::StartFleetActions {
        crate::client::fluent_builders::StartFleetActions::new(self.handle.clone())
    }
}
