// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateGameSessionQueue`](crate::client::fluent_builders::CreateGameSessionQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateGameSessionQueue::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_name): <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region.</p>
    ///   - [`timeout_in_seconds(i32)`](crate::client::fluent_builders::CreateGameSessionQueue::timeout_in_seconds) / [`set_timeout_in_seconds(Option<i32>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_timeout_in_seconds): <p>The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.</p>
    ///   - [`player_latency_policies(Vec<PlayerLatencyPolicy>)`](crate::client::fluent_builders::CreateGameSessionQueue::player_latency_policies) / [`set_player_latency_policies(Option<Vec<PlayerLatencyPolicy>>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_player_latency_policies): <p>A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value.</p>
    ///   - [`destinations(Vec<GameSessionQueueDestination>)`](crate::client::fluent_builders::CreateGameSessionQueue::destinations) / [`set_destinations(Option<Vec<GameSessionQueueDestination>>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_destinations): <p>A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.</p>
    ///   - [`filter_configuration(FilterConfiguration)`](crate::client::fluent_builders::CreateGameSessionQueue::filter_configuration) / [`set_filter_configuration(Option<FilterConfiguration>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_filter_configuration): <p>A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as <code>us-west-2</code>. If this parameter is not set, game sessions can be placed in any queue location. </p>
    ///   - [`priority_configuration(PriorityConfiguration)`](crate::client::fluent_builders::CreateGameSessionQueue::priority_configuration) / [`set_priority_configuration(Option<PriorityConfiguration>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_priority_configuration): <p>Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process. </p>
    ///   - [`custom_event_data(impl Into<String>)`](crate::client::fluent_builders::CreateGameSessionQueue::custom_event_data) / [`set_custom_event_data(Option<String>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_custom_event_data): <p>Information to be added to all events that are related to this game session queue.</p>
    ///   - [`notification_target(impl Into<String>)`](crate::client::fluent_builders::CreateGameSessionQueue::notification_target) / [`set_notification_target(Option<String>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_notification_target): <p>An SNS topic ARN that is set up to receive game session placement notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html"> Setting up notifications for game session placement</a>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateGameSessionQueue::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateGameSessionQueue::set_tags): <p>A list of labels to assign to the new game session queue resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// - On success, responds with [`CreateGameSessionQueueOutput`](crate::output::CreateGameSessionQueueOutput) with field(s):
    ///   - [`game_session_queue(Option<GameSessionQueue>)`](crate::output::CreateGameSessionQueueOutput::game_session_queue): <p>An object that describes the newly created game session queue.</p>
    /// - On failure, responds with [`SdkError<CreateGameSessionQueueError>`](crate::error::CreateGameSessionQueueError)
    pub fn create_game_session_queue(
        &self,
    ) -> crate::client::fluent_builders::CreateGameSessionQueue {
        crate::client::fluent_builders::CreateGameSessionQueue::new(self.handle.clone())
    }
}
