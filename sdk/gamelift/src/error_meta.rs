// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.</p>
    /// <p></p>
    ConflictException(crate::error::ConflictException),
    /// <p>The specified fleet has no available instances to fulfill a <code>CreateGameSession</code> request. Clients can retry such requests immediately or after a waiting period.</p>
    FleetCapacityExceededException(crate::error::FleetCapacityExceededException),
    /// <p>The game instance is currently full and cannot allow the requested player(s) to join. Clients can retry such requests immediately or after a waiting period.</p>
    GameSessionFullException(crate::error::GameSessionFullException),
    /// <p>A game session with this custom ID string already exists in this fleet. Resolve this conflict before retrying this request.</p>
    IdempotentParameterMismatchException(crate::error::IdempotentParameterMismatchException),
    /// <p>The service encountered an unrecoverable internal failure while processing the request. Clients can retry such requests immediately or after a waiting period.</p>
    InternalServiceException(crate::error::InternalServiceException),
    /// <p>The requested operation would cause a conflict with the current state of a resource associated with the request and/or the fleet. Resolve the conflict before retrying.</p>
    InvalidFleetStatusException(crate::error::InvalidFleetStatusException),
    /// <p>The requested operation would cause a conflict with the current state of a resource associated with the request and/or the game instance. Resolve the conflict before retrying.</p>
    InvalidGameSessionStatusException(crate::error::InvalidGameSessionStatusException),
    /// <p>One or more parameter values in the request are invalid. Correct the invalid parameter values before retrying.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The requested operation would cause the resource to exceed the allowed service limit. Resolve the issue before retrying.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>THe requested resources was not found. The resource was either not created yet or deleted.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>The specified game server group has no available game servers to fulfill a <code>ClaimGameServer</code> request. Clients can retry such requests immediately or after a waiting period.</p>
    OutOfCapacityException(crate::error::OutOfCapacityException),
    /// <p>The requested tagging operation did not succeed. This may be due to invalid tag format or the maximum tag limit may have been exceeded. Resolve the issue before retrying.</p>
    TaggingFailedException(crate::error::TaggingFailedException),
    /// <p>The service is unable to resolve the routing for a particular alias because it has a terminal <code>RoutingStrategy</code> associated with it. The message returned in this exception is the message defined in the routing strategy itself. Such requests should only be retried if the routing strategy for the specified alias is modified. </p>
    TerminalRoutingStrategyException(crate::error::TerminalRoutingStrategyException),
    /// <p>The client failed authentication. Clients should not retry such requests.</p>
    UnauthorizedException(crate::error::UnauthorizedException),
    /// <p>The requested operation is not supported in the Region specified.</p>
    UnsupportedRegionException(crate::error::UnsupportedRegionException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConflictException(inner) => inner.fmt(f),
            Error::FleetCapacityExceededException(inner) => inner.fmt(f),
            Error::GameSessionFullException(inner) => inner.fmt(f),
            Error::IdempotentParameterMismatchException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::InvalidFleetStatusException(inner) => inner.fmt(f),
            Error::InvalidGameSessionStatusException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::OutOfCapacityException(inner) => inner.fmt(f),
            Error::TaggingFailedException(inner) => inner.fmt(f),
            Error::TerminalRoutingStrategyException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::UnsupportedRegionException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcceptMatchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AcceptMatchError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcceptMatchError> for Error {
    fn from(err: crate::error::AcceptMatchError) -> Self {
        match err {
            crate::error::AcceptMatchError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AcceptMatchError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AcceptMatchError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::AcceptMatchError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::AcceptMatchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ClaimGameServerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ClaimGameServerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ClaimGameServerError> for Error {
    fn from(err: crate::error::ClaimGameServerError) -> Self {
        match err {
            crate::error::ClaimGameServerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ClaimGameServerError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ClaimGameServerError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ClaimGameServerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ClaimGameServerError::OutOfCapacityException(inner) => {
                Error::OutOfCapacityException(inner)
            }
            crate::error::ClaimGameServerError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ClaimGameServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAliasError> for Error {
    fn from(err: crate::error::CreateAliasError) -> Self {
        match err {
            crate::error::CreateAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAliasError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateAliasError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateAliasError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateAliasError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::CreateAliasError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBuildError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateBuildError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBuildError> for Error {
    fn from(err: crate::error::CreateBuildError) -> Self {
        match err {
            crate::error::CreateBuildError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateBuildError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateBuildError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateBuildError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::CreateBuildError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateBuildError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFleetError> for Error {
    fn from(err: crate::error::CreateFleetError) -> Self {
        match err {
            crate::error::CreateFleetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateFleetError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateFleetError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateFleetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateFleetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateFleetError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::CreateFleetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateFleetError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::CreateFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFleetLocationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateFleetLocationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFleetLocationsError> for Error {
    fn from(err: crate::error::CreateFleetLocationsError) -> Self {
        match err {
            crate::error::CreateFleetLocationsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateFleetLocationsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateFleetLocationsError::InvalidFleetStatusException(inner) => {
                Error::InvalidFleetStatusException(inner)
            }
            crate::error::CreateFleetLocationsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateFleetLocationsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateFleetLocationsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateFleetLocationsError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::CreateFleetLocationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGameServerGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGameServerGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGameServerGroupError> for Error {
    fn from(err: crate::error::CreateGameServerGroupError) -> Self {
        match err {
            crate::error::CreateGameServerGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateGameServerGroupError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateGameServerGroupError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateGameServerGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateGameServerGroupError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateGameServerGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGameSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGameSessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGameSessionError> for Error {
    fn from(err: crate::error::CreateGameSessionError) -> Self {
        match err {
            crate::error::CreateGameSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateGameSessionError::FleetCapacityExceededException(inner) => {
                Error::FleetCapacityExceededException(inner)
            }
            crate::error::CreateGameSessionError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::CreateGameSessionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateGameSessionError::InvalidFleetStatusException(inner) => {
                Error::InvalidFleetStatusException(inner)
            }
            crate::error::CreateGameSessionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateGameSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateGameSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateGameSessionError::TerminalRoutingStrategyException(inner) => {
                Error::TerminalRoutingStrategyException(inner)
            }
            crate::error::CreateGameSessionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateGameSessionError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::CreateGameSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGameSessionQueueError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGameSessionQueueError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGameSessionQueueError> for Error {
    fn from(err: crate::error::CreateGameSessionQueueError) -> Self {
        match err {
            crate::error::CreateGameSessionQueueError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateGameSessionQueueError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateGameSessionQueueError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateGameSessionQueueError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateGameSessionQueueError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::CreateGameSessionQueueError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateGameSessionQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLocationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateLocationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLocationError> for Error {
    fn from(err: crate::error::CreateLocationError) -> Self {
        match err {
            crate::error::CreateLocationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateLocationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateLocationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateLocationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateLocationError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::CreateLocationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateLocationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateMatchmakingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateMatchmakingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMatchmakingConfigurationError> for Error {
    fn from(err: crate::error::CreateMatchmakingConfigurationError) -> Self {
        match err {
            crate::error::CreateMatchmakingConfigurationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateMatchmakingConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateMatchmakingConfigurationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateMatchmakingConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateMatchmakingConfigurationError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::CreateMatchmakingConfigurationError::UnsupportedRegionException(
                inner,
            ) => Error::UnsupportedRegionException(inner),
            crate::error::CreateMatchmakingConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMatchmakingRuleSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateMatchmakingRuleSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMatchmakingRuleSetError> for Error {
    fn from(err: crate::error::CreateMatchmakingRuleSetError) -> Self {
        match err {
            crate::error::CreateMatchmakingRuleSetError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateMatchmakingRuleSetError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateMatchmakingRuleSetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateMatchmakingRuleSetError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::CreateMatchmakingRuleSetError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::CreateMatchmakingRuleSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePlayerSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePlayerSessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePlayerSessionError> for Error {
    fn from(err: crate::error::CreatePlayerSessionError) -> Self {
        match err {
            crate::error::CreatePlayerSessionError::GameSessionFullException(inner) => {
                Error::GameSessionFullException(inner)
            }
            crate::error::CreatePlayerSessionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreatePlayerSessionError::InvalidGameSessionStatusException(inner) => {
                Error::InvalidGameSessionStatusException(inner)
            }
            crate::error::CreatePlayerSessionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreatePlayerSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreatePlayerSessionError::TerminalRoutingStrategyException(inner) => {
                Error::TerminalRoutingStrategyException(inner)
            }
            crate::error::CreatePlayerSessionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreatePlayerSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePlayerSessionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePlayerSessionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePlayerSessionsError> for Error {
    fn from(err: crate::error::CreatePlayerSessionsError) -> Self {
        match err {
            crate::error::CreatePlayerSessionsError::GameSessionFullException(inner) => {
                Error::GameSessionFullException(inner)
            }
            crate::error::CreatePlayerSessionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreatePlayerSessionsError::InvalidGameSessionStatusException(inner) => {
                Error::InvalidGameSessionStatusException(inner)
            }
            crate::error::CreatePlayerSessionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreatePlayerSessionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreatePlayerSessionsError::TerminalRoutingStrategyException(inner) => {
                Error::TerminalRoutingStrategyException(inner)
            }
            crate::error::CreatePlayerSessionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreatePlayerSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateScriptError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateScriptError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateScriptError> for Error {
    fn from(err: crate::error::CreateScriptError) -> Self {
        match err {
            crate::error::CreateScriptError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateScriptError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateScriptError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateScriptError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::CreateScriptError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateScriptError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVpcPeeringAuthorizationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVpcPeeringAuthorizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVpcPeeringAuthorizationError> for Error {
    fn from(err: crate::error::CreateVpcPeeringAuthorizationError) -> Self {
        match err {
            crate::error::CreateVpcPeeringAuthorizationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateVpcPeeringAuthorizationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateVpcPeeringAuthorizationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateVpcPeeringAuthorizationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateVpcPeeringAuthorizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVpcPeeringConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVpcPeeringConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVpcPeeringConnectionError> for Error {
    fn from(err: crate::error::CreateVpcPeeringConnectionError) -> Self {
        match err {
            crate::error::CreateVpcPeeringConnectionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateVpcPeeringConnectionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateVpcPeeringConnectionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateVpcPeeringConnectionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateVpcPeeringConnectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAliasError> for Error {
    fn from(err: crate::error::DeleteAliasError) -> Self {
        match err {
            crate::error::DeleteAliasError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteAliasError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteAliasError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteAliasError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::DeleteAliasError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBuildError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBuildError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBuildError> for Error {
    fn from(err: crate::error::DeleteBuildError) -> Self {
        match err {
            crate::error::DeleteBuildError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteBuildError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteBuildError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBuildError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::DeleteBuildError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteBuildError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFleetError> for Error {
    fn from(err: crate::error::DeleteFleetError) -> Self {
        match err {
            crate::error::DeleteFleetError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteFleetError::InvalidFleetStatusException(inner) => {
                Error::InvalidFleetStatusException(inner)
            }
            crate::error::DeleteFleetError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteFleetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteFleetError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::DeleteFleetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFleetLocationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteFleetLocationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFleetLocationsError> for Error {
    fn from(err: crate::error::DeleteFleetLocationsError) -> Self {
        match err {
            crate::error::DeleteFleetLocationsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteFleetLocationsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteFleetLocationsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteFleetLocationsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteFleetLocationsError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::DeleteFleetLocationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGameServerGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGameServerGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGameServerGroupError> for Error {
    fn from(err: crate::error::DeleteGameServerGroupError) -> Self {
        match err {
            crate::error::DeleteGameServerGroupError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteGameServerGroupError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteGameServerGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteGameServerGroupError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteGameServerGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGameSessionQueueError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGameSessionQueueError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGameSessionQueueError> for Error {
    fn from(err: crate::error::DeleteGameSessionQueueError) -> Self {
        match err {
            crate::error::DeleteGameSessionQueueError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteGameSessionQueueError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteGameSessionQueueError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteGameSessionQueueError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::DeleteGameSessionQueueError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteGameSessionQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLocationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteLocationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLocationError> for Error {
    fn from(err: crate::error::DeleteLocationError) -> Self {
        match err {
            crate::error::DeleteLocationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteLocationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteLocationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteLocationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteLocationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteMatchmakingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteMatchmakingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMatchmakingConfigurationError> for Error {
    fn from(err: crate::error::DeleteMatchmakingConfigurationError) -> Self {
        match err {
            crate::error::DeleteMatchmakingConfigurationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteMatchmakingConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteMatchmakingConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteMatchmakingConfigurationError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::DeleteMatchmakingConfigurationError::UnsupportedRegionException(
                inner,
            ) => Error::UnsupportedRegionException(inner),
            crate::error::DeleteMatchmakingConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMatchmakingRuleSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteMatchmakingRuleSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMatchmakingRuleSetError> for Error {
    fn from(err: crate::error::DeleteMatchmakingRuleSetError) -> Self {
        match err {
            crate::error::DeleteMatchmakingRuleSetError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteMatchmakingRuleSetError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteMatchmakingRuleSetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteMatchmakingRuleSetError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::DeleteMatchmakingRuleSetError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::DeleteMatchmakingRuleSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteScalingPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteScalingPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteScalingPolicyError> for Error {
    fn from(err: crate::error::DeleteScalingPolicyError) -> Self {
        match err {
            crate::error::DeleteScalingPolicyError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteScalingPolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteScalingPolicyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteScalingPolicyError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteScriptError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteScriptError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteScriptError> for Error {
    fn from(err: crate::error::DeleteScriptError) -> Self {
        match err {
            crate::error::DeleteScriptError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteScriptError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteScriptError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteScriptError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::DeleteScriptError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteScriptError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVpcPeeringAuthorizationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVpcPeeringAuthorizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVpcPeeringAuthorizationError> for Error {
    fn from(err: crate::error::DeleteVpcPeeringAuthorizationError) -> Self {
        match err {
            crate::error::DeleteVpcPeeringAuthorizationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteVpcPeeringAuthorizationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteVpcPeeringAuthorizationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVpcPeeringAuthorizationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteVpcPeeringAuthorizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVpcPeeringConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVpcPeeringConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVpcPeeringConnectionError> for Error {
    fn from(err: crate::error::DeleteVpcPeeringConnectionError) -> Self {
        match err {
            crate::error::DeleteVpcPeeringConnectionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteVpcPeeringConnectionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteVpcPeeringConnectionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVpcPeeringConnectionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteVpcPeeringConnectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterComputeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterComputeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterComputeError> for Error {
    fn from(err: crate::error::DeregisterComputeError) -> Self {
        match err {
            crate::error::DeregisterComputeError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeregisterComputeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeregisterComputeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeregisterComputeError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeregisterComputeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterGameServerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterGameServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterGameServerError> for Error {
    fn from(err: crate::error::DeregisterGameServerError) -> Self {
        match err {
            crate::error::DeregisterGameServerError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeregisterGameServerError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeregisterGameServerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeregisterGameServerError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeregisterGameServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAliasError> for Error {
    fn from(err: crate::error::DescribeAliasError) -> Self {
        match err {
            crate::error::DescribeAliasError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeAliasError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeAliasError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeAliasError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBuildError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeBuildError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBuildError> for Error {
    fn from(err: crate::error::DescribeBuildError) -> Self {
        match err {
            crate::error::DescribeBuildError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeBuildError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeBuildError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeBuildError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeBuildError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeComputeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeComputeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeComputeError> for Error {
    fn from(err: crate::error::DescribeComputeError) -> Self {
        match err {
            crate::error::DescribeComputeError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeComputeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeComputeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeComputeError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeComputeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEC2InstanceLimitsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEC2InstanceLimitsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEC2InstanceLimitsError> for Error {
    fn from(err: crate::error::DescribeEC2InstanceLimitsError) -> Self {
        match err {
            crate::error::DescribeEC2InstanceLimitsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeEC2InstanceLimitsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeEC2InstanceLimitsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeEC2InstanceLimitsError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::DescribeEC2InstanceLimitsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeFleetAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetAttributesError> for Error {
    fn from(err: crate::error::DescribeFleetAttributesError) -> Self {
        match err {
            crate::error::DescribeFleetAttributesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeFleetAttributesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeFleetAttributesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeFleetAttributesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeFleetAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetCapacityError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeFleetCapacityError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetCapacityError> for Error {
    fn from(err: crate::error::DescribeFleetCapacityError) -> Self {
        match err {
            crate::error::DescribeFleetCapacityError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeFleetCapacityError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeFleetCapacityError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeFleetCapacityError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeFleetCapacityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeFleetEventsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetEventsError> for Error {
    fn from(err: crate::error::DescribeFleetEventsError) -> Self {
        match err {
            crate::error::DescribeFleetEventsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeFleetEventsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeFleetEventsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeFleetEventsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeFleetEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetLocationAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeFleetLocationAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetLocationAttributesError> for Error {
    fn from(err: crate::error::DescribeFleetLocationAttributesError) -> Self {
        match err {
            crate::error::DescribeFleetLocationAttributesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeFleetLocationAttributesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeFleetLocationAttributesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeFleetLocationAttributesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeFleetLocationAttributesError::UnsupportedRegionException(
                inner,
            ) => Error::UnsupportedRegionException(inner),
            crate::error::DescribeFleetLocationAttributesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetLocationCapacityError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeFleetLocationCapacityError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetLocationCapacityError> for Error {
    fn from(err: crate::error::DescribeFleetLocationCapacityError) -> Self {
        match err {
            crate::error::DescribeFleetLocationCapacityError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeFleetLocationCapacityError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeFleetLocationCapacityError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeFleetLocationCapacityError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeFleetLocationCapacityError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::DescribeFleetLocationCapacityError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetLocationUtilizationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeFleetLocationUtilizationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetLocationUtilizationError> for Error {
    fn from(err: crate::error::DescribeFleetLocationUtilizationError) -> Self {
        match err {
            crate::error::DescribeFleetLocationUtilizationError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::error::DescribeFleetLocationUtilizationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeFleetLocationUtilizationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeFleetLocationUtilizationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeFleetLocationUtilizationError::UnsupportedRegionException(
                inner,
            ) => Error::UnsupportedRegionException(inner),
            crate::error::DescribeFleetLocationUtilizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetPortSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeFleetPortSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetPortSettingsError> for Error {
    fn from(err: crate::error::DescribeFleetPortSettingsError) -> Self {
        match err {
            crate::error::DescribeFleetPortSettingsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeFleetPortSettingsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeFleetPortSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeFleetPortSettingsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeFleetPortSettingsError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::DescribeFleetPortSettingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetUtilizationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeFleetUtilizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetUtilizationError> for Error {
    fn from(err: crate::error::DescribeFleetUtilizationError) -> Self {
        match err {
            crate::error::DescribeFleetUtilizationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeFleetUtilizationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeFleetUtilizationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeFleetUtilizationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeFleetUtilizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGameServerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGameServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGameServerError> for Error {
    fn from(err: crate::error::DescribeGameServerError) -> Self {
        match err {
            crate::error::DescribeGameServerError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeGameServerError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeGameServerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeGameServerError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeGameServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGameServerGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGameServerGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGameServerGroupError> for Error {
    fn from(err: crate::error::DescribeGameServerGroupError) -> Self {
        match err {
            crate::error::DescribeGameServerGroupError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeGameServerGroupError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeGameServerGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeGameServerGroupError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeGameServerGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGameServerInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGameServerInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGameServerInstancesError> for Error {
    fn from(err: crate::error::DescribeGameServerInstancesError) -> Self {
        match err {
            crate::error::DescribeGameServerInstancesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeGameServerInstancesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeGameServerInstancesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeGameServerInstancesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeGameServerInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGameSessionDetailsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGameSessionDetailsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGameSessionDetailsError> for Error {
    fn from(err: crate::error::DescribeGameSessionDetailsError) -> Self {
        match err {
            crate::error::DescribeGameSessionDetailsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeGameSessionDetailsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeGameSessionDetailsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeGameSessionDetailsError::TerminalRoutingStrategyException(
                inner,
            ) => Error::TerminalRoutingStrategyException(inner),
            crate::error::DescribeGameSessionDetailsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeGameSessionDetailsError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::DescribeGameSessionDetailsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGameSessionPlacementError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGameSessionPlacementError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGameSessionPlacementError> for Error {
    fn from(err: crate::error::DescribeGameSessionPlacementError) -> Self {
        match err {
            crate::error::DescribeGameSessionPlacementError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeGameSessionPlacementError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeGameSessionPlacementError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeGameSessionPlacementError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeGameSessionPlacementError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGameSessionQueuesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGameSessionQueuesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGameSessionQueuesError> for Error {
    fn from(err: crate::error::DescribeGameSessionQueuesError) -> Self {
        match err {
            crate::error::DescribeGameSessionQueuesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeGameSessionQueuesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeGameSessionQueuesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeGameSessionQueuesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeGameSessionQueuesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGameSessionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGameSessionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGameSessionsError> for Error {
    fn from(err: crate::error::DescribeGameSessionsError) -> Self {
        match err {
            crate::error::DescribeGameSessionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeGameSessionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeGameSessionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeGameSessionsError::TerminalRoutingStrategyException(inner) => {
                Error::TerminalRoutingStrategyException(inner)
            }
            crate::error::DescribeGameSessionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeGameSessionsError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::DescribeGameSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInstancesError> for Error {
    fn from(err: crate::error::DescribeInstancesError) -> Self {
        match err {
            crate::error::DescribeInstancesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeInstancesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeInstancesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeInstancesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeInstancesError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::DescribeInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeMatchmakingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeMatchmakingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMatchmakingError> for Error {
    fn from(err: crate::error::DescribeMatchmakingError) -> Self {
        match err {
            crate::error::DescribeMatchmakingError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeMatchmakingError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeMatchmakingError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::DescribeMatchmakingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeMatchmakingConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeMatchmakingConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMatchmakingConfigurationsError> for Error {
    fn from(err: crate::error::DescribeMatchmakingConfigurationsError) -> Self {
        match err {
            crate::error::DescribeMatchmakingConfigurationsError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::error::DescribeMatchmakingConfigurationsError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::DescribeMatchmakingConfigurationsError::UnsupportedRegionException(
                inner,
            ) => Error::UnsupportedRegionException(inner),
            crate::error::DescribeMatchmakingConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeMatchmakingRuleSetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeMatchmakingRuleSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMatchmakingRuleSetsError> for Error {
    fn from(err: crate::error::DescribeMatchmakingRuleSetsError) -> Self {
        match err {
            crate::error::DescribeMatchmakingRuleSetsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeMatchmakingRuleSetsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeMatchmakingRuleSetsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeMatchmakingRuleSetsError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::DescribeMatchmakingRuleSetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePlayerSessionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePlayerSessionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePlayerSessionsError> for Error {
    fn from(err: crate::error::DescribePlayerSessionsError) -> Self {
        match err {
            crate::error::DescribePlayerSessionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribePlayerSessionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribePlayerSessionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribePlayerSessionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribePlayerSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRuntimeConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRuntimeConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRuntimeConfigurationError> for Error {
    fn from(err: crate::error::DescribeRuntimeConfigurationError) -> Self {
        match err {
            crate::error::DescribeRuntimeConfigurationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeRuntimeConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeRuntimeConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeRuntimeConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeRuntimeConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeScalingPoliciesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeScalingPoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeScalingPoliciesError> for Error {
    fn from(err: crate::error::DescribeScalingPoliciesError) -> Self {
        match err {
            crate::error::DescribeScalingPoliciesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeScalingPoliciesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeScalingPoliciesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeScalingPoliciesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeScalingPoliciesError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::DescribeScalingPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeScriptError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeScriptError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeScriptError> for Error {
    fn from(err: crate::error::DescribeScriptError) -> Self {
        match err {
            crate::error::DescribeScriptError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeScriptError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeScriptError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeScriptError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeScriptError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeVpcPeeringAuthorizationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeVpcPeeringAuthorizationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeVpcPeeringAuthorizationsError> for Error {
    fn from(err: crate::error::DescribeVpcPeeringAuthorizationsError) -> Self {
        match err {
            crate::error::DescribeVpcPeeringAuthorizationsError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::error::DescribeVpcPeeringAuthorizationsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeVpcPeeringAuthorizationsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeVpcPeeringAuthorizationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeVpcPeeringConnectionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeVpcPeeringConnectionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeVpcPeeringConnectionsError> for Error {
    fn from(err: crate::error::DescribeVpcPeeringConnectionsError) -> Self {
        match err {
            crate::error::DescribeVpcPeeringConnectionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeVpcPeeringConnectionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeVpcPeeringConnectionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeVpcPeeringConnectionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeVpcPeeringConnectionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetComputeAccessError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetComputeAccessError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetComputeAccessError> for Error {
    fn from(err: crate::error::GetComputeAccessError) -> Self {
        match err {
            crate::error::GetComputeAccessError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetComputeAccessError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetComputeAccessError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetComputeAccessError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetComputeAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetComputeAuthTokenError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetComputeAuthTokenError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetComputeAuthTokenError> for Error {
    fn from(err: crate::error::GetComputeAuthTokenError) -> Self {
        match err {
            crate::error::GetComputeAuthTokenError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetComputeAuthTokenError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetComputeAuthTokenError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetComputeAuthTokenError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetComputeAuthTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGameSessionLogUrlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetGameSessionLogUrlError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGameSessionLogUrlError> for Error {
    fn from(err: crate::error::GetGameSessionLogUrlError) -> Self {
        match err {
            crate::error::GetGameSessionLogUrlError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetGameSessionLogUrlError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetGameSessionLogUrlError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetGameSessionLogUrlError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetGameSessionLogUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstanceAccessError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInstanceAccessError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstanceAccessError> for Error {
    fn from(err: crate::error::GetInstanceAccessError) -> Self {
        match err {
            crate::error::GetInstanceAccessError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetInstanceAccessError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetInstanceAccessError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetInstanceAccessError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetInstanceAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAliasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAliasesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAliasesError> for Error {
    fn from(err: crate::error::ListAliasesError) -> Self {
        match err {
            crate::error::ListAliasesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListAliasesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListAliasesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListAliasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBuildsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListBuildsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBuildsError> for Error {
    fn from(err: crate::error::ListBuildsError) -> Self {
        match err {
            crate::error::ListBuildsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListBuildsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListBuildsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListBuildsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListComputeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListComputeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListComputeError> for Error {
    fn from(err: crate::error::ListComputeError) -> Self {
        match err {
            crate::error::ListComputeError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListComputeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListComputeError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListComputeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFleetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFleetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFleetsError> for Error {
    fn from(err: crate::error::ListFleetsError) -> Self {
        match err {
            crate::error::ListFleetsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListFleetsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListFleetsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListFleetsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListFleetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGameServerGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListGameServerGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGameServerGroupsError> for Error {
    fn from(err: crate::error::ListGameServerGroupsError) -> Self {
        match err {
            crate::error::ListGameServerGroupsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListGameServerGroupsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListGameServerGroupsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListGameServerGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGameServersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGameServersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGameServersError> for Error {
    fn from(err: crate::error::ListGameServersError) -> Self {
        match err {
            crate::error::ListGameServersError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListGameServersError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListGameServersError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListGameServersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLocationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListLocationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLocationsError> for Error {
    fn from(err: crate::error::ListLocationsError) -> Self {
        match err {
            crate::error::ListLocationsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListLocationsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListLocationsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListLocationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListScriptsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListScriptsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListScriptsError> for Error {
    fn from(err: crate::error::ListScriptsError) -> Self {
        match err {
            crate::error::ListScriptsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListScriptsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListScriptsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListScriptsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListTagsForResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutScalingPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutScalingPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutScalingPolicyError> for Error {
    fn from(err: crate::error::PutScalingPolicyError) -> Self {
        match err {
            crate::error::PutScalingPolicyError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::PutScalingPolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::PutScalingPolicyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutScalingPolicyError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::PutScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterComputeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RegisterComputeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterComputeError> for Error {
    fn from(err: crate::error::RegisterComputeError) -> Self {
        match err {
            crate::error::RegisterComputeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RegisterComputeError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::RegisterComputeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::RegisterComputeError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::RegisterComputeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterGameServerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterGameServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterGameServerError> for Error {
    fn from(err: crate::error::RegisterGameServerError) -> Self {
        match err {
            crate::error::RegisterGameServerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RegisterGameServerError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::RegisterGameServerError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::RegisterGameServerError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::RegisterGameServerError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::RegisterGameServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RequestUploadCredentialsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RequestUploadCredentialsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RequestUploadCredentialsError> for Error {
    fn from(err: crate::error::RequestUploadCredentialsError) -> Self {
        match err {
            crate::error::RequestUploadCredentialsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::RequestUploadCredentialsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::RequestUploadCredentialsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RequestUploadCredentialsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::RequestUploadCredentialsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResolveAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ResolveAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResolveAliasError> for Error {
    fn from(err: crate::error::ResolveAliasError) -> Self {
        match err {
            crate::error::ResolveAliasError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ResolveAliasError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ResolveAliasError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ResolveAliasError::TerminalRoutingStrategyException(inner) => {
                Error::TerminalRoutingStrategyException(inner)
            }
            crate::error::ResolveAliasError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ResolveAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResumeGameServerGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResumeGameServerGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResumeGameServerGroupError> for Error {
    fn from(err: crate::error::ResumeGameServerGroupError) -> Self {
        match err {
            crate::error::ResumeGameServerGroupError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ResumeGameServerGroupError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ResumeGameServerGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ResumeGameServerGroupError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ResumeGameServerGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchGameSessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchGameSessionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchGameSessionsError> for Error {
    fn from(err: crate::error::SearchGameSessionsError) -> Self {
        match err {
            crate::error::SearchGameSessionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::SearchGameSessionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::SearchGameSessionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::SearchGameSessionsError::TerminalRoutingStrategyException(inner) => {
                Error::TerminalRoutingStrategyException(inner)
            }
            crate::error::SearchGameSessionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::SearchGameSessionsError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::SearchGameSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartFleetActionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartFleetActionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartFleetActionsError> for Error {
    fn from(err: crate::error::StartFleetActionsError) -> Self {
        match err {
            crate::error::StartFleetActionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StartFleetActionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartFleetActionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StartFleetActionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::StartFleetActionsError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::StartFleetActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartGameSessionPlacementError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartGameSessionPlacementError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartGameSessionPlacementError> for Error {
    fn from(err: crate::error::StartGameSessionPlacementError) -> Self {
        match err {
            crate::error::StartGameSessionPlacementError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StartGameSessionPlacementError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartGameSessionPlacementError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StartGameSessionPlacementError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::StartGameSessionPlacementError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartMatchBackfillError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartMatchBackfillError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartMatchBackfillError> for Error {
    fn from(err: crate::error::StartMatchBackfillError) -> Self {
        match err {
            crate::error::StartMatchBackfillError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StartMatchBackfillError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartMatchBackfillError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StartMatchBackfillError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::StartMatchBackfillError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartMatchmakingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartMatchmakingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartMatchmakingError> for Error {
    fn from(err: crate::error::StartMatchmakingError) -> Self {
        match err {
            crate::error::StartMatchmakingError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StartMatchmakingError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartMatchmakingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StartMatchmakingError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::StartMatchmakingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopFleetActionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopFleetActionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopFleetActionsError> for Error {
    fn from(err: crate::error::StopFleetActionsError) -> Self {
        match err {
            crate::error::StopFleetActionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StopFleetActionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopFleetActionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StopFleetActionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::StopFleetActionsError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::StopFleetActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopGameSessionPlacementError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopGameSessionPlacementError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopGameSessionPlacementError> for Error {
    fn from(err: crate::error::StopGameSessionPlacementError) -> Self {
        match err {
            crate::error::StopGameSessionPlacementError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StopGameSessionPlacementError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopGameSessionPlacementError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StopGameSessionPlacementError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::StopGameSessionPlacementError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopMatchmakingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopMatchmakingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopMatchmakingError> for Error {
    fn from(err: crate::error::StopMatchmakingError) -> Self {
        match err {
            crate::error::StopMatchmakingError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StopMatchmakingError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopMatchmakingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StopMatchmakingError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::StopMatchmakingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SuspendGameServerGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SuspendGameServerGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SuspendGameServerGroupError> for Error {
    fn from(err: crate::error::SuspendGameServerGroupError) -> Self {
        match err {
            crate::error::SuspendGameServerGroupError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::SuspendGameServerGroupError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::SuspendGameServerGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::SuspendGameServerGroupError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::SuspendGameServerGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::TagResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TagResourceError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UntagResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UntagResourceError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAliasError> for Error {
    fn from(err: crate::error::UpdateAliasError) -> Self {
        match err {
            crate::error::UpdateAliasError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateAliasError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateAliasError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateAliasError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBuildError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateBuildError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBuildError> for Error {
    fn from(err: crate::error::UpdateBuildError) -> Self {
        match err {
            crate::error::UpdateBuildError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateBuildError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateBuildError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBuildError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateBuildError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFleetAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateFleetAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFleetAttributesError> for Error {
    fn from(err: crate::error::UpdateFleetAttributesError) -> Self {
        match err {
            crate::error::UpdateFleetAttributesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateFleetAttributesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateFleetAttributesError::InvalidFleetStatusException(inner) => {
                Error::InvalidFleetStatusException(inner)
            }
            crate::error::UpdateFleetAttributesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateFleetAttributesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateFleetAttributesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateFleetAttributesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateFleetAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFleetCapacityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateFleetCapacityError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFleetCapacityError> for Error {
    fn from(err: crate::error::UpdateFleetCapacityError) -> Self {
        match err {
            crate::error::UpdateFleetCapacityError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateFleetCapacityError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateFleetCapacityError::InvalidFleetStatusException(inner) => {
                Error::InvalidFleetStatusException(inner)
            }
            crate::error::UpdateFleetCapacityError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateFleetCapacityError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateFleetCapacityError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateFleetCapacityError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateFleetCapacityError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::UpdateFleetCapacityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFleetPortSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateFleetPortSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFleetPortSettingsError> for Error {
    fn from(err: crate::error::UpdateFleetPortSettingsError) -> Self {
        match err {
            crate::error::UpdateFleetPortSettingsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateFleetPortSettingsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateFleetPortSettingsError::InvalidFleetStatusException(inner) => {
                Error::InvalidFleetStatusException(inner)
            }
            crate::error::UpdateFleetPortSettingsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateFleetPortSettingsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateFleetPortSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateFleetPortSettingsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateFleetPortSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGameServerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGameServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGameServerError> for Error {
    fn from(err: crate::error::UpdateGameServerError) -> Self {
        match err {
            crate::error::UpdateGameServerError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateGameServerError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateGameServerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateGameServerError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateGameServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGameServerGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGameServerGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGameServerGroupError> for Error {
    fn from(err: crate::error::UpdateGameServerGroupError) -> Self {
        match err {
            crate::error::UpdateGameServerGroupError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateGameServerGroupError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateGameServerGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateGameServerGroupError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateGameServerGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGameSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGameSessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGameSessionError> for Error {
    fn from(err: crate::error::UpdateGameSessionError) -> Self {
        match err {
            crate::error::UpdateGameSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateGameSessionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateGameSessionError::InvalidGameSessionStatusException(inner) => {
                Error::InvalidGameSessionStatusException(inner)
            }
            crate::error::UpdateGameSessionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateGameSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateGameSessionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateGameSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGameSessionQueueError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGameSessionQueueError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGameSessionQueueError> for Error {
    fn from(err: crate::error::UpdateGameSessionQueueError) -> Self {
        match err {
            crate::error::UpdateGameSessionQueueError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateGameSessionQueueError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateGameSessionQueueError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateGameSessionQueueError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateGameSessionQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateMatchmakingConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateMatchmakingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMatchmakingConfigurationError> for Error {
    fn from(err: crate::error::UpdateMatchmakingConfigurationError) -> Self {
        match err {
            crate::error::UpdateMatchmakingConfigurationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateMatchmakingConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateMatchmakingConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateMatchmakingConfigurationError::UnsupportedRegionException(
                inner,
            ) => Error::UnsupportedRegionException(inner),
            crate::error::UpdateMatchmakingConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRuntimeConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRuntimeConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRuntimeConfigurationError> for Error {
    fn from(err: crate::error::UpdateRuntimeConfigurationError) -> Self {
        match err {
            crate::error::UpdateRuntimeConfigurationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateRuntimeConfigurationError::InvalidFleetStatusException(inner) => {
                Error::InvalidFleetStatusException(inner)
            }
            crate::error::UpdateRuntimeConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateRuntimeConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateRuntimeConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateRuntimeConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateScriptError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateScriptError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateScriptError> for Error {
    fn from(err: crate::error::UpdateScriptError) -> Self {
        match err {
            crate::error::UpdateScriptError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateScriptError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateScriptError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateScriptError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateScriptError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ValidateMatchmakingRuleSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ValidateMatchmakingRuleSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ValidateMatchmakingRuleSetError> for Error {
    fn from(err: crate::error::ValidateMatchmakingRuleSetError) -> Self {
        match err {
            crate::error::ValidateMatchmakingRuleSetError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ValidateMatchmakingRuleSetError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ValidateMatchmakingRuleSetError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::error::ValidateMatchmakingRuleSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConflictException(e) => e.request_id(),
            Self::FleetCapacityExceededException(e) => e.request_id(),
            Self::GameSessionFullException(e) => e.request_id(),
            Self::IdempotentParameterMismatchException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::InvalidFleetStatusException(e) => e.request_id(),
            Self::InvalidGameSessionStatusException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::OutOfCapacityException(e) => e.request_id(),
            Self::TaggingFailedException(e) => e.request_id(),
            Self::TerminalRoutingStrategyException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::UnsupportedRegionException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
