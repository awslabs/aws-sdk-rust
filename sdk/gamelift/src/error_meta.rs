// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.</p>
    /// <p></p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The specified fleet has no available instances to fulfill a <code>CreateGameSession</code> request. Clients can retry such requests immediately or after a waiting period.</p>
    FleetCapacityExceededException(crate::types::error::FleetCapacityExceededException),
    /// <p>The game instance is currently full and cannot allow the requested player(s) to join. Clients can retry such requests immediately or after a waiting period.</p>
    GameSessionFullException(crate::types::error::GameSessionFullException),
    /// <p>A game session with this custom ID string already exists in this fleet. Resolve this conflict before retrying this request.</p>
    IdempotentParameterMismatchException(crate::types::error::IdempotentParameterMismatchException),
    /// <p>The service encountered an unrecoverable internal failure while processing the request. Clients can retry such requests immediately or after a waiting period.</p>
    InternalServiceException(crate::types::error::InternalServiceException),
    /// <p>The requested operation would cause a conflict with the current state of a resource associated with the request and/or the fleet. Resolve the conflict before retrying.</p>
    InvalidFleetStatusException(crate::types::error::InvalidFleetStatusException),
    /// <p>The requested operation would cause a conflict with the current state of a resource associated with the request and/or the game instance. Resolve the conflict before retrying.</p>
    InvalidGameSessionStatusException(crate::types::error::InvalidGameSessionStatusException),
    /// <p>One or more parameter values in the request are invalid. Correct the invalid parameter values before retrying.</p>
    InvalidRequestException(crate::types::error::InvalidRequestException),
    /// <p>The requested operation would cause the resource to exceed the allowed service limit. Resolve the issue before retrying.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>THe requested resources was not found. The resource was either not created yet or deleted.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>The specified game server group has no available game servers to fulfill a <code>ClaimGameServer</code> request. Clients can retry such requests immediately or after a waiting period.</p>
    OutOfCapacityException(crate::types::error::OutOfCapacityException),
    /// <p>The requested tagging operation did not succeed. This may be due to invalid tag format or the maximum tag limit may have been exceeded. Resolve the issue before retrying.</p>
    TaggingFailedException(crate::types::error::TaggingFailedException),
    /// <p>The service is unable to resolve the routing for a particular alias because it has a terminal <code>RoutingStrategy</code> associated with it. The message returned in this exception is the message defined in the routing strategy itself. Such requests should only be retried if the routing strategy for the specified alias is modified. </p>
    TerminalRoutingStrategyException(crate::types::error::TerminalRoutingStrategyException),
    /// <p>The client failed authentication. Clients should not retry such requests.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// <p>The requested operation is not supported in the Region specified.</p>
    UnsupportedRegionException(crate::types::error::UnsupportedRegionException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConflictException(inner) => inner.fmt(f),
            Error::FleetCapacityExceededException(inner) => inner.fmt(f),
            Error::GameSessionFullException(inner) => inner.fmt(f),
            Error::IdempotentParameterMismatchException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::InvalidFleetStatusException(inner) => inner.fmt(f),
            Error::InvalidGameSessionStatusException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::OutOfCapacityException(inner) => inner.fmt(f),
            Error::TaggingFailedException(inner) => inner.fmt(f),
            Error::TerminalRoutingStrategyException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::UnsupportedRegionException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::accept_match::AcceptMatchError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::accept_match::AcceptMatchError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::accept_match::AcceptMatchError> for Error {
    fn from(err: crate::operation::accept_match::AcceptMatchError) -> Self {
        match err {
            crate::operation::accept_match::AcceptMatchError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::accept_match::AcceptMatchError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::accept_match::AcceptMatchError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::accept_match::AcceptMatchError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::operation::accept_match::AcceptMatchError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::claim_game_server::ClaimGameServerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::claim_game_server::ClaimGameServerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::claim_game_server::ClaimGameServerError> for Error {
    fn from(err: crate::operation::claim_game_server::ClaimGameServerError) -> Self {
        match err {
            crate::operation::claim_game_server::ClaimGameServerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::claim_game_server::ClaimGameServerError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::claim_game_server::ClaimGameServerError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::claim_game_server::ClaimGameServerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::claim_game_server::ClaimGameServerError::OutOfCapacityException(
                inner,
            ) => Error::OutOfCapacityException(inner),
            crate::operation::claim_game_server::ClaimGameServerError::UnauthorizedException(
                inner,
            ) => Error::UnauthorizedException(inner),
            crate::operation::claim_game_server::ClaimGameServerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_alias::CreateAliasError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_alias::CreateAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_alias::CreateAliasError> for Error {
    fn from(err: crate::operation::create_alias::CreateAliasError) -> Self {
        match err {
            crate::operation::create_alias::CreateAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_alias::CreateAliasError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::create_alias::CreateAliasError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_alias::CreateAliasError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_alias::CreateAliasError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::operation::create_alias::CreateAliasError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_alias::CreateAliasError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_build::CreateBuildError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_build::CreateBuildError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_build::CreateBuildError> for Error {
    fn from(err: crate::operation::create_build::CreateBuildError) -> Self {
        match err {
            crate::operation::create_build::CreateBuildError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_build::CreateBuildError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::create_build::CreateBuildError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_build::CreateBuildError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::operation::create_build::CreateBuildError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_build::CreateBuildError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_fleet::CreateFleetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_fleet::CreateFleetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_fleet::CreateFleetError> for Error {
    fn from(err: crate::operation::create_fleet::CreateFleetError) -> Self {
        match err {
            crate::operation::create_fleet::CreateFleetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::UnsupportedRegionException(inner) => {
                Error::UnsupportedRegionException(inner)
            }
            crate::operation::create_fleet::CreateFleetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_fleet_locations::CreateFleetLocationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_fleet_locations::CreateFleetLocationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_fleet_locations::CreateFleetLocationsError> for Error {
    fn from(err: crate::operation::create_fleet_locations::CreateFleetLocationsError) -> Self {
        match err {
            crate::operation::create_fleet_locations::CreateFleetLocationsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_fleet_locations::CreateFleetLocationsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_fleet_locations::CreateFleetLocationsError::InvalidFleetStatusException(inner) => Error::InvalidFleetStatusException(inner),
            crate::operation::create_fleet_locations::CreateFleetLocationsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_fleet_locations::CreateFleetLocationsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_fleet_locations::CreateFleetLocationsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_fleet_locations::CreateFleetLocationsError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::create_fleet_locations::CreateFleetLocationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_game_server_group::CreateGameServerGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_game_server_group::CreateGameServerGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_game_server_group::CreateGameServerGroupError> for Error {
    fn from(err: crate::operation::create_game_server_group::CreateGameServerGroupError) -> Self {
        match err {
            crate::operation::create_game_server_group::CreateGameServerGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_game_server_group::CreateGameServerGroupError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_game_server_group::CreateGameServerGroupError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_game_server_group::CreateGameServerGroupError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_game_server_group::CreateGameServerGroupError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_game_server_group::CreateGameServerGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_game_session::CreateGameSessionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_game_session::CreateGameSessionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_game_session::CreateGameSessionError> for Error {
    fn from(err: crate::operation::create_game_session::CreateGameSessionError) -> Self {
        match err {
            crate::operation::create_game_session::CreateGameSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_game_session::CreateGameSessionError::FleetCapacityExceededException(inner) => Error::FleetCapacityExceededException(inner),
            crate::operation::create_game_session::CreateGameSessionError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::operation::create_game_session::CreateGameSessionError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_game_session::CreateGameSessionError::InvalidFleetStatusException(inner) => Error::InvalidFleetStatusException(inner),
            crate::operation::create_game_session::CreateGameSessionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_game_session::CreateGameSessionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_game_session::CreateGameSessionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_game_session::CreateGameSessionError::TerminalRoutingStrategyException(inner) => Error::TerminalRoutingStrategyException(inner),
            crate::operation::create_game_session::CreateGameSessionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_game_session::CreateGameSessionError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::create_game_session::CreateGameSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_game_session_queue::CreateGameSessionQueueError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_game_session_queue::CreateGameSessionQueueError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_game_session_queue::CreateGameSessionQueueError> for Error {
    fn from(err: crate::operation::create_game_session_queue::CreateGameSessionQueueError) -> Self {
        match err {
            crate::operation::create_game_session_queue::CreateGameSessionQueueError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_game_session_queue::CreateGameSessionQueueError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_game_session_queue::CreateGameSessionQueueError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_game_session_queue::CreateGameSessionQueueError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_game_session_queue::CreateGameSessionQueueError::TaggingFailedException(inner) => Error::TaggingFailedException(inner),
            crate::operation::create_game_session_queue::CreateGameSessionQueueError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_game_session_queue::CreateGameSessionQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_location::CreateLocationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_location::CreateLocationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_location::CreateLocationError> for Error {
    fn from(err: crate::operation::create_location::CreateLocationError) -> Self {
        match err {
            crate::operation::create_location::CreateLocationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_location::CreateLocationError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::create_location::CreateLocationError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::create_location::CreateLocationError::LimitExceededException(
                inner,
            ) => Error::LimitExceededException(inner),
            crate::operation::create_location::CreateLocationError::TaggingFailedException(
                inner,
            ) => Error::TaggingFailedException(inner),
            crate::operation::create_location::CreateLocationError::UnauthorizedException(
                inner,
            ) => Error::UnauthorizedException(inner),
            crate::operation::create_location::CreateLocationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_matchmaking_configuration::CreateMatchmakingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_matchmaking_configuration::CreateMatchmakingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_matchmaking_configuration::CreateMatchmakingConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::create_matchmaking_configuration::CreateMatchmakingConfigurationError,
    ) -> Self {
        match err {
            crate::operation::create_matchmaking_configuration::CreateMatchmakingConfigurationError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_matchmaking_configuration::CreateMatchmakingConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_matchmaking_configuration::CreateMatchmakingConfigurationError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_matchmaking_configuration::CreateMatchmakingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_matchmaking_configuration::CreateMatchmakingConfigurationError::TaggingFailedException(inner) => Error::TaggingFailedException(inner),
            crate::operation::create_matchmaking_configuration::CreateMatchmakingConfigurationError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::create_matchmaking_configuration::CreateMatchmakingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_matchmaking_rule_set::CreateMatchmakingRuleSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_matchmaking_rule_set::CreateMatchmakingRuleSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_matchmaking_rule_set::CreateMatchmakingRuleSetError> for Error {
    fn from(
        err: crate::operation::create_matchmaking_rule_set::CreateMatchmakingRuleSetError,
    ) -> Self {
        match err {
            crate::operation::create_matchmaking_rule_set::CreateMatchmakingRuleSetError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_matchmaking_rule_set::CreateMatchmakingRuleSetError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_matchmaking_rule_set::CreateMatchmakingRuleSetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_matchmaking_rule_set::CreateMatchmakingRuleSetError::TaggingFailedException(inner) => Error::TaggingFailedException(inner),
            crate::operation::create_matchmaking_rule_set::CreateMatchmakingRuleSetError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::create_matchmaking_rule_set::CreateMatchmakingRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_player_session::CreatePlayerSessionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_player_session::CreatePlayerSessionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_player_session::CreatePlayerSessionError> for Error {
    fn from(err: crate::operation::create_player_session::CreatePlayerSessionError) -> Self {
        match err {
            crate::operation::create_player_session::CreatePlayerSessionError::GameSessionFullException(inner) => Error::GameSessionFullException(inner),
            crate::operation::create_player_session::CreatePlayerSessionError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_player_session::CreatePlayerSessionError::InvalidGameSessionStatusException(inner) => Error::InvalidGameSessionStatusException(inner),
            crate::operation::create_player_session::CreatePlayerSessionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_player_session::CreatePlayerSessionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_player_session::CreatePlayerSessionError::TerminalRoutingStrategyException(inner) => Error::TerminalRoutingStrategyException(inner),
            crate::operation::create_player_session::CreatePlayerSessionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_player_session::CreatePlayerSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_player_sessions::CreatePlayerSessionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_player_sessions::CreatePlayerSessionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_player_sessions::CreatePlayerSessionsError> for Error {
    fn from(err: crate::operation::create_player_sessions::CreatePlayerSessionsError) -> Self {
        match err {
            crate::operation::create_player_sessions::CreatePlayerSessionsError::GameSessionFullException(inner) => Error::GameSessionFullException(inner),
            crate::operation::create_player_sessions::CreatePlayerSessionsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_player_sessions::CreatePlayerSessionsError::InvalidGameSessionStatusException(inner) => Error::InvalidGameSessionStatusException(inner),
            crate::operation::create_player_sessions::CreatePlayerSessionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_player_sessions::CreatePlayerSessionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_player_sessions::CreatePlayerSessionsError::TerminalRoutingStrategyException(inner) => Error::TerminalRoutingStrategyException(inner),
            crate::operation::create_player_sessions::CreatePlayerSessionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_player_sessions::CreatePlayerSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_script::CreateScriptError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_script::CreateScriptError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_script::CreateScriptError> for Error {
    fn from(err: crate::operation::create_script::CreateScriptError) -> Self {
        match err {
            crate::operation::create_script::CreateScriptError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_script::CreateScriptError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::create_script::CreateScriptError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_script::CreateScriptError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::operation::create_script::CreateScriptError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_script::CreateScriptError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_vpc_peering_authorization::CreateVpcPeeringAuthorizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_vpc_peering_authorization::CreateVpcPeeringAuthorizationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_vpc_peering_authorization::CreateVpcPeeringAuthorizationError>
    for Error
{
    fn from(
        err: crate::operation::create_vpc_peering_authorization::CreateVpcPeeringAuthorizationError,
    ) -> Self {
        match err {
            crate::operation::create_vpc_peering_authorization::CreateVpcPeeringAuthorizationError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_vpc_peering_authorization::CreateVpcPeeringAuthorizationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_vpc_peering_authorization::CreateVpcPeeringAuthorizationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_vpc_peering_authorization::CreateVpcPeeringAuthorizationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_vpc_peering_authorization::CreateVpcPeeringAuthorizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_vpc_peering_connection::CreateVpcPeeringConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_vpc_peering_connection::CreateVpcPeeringConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_vpc_peering_connection::CreateVpcPeeringConnectionError>
    for Error
{
    fn from(
        err: crate::operation::create_vpc_peering_connection::CreateVpcPeeringConnectionError,
    ) -> Self {
        match err {
            crate::operation::create_vpc_peering_connection::CreateVpcPeeringConnectionError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_vpc_peering_connection::CreateVpcPeeringConnectionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_vpc_peering_connection::CreateVpcPeeringConnectionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_vpc_peering_connection::CreateVpcPeeringConnectionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_vpc_peering_connection::CreateVpcPeeringConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_alias::DeleteAliasError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_alias::DeleteAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_alias::DeleteAliasError> for Error {
    fn from(err: crate::operation::delete_alias::DeleteAliasError) -> Self {
        match err {
            crate::operation::delete_alias::DeleteAliasError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::delete_alias::DeleteAliasError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::delete_alias::DeleteAliasError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_alias::DeleteAliasError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::operation::delete_alias::DeleteAliasError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_alias::DeleteAliasError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_build::DeleteBuildError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_build::DeleteBuildError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_build::DeleteBuildError> for Error {
    fn from(err: crate::operation::delete_build::DeleteBuildError) -> Self {
        match err {
            crate::operation::delete_build::DeleteBuildError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::delete_build::DeleteBuildError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::delete_build::DeleteBuildError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_build::DeleteBuildError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::operation::delete_build::DeleteBuildError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_build::DeleteBuildError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_fleet::DeleteFleetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_fleet::DeleteFleetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_fleet::DeleteFleetError> for Error {
    fn from(err: crate::operation::delete_fleet::DeleteFleetError) -> Self {
        match err {
            crate::operation::delete_fleet::DeleteFleetError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::delete_fleet::DeleteFleetError::InvalidFleetStatusException(
                inner,
            ) => Error::InvalidFleetStatusException(inner),
            crate::operation::delete_fleet::DeleteFleetError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::delete_fleet::DeleteFleetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_fleet::DeleteFleetError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::operation::delete_fleet::DeleteFleetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_fleet::DeleteFleetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_fleet_locations::DeleteFleetLocationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_fleet_locations::DeleteFleetLocationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_fleet_locations::DeleteFleetLocationsError> for Error {
    fn from(err: crate::operation::delete_fleet_locations::DeleteFleetLocationsError) -> Self {
        match err {
            crate::operation::delete_fleet_locations::DeleteFleetLocationsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::delete_fleet_locations::DeleteFleetLocationsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_fleet_locations::DeleteFleetLocationsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_fleet_locations::DeleteFleetLocationsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_fleet_locations::DeleteFleetLocationsError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::delete_fleet_locations::DeleteFleetLocationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_game_server_group::DeleteGameServerGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_game_server_group::DeleteGameServerGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_game_server_group::DeleteGameServerGroupError> for Error {
    fn from(err: crate::operation::delete_game_server_group::DeleteGameServerGroupError) -> Self {
        match err {
            crate::operation::delete_game_server_group::DeleteGameServerGroupError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::delete_game_server_group::DeleteGameServerGroupError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_game_server_group::DeleteGameServerGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_game_server_group::DeleteGameServerGroupError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_game_server_group::DeleteGameServerGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_game_session_queue::DeleteGameSessionQueueError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_game_session_queue::DeleteGameSessionQueueError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_game_session_queue::DeleteGameSessionQueueError> for Error {
    fn from(err: crate::operation::delete_game_session_queue::DeleteGameSessionQueueError) -> Self {
        match err {
            crate::operation::delete_game_session_queue::DeleteGameSessionQueueError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::delete_game_session_queue::DeleteGameSessionQueueError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_game_session_queue::DeleteGameSessionQueueError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_game_session_queue::DeleteGameSessionQueueError::TaggingFailedException(inner) => Error::TaggingFailedException(inner),
            crate::operation::delete_game_session_queue::DeleteGameSessionQueueError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_game_session_queue::DeleteGameSessionQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_location::DeleteLocationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_location::DeleteLocationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_location::DeleteLocationError> for Error {
    fn from(err: crate::operation::delete_location::DeleteLocationError) -> Self {
        match err {
            crate::operation::delete_location::DeleteLocationError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::delete_location::DeleteLocationError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::delete_location::DeleteLocationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_location::DeleteLocationError::UnauthorizedException(
                inner,
            ) => Error::UnauthorizedException(inner),
            crate::operation::delete_location::DeleteLocationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_matchmaking_configuration::DeleteMatchmakingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_matchmaking_configuration::DeleteMatchmakingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_matchmaking_configuration::DeleteMatchmakingConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::delete_matchmaking_configuration::DeleteMatchmakingConfigurationError,
    ) -> Self {
        match err {
            crate::operation::delete_matchmaking_configuration::DeleteMatchmakingConfigurationError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::delete_matchmaking_configuration::DeleteMatchmakingConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_matchmaking_configuration::DeleteMatchmakingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_matchmaking_configuration::DeleteMatchmakingConfigurationError::TaggingFailedException(inner) => Error::TaggingFailedException(inner),
            crate::operation::delete_matchmaking_configuration::DeleteMatchmakingConfigurationError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::delete_matchmaking_configuration::DeleteMatchmakingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_matchmaking_rule_set::DeleteMatchmakingRuleSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_matchmaking_rule_set::DeleteMatchmakingRuleSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_matchmaking_rule_set::DeleteMatchmakingRuleSetError> for Error {
    fn from(
        err: crate::operation::delete_matchmaking_rule_set::DeleteMatchmakingRuleSetError,
    ) -> Self {
        match err {
            crate::operation::delete_matchmaking_rule_set::DeleteMatchmakingRuleSetError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::delete_matchmaking_rule_set::DeleteMatchmakingRuleSetError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_matchmaking_rule_set::DeleteMatchmakingRuleSetError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_matchmaking_rule_set::DeleteMatchmakingRuleSetError::TaggingFailedException(inner) => Error::TaggingFailedException(inner),
            crate::operation::delete_matchmaking_rule_set::DeleteMatchmakingRuleSetError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::delete_matchmaking_rule_set::DeleteMatchmakingRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_scaling_policy::DeleteScalingPolicyError> for Error {
    fn from(err: crate::operation::delete_scaling_policy::DeleteScalingPolicyError) -> Self {
        match err {
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_scaling_policy::DeleteScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_script::DeleteScriptError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_script::DeleteScriptError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_script::DeleteScriptError> for Error {
    fn from(err: crate::operation::delete_script::DeleteScriptError) -> Self {
        match err {
            crate::operation::delete_script::DeleteScriptError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::delete_script::DeleteScriptError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::delete_script::DeleteScriptError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_script::DeleteScriptError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::operation::delete_script::DeleteScriptError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_script::DeleteScriptError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_vpc_peering_authorization::DeleteVpcPeeringAuthorizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_vpc_peering_authorization::DeleteVpcPeeringAuthorizationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_vpc_peering_authorization::DeleteVpcPeeringAuthorizationError>
    for Error
{
    fn from(
        err: crate::operation::delete_vpc_peering_authorization::DeleteVpcPeeringAuthorizationError,
    ) -> Self {
        match err {
            crate::operation::delete_vpc_peering_authorization::DeleteVpcPeeringAuthorizationError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::delete_vpc_peering_authorization::DeleteVpcPeeringAuthorizationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_vpc_peering_authorization::DeleteVpcPeeringAuthorizationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_vpc_peering_authorization::DeleteVpcPeeringAuthorizationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_vpc_peering_authorization::DeleteVpcPeeringAuthorizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_vpc_peering_connection::DeleteVpcPeeringConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_vpc_peering_connection::DeleteVpcPeeringConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_vpc_peering_connection::DeleteVpcPeeringConnectionError>
    for Error
{
    fn from(
        err: crate::operation::delete_vpc_peering_connection::DeleteVpcPeeringConnectionError,
    ) -> Self {
        match err {
            crate::operation::delete_vpc_peering_connection::DeleteVpcPeeringConnectionError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::delete_vpc_peering_connection::DeleteVpcPeeringConnectionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_vpc_peering_connection::DeleteVpcPeeringConnectionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_vpc_peering_connection::DeleteVpcPeeringConnectionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_vpc_peering_connection::DeleteVpcPeeringConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::deregister_compute::DeregisterComputeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::deregister_compute::DeregisterComputeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deregister_compute::DeregisterComputeError> for Error {
    fn from(err: crate::operation::deregister_compute::DeregisterComputeError) -> Self {
        match err {
            crate::operation::deregister_compute::DeregisterComputeError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::deregister_compute::DeregisterComputeError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::deregister_compute::DeregisterComputeError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::deregister_compute::DeregisterComputeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::deregister_compute::DeregisterComputeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::deregister_game_server::DeregisterGameServerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::deregister_game_server::DeregisterGameServerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deregister_game_server::DeregisterGameServerError> for Error {
    fn from(err: crate::operation::deregister_game_server::DeregisterGameServerError) -> Self {
        match err {
            crate::operation::deregister_game_server::DeregisterGameServerError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::deregister_game_server::DeregisterGameServerError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::deregister_game_server::DeregisterGameServerError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::deregister_game_server::DeregisterGameServerError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::deregister_game_server::DeregisterGameServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_alias::DescribeAliasError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_alias::DescribeAliasError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_alias::DescribeAliasError> for Error {
    fn from(err: crate::operation::describe_alias::DescribeAliasError) -> Self {
        match err {
            crate::operation::describe_alias::DescribeAliasError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::describe_alias::DescribeAliasError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::describe_alias::DescribeAliasError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::describe_alias::DescribeAliasError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::describe_alias::DescribeAliasError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_build::DescribeBuildError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_build::DescribeBuildError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_build::DescribeBuildError> for Error {
    fn from(err: crate::operation::describe_build::DescribeBuildError) -> Self {
        match err {
            crate::operation::describe_build::DescribeBuildError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::describe_build::DescribeBuildError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::describe_build::DescribeBuildError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::describe_build::DescribeBuildError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::describe_build::DescribeBuildError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_compute::DescribeComputeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_compute::DescribeComputeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_compute::DescribeComputeError> for Error {
    fn from(err: crate::operation::describe_compute::DescribeComputeError) -> Self {
        match err {
            crate::operation::describe_compute::DescribeComputeError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::describe_compute::DescribeComputeError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::describe_compute::DescribeComputeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::describe_compute::DescribeComputeError::UnauthorizedException(
                inner,
            ) => Error::UnauthorizedException(inner),
            crate::operation::describe_compute::DescribeComputeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_ec2_instance_limits::DescribeEC2InstanceLimitsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_ec2_instance_limits::DescribeEC2InstanceLimitsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_ec2_instance_limits::DescribeEC2InstanceLimitsError>
    for Error
{
    fn from(
        err: crate::operation::describe_ec2_instance_limits::DescribeEC2InstanceLimitsError,
    ) -> Self {
        match err {
            crate::operation::describe_ec2_instance_limits::DescribeEC2InstanceLimitsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_ec2_instance_limits::DescribeEC2InstanceLimitsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_ec2_instance_limits::DescribeEC2InstanceLimitsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_ec2_instance_limits::DescribeEC2InstanceLimitsError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::describe_ec2_instance_limits::DescribeEC2InstanceLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_fleet_attributes::DescribeFleetAttributesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_fleet_attributes::DescribeFleetAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_fleet_attributes::DescribeFleetAttributesError> for Error {
    fn from(
        err: crate::operation::describe_fleet_attributes::DescribeFleetAttributesError,
    ) -> Self {
        match err {
            crate::operation::describe_fleet_attributes::DescribeFleetAttributesError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_fleet_attributes::DescribeFleetAttributesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_fleet_attributes::DescribeFleetAttributesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_fleet_attributes::DescribeFleetAttributesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_fleet_attributes::DescribeFleetAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_fleet_capacity::DescribeFleetCapacityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_fleet_capacity::DescribeFleetCapacityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_fleet_capacity::DescribeFleetCapacityError> for Error {
    fn from(err: crate::operation::describe_fleet_capacity::DescribeFleetCapacityError) -> Self {
        match err {
            crate::operation::describe_fleet_capacity::DescribeFleetCapacityError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_fleet_capacity::DescribeFleetCapacityError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_fleet_capacity::DescribeFleetCapacityError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_fleet_capacity::DescribeFleetCapacityError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_fleet_capacity::DescribeFleetCapacityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_fleet_events::DescribeFleetEventsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_fleet_events::DescribeFleetEventsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_fleet_events::DescribeFleetEventsError> for Error {
    fn from(err: crate::operation::describe_fleet_events::DescribeFleetEventsError) -> Self {
        match err {
            crate::operation::describe_fleet_events::DescribeFleetEventsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_fleet_events::DescribeFleetEventsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_fleet_events::DescribeFleetEventsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_fleet_events::DescribeFleetEventsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_fleet_events::DescribeFleetEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_fleet_location_attributes::DescribeFleetLocationAttributesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_fleet_location_attributes::DescribeFleetLocationAttributesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::describe_fleet_location_attributes::DescribeFleetLocationAttributesError>
    for Error
{
    fn from(
        err: crate::operation::describe_fleet_location_attributes::DescribeFleetLocationAttributesError,
    ) -> Self {
        match err {
            crate::operation::describe_fleet_location_attributes::DescribeFleetLocationAttributesError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_fleet_location_attributes::DescribeFleetLocationAttributesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_fleet_location_attributes::DescribeFleetLocationAttributesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_fleet_location_attributes::DescribeFleetLocationAttributesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_fleet_location_attributes::DescribeFleetLocationAttributesError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::describe_fleet_location_attributes::DescribeFleetLocationAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_fleet_location_capacity::DescribeFleetLocationCapacityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_fleet_location_capacity::DescribeFleetLocationCapacityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_fleet_location_capacity::DescribeFleetLocationCapacityError>
    for Error
{
    fn from(
        err: crate::operation::describe_fleet_location_capacity::DescribeFleetLocationCapacityError,
    ) -> Self {
        match err {
            crate::operation::describe_fleet_location_capacity::DescribeFleetLocationCapacityError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_fleet_location_capacity::DescribeFleetLocationCapacityError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_fleet_location_capacity::DescribeFleetLocationCapacityError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_fleet_location_capacity::DescribeFleetLocationCapacityError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_fleet_location_capacity::DescribeFleetLocationCapacityError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::describe_fleet_location_capacity::DescribeFleetLocationCapacityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_fleet_location_utilization::DescribeFleetLocationUtilizationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_fleet_location_utilization::DescribeFleetLocationUtilizationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_fleet_location_utilization::DescribeFleetLocationUtilizationError> for Error {
    fn from(err: crate::operation::describe_fleet_location_utilization::DescribeFleetLocationUtilizationError) -> Self {
        match err {
            crate::operation::describe_fleet_location_utilization::DescribeFleetLocationUtilizationError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_fleet_location_utilization::DescribeFleetLocationUtilizationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_fleet_location_utilization::DescribeFleetLocationUtilizationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_fleet_location_utilization::DescribeFleetLocationUtilizationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_fleet_location_utilization::DescribeFleetLocationUtilizationError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::describe_fleet_location_utilization::DescribeFleetLocationUtilizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_fleet_port_settings::DescribeFleetPortSettingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_fleet_port_settings::DescribeFleetPortSettingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_fleet_port_settings::DescribeFleetPortSettingsError>
    for Error
{
    fn from(
        err: crate::operation::describe_fleet_port_settings::DescribeFleetPortSettingsError,
    ) -> Self {
        match err {
            crate::operation::describe_fleet_port_settings::DescribeFleetPortSettingsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_fleet_port_settings::DescribeFleetPortSettingsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_fleet_port_settings::DescribeFleetPortSettingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_fleet_port_settings::DescribeFleetPortSettingsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_fleet_port_settings::DescribeFleetPortSettingsError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::describe_fleet_port_settings::DescribeFleetPortSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_fleet_utilization::DescribeFleetUtilizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_fleet_utilization::DescribeFleetUtilizationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_fleet_utilization::DescribeFleetUtilizationError> for Error {
    fn from(
        err: crate::operation::describe_fleet_utilization::DescribeFleetUtilizationError,
    ) -> Self {
        match err {
            crate::operation::describe_fleet_utilization::DescribeFleetUtilizationError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_fleet_utilization::DescribeFleetUtilizationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_fleet_utilization::DescribeFleetUtilizationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_fleet_utilization::DescribeFleetUtilizationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_fleet_utilization::DescribeFleetUtilizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_game_server::DescribeGameServerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_game_server::DescribeGameServerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_game_server::DescribeGameServerError> for Error {
    fn from(err: crate::operation::describe_game_server::DescribeGameServerError) -> Self {
        match err {
            crate::operation::describe_game_server::DescribeGameServerError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_game_server::DescribeGameServerError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_game_server::DescribeGameServerError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_game_server::DescribeGameServerError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_game_server::DescribeGameServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_game_server_group::DescribeGameServerGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_game_server_group::DescribeGameServerGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_game_server_group::DescribeGameServerGroupError> for Error {
    fn from(
        err: crate::operation::describe_game_server_group::DescribeGameServerGroupError,
    ) -> Self {
        match err {
            crate::operation::describe_game_server_group::DescribeGameServerGroupError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_game_server_group::DescribeGameServerGroupError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_game_server_group::DescribeGameServerGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_game_server_group::DescribeGameServerGroupError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_game_server_group::DescribeGameServerGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_game_server_instances::DescribeGameServerInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_game_server_instances::DescribeGameServerInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_game_server_instances::DescribeGameServerInstancesError>
    for Error
{
    fn from(
        err: crate::operation::describe_game_server_instances::DescribeGameServerInstancesError,
    ) -> Self {
        match err {
            crate::operation::describe_game_server_instances::DescribeGameServerInstancesError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_game_server_instances::DescribeGameServerInstancesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_game_server_instances::DescribeGameServerInstancesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_game_server_instances::DescribeGameServerInstancesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_game_server_instances::DescribeGameServerInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_game_session_details::DescribeGameSessionDetailsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_game_session_details::DescribeGameSessionDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_game_session_details::DescribeGameSessionDetailsError>
    for Error
{
    fn from(
        err: crate::operation::describe_game_session_details::DescribeGameSessionDetailsError,
    ) -> Self {
        match err {
            crate::operation::describe_game_session_details::DescribeGameSessionDetailsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_game_session_details::DescribeGameSessionDetailsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_game_session_details::DescribeGameSessionDetailsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_game_session_details::DescribeGameSessionDetailsError::TerminalRoutingStrategyException(inner) => Error::TerminalRoutingStrategyException(inner),
            crate::operation::describe_game_session_details::DescribeGameSessionDetailsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_game_session_details::DescribeGameSessionDetailsError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::describe_game_session_details::DescribeGameSessionDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError>
    for Error
{
    fn from(
        err: crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError,
    ) -> Self {
        match err {
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_game_session_queues::DescribeGameSessionQueuesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_game_session_queues::DescribeGameSessionQueuesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_game_session_queues::DescribeGameSessionQueuesError>
    for Error
{
    fn from(
        err: crate::operation::describe_game_session_queues::DescribeGameSessionQueuesError,
    ) -> Self {
        match err {
            crate::operation::describe_game_session_queues::DescribeGameSessionQueuesError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_game_session_queues::DescribeGameSessionQueuesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_game_session_queues::DescribeGameSessionQueuesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_game_session_queues::DescribeGameSessionQueuesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_game_session_queues::DescribeGameSessionQueuesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_game_sessions::DescribeGameSessionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_game_sessions::DescribeGameSessionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_game_sessions::DescribeGameSessionsError> for Error {
    fn from(err: crate::operation::describe_game_sessions::DescribeGameSessionsError) -> Self {
        match err {
            crate::operation::describe_game_sessions::DescribeGameSessionsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_game_sessions::DescribeGameSessionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_game_sessions::DescribeGameSessionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_game_sessions::DescribeGameSessionsError::TerminalRoutingStrategyException(inner) => Error::TerminalRoutingStrategyException(inner),
            crate::operation::describe_game_sessions::DescribeGameSessionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_game_sessions::DescribeGameSessionsError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::describe_game_sessions::DescribeGameSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_instances::DescribeInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_instances::DescribeInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_instances::DescribeInstancesError> for Error {
    fn from(err: crate::operation::describe_instances::DescribeInstancesError) -> Self {
        match err {
            crate::operation::describe_instances::DescribeInstancesError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_instances::DescribeInstancesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_instances::DescribeInstancesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_instances::DescribeInstancesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_instances::DescribeInstancesError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::describe_instances::DescribeInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_matchmaking::DescribeMatchmakingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_matchmaking::DescribeMatchmakingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_matchmaking::DescribeMatchmakingError> for Error {
    fn from(err: crate::operation::describe_matchmaking::DescribeMatchmakingError) -> Self {
        match err {
            crate::operation::describe_matchmaking::DescribeMatchmakingError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_matchmaking::DescribeMatchmakingError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_matchmaking::DescribeMatchmakingError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::describe_matchmaking::DescribeMatchmakingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsError> for Error {
    fn from(err: crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsError) -> Self {
        match err {
            crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_matchmaking_rule_sets::DescribeMatchmakingRuleSetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_matchmaking_rule_sets::DescribeMatchmakingRuleSetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_matchmaking_rule_sets::DescribeMatchmakingRuleSetsError>
    for Error
{
    fn from(
        err: crate::operation::describe_matchmaking_rule_sets::DescribeMatchmakingRuleSetsError,
    ) -> Self {
        match err {
            crate::operation::describe_matchmaking_rule_sets::DescribeMatchmakingRuleSetsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_matchmaking_rule_sets::DescribeMatchmakingRuleSetsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_matchmaking_rule_sets::DescribeMatchmakingRuleSetsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_matchmaking_rule_sets::DescribeMatchmakingRuleSetsError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::describe_matchmaking_rule_sets::DescribeMatchmakingRuleSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_player_sessions::DescribePlayerSessionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_player_sessions::DescribePlayerSessionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_player_sessions::DescribePlayerSessionsError> for Error {
    fn from(err: crate::operation::describe_player_sessions::DescribePlayerSessionsError) -> Self {
        match err {
            crate::operation::describe_player_sessions::DescribePlayerSessionsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_player_sessions::DescribePlayerSessionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_player_sessions::DescribePlayerSessionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_player_sessions::DescribePlayerSessionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_player_sessions::DescribePlayerSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_runtime_configuration::DescribeRuntimeConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_runtime_configuration::DescribeRuntimeConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_runtime_configuration::DescribeRuntimeConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::describe_runtime_configuration::DescribeRuntimeConfigurationError,
    ) -> Self {
        match err {
            crate::operation::describe_runtime_configuration::DescribeRuntimeConfigurationError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_runtime_configuration::DescribeRuntimeConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_runtime_configuration::DescribeRuntimeConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_runtime_configuration::DescribeRuntimeConfigurationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_runtime_configuration::DescribeRuntimeConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_scaling_policies::DescribeScalingPoliciesError> for Error {
    fn from(
        err: crate::operation::describe_scaling_policies::DescribeScalingPoliciesError,
    ) -> Self {
        match err {
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_script::DescribeScriptError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_script::DescribeScriptError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_script::DescribeScriptError> for Error {
    fn from(err: crate::operation::describe_script::DescribeScriptError) -> Self {
        match err {
            crate::operation::describe_script::DescribeScriptError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::describe_script::DescribeScriptError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::describe_script::DescribeScriptError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::describe_script::DescribeScriptError::UnauthorizedException(
                inner,
            ) => Error::UnauthorizedException(inner),
            crate::operation::describe_script::DescribeScriptError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_vpc_peering_authorizations::DescribeVpcPeeringAuthorizationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_vpc_peering_authorizations::DescribeVpcPeeringAuthorizationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_vpc_peering_authorizations::DescribeVpcPeeringAuthorizationsError> for Error {
    fn from(err: crate::operation::describe_vpc_peering_authorizations::DescribeVpcPeeringAuthorizationsError) -> Self {
        match err {
            crate::operation::describe_vpc_peering_authorizations::DescribeVpcPeeringAuthorizationsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_vpc_peering_authorizations::DescribeVpcPeeringAuthorizationsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_vpc_peering_authorizations::DescribeVpcPeeringAuthorizationsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_vpc_peering_authorizations::DescribeVpcPeeringAuthorizationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_vpc_peering_connections::DescribeVpcPeeringConnectionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_vpc_peering_connections::DescribeVpcPeeringConnectionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_vpc_peering_connections::DescribeVpcPeeringConnectionsError>
    for Error
{
    fn from(
        err: crate::operation::describe_vpc_peering_connections::DescribeVpcPeeringConnectionsError,
    ) -> Self {
        match err {
            crate::operation::describe_vpc_peering_connections::DescribeVpcPeeringConnectionsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::describe_vpc_peering_connections::DescribeVpcPeeringConnectionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_vpc_peering_connections::DescribeVpcPeeringConnectionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_vpc_peering_connections::DescribeVpcPeeringConnectionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_vpc_peering_connections::DescribeVpcPeeringConnectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_compute_access::GetComputeAccessError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_compute_access::GetComputeAccessError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_compute_access::GetComputeAccessError> for Error {
    fn from(err: crate::operation::get_compute_access::GetComputeAccessError) -> Self {
        match err {
            crate::operation::get_compute_access::GetComputeAccessError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::get_compute_access::GetComputeAccessError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_compute_access::GetComputeAccessError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_compute_access::GetComputeAccessError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_compute_access::GetComputeAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_compute_auth_token::GetComputeAuthTokenError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_compute_auth_token::GetComputeAuthTokenError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_compute_auth_token::GetComputeAuthTokenError> for Error {
    fn from(err: crate::operation::get_compute_auth_token::GetComputeAuthTokenError) -> Self {
        match err {
            crate::operation::get_compute_auth_token::GetComputeAuthTokenError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::get_compute_auth_token::GetComputeAuthTokenError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_compute_auth_token::GetComputeAuthTokenError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_compute_auth_token::GetComputeAuthTokenError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_compute_auth_token::GetComputeAuthTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_game_session_log_url::GetGameSessionLogUrlError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_game_session_log_url::GetGameSessionLogUrlError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_game_session_log_url::GetGameSessionLogUrlError> for Error {
    fn from(err: crate::operation::get_game_session_log_url::GetGameSessionLogUrlError) -> Self {
        match err {
            crate::operation::get_game_session_log_url::GetGameSessionLogUrlError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::get_game_session_log_url::GetGameSessionLogUrlError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_game_session_log_url::GetGameSessionLogUrlError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_game_session_log_url::GetGameSessionLogUrlError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_game_session_log_url::GetGameSessionLogUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_instance_access::GetInstanceAccessError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_instance_access::GetInstanceAccessError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_instance_access::GetInstanceAccessError> for Error {
    fn from(err: crate::operation::get_instance_access::GetInstanceAccessError) -> Self {
        match err {
            crate::operation::get_instance_access::GetInstanceAccessError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::get_instance_access::GetInstanceAccessError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_instance_access::GetInstanceAccessError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_instance_access::GetInstanceAccessError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_instance_access::GetInstanceAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_aliases::ListAliasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_aliases::ListAliasesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_aliases::ListAliasesError> for Error {
    fn from(err: crate::operation::list_aliases::ListAliasesError) -> Self {
        match err {
            crate::operation::list_aliases::ListAliasesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_aliases::ListAliasesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_aliases::ListAliasesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_aliases::ListAliasesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_builds::ListBuildsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_builds::ListBuildsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_builds::ListBuildsError> for Error {
    fn from(err: crate::operation::list_builds::ListBuildsError) -> Self {
        match err {
            crate::operation::list_builds::ListBuildsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_builds::ListBuildsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_builds::ListBuildsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_builds::ListBuildsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_compute::ListComputeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_compute::ListComputeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_compute::ListComputeError> for Error {
    fn from(err: crate::operation::list_compute::ListComputeError) -> Self {
        match err {
            crate::operation::list_compute::ListComputeError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_compute::ListComputeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_compute::ListComputeError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_compute::ListComputeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_fleets::ListFleetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_fleets::ListFleetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_fleets::ListFleetsError> for Error {
    fn from(err: crate::operation::list_fleets::ListFleetsError) -> Self {
        match err {
            crate::operation::list_fleets::ListFleetsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_fleets::ListFleetsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_fleets::ListFleetsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_fleets::ListFleetsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_fleets::ListFleetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_game_server_groups::ListGameServerGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_game_server_groups::ListGameServerGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_game_server_groups::ListGameServerGroupsError> for Error {
    fn from(err: crate::operation::list_game_server_groups::ListGameServerGroupsError) -> Self {
        match err {
            crate::operation::list_game_server_groups::ListGameServerGroupsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::list_game_server_groups::ListGameServerGroupsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_game_server_groups::ListGameServerGroupsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_game_server_groups::ListGameServerGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_game_servers::ListGameServersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_game_servers::ListGameServersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_game_servers::ListGameServersError> for Error {
    fn from(err: crate::operation::list_game_servers::ListGameServersError) -> Self {
        match err {
            crate::operation::list_game_servers::ListGameServersError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::list_game_servers::ListGameServersError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::list_game_servers::ListGameServersError::UnauthorizedException(
                inner,
            ) => Error::UnauthorizedException(inner),
            crate::operation::list_game_servers::ListGameServersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_locations::ListLocationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_locations::ListLocationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_locations::ListLocationsError> for Error {
    fn from(err: crate::operation::list_locations::ListLocationsError) -> Self {
        match err {
            crate::operation::list_locations::ListLocationsError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::list_locations::ListLocationsError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::list_locations::ListLocationsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_locations::ListLocationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_scripts::ListScriptsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_scripts::ListScriptsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_scripts::ListScriptsError> for Error {
    fn from(err: crate::operation::list_scripts::ListScriptsError) -> Self {
        match err {
            crate::operation::list_scripts::ListScriptsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_scripts::ListScriptsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_scripts::ListScriptsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_scripts::ListScriptsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::TaggingFailedException(inner) => Error::TaggingFailedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_scaling_policy::PutScalingPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_scaling_policy::PutScalingPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_scaling_policy::PutScalingPolicyError> for Error {
    fn from(err: crate::operation::put_scaling_policy::PutScalingPolicyError) -> Self {
        match err {
            crate::operation::put_scaling_policy::PutScalingPolicyError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::register_compute::RegisterComputeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::register_compute::RegisterComputeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_compute::RegisterComputeError> for Error {
    fn from(err: crate::operation::register_compute::RegisterComputeError) -> Self {
        match err {
            crate::operation::register_compute::RegisterComputeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::register_compute::RegisterComputeError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::register_compute::RegisterComputeError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::register_compute::RegisterComputeError::UnauthorizedException(
                inner,
            ) => Error::UnauthorizedException(inner),
            crate::operation::register_compute::RegisterComputeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::register_game_server::RegisterGameServerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::register_game_server::RegisterGameServerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_game_server::RegisterGameServerError> for Error {
    fn from(err: crate::operation::register_game_server::RegisterGameServerError) -> Self {
        match err {
            crate::operation::register_game_server::RegisterGameServerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::register_game_server::RegisterGameServerError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::register_game_server::RegisterGameServerError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::register_game_server::RegisterGameServerError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::register_game_server::RegisterGameServerError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::register_game_server::RegisterGameServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::request_upload_credentials::RequestUploadCredentialsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::request_upload_credentials::RequestUploadCredentialsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::request_upload_credentials::RequestUploadCredentialsError> for Error {
    fn from(
        err: crate::operation::request_upload_credentials::RequestUploadCredentialsError,
    ) -> Self {
        match err {
            crate::operation::request_upload_credentials::RequestUploadCredentialsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::request_upload_credentials::RequestUploadCredentialsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::request_upload_credentials::RequestUploadCredentialsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::request_upload_credentials::RequestUploadCredentialsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::request_upload_credentials::RequestUploadCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::resolve_alias::ResolveAliasError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::resolve_alias::ResolveAliasError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::resolve_alias::ResolveAliasError> for Error {
    fn from(err: crate::operation::resolve_alias::ResolveAliasError) -> Self {
        match err {
            crate::operation::resolve_alias::ResolveAliasError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::resolve_alias::ResolveAliasError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::resolve_alias::ResolveAliasError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::resolve_alias::ResolveAliasError::TerminalRoutingStrategyException(inner) => Error::TerminalRoutingStrategyException(inner),
            crate::operation::resolve_alias::ResolveAliasError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::resolve_alias::ResolveAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::resume_game_server_group::ResumeGameServerGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::resume_game_server_group::ResumeGameServerGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::resume_game_server_group::ResumeGameServerGroupError> for Error {
    fn from(err: crate::operation::resume_game_server_group::ResumeGameServerGroupError) -> Self {
        match err {
            crate::operation::resume_game_server_group::ResumeGameServerGroupError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::resume_game_server_group::ResumeGameServerGroupError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::resume_game_server_group::ResumeGameServerGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::resume_game_server_group::ResumeGameServerGroupError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::resume_game_server_group::ResumeGameServerGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::search_game_sessions::SearchGameSessionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::search_game_sessions::SearchGameSessionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_game_sessions::SearchGameSessionsError> for Error {
    fn from(err: crate::operation::search_game_sessions::SearchGameSessionsError) -> Self {
        match err {
            crate::operation::search_game_sessions::SearchGameSessionsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::search_game_sessions::SearchGameSessionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::search_game_sessions::SearchGameSessionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::search_game_sessions::SearchGameSessionsError::TerminalRoutingStrategyException(inner) => Error::TerminalRoutingStrategyException(inner),
            crate::operation::search_game_sessions::SearchGameSessionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_game_sessions::SearchGameSessionsError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::search_game_sessions::SearchGameSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_fleet_actions::StartFleetActionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_fleet_actions::StartFleetActionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_fleet_actions::StartFleetActionsError> for Error {
    fn from(err: crate::operation::start_fleet_actions::StartFleetActionsError) -> Self {
        match err {
            crate::operation::start_fleet_actions::StartFleetActionsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::start_fleet_actions::StartFleetActionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::start_fleet_actions::StartFleetActionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_fleet_actions::StartFleetActionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::start_fleet_actions::StartFleetActionsError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::start_fleet_actions::StartFleetActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_game_session_placement::StartGameSessionPlacementError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_game_session_placement::StartGameSessionPlacementError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_game_session_placement::StartGameSessionPlacementError>
    for Error
{
    fn from(
        err: crate::operation::start_game_session_placement::StartGameSessionPlacementError,
    ) -> Self {
        match err {
            crate::operation::start_game_session_placement::StartGameSessionPlacementError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::start_game_session_placement::StartGameSessionPlacementError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::start_game_session_placement::StartGameSessionPlacementError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_game_session_placement::StartGameSessionPlacementError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::start_game_session_placement::StartGameSessionPlacementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_match_backfill::StartMatchBackfillError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_match_backfill::StartMatchBackfillError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_match_backfill::StartMatchBackfillError> for Error {
    fn from(err: crate::operation::start_match_backfill::StartMatchBackfillError) -> Self {
        match err {
            crate::operation::start_match_backfill::StartMatchBackfillError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::start_match_backfill::StartMatchBackfillError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::start_match_backfill::StartMatchBackfillError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_match_backfill::StartMatchBackfillError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::start_match_backfill::StartMatchBackfillError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_matchmaking::StartMatchmakingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_matchmaking::StartMatchmakingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_matchmaking::StartMatchmakingError> for Error {
    fn from(err: crate::operation::start_matchmaking::StartMatchmakingError) -> Self {
        match err {
            crate::operation::start_matchmaking::StartMatchmakingError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::start_matchmaking::StartMatchmakingError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::start_matchmaking::StartMatchmakingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_matchmaking::StartMatchmakingError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::start_matchmaking::StartMatchmakingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_fleet_actions::StopFleetActionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_fleet_actions::StopFleetActionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_fleet_actions::StopFleetActionsError> for Error {
    fn from(err: crate::operation::stop_fleet_actions::StopFleetActionsError) -> Self {
        match err {
            crate::operation::stop_fleet_actions::StopFleetActionsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::stop_fleet_actions::StopFleetActionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::stop_fleet_actions::StopFleetActionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::stop_fleet_actions::StopFleetActionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::stop_fleet_actions::StopFleetActionsError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::stop_fleet_actions::StopFleetActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_game_session_placement::StopGameSessionPlacementError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_game_session_placement::StopGameSessionPlacementError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_game_session_placement::StopGameSessionPlacementError> for Error {
    fn from(
        err: crate::operation::stop_game_session_placement::StopGameSessionPlacementError,
    ) -> Self {
        match err {
            crate::operation::stop_game_session_placement::StopGameSessionPlacementError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::stop_game_session_placement::StopGameSessionPlacementError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::stop_game_session_placement::StopGameSessionPlacementError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::stop_game_session_placement::StopGameSessionPlacementError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::stop_game_session_placement::StopGameSessionPlacementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_matchmaking::StopMatchmakingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_matchmaking::StopMatchmakingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_matchmaking::StopMatchmakingError> for Error {
    fn from(err: crate::operation::stop_matchmaking::StopMatchmakingError) -> Self {
        match err {
            crate::operation::stop_matchmaking::StopMatchmakingError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::stop_matchmaking::StopMatchmakingError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::stop_matchmaking::StopMatchmakingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::stop_matchmaking::StopMatchmakingError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::stop_matchmaking::StopMatchmakingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::suspend_game_server_group::SuspendGameServerGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::suspend_game_server_group::SuspendGameServerGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::suspend_game_server_group::SuspendGameServerGroupError> for Error {
    fn from(err: crate::operation::suspend_game_server_group::SuspendGameServerGroupError) -> Self {
        match err {
            crate::operation::suspend_game_server_group::SuspendGameServerGroupError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::suspend_game_server_group::SuspendGameServerGroupError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::suspend_game_server_group::SuspendGameServerGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::suspend_game_server_group::SuspendGameServerGroupError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::suspend_game_server_group::SuspendGameServerGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::tag_resource::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::untag_resource::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::TaggingFailedException(inner) => {
                Error::TaggingFailedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_alias::UpdateAliasError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_alias::UpdateAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_alias::UpdateAliasError> for Error {
    fn from(err: crate::operation::update_alias::UpdateAliasError) -> Self {
        match err {
            crate::operation::update_alias::UpdateAliasError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::update_alias::UpdateAliasError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_alias::UpdateAliasError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_alias::UpdateAliasError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_alias::UpdateAliasError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_build::UpdateBuildError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_build::UpdateBuildError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_build::UpdateBuildError> for Error {
    fn from(err: crate::operation::update_build::UpdateBuildError) -> Self {
        match err {
            crate::operation::update_build::UpdateBuildError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::update_build::UpdateBuildError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_build::UpdateBuildError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_build::UpdateBuildError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_build::UpdateBuildError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_fleet_attributes::UpdateFleetAttributesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_fleet_attributes::UpdateFleetAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_fleet_attributes::UpdateFleetAttributesError> for Error {
    fn from(err: crate::operation::update_fleet_attributes::UpdateFleetAttributesError) -> Self {
        match err {
            crate::operation::update_fleet_attributes::UpdateFleetAttributesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_fleet_attributes::UpdateFleetAttributesError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::update_fleet_attributes::UpdateFleetAttributesError::InvalidFleetStatusException(inner) => Error::InvalidFleetStatusException(inner),
            crate::operation::update_fleet_attributes::UpdateFleetAttributesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_fleet_attributes::UpdateFleetAttributesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_fleet_attributes::UpdateFleetAttributesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_fleet_attributes::UpdateFleetAttributesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_fleet_attributes::UpdateFleetAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_fleet_capacity::UpdateFleetCapacityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_fleet_capacity::UpdateFleetCapacityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_fleet_capacity::UpdateFleetCapacityError> for Error {
    fn from(err: crate::operation::update_fleet_capacity::UpdateFleetCapacityError) -> Self {
        match err {
            crate::operation::update_fleet_capacity::UpdateFleetCapacityError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_fleet_capacity::UpdateFleetCapacityError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::update_fleet_capacity::UpdateFleetCapacityError::InvalidFleetStatusException(inner) => Error::InvalidFleetStatusException(inner),
            crate::operation::update_fleet_capacity::UpdateFleetCapacityError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_fleet_capacity::UpdateFleetCapacityError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_fleet_capacity::UpdateFleetCapacityError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_fleet_capacity::UpdateFleetCapacityError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_fleet_capacity::UpdateFleetCapacityError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::update_fleet_capacity::UpdateFleetCapacityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError> for Error {
    fn from(
        err: crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError,
    ) -> Self {
        match err {
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError::InvalidFleetStatusException(inner) => Error::InvalidFleetStatusException(inner),
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_game_server::UpdateGameServerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_game_server::UpdateGameServerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_game_server::UpdateGameServerError> for Error {
    fn from(err: crate::operation::update_game_server::UpdateGameServerError) -> Self {
        match err {
            crate::operation::update_game_server::UpdateGameServerError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::update_game_server::UpdateGameServerError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_game_server::UpdateGameServerError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_game_server::UpdateGameServerError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_game_server::UpdateGameServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_game_server_group::UpdateGameServerGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_game_server_group::UpdateGameServerGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_game_server_group::UpdateGameServerGroupError> for Error {
    fn from(err: crate::operation::update_game_server_group::UpdateGameServerGroupError) -> Self {
        match err {
            crate::operation::update_game_server_group::UpdateGameServerGroupError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::update_game_server_group::UpdateGameServerGroupError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_game_server_group::UpdateGameServerGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_game_server_group::UpdateGameServerGroupError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_game_server_group::UpdateGameServerGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_game_session::UpdateGameSessionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_game_session::UpdateGameSessionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_game_session::UpdateGameSessionError> for Error {
    fn from(err: crate::operation::update_game_session::UpdateGameSessionError) -> Self {
        match err {
            crate::operation::update_game_session::UpdateGameSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_game_session::UpdateGameSessionError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::update_game_session::UpdateGameSessionError::InvalidGameSessionStatusException(inner) => Error::InvalidGameSessionStatusException(inner),
            crate::operation::update_game_session::UpdateGameSessionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_game_session::UpdateGameSessionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_game_session::UpdateGameSessionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_game_session::UpdateGameSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_game_session_queue::UpdateGameSessionQueueError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_game_session_queue::UpdateGameSessionQueueError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_game_session_queue::UpdateGameSessionQueueError> for Error {
    fn from(err: crate::operation::update_game_session_queue::UpdateGameSessionQueueError) -> Self {
        match err {
            crate::operation::update_game_session_queue::UpdateGameSessionQueueError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::update_game_session_queue::UpdateGameSessionQueueError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_game_session_queue::UpdateGameSessionQueueError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_game_session_queue::UpdateGameSessionQueueError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_game_session_queue::UpdateGameSessionQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_matchmaking_configuration::UpdateMatchmakingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_matchmaking_configuration::UpdateMatchmakingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_matchmaking_configuration::UpdateMatchmakingConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::update_matchmaking_configuration::UpdateMatchmakingConfigurationError,
    ) -> Self {
        match err {
            crate::operation::update_matchmaking_configuration::UpdateMatchmakingConfigurationError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::update_matchmaking_configuration::UpdateMatchmakingConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_matchmaking_configuration::UpdateMatchmakingConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_matchmaking_configuration::UpdateMatchmakingConfigurationError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::update_matchmaking_configuration::UpdateMatchmakingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationError,
    ) -> Self {
        match err {
            crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationError::InvalidFleetStatusException(inner) => Error::InvalidFleetStatusException(inner),
            crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_script::UpdateScriptError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_script::UpdateScriptError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_script::UpdateScriptError> for Error {
    fn from(err: crate::operation::update_script::UpdateScriptError) -> Self {
        match err {
            crate::operation::update_script::UpdateScriptError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::update_script::UpdateScriptError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_script::UpdateScriptError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_script::UpdateScriptError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_script::UpdateScriptError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::validate_matchmaking_rule_set::ValidateMatchmakingRuleSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::validate_matchmaking_rule_set::ValidateMatchmakingRuleSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::validate_matchmaking_rule_set::ValidateMatchmakingRuleSetError>
    for Error
{
    fn from(
        err: crate::operation::validate_matchmaking_rule_set::ValidateMatchmakingRuleSetError,
    ) -> Self {
        match err {
            crate::operation::validate_matchmaking_rule_set::ValidateMatchmakingRuleSetError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::validate_matchmaking_rule_set::ValidateMatchmakingRuleSetError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::validate_matchmaking_rule_set::ValidateMatchmakingRuleSetError::UnsupportedRegionException(inner) => Error::UnsupportedRegionException(inner),
            crate::operation::validate_matchmaking_rule_set::ValidateMatchmakingRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConflictException(e) => e.request_id(),
            Self::FleetCapacityExceededException(e) => e.request_id(),
            Self::GameSessionFullException(e) => e.request_id(),
            Self::IdempotentParameterMismatchException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::InvalidFleetStatusException(e) => e.request_id(),
            Self::InvalidGameSessionStatusException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::OutOfCapacityException(e) => e.request_id(),
            Self::TaggingFailedException(e) => e.request_id(),
            Self::TerminalRoutingStrategyException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::UnsupportedRegionException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
