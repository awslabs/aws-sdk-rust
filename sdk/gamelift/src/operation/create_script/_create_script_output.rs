// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateScriptOutput {
    /// <p>The newly created script record with a unique script ID and ARN. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the <i>CreateScript</i> request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.</p>
    #[doc(hidden)]
    pub script: std::option::Option<crate::types::Script>,
    _request_id: Option<String>,
}
impl CreateScriptOutput {
    /// <p>The newly created script record with a unique script ID and ARN. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the <i>CreateScript</i> request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.</p>
    pub fn script(&self) -> std::option::Option<&crate::types::Script> {
        self.script.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateScriptOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateScriptOutput {
    /// Creates a new builder-style object to manufacture [`CreateScriptOutput`](crate::operation::create_script::CreateScriptOutput).
    pub fn builder() -> crate::operation::create_script::builders::CreateScriptOutputBuilder {
        crate::operation::create_script::builders::CreateScriptOutputBuilder::default()
    }
}

/// A builder for [`CreateScriptOutput`](crate::operation::create_script::CreateScriptOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateScriptOutputBuilder {
    pub(crate) script: std::option::Option<crate::types::Script>,
    _request_id: Option<String>,
}
impl CreateScriptOutputBuilder {
    /// <p>The newly created script record with a unique script ID and ARN. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the <i>CreateScript</i> request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.</p>
    pub fn script(mut self, input: crate::types::Script) -> Self {
        self.script = Some(input);
        self
    }
    /// <p>The newly created script record with a unique script ID and ARN. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the <i>CreateScript</i> request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.</p>
    pub fn set_script(mut self, input: std::option::Option<crate::types::Script>) -> Self {
        self.script = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateScriptOutput`](crate::operation::create_script::CreateScriptOutput).
    pub fn build(self) -> crate::operation::create_script::CreateScriptOutput {
        crate::operation::create_script::CreateScriptOutput {
            script: self.script,
            _request_id: self._request_id,
        }
    }
}
