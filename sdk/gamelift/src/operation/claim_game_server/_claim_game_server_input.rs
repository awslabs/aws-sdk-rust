// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClaimGameServerInput {
    /// <p>A unique identifier for the game server group where the game server is running. If you are not specifying a game server to claim, this value identifies where you want Amazon GameLift FleetIQ to look for an available game server to claim. </p>
    pub game_server_group_name: ::std::option::Option<::std::string::String>,
    /// <p>A custom string that uniquely identifies the game server to claim. If this parameter is left empty, Amazon GameLift FleetIQ searches for an available game server in the specified game server group.</p>
    pub game_server_id: ::std::option::Option<::std::string::String>,
    /// <p>A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers. </p>
    pub game_server_data: ::std::option::Option<::std::string::String>,
    /// <p>Object that restricts how a claimed game server is chosen.</p>
    pub filter_option: ::std::option::Option<crate::types::ClaimFilterOption>,
}
impl ClaimGameServerInput {
    /// <p>A unique identifier for the game server group where the game server is running. If you are not specifying a game server to claim, this value identifies where you want Amazon GameLift FleetIQ to look for an available game server to claim. </p>
    pub fn game_server_group_name(&self) -> ::std::option::Option<&str> {
        self.game_server_group_name.as_deref()
    }
    /// <p>A custom string that uniquely identifies the game server to claim. If this parameter is left empty, Amazon GameLift FleetIQ searches for an available game server in the specified game server group.</p>
    pub fn game_server_id(&self) -> ::std::option::Option<&str> {
        self.game_server_id.as_deref()
    }
    /// <p>A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers. </p>
    pub fn game_server_data(&self) -> ::std::option::Option<&str> {
        self.game_server_data.as_deref()
    }
    /// <p>Object that restricts how a claimed game server is chosen.</p>
    pub fn filter_option(&self) -> ::std::option::Option<&crate::types::ClaimFilterOption> {
        self.filter_option.as_ref()
    }
}
impl ClaimGameServerInput {
    /// Creates a new builder-style object to manufacture [`ClaimGameServerInput`](crate::operation::claim_game_server::ClaimGameServerInput).
    pub fn builder() -> crate::operation::claim_game_server::builders::ClaimGameServerInputBuilder {
        crate::operation::claim_game_server::builders::ClaimGameServerInputBuilder::default()
    }
}

/// A builder for [`ClaimGameServerInput`](crate::operation::claim_game_server::ClaimGameServerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ClaimGameServerInputBuilder {
    pub(crate) game_server_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) game_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) game_server_data: ::std::option::Option<::std::string::String>,
    pub(crate) filter_option: ::std::option::Option<crate::types::ClaimFilterOption>,
}
impl ClaimGameServerInputBuilder {
    /// <p>A unique identifier for the game server group where the game server is running. If you are not specifying a game server to claim, this value identifies where you want Amazon GameLift FleetIQ to look for an available game server to claim. </p>
    /// This field is required.
    pub fn game_server_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.game_server_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the game server group where the game server is running. If you are not specifying a game server to claim, this value identifies where you want Amazon GameLift FleetIQ to look for an available game server to claim. </p>
    pub fn set_game_server_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.game_server_group_name = input;
        self
    }
    /// <p>A unique identifier for the game server group where the game server is running. If you are not specifying a game server to claim, this value identifies where you want Amazon GameLift FleetIQ to look for an available game server to claim. </p>
    pub fn get_game_server_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.game_server_group_name
    }
    /// <p>A custom string that uniquely identifies the game server to claim. If this parameter is left empty, Amazon GameLift FleetIQ searches for an available game server in the specified game server group.</p>
    pub fn game_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.game_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A custom string that uniquely identifies the game server to claim. If this parameter is left empty, Amazon GameLift FleetIQ searches for an available game server in the specified game server group.</p>
    pub fn set_game_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.game_server_id = input;
        self
    }
    /// <p>A custom string that uniquely identifies the game server to claim. If this parameter is left empty, Amazon GameLift FleetIQ searches for an available game server in the specified game server group.</p>
    pub fn get_game_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.game_server_id
    }
    /// <p>A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers. </p>
    pub fn game_server_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.game_server_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers. </p>
    pub fn set_game_server_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.game_server_data = input;
        self
    }
    /// <p>A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers. </p>
    pub fn get_game_server_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.game_server_data
    }
    /// <p>Object that restricts how a claimed game server is chosen.</p>
    pub fn filter_option(mut self, input: crate::types::ClaimFilterOption) -> Self {
        self.filter_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>Object that restricts how a claimed game server is chosen.</p>
    pub fn set_filter_option(mut self, input: ::std::option::Option<crate::types::ClaimFilterOption>) -> Self {
        self.filter_option = input;
        self
    }
    /// <p>Object that restricts how a claimed game server is chosen.</p>
    pub fn get_filter_option(&self) -> &::std::option::Option<crate::types::ClaimFilterOption> {
        &self.filter_option
    }
    /// Consumes the builder and constructs a [`ClaimGameServerInput`](crate::operation::claim_game_server::ClaimGameServerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::claim_game_server::ClaimGameServerInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::claim_game_server::ClaimGameServerInput {
            game_server_group_name: self.game_server_group_name,
            game_server_id: self.game_server_id,
            game_server_data: self.game_server_data,
            filter_option: self.filter_option,
        })
    }
}
