// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_scaling_policies::_describe_scaling_policies_output::DescribeScalingPoliciesOutputBuilder;

pub use crate::operation::describe_scaling_policies::_describe_scaling_policies_input::DescribeScalingPoliciesInputBuilder;

/// Fluent builder constructing a request to `DescribeScalingPolicies`.
///
/// <p>Retrieves all scaling policies applied to a fleet.</p>
/// <p>To get a fleet's scaling policies, specify the fleet ID. You can filter this request by policy status, such as to retrieve only active scaling policies. Use the pagination parameters to retrieve results as a set of sequential pages. If successful, set of <code>ScalingPolicy</code> objects is returned for the fleet.</p>
/// <p>A fleet may have all of its scaling policies suspended. This operation does not affect the status of the scaling policies, which remains ACTIVE.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeScalingPoliciesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::describe_scaling_policies::builders::DescribeScalingPoliciesInputBuilder,
}
impl DescribeScalingPoliciesFluentBuilder {
    /// Creates a new `DescribeScalingPolicies`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_scaling_policies::DescribeScalingPolicies,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_scaling_policies::DescribeScalingPoliciesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_scaling_policies::DescribeScalingPoliciesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_scaling_policies::paginator::DescribeScalingPoliciesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::describe_scaling_policies::paginator::DescribeScalingPoliciesPaginator
    {
        crate::operation::describe_scaling_policies::paginator::DescribeScalingPoliciesPaginator::new(self.handle, self.inner)
    }
    /// <p>A unique identifier for the fleet for which to retrieve scaling policies. You can use either the fleet ID or ARN value.</p>
    pub fn fleet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.fleet_id(input.into());
        self
    }
    /// <p>A unique identifier for the fleet for which to retrieve scaling policies. You can use either the fleet ID or ARN value.</p>
    pub fn set_fleet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_fleet_id(input);
        self
    }
    /// <p>Scaling policy status to filter results on. A scaling policy is only in force when in an <code>ACTIVE</code> status.</p>
    /// <ul>
    /// <li> <p> <b>ACTIVE</b> -- The scaling policy is currently in force.</p> </li>
    /// <li> <p> <b>UPDATEREQUESTED</b> -- A request to update the scaling policy has been received.</p> </li>
    /// <li> <p> <b>UPDATING</b> -- A change is being made to the scaling policy.</p> </li>
    /// <li> <p> <b>DELETEREQUESTED</b> -- A request to delete the scaling policy has been received.</p> </li>
    /// <li> <p> <b>DELETING</b> -- The scaling policy is being deleted.</p> </li>
    /// <li> <p> <b>DELETED</b> -- The scaling policy has been deleted.</p> </li>
    /// <li> <p> <b>ERROR</b> -- An error occurred in creating the policy. It should be removed and recreated.</p> </li>
    /// </ul>
    pub fn status_filter(mut self, input: crate::types::ScalingStatusType) -> Self {
        self.inner = self.inner.status_filter(input);
        self
    }
    /// <p>Scaling policy status to filter results on. A scaling policy is only in force when in an <code>ACTIVE</code> status.</p>
    /// <ul>
    /// <li> <p> <b>ACTIVE</b> -- The scaling policy is currently in force.</p> </li>
    /// <li> <p> <b>UPDATEREQUESTED</b> -- A request to update the scaling policy has been received.</p> </li>
    /// <li> <p> <b>UPDATING</b> -- A change is being made to the scaling policy.</p> </li>
    /// <li> <p> <b>DELETEREQUESTED</b> -- A request to delete the scaling policy has been received.</p> </li>
    /// <li> <p> <b>DELETING</b> -- The scaling policy is being deleted.</p> </li>
    /// <li> <p> <b>DELETED</b> -- The scaling policy has been deleted.</p> </li>
    /// <li> <p> <b>ERROR</b> -- An error occurred in creating the policy. It should be removed and recreated.</p> </li>
    /// </ul>
    pub fn set_status_filter(
        mut self,
        input: std::option::Option<crate::types::ScalingStatusType>,
    ) -> Self {
        self.inner = self.inner.set_status_filter(input);
        self
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.inner = self.inner.limit(input);
        self
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_limit(input);
        self
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> The fleet location. If you don't specify this value, the response contains the scaling policies of every location in the fleet. </p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.location(input.into());
        self
    }
    /// <p> The fleet location. If you don't specify this value, the response contains the scaling policies of every location in the fleet. </p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_location(input);
        self
    }
}
