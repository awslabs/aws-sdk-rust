// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_fleet_port_settings::_update_fleet_port_settings_output::UpdateFleetPortSettingsOutputBuilder;

pub use crate::operation::update_fleet_port_settings::_update_fleet_port_settings_input::UpdateFleetPortSettingsInputBuilder;

/// Fluent builder constructing a request to `UpdateFleetPortSettings`.
///
/// <p>Updates permissions that allow inbound traffic to connect to game sessions that are being hosted on instances in the fleet. </p>
/// <p>To update settings, specify the fleet ID to be updated and specify the changes to be made. List the permissions you want to add in <code>InboundPermissionAuthorizations</code>, and permissions you want to remove in <code>InboundPermissionRevocations</code>. Permissions to be removed must match existing fleet permissions. </p>
/// <p>If successful, the fleet ID for the updated fleet is returned. For fleets with remote locations, port setting updates can take time to propagate across all locations. You can check the status of updates in each location by calling <code>DescribeFleetPortSettings</code> with a location name.</p>
/// <p> <b>Learn more</b> </p>
/// <p> <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html">Setting up GameLift fleets</a> </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFleetPortSettingsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::update_fleet_port_settings::builders::UpdateFleetPortSettingsInputBuilder,
}
impl UpdateFleetPortSettingsFluentBuilder {
    /// Creates a new `UpdateFleetPortSettings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettings,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_fleet_port_settings::UpdateFleetPortSettingsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A unique identifier for the fleet to update port settings for. You can use either the fleet ID or ARN value.</p>
    pub fn fleet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.fleet_id(input.into());
        self
    }
    /// <p>A unique identifier for the fleet to update port settings for. You can use either the fleet ID or ARN value.</p>
    pub fn set_fleet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_fleet_id(input);
        self
    }
    /// Appends an item to `InboundPermissionAuthorizations`.
    ///
    /// To override the contents of this collection use [`set_inbound_permission_authorizations`](Self::set_inbound_permission_authorizations).
    ///
    /// <p>A collection of port settings to be added to the fleet resource.</p>
    pub fn inbound_permission_authorizations(mut self, input: crate::types::IpPermission) -> Self {
        self.inner = self.inner.inbound_permission_authorizations(input);
        self
    }
    /// <p>A collection of port settings to be added to the fleet resource.</p>
    pub fn set_inbound_permission_authorizations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::IpPermission>>,
    ) -> Self {
        self.inner = self.inner.set_inbound_permission_authorizations(input);
        self
    }
    /// Appends an item to `InboundPermissionRevocations`.
    ///
    /// To override the contents of this collection use [`set_inbound_permission_revocations`](Self::set_inbound_permission_revocations).
    ///
    /// <p>A collection of port settings to be removed from the fleet resource.</p>
    pub fn inbound_permission_revocations(mut self, input: crate::types::IpPermission) -> Self {
        self.inner = self.inner.inbound_permission_revocations(input);
        self
    }
    /// <p>A collection of port settings to be removed from the fleet resource.</p>
    pub fn set_inbound_permission_revocations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::IpPermission>>,
    ) -> Self {
        self.inner = self.inner.set_inbound_permission_revocations(input);
        self
    }
}
