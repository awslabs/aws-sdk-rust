// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePlayerSessionsOutput {
    /// <p>A collection of player session objects created for the added players.</p>
    #[doc(hidden)]
    pub player_sessions: std::option::Option<std::vec::Vec<crate::types::PlayerSession>>,
    _request_id: Option<String>,
}
impl CreatePlayerSessionsOutput {
    /// <p>A collection of player session objects created for the added players.</p>
    pub fn player_sessions(&self) -> std::option::Option<&[crate::types::PlayerSession]> {
        self.player_sessions.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreatePlayerSessionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreatePlayerSessionsOutput {
    /// Creates a new builder-style object to manufacture [`CreatePlayerSessionsOutput`](crate::operation::create_player_sessions::CreatePlayerSessionsOutput).
    pub fn builder(
    ) -> crate::operation::create_player_sessions::builders::CreatePlayerSessionsOutputBuilder {
        crate::operation::create_player_sessions::builders::CreatePlayerSessionsOutputBuilder::default()
    }
}

/// A builder for [`CreatePlayerSessionsOutput`](crate::operation::create_player_sessions::CreatePlayerSessionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreatePlayerSessionsOutputBuilder {
    pub(crate) player_sessions: std::option::Option<std::vec::Vec<crate::types::PlayerSession>>,
    _request_id: Option<String>,
}
impl CreatePlayerSessionsOutputBuilder {
    /// Appends an item to `player_sessions`.
    ///
    /// To override the contents of this collection use [`set_player_sessions`](Self::set_player_sessions).
    ///
    /// <p>A collection of player session objects created for the added players.</p>
    pub fn player_sessions(mut self, input: crate::types::PlayerSession) -> Self {
        let mut v = self.player_sessions.unwrap_or_default();
        v.push(input);
        self.player_sessions = Some(v);
        self
    }
    /// <p>A collection of player session objects created for the added players.</p>
    pub fn set_player_sessions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PlayerSession>>,
    ) -> Self {
        self.player_sessions = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreatePlayerSessionsOutput`](crate::operation::create_player_sessions::CreatePlayerSessionsOutput).
    pub fn build(self) -> crate::operation::create_player_sessions::CreatePlayerSessionsOutput {
        crate::operation::create_player_sessions::CreatePlayerSessionsOutput {
            player_sessions: self.player_sessions,
            _request_id: self._request_id,
        }
    }
}
