// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListBuildsInput {
    /// <p>Build status to filter results by. To retrieve all builds, leave this parameter empty.</p>
    /// <p>Possible build statuses include the following:</p>
    /// <ul>
    /// <li> <p> <b>INITIALIZED</b> -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value. </p> </li>
    /// <li> <p> <b>READY</b> -- The game build has been successfully uploaded. You can now create new fleets for this build.</p> </li>
    /// <li> <p> <b>FAILED</b> -- The game build upload failed. You cannot create new fleets for this build. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::BuildStatus>,
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    #[doc(hidden)]
    pub limit: std::option::Option<i32>,
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListBuildsInput {
    /// <p>Build status to filter results by. To retrieve all builds, leave this parameter empty.</p>
    /// <p>Possible build statuses include the following:</p>
    /// <ul>
    /// <li> <p> <b>INITIALIZED</b> -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value. </p> </li>
    /// <li> <p> <b>READY</b> -- The game build has been successfully uploaded. You can now create new fleets for this build.</p> </li>
    /// <li> <p> <b>FAILED</b> -- The game build upload failed. You cannot create new fleets for this build. </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::BuildStatus> {
        self.status.as_ref()
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub fn limit(&self) -> std::option::Option<i32> {
        self.limit
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListBuildsInput {
    /// Creates a new builder-style object to manufacture [`ListBuildsInput`](crate::operation::list_builds::ListBuildsInput).
    pub fn builder() -> crate::operation::list_builds::builders::ListBuildsInputBuilder {
        crate::operation::list_builds::builders::ListBuildsInputBuilder::default()
    }
}

/// A builder for [`ListBuildsInput`](crate::operation::list_builds::ListBuildsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListBuildsInputBuilder {
    pub(crate) status: std::option::Option<crate::types::BuildStatus>,
    pub(crate) limit: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListBuildsInputBuilder {
    /// <p>Build status to filter results by. To retrieve all builds, leave this parameter empty.</p>
    /// <p>Possible build statuses include the following:</p>
    /// <ul>
    /// <li> <p> <b>INITIALIZED</b> -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value. </p> </li>
    /// <li> <p> <b>READY</b> -- The game build has been successfully uploaded. You can now create new fleets for this build.</p> </li>
    /// <li> <p> <b>FAILED</b> -- The game build upload failed. You cannot create new fleets for this build. </p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::BuildStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Build status to filter results by. To retrieve all builds, leave this parameter empty.</p>
    /// <p>Possible build statuses include the following:</p>
    /// <ul>
    /// <li> <p> <b>INITIALIZED</b> -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value. </p> </li>
    /// <li> <p> <b>READY</b> -- The game build has been successfully uploaded. You can now create new fleets for this build.</p> </li>
    /// <li> <p> <b>FAILED</b> -- The game build upload failed. You cannot create new fleets for this build. </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::BuildStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = Some(input);
        self
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListBuildsInput`](crate::operation::list_builds::ListBuildsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_builds::ListBuildsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_builds::ListBuildsInput {
            status: self.status,
            limit: self.limit,
            next_token: self.next_token,
        })
    }
}
