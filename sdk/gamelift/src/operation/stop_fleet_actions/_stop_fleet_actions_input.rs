// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopFleetActionsInput {
    /// <p>A unique identifier for the fleet to stop actions on. You can use either the fleet ID or ARN value.</p>
    #[doc(hidden)]
    pub fleet_id: std::option::Option<std::string::String>,
    /// <p>List of actions to suspend on the fleet. </p>
    #[doc(hidden)]
    pub actions: std::option::Option<std::vec::Vec<crate::types::FleetAction>>,
    /// <p>The fleet location to stop fleet actions for. Specify a location in the form of an Amazon Web Services Region code, such as <code>us-west-2</code>.</p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
}
impl StopFleetActionsInput {
    /// <p>A unique identifier for the fleet to stop actions on. You can use either the fleet ID or ARN value.</p>
    pub fn fleet_id(&self) -> std::option::Option<&str> {
        self.fleet_id.as_deref()
    }
    /// <p>List of actions to suspend on the fleet. </p>
    pub fn actions(&self) -> std::option::Option<&[crate::types::FleetAction]> {
        self.actions.as_deref()
    }
    /// <p>The fleet location to stop fleet actions for. Specify a location in the form of an Amazon Web Services Region code, such as <code>us-west-2</code>.</p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
}
impl StopFleetActionsInput {
    /// Creates a new builder-style object to manufacture [`StopFleetActionsInput`](crate::operation::stop_fleet_actions::StopFleetActionsInput).
    pub fn builder() -> crate::operation::stop_fleet_actions::builders::StopFleetActionsInputBuilder
    {
        crate::operation::stop_fleet_actions::builders::StopFleetActionsInputBuilder::default()
    }
}

/// A builder for [`StopFleetActionsInput`](crate::operation::stop_fleet_actions::StopFleetActionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StopFleetActionsInputBuilder {
    pub(crate) fleet_id: std::option::Option<std::string::String>,
    pub(crate) actions: std::option::Option<std::vec::Vec<crate::types::FleetAction>>,
    pub(crate) location: std::option::Option<std::string::String>,
}
impl StopFleetActionsInputBuilder {
    /// <p>A unique identifier for the fleet to stop actions on. You can use either the fleet ID or ARN value.</p>
    pub fn fleet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.fleet_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the fleet to stop actions on. You can use either the fleet ID or ARN value.</p>
    pub fn set_fleet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fleet_id = input;
        self
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>List of actions to suspend on the fleet. </p>
    pub fn actions(mut self, input: crate::types::FleetAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = Some(v);
        self
    }
    /// <p>List of actions to suspend on the fleet. </p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FleetAction>>,
    ) -> Self {
        self.actions = input;
        self
    }
    /// <p>The fleet location to stop fleet actions for. Specify a location in the form of an Amazon Web Services Region code, such as <code>us-west-2</code>.</p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>The fleet location to stop fleet actions for. Specify a location in the form of an Amazon Web Services Region code, such as <code>us-west-2</code>.</p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// Consumes the builder and constructs a [`StopFleetActionsInput`](crate::operation::stop_fleet_actions::StopFleetActionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::stop_fleet_actions::StopFleetActionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::stop_fleet_actions::StopFleetActionsInput {
                fleet_id: self.fleet_id,
                actions: self.actions,
                location: self.location,
            },
        )
    }
}
