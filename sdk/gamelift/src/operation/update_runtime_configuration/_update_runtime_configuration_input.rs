// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateRuntimeConfigurationInput {
    /// <p>A unique identifier for the fleet to update runtime configuration for. You can use either the fleet ID or ARN value.</p>
    pub fleet_id: ::std::option::Option<::std::string::String>,
    /// <p>Instructions for launching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime Servers script. The runtime configuration lists the types of server processes to run on an instance, how to launch them, and the number of processes to run concurrently.</p>
    pub runtime_configuration: ::std::option::Option<crate::types::RuntimeConfiguration>,
}
impl UpdateRuntimeConfigurationInput {
    /// <p>A unique identifier for the fleet to update runtime configuration for. You can use either the fleet ID or ARN value.</p>
    pub fn fleet_id(&self) -> ::std::option::Option<&str> {
        self.fleet_id.as_deref()
    }
    /// <p>Instructions for launching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime Servers script. The runtime configuration lists the types of server processes to run on an instance, how to launch them, and the number of processes to run concurrently.</p>
    pub fn runtime_configuration(&self) -> ::std::option::Option<&crate::types::RuntimeConfiguration> {
        self.runtime_configuration.as_ref()
    }
}
impl UpdateRuntimeConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateRuntimeConfigurationInput`](crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationInput).
    pub fn builder() -> crate::operation::update_runtime_configuration::builders::UpdateRuntimeConfigurationInputBuilder {
        crate::operation::update_runtime_configuration::builders::UpdateRuntimeConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateRuntimeConfigurationInput`](crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateRuntimeConfigurationInputBuilder {
    pub(crate) fleet_id: ::std::option::Option<::std::string::String>,
    pub(crate) runtime_configuration: ::std::option::Option<crate::types::RuntimeConfiguration>,
}
impl UpdateRuntimeConfigurationInputBuilder {
    /// <p>A unique identifier for the fleet to update runtime configuration for. You can use either the fleet ID or ARN value.</p>
    /// This field is required.
    pub fn fleet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the fleet to update runtime configuration for. You can use either the fleet ID or ARN value.</p>
    pub fn set_fleet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet_id = input;
        self
    }
    /// <p>A unique identifier for the fleet to update runtime configuration for. You can use either the fleet ID or ARN value.</p>
    pub fn get_fleet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet_id
    }
    /// <p>Instructions for launching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime Servers script. The runtime configuration lists the types of server processes to run on an instance, how to launch them, and the number of processes to run concurrently.</p>
    /// This field is required.
    pub fn runtime_configuration(mut self, input: crate::types::RuntimeConfiguration) -> Self {
        self.runtime_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Instructions for launching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime Servers script. The runtime configuration lists the types of server processes to run on an instance, how to launch them, and the number of processes to run concurrently.</p>
    pub fn set_runtime_configuration(mut self, input: ::std::option::Option<crate::types::RuntimeConfiguration>) -> Self {
        self.runtime_configuration = input;
        self
    }
    /// <p>Instructions for launching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime Servers script. The runtime configuration lists the types of server processes to run on an instance, how to launch them, and the number of processes to run concurrently.</p>
    pub fn get_runtime_configuration(&self) -> &::std::option::Option<crate::types::RuntimeConfiguration> {
        &self.runtime_configuration
    }
    /// Consumes the builder and constructs a [`UpdateRuntimeConfigurationInput`](crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_runtime_configuration::UpdateRuntimeConfigurationInput {
            fleet_id: self.fleet_id,
            runtime_configuration: self.runtime_configuration,
        })
    }
}
