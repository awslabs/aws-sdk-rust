// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_matchmaking_configurations::_describe_matchmaking_configurations_output::DescribeMatchmakingConfigurationsOutputBuilder;

pub use crate::operation::describe_matchmaking_configurations::_describe_matchmaking_configurations_input::DescribeMatchmakingConfigurationsInputBuilder;

/// Fluent builder constructing a request to `DescribeMatchmakingConfigurations`.
///
/// <p>Retrieves the details of FlexMatch matchmaking configurations. </p>
/// <p>This operation offers the following options: (1) retrieve all matchmaking configurations, (2) retrieve configurations for a specified list, or (3) retrieve all configurations that use a specified rule set name. When requesting multiple items, use the pagination parameters to retrieve results as a set of sequential pages. </p>
/// <p>If successful, a configuration is returned for each requested name. When specifying a list of names, only configurations that currently exist are returned. </p>
/// <p> <b>Learn more</b> </p>
/// <p> <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/matchmaker-build.html"> Setting up FlexMatch matchmakers</a> </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMatchmakingConfigurationsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::describe_matchmaking_configurations::builders::DescribeMatchmakingConfigurationsInputBuilder
            }
impl DescribeMatchmakingConfigurationsFluentBuilder {
    /// Creates a new `DescribeMatchmakingConfigurations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurations, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsOutput, aws_smithy_http::result::SdkError<crate::operation::describe_matchmaking_configurations::DescribeMatchmakingConfigurationsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_matchmaking_configurations::paginator::DescribeMatchmakingConfigurationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::describe_matchmaking_configurations::paginator::DescribeMatchmakingConfigurationsPaginator{
        crate::operation::describe_matchmaking_configurations::paginator::DescribeMatchmakingConfigurationsPaginator::new(self.handle, self.inner)
    }
    /// Appends an item to `Names`.
    ///
    /// To override the contents of this collection use [`set_names`](Self::set_names).
    ///
    /// <p>A unique identifier for the matchmaking configuration(s) to retrieve. You can use either the configuration name or ARN value. To request all existing configurations, leave this parameter empty.</p>
    pub fn names(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.names(input.into());
        self
    }
    /// <p>A unique identifier for the matchmaking configuration(s) to retrieve. You can use either the configuration name or ARN value. To request all existing configurations, leave this parameter empty.</p>
    pub fn set_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_names(input);
        self
    }
    /// <p>A unique identifier for the matchmaking rule set. You can use either the rule set name or ARN value. Use this parameter to retrieve all matchmaking configurations that use this rule set.</p>
    pub fn rule_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.rule_set_name(input.into());
        self
    }
    /// <p>A unique identifier for the matchmaking rule set. You can use either the rule set name or ARN value. Use this parameter to retrieve all matchmaking configurations that use this rule set.</p>
    pub fn set_rule_set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_rule_set_name(input);
        self
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is limited to 10.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.inner = self.inner.limit(input);
        self
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages. This parameter is limited to 10.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_limit(input);
        self
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
