// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_matchmaking::_describe_matchmaking_output::DescribeMatchmakingOutputBuilder;

pub use crate::operation::describe_matchmaking::_describe_matchmaking_input::DescribeMatchmakingInputBuilder;

/// Fluent builder constructing a request to `DescribeMatchmaking`.
///
/// <p>Retrieves one or more matchmaking tickets. Use this operation to retrieve ticket information, including--after a successful match is made--connection information for the resulting new game session. </p>
/// <p>To request matchmaking tickets, provide a list of up to 10 ticket IDs. If the request is successful, a ticket object is returned for each requested ID that currently exists.</p>
/// <p>This operation is not designed to be continually called to track matchmaking ticket status. This practice can cause you to exceed your API limit, which results in errors. Instead, as a best practice, set up an Amazon Simple Notification Service to receive notifications, and provide the topic ARN in the matchmaking configuration.</p>
/// <p></p>
/// <p> <b>Learn more</b> </p>
/// <p> <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-client.html"> Add FlexMatch to a game client</a> </p>
/// <p> <a href="https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html"> Set Up FlexMatch event notification</a> </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMatchmakingFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_matchmaking::builders::DescribeMatchmakingInputBuilder,
}
impl DescribeMatchmakingFluentBuilder {
    /// Creates a new `DescribeMatchmaking`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_matchmaking::DescribeMatchmaking,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_matchmaking::DescribeMatchmakingError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_matchmaking::DescribeMatchmakingOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_matchmaking::DescribeMatchmakingError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `TicketIds`.
    ///
    /// To override the contents of this collection use [`set_ticket_ids`](Self::set_ticket_ids).
    ///
    /// <p>A unique identifier for a matchmaking ticket. You can include up to 10 ID values. </p>
    pub fn ticket_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ticket_ids(input.into());
        self
    }
    /// <p>A unique identifier for a matchmaking ticket. You can include up to 10 ID values. </p>
    pub fn set_ticket_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_ticket_ids(input);
        self
    }
}
