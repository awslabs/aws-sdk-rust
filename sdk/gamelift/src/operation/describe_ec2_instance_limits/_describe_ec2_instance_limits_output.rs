// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEc2InstanceLimitsOutput {
    /// <p>The maximum number of instances for the specified instance type.</p>
    #[doc(hidden)]
    pub ec2_instance_limits: std::option::Option<std::vec::Vec<crate::types::Ec2InstanceLimit>>,
    _request_id: Option<String>,
}
impl DescribeEc2InstanceLimitsOutput {
    /// <p>The maximum number of instances for the specified instance type.</p>
    pub fn ec2_instance_limits(&self) -> std::option::Option<&[crate::types::Ec2InstanceLimit]> {
        self.ec2_instance_limits.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeEc2InstanceLimitsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEc2InstanceLimitsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEc2InstanceLimitsOutput`](crate::operation::describe_ec2_instance_limits::DescribeEc2InstanceLimitsOutput).
    pub fn builder() -> crate::operation::describe_ec2_instance_limits::builders::DescribeEc2InstanceLimitsOutputBuilder{
        crate::operation::describe_ec2_instance_limits::builders::DescribeEc2InstanceLimitsOutputBuilder::default()
    }
}

/// A builder for [`DescribeEc2InstanceLimitsOutput`](crate::operation::describe_ec2_instance_limits::DescribeEc2InstanceLimitsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEc2InstanceLimitsOutputBuilder {
    pub(crate) ec2_instance_limits:
        std::option::Option<std::vec::Vec<crate::types::Ec2InstanceLimit>>,
    _request_id: Option<String>,
}
impl DescribeEc2InstanceLimitsOutputBuilder {
    /// Appends an item to `ec2_instance_limits`.
    ///
    /// To override the contents of this collection use [`set_ec2_instance_limits`](Self::set_ec2_instance_limits).
    ///
    /// <p>The maximum number of instances for the specified instance type.</p>
    pub fn ec2_instance_limits(mut self, input: crate::types::Ec2InstanceLimit) -> Self {
        let mut v = self.ec2_instance_limits.unwrap_or_default();
        v.push(input);
        self.ec2_instance_limits = Some(v);
        self
    }
    /// <p>The maximum number of instances for the specified instance type.</p>
    pub fn set_ec2_instance_limits(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Ec2InstanceLimit>>,
    ) -> Self {
        self.ec2_instance_limits = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEc2InstanceLimitsOutput`](crate::operation::describe_ec2_instance_limits::DescribeEc2InstanceLimitsOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_ec2_instance_limits::DescribeEc2InstanceLimitsOutput {
        crate::operation::describe_ec2_instance_limits::DescribeEc2InstanceLimitsOutput {
            ec2_instance_limits: self.ec2_instance_limits,
            _request_id: self._request_id,
        }
    }
}
