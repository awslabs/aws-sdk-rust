// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLocationInput {
    /// <p>The location name of the custom location to be deleted.</p>
    #[doc(hidden)]
    pub location_name: std::option::Option<std::string::String>,
}
impl DeleteLocationInput {
    /// <p>The location name of the custom location to be deleted.</p>
    pub fn location_name(&self) -> std::option::Option<&str> {
        self.location_name.as_deref()
    }
}
impl DeleteLocationInput {
    /// Creates a new builder-style object to manufacture [`DeleteLocationInput`](crate::operation::delete_location::DeleteLocationInput).
    pub fn builder() -> crate::operation::delete_location::builders::DeleteLocationInputBuilder {
        crate::operation::delete_location::builders::DeleteLocationInputBuilder::default()
    }
}

/// A builder for [`DeleteLocationInput`](crate::operation::delete_location::DeleteLocationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteLocationInputBuilder {
    pub(crate) location_name: std::option::Option<std::string::String>,
}
impl DeleteLocationInputBuilder {
    /// <p>The location name of the custom location to be deleted.</p>
    pub fn location_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.location_name = Some(input.into());
        self
    }
    /// <p>The location name of the custom location to be deleted.</p>
    pub fn set_location_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteLocationInput`](crate::operation::delete_location::DeleteLocationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_location::DeleteLocationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_location::DeleteLocationInput {
            location_name: self.location_name,
        })
    }
}
