// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAliasInput {
    /// <p>A unique identifier for the alias that you want to update. You can use either the alias ID or ARN value.</p>
    #[doc(hidden)]
    pub alias_id: std::option::Option<std::string::String>,
    /// <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A human-readable description of the alias.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The routing configuration, including routing type and fleet target, for the alias.</p>
    #[doc(hidden)]
    pub routing_strategy: std::option::Option<crate::types::RoutingStrategy>,
}
impl UpdateAliasInput {
    /// <p>A unique identifier for the alias that you want to update. You can use either the alias ID or ARN value.</p>
    pub fn alias_id(&self) -> std::option::Option<&str> {
        self.alias_id.as_deref()
    }
    /// <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A human-readable description of the alias.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The routing configuration, including routing type and fleet target, for the alias.</p>
    pub fn routing_strategy(&self) -> std::option::Option<&crate::types::RoutingStrategy> {
        self.routing_strategy.as_ref()
    }
}
impl UpdateAliasInput {
    /// Creates a new builder-style object to manufacture [`UpdateAliasInput`](crate::operation::update_alias::UpdateAliasInput).
    pub fn builder() -> crate::operation::update_alias::builders::UpdateAliasInputBuilder {
        crate::operation::update_alias::builders::UpdateAliasInputBuilder::default()
    }
}

/// A builder for [`UpdateAliasInput`](crate::operation::update_alias::UpdateAliasInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateAliasInputBuilder {
    pub(crate) alias_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) routing_strategy: std::option::Option<crate::types::RoutingStrategy>,
}
impl UpdateAliasInputBuilder {
    /// <p>A unique identifier for the alias that you want to update. You can use either the alias ID or ARN value.</p>
    pub fn alias_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.alias_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the alias that you want to update. You can use either the alias ID or ARN value.</p>
    pub fn set_alias_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alias_id = input;
        self
    }
    /// <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A descriptive label that is associated with an alias. Alias names do not need to be unique.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A human-readable description of the alias.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A human-readable description of the alias.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The routing configuration, including routing type and fleet target, for the alias.</p>
    pub fn routing_strategy(mut self, input: crate::types::RoutingStrategy) -> Self {
        self.routing_strategy = Some(input);
        self
    }
    /// <p>The routing configuration, including routing type and fleet target, for the alias.</p>
    pub fn set_routing_strategy(
        mut self,
        input: std::option::Option<crate::types::RoutingStrategy>,
    ) -> Self {
        self.routing_strategy = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateAliasInput`](crate::operation::update_alias::UpdateAliasInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_alias::UpdateAliasInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_alias::UpdateAliasInput {
            alias_id: self.alias_id,
            name: self.name,
            description: self.description,
            routing_strategy: self.routing_strategy,
        })
    }
}
