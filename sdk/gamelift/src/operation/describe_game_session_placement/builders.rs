// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_game_session_placement::_describe_game_session_placement_output::DescribeGameSessionPlacementOutputBuilder;

pub use crate::operation::describe_game_session_placement::_describe_game_session_placement_input::DescribeGameSessionPlacementInputBuilder;

/// Fluent builder constructing a request to `DescribeGameSessionPlacement`.
///
/// <p>Retrieves information, including current status, about a game session placement request. </p>
/// <p>To get game session placement details, specify the placement ID.</p>
/// <p>This operation is not designed to be continually called to track game session status. This practice can cause you to exceed your API limit, which results in errors. Instead, you must configure configure an Amazon Simple Notification Service (SNS) topic to receive notifications from FlexMatch or queues. Continuously polling with <code>DescribeGameSessionPlacement</code> should only be used for games in development with low game session usage. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeGameSessionPlacementFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::describe_game_session_placement::builders::DescribeGameSessionPlacementInputBuilder
            }
impl DescribeGameSessionPlacementFluentBuilder {
    /// Creates a new `DescribeGameSessionPlacement`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacement,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_game_session_placement::DescribeGameSessionPlacementOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A unique identifier for a game session placement to retrieve.</p>
    pub fn placement_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.placement_id(input.into());
        self
    }
    /// <p>A unique identifier for a game session placement to retrieve.</p>
    pub fn set_placement_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_placement_id(input);
        self
    }
}
