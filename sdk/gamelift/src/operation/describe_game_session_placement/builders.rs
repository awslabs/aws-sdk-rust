// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_game_session_placement::_describe_game_session_placement_output::DescribeGameSessionPlacementOutputBuilder;

pub use crate::operation::describe_game_session_placement::_describe_game_session_placement_input::DescribeGameSessionPlacementInputBuilder;

impl crate::operation::describe_game_session_placement::builders::DescribeGameSessionPlacementInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_game_session_placement::DescribeGameSessionPlacementOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_game_session_placement();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeGameSessionPlacement`.
///
/// <p>Retrieves information, including current status, about a game session placement request.</p>
/// <p>To get game session placement details, specify the placement ID.</p>
/// <p>This operation is not designed to be continually called to track game session status. This practice can cause you to exceed your API limit, which results in errors. Instead, you must configure configure an Amazon Simple Notification Service (SNS) topic to receive notifications from FlexMatch or queues. Continuously polling with <code>DescribeGameSessionPlacement</code> should only be used for games in development with low game session usage.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeGameSessionPlacementFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_game_session_placement::builders::DescribeGameSessionPlacementInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_game_session_placement::DescribeGameSessionPlacementOutput,
        crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError,
    > for DescribeGameSessionPlacementFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementOutput,
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeGameSessionPlacementFluentBuilder {
    /// Creates a new `DescribeGameSessionPlacement`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeGameSessionPlacement as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_game_session_placement::builders::DescribeGameSessionPlacementInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_game_session_placement::DescribeGameSessionPlacementOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_game_session_placement::DescribeGameSessionPlacement::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_game_session_placement::DescribeGameSessionPlacement::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_game_session_placement::DescribeGameSessionPlacementOutput,
        crate::operation::describe_game_session_placement::DescribeGameSessionPlacementError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique identifier for a game session placement to retrieve.</p>
    pub fn placement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.placement_id(input.into());
        self
    }
    /// <p>A unique identifier for a game session placement to retrieve.</p>
    pub fn set_placement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_placement_id(input);
        self
    }
    /// <p>A unique identifier for a game session placement to retrieve.</p>
    pub fn get_placement_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_placement_id()
    }
}
