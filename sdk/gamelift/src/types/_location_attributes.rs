// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a location in a multi-location fleet.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LocationAttributes {
    /// <p>A fleet location and its current life-cycle state.</p>
    pub location_state: ::std::option::Option<crate::types::LocationState>,
    /// <p>A list of fleet actions that have been suspended in the fleet location.</p>
    pub stopped_actions: ::std::option::Option<::std::vec::Vec<crate::types::FleetAction>>,
    /// <p>The status of fleet activity updates to the location. The status <code>PENDING_UPDATE</code> indicates that <code>StopFleetActions</code> or <code>StartFleetActions</code> has been requested but the update has not yet been completed for the location.</p>
    pub update_status: ::std::option::Option<crate::types::LocationUpdateStatus>,
}
impl LocationAttributes {
    /// <p>A fleet location and its current life-cycle state.</p>
    pub fn location_state(&self) -> ::std::option::Option<&crate::types::LocationState> {
        self.location_state.as_ref()
    }
    /// <p>A list of fleet actions that have been suspended in the fleet location.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.stopped_actions.is_none()`.
    pub fn stopped_actions(&self) -> &[crate::types::FleetAction] {
        self.stopped_actions.as_deref().unwrap_or_default()
    }
    /// <p>The status of fleet activity updates to the location. The status <code>PENDING_UPDATE</code> indicates that <code>StopFleetActions</code> or <code>StartFleetActions</code> has been requested but the update has not yet been completed for the location.</p>
    pub fn update_status(&self) -> ::std::option::Option<&crate::types::LocationUpdateStatus> {
        self.update_status.as_ref()
    }
}
impl LocationAttributes {
    /// Creates a new builder-style object to manufacture [`LocationAttributes`](crate::types::LocationAttributes).
    pub fn builder() -> crate::types::builders::LocationAttributesBuilder {
        crate::types::builders::LocationAttributesBuilder::default()
    }
}

/// A builder for [`LocationAttributes`](crate::types::LocationAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LocationAttributesBuilder {
    pub(crate) location_state: ::std::option::Option<crate::types::LocationState>,
    pub(crate) stopped_actions: ::std::option::Option<::std::vec::Vec<crate::types::FleetAction>>,
    pub(crate) update_status: ::std::option::Option<crate::types::LocationUpdateStatus>,
}
impl LocationAttributesBuilder {
    /// <p>A fleet location and its current life-cycle state.</p>
    pub fn location_state(mut self, input: crate::types::LocationState) -> Self {
        self.location_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>A fleet location and its current life-cycle state.</p>
    pub fn set_location_state(mut self, input: ::std::option::Option<crate::types::LocationState>) -> Self {
        self.location_state = input;
        self
    }
    /// <p>A fleet location and its current life-cycle state.</p>
    pub fn get_location_state(&self) -> &::std::option::Option<crate::types::LocationState> {
        &self.location_state
    }
    /// Appends an item to `stopped_actions`.
    ///
    /// To override the contents of this collection use [`set_stopped_actions`](Self::set_stopped_actions).
    ///
    /// <p>A list of fleet actions that have been suspended in the fleet location.</p>
    pub fn stopped_actions(mut self, input: crate::types::FleetAction) -> Self {
        let mut v = self.stopped_actions.unwrap_or_default();
        v.push(input);
        self.stopped_actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of fleet actions that have been suspended in the fleet location.</p>
    pub fn set_stopped_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FleetAction>>) -> Self {
        self.stopped_actions = input;
        self
    }
    /// <p>A list of fleet actions that have been suspended in the fleet location.</p>
    pub fn get_stopped_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FleetAction>> {
        &self.stopped_actions
    }
    /// <p>The status of fleet activity updates to the location. The status <code>PENDING_UPDATE</code> indicates that <code>StopFleetActions</code> or <code>StartFleetActions</code> has been requested but the update has not yet been completed for the location.</p>
    pub fn update_status(mut self, input: crate::types::LocationUpdateStatus) -> Self {
        self.update_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of fleet activity updates to the location. The status <code>PENDING_UPDATE</code> indicates that <code>StopFleetActions</code> or <code>StartFleetActions</code> has been requested but the update has not yet been completed for the location.</p>
    pub fn set_update_status(mut self, input: ::std::option::Option<crate::types::LocationUpdateStatus>) -> Self {
        self.update_status = input;
        self
    }
    /// <p>The status of fleet activity updates to the location. The status <code>PENDING_UPDATE</code> indicates that <code>StopFleetActions</code> or <code>StartFleetActions</code> has been requested but the update has not yet been completed for the location.</p>
    pub fn get_update_status(&self) -> &::std::option::Option<crate::types::LocationUpdateStatus> {
        &self.update_status
    }
    /// Consumes the builder and constructs a [`LocationAttributes`](crate::types::LocationAttributes).
    pub fn build(self) -> crate::types::LocationAttributes {
        crate::types::LocationAttributes {
            location_state: self.location_state,
            stopped_actions: self.stopped_actions,
            update_status: self.update_status,
        }
    }
}
