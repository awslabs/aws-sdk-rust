// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Amazon GameLift Anywhere configuration options for your Anywhere fleets.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnywhereConfiguration {
    /// <p>The cost to run your fleet per hour. Amazon GameLift uses the provided cost of your fleet to balance usage in queues. For more information about queues, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queues-intro.html">Setting up queues</a> in the <i>Amazon GameLift Developer Guide</i>.</p>
    pub cost: ::std::option::Option<::std::string::String>,
}
impl AnywhereConfiguration {
    /// <p>The cost to run your fleet per hour. Amazon GameLift uses the provided cost of your fleet to balance usage in queues. For more information about queues, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queues-intro.html">Setting up queues</a> in the <i>Amazon GameLift Developer Guide</i>.</p>
    pub fn cost(&self) -> ::std::option::Option<&str> {
        self.cost.as_deref()
    }
}
impl AnywhereConfiguration {
    /// Creates a new builder-style object to manufacture [`AnywhereConfiguration`](crate::types::AnywhereConfiguration).
    pub fn builder() -> crate::types::builders::AnywhereConfigurationBuilder {
        crate::types::builders::AnywhereConfigurationBuilder::default()
    }
}

/// A builder for [`AnywhereConfiguration`](crate::types::AnywhereConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnywhereConfigurationBuilder {
    pub(crate) cost: ::std::option::Option<::std::string::String>,
}
impl AnywhereConfigurationBuilder {
    /// <p>The cost to run your fleet per hour. Amazon GameLift uses the provided cost of your fleet to balance usage in queues. For more information about queues, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queues-intro.html">Setting up queues</a> in the <i>Amazon GameLift Developer Guide</i>.</p>
    /// This field is required.
    pub fn cost(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cost = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cost to run your fleet per hour. Amazon GameLift uses the provided cost of your fleet to balance usage in queues. For more information about queues, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queues-intro.html">Setting up queues</a> in the <i>Amazon GameLift Developer Guide</i>.</p>
    pub fn set_cost(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cost = input;
        self
    }
    /// <p>The cost to run your fleet per hour. Amazon GameLift uses the provided cost of your fleet to balance usage in queues. For more information about queues, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queues-intro.html">Setting up queues</a> in the <i>Amazon GameLift Developer Guide</i>.</p>
    pub fn get_cost(&self) -> &::std::option::Option<::std::string::String> {
        &self.cost
    }
    /// Consumes the builder and constructs a [`AnywhereConfiguration`](crate::types::AnywhereConfiguration).
    pub fn build(self) -> crate::types::AnywhereConfiguration {
        crate::types::AnywhereConfiguration { cost: self.cost }
    }
}
