// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sets a latency cap for individual players when placing a game session. With a latency policy in force, a game session cannot be placed in a fleet location where a player reports latency higher than the cap. Latency policies are used only with placement request that provide player latency information. Player latency policies can be stacked to gradually relax latency requirements over time. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PlayerLatencyPolicy {
    /// <p>The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.</p>
    #[doc(hidden)]
    pub maximum_individual_player_latency_milliseconds: std::option::Option<i32>,
    /// <p>The length of time, in seconds, that the policy is enforced while placing a new game session. A null value for this property means that the policy is enforced until the queue times out.</p>
    #[doc(hidden)]
    pub policy_duration_seconds: std::option::Option<i32>,
}
impl PlayerLatencyPolicy {
    /// <p>The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.</p>
    pub fn maximum_individual_player_latency_milliseconds(&self) -> std::option::Option<i32> {
        self.maximum_individual_player_latency_milliseconds
    }
    /// <p>The length of time, in seconds, that the policy is enforced while placing a new game session. A null value for this property means that the policy is enforced until the queue times out.</p>
    pub fn policy_duration_seconds(&self) -> std::option::Option<i32> {
        self.policy_duration_seconds
    }
}
impl PlayerLatencyPolicy {
    /// Creates a new builder-style object to manufacture [`PlayerLatencyPolicy`](crate::types::PlayerLatencyPolicy).
    pub fn builder() -> crate::types::builders::PlayerLatencyPolicyBuilder {
        crate::types::builders::PlayerLatencyPolicyBuilder::default()
    }
}

/// A builder for [`PlayerLatencyPolicy`](crate::types::PlayerLatencyPolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PlayerLatencyPolicyBuilder {
    pub(crate) maximum_individual_player_latency_milliseconds: std::option::Option<i32>,
    pub(crate) policy_duration_seconds: std::option::Option<i32>,
}
impl PlayerLatencyPolicyBuilder {
    /// <p>The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.</p>
    pub fn maximum_individual_player_latency_milliseconds(mut self, input: i32) -> Self {
        self.maximum_individual_player_latency_milliseconds = Some(input);
        self
    }
    /// <p>The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.</p>
    pub fn set_maximum_individual_player_latency_milliseconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.maximum_individual_player_latency_milliseconds = input;
        self
    }
    /// <p>The length of time, in seconds, that the policy is enforced while placing a new game session. A null value for this property means that the policy is enforced until the queue times out.</p>
    pub fn policy_duration_seconds(mut self, input: i32) -> Self {
        self.policy_duration_seconds = Some(input);
        self
    }
    /// <p>The length of time, in seconds, that the policy is enforced while placing a new game session. A null value for this property means that the policy is enforced until the queue times out.</p>
    pub fn set_policy_duration_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.policy_duration_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`PlayerLatencyPolicy`](crate::types::PlayerLatencyPolicy).
    pub fn build(self) -> crate::types::PlayerLatencyPolicy {
        crate::types::PlayerLatencyPolicy {
            maximum_individual_player_latency_milliseconds: self
                .maximum_individual_player_latency_milliseconds,
            policy_duration_seconds: self.policy_duration_seconds,
        }
    }
}
