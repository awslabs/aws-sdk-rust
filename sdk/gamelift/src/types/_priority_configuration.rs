// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Custom prioritization settings for use by a game session queue when placing new game sessions with available game servers. When defined, this configuration replaces the default FleetIQ prioritization process, which is as follows:</p>
/// <ul>
/// <li> <p>If player latency data is included in a game session request, destinations and locations are prioritized first based on lowest average latency (1), then on lowest hosting cost (2), then on destination list order (3), and finally on location (alphabetical) (4). This approach ensures that the queue's top priority is to place game sessions where average player latency is lowest, and--if latency is the same--where the hosting cost is less, etc.</p> </li>
/// <li> <p>If player latency data is not included, destinations and locations are prioritized first on destination list order (1), and then on location (alphabetical) (2). This approach ensures that the queue's top priority is to place game sessions on the first destination fleet listed. If that fleet has multiple locations, the game session is placed on the first location (when listed alphabetically).</p> </li>
/// </ul>
/// <p>Changing the priority order will affect how game sessions are placed.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PriorityConfiguration {
    /// <p>The recommended sequence to use when prioritizing where to place new game sessions. Each type can only be listed once.</p>
    /// <ul>
    /// <li> <p> <code>LATENCY</code> -- FleetIQ prioritizes locations where the average player latency (provided in each game session request) is lowest. </p> </li>
    /// <li> <p> <code>COST</code> -- FleetIQ prioritizes destinations with the lowest current hosting costs. Cost is evaluated based on the location, instance type, and fleet type (Spot or On-Demand) for each destination in the queue.</p> </li>
    /// <li> <p> <code>DESTINATION</code> -- FleetIQ prioritizes based on the order that destinations are listed in the queue configuration.</p> </li>
    /// <li> <p> <code>LOCATION</code> -- FleetIQ prioritizes based on the provided order of locations, as defined in <code>LocationOrder</code>. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub priority_order: std::option::Option<std::vec::Vec<crate::types::PriorityType>>,
    /// <p>The prioritization order to use for fleet locations, when the <code>PriorityOrder</code> property includes <code>LOCATION</code>. Locations are identified by Amazon Web Services Region codes such as <code>us-west-2</code>. Each location can only be listed once. </p>
    #[doc(hidden)]
    pub location_order: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PriorityConfiguration {
    /// <p>The recommended sequence to use when prioritizing where to place new game sessions. Each type can only be listed once.</p>
    /// <ul>
    /// <li> <p> <code>LATENCY</code> -- FleetIQ prioritizes locations where the average player latency (provided in each game session request) is lowest. </p> </li>
    /// <li> <p> <code>COST</code> -- FleetIQ prioritizes destinations with the lowest current hosting costs. Cost is evaluated based on the location, instance type, and fleet type (Spot or On-Demand) for each destination in the queue.</p> </li>
    /// <li> <p> <code>DESTINATION</code> -- FleetIQ prioritizes based on the order that destinations are listed in the queue configuration.</p> </li>
    /// <li> <p> <code>LOCATION</code> -- FleetIQ prioritizes based on the provided order of locations, as defined in <code>LocationOrder</code>. </p> </li>
    /// </ul>
    pub fn priority_order(&self) -> std::option::Option<&[crate::types::PriorityType]> {
        self.priority_order.as_deref()
    }
    /// <p>The prioritization order to use for fleet locations, when the <code>PriorityOrder</code> property includes <code>LOCATION</code>. Locations are identified by Amazon Web Services Region codes such as <code>us-west-2</code>. Each location can only be listed once. </p>
    pub fn location_order(&self) -> std::option::Option<&[std::string::String]> {
        self.location_order.as_deref()
    }
}
impl PriorityConfiguration {
    /// Creates a new builder-style object to manufacture [`PriorityConfiguration`](crate::types::PriorityConfiguration).
    pub fn builder() -> crate::types::builders::PriorityConfigurationBuilder {
        crate::types::builders::PriorityConfigurationBuilder::default()
    }
}

/// A builder for [`PriorityConfiguration`](crate::types::PriorityConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PriorityConfigurationBuilder {
    pub(crate) priority_order: std::option::Option<std::vec::Vec<crate::types::PriorityType>>,
    pub(crate) location_order: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PriorityConfigurationBuilder {
    /// Appends an item to `priority_order`.
    ///
    /// To override the contents of this collection use [`set_priority_order`](Self::set_priority_order).
    ///
    /// <p>The recommended sequence to use when prioritizing where to place new game sessions. Each type can only be listed once.</p>
    /// <ul>
    /// <li> <p> <code>LATENCY</code> -- FleetIQ prioritizes locations where the average player latency (provided in each game session request) is lowest. </p> </li>
    /// <li> <p> <code>COST</code> -- FleetIQ prioritizes destinations with the lowest current hosting costs. Cost is evaluated based on the location, instance type, and fleet type (Spot or On-Demand) for each destination in the queue.</p> </li>
    /// <li> <p> <code>DESTINATION</code> -- FleetIQ prioritizes based on the order that destinations are listed in the queue configuration.</p> </li>
    /// <li> <p> <code>LOCATION</code> -- FleetIQ prioritizes based on the provided order of locations, as defined in <code>LocationOrder</code>. </p> </li>
    /// </ul>
    pub fn priority_order(mut self, input: crate::types::PriorityType) -> Self {
        let mut v = self.priority_order.unwrap_or_default();
        v.push(input);
        self.priority_order = Some(v);
        self
    }
    /// <p>The recommended sequence to use when prioritizing where to place new game sessions. Each type can only be listed once.</p>
    /// <ul>
    /// <li> <p> <code>LATENCY</code> -- FleetIQ prioritizes locations where the average player latency (provided in each game session request) is lowest. </p> </li>
    /// <li> <p> <code>COST</code> -- FleetIQ prioritizes destinations with the lowest current hosting costs. Cost is evaluated based on the location, instance type, and fleet type (Spot or On-Demand) for each destination in the queue.</p> </li>
    /// <li> <p> <code>DESTINATION</code> -- FleetIQ prioritizes based on the order that destinations are listed in the queue configuration.</p> </li>
    /// <li> <p> <code>LOCATION</code> -- FleetIQ prioritizes based on the provided order of locations, as defined in <code>LocationOrder</code>. </p> </li>
    /// </ul>
    pub fn set_priority_order(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PriorityType>>,
    ) -> Self {
        self.priority_order = input;
        self
    }
    /// Appends an item to `location_order`.
    ///
    /// To override the contents of this collection use [`set_location_order`](Self::set_location_order).
    ///
    /// <p>The prioritization order to use for fleet locations, when the <code>PriorityOrder</code> property includes <code>LOCATION</code>. Locations are identified by Amazon Web Services Region codes such as <code>us-west-2</code>. Each location can only be listed once. </p>
    pub fn location_order(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.location_order.unwrap_or_default();
        v.push(input.into());
        self.location_order = Some(v);
        self
    }
    /// <p>The prioritization order to use for fleet locations, when the <code>PriorityOrder</code> property includes <code>LOCATION</code>. Locations are identified by Amazon Web Services Region codes such as <code>us-west-2</code>. Each location can only be listed once. </p>
    pub fn set_location_order(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.location_order = input;
        self
    }
    /// Consumes the builder and constructs a [`PriorityConfiguration`](crate::types::PriorityConfiguration).
    pub fn build(self) -> crate::types::PriorityConfiguration {
        crate::types::PriorityConfiguration {
            priority_order: self.priority_order,
            location_order: self.location_order,
        }
    }
}
