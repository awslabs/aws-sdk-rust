// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A fleet location and its life-cycle state. A location state object might be used to describe a fleet's remote location or home Region. Life-cycle state tracks the progress of launching the first instance in a new location and preparing it for game hosting, and then removing all instances and deleting the location from the fleet.</p>
/// <ul>
/// <li> <p> <b>NEW</b> -- A new fleet location has been defined and desired instances is set to 1. </p> </li>
/// <li> <p> <b>DOWNLOADING/VALIDATING/BUILDING/ACTIVATING</b> -- GameLift is setting up the new fleet location, creating new instances with the game build or Realtime script and starting server processes.</p> </li>
/// <li> <p> <b>ACTIVE</b> -- Hosts can now accept game sessions.</p> </li>
/// <li> <p> <b>ERROR</b> -- An error occurred when downloading, validating, building, or activating the fleet location.</p> </li>
/// <li> <p> <b>DELETING</b> -- Hosts are responding to a delete fleet location request.</p> </li>
/// <li> <p> <b>TERMINATED</b> -- The fleet location no longer exists.</p> </li>
/// <li> <p> <b>NOT_FOUND</b> -- The fleet location was not found. This could be because the custom location was removed or not created. </p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LocationState {
    /// <p>The fleet location, expressed as an Amazon Web Services Region code such as <code>us-west-2</code>. </p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>The life-cycle status of a fleet location. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::FleetStatus>,
}
impl LocationState {
    /// <p>The fleet location, expressed as an Amazon Web Services Region code such as <code>us-west-2</code>. </p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The life-cycle status of a fleet location. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::FleetStatus> {
        self.status.as_ref()
    }
}
impl LocationState {
    /// Creates a new builder-style object to manufacture [`LocationState`](crate::types::LocationState).
    pub fn builder() -> crate::types::builders::LocationStateBuilder {
        crate::types::builders::LocationStateBuilder::default()
    }
}

/// A builder for [`LocationState`](crate::types::LocationState).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LocationStateBuilder {
    pub(crate) location: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::FleetStatus>,
}
impl LocationStateBuilder {
    /// <p>The fleet location, expressed as an Amazon Web Services Region code such as <code>us-west-2</code>. </p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>The fleet location, expressed as an Amazon Web Services Region code such as <code>us-west-2</code>. </p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The life-cycle status of a fleet location. </p>
    pub fn status(mut self, input: crate::types::FleetStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The life-cycle status of a fleet location. </p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::FleetStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`LocationState`](crate::types::LocationState).
    pub fn build(self) -> crate::types::LocationState {
        crate::types::LocationState {
            location: self.location,
            status: self.status,
        }
    }
}
