// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A remote location where a multi-location fleet can deploy game servers for game hosting. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LocationConfiguration {
    /// <p>An Amazon Web Services Region code, such as <code>us-west-2</code>. </p>
    pub location: ::std::option::Option<::std::string::String>,
}
impl LocationConfiguration {
    /// <p>An Amazon Web Services Region code, such as <code>us-west-2</code>. </p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
}
impl LocationConfiguration {
    /// Creates a new builder-style object to manufacture [`LocationConfiguration`](crate::types::LocationConfiguration).
    pub fn builder() -> crate::types::builders::LocationConfigurationBuilder {
        crate::types::builders::LocationConfigurationBuilder::default()
    }
}

/// A builder for [`LocationConfiguration`](crate::types::LocationConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LocationConfigurationBuilder {
    pub(crate) location: ::std::option::Option<::std::string::String>,
}
impl LocationConfigurationBuilder {
    /// <p>An Amazon Web Services Region code, such as <code>us-west-2</code>. </p>
    /// This field is required.
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Web Services Region code, such as <code>us-west-2</code>. </p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>An Amazon Web Services Region code, such as <code>us-west-2</code>. </p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// Consumes the builder and constructs a [`LocationConfiguration`](crate::types::LocationConfiguration).
    pub fn build(self) -> crate::types::LocationConfiguration {
        crate::types::LocationConfiguration { location: self.location }
    }
}
