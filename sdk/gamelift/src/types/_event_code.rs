// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `EventCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let eventcode = unimplemented!();
/// match eventcode {
///     EventCode::ComputeLogUploadFailed => { /* ... */ },
///     EventCode::FleetActivationFailed => { /* ... */ },
///     EventCode::FleetActivationFailedNoInstances => { /* ... */ },
///     EventCode::FleetBinaryDownloadFailed => { /* ... */ },
///     EventCode::FleetCreated => { /* ... */ },
///     EventCode::FleetCreationCompletedInstaller => { /* ... */ },
///     EventCode::FleetCreationExtractingBuild => { /* ... */ },
///     EventCode::FleetCreationFailedInstaller => { /* ... */ },
///     EventCode::FleetCreationRunningInstaller => { /* ... */ },
///     EventCode::FleetCreationValidatingRuntimeConfig => { /* ... */ },
///     EventCode::FleetDeleted => { /* ... */ },
///     EventCode::FleetInitializationFailed => { /* ... */ },
///     EventCode::FleetNewGameSessionProtectionPolicyUpdated => { /* ... */ },
///     EventCode::FleetScalingEvent => { /* ... */ },
///     EventCode::FleetStateActivating => { /* ... */ },
///     EventCode::FleetStateActive => { /* ... */ },
///     EventCode::FleetStateBuilding => { /* ... */ },
///     EventCode::FleetStateCreated => { /* ... */ },
///     EventCode::FleetStateCreating => { /* ... */ },
///     EventCode::FleetStateDownloading => { /* ... */ },
///     EventCode::FleetStateError => { /* ... */ },
///     EventCode::FleetStatePending => { /* ... */ },
///     EventCode::FleetStateUpdating => { /* ... */ },
///     EventCode::FleetStateValidating => { /* ... */ },
///     EventCode::FleetValidationExecutableRuntimeFailure => { /* ... */ },
///     EventCode::FleetValidationLaunchPathNotFound => { /* ... */ },
///     EventCode::FleetValidationTimedOut => { /* ... */ },
///     EventCode::FleetVpcPeeringDeleted => { /* ... */ },
///     EventCode::FleetVpcPeeringFailed => { /* ... */ },
///     EventCode::FleetVpcPeeringSucceeded => { /* ... */ },
///     EventCode::GameServerContainerGroupCrashed => { /* ... */ },
///     EventCode::GameServerContainerGroupReplacedUnhealthy => { /* ... */ },
///     EventCode::GameSessionActivationTimeout => { /* ... */ },
///     EventCode::GenericEvent => { /* ... */ },
///     EventCode::InstanceInterrupted => { /* ... */ },
///     EventCode::InstanceRecycled => { /* ... */ },
///     EventCode::InstanceReplacedUnhealthy => { /* ... */ },
///     EventCode::LocationStateActivating => { /* ... */ },
///     EventCode::LocationStateActive => { /* ... */ },
///     EventCode::LocationStateCreated => { /* ... */ },
///     EventCode::LocationStateCreating => { /* ... */ },
///     EventCode::LocationStateDeleted => { /* ... */ },
///     EventCode::LocationStateDeleting => { /* ... */ },
///     EventCode::LocationStateError => { /* ... */ },
///     EventCode::LocationStatePending => { /* ... */ },
///     EventCode::LocationStateUpdating => { /* ... */ },
///     EventCode::PerInstanceContainerGroupCrashed => { /* ... */ },
///     EventCode::ServerProcessCrashed => { /* ... */ },
///     EventCode::ServerProcessForceTerminated => { /* ... */ },
///     EventCode::ServerProcessInvalidPath => { /* ... */ },
///     EventCode::ServerProcessMisconfiguredContainerPort => { /* ... */ },
///     EventCode::ServerProcessProcessExitTimeout => { /* ... */ },
///     EventCode::ServerProcessProcessReadyTimeout => { /* ... */ },
///     EventCode::ServerProcessSdkInitializationFailed => { /* ... */ },
///     EventCode::ServerProcessSdkInitializationTimeout => { /* ... */ },
///     EventCode::ServerProcessTerminatedUnhealthy => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `eventcode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `EventCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `EventCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `EventCode::NewFeature` is defined.
/// Specifically, when `eventcode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `EventCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum EventCode {
    #[allow(missing_docs)] // documentation missing in model
    ComputeLogUploadFailed,
    #[allow(missing_docs)] // documentation missing in model
    FleetActivationFailed,
    #[allow(missing_docs)] // documentation missing in model
    FleetActivationFailedNoInstances,
    #[allow(missing_docs)] // documentation missing in model
    FleetBinaryDownloadFailed,
    #[allow(missing_docs)] // documentation missing in model
    FleetCreated,
    #[allow(missing_docs)] // documentation missing in model
    FleetCreationCompletedInstaller,
    #[allow(missing_docs)] // documentation missing in model
    FleetCreationExtractingBuild,
    #[allow(missing_docs)] // documentation missing in model
    FleetCreationFailedInstaller,
    #[allow(missing_docs)] // documentation missing in model
    FleetCreationRunningInstaller,
    #[allow(missing_docs)] // documentation missing in model
    FleetCreationValidatingRuntimeConfig,
    #[allow(missing_docs)] // documentation missing in model
    FleetDeleted,
    #[allow(missing_docs)] // documentation missing in model
    FleetInitializationFailed,
    #[allow(missing_docs)] // documentation missing in model
    FleetNewGameSessionProtectionPolicyUpdated,
    #[allow(missing_docs)] // documentation missing in model
    FleetScalingEvent,
    #[allow(missing_docs)] // documentation missing in model
    FleetStateActivating,
    #[allow(missing_docs)] // documentation missing in model
    FleetStateActive,
    #[allow(missing_docs)] // documentation missing in model
    FleetStateBuilding,
    #[allow(missing_docs)] // documentation missing in model
    FleetStateCreated,
    #[allow(missing_docs)] // documentation missing in model
    FleetStateCreating,
    #[allow(missing_docs)] // documentation missing in model
    FleetStateDownloading,
    #[allow(missing_docs)] // documentation missing in model
    FleetStateError,
    #[allow(missing_docs)] // documentation missing in model
    FleetStatePending,
    #[allow(missing_docs)] // documentation missing in model
    FleetStateUpdating,
    #[allow(missing_docs)] // documentation missing in model
    FleetStateValidating,
    #[allow(missing_docs)] // documentation missing in model
    FleetValidationExecutableRuntimeFailure,
    #[allow(missing_docs)] // documentation missing in model
    FleetValidationLaunchPathNotFound,
    #[allow(missing_docs)] // documentation missing in model
    FleetValidationTimedOut,
    #[allow(missing_docs)] // documentation missing in model
    FleetVpcPeeringDeleted,
    #[allow(missing_docs)] // documentation missing in model
    FleetVpcPeeringFailed,
    #[allow(missing_docs)] // documentation missing in model
    FleetVpcPeeringSucceeded,
    #[allow(missing_docs)] // documentation missing in model
    GameServerContainerGroupCrashed,
    #[allow(missing_docs)] // documentation missing in model
    GameServerContainerGroupReplacedUnhealthy,
    #[allow(missing_docs)] // documentation missing in model
    GameSessionActivationTimeout,
    #[allow(missing_docs)] // documentation missing in model
    GenericEvent,
    #[allow(missing_docs)] // documentation missing in model
    InstanceInterrupted,
    #[allow(missing_docs)] // documentation missing in model
    InstanceRecycled,
    #[allow(missing_docs)] // documentation missing in model
    InstanceReplacedUnhealthy,
    #[allow(missing_docs)] // documentation missing in model
    LocationStateActivating,
    #[allow(missing_docs)] // documentation missing in model
    LocationStateActive,
    #[allow(missing_docs)] // documentation missing in model
    LocationStateCreated,
    #[allow(missing_docs)] // documentation missing in model
    LocationStateCreating,
    #[allow(missing_docs)] // documentation missing in model
    LocationStateDeleted,
    #[allow(missing_docs)] // documentation missing in model
    LocationStateDeleting,
    #[allow(missing_docs)] // documentation missing in model
    LocationStateError,
    #[allow(missing_docs)] // documentation missing in model
    LocationStatePending,
    #[allow(missing_docs)] // documentation missing in model
    LocationStateUpdating,
    #[allow(missing_docs)] // documentation missing in model
    PerInstanceContainerGroupCrashed,
    #[allow(missing_docs)] // documentation missing in model
    ServerProcessCrashed,
    #[allow(missing_docs)] // documentation missing in model
    ServerProcessForceTerminated,
    #[allow(missing_docs)] // documentation missing in model
    ServerProcessInvalidPath,
    #[allow(missing_docs)] // documentation missing in model
    ServerProcessMisconfiguredContainerPort,
    #[allow(missing_docs)] // documentation missing in model
    ServerProcessProcessExitTimeout,
    #[allow(missing_docs)] // documentation missing in model
    ServerProcessProcessReadyTimeout,
    #[allow(missing_docs)] // documentation missing in model
    ServerProcessSdkInitializationFailed,
    #[allow(missing_docs)] // documentation missing in model
    ServerProcessSdkInitializationTimeout,
    #[allow(missing_docs)] // documentation missing in model
    ServerProcessTerminatedUnhealthy,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for EventCode {
    fn from(s: &str) -> Self {
        match s {
            "COMPUTE_LOG_UPLOAD_FAILED" => EventCode::ComputeLogUploadFailed,
            "FLEET_ACTIVATION_FAILED" => EventCode::FleetActivationFailed,
            "FLEET_ACTIVATION_FAILED_NO_INSTANCES" => EventCode::FleetActivationFailedNoInstances,
            "FLEET_BINARY_DOWNLOAD_FAILED" => EventCode::FleetBinaryDownloadFailed,
            "FLEET_CREATED" => EventCode::FleetCreated,
            "FLEET_CREATION_COMPLETED_INSTALLER" => EventCode::FleetCreationCompletedInstaller,
            "FLEET_CREATION_EXTRACTING_BUILD" => EventCode::FleetCreationExtractingBuild,
            "FLEET_CREATION_FAILED_INSTALLER" => EventCode::FleetCreationFailedInstaller,
            "FLEET_CREATION_RUNNING_INSTALLER" => EventCode::FleetCreationRunningInstaller,
            "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG" => EventCode::FleetCreationValidatingRuntimeConfig,
            "FLEET_DELETED" => EventCode::FleetDeleted,
            "FLEET_INITIALIZATION_FAILED" => EventCode::FleetInitializationFailed,
            "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED" => EventCode::FleetNewGameSessionProtectionPolicyUpdated,
            "FLEET_SCALING_EVENT" => EventCode::FleetScalingEvent,
            "FLEET_STATE_ACTIVATING" => EventCode::FleetStateActivating,
            "FLEET_STATE_ACTIVE" => EventCode::FleetStateActive,
            "FLEET_STATE_BUILDING" => EventCode::FleetStateBuilding,
            "FLEET_STATE_CREATED" => EventCode::FleetStateCreated,
            "FLEET_STATE_CREATING" => EventCode::FleetStateCreating,
            "FLEET_STATE_DOWNLOADING" => EventCode::FleetStateDownloading,
            "FLEET_STATE_ERROR" => EventCode::FleetStateError,
            "FLEET_STATE_PENDING" => EventCode::FleetStatePending,
            "FLEET_STATE_UPDATING" => EventCode::FleetStateUpdating,
            "FLEET_STATE_VALIDATING" => EventCode::FleetStateValidating,
            "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE" => EventCode::FleetValidationExecutableRuntimeFailure,
            "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND" => EventCode::FleetValidationLaunchPathNotFound,
            "FLEET_VALIDATION_TIMED_OUT" => EventCode::FleetValidationTimedOut,
            "FLEET_VPC_PEERING_DELETED" => EventCode::FleetVpcPeeringDeleted,
            "FLEET_VPC_PEERING_FAILED" => EventCode::FleetVpcPeeringFailed,
            "FLEET_VPC_PEERING_SUCCEEDED" => EventCode::FleetVpcPeeringSucceeded,
            "GAME_SERVER_CONTAINER_GROUP_CRASHED" => EventCode::GameServerContainerGroupCrashed,
            "GAME_SERVER_CONTAINER_GROUP_REPLACED_UNHEALTHY" => EventCode::GameServerContainerGroupReplacedUnhealthy,
            "GAME_SESSION_ACTIVATION_TIMEOUT" => EventCode::GameSessionActivationTimeout,
            "GENERIC_EVENT" => EventCode::GenericEvent,
            "INSTANCE_INTERRUPTED" => EventCode::InstanceInterrupted,
            "INSTANCE_RECYCLED" => EventCode::InstanceRecycled,
            "INSTANCE_REPLACED_UNHEALTHY" => EventCode::InstanceReplacedUnhealthy,
            "LOCATION_STATE_ACTIVATING" => EventCode::LocationStateActivating,
            "LOCATION_STATE_ACTIVE" => EventCode::LocationStateActive,
            "LOCATION_STATE_CREATED" => EventCode::LocationStateCreated,
            "LOCATION_STATE_CREATING" => EventCode::LocationStateCreating,
            "LOCATION_STATE_DELETED" => EventCode::LocationStateDeleted,
            "LOCATION_STATE_DELETING" => EventCode::LocationStateDeleting,
            "LOCATION_STATE_ERROR" => EventCode::LocationStateError,
            "LOCATION_STATE_PENDING" => EventCode::LocationStatePending,
            "LOCATION_STATE_UPDATING" => EventCode::LocationStateUpdating,
            "PER_INSTANCE_CONTAINER_GROUP_CRASHED" => EventCode::PerInstanceContainerGroupCrashed,
            "SERVER_PROCESS_CRASHED" => EventCode::ServerProcessCrashed,
            "SERVER_PROCESS_FORCE_TERMINATED" => EventCode::ServerProcessForceTerminated,
            "SERVER_PROCESS_INVALID_PATH" => EventCode::ServerProcessInvalidPath,
            "SERVER_PROCESS_MISCONFIGURED_CONTAINER_PORT" => EventCode::ServerProcessMisconfiguredContainerPort,
            "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT" => EventCode::ServerProcessProcessExitTimeout,
            "SERVER_PROCESS_PROCESS_READY_TIMEOUT" => EventCode::ServerProcessProcessReadyTimeout,
            "SERVER_PROCESS_SDK_INITIALIZATION_FAILED" => EventCode::ServerProcessSdkInitializationFailed,
            "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT" => EventCode::ServerProcessSdkInitializationTimeout,
            "SERVER_PROCESS_TERMINATED_UNHEALTHY" => EventCode::ServerProcessTerminatedUnhealthy,
            other => EventCode::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for EventCode {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(EventCode::from(s))
    }
}
impl EventCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            EventCode::ComputeLogUploadFailed => "COMPUTE_LOG_UPLOAD_FAILED",
            EventCode::FleetActivationFailed => "FLEET_ACTIVATION_FAILED",
            EventCode::FleetActivationFailedNoInstances => "FLEET_ACTIVATION_FAILED_NO_INSTANCES",
            EventCode::FleetBinaryDownloadFailed => "FLEET_BINARY_DOWNLOAD_FAILED",
            EventCode::FleetCreated => "FLEET_CREATED",
            EventCode::FleetCreationCompletedInstaller => "FLEET_CREATION_COMPLETED_INSTALLER",
            EventCode::FleetCreationExtractingBuild => "FLEET_CREATION_EXTRACTING_BUILD",
            EventCode::FleetCreationFailedInstaller => "FLEET_CREATION_FAILED_INSTALLER",
            EventCode::FleetCreationRunningInstaller => "FLEET_CREATION_RUNNING_INSTALLER",
            EventCode::FleetCreationValidatingRuntimeConfig => "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG",
            EventCode::FleetDeleted => "FLEET_DELETED",
            EventCode::FleetInitializationFailed => "FLEET_INITIALIZATION_FAILED",
            EventCode::FleetNewGameSessionProtectionPolicyUpdated => "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED",
            EventCode::FleetScalingEvent => "FLEET_SCALING_EVENT",
            EventCode::FleetStateActivating => "FLEET_STATE_ACTIVATING",
            EventCode::FleetStateActive => "FLEET_STATE_ACTIVE",
            EventCode::FleetStateBuilding => "FLEET_STATE_BUILDING",
            EventCode::FleetStateCreated => "FLEET_STATE_CREATED",
            EventCode::FleetStateCreating => "FLEET_STATE_CREATING",
            EventCode::FleetStateDownloading => "FLEET_STATE_DOWNLOADING",
            EventCode::FleetStateError => "FLEET_STATE_ERROR",
            EventCode::FleetStatePending => "FLEET_STATE_PENDING",
            EventCode::FleetStateUpdating => "FLEET_STATE_UPDATING",
            EventCode::FleetStateValidating => "FLEET_STATE_VALIDATING",
            EventCode::FleetValidationExecutableRuntimeFailure => "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE",
            EventCode::FleetValidationLaunchPathNotFound => "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND",
            EventCode::FleetValidationTimedOut => "FLEET_VALIDATION_TIMED_OUT",
            EventCode::FleetVpcPeeringDeleted => "FLEET_VPC_PEERING_DELETED",
            EventCode::FleetVpcPeeringFailed => "FLEET_VPC_PEERING_FAILED",
            EventCode::FleetVpcPeeringSucceeded => "FLEET_VPC_PEERING_SUCCEEDED",
            EventCode::GameServerContainerGroupCrashed => "GAME_SERVER_CONTAINER_GROUP_CRASHED",
            EventCode::GameServerContainerGroupReplacedUnhealthy => "GAME_SERVER_CONTAINER_GROUP_REPLACED_UNHEALTHY",
            EventCode::GameSessionActivationTimeout => "GAME_SESSION_ACTIVATION_TIMEOUT",
            EventCode::GenericEvent => "GENERIC_EVENT",
            EventCode::InstanceInterrupted => "INSTANCE_INTERRUPTED",
            EventCode::InstanceRecycled => "INSTANCE_RECYCLED",
            EventCode::InstanceReplacedUnhealthy => "INSTANCE_REPLACED_UNHEALTHY",
            EventCode::LocationStateActivating => "LOCATION_STATE_ACTIVATING",
            EventCode::LocationStateActive => "LOCATION_STATE_ACTIVE",
            EventCode::LocationStateCreated => "LOCATION_STATE_CREATED",
            EventCode::LocationStateCreating => "LOCATION_STATE_CREATING",
            EventCode::LocationStateDeleted => "LOCATION_STATE_DELETED",
            EventCode::LocationStateDeleting => "LOCATION_STATE_DELETING",
            EventCode::LocationStateError => "LOCATION_STATE_ERROR",
            EventCode::LocationStatePending => "LOCATION_STATE_PENDING",
            EventCode::LocationStateUpdating => "LOCATION_STATE_UPDATING",
            EventCode::PerInstanceContainerGroupCrashed => "PER_INSTANCE_CONTAINER_GROUP_CRASHED",
            EventCode::ServerProcessCrashed => "SERVER_PROCESS_CRASHED",
            EventCode::ServerProcessForceTerminated => "SERVER_PROCESS_FORCE_TERMINATED",
            EventCode::ServerProcessInvalidPath => "SERVER_PROCESS_INVALID_PATH",
            EventCode::ServerProcessMisconfiguredContainerPort => "SERVER_PROCESS_MISCONFIGURED_CONTAINER_PORT",
            EventCode::ServerProcessProcessExitTimeout => "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT",
            EventCode::ServerProcessProcessReadyTimeout => "SERVER_PROCESS_PROCESS_READY_TIMEOUT",
            EventCode::ServerProcessSdkInitializationFailed => "SERVER_PROCESS_SDK_INITIALIZATION_FAILED",
            EventCode::ServerProcessSdkInitializationTimeout => "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT",
            EventCode::ServerProcessTerminatedUnhealthy => "SERVER_PROCESS_TERMINATED_UNHEALTHY",
            EventCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "COMPUTE_LOG_UPLOAD_FAILED",
            "FLEET_ACTIVATION_FAILED",
            "FLEET_ACTIVATION_FAILED_NO_INSTANCES",
            "FLEET_BINARY_DOWNLOAD_FAILED",
            "FLEET_CREATED",
            "FLEET_CREATION_COMPLETED_INSTALLER",
            "FLEET_CREATION_EXTRACTING_BUILD",
            "FLEET_CREATION_FAILED_INSTALLER",
            "FLEET_CREATION_RUNNING_INSTALLER",
            "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG",
            "FLEET_DELETED",
            "FLEET_INITIALIZATION_FAILED",
            "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED",
            "FLEET_SCALING_EVENT",
            "FLEET_STATE_ACTIVATING",
            "FLEET_STATE_ACTIVE",
            "FLEET_STATE_BUILDING",
            "FLEET_STATE_CREATED",
            "FLEET_STATE_CREATING",
            "FLEET_STATE_DOWNLOADING",
            "FLEET_STATE_ERROR",
            "FLEET_STATE_PENDING",
            "FLEET_STATE_UPDATING",
            "FLEET_STATE_VALIDATING",
            "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE",
            "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND",
            "FLEET_VALIDATION_TIMED_OUT",
            "FLEET_VPC_PEERING_DELETED",
            "FLEET_VPC_PEERING_FAILED",
            "FLEET_VPC_PEERING_SUCCEEDED",
            "GAME_SERVER_CONTAINER_GROUP_CRASHED",
            "GAME_SERVER_CONTAINER_GROUP_REPLACED_UNHEALTHY",
            "GAME_SESSION_ACTIVATION_TIMEOUT",
            "GENERIC_EVENT",
            "INSTANCE_INTERRUPTED",
            "INSTANCE_RECYCLED",
            "INSTANCE_REPLACED_UNHEALTHY",
            "LOCATION_STATE_ACTIVATING",
            "LOCATION_STATE_ACTIVE",
            "LOCATION_STATE_CREATED",
            "LOCATION_STATE_CREATING",
            "LOCATION_STATE_DELETED",
            "LOCATION_STATE_DELETING",
            "LOCATION_STATE_ERROR",
            "LOCATION_STATE_PENDING",
            "LOCATION_STATE_UPDATING",
            "PER_INSTANCE_CONTAINER_GROUP_CRASHED",
            "SERVER_PROCESS_CRASHED",
            "SERVER_PROCESS_FORCE_TERMINATED",
            "SERVER_PROCESS_INVALID_PATH",
            "SERVER_PROCESS_MISCONFIGURED_CONTAINER_PORT",
            "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT",
            "SERVER_PROCESS_PROCESS_READY_TIMEOUT",
            "SERVER_PROCESS_SDK_INITIALIZATION_FAILED",
            "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT",
            "SERVER_PROCESS_TERMINATED_UNHEALTHY",
        ]
    }
}
impl ::std::convert::AsRef<str> for EventCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl EventCode {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for EventCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            EventCode::ComputeLogUploadFailed => write!(f, "COMPUTE_LOG_UPLOAD_FAILED"),
            EventCode::FleetActivationFailed => write!(f, "FLEET_ACTIVATION_FAILED"),
            EventCode::FleetActivationFailedNoInstances => write!(f, "FLEET_ACTIVATION_FAILED_NO_INSTANCES"),
            EventCode::FleetBinaryDownloadFailed => write!(f, "FLEET_BINARY_DOWNLOAD_FAILED"),
            EventCode::FleetCreated => write!(f, "FLEET_CREATED"),
            EventCode::FleetCreationCompletedInstaller => write!(f, "FLEET_CREATION_COMPLETED_INSTALLER"),
            EventCode::FleetCreationExtractingBuild => write!(f, "FLEET_CREATION_EXTRACTING_BUILD"),
            EventCode::FleetCreationFailedInstaller => write!(f, "FLEET_CREATION_FAILED_INSTALLER"),
            EventCode::FleetCreationRunningInstaller => write!(f, "FLEET_CREATION_RUNNING_INSTALLER"),
            EventCode::FleetCreationValidatingRuntimeConfig => write!(f, "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG"),
            EventCode::FleetDeleted => write!(f, "FLEET_DELETED"),
            EventCode::FleetInitializationFailed => write!(f, "FLEET_INITIALIZATION_FAILED"),
            EventCode::FleetNewGameSessionProtectionPolicyUpdated => write!(f, "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED"),
            EventCode::FleetScalingEvent => write!(f, "FLEET_SCALING_EVENT"),
            EventCode::FleetStateActivating => write!(f, "FLEET_STATE_ACTIVATING"),
            EventCode::FleetStateActive => write!(f, "FLEET_STATE_ACTIVE"),
            EventCode::FleetStateBuilding => write!(f, "FLEET_STATE_BUILDING"),
            EventCode::FleetStateCreated => write!(f, "FLEET_STATE_CREATED"),
            EventCode::FleetStateCreating => write!(f, "FLEET_STATE_CREATING"),
            EventCode::FleetStateDownloading => write!(f, "FLEET_STATE_DOWNLOADING"),
            EventCode::FleetStateError => write!(f, "FLEET_STATE_ERROR"),
            EventCode::FleetStatePending => write!(f, "FLEET_STATE_PENDING"),
            EventCode::FleetStateUpdating => write!(f, "FLEET_STATE_UPDATING"),
            EventCode::FleetStateValidating => write!(f, "FLEET_STATE_VALIDATING"),
            EventCode::FleetValidationExecutableRuntimeFailure => write!(f, "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE"),
            EventCode::FleetValidationLaunchPathNotFound => write!(f, "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND"),
            EventCode::FleetValidationTimedOut => write!(f, "FLEET_VALIDATION_TIMED_OUT"),
            EventCode::FleetVpcPeeringDeleted => write!(f, "FLEET_VPC_PEERING_DELETED"),
            EventCode::FleetVpcPeeringFailed => write!(f, "FLEET_VPC_PEERING_FAILED"),
            EventCode::FleetVpcPeeringSucceeded => write!(f, "FLEET_VPC_PEERING_SUCCEEDED"),
            EventCode::GameServerContainerGroupCrashed => write!(f, "GAME_SERVER_CONTAINER_GROUP_CRASHED"),
            EventCode::GameServerContainerGroupReplacedUnhealthy => write!(f, "GAME_SERVER_CONTAINER_GROUP_REPLACED_UNHEALTHY"),
            EventCode::GameSessionActivationTimeout => write!(f, "GAME_SESSION_ACTIVATION_TIMEOUT"),
            EventCode::GenericEvent => write!(f, "GENERIC_EVENT"),
            EventCode::InstanceInterrupted => write!(f, "INSTANCE_INTERRUPTED"),
            EventCode::InstanceRecycled => write!(f, "INSTANCE_RECYCLED"),
            EventCode::InstanceReplacedUnhealthy => write!(f, "INSTANCE_REPLACED_UNHEALTHY"),
            EventCode::LocationStateActivating => write!(f, "LOCATION_STATE_ACTIVATING"),
            EventCode::LocationStateActive => write!(f, "LOCATION_STATE_ACTIVE"),
            EventCode::LocationStateCreated => write!(f, "LOCATION_STATE_CREATED"),
            EventCode::LocationStateCreating => write!(f, "LOCATION_STATE_CREATING"),
            EventCode::LocationStateDeleted => write!(f, "LOCATION_STATE_DELETED"),
            EventCode::LocationStateDeleting => write!(f, "LOCATION_STATE_DELETING"),
            EventCode::LocationStateError => write!(f, "LOCATION_STATE_ERROR"),
            EventCode::LocationStatePending => write!(f, "LOCATION_STATE_PENDING"),
            EventCode::LocationStateUpdating => write!(f, "LOCATION_STATE_UPDATING"),
            EventCode::PerInstanceContainerGroupCrashed => write!(f, "PER_INSTANCE_CONTAINER_GROUP_CRASHED"),
            EventCode::ServerProcessCrashed => write!(f, "SERVER_PROCESS_CRASHED"),
            EventCode::ServerProcessForceTerminated => write!(f, "SERVER_PROCESS_FORCE_TERMINATED"),
            EventCode::ServerProcessInvalidPath => write!(f, "SERVER_PROCESS_INVALID_PATH"),
            EventCode::ServerProcessMisconfiguredContainerPort => write!(f, "SERVER_PROCESS_MISCONFIGURED_CONTAINER_PORT"),
            EventCode::ServerProcessProcessExitTimeout => write!(f, "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT"),
            EventCode::ServerProcessProcessReadyTimeout => write!(f, "SERVER_PROCESS_PROCESS_READY_TIMEOUT"),
            EventCode::ServerProcessSdkInitializationFailed => write!(f, "SERVER_PROCESS_SDK_INITIALIZATION_FAILED"),
            EventCode::ServerProcessSdkInitializationTimeout => write!(f, "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT"),
            EventCode::ServerProcessTerminatedUnhealthy => write!(f, "SERVER_PROCESS_TERMINATED_UNHEALTHY"),
            EventCode::Unknown(value) => write!(f, "{value}"),
        }
    }
}
