// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Values for use in player attribute key-value pairs. This object lets you specify an attribute value using any of the valid data types: string, number, string array, or data map. Each <code>AttributeValue</code> object can use only one of the available properties.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttributeValue {
    /// <p>For single string values. Maximum string length is 100 characters.</p>
    pub s: ::std::option::Option<::std::string::String>,
    /// <p>For number values, expressed as double.</p>
    pub n: ::std::option::Option<f64>,
    /// <p>For a list of up to 100 strings. Maximum length for each string is 100 characters. Duplicate values are not recognized; all occurrences of the repeated value after the first of a repeated value are ignored.</p>
    pub sl: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>For a map of up to 10 data type:value pairs. Maximum length for each string value is 100 characters. </p>
    pub sdm: ::std::option::Option<::std::collections::HashMap<::std::string::String, f64>>,
}
impl AttributeValue {
    /// <p>For single string values. Maximum string length is 100 characters.</p>
    pub fn s(&self) -> ::std::option::Option<&str> {
        self.s.as_deref()
    }
    /// <p>For number values, expressed as double.</p>
    pub fn n(&self) -> ::std::option::Option<f64> {
        self.n
    }
    /// <p>For a list of up to 100 strings. Maximum length for each string is 100 characters. Duplicate values are not recognized; all occurrences of the repeated value after the first of a repeated value are ignored.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sl.is_none()`.
    pub fn sl(&self) -> &[::std::string::String] {
        self.sl.as_deref().unwrap_or_default()
    }
    /// <p>For a map of up to 10 data type:value pairs. Maximum length for each string value is 100 characters. </p>
    pub fn sdm(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, f64>> {
        self.sdm.as_ref()
    }
}
impl AttributeValue {
    /// Creates a new builder-style object to manufacture [`AttributeValue`](crate::types::AttributeValue).
    pub fn builder() -> crate::types::builders::AttributeValueBuilder {
        crate::types::builders::AttributeValueBuilder::default()
    }
}

/// A builder for [`AttributeValue`](crate::types::AttributeValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AttributeValueBuilder {
    pub(crate) s: ::std::option::Option<::std::string::String>,
    pub(crate) n: ::std::option::Option<f64>,
    pub(crate) sl: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) sdm: ::std::option::Option<::std::collections::HashMap<::std::string::String, f64>>,
}
impl AttributeValueBuilder {
    /// <p>For single string values. Maximum string length is 100 characters.</p>
    pub fn s(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>For single string values. Maximum string length is 100 characters.</p>
    pub fn set_s(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s = input;
        self
    }
    /// <p>For single string values. Maximum string length is 100 characters.</p>
    pub fn get_s(&self) -> &::std::option::Option<::std::string::String> {
        &self.s
    }
    /// <p>For number values, expressed as double.</p>
    pub fn n(mut self, input: f64) -> Self {
        self.n = ::std::option::Option::Some(input);
        self
    }
    /// <p>For number values, expressed as double.</p>
    pub fn set_n(mut self, input: ::std::option::Option<f64>) -> Self {
        self.n = input;
        self
    }
    /// <p>For number values, expressed as double.</p>
    pub fn get_n(&self) -> &::std::option::Option<f64> {
        &self.n
    }
    /// Appends an item to `sl`.
    ///
    /// To override the contents of this collection use [`set_sl`](Self::set_sl).
    ///
    /// <p>For a list of up to 100 strings. Maximum length for each string is 100 characters. Duplicate values are not recognized; all occurrences of the repeated value after the first of a repeated value are ignored.</p>
    pub fn sl(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.sl.unwrap_or_default();
        v.push(input.into());
        self.sl = ::std::option::Option::Some(v);
        self
    }
    /// <p>For a list of up to 100 strings. Maximum length for each string is 100 characters. Duplicate values are not recognized; all occurrences of the repeated value after the first of a repeated value are ignored.</p>
    pub fn set_sl(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.sl = input;
        self
    }
    /// <p>For a list of up to 100 strings. Maximum length for each string is 100 characters. Duplicate values are not recognized; all occurrences of the repeated value after the first of a repeated value are ignored.</p>
    pub fn get_sl(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.sl
    }
    /// Adds a key-value pair to `sdm`.
    ///
    /// To override the contents of this collection use [`set_sdm`](Self::set_sdm).
    ///
    /// <p>For a map of up to 10 data type:value pairs. Maximum length for each string value is 100 characters. </p>
    pub fn sdm(mut self, k: impl ::std::convert::Into<::std::string::String>, v: f64) -> Self {
        let mut hash_map = self.sdm.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.sdm = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>For a map of up to 10 data type:value pairs. Maximum length for each string value is 100 characters. </p>
    pub fn set_sdm(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, f64>>) -> Self {
        self.sdm = input;
        self
    }
    /// <p>For a map of up to 10 data type:value pairs. Maximum length for each string value is 100 characters. </p>
    pub fn get_sdm(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, f64>> {
        &self.sdm
    }
    /// Consumes the builder and constructs a [`AttributeValue`](crate::types::AttributeValue).
    pub fn build(self) -> crate::types::AttributeValue {
        crate::types::AttributeValue {
            s: self.s,
            n: self.n,
            sl: self.sl,
            sdm: self.sdm,
        }
    }
}
