// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines whether a TLS/SSL certificate is generated for a fleet. This feature must be enabled when creating the fleet. All instances in a fleet share the same certificate. The certificate can be retrieved by calling the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk.html">GameLift Server SDK</a> operation <code>GetInstanceCertificate</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CertificateConfiguration {
    /// <p>Indicates whether a TLS/SSL certificate is generated for a fleet. </p>
    /// <p>Valid values include: </p>
    /// <ul>
    /// <li> <p> <b>GENERATED</b> - Generate a TLS/SSL certificate for this fleet.</p> </li>
    /// <li> <p> <b>DISABLED</b> - (default) Do not generate a TLS/SSL certificate for this fleet. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub certificate_type: std::option::Option<crate::types::CertificateType>,
}
impl CertificateConfiguration {
    /// <p>Indicates whether a TLS/SSL certificate is generated for a fleet. </p>
    /// <p>Valid values include: </p>
    /// <ul>
    /// <li> <p> <b>GENERATED</b> - Generate a TLS/SSL certificate for this fleet.</p> </li>
    /// <li> <p> <b>DISABLED</b> - (default) Do not generate a TLS/SSL certificate for this fleet. </p> </li>
    /// </ul>
    pub fn certificate_type(&self) -> std::option::Option<&crate::types::CertificateType> {
        self.certificate_type.as_ref()
    }
}
impl CertificateConfiguration {
    /// Creates a new builder-style object to manufacture [`CertificateConfiguration`](crate::types::CertificateConfiguration).
    pub fn builder() -> crate::types::builders::CertificateConfigurationBuilder {
        crate::types::builders::CertificateConfigurationBuilder::default()
    }
}

/// A builder for [`CertificateConfiguration`](crate::types::CertificateConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CertificateConfigurationBuilder {
    pub(crate) certificate_type: std::option::Option<crate::types::CertificateType>,
}
impl CertificateConfigurationBuilder {
    /// <p>Indicates whether a TLS/SSL certificate is generated for a fleet. </p>
    /// <p>Valid values include: </p>
    /// <ul>
    /// <li> <p> <b>GENERATED</b> - Generate a TLS/SSL certificate for this fleet.</p> </li>
    /// <li> <p> <b>DISABLED</b> - (default) Do not generate a TLS/SSL certificate for this fleet. </p> </li>
    /// </ul>
    pub fn certificate_type(mut self, input: crate::types::CertificateType) -> Self {
        self.certificate_type = Some(input);
        self
    }
    /// <p>Indicates whether a TLS/SSL certificate is generated for a fleet. </p>
    /// <p>Valid values include: </p>
    /// <ul>
    /// <li> <p> <b>GENERATED</b> - Generate a TLS/SSL certificate for this fleet.</p> </li>
    /// <li> <p> <b>DISABLED</b> - (default) Do not generate a TLS/SSL certificate for this fleet. </p> </li>
    /// </ul>
    pub fn set_certificate_type(
        mut self,
        input: std::option::Option<crate::types::CertificateType>,
    ) -> Self {
        self.certificate_type = input;
        self
    }
    /// Consumes the builder and constructs a [`CertificateConfiguration`](crate::types::CertificateConfiguration).
    pub fn build(self) -> crate::types::CertificateConfiguration {
        crate::types::CertificateConfiguration {
            certificate_type: self.certificate_type,
        }
    }
}
