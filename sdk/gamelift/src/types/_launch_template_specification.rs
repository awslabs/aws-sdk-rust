// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> <b>This data type is used with the GameLift FleetIQ and game server groups.</b> </p>
/// <p>An Amazon Elastic Compute Cloud launch template that contains configuration settings and game server code to be deployed to all instances in a game server group. The launch template is specified when creating a new game server group. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LaunchTemplateSpecification {
    /// <p>A unique identifier for an existing Amazon EC2 launch template.</p>
    #[doc(hidden)]
    pub launch_template_id: std::option::Option<std::string::String>,
    /// <p>A readable identifier for an existing Amazon EC2 launch template. </p>
    #[doc(hidden)]
    pub launch_template_name: std::option::Option<std::string::String>,
    /// <p>The version of the Amazon EC2 launch template to use. If no version is specified, the default version will be used. With Amazon EC2, you can specify a default version for a launch template. If none is set, the default is the first version created.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl LaunchTemplateSpecification {
    /// <p>A unique identifier for an existing Amazon EC2 launch template.</p>
    pub fn launch_template_id(&self) -> std::option::Option<&str> {
        self.launch_template_id.as_deref()
    }
    /// <p>A readable identifier for an existing Amazon EC2 launch template. </p>
    pub fn launch_template_name(&self) -> std::option::Option<&str> {
        self.launch_template_name.as_deref()
    }
    /// <p>The version of the Amazon EC2 launch template to use. If no version is specified, the default version will be used. With Amazon EC2, you can specify a default version for a launch template. If none is set, the default is the first version created.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl LaunchTemplateSpecification {
    /// Creates a new builder-style object to manufacture [`LaunchTemplateSpecification`](crate::types::LaunchTemplateSpecification).
    pub fn builder() -> crate::types::builders::LaunchTemplateSpecificationBuilder {
        crate::types::builders::LaunchTemplateSpecificationBuilder::default()
    }
}

/// A builder for [`LaunchTemplateSpecification`](crate::types::LaunchTemplateSpecification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LaunchTemplateSpecificationBuilder {
    pub(crate) launch_template_id: std::option::Option<std::string::String>,
    pub(crate) launch_template_name: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
}
impl LaunchTemplateSpecificationBuilder {
    /// <p>A unique identifier for an existing Amazon EC2 launch template.</p>
    pub fn launch_template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.launch_template_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for an existing Amazon EC2 launch template.</p>
    pub fn set_launch_template_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.launch_template_id = input;
        self
    }
    /// <p>A readable identifier for an existing Amazon EC2 launch template. </p>
    pub fn launch_template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.launch_template_name = Some(input.into());
        self
    }
    /// <p>A readable identifier for an existing Amazon EC2 launch template. </p>
    pub fn set_launch_template_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.launch_template_name = input;
        self
    }
    /// <p>The version of the Amazon EC2 launch template to use. If no version is specified, the default version will be used. With Amazon EC2, you can specify a default version for a launch template. If none is set, the default is the first version created.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version of the Amazon EC2 launch template to use. If no version is specified, the default version will be used. With Amazon EC2, you can specify a default version for a launch template. If none is set, the default is the first version created.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`LaunchTemplateSpecification`](crate::types::LaunchTemplateSpecification).
    pub fn build(self) -> crate::types::LaunchTemplateSpecification {
        crate::types::LaunchTemplateSpecification {
            launch_template_id: self.launch_template_id,
            launch_template_name: self.launch_template_name,
            version: self.version,
        }
    }
}
