// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> <b>This data type is used with the Amazon GameLift FleetIQ and game server groups.</b> </p>
/// <p> Filters which game servers may be claimed when calling <code>ClaimGameServer</code>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClaimFilterOption {
    /// <p>List of instance statuses that game servers may be claimed on. If provided, the list must contain the <code>ACTIVE</code> status.</p>
    pub instance_statuses: ::std::option::Option<::std::vec::Vec<crate::types::FilterInstanceStatus>>,
}
impl ClaimFilterOption {
    /// <p>List of instance statuses that game servers may be claimed on. If provided, the list must contain the <code>ACTIVE</code> status.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_statuses.is_none()`.
    pub fn instance_statuses(&self) -> &[crate::types::FilterInstanceStatus] {
        self.instance_statuses.as_deref().unwrap_or_default()
    }
}
impl ClaimFilterOption {
    /// Creates a new builder-style object to manufacture [`ClaimFilterOption`](crate::types::ClaimFilterOption).
    pub fn builder() -> crate::types::builders::ClaimFilterOptionBuilder {
        crate::types::builders::ClaimFilterOptionBuilder::default()
    }
}

/// A builder for [`ClaimFilterOption`](crate::types::ClaimFilterOption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ClaimFilterOptionBuilder {
    pub(crate) instance_statuses: ::std::option::Option<::std::vec::Vec<crate::types::FilterInstanceStatus>>,
}
impl ClaimFilterOptionBuilder {
    /// Appends an item to `instance_statuses`.
    ///
    /// To override the contents of this collection use [`set_instance_statuses`](Self::set_instance_statuses).
    ///
    /// <p>List of instance statuses that game servers may be claimed on. If provided, the list must contain the <code>ACTIVE</code> status.</p>
    pub fn instance_statuses(mut self, input: crate::types::FilterInstanceStatus) -> Self {
        let mut v = self.instance_statuses.unwrap_or_default();
        v.push(input);
        self.instance_statuses = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of instance statuses that game servers may be claimed on. If provided, the list must contain the <code>ACTIVE</code> status.</p>
    pub fn set_instance_statuses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterInstanceStatus>>) -> Self {
        self.instance_statuses = input;
        self
    }
    /// <p>List of instance statuses that game servers may be claimed on. If provided, the list must contain the <code>ACTIVE</code> status.</p>
    pub fn get_instance_statuses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterInstanceStatus>> {
        &self.instance_statuses
    }
    /// Consumes the builder and constructs a [`ClaimFilterOption`](crate::types::ClaimFilterOption).
    pub fn build(self) -> crate::types::ClaimFilterOption {
        crate::types::ClaimFilterOption {
            instance_statuses: self.instance_statuses,
        }
    }
}
