// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `MetricName`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let metricname = unimplemented!();
/// match metricname {
///     MetricName::ActivatingGameSessions => { /* ... */ },
///     MetricName::ActiveGameSessions => { /* ... */ },
///     MetricName::ActiveInstances => { /* ... */ },
///     MetricName::AvailableGameSessions => { /* ... */ },
///     MetricName::AvailablePlayerSessions => { /* ... */ },
///     MetricName::ConcurrentActivatableGameSessions => { /* ... */ },
///     MetricName::CurrentPlayerSessions => { /* ... */ },
///     MetricName::IdleInstances => { /* ... */ },
///     MetricName::PercentAvailableGameSessions => { /* ... */ },
///     MetricName::PercentIdleInstances => { /* ... */ },
///     MetricName::QueueDepth => { /* ... */ },
///     MetricName::WaitTime => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `metricname` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `MetricName::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `MetricName::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `MetricName::NewFeature` is defined.
/// Specifically, when `metricname` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `MetricName::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum MetricName {
    #[allow(missing_docs)] // documentation missing in model
    ActivatingGameSessions,
    #[allow(missing_docs)] // documentation missing in model
    ActiveGameSessions,
    #[allow(missing_docs)] // documentation missing in model
    ActiveInstances,
    #[allow(missing_docs)] // documentation missing in model
    AvailableGameSessions,
    #[allow(missing_docs)] // documentation missing in model
    AvailablePlayerSessions,
    #[allow(missing_docs)] // documentation missing in model
    ConcurrentActivatableGameSessions,
    #[allow(missing_docs)] // documentation missing in model
    CurrentPlayerSessions,
    #[allow(missing_docs)] // documentation missing in model
    IdleInstances,
    #[allow(missing_docs)] // documentation missing in model
    PercentAvailableGameSessions,
    #[allow(missing_docs)] // documentation missing in model
    PercentIdleInstances,
    #[allow(missing_docs)] // documentation missing in model
    QueueDepth,
    #[allow(missing_docs)] // documentation missing in model
    WaitTime,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for MetricName {
    fn from(s: &str) -> Self {
        match s {
            "ActivatingGameSessions" => MetricName::ActivatingGameSessions,
            "ActiveGameSessions" => MetricName::ActiveGameSessions,
            "ActiveInstances" => MetricName::ActiveInstances,
            "AvailableGameSessions" => MetricName::AvailableGameSessions,
            "AvailablePlayerSessions" => MetricName::AvailablePlayerSessions,
            "ConcurrentActivatableGameSessions" => MetricName::ConcurrentActivatableGameSessions,
            "CurrentPlayerSessions" => MetricName::CurrentPlayerSessions,
            "IdleInstances" => MetricName::IdleInstances,
            "PercentAvailableGameSessions" => MetricName::PercentAvailableGameSessions,
            "PercentIdleInstances" => MetricName::PercentIdleInstances,
            "QueueDepth" => MetricName::QueueDepth,
            "WaitTime" => MetricName::WaitTime,
            other => MetricName::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for MetricName {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(MetricName::from(s))
    }
}
impl MetricName {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            MetricName::ActivatingGameSessions => "ActivatingGameSessions",
            MetricName::ActiveGameSessions => "ActiveGameSessions",
            MetricName::ActiveInstances => "ActiveInstances",
            MetricName::AvailableGameSessions => "AvailableGameSessions",
            MetricName::AvailablePlayerSessions => "AvailablePlayerSessions",
            MetricName::ConcurrentActivatableGameSessions => "ConcurrentActivatableGameSessions",
            MetricName::CurrentPlayerSessions => "CurrentPlayerSessions",
            MetricName::IdleInstances => "IdleInstances",
            MetricName::PercentAvailableGameSessions => "PercentAvailableGameSessions",
            MetricName::PercentIdleInstances => "PercentIdleInstances",
            MetricName::QueueDepth => "QueueDepth",
            MetricName::WaitTime => "WaitTime",
            MetricName::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ActivatingGameSessions",
            "ActiveGameSessions",
            "ActiveInstances",
            "AvailableGameSessions",
            "AvailablePlayerSessions",
            "ConcurrentActivatableGameSessions",
            "CurrentPlayerSessions",
            "IdleInstances",
            "PercentAvailableGameSessions",
            "PercentIdleInstances",
            "QueueDepth",
            "WaitTime",
        ]
    }
}
impl AsRef<str> for MetricName {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
