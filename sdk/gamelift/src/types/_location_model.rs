// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties of a location</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LocationModel {
    /// <p>The location's name.</p>
    #[doc(hidden)]
    pub location_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift location resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:
    /// <region>
    /// ::location/location-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>.</p>
    #[doc(hidden)]
    pub location_arn: std::option::Option<std::string::String>,
}
impl LocationModel {
    /// <p>The location's name.</p>
    pub fn location_name(&self) -> std::option::Option<&str> {
        self.location_name.as_deref()
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift location resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:
    /// <region>
    /// ::location/location-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>.</p>
    pub fn location_arn(&self) -> std::option::Option<&str> {
        self.location_arn.as_deref()
    }
}
impl LocationModel {
    /// Creates a new builder-style object to manufacture [`LocationModel`](crate::types::LocationModel).
    pub fn builder() -> crate::types::builders::LocationModelBuilder {
        crate::types::builders::LocationModelBuilder::default()
    }
}

/// A builder for [`LocationModel`](crate::types::LocationModel).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LocationModelBuilder {
    pub(crate) location_name: std::option::Option<std::string::String>,
    pub(crate) location_arn: std::option::Option<std::string::String>,
}
impl LocationModelBuilder {
    /// <p>The location's name.</p>
    pub fn location_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.location_name = Some(input.into());
        self
    }
    /// <p>The location's name.</p>
    pub fn set_location_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location_name = input;
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift location resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:
    /// <region>
    /// ::location/location-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>.</p>
    pub fn location_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.location_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift location resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:
    /// <region>
    /// ::location/location-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>.</p>
    pub fn set_location_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`LocationModel`](crate::types::LocationModel).
    pub fn build(self) -> crate::types::LocationModel {
        crate::types::LocationModel {
            location_name: self.location_name,
            location_arn: self.location_arn,
        }
    }
}
