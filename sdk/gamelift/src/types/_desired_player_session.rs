// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Player information for use when creating player sessions using a game session placement request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DesiredPlayerSession {
    /// <p>A unique identifier for a player to associate with the player session.</p>
    #[doc(hidden)]
    pub player_id: std::option::Option<std::string::String>,
    /// <p>Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.</p>
    #[doc(hidden)]
    pub player_data: std::option::Option<std::string::String>,
}
impl DesiredPlayerSession {
    /// <p>A unique identifier for a player to associate with the player session.</p>
    pub fn player_id(&self) -> std::option::Option<&str> {
        self.player_id.as_deref()
    }
    /// <p>Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.</p>
    pub fn player_data(&self) -> std::option::Option<&str> {
        self.player_data.as_deref()
    }
}
impl DesiredPlayerSession {
    /// Creates a new builder-style object to manufacture [`DesiredPlayerSession`](crate::types::DesiredPlayerSession).
    pub fn builder() -> crate::types::builders::DesiredPlayerSessionBuilder {
        crate::types::builders::DesiredPlayerSessionBuilder::default()
    }
}

/// A builder for [`DesiredPlayerSession`](crate::types::DesiredPlayerSession).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DesiredPlayerSessionBuilder {
    pub(crate) player_id: std::option::Option<std::string::String>,
    pub(crate) player_data: std::option::Option<std::string::String>,
}
impl DesiredPlayerSessionBuilder {
    /// <p>A unique identifier for a player to associate with the player session.</p>
    pub fn player_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.player_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for a player to associate with the player session.</p>
    pub fn set_player_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.player_id = input;
        self
    }
    /// <p>Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.</p>
    pub fn player_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.player_data = Some(input.into());
        self
    }
    /// <p>Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.</p>
    pub fn set_player_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.player_data = input;
        self
    }
    /// Consumes the builder and constructs a [`DesiredPlayerSession`](crate::types::DesiredPlayerSession).
    pub fn build(self) -> crate::types::DesiredPlayerSession {
        crate::types::DesiredPlayerSession {
            player_id: self.player_id,
            player_data: self.player_data,
        }
    }
}
