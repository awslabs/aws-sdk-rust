// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a new player session that is created as a result of a successful FlexMatch match. A successful match automatically creates new player sessions for every player ID in the original matchmaking request. </p>
/// <p>When players connect to the match's game session, they must include both player ID and player session ID in order to claim their assigned player slot.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MatchedPlayerSession {
    /// <p>A unique identifier for a player </p>
    #[doc(hidden)]
    pub player_id: std::option::Option<std::string::String>,
    /// <p>A unique identifier for a player session</p>
    #[doc(hidden)]
    pub player_session_id: std::option::Option<std::string::String>,
}
impl MatchedPlayerSession {
    /// <p>A unique identifier for a player </p>
    pub fn player_id(&self) -> std::option::Option<&str> {
        self.player_id.as_deref()
    }
    /// <p>A unique identifier for a player session</p>
    pub fn player_session_id(&self) -> std::option::Option<&str> {
        self.player_session_id.as_deref()
    }
}
impl MatchedPlayerSession {
    /// Creates a new builder-style object to manufacture [`MatchedPlayerSession`](crate::types::MatchedPlayerSession).
    pub fn builder() -> crate::types::builders::MatchedPlayerSessionBuilder {
        crate::types::builders::MatchedPlayerSessionBuilder::default()
    }
}

/// A builder for [`MatchedPlayerSession`](crate::types::MatchedPlayerSession).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MatchedPlayerSessionBuilder {
    pub(crate) player_id: std::option::Option<std::string::String>,
    pub(crate) player_session_id: std::option::Option<std::string::String>,
}
impl MatchedPlayerSessionBuilder {
    /// <p>A unique identifier for a player </p>
    pub fn player_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.player_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for a player </p>
    pub fn set_player_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.player_id = input;
        self
    }
    /// <p>A unique identifier for a player session</p>
    pub fn player_session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.player_session_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for a player session</p>
    pub fn set_player_session_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.player_session_id = input;
        self
    }
    /// Consumes the builder and constructs a [`MatchedPlayerSession`](crate::types::MatchedPlayerSession).
    pub fn build(self) -> crate::types::MatchedPlayerSession {
        crate::types::MatchedPlayerSession {
            player_id: self.player_id,
            player_session_id: self.player_session_id,
        }
    }
}
