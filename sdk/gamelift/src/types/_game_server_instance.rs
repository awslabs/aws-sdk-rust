// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> <b>This data type is used with the GameLift FleetIQ and game server groups.</b> </p>
/// <p> Additional properties, including status, that describe an EC2 instance in a game server group. Instance configurations are set with game server group properties (see <code>DescribeGameServerGroup</code> and with the EC2 launch template that was used when creating the game server group. </p>
/// <p>Retrieve game server instances for a game server group by calling <code>DescribeGameServerInstances</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GameServerInstance {
    /// <p>A developer-defined identifier for the game server group that includes the game server instance. The name is unique for each Region in each Amazon Web Services account.</p>
    #[doc(hidden)]
    pub game_server_group_name: std::option::Option<std::string::String>,
    /// <p>A generated unique identifier for the game server group that includes the game server instance. </p>
    #[doc(hidden)]
    pub game_server_group_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: <code>i-1234567890abcdef0</code>.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>Current status of the game server instance</p>
    #[doc(hidden)]
    pub instance_status: std::option::Option<crate::types::GameServerInstanceStatus>,
}
impl GameServerInstance {
    /// <p>A developer-defined identifier for the game server group that includes the game server instance. The name is unique for each Region in each Amazon Web Services account.</p>
    pub fn game_server_group_name(&self) -> std::option::Option<&str> {
        self.game_server_group_name.as_deref()
    }
    /// <p>A generated unique identifier for the game server group that includes the game server instance. </p>
    pub fn game_server_group_arn(&self) -> std::option::Option<&str> {
        self.game_server_group_arn.as_deref()
    }
    /// <p>The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: <code>i-1234567890abcdef0</code>.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>Current status of the game server instance</p>
    pub fn instance_status(&self) -> std::option::Option<&crate::types::GameServerInstanceStatus> {
        self.instance_status.as_ref()
    }
}
impl GameServerInstance {
    /// Creates a new builder-style object to manufacture [`GameServerInstance`](crate::types::GameServerInstance).
    pub fn builder() -> crate::types::builders::GameServerInstanceBuilder {
        crate::types::builders::GameServerInstanceBuilder::default()
    }
}

/// A builder for [`GameServerInstance`](crate::types::GameServerInstance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GameServerInstanceBuilder {
    pub(crate) game_server_group_name: std::option::Option<std::string::String>,
    pub(crate) game_server_group_arn: std::option::Option<std::string::String>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) instance_status: std::option::Option<crate::types::GameServerInstanceStatus>,
}
impl GameServerInstanceBuilder {
    /// <p>A developer-defined identifier for the game server group that includes the game server instance. The name is unique for each Region in each Amazon Web Services account.</p>
    pub fn game_server_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.game_server_group_name = Some(input.into());
        self
    }
    /// <p>A developer-defined identifier for the game server group that includes the game server instance. The name is unique for each Region in each Amazon Web Services account.</p>
    pub fn set_game_server_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.game_server_group_name = input;
        self
    }
    /// <p>A generated unique identifier for the game server group that includes the game server instance. </p>
    pub fn game_server_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.game_server_group_arn = Some(input.into());
        self
    }
    /// <p>A generated unique identifier for the game server group that includes the game server instance. </p>
    pub fn set_game_server_group_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.game_server_group_arn = input;
        self
    }
    /// <p>The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: <code>i-1234567890abcdef0</code>.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: <code>i-1234567890abcdef0</code>.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>Current status of the game server instance</p>
    pub fn instance_status(mut self, input: crate::types::GameServerInstanceStatus) -> Self {
        self.instance_status = Some(input);
        self
    }
    /// <p>Current status of the game server instance</p>
    pub fn set_instance_status(
        mut self,
        input: std::option::Option<crate::types::GameServerInstanceStatus>,
    ) -> Self {
        self.instance_status = input;
        self
    }
    /// Consumes the builder and constructs a [`GameServerInstance`](crate::types::GameServerInstance).
    pub fn build(self) -> crate::types::GameServerInstance {
        crate::types::GameServerInstance {
            game_server_group_name: self.game_server_group_name,
            game_server_group_arn: self.game_server_group_arn,
            instance_id: self.instance_id,
            instance_status: self.instance_status,
        }
    }
}
