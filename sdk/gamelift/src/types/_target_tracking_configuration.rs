// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> <b>This data type is used with the Amazon GameLift FleetIQ and game server groups.</b> </p>
/// <p>Settings for a target-based scaling policy as part of a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_GameServerGroupAutoScalingPolicy.html">GameServerGroupAutoScalingPolicy</a> . These settings are used to create a target-based policy that tracks the Amazon GameLift FleetIQ metric <code>"PercentUtilizedGameServers"</code> and specifies a target value for the metric. As player usage changes, the policy triggers to adjust the game server group capacity so that the metric returns to the target value. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TargetTrackingConfiguration {
    /// <p>Desired value to use with a game server group target-based scaling policy. </p>
    pub target_value: ::std::option::Option<f64>,
}
impl TargetTrackingConfiguration {
    /// <p>Desired value to use with a game server group target-based scaling policy. </p>
    pub fn target_value(&self) -> ::std::option::Option<f64> {
        self.target_value
    }
}
impl TargetTrackingConfiguration {
    /// Creates a new builder-style object to manufacture [`TargetTrackingConfiguration`](crate::types::TargetTrackingConfiguration).
    pub fn builder() -> crate::types::builders::TargetTrackingConfigurationBuilder {
        crate::types::builders::TargetTrackingConfigurationBuilder::default()
    }
}

/// A builder for [`TargetTrackingConfiguration`](crate::types::TargetTrackingConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TargetTrackingConfigurationBuilder {
    pub(crate) target_value: ::std::option::Option<f64>,
}
impl TargetTrackingConfigurationBuilder {
    /// <p>Desired value to use with a game server group target-based scaling policy. </p>
    /// This field is required.
    pub fn target_value(mut self, input: f64) -> Self {
        self.target_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Desired value to use with a game server group target-based scaling policy. </p>
    pub fn set_target_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.target_value = input;
        self
    }
    /// <p>Desired value to use with a game server group target-based scaling policy. </p>
    pub fn get_target_value(&self) -> &::std::option::Option<f64> {
        &self.target_value
    }
    /// Consumes the builder and constructs a [`TargetTrackingConfiguration`](crate::types::TargetTrackingConfiguration).
    pub fn build(self) -> crate::types::TargetTrackingConfiguration {
        crate::types::TargetTrackingConfiguration {
            target_value: self.target_value,
        }
    }
}
