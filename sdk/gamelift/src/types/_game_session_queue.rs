// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for a game session placement mechanism that processes requests for new game sessions. A queue can be used on its own or as part of a matchmaking solution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GameSessionQueue {
    /// <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:
    /// <region>
    /// ::gamesessionqueue/
    /// <queue name></queue>
    /// </region></code>. In a GameLift game session queue ARN, the resource ID matches the <i>Name</i> value.</p>
    #[doc(hidden)]
    pub game_session_queue_arn: std::option::Option<std::string::String>,
    /// <p>The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.</p>
    #[doc(hidden)]
    pub timeout_in_seconds: std::option::Option<i32>,
    /// <p>A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value. </p>
    #[doc(hidden)]
    pub player_latency_policies:
        std::option::Option<std::vec::Vec<crate::types::PlayerLatencyPolicy>>,
    /// <p>A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.</p>
    #[doc(hidden)]
    pub destinations: std::option::Option<std::vec::Vec<crate::types::GameSessionQueueDestination>>,
    /// <p>A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as <code>us-west-2</code>. If this parameter is not set, game sessions can be placed in any queue location. </p>
    #[doc(hidden)]
    pub filter_configuration: std::option::Option<crate::types::FilterConfiguration>,
    /// <p>Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process. </p>
    #[doc(hidden)]
    pub priority_configuration: std::option::Option<crate::types::PriorityConfiguration>,
    /// <p> Information that is added to all events that are related to this game session queue.</p>
    #[doc(hidden)]
    pub custom_event_data: std::option::Option<std::string::String>,
    /// <p>An SNS topic ARN that is set up to receive game session placement notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html"> Setting up notifications for game session placement</a>.</p>
    #[doc(hidden)]
    pub notification_target: std::option::Option<std::string::String>,
}
impl GameSessionQueue {
    /// <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:
    /// <region>
    /// ::gamesessionqueue/
    /// <queue name></queue>
    /// </region></code>. In a GameLift game session queue ARN, the resource ID matches the <i>Name</i> value.</p>
    pub fn game_session_queue_arn(&self) -> std::option::Option<&str> {
        self.game_session_queue_arn.as_deref()
    }
    /// <p>The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.</p>
    pub fn timeout_in_seconds(&self) -> std::option::Option<i32> {
        self.timeout_in_seconds
    }
    /// <p>A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value. </p>
    pub fn player_latency_policies(
        &self,
    ) -> std::option::Option<&[crate::types::PlayerLatencyPolicy]> {
        self.player_latency_policies.as_deref()
    }
    /// <p>A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.</p>
    pub fn destinations(
        &self,
    ) -> std::option::Option<&[crate::types::GameSessionQueueDestination]> {
        self.destinations.as_deref()
    }
    /// <p>A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as <code>us-west-2</code>. If this parameter is not set, game sessions can be placed in any queue location. </p>
    pub fn filter_configuration(&self) -> std::option::Option<&crate::types::FilterConfiguration> {
        self.filter_configuration.as_ref()
    }
    /// <p>Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process. </p>
    pub fn priority_configuration(
        &self,
    ) -> std::option::Option<&crate::types::PriorityConfiguration> {
        self.priority_configuration.as_ref()
    }
    /// <p> Information that is added to all events that are related to this game session queue.</p>
    pub fn custom_event_data(&self) -> std::option::Option<&str> {
        self.custom_event_data.as_deref()
    }
    /// <p>An SNS topic ARN that is set up to receive game session placement notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html"> Setting up notifications for game session placement</a>.</p>
    pub fn notification_target(&self) -> std::option::Option<&str> {
        self.notification_target.as_deref()
    }
}
impl GameSessionQueue {
    /// Creates a new builder-style object to manufacture [`GameSessionQueue`](crate::types::GameSessionQueue).
    pub fn builder() -> crate::types::builders::GameSessionQueueBuilder {
        crate::types::builders::GameSessionQueueBuilder::default()
    }
}

/// A builder for [`GameSessionQueue`](crate::types::GameSessionQueue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GameSessionQueueBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) game_session_queue_arn: std::option::Option<std::string::String>,
    pub(crate) timeout_in_seconds: std::option::Option<i32>,
    pub(crate) player_latency_policies:
        std::option::Option<std::vec::Vec<crate::types::PlayerLatencyPolicy>>,
    pub(crate) destinations:
        std::option::Option<std::vec::Vec<crate::types::GameSessionQueueDestination>>,
    pub(crate) filter_configuration: std::option::Option<crate::types::FilterConfiguration>,
    pub(crate) priority_configuration: std::option::Option<crate::types::PriorityConfiguration>,
    pub(crate) custom_event_data: std::option::Option<std::string::String>,
    pub(crate) notification_target: std::option::Option<std::string::String>,
}
impl GameSessionQueueBuilder {
    /// <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A descriptive label that is associated with game session queue. Queue names must be unique within each Region.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:
    /// <region>
    /// ::gamesessionqueue/
    /// <queue name></queue>
    /// </region></code>. In a GameLift game session queue ARN, the resource ID matches the <i>Name</i> value.</p>
    pub fn game_session_queue_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.game_session_queue_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:
    /// <region>
    /// ::gamesessionqueue/
    /// <queue name></queue>
    /// </region></code>. In a GameLift game session queue ARN, the resource ID matches the <i>Name</i> value.</p>
    pub fn set_game_session_queue_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.game_session_queue_arn = input;
        self
    }
    /// <p>The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.</p>
    pub fn timeout_in_seconds(mut self, input: i32) -> Self {
        self.timeout_in_seconds = Some(input);
        self
    }
    /// <p>The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a <code>TIMED_OUT</code> status.</p>
    pub fn set_timeout_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout_in_seconds = input;
        self
    }
    /// Appends an item to `player_latency_policies`.
    ///
    /// To override the contents of this collection use [`set_player_latency_policies`](Self::set_player_latency_policies).
    ///
    /// <p>A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value. </p>
    pub fn player_latency_policies(mut self, input: crate::types::PlayerLatencyPolicy) -> Self {
        let mut v = self.player_latency_policies.unwrap_or_default();
        v.push(input);
        self.player_latency_policies = Some(v);
        self
    }
    /// <p>A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value. </p>
    pub fn set_player_latency_policies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PlayerLatencyPolicy>>,
    ) -> Self {
        self.player_latency_policies = input;
        self
    }
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.</p>
    pub fn destinations(mut self, input: crate::types::GameSessionQueueDestination) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input);
        self.destinations = Some(v);
        self
    }
    /// <p>A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.</p>
    pub fn set_destinations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GameSessionQueueDestination>>,
    ) -> Self {
        self.destinations = input;
        self
    }
    /// <p>A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as <code>us-west-2</code>. If this parameter is not set, game sessions can be placed in any queue location. </p>
    pub fn filter_configuration(mut self, input: crate::types::FilterConfiguration) -> Self {
        self.filter_configuration = Some(input);
        self
    }
    /// <p>A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as <code>us-west-2</code>. If this parameter is not set, game sessions can be placed in any queue location. </p>
    pub fn set_filter_configuration(
        mut self,
        input: std::option::Option<crate::types::FilterConfiguration>,
    ) -> Self {
        self.filter_configuration = input;
        self
    }
    /// <p>Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process. </p>
    pub fn priority_configuration(mut self, input: crate::types::PriorityConfiguration) -> Self {
        self.priority_configuration = Some(input);
        self
    }
    /// <p>Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process. </p>
    pub fn set_priority_configuration(
        mut self,
        input: std::option::Option<crate::types::PriorityConfiguration>,
    ) -> Self {
        self.priority_configuration = input;
        self
    }
    /// <p> Information that is added to all events that are related to this game session queue.</p>
    pub fn custom_event_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_event_data = Some(input.into());
        self
    }
    /// <p> Information that is added to all events that are related to this game session queue.</p>
    pub fn set_custom_event_data(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.custom_event_data = input;
        self
    }
    /// <p>An SNS topic ARN that is set up to receive game session placement notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html"> Setting up notifications for game session placement</a>.</p>
    pub fn notification_target(mut self, input: impl Into<std::string::String>) -> Self {
        self.notification_target = Some(input.into());
        self
    }
    /// <p>An SNS topic ARN that is set up to receive game session placement notifications. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html"> Setting up notifications for game session placement</a>.</p>
    pub fn set_notification_target(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.notification_target = input;
        self
    }
    /// Consumes the builder and constructs a [`GameSessionQueue`](crate::types::GameSessionQueue).
    pub fn build(self) -> crate::types::GameSessionQueue {
        crate::types::GameSessionQueue {
            name: self.name,
            game_session_queue_arn: self.game_session_queue_arn,
            timeout_in_seconds: self.timeout_in_seconds,
            player_latency_policies: self.player_latency_policies,
            destinations: self.destinations,
            filter_configuration: self.filter_configuration,
            priority_configuration: self.priority_configuration,
            custom_event_data: self.custom_event_data,
            notification_target: self.notification_target,
        }
    }
}
