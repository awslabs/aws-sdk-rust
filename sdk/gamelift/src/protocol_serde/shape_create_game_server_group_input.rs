// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_game_server_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_game_server_group::CreateGameServerGroupInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.game_server_group_name {
        object.key("GameServerGroupName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.role_arn {
        object.key("RoleArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.min_size {
        object.key("MinSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.max_size {
        object.key("MaxSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.launch_template {
        #[allow(unused_mut)]
        let mut object_6 = object.key("LaunchTemplate").start_object();
        crate::protocol_serde::shape_launch_template_specification::ser_launch_template_specification(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.instance_definitions {
        let mut array_8 = object.key("InstanceDefinitions").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_instance_definition::ser_instance_definition(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.auto_scaling_policy {
        #[allow(unused_mut)]
        let mut object_12 = object.key("AutoScalingPolicy").start_object();
        crate::protocol_serde::shape_game_server_group_auto_scaling_policy::ser_game_server_group_auto_scaling_policy(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.balancing_strategy {
        object.key("BalancingStrategy").string(var_13.as_str());
    }
    if let Some(var_14) = &input.game_server_protection_policy {
        object
            .key("GameServerProtectionPolicy")
            .string(var_14.as_str());
    }
    if let Some(var_15) = &input.vpc_subnets {
        let mut array_16 = object.key("VpcSubnets").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.tags {
        let mut array_19 = object.key("Tags").start_array();
        for item_20 in var_18 {
            {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    Ok(())
}
