// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_fleet::CreateFleetInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.build_id {
        object.key("BuildId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.script_id {
        object.key("ScriptId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.server_launch_path {
        object.key("ServerLaunchPath").string(var_5.as_str());
    }
    if let Some(var_6) = &input.server_launch_parameters {
        object.key("ServerLaunchParameters").string(var_6.as_str());
    }
    if let Some(var_7) = &input.log_paths {
        let mut array_8 = object.key("LogPaths").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.ec2_instance_type {
        object.key("EC2InstanceType").string(var_10.as_str());
    }
    if let Some(var_11) = &input.ec2_inbound_permissions {
        let mut array_12 = object.key("EC2InboundPermissions").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_ip_permission::ser_ip_permission(
                    &mut object_14,
                    item_13,
                )?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.new_game_session_protection_policy {
        object
            .key("NewGameSessionProtectionPolicy")
            .string(var_15.as_str());
    }
    if let Some(var_16) = &input.runtime_configuration {
        #[allow(unused_mut)]
        let mut object_17 = object.key("RuntimeConfiguration").start_object();
        crate::protocol_serde::shape_runtime_configuration::ser_runtime_configuration(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if let Some(var_18) = &input.resource_creation_limit_policy {
        #[allow(unused_mut)]
        let mut object_19 = object.key("ResourceCreationLimitPolicy").start_object();
        crate::protocol_serde::shape_resource_creation_limit_policy::ser_resource_creation_limit_policy(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.metric_groups {
        let mut array_21 = object.key("MetricGroups").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.peer_vpc_aws_account_id {
        object.key("PeerVpcAwsAccountId").string(var_23.as_str());
    }
    if let Some(var_24) = &input.peer_vpc_id {
        object.key("PeerVpcId").string(var_24.as_str());
    }
    if let Some(var_25) = &input.fleet_type {
        object.key("FleetType").string(var_25.as_str());
    }
    if let Some(var_26) = &input.instance_role_arn {
        object.key("InstanceRoleArn").string(var_26.as_str());
    }
    if let Some(var_27) = &input.certificate_configuration {
        #[allow(unused_mut)]
        let mut object_28 = object.key("CertificateConfiguration").start_object();
        crate::protocol_serde::shape_certificate_configuration::ser_certificate_configuration(
            &mut object_28,
            var_27,
        )?;
        object_28.finish();
    }
    if let Some(var_29) = &input.locations {
        let mut array_30 = object.key("Locations").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_location_configuration::ser_location_configuration(
                    &mut object_32,
                    item_31,
                )?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.tags {
        let mut array_34 = object.key("Tags").start_array();
        for item_35 in var_33 {
            {
                #[allow(unused_mut)]
                let mut object_36 = array_34.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_36, item_35)?;
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.compute_type {
        object.key("ComputeType").string(var_37.as_str());
    }
    if let Some(var_38) = &input.anywhere_configuration {
        #[allow(unused_mut)]
        let mut object_39 = object.key("AnywhereConfiguration").start_object();
        crate::protocol_serde::shape_anywhere_configuration::ser_anywhere_configuration(
            &mut object_39,
            var_38,
        )?;
        object_39.finish();
    }
    Ok(())
}
