// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_support_container_definition<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::SupportContainerDefinition>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SupportContainerDefinitionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ContainerName" => {
                            builder = builder.set_container_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DependsOn" => {
                            builder = builder.set_depends_on(crate::protocol_serde::shape_container_dependency_list::de_container_dependency_list(
                                tokens,
                            )?);
                        }
                        "MountPoints" => {
                            builder = builder.set_mount_points(
                                crate::protocol_serde::shape_container_mount_point_list::de_container_mount_point_list(tokens)?,
                            );
                        }
                        "EnvironmentOverride" => {
                            builder = builder.set_environment_override(
                                crate::protocol_serde::shape_container_environment_list::de_container_environment_list(tokens)?,
                            );
                        }
                        "Essential" => {
                            builder = builder.set_essential(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "HealthCheck" => {
                            builder =
                                builder.set_health_check(crate::protocol_serde::shape_container_health_check::de_container_health_check(tokens)?);
                        }
                        "ImageUri" => {
                            builder = builder.set_image_uri(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MemoryHardLimitMebibytes" => {
                            builder = builder.set_memory_hard_limit_mebibytes(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "PortConfiguration" => {
                            builder = builder.set_port_configuration(
                                crate::protocol_serde::shape_container_port_configuration::de_container_port_configuration(tokens)?,
                            );
                        }
                        "ResolvedImageDigest" => {
                            builder = builder.set_resolved_image_digest(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Vcpu" => {
                            builder = builder
                                .set_vcpu(::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()));
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
