// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_scaling_policy::PutScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.fleet_id {
        object.key("FleetId").string(var_2.as_str());
    }
    if input.scaling_adjustment != 0 {
        object.key("ScalingAdjustment").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.scaling_adjustment).into()),
        );
    }
    if let Some(var_3) = &input.scaling_adjustment_type {
        object.key("ScalingAdjustmentType").string(var_3.as_str());
    }
    if input.threshold != 0.0 {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.threshold).into()),
        );
    }
    if let Some(var_4) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_4.as_str());
    }
    if let Some(var_5) = &input.evaluation_periods {
        object.key("EvaluationPeriods").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.metric_name {
        object.key("MetricName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.policy_type {
        object.key("PolicyType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.target_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("TargetConfiguration").start_object();
        crate::protocol_serde::shape_target_configuration::ser_target_configuration(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    Ok(())
}
