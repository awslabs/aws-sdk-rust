// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_game_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_game_session::CreateGameSessionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.fleet_id {
        object.key("FleetId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.alias_id {
        object.key("AliasId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.maximum_player_session_count {
        object.key("MaximumPlayerSessionCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.name {
        object.key("Name").string(var_4.as_str());
    }
    if let Some(var_5) = &input.game_properties {
        let mut array_6 = object.key("GameProperties").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_game_property::ser_game_property(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.creator_id {
        object.key("CreatorId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.game_session_id {
        object.key("GameSessionId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_11.as_str());
    }
    if let Some(var_12) = &input.game_session_data {
        object.key("GameSessionData").string(var_12.as_str());
    }
    if let Some(var_13) = &input.location {
        object.key("Location").string(var_13.as_str());
    }
    Ok(())
}
