// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_game_session_queue_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_game_session_queue::UpdateGameSessionQueueInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.timeout_in_seconds {
        object.key("TimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.player_latency_policies {
        let mut array_4 = object.key("PlayerLatencyPolicies").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_player_latency_policy::ser_player_latency_policy(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.destinations {
        let mut array_8 = object.key("Destinations").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_game_session_queue_destination::ser_game_session_queue_destination(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.filter_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("FilterConfiguration").start_object();
        crate::protocol_serde::shape_filter_configuration::ser_filter_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.priority_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("PriorityConfiguration").start_object();
        crate::protocol_serde::shape_priority_configuration::ser_priority_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.custom_event_data {
        object.key("CustomEventData").string(var_15.as_str());
    }
    if let Some(var_16) = &input.notification_target {
        object.key("NotificationTarget").string(var_16.as_str());
    }
    Ok(())
}
