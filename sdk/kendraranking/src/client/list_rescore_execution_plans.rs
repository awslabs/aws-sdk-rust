// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListRescoreExecutionPlans`](crate::client::fluent_builders::ListRescoreExecutionPlans) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListRescoreExecutionPlans::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListRescoreExecutionPlans::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListRescoreExecutionPlans::set_next_token): <p>If the response is truncated, Amazon Kendra Intelligent Ranking returns a pagination token in the response. You can use this pagination token to retrieve the next set of rescore execution plans.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListRescoreExecutionPlans::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListRescoreExecutionPlans::set_max_results): <p>The maximum number of rescore execution plans to return.</p>
    /// - On success, responds with [`ListRescoreExecutionPlansOutput`](crate::output::ListRescoreExecutionPlansOutput) with field(s):
    ///   - [`summary_items(Option<Vec<RescoreExecutionPlanSummary>>)`](crate::output::ListRescoreExecutionPlansOutput::summary_items): <p>An array of summary information for one or more rescore execution plans.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListRescoreExecutionPlansOutput::next_token): <p>If the response is truncated, Amazon Kendra Intelligent Ranking returns a pagination token in the response.</p>
    /// - On failure, responds with [`SdkError<ListRescoreExecutionPlansError>`](crate::error::ListRescoreExecutionPlansError)
    pub fn list_rescore_execution_plans(
        &self,
    ) -> crate::client::fluent_builders::ListRescoreExecutionPlans {
        crate::client::fluent_builders::ListRescoreExecutionPlans::new(self.handle.clone())
    }
}
