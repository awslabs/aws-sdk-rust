// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RescoreInput {
    /// <p>The identifier of the rescore execution plan. A rescore execution plan is an Amazon Kendra Intelligent Ranking resource used for provisioning the <code>Rescore</code> API.</p>
    #[doc(hidden)]
    pub rescore_execution_plan_id: std::option::Option<std::string::String>,
    /// <p>The input query from the search service.</p>
    #[doc(hidden)]
    pub search_query: std::option::Option<std::string::String>,
    /// <p>The list of documents for Amazon Kendra Intelligent Ranking to rescore or rank on.</p>
    #[doc(hidden)]
    pub documents: std::option::Option<std::vec::Vec<crate::types::Document>>,
}
impl RescoreInput {
    /// <p>The identifier of the rescore execution plan. A rescore execution plan is an Amazon Kendra Intelligent Ranking resource used for provisioning the <code>Rescore</code> API.</p>
    pub fn rescore_execution_plan_id(&self) -> std::option::Option<&str> {
        self.rescore_execution_plan_id.as_deref()
    }
    /// <p>The input query from the search service.</p>
    pub fn search_query(&self) -> std::option::Option<&str> {
        self.search_query.as_deref()
    }
    /// <p>The list of documents for Amazon Kendra Intelligent Ranking to rescore or rank on.</p>
    pub fn documents(&self) -> std::option::Option<&[crate::types::Document]> {
        self.documents.as_deref()
    }
}
impl RescoreInput {
    /// Creates a new builder-style object to manufacture [`RescoreInput`](crate::operation::rescore::RescoreInput).
    pub fn builder() -> crate::operation::rescore::builders::RescoreInputBuilder {
        crate::operation::rescore::builders::RescoreInputBuilder::default()
    }
}

/// A builder for [`RescoreInput`](crate::operation::rescore::RescoreInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RescoreInputBuilder {
    pub(crate) rescore_execution_plan_id: std::option::Option<std::string::String>,
    pub(crate) search_query: std::option::Option<std::string::String>,
    pub(crate) documents: std::option::Option<std::vec::Vec<crate::types::Document>>,
}
impl RescoreInputBuilder {
    /// <p>The identifier of the rescore execution plan. A rescore execution plan is an Amazon Kendra Intelligent Ranking resource used for provisioning the <code>Rescore</code> API.</p>
    pub fn rescore_execution_plan_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rescore_execution_plan_id = Some(input.into());
        self
    }
    /// <p>The identifier of the rescore execution plan. A rescore execution plan is an Amazon Kendra Intelligent Ranking resource used for provisioning the <code>Rescore</code> API.</p>
    pub fn set_rescore_execution_plan_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.rescore_execution_plan_id = input;
        self
    }
    /// <p>The input query from the search service.</p>
    pub fn search_query(mut self, input: impl Into<std::string::String>) -> Self {
        self.search_query = Some(input.into());
        self
    }
    /// <p>The input query from the search service.</p>
    pub fn set_search_query(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.search_query = input;
        self
    }
    /// Appends an item to `documents`.
    ///
    /// To override the contents of this collection use [`set_documents`](Self::set_documents).
    ///
    /// <p>The list of documents for Amazon Kendra Intelligent Ranking to rescore or rank on.</p>
    pub fn documents(mut self, input: crate::types::Document) -> Self {
        let mut v = self.documents.unwrap_or_default();
        v.push(input);
        self.documents = Some(v);
        self
    }
    /// <p>The list of documents for Amazon Kendra Intelligent Ranking to rescore or rank on.</p>
    pub fn set_documents(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Document>>,
    ) -> Self {
        self.documents = input;
        self
    }
    /// Consumes the builder and constructs a [`RescoreInput`](crate::operation::rescore::RescoreInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::rescore::RescoreInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::rescore::RescoreInput {
            rescore_execution_plan_id: self.rescore_execution_plan_id,
            search_query: self.search_query,
            documents: self.documents,
        })
    }
}
