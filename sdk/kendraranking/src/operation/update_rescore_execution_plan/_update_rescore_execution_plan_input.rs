// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateRescoreExecutionPlanInput {
    /// <p>The identifier of the rescore execution plan that you want to update.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>A new name for the rescore execution plan.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A new description for the rescore execution plan.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>You can set additional capacity units to meet the needs of your rescore execution plan. You are given a single capacity unit by default. If you want to use the default capacity, you don't set additional capacity units. For more information on the default capacity and additional capacity units, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/adjusting-capacity.html">Adjusting capacity</a>.</p>
    pub capacity_units: ::std::option::Option<crate::types::CapacityUnitsConfiguration>,
}
impl UpdateRescoreExecutionPlanInput {
    /// <p>The identifier of the rescore execution plan that you want to update.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A new name for the rescore execution plan.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A new description for the rescore execution plan.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>You can set additional capacity units to meet the needs of your rescore execution plan. You are given a single capacity unit by default. If you want to use the default capacity, you don't set additional capacity units. For more information on the default capacity and additional capacity units, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/adjusting-capacity.html">Adjusting capacity</a>.</p>
    pub fn capacity_units(&self) -> ::std::option::Option<&crate::types::CapacityUnitsConfiguration> {
        self.capacity_units.as_ref()
    }
}
impl UpdateRescoreExecutionPlanInput {
    /// Creates a new builder-style object to manufacture [`UpdateRescoreExecutionPlanInput`](crate::operation::update_rescore_execution_plan::UpdateRescoreExecutionPlanInput).
    pub fn builder() -> crate::operation::update_rescore_execution_plan::builders::UpdateRescoreExecutionPlanInputBuilder {
        crate::operation::update_rescore_execution_plan::builders::UpdateRescoreExecutionPlanInputBuilder::default()
    }
}

/// A builder for [`UpdateRescoreExecutionPlanInput`](crate::operation::update_rescore_execution_plan::UpdateRescoreExecutionPlanInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateRescoreExecutionPlanInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) capacity_units: ::std::option::Option<crate::types::CapacityUnitsConfiguration>,
}
impl UpdateRescoreExecutionPlanInputBuilder {
    /// <p>The identifier of the rescore execution plan that you want to update.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the rescore execution plan that you want to update.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the rescore execution plan that you want to update.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A new name for the rescore execution plan.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new name for the rescore execution plan.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A new name for the rescore execution plan.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A new description for the rescore execution plan.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new description for the rescore execution plan.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A new description for the rescore execution plan.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>You can set additional capacity units to meet the needs of your rescore execution plan. You are given a single capacity unit by default. If you want to use the default capacity, you don't set additional capacity units. For more information on the default capacity and additional capacity units, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/adjusting-capacity.html">Adjusting capacity</a>.</p>
    pub fn capacity_units(mut self, input: crate::types::CapacityUnitsConfiguration) -> Self {
        self.capacity_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>You can set additional capacity units to meet the needs of your rescore execution plan. You are given a single capacity unit by default. If you want to use the default capacity, you don't set additional capacity units. For more information on the default capacity and additional capacity units, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/adjusting-capacity.html">Adjusting capacity</a>.</p>
    pub fn set_capacity_units(mut self, input: ::std::option::Option<crate::types::CapacityUnitsConfiguration>) -> Self {
        self.capacity_units = input;
        self
    }
    /// <p>You can set additional capacity units to meet the needs of your rescore execution plan. You are given a single capacity unit by default. If you want to use the default capacity, you don't set additional capacity units. For more information on the default capacity and additional capacity units, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/adjusting-capacity.html">Adjusting capacity</a>.</p>
    pub fn get_capacity_units(&self) -> &::std::option::Option<crate::types::CapacityUnitsConfiguration> {
        &self.capacity_units
    }
    /// Consumes the builder and constructs a [`UpdateRescoreExecutionPlanInput`](crate::operation::update_rescore_execution_plan::UpdateRescoreExecutionPlanInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_rescore_execution_plan::UpdateRescoreExecutionPlanInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_rescore_execution_plan::UpdateRescoreExecutionPlanInput {
            id: self.id,
            name: self.name,
            description: self.description,
            capacity_units: self.capacity_units,
        })
    }
}
