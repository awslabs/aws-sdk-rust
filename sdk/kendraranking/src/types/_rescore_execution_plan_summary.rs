// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information for a rescore execution plan. A rescore execution plan is an Amazon Kendra Intelligent Ranking resource used for provisioning the <code>Rescore</code> API.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RescoreExecutionPlanSummary {
    /// <p>The name of the rescore execution plan.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The identifier of the rescore execution plan.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Unix timestamp when the rescore execution plan was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Unix timestamp when the rescore execution plan was last updated.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current status of the rescore execution plan. When the value is <code>ACTIVE</code>, the rescore execution plan is ready for use.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::RescoreExecutionPlanStatus>,
}
impl RescoreExecutionPlanSummary {
    /// <p>The name of the rescore execution plan.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The identifier of the rescore execution plan.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Unix timestamp when the rescore execution plan was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Unix timestamp when the rescore execution plan was last updated.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The current status of the rescore execution plan. When the value is <code>ACTIVE</code>, the rescore execution plan is ready for use.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::RescoreExecutionPlanStatus> {
        self.status.as_ref()
    }
}
impl RescoreExecutionPlanSummary {
    /// Creates a new builder-style object to manufacture [`RescoreExecutionPlanSummary`](crate::types::RescoreExecutionPlanSummary).
    pub fn builder() -> crate::types::builders::RescoreExecutionPlanSummaryBuilder {
        crate::types::builders::RescoreExecutionPlanSummaryBuilder::default()
    }
}

/// A builder for [`RescoreExecutionPlanSummary`](crate::types::RescoreExecutionPlanSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RescoreExecutionPlanSummaryBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::RescoreExecutionPlanStatus>,
}
impl RescoreExecutionPlanSummaryBuilder {
    /// <p>The name of the rescore execution plan.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the rescore execution plan.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The identifier of the rescore execution plan.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the rescore execution plan.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Unix timestamp when the rescore execution plan was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The Unix timestamp when the rescore execution plan was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Unix timestamp when the rescore execution plan was last updated.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The Unix timestamp when the rescore execution plan was last updated.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The current status of the rescore execution plan. When the value is <code>ACTIVE</code>, the rescore execution plan is ready for use.</p>
    pub fn status(mut self, input: crate::types::RescoreExecutionPlanStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the rescore execution plan. When the value is <code>ACTIVE</code>, the rescore execution plan is ready for use.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::RescoreExecutionPlanStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`RescoreExecutionPlanSummary`](crate::types::RescoreExecutionPlanSummary).
    pub fn build(self) -> crate::types::RescoreExecutionPlanSummary {
        crate::types::RescoreExecutionPlanSummary {
            name: self.name,
            id: self.id,
            created_at: self.created_at,
            updated_at: self.updated_at,
            status: self.status,
        }
    }
}
