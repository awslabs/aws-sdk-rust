// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient permissions to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The flow has not been published.</p>
    ContactFlowNotPublishedException(crate::error::ContactFlowNotPublishedException),
    /// <p>The contact with the specified ID is not active or does not exist. Applies to Voice calls only, not to Chat, Task, or Voice Callback.</p>
    ContactNotFoundException(crate::error::ContactNotFoundException),
    /// <p>Outbound calls to the destination number are not allowed.</p>
    DestinationNotAllowedException(crate::error::DestinationNotAllowedException),
    /// <p>A resource with the specified name already exists.</p>
    DuplicateResourceException(crate::error::DuplicateResourceException),
    /// <p>An entity with the same name already exists.</p>
    IdempotencyException(crate::error::IdempotencyException),
    /// <p>Request processing failed because of an error or failure with the service.</p>
    InternalServiceException(crate::error::InternalServiceException),
    /// <p>The flow is not valid.</p>
    InvalidContactFlowException(crate::error::InvalidContactFlowException),
    /// <p>The problems with the module. Please fix before trying again.</p>
    InvalidContactFlowModuleException(crate::error::InvalidContactFlowModuleException),
    /// <p>One or more of the specified parameters are not valid.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>The request is not valid.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The allowed limit for the resource has been exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The contact is not permitted.</p>
    OutboundContactNotPermittedException(crate::error::OutboundContactNotPermittedException),
    /// <p>The property is not valid.</p>
    PropertyValidationException(crate::error::PropertyValidationException),
    /// <p>A resource already has that name.</p>
    ResourceConflictException(crate::error::ResourceConflictException),
    /// <p>That resource is already in use. Please try another.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>The specified resource was not found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The resource is not ready.</p>
    ResourceNotReadyException(crate::error::ResourceNotReadyException),
    /// <p>The service quota has been exceeded.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The throttling limit has been exceeded.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>No user with the specified credentials was found in the Amazon Connect instance.</p>
    UserNotFoundException(crate::error::UserNotFoundException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ContactFlowNotPublishedException(inner) => inner.fmt(f),
            Error::ContactNotFoundException(inner) => inner.fmt(f),
            Error::DestinationNotAllowedException(inner) => inner.fmt(f),
            Error::DuplicateResourceException(inner) => inner.fmt(f),
            Error::IdempotencyException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::InvalidContactFlowException(inner) => inner.fmt(f),
            Error::InvalidContactFlowModuleException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::OutboundContactNotPermittedException(inner) => inner.fmt(f),
            Error::PropertyValidationException(inner) => inner.fmt(f),
            Error::ResourceConflictException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceNotReadyException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UserNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateApprovedOriginError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateApprovedOriginError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateApprovedOriginError> for Error {
    fn from(err: crate::error::AssociateApprovedOriginError) -> Self {
        match err {
            crate::error::AssociateApprovedOriginError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AssociateApprovedOriginError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AssociateApprovedOriginError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AssociateApprovedOriginError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::AssociateApprovedOriginError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateApprovedOriginError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::AssociateApprovedOriginError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateApprovedOriginError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AssociateBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateBotError> for Error {
    fn from(err: crate::error::AssociateBotError) -> Self {
        match err {
            crate::error::AssociateBotError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AssociateBotError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AssociateBotError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AssociateBotError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::AssociateBotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateBotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::AssociateBotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateDefaultVocabularyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateDefaultVocabularyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateDefaultVocabularyError> for Error {
    fn from(err: crate::error::AssociateDefaultVocabularyError) -> Self {
        match err {
            crate::error::AssociateDefaultVocabularyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociateDefaultVocabularyError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AssociateDefaultVocabularyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AssociateDefaultVocabularyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateDefaultVocabularyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateDefaultVocabularyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AssociateInstanceStorageConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociateInstanceStorageConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateInstanceStorageConfigError> for Error {
    fn from(err: crate::error::AssociateInstanceStorageConfigError) -> Self {
        match err {
            crate::error::AssociateInstanceStorageConfigError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AssociateInstanceStorageConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AssociateInstanceStorageConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AssociateInstanceStorageConfigError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::AssociateInstanceStorageConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateInstanceStorageConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateInstanceStorageConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateLambdaFunctionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateLambdaFunctionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateLambdaFunctionError> for Error {
    fn from(err: crate::error::AssociateLambdaFunctionError) -> Self {
        match err {
            crate::error::AssociateLambdaFunctionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AssociateLambdaFunctionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AssociateLambdaFunctionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AssociateLambdaFunctionError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::AssociateLambdaFunctionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateLambdaFunctionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::AssociateLambdaFunctionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateLambdaFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateLexBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AssociateLexBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateLexBotError> for Error {
    fn from(err: crate::error::AssociateLexBotError) -> Self {
        match err {
            crate::error::AssociateLexBotError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AssociateLexBotError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AssociateLexBotError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AssociateLexBotError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::AssociateLexBotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateLexBotError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::AssociateLexBotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateLexBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AssociatePhoneNumberContactFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociatePhoneNumberContactFlowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociatePhoneNumberContactFlowError> for Error {
    fn from(err: crate::error::AssociatePhoneNumberContactFlowError) -> Self {
        match err {
            crate::error::AssociatePhoneNumberContactFlowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociatePhoneNumberContactFlowError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AssociatePhoneNumberContactFlowError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::AssociatePhoneNumberContactFlowError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::AssociatePhoneNumberContactFlowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociatePhoneNumberContactFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateQueueQuickConnectsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateQueueQuickConnectsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateQueueQuickConnectsError> for Error {
    fn from(err: crate::error::AssociateQueueQuickConnectsError) -> Self {
        match err {
            crate::error::AssociateQueueQuickConnectsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AssociateQueueQuickConnectsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AssociateQueueQuickConnectsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AssociateQueueQuickConnectsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AssociateQueueQuickConnectsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateQueueQuickConnectsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateQueueQuickConnectsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateRoutingProfileQueuesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateRoutingProfileQueuesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateRoutingProfileQueuesError> for Error {
    fn from(err: crate::error::AssociateRoutingProfileQueuesError) -> Self {
        match err {
            crate::error::AssociateRoutingProfileQueuesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AssociateRoutingProfileQueuesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AssociateRoutingProfileQueuesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AssociateRoutingProfileQueuesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateRoutingProfileQueuesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateRoutingProfileQueuesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateSecurityKeyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateSecurityKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateSecurityKeyError> for Error {
    fn from(err: crate::error::AssociateSecurityKeyError) -> Self {
        match err {
            crate::error::AssociateSecurityKeyError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AssociateSecurityKeyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AssociateSecurityKeyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AssociateSecurityKeyError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::AssociateSecurityKeyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateSecurityKeyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::AssociateSecurityKeyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateSecurityKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ClaimPhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ClaimPhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ClaimPhoneNumberError> for Error {
    fn from(err: crate::error::ClaimPhoneNumberError) -> Self {
        match err {
            crate::error::ClaimPhoneNumberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ClaimPhoneNumberError::IdempotencyException(inner) => {
                Error::IdempotencyException(inner)
            }
            crate::error::ClaimPhoneNumberError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ClaimPhoneNumberError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ClaimPhoneNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ClaimPhoneNumberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ClaimPhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAgentStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAgentStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAgentStatusError> for Error {
    fn from(err: crate::error::CreateAgentStatusError) -> Self {
        match err {
            crate::error::CreateAgentStatusError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::CreateAgentStatusError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateAgentStatusError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateAgentStatusError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateAgentStatusError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateAgentStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateAgentStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateAgentStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateContactFlowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateContactFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateContactFlowError> for Error {
    fn from(err: crate::error::CreateContactFlowError) -> Self {
        match err {
            crate::error::CreateContactFlowError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::CreateContactFlowError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateContactFlowError::InvalidContactFlowException(inner) => {
                Error::InvalidContactFlowException(inner)
            }
            crate::error::CreateContactFlowError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateContactFlowError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateContactFlowError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateContactFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateContactFlowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateContactFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateContactFlowModuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateContactFlowModuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateContactFlowModuleError> for Error {
    fn from(err: crate::error::CreateContactFlowModuleError) -> Self {
        match err {
            crate::error::CreateContactFlowModuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateContactFlowModuleError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::CreateContactFlowModuleError::IdempotencyException(inner) => {
                Error::IdempotencyException(inner)
            }
            crate::error::CreateContactFlowModuleError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateContactFlowModuleError::InvalidContactFlowModuleException(
                inner,
            ) => Error::InvalidContactFlowModuleException(inner),
            crate::error::CreateContactFlowModuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateContactFlowModuleError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateContactFlowModuleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateContactFlowModuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateContactFlowModuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateContactFlowModuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateHoursOfOperationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateHoursOfOperationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateHoursOfOperationError> for Error {
    fn from(err: crate::error::CreateHoursOfOperationError) -> Self {
        match err {
            crate::error::CreateHoursOfOperationError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::CreateHoursOfOperationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateHoursOfOperationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateHoursOfOperationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateHoursOfOperationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateHoursOfOperationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateHoursOfOperationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateHoursOfOperationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateInstanceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateInstanceError> for Error {
    fn from(err: crate::error::CreateInstanceError) -> Self {
        match err {
            crate::error::CreateInstanceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateInstanceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateInstanceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateInstanceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateInstanceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateIntegrationAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateIntegrationAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateIntegrationAssociationError> for Error {
    fn from(err: crate::error::CreateIntegrationAssociationError) -> Self {
        match err {
            crate::error::CreateIntegrationAssociationError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::CreateIntegrationAssociationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateIntegrationAssociationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateIntegrationAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateIntegrationAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateIntegrationAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateQueueError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateQueueError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateQueueError> for Error {
    fn from(err: crate::error::CreateQueueError) -> Self {
        match err {
            crate::error::CreateQueueError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::CreateQueueError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateQueueError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateQueueError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateQueueError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateQueueError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateQueueError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateQuickConnectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateQuickConnectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateQuickConnectError> for Error {
    fn from(err: crate::error::CreateQuickConnectError) -> Self {
        match err {
            crate::error::CreateQuickConnectError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::CreateQuickConnectError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateQuickConnectError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateQuickConnectError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateQuickConnectError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateQuickConnectError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateQuickConnectError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateQuickConnectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRoutingProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRoutingProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRoutingProfileError> for Error {
    fn from(err: crate::error::CreateRoutingProfileError) -> Self {
        match err {
            crate::error::CreateRoutingProfileError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::CreateRoutingProfileError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateRoutingProfileError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateRoutingProfileError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateRoutingProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateRoutingProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateRoutingProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateRoutingProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRuleError> for Error {
    fn from(err: crate::error::CreateRuleError) -> Self {
        match err {
            crate::error::CreateRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateRuleError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateRuleError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateRuleError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::CreateRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateRuleError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSecurityProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSecurityProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSecurityProfileError> for Error {
    fn from(err: crate::error::CreateSecurityProfileError) -> Self {
        match err {
            crate::error::CreateSecurityProfileError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::CreateSecurityProfileError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateSecurityProfileError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateSecurityProfileError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateSecurityProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateSecurityProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateSecurityProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateSecurityProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTaskTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateTaskTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTaskTemplateError> for Error {
    fn from(err: crate::error::CreateTaskTemplateError) -> Self {
        match err {
            crate::error::CreateTaskTemplateError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateTaskTemplateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateTaskTemplateError::PropertyValidationException(inner) => {
                Error::PropertyValidationException(inner)
            }
            crate::error::CreateTaskTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateTaskTemplateError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateTaskTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateTaskTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateTrafficDistributionGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateTrafficDistributionGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTrafficDistributionGroupError> for Error {
    fn from(err: crate::error::CreateTrafficDistributionGroupError) -> Self {
        match err {
            crate::error::CreateTrafficDistributionGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateTrafficDistributionGroupError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateTrafficDistributionGroupError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateTrafficDistributionGroupError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::CreateTrafficDistributionGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateTrafficDistributionGroupError::ResourceNotReadyException(inner) => {
                Error::ResourceNotReadyException(inner)
            }
            crate::error::CreateTrafficDistributionGroupError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateTrafficDistributionGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateTrafficDistributionGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUseCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUseCaseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUseCaseError> for Error {
    fn from(err: crate::error::CreateUseCaseError) -> Self {
        match err {
            crate::error::CreateUseCaseError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::CreateUseCaseError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateUseCaseError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateUseCaseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateUseCaseError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateUseCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserError> for Error {
    fn from(err: crate::error::CreateUserError) -> Self {
        match err {
            crate::error::CreateUserError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::CreateUserError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateUserError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateUserError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateUserError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserHierarchyGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateUserHierarchyGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserHierarchyGroupError> for Error {
    fn from(err: crate::error::CreateUserHierarchyGroupError) -> Self {
        match err {
            crate::error::CreateUserHierarchyGroupError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::CreateUserHierarchyGroupError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateUserHierarchyGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateUserHierarchyGroupError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateUserHierarchyGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateUserHierarchyGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateUserHierarchyGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateUserHierarchyGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVocabularyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVocabularyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVocabularyError> for Error {
    fn from(err: crate::error::CreateVocabularyError) -> Self {
        match err {
            crate::error::CreateVocabularyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateVocabularyError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateVocabularyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateVocabularyError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::CreateVocabularyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateVocabularyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateVocabularyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateVocabularyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteContactFlowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteContactFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteContactFlowError> for Error {
    fn from(err: crate::error::DeleteContactFlowError) -> Self {
        match err {
            crate::error::DeleteContactFlowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteContactFlowError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteContactFlowError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteContactFlowError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteContactFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteContactFlowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteContactFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteContactFlowModuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteContactFlowModuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteContactFlowModuleError> for Error {
    fn from(err: crate::error::DeleteContactFlowModuleError) -> Self {
        match err {
            crate::error::DeleteContactFlowModuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteContactFlowModuleError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteContactFlowModuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteContactFlowModuleError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteContactFlowModuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteContactFlowModuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteContactFlowModuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteHoursOfOperationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteHoursOfOperationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteHoursOfOperationError> for Error {
    fn from(err: crate::error::DeleteHoursOfOperationError) -> Self {
        match err {
            crate::error::DeleteHoursOfOperationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteHoursOfOperationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteHoursOfOperationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteHoursOfOperationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteHoursOfOperationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteHoursOfOperationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteInstanceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInstanceError> for Error {
    fn from(err: crate::error::DeleteInstanceError) -> Self {
        match err {
            crate::error::DeleteInstanceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteInstanceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteInstanceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIntegrationAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteIntegrationAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteIntegrationAssociationError> for Error {
    fn from(err: crate::error::DeleteIntegrationAssociationError) -> Self {
        match err {
            crate::error::DeleteIntegrationAssociationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteIntegrationAssociationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteIntegrationAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteIntegrationAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteIntegrationAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteQuickConnectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteQuickConnectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteQuickConnectError> for Error {
    fn from(err: crate::error::DeleteQuickConnectError) -> Self {
        match err {
            crate::error::DeleteQuickConnectError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteQuickConnectError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteQuickConnectError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteQuickConnectError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteQuickConnectError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteQuickConnectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRuleError> for Error {
    fn from(err: crate::error::DeleteRuleError) -> Self {
        match err {
            crate::error::DeleteRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteRuleError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteRuleError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSecurityProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSecurityProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSecurityProfileError> for Error {
    fn from(err: crate::error::DeleteSecurityProfileError) -> Self {
        match err {
            crate::error::DeleteSecurityProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteSecurityProfileError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteSecurityProfileError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteSecurityProfileError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteSecurityProfileError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteSecurityProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteSecurityProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteSecurityProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTaskTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteTaskTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTaskTemplateError> for Error {
    fn from(err: crate::error::DeleteTaskTemplateError) -> Self {
        match err {
            crate::error::DeleteTaskTemplateError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteTaskTemplateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteTaskTemplateError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteTaskTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteTaskTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteTaskTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteTrafficDistributionGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteTrafficDistributionGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTrafficDistributionGroupError> for Error {
    fn from(err: crate::error::DeleteTrafficDistributionGroupError) -> Self {
        match err {
            crate::error::DeleteTrafficDistributionGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteTrafficDistributionGroupError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteTrafficDistributionGroupError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteTrafficDistributionGroupError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteTrafficDistributionGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteTrafficDistributionGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUseCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUseCaseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUseCaseError> for Error {
    fn from(err: crate::error::DeleteUseCaseError) -> Self {
        match err {
            crate::error::DeleteUseCaseError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteUseCaseError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteUseCaseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteUseCaseError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteUseCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserError> for Error {
    fn from(err: crate::error::DeleteUserError) -> Self {
        match err {
            crate::error::DeleteUserError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteUserError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteUserError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserHierarchyGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteUserHierarchyGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserHierarchyGroupError> for Error {
    fn from(err: crate::error::DeleteUserHierarchyGroupError) -> Self {
        match err {
            crate::error::DeleteUserHierarchyGroupError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteUserHierarchyGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteUserHierarchyGroupError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteUserHierarchyGroupError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteUserHierarchyGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteUserHierarchyGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteUserHierarchyGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVocabularyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVocabularyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVocabularyError> for Error {
    fn from(err: crate::error::DeleteVocabularyError) -> Self {
        match err {
            crate::error::DeleteVocabularyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteVocabularyError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteVocabularyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteVocabularyError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteVocabularyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteVocabularyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteVocabularyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAgentStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAgentStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAgentStatusError> for Error {
    fn from(err: crate::error::DescribeAgentStatusError) -> Self {
        match err {
            crate::error::DescribeAgentStatusError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeAgentStatusError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeAgentStatusError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeAgentStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeAgentStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeAgentStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeContactError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeContactError> for Error {
    fn from(err: crate::error::DescribeContactError) -> Self {
        match err {
            crate::error::DescribeContactError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeContactError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeContactError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeContactFlowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeContactFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeContactFlowError> for Error {
    fn from(err: crate::error::DescribeContactFlowError) -> Self {
        match err {
            crate::error::DescribeContactFlowError::ContactFlowNotPublishedException(inner) => {
                Error::ContactFlowNotPublishedException(inner)
            }
            crate::error::DescribeContactFlowError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeContactFlowError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeContactFlowError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeContactFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeContactFlowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeContactFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeContactFlowModuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeContactFlowModuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeContactFlowModuleError> for Error {
    fn from(err: crate::error::DescribeContactFlowModuleError) -> Self {
        match err {
            crate::error::DescribeContactFlowModuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeContactFlowModuleError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeContactFlowModuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeContactFlowModuleError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeContactFlowModuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeContactFlowModuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeContactFlowModuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeHoursOfOperationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeHoursOfOperationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeHoursOfOperationError> for Error {
    fn from(err: crate::error::DescribeHoursOfOperationError) -> Self {
        match err {
            crate::error::DescribeHoursOfOperationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeHoursOfOperationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeHoursOfOperationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeHoursOfOperationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeHoursOfOperationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeHoursOfOperationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInstanceError> for Error {
    fn from(err: crate::error::DescribeInstanceError) -> Self {
        match err {
            crate::error::DescribeInstanceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeInstanceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeInstanceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInstanceAttributeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInstanceAttributeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInstanceAttributeError> for Error {
    fn from(err: crate::error::DescribeInstanceAttributeError) -> Self {
        match err {
            crate::error::DescribeInstanceAttributeError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeInstanceAttributeError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeInstanceAttributeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeInstanceAttributeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeInstanceAttributeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeInstanceAttributeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInstanceStorageConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInstanceStorageConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInstanceStorageConfigError> for Error {
    fn from(err: crate::error::DescribeInstanceStorageConfigError) -> Self {
        match err {
            crate::error::DescribeInstanceStorageConfigError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeInstanceStorageConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeInstanceStorageConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeInstanceStorageConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeInstanceStorageConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeInstanceStorageConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePhoneNumberError> for Error {
    fn from(err: crate::error::DescribePhoneNumberError) -> Self {
        match err {
            crate::error::DescribePhoneNumberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribePhoneNumberError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribePhoneNumberError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribePhoneNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribePhoneNumberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeQueueError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeQueueError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeQueueError> for Error {
    fn from(err: crate::error::DescribeQueueError) -> Self {
        match err {
            crate::error::DescribeQueueError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeQueueError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeQueueError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeQueueError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeQueueError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeQuickConnectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeQuickConnectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeQuickConnectError> for Error {
    fn from(err: crate::error::DescribeQuickConnectError) -> Self {
        match err {
            crate::error::DescribeQuickConnectError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeQuickConnectError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeQuickConnectError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeQuickConnectError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeQuickConnectError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeQuickConnectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRoutingProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRoutingProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRoutingProfileError> for Error {
    fn from(err: crate::error::DescribeRoutingProfileError) -> Self {
        match err {
            crate::error::DescribeRoutingProfileError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeRoutingProfileError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeRoutingProfileError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeRoutingProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeRoutingProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeRoutingProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRuleError> for Error {
    fn from(err: crate::error::DescribeRuleError) -> Self {
        match err {
            crate::error::DescribeRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeRuleError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeRuleError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSecurityProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSecurityProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSecurityProfileError> for Error {
    fn from(err: crate::error::DescribeSecurityProfileError) -> Self {
        match err {
            crate::error::DescribeSecurityProfileError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeSecurityProfileError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeSecurityProfileError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeSecurityProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeSecurityProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeSecurityProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeTrafficDistributionGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeTrafficDistributionGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTrafficDistributionGroupError> for Error {
    fn from(err: crate::error::DescribeTrafficDistributionGroupError) -> Self {
        match err {
            crate::error::DescribeTrafficDistributionGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeTrafficDistributionGroupError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::error::DescribeTrafficDistributionGroupError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeTrafficDistributionGroupError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeTrafficDistributionGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeTrafficDistributionGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUserError> for Error {
    fn from(err: crate::error::DescribeUserError) -> Self {
        match err {
            crate::error::DescribeUserError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeUserError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeUserError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUserHierarchyGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeUserHierarchyGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUserHierarchyGroupError> for Error {
    fn from(err: crate::error::DescribeUserHierarchyGroupError) -> Self {
        match err {
            crate::error::DescribeUserHierarchyGroupError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeUserHierarchyGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeUserHierarchyGroupError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeUserHierarchyGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeUserHierarchyGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeUserHierarchyGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeUserHierarchyStructureError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeUserHierarchyStructureError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUserHierarchyStructureError> for Error {
    fn from(err: crate::error::DescribeUserHierarchyStructureError) -> Self {
        match err {
            crate::error::DescribeUserHierarchyStructureError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeUserHierarchyStructureError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeUserHierarchyStructureError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeUserHierarchyStructureError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeUserHierarchyStructureError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeUserHierarchyStructureError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeVocabularyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeVocabularyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeVocabularyError> for Error {
    fn from(err: crate::error::DescribeVocabularyError) -> Self {
        match err {
            crate::error::DescribeVocabularyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeVocabularyError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeVocabularyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeVocabularyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeVocabularyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeVocabularyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateApprovedOriginError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateApprovedOriginError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateApprovedOriginError> for Error {
    fn from(err: crate::error::DisassociateApprovedOriginError) -> Self {
        match err {
            crate::error::DisassociateApprovedOriginError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DisassociateApprovedOriginError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DisassociateApprovedOriginError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DisassociateApprovedOriginError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateApprovedOriginError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateApprovedOriginError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DisassociateBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateBotError> for Error {
    fn from(err: crate::error::DisassociateBotError) -> Self {
        match err {
            crate::error::DisassociateBotError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DisassociateBotError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DisassociateBotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateBotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DisassociateInstanceStorageConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateInstanceStorageConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateInstanceStorageConfigError> for Error {
    fn from(err: crate::error::DisassociateInstanceStorageConfigError) -> Self {
        match err {
            crate::error::DisassociateInstanceStorageConfigError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::error::DisassociateInstanceStorageConfigError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::DisassociateInstanceStorageConfigError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::DisassociateInstanceStorageConfigError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociateInstanceStorageConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateInstanceStorageConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateLambdaFunctionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateLambdaFunctionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateLambdaFunctionError> for Error {
    fn from(err: crate::error::DisassociateLambdaFunctionError) -> Self {
        match err {
            crate::error::DisassociateLambdaFunctionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DisassociateLambdaFunctionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DisassociateLambdaFunctionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DisassociateLambdaFunctionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateLambdaFunctionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateLambdaFunctionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateLexBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateLexBotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateLexBotError> for Error {
    fn from(err: crate::error::DisassociateLexBotError) -> Self {
        match err {
            crate::error::DisassociateLexBotError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DisassociateLexBotError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DisassociateLexBotError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DisassociateLexBotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateLexBotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateLexBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DisassociatePhoneNumberContactFlowError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociatePhoneNumberContactFlowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociatePhoneNumberContactFlowError> for Error {
    fn from(err: crate::error::DisassociatePhoneNumberContactFlowError) -> Self {
        match err {
            crate::error::DisassociatePhoneNumberContactFlowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociatePhoneNumberContactFlowError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::error::DisassociatePhoneNumberContactFlowError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::DisassociatePhoneNumberContactFlowError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociatePhoneNumberContactFlowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociatePhoneNumberContactFlowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DisassociateQueueQuickConnectsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateQueueQuickConnectsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateQueueQuickConnectsError> for Error {
    fn from(err: crate::error::DisassociateQueueQuickConnectsError) -> Self {
        match err {
            crate::error::DisassociateQueueQuickConnectsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DisassociateQueueQuickConnectsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DisassociateQueueQuickConnectsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DisassociateQueueQuickConnectsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateQueueQuickConnectsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateQueueQuickConnectsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DisassociateRoutingProfileQueuesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateRoutingProfileQueuesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateRoutingProfileQueuesError> for Error {
    fn from(err: crate::error::DisassociateRoutingProfileQueuesError) -> Self {
        match err {
            crate::error::DisassociateRoutingProfileQueuesError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::error::DisassociateRoutingProfileQueuesError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::DisassociateRoutingProfileQueuesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DisassociateRoutingProfileQueuesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociateRoutingProfileQueuesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateRoutingProfileQueuesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateSecurityKeyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateSecurityKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateSecurityKeyError> for Error {
    fn from(err: crate::error::DisassociateSecurityKeyError) -> Self {
        match err {
            crate::error::DisassociateSecurityKeyError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DisassociateSecurityKeyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DisassociateSecurityKeyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DisassociateSecurityKeyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateSecurityKeyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateSecurityKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DismissUserContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DismissUserContactError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DismissUserContactError> for Error {
    fn from(err: crate::error::DismissUserContactError) -> Self {
        match err {
            crate::error::DismissUserContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DismissUserContactError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DismissUserContactError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DismissUserContactError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DismissUserContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DismissUserContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DismissUserContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContactAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContactAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContactAttributesError> for Error {
    fn from(err: crate::error::GetContactAttributesError) -> Self {
        match err {
            crate::error::GetContactAttributesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetContactAttributesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetContactAttributesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetContactAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCurrentMetricDataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCurrentMetricDataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCurrentMetricDataError> for Error {
    fn from(err: crate::error::GetCurrentMetricDataError) -> Self {
        match err {
            crate::error::GetCurrentMetricDataError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetCurrentMetricDataError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetCurrentMetricDataError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetCurrentMetricDataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCurrentMetricDataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetCurrentMetricDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCurrentUserDataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCurrentUserDataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCurrentUserDataError> for Error {
    fn from(err: crate::error::GetCurrentUserDataError) -> Self {
        match err {
            crate::error::GetCurrentUserDataError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetCurrentUserDataError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetCurrentUserDataError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetCurrentUserDataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCurrentUserDataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetCurrentUserDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFederationTokenError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetFederationTokenError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFederationTokenError> for Error {
    fn from(err: crate::error::GetFederationTokenError) -> Self {
        match err {
            crate::error::GetFederationTokenError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::GetFederationTokenError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetFederationTokenError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetFederationTokenError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetFederationTokenError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetFederationTokenError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::GetFederationTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMetricDataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMetricDataError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMetricDataError> for Error {
    fn from(err: crate::error::GetMetricDataError) -> Self {
        match err {
            crate::error::GetMetricDataError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetMetricDataError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetMetricDataError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetMetricDataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetMetricDataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetMetricDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTaskTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTaskTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTaskTemplateError> for Error {
    fn from(err: crate::error::GetTaskTemplateError) -> Self {
        match err {
            crate::error::GetTaskTemplateError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetTaskTemplateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetTaskTemplateError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetTaskTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetTaskTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetTaskTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTrafficDistributionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetTrafficDistributionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTrafficDistributionError> for Error {
    fn from(err: crate::error::GetTrafficDistributionError) -> Self {
        match err {
            crate::error::GetTrafficDistributionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetTrafficDistributionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetTrafficDistributionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetTrafficDistributionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetTrafficDistributionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetTrafficDistributionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAgentStatusesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAgentStatusesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAgentStatusesError> for Error {
    fn from(err: crate::error::ListAgentStatusesError) -> Self {
        match err {
            crate::error::ListAgentStatusesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListAgentStatusesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListAgentStatusesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListAgentStatusesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListAgentStatusesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListAgentStatusesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListApprovedOriginsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListApprovedOriginsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListApprovedOriginsError> for Error {
    fn from(err: crate::error::ListApprovedOriginsError) -> Self {
        match err {
            crate::error::ListApprovedOriginsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListApprovedOriginsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListApprovedOriginsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListApprovedOriginsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListApprovedOriginsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListApprovedOriginsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListBotsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBotsError> for Error {
    fn from(err: crate::error::ListBotsError) -> Self {
        match err {
            crate::error::ListBotsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListBotsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListBotsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListBotsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListBotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListContactFlowModulesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListContactFlowModulesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListContactFlowModulesError> for Error {
    fn from(err: crate::error::ListContactFlowModulesError) -> Self {
        match err {
            crate::error::ListContactFlowModulesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListContactFlowModulesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListContactFlowModulesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListContactFlowModulesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListContactFlowModulesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListContactFlowModulesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListContactFlowModulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListContactFlowsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListContactFlowsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListContactFlowsError> for Error {
    fn from(err: crate::error::ListContactFlowsError) -> Self {
        match err {
            crate::error::ListContactFlowsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListContactFlowsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListContactFlowsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListContactFlowsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListContactFlowsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListContactFlowsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListContactReferencesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListContactReferencesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListContactReferencesError> for Error {
    fn from(err: crate::error::ListContactReferencesError) -> Self {
        match err {
            crate::error::ListContactReferencesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListContactReferencesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListContactReferencesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListContactReferencesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListContactReferencesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListContactReferencesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDefaultVocabulariesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDefaultVocabulariesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDefaultVocabulariesError> for Error {
    fn from(err: crate::error::ListDefaultVocabulariesError) -> Self {
        match err {
            crate::error::ListDefaultVocabulariesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDefaultVocabulariesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListDefaultVocabulariesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListDefaultVocabulariesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListDefaultVocabulariesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListHoursOfOperationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListHoursOfOperationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListHoursOfOperationsError> for Error {
    fn from(err: crate::error::ListHoursOfOperationsError) -> Self {
        match err {
            crate::error::ListHoursOfOperationsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListHoursOfOperationsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListHoursOfOperationsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListHoursOfOperationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListHoursOfOperationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListHoursOfOperationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstanceAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListInstanceAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInstanceAttributesError> for Error {
    fn from(err: crate::error::ListInstanceAttributesError) -> Self {
        match err {
            crate::error::ListInstanceAttributesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListInstanceAttributesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListInstanceAttributesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListInstanceAttributesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListInstanceAttributesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListInstanceAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListInstancesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInstancesError> for Error {
    fn from(err: crate::error::ListInstancesError) -> Self {
        match err {
            crate::error::ListInstancesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListInstancesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstanceStorageConfigsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListInstanceStorageConfigsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInstanceStorageConfigsError> for Error {
    fn from(err: crate::error::ListInstanceStorageConfigsError) -> Self {
        match err {
            crate::error::ListInstanceStorageConfigsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListInstanceStorageConfigsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListInstanceStorageConfigsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListInstanceStorageConfigsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListInstanceStorageConfigsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListInstanceStorageConfigsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListIntegrationAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListIntegrationAssociationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListIntegrationAssociationsError> for Error {
    fn from(err: crate::error::ListIntegrationAssociationsError) -> Self {
        match err {
            crate::error::ListIntegrationAssociationsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListIntegrationAssociationsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListIntegrationAssociationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListIntegrationAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListIntegrationAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLambdaFunctionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListLambdaFunctionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLambdaFunctionsError> for Error {
    fn from(err: crate::error::ListLambdaFunctionsError) -> Self {
        match err {
            crate::error::ListLambdaFunctionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListLambdaFunctionsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListLambdaFunctionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListLambdaFunctionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListLambdaFunctionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListLambdaFunctionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLexBotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListLexBotsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLexBotsError> for Error {
    fn from(err: crate::error::ListLexBotsError) -> Self {
        match err {
            crate::error::ListLexBotsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListLexBotsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListLexBotsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListLexBotsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListLexBotsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListLexBotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPhoneNumbersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPhoneNumbersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPhoneNumbersError> for Error {
    fn from(err: crate::error::ListPhoneNumbersError) -> Self {
        match err {
            crate::error::ListPhoneNumbersError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListPhoneNumbersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListPhoneNumbersError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListPhoneNumbersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListPhoneNumbersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListPhoneNumbersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPhoneNumbersV2Error, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPhoneNumbersV2Error, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPhoneNumbersV2Error> for Error {
    fn from(err: crate::error::ListPhoneNumbersV2Error) -> Self {
        match err {
            crate::error::ListPhoneNumbersV2Error::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPhoneNumbersV2Error::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListPhoneNumbersV2Error::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListPhoneNumbersV2Error::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListPhoneNumbersV2Error::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListPhoneNumbersV2Error::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPromptsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPromptsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPromptsError> for Error {
    fn from(err: crate::error::ListPromptsError) -> Self {
        match err {
            crate::error::ListPromptsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListPromptsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListPromptsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListPromptsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListPromptsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListPromptsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListQueueQuickConnectsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListQueueQuickConnectsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListQueueQuickConnectsError> for Error {
    fn from(err: crate::error::ListQueueQuickConnectsError) -> Self {
        match err {
            crate::error::ListQueueQuickConnectsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListQueueQuickConnectsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListQueueQuickConnectsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListQueueQuickConnectsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListQueueQuickConnectsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListQueueQuickConnectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListQueuesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListQueuesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListQueuesError> for Error {
    fn from(err: crate::error::ListQueuesError) -> Self {
        match err {
            crate::error::ListQueuesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListQueuesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListQueuesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListQueuesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListQueuesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListQueuesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListQuickConnectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListQuickConnectsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListQuickConnectsError> for Error {
    fn from(err: crate::error::ListQuickConnectsError) -> Self {
        match err {
            crate::error::ListQuickConnectsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListQuickConnectsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListQuickConnectsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListQuickConnectsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListQuickConnectsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListQuickConnectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRoutingProfileQueuesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRoutingProfileQueuesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRoutingProfileQueuesError> for Error {
    fn from(err: crate::error::ListRoutingProfileQueuesError) -> Self {
        match err {
            crate::error::ListRoutingProfileQueuesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListRoutingProfileQueuesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListRoutingProfileQueuesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListRoutingProfileQueuesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListRoutingProfileQueuesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListRoutingProfileQueuesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRoutingProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRoutingProfilesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRoutingProfilesError> for Error {
    fn from(err: crate::error::ListRoutingProfilesError) -> Self {
        match err {
            crate::error::ListRoutingProfilesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListRoutingProfilesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListRoutingProfilesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListRoutingProfilesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListRoutingProfilesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListRoutingProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRulesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRulesError> for Error {
    fn from(err: crate::error::ListRulesError) -> Self {
        match err {
            crate::error::ListRulesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListRulesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListRulesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListRulesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListRulesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSecurityKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSecurityKeysError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSecurityKeysError> for Error {
    fn from(err: crate::error::ListSecurityKeysError) -> Self {
        match err {
            crate::error::ListSecurityKeysError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListSecurityKeysError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListSecurityKeysError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListSecurityKeysError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListSecurityKeysError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListSecurityKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListSecurityProfilePermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListSecurityProfilePermissionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSecurityProfilePermissionsError> for Error {
    fn from(err: crate::error::ListSecurityProfilePermissionsError) -> Self {
        match err {
            crate::error::ListSecurityProfilePermissionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListSecurityProfilePermissionsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListSecurityProfilePermissionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListSecurityProfilePermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListSecurityProfilePermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListSecurityProfilePermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSecurityProfilesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSecurityProfilesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSecurityProfilesError> for Error {
    fn from(err: crate::error::ListSecurityProfilesError) -> Self {
        match err {
            crate::error::ListSecurityProfilesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListSecurityProfilesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListSecurityProfilesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListSecurityProfilesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListSecurityProfilesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListSecurityProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTaskTemplatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTaskTemplatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTaskTemplatesError> for Error {
    fn from(err: crate::error::ListTaskTemplatesError) -> Self {
        match err {
            crate::error::ListTaskTemplatesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListTaskTemplatesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListTaskTemplatesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListTaskTemplatesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTaskTemplatesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTaskTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTrafficDistributionGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTrafficDistributionGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTrafficDistributionGroupsError> for Error {
    fn from(err: crate::error::ListTrafficDistributionGroupsError) -> Self {
        match err {
            crate::error::ListTrafficDistributionGroupsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTrafficDistributionGroupsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListTrafficDistributionGroupsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListTrafficDistributionGroupsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTrafficDistributionGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUseCasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUseCasesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUseCasesError> for Error {
    fn from(err: crate::error::ListUseCasesError) -> Self {
        match err {
            crate::error::ListUseCasesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListUseCasesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListUseCasesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListUseCasesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListUseCasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUserHierarchyGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListUserHierarchyGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUserHierarchyGroupsError> for Error {
    fn from(err: crate::error::ListUserHierarchyGroupsError) -> Self {
        match err {
            crate::error::ListUserHierarchyGroupsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListUserHierarchyGroupsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListUserHierarchyGroupsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListUserHierarchyGroupsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListUserHierarchyGroupsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListUserHierarchyGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUsersError> for Error {
    fn from(err: crate::error::ListUsersError) -> Self {
        match err {
            crate::error::ListUsersError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListUsersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListUsersError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListUsersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListUsersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::MonitorContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::MonitorContactError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::MonitorContactError> for Error {
    fn from(err: crate::error::MonitorContactError) -> Self {
        match err {
            crate::error::MonitorContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::MonitorContactError::IdempotencyException(inner) => {
                Error::IdempotencyException(inner)
            }
            crate::error::MonitorContactError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::MonitorContactError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::MonitorContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::MonitorContactError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::MonitorContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::MonitorContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutUserStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutUserStatusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutUserStatusError> for Error {
    fn from(err: crate::error::PutUserStatusError) -> Self {
        match err {
            crate::error::PutUserStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutUserStatusError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::PutUserStatusError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutUserStatusError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::PutUserStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutUserStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutUserStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ReleasePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ReleasePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ReleasePhoneNumberError> for Error {
    fn from(err: crate::error::ReleasePhoneNumberError) -> Self {
        match err {
            crate::error::ReleasePhoneNumberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ReleasePhoneNumberError::IdempotencyException(inner) => {
                Error::IdempotencyException(inner)
            }
            crate::error::ReleasePhoneNumberError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ReleasePhoneNumberError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ReleasePhoneNumberError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::ReleasePhoneNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ReleasePhoneNumberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ReleasePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ReplicateInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ReplicateInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ReplicateInstanceError> for Error {
    fn from(err: crate::error::ReplicateInstanceError) -> Self {
        match err {
            crate::error::ReplicateInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ReplicateInstanceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ReplicateInstanceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ReplicateInstanceError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::ReplicateInstanceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ReplicateInstanceError::ResourceNotReadyException(inner) => {
                Error::ResourceNotReadyException(inner)
            }
            crate::error::ReplicateInstanceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ReplicateInstanceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ReplicateInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResumeContactRecordingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResumeContactRecordingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResumeContactRecordingError> for Error {
    fn from(err: crate::error::ResumeContactRecordingError) -> Self {
        match err {
            crate::error::ResumeContactRecordingError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ResumeContactRecordingError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ResumeContactRecordingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ResumeContactRecordingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchAvailablePhoneNumbersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchAvailablePhoneNumbersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchAvailablePhoneNumbersError> for Error {
    fn from(err: crate::error::SearchAvailablePhoneNumbersError) -> Self {
        match err {
            crate::error::SearchAvailablePhoneNumbersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchAvailablePhoneNumbersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchQueuesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchQueuesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchQueuesError> for Error {
    fn from(err: crate::error::SearchQueuesError) -> Self {
        match err {
            crate::error::SearchQueuesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::SearchQueuesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SearchQueuesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::SearchQueuesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchQueuesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchQueuesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchRoutingProfilesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchRoutingProfilesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchRoutingProfilesError> for Error {
    fn from(err: crate::error::SearchRoutingProfilesError) -> Self {
        match err {
            crate::error::SearchRoutingProfilesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::SearchRoutingProfilesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SearchRoutingProfilesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::SearchRoutingProfilesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchRoutingProfilesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchRoutingProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchSecurityProfilesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchSecurityProfilesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchSecurityProfilesError> for Error {
    fn from(err: crate::error::SearchSecurityProfilesError) -> Self {
        match err {
            crate::error::SearchSecurityProfilesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::SearchSecurityProfilesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SearchSecurityProfilesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::SearchSecurityProfilesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchSecurityProfilesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchSecurityProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchUsersError> for Error {
    fn from(err: crate::error::SearchUsersError) -> Self {
        match err {
            crate::error::SearchUsersError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::SearchUsersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SearchUsersError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::SearchUsersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchUsersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchVocabulariesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchVocabulariesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchVocabulariesError> for Error {
    fn from(err: crate::error::SearchVocabulariesError) -> Self {
        match err {
            crate::error::SearchVocabulariesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchVocabulariesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::SearchVocabulariesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::SearchVocabulariesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchVocabulariesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartChatContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartChatContactError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartChatContactError> for Error {
    fn from(err: crate::error::StartChatContactError) -> Self {
        match err {
            crate::error::StartChatContactError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StartChatContactError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartChatContactError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartChatContactError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartChatContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartChatContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartContactRecordingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartContactRecordingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartContactRecordingError> for Error {
    fn from(err: crate::error::StartContactRecordingError) -> Self {
        match err {
            crate::error::StartContactRecordingError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StartContactRecordingError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartContactRecordingError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartContactRecordingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartContactRecordingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartContactStreamingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartContactStreamingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartContactStreamingError> for Error {
    fn from(err: crate::error::StartContactStreamingError) -> Self {
        match err {
            crate::error::StartContactStreamingError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StartContactStreamingError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartContactStreamingError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartContactStreamingError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartContactStreamingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartContactStreamingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartOutboundVoiceContactError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartOutboundVoiceContactError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartOutboundVoiceContactError> for Error {
    fn from(err: crate::error::StartOutboundVoiceContactError) -> Self {
        match err {
            crate::error::StartOutboundVoiceContactError::DestinationNotAllowedException(inner) => {
                Error::DestinationNotAllowedException(inner)
            }
            crate::error::StartOutboundVoiceContactError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StartOutboundVoiceContactError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartOutboundVoiceContactError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartOutboundVoiceContactError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartOutboundVoiceContactError::OutboundContactNotPermittedException(
                inner,
            ) => Error::OutboundContactNotPermittedException(inner),
            crate::error::StartOutboundVoiceContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartOutboundVoiceContactError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartTaskContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartTaskContactError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartTaskContactError> for Error {
    fn from(err: crate::error::StartTaskContactError) -> Self {
        match err {
            crate::error::StartTaskContactError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StartTaskContactError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartTaskContactError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartTaskContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartTaskContactError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::StartTaskContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartTaskContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopContactError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopContactError> for Error {
    fn from(err: crate::error::StopContactError) -> Self {
        match err {
            crate::error::StopContactError::ContactNotFoundException(inner) => {
                Error::ContactNotFoundException(inner)
            }
            crate::error::StopContactError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StopContactError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StopContactError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopContactRecordingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopContactRecordingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopContactRecordingError> for Error {
    fn from(err: crate::error::StopContactRecordingError) -> Self {
        match err {
            crate::error::StopContactRecordingError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StopContactRecordingError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopContactRecordingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopContactRecordingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopContactStreamingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopContactStreamingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopContactStreamingError> for Error {
    fn from(err: crate::error::StopContactStreamingError) -> Self {
        match err {
            crate::error::StopContactStreamingError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StopContactStreamingError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StopContactStreamingError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopContactStreamingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopContactStreamingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SuspendContactRecordingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SuspendContactRecordingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SuspendContactRecordingError> for Error {
    fn from(err: crate::error::SuspendContactRecordingError) -> Self {
        match err {
            crate::error::SuspendContactRecordingError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::SuspendContactRecordingError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::SuspendContactRecordingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SuspendContactRecordingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::TagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::TagResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TransferContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TransferContactError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TransferContactError> for Error {
    fn from(err: crate::error::TransferContactError) -> Self {
        match err {
            crate::error::TransferContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TransferContactError::IdempotencyException(inner) => {
                Error::IdempotencyException(inner)
            }
            crate::error::TransferContactError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::TransferContactError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::TransferContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TransferContactError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::TransferContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TransferContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UntagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UntagResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAgentStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAgentStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAgentStatusError> for Error {
    fn from(err: crate::error::UpdateAgentStatusError) -> Self {
        match err {
            crate::error::UpdateAgentStatusError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::UpdateAgentStatusError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateAgentStatusError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateAgentStatusError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateAgentStatusError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateAgentStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAgentStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateAgentStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateContactError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContactError> for Error {
    fn from(err: crate::error::UpdateContactError) -> Self {
        match err {
            crate::error::UpdateContactError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateContactError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateContactError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateContactAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateContactAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContactAttributesError> for Error {
    fn from(err: crate::error::UpdateContactAttributesError) -> Self {
        match err {
            crate::error::UpdateContactAttributesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateContactAttributesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateContactAttributesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateContactAttributesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateContactAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateContactFlowContentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateContactFlowContentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContactFlowContentError> for Error {
    fn from(err: crate::error::UpdateContactFlowContentError) -> Self {
        match err {
            crate::error::UpdateContactFlowContentError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateContactFlowContentError::InvalidContactFlowException(inner) => {
                Error::InvalidContactFlowException(inner)
            }
            crate::error::UpdateContactFlowContentError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateContactFlowContentError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateContactFlowContentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateContactFlowContentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateContactFlowContentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateContactFlowMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateContactFlowMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContactFlowMetadataError> for Error {
    fn from(err: crate::error::UpdateContactFlowMetadataError) -> Self {
        match err {
            crate::error::UpdateContactFlowMetadataError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::UpdateContactFlowMetadataError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateContactFlowMetadataError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateContactFlowMetadataError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateContactFlowMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateContactFlowMetadataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateContactFlowMetadataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateContactFlowModuleContentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateContactFlowModuleContentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContactFlowModuleContentError> for Error {
    fn from(err: crate::error::UpdateContactFlowModuleContentError) -> Self {
        match err {
            crate::error::UpdateContactFlowModuleContentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateContactFlowModuleContentError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::error::UpdateContactFlowModuleContentError::InvalidContactFlowModuleException(inner) => Error::InvalidContactFlowModuleException(inner),
            crate::error::UpdateContactFlowModuleContentError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdateContactFlowModuleContentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateContactFlowModuleContentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateContactFlowModuleContentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateContactFlowModuleMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateContactFlowModuleMetadataError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContactFlowModuleMetadataError> for Error {
    fn from(err: crate::error::UpdateContactFlowModuleMetadataError) -> Self {
        match err {
            crate::error::UpdateContactFlowModuleMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateContactFlowModuleMetadataError::DuplicateResourceException(
                inner,
            ) => Error::DuplicateResourceException(inner),
            crate::error::UpdateContactFlowModuleMetadataError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateContactFlowModuleMetadataError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::UpdateContactFlowModuleMetadataError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateContactFlowModuleMetadataError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateContactFlowModuleMetadataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateContactFlowModuleMetadataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateContactFlowNameError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateContactFlowNameError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContactFlowNameError> for Error {
    fn from(err: crate::error::UpdateContactFlowNameError) -> Self {
        match err {
            crate::error::UpdateContactFlowNameError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::UpdateContactFlowNameError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateContactFlowNameError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateContactFlowNameError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateContactFlowNameError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateContactFlowNameError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateContactFlowNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateContactScheduleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateContactScheduleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContactScheduleError> for Error {
    fn from(err: crate::error::UpdateContactScheduleError) -> Self {
        match err {
            crate::error::UpdateContactScheduleError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateContactScheduleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateContactScheduleError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateContactScheduleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateContactScheduleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateContactScheduleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateContactScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateHoursOfOperationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateHoursOfOperationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateHoursOfOperationError> for Error {
    fn from(err: crate::error::UpdateHoursOfOperationError) -> Self {
        match err {
            crate::error::UpdateHoursOfOperationError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::UpdateHoursOfOperationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateHoursOfOperationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateHoursOfOperationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateHoursOfOperationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateHoursOfOperationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateHoursOfOperationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateInstanceAttributeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateInstanceAttributeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateInstanceAttributeError> for Error {
    fn from(err: crate::error::UpdateInstanceAttributeError) -> Self {
        match err {
            crate::error::UpdateInstanceAttributeError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateInstanceAttributeError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateInstanceAttributeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateInstanceAttributeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateInstanceAttributeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateInstanceAttributeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateInstanceStorageConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateInstanceStorageConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateInstanceStorageConfigError> for Error {
    fn from(err: crate::error::UpdateInstanceStorageConfigError) -> Self {
        match err {
            crate::error::UpdateInstanceStorageConfigError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateInstanceStorageConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateInstanceStorageConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateInstanceStorageConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateInstanceStorageConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateInstanceStorageConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateParticipantRoleConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateParticipantRoleConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateParticipantRoleConfigError> for Error {
    fn from(err: crate::error::UpdateParticipantRoleConfigError) -> Self {
        match err {
            crate::error::UpdateParticipantRoleConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateParticipantRoleConfigError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateParticipantRoleConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateParticipantRoleConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateParticipantRoleConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateParticipantRoleConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateParticipantRoleConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePhoneNumberError> for Error {
    fn from(err: crate::error::UpdatePhoneNumberError) -> Self {
        match err {
            crate::error::UpdatePhoneNumberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdatePhoneNumberError::IdempotencyException(inner) => {
                Error::IdempotencyException(inner)
            }
            crate::error::UpdatePhoneNumberError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdatePhoneNumberError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdatePhoneNumberError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::UpdatePhoneNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdatePhoneNumberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdatePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateQueueHoursOfOperationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateQueueHoursOfOperationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateQueueHoursOfOperationError> for Error {
    fn from(err: crate::error::UpdateQueueHoursOfOperationError) -> Self {
        match err {
            crate::error::UpdateQueueHoursOfOperationError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateQueueHoursOfOperationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateQueueHoursOfOperationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateQueueHoursOfOperationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateQueueHoursOfOperationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateQueueHoursOfOperationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateQueueMaxContactsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateQueueMaxContactsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateQueueMaxContactsError> for Error {
    fn from(err: crate::error::UpdateQueueMaxContactsError) -> Self {
        match err {
            crate::error::UpdateQueueMaxContactsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateQueueMaxContactsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateQueueMaxContactsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateQueueMaxContactsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateQueueMaxContactsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateQueueMaxContactsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateQueueNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateQueueNameError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateQueueNameError> for Error {
    fn from(err: crate::error::UpdateQueueNameError) -> Self {
        match err {
            crate::error::UpdateQueueNameError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::UpdateQueueNameError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateQueueNameError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateQueueNameError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateQueueNameError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateQueueNameError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateQueueNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateQueueOutboundCallerConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateQueueOutboundCallerConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateQueueOutboundCallerConfigError> for Error {
    fn from(err: crate::error::UpdateQueueOutboundCallerConfigError) -> Self {
        match err {
            crate::error::UpdateQueueOutboundCallerConfigError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateQueueOutboundCallerConfigError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::UpdateQueueOutboundCallerConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateQueueOutboundCallerConfigError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateQueueOutboundCallerConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateQueueOutboundCallerConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateQueueStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateQueueStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateQueueStatusError> for Error {
    fn from(err: crate::error::UpdateQueueStatusError) -> Self {
        match err {
            crate::error::UpdateQueueStatusError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateQueueStatusError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateQueueStatusError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateQueueStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateQueueStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateQueueStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateQuickConnectConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateQuickConnectConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateQuickConnectConfigError> for Error {
    fn from(err: crate::error::UpdateQuickConnectConfigError) -> Self {
        match err {
            crate::error::UpdateQuickConnectConfigError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateQuickConnectConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateQuickConnectConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateQuickConnectConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateQuickConnectConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateQuickConnectConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateQuickConnectNameError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateQuickConnectNameError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateQuickConnectNameError> for Error {
    fn from(err: crate::error::UpdateQuickConnectNameError) -> Self {
        match err {
            crate::error::UpdateQuickConnectNameError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateQuickConnectNameError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateQuickConnectNameError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateQuickConnectNameError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateQuickConnectNameError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateQuickConnectNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateRoutingProfileConcurrencyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateRoutingProfileConcurrencyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRoutingProfileConcurrencyError> for Error {
    fn from(err: crate::error::UpdateRoutingProfileConcurrencyError) -> Self {
        match err {
            crate::error::UpdateRoutingProfileConcurrencyError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateRoutingProfileConcurrencyError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::UpdateRoutingProfileConcurrencyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateRoutingProfileConcurrencyError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateRoutingProfileConcurrencyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateRoutingProfileConcurrencyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateRoutingProfileDefaultOutboundQueueError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateRoutingProfileDefaultOutboundQueueError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRoutingProfileDefaultOutboundQueueError> for Error {
    fn from(err: crate::error::UpdateRoutingProfileDefaultOutboundQueueError) -> Self {
        match err {
            crate::error::UpdateRoutingProfileDefaultOutboundQueueError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::error::UpdateRoutingProfileDefaultOutboundQueueError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::UpdateRoutingProfileDefaultOutboundQueueError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdateRoutingProfileDefaultOutboundQueueError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateRoutingProfileDefaultOutboundQueueError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateRoutingProfileDefaultOutboundQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRoutingProfileNameError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRoutingProfileNameError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRoutingProfileNameError> for Error {
    fn from(err: crate::error::UpdateRoutingProfileNameError) -> Self {
        match err {
            crate::error::UpdateRoutingProfileNameError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::UpdateRoutingProfileNameError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateRoutingProfileNameError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateRoutingProfileNameError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateRoutingProfileNameError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateRoutingProfileNameError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateRoutingProfileNameError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRoutingProfileQueuesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRoutingProfileQueuesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRoutingProfileQueuesError> for Error {
    fn from(err: crate::error::UpdateRoutingProfileQueuesError) -> Self {
        match err {
            crate::error::UpdateRoutingProfileQueuesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateRoutingProfileQueuesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateRoutingProfileQueuesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateRoutingProfileQueuesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateRoutingProfileQueuesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateRoutingProfileQueuesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRuleError> for Error {
    fn from(err: crate::error::UpdateRuleError) -> Self {
        match err {
            crate::error::UpdateRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateRuleError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateRuleError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateRuleError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::UpdateRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSecurityProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSecurityProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSecurityProfileError> for Error {
    fn from(err: crate::error::UpdateSecurityProfileError) -> Self {
        match err {
            crate::error::UpdateSecurityProfileError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateSecurityProfileError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateSecurityProfileError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateSecurityProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateSecurityProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateSecurityProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTaskTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateTaskTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTaskTemplateError> for Error {
    fn from(err: crate::error::UpdateTaskTemplateError) -> Self {
        match err {
            crate::error::UpdateTaskTemplateError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateTaskTemplateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateTaskTemplateError::PropertyValidationException(inner) => {
                Error::PropertyValidationException(inner)
            }
            crate::error::UpdateTaskTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateTaskTemplateError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateTaskTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateTaskTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTrafficDistributionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateTrafficDistributionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTrafficDistributionError> for Error {
    fn from(err: crate::error::UpdateTrafficDistributionError) -> Self {
        match err {
            crate::error::UpdateTrafficDistributionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateTrafficDistributionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateTrafficDistributionError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateTrafficDistributionError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::UpdateTrafficDistributionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateTrafficDistributionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateTrafficDistributionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserHierarchyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateUserHierarchyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserHierarchyError> for Error {
    fn from(err: crate::error::UpdateUserHierarchyError) -> Self {
        match err {
            crate::error::UpdateUserHierarchyError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateUserHierarchyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateUserHierarchyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateUserHierarchyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateUserHierarchyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateUserHierarchyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserHierarchyGroupNameError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateUserHierarchyGroupNameError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserHierarchyGroupNameError> for Error {
    fn from(err: crate::error::UpdateUserHierarchyGroupNameError) -> Self {
        match err {
            crate::error::UpdateUserHierarchyGroupNameError::DuplicateResourceException(inner) => {
                Error::DuplicateResourceException(inner)
            }
            crate::error::UpdateUserHierarchyGroupNameError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateUserHierarchyGroupNameError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateUserHierarchyGroupNameError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateUserHierarchyGroupNameError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateUserHierarchyGroupNameError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateUserHierarchyGroupNameError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserHierarchyStructureError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateUserHierarchyStructureError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserHierarchyStructureError> for Error {
    fn from(err: crate::error::UpdateUserHierarchyStructureError) -> Self {
        match err {
            crate::error::UpdateUserHierarchyStructureError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateUserHierarchyStructureError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateUserHierarchyStructureError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateUserHierarchyStructureError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::UpdateUserHierarchyStructureError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateUserHierarchyStructureError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateUserHierarchyStructureError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserIdentityInfoError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateUserIdentityInfoError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserIdentityInfoError> for Error {
    fn from(err: crate::error::UpdateUserIdentityInfoError) -> Self {
        match err {
            crate::error::UpdateUserIdentityInfoError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateUserIdentityInfoError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateUserIdentityInfoError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateUserIdentityInfoError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateUserIdentityInfoError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateUserIdentityInfoError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserPhoneConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateUserPhoneConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserPhoneConfigError> for Error {
    fn from(err: crate::error::UpdateUserPhoneConfigError) -> Self {
        match err {
            crate::error::UpdateUserPhoneConfigError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateUserPhoneConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateUserPhoneConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateUserPhoneConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateUserPhoneConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateUserPhoneConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserRoutingProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateUserRoutingProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserRoutingProfileError> for Error {
    fn from(err: crate::error::UpdateUserRoutingProfileError) -> Self {
        match err {
            crate::error::UpdateUserRoutingProfileError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateUserRoutingProfileError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateUserRoutingProfileError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateUserRoutingProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateUserRoutingProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateUserRoutingProfileError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserSecurityProfilesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateUserSecurityProfilesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserSecurityProfilesError> for Error {
    fn from(err: crate::error::UpdateUserSecurityProfilesError) -> Self {
        match err {
            crate::error::UpdateUserSecurityProfilesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateUserSecurityProfilesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateUserSecurityProfilesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateUserSecurityProfilesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateUserSecurityProfilesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateUserSecurityProfilesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ContactFlowNotPublishedException(e) => e.request_id(),
            Self::ContactNotFoundException(e) => e.request_id(),
            Self::DestinationNotAllowedException(e) => e.request_id(),
            Self::DuplicateResourceException(e) => e.request_id(),
            Self::IdempotencyException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::InvalidContactFlowException(e) => e.request_id(),
            Self::InvalidContactFlowModuleException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::OutboundContactNotPermittedException(e) => e.request_id(),
            Self::PropertyValidationException(e) => e.request_id(),
            Self::ResourceConflictException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceNotReadyException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UserNotFoundException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
