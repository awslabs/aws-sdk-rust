// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_task_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_task_template::CreateTaskTemplateInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.constraints {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Constraints").start_object();
        crate::protocol_serde::shape_task_template_constraints::ser_task_template_constraints(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.defaults {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Defaults").start_object();
        crate::protocol_serde::shape_task_template_defaults::ser_task_template_defaults(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.description {
        object.key("Description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.fields {
        let mut array_9 = object.key("Fields").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_task_template_field::ser_task_template_field(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.name {
        object.key("Name").string(var_12.as_str());
    }
    if let Some(var_13) = &input.status {
        object.key("Status").string(var_13.as_str());
    }
    Ok(())
}
