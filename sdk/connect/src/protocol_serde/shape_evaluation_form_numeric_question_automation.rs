// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_evaluation_form_numeric_question_automation(
    object_6: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::EvaluationFormNumericQuestionAutomation,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::EvaluationFormNumericQuestionAutomation::PropertyValue(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_6.key("PropertyValue").start_object();
            crate::protocol_serde::shape_numeric_question_property_value_automation::ser_numeric_question_property_value_automation(
                &mut object_1,
                inner,
            )?;
            object_1.finish();
        }
        crate::types::EvaluationFormNumericQuestionAutomation::Unknown => {
            return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant(
                "EvaluationFormNumericQuestionAutomation",
            ))
        }
    }
    Ok(())
}

pub(crate) fn de_evaluation_form_numeric_question_automation<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::EvaluationFormNumericQuestionAutomation>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        let key = key.to_unescaped()?;
                        if key == "__type" {
                            ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                            continue;
                        }
                        if variant.is_some() {
                            return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                                "encountered mixed variants in union",
                            ));
                        }
                        variant = match key.as_ref() {
                            "PropertyValue" => {
                                Some(crate::types::EvaluationFormNumericQuestionAutomation::PropertyValue(
                                    crate::protocol_serde::shape_numeric_question_property_value_automation::de_numeric_question_property_value_automation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'PropertyValue' cannot be null"))?
                                ))
                            }
                            _ => {
                                                                      ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                                                                      Some(crate::types::EvaluationFormNumericQuestionAutomation::Unknown)
                                                                    }
                        };
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
        }
        _ => {
            return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ))
        }
    }
    Ok(variant)
}
