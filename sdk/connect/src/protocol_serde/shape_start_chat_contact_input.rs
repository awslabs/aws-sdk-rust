// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_chat_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_chat_contact::StartChatContactInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Attributes").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.chat_duration_in_minutes {
        object.key("ChatDurationInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.client_token {
        object.key("ClientToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.initial_message {
        #[allow(unused_mut)]
        let mut object_9 = object.key("InitialMessage").start_object();
        crate::protocol_serde::shape_chat_message::ser_chat_message(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.instance_id {
        object.key("InstanceId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.participant_details {
        #[allow(unused_mut)]
        let mut object_12 = object.key("ParticipantDetails").start_object();
        crate::protocol_serde::shape_participant_details::ser_participant_details(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.persistent_chat {
        #[allow(unused_mut)]
        let mut object_14 = object.key("PersistentChat").start_object();
        crate::protocol_serde::shape_persistent_chat::ser_persistent_chat(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.supported_messaging_content_types {
        let mut array_16 = object.key("SupportedMessagingContentTypes").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    Ok(())
}
