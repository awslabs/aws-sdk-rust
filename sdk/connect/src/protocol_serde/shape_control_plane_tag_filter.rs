// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_control_plane_tag_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ControlPlaneTagFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.or_conditions {
        let mut array_2 = object.key("OrConditions").start_array();
        for item_3 in var_1 {
            {
                let mut array_4 = array_2.value().start_array();
                for item_5 in item_3 {
                    {
                        #[allow(unused_mut)]
                        let mut object_6 = array_4.value().start_object();
                        crate::protocol_serde::shape_tag_condition::ser_tag_condition(
                            &mut object_6,
                            item_5,
                        )?;
                        object_6.finish();
                    }
                }
                array_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_7) = &input.and_conditions {
        let mut array_8 = object.key("AndConditions").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_tag_condition::ser_tag_condition(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.tag_condition {
        #[allow(unused_mut)]
        let mut object_12 = object.key("TagCondition").start_object();
        crate::protocol_serde::shape_tag_condition::ser_tag_condition(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
