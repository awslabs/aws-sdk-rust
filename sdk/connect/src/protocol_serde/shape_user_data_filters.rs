// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_user_data_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::UserDataFilters,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.queues {
        let mut array_2 = object.key("Queues").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.contact_filter {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ContactFilter").start_object();
        crate::protocol_serde::shape_contact_filter::ser_contact_filter(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.routing_profiles {
        let mut array_7 = object.key("RoutingProfiles").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.agents {
        let mut array_10 = object.key("Agents").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.user_hierarchy_groups {
        let mut array_13 = object.key("UserHierarchyGroups").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    Ok(())
}
