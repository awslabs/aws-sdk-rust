// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_hierarchy_structure_update(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::HierarchyStructureUpdate,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.level_one {
        #[allow(unused_mut)]
        let mut object_2 = object.key("LevelOne").start_object();
        crate::protocol_serde::shape_hierarchy_level_update::ser_hierarchy_level_update(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.level_two {
        #[allow(unused_mut)]
        let mut object_4 = object.key("LevelTwo").start_object();
        crate::protocol_serde::shape_hierarchy_level_update::ser_hierarchy_level_update(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.level_three {
        #[allow(unused_mut)]
        let mut object_6 = object.key("LevelThree").start_object();
        crate::protocol_serde::shape_hierarchy_level_update::ser_hierarchy_level_update(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.level_four {
        #[allow(unused_mut)]
        let mut object_8 = object.key("LevelFour").start_object();
        crate::protocol_serde::shape_hierarchy_level_update::ser_hierarchy_level_update(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.level_five {
        #[allow(unused_mut)]
        let mut object_10 = object.key("LevelFive").start_object();
        crate::protocol_serde::shape_hierarchy_level_update::ser_hierarchy_level_update(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
