// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_metric_data::GetMetricDataInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_1, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2) = &input.filters {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Filters").start_object();
        crate::protocol_serde::shape_filters::ser_filters(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.groupings {
        let mut array_5 = object.key("Groupings").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.historical_metrics {
        let mut array_8 = object.key("HistoricalMetrics").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_historical_metric::ser_historical_metric(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.next_token {
        object.key("NextToken").string(var_12.as_str());
    }
    if let Some(var_13) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_13, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}
