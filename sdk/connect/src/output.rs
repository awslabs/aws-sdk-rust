// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateUserSecurityProfilesOutput {}
impl std::fmt::Debug for UpdateUserSecurityProfilesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateUserSecurityProfilesOutput");
        formatter.finish()
    }
}
/// See [`UpdateUserSecurityProfilesOutput`](crate::output::UpdateUserSecurityProfilesOutput)
pub mod update_user_security_profiles_output {
    /// A builder for [`UpdateUserSecurityProfilesOutput`](crate::output::UpdateUserSecurityProfilesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateUserSecurityProfilesOutput`](crate::output::UpdateUserSecurityProfilesOutput)
        pub fn build(self) -> crate::output::UpdateUserSecurityProfilesOutput {
            crate::output::UpdateUserSecurityProfilesOutput {}
        }
    }
}
impl UpdateUserSecurityProfilesOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserSecurityProfilesOutput`](crate::output::UpdateUserSecurityProfilesOutput)
    pub fn builder() -> crate::output::update_user_security_profiles_output::Builder {
        crate::output::update_user_security_profiles_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateUserRoutingProfileOutput {}
impl std::fmt::Debug for UpdateUserRoutingProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateUserRoutingProfileOutput");
        formatter.finish()
    }
}
/// See [`UpdateUserRoutingProfileOutput`](crate::output::UpdateUserRoutingProfileOutput)
pub mod update_user_routing_profile_output {
    /// A builder for [`UpdateUserRoutingProfileOutput`](crate::output::UpdateUserRoutingProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateUserRoutingProfileOutput`](crate::output::UpdateUserRoutingProfileOutput)
        pub fn build(self) -> crate::output::UpdateUserRoutingProfileOutput {
            crate::output::UpdateUserRoutingProfileOutput {}
        }
    }
}
impl UpdateUserRoutingProfileOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserRoutingProfileOutput`](crate::output::UpdateUserRoutingProfileOutput)
    pub fn builder() -> crate::output::update_user_routing_profile_output::Builder {
        crate::output::update_user_routing_profile_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateUserPhoneConfigOutput {}
impl std::fmt::Debug for UpdateUserPhoneConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateUserPhoneConfigOutput");
        formatter.finish()
    }
}
/// See [`UpdateUserPhoneConfigOutput`](crate::output::UpdateUserPhoneConfigOutput)
pub mod update_user_phone_config_output {
    /// A builder for [`UpdateUserPhoneConfigOutput`](crate::output::UpdateUserPhoneConfigOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateUserPhoneConfigOutput`](crate::output::UpdateUserPhoneConfigOutput)
        pub fn build(self) -> crate::output::UpdateUserPhoneConfigOutput {
            crate::output::UpdateUserPhoneConfigOutput {}
        }
    }
}
impl UpdateUserPhoneConfigOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserPhoneConfigOutput`](crate::output::UpdateUserPhoneConfigOutput)
    pub fn builder() -> crate::output::update_user_phone_config_output::Builder {
        crate::output::update_user_phone_config_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateUserIdentityInfoOutput {}
impl std::fmt::Debug for UpdateUserIdentityInfoOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateUserIdentityInfoOutput");
        formatter.finish()
    }
}
/// See [`UpdateUserIdentityInfoOutput`](crate::output::UpdateUserIdentityInfoOutput)
pub mod update_user_identity_info_output {
    /// A builder for [`UpdateUserIdentityInfoOutput`](crate::output::UpdateUserIdentityInfoOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateUserIdentityInfoOutput`](crate::output::UpdateUserIdentityInfoOutput)
        pub fn build(self) -> crate::output::UpdateUserIdentityInfoOutput {
            crate::output::UpdateUserIdentityInfoOutput {}
        }
    }
}
impl UpdateUserIdentityInfoOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserIdentityInfoOutput`](crate::output::UpdateUserIdentityInfoOutput)
    pub fn builder() -> crate::output::update_user_identity_info_output::Builder {
        crate::output::update_user_identity_info_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateUserHierarchyStructureOutput {}
impl std::fmt::Debug for UpdateUserHierarchyStructureOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateUserHierarchyStructureOutput");
        formatter.finish()
    }
}
/// See [`UpdateUserHierarchyStructureOutput`](crate::output::UpdateUserHierarchyStructureOutput)
pub mod update_user_hierarchy_structure_output {
    /// A builder for [`UpdateUserHierarchyStructureOutput`](crate::output::UpdateUserHierarchyStructureOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateUserHierarchyStructureOutput`](crate::output::UpdateUserHierarchyStructureOutput)
        pub fn build(self) -> crate::output::UpdateUserHierarchyStructureOutput {
            crate::output::UpdateUserHierarchyStructureOutput {}
        }
    }
}
impl UpdateUserHierarchyStructureOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserHierarchyStructureOutput`](crate::output::UpdateUserHierarchyStructureOutput)
    pub fn builder() -> crate::output::update_user_hierarchy_structure_output::Builder {
        crate::output::update_user_hierarchy_structure_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateUserHierarchyGroupNameOutput {}
impl std::fmt::Debug for UpdateUserHierarchyGroupNameOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateUserHierarchyGroupNameOutput");
        formatter.finish()
    }
}
/// See [`UpdateUserHierarchyGroupNameOutput`](crate::output::UpdateUserHierarchyGroupNameOutput)
pub mod update_user_hierarchy_group_name_output {
    /// A builder for [`UpdateUserHierarchyGroupNameOutput`](crate::output::UpdateUserHierarchyGroupNameOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateUserHierarchyGroupNameOutput`](crate::output::UpdateUserHierarchyGroupNameOutput)
        pub fn build(self) -> crate::output::UpdateUserHierarchyGroupNameOutput {
            crate::output::UpdateUserHierarchyGroupNameOutput {}
        }
    }
}
impl UpdateUserHierarchyGroupNameOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserHierarchyGroupNameOutput`](crate::output::UpdateUserHierarchyGroupNameOutput)
    pub fn builder() -> crate::output::update_user_hierarchy_group_name_output::Builder {
        crate::output::update_user_hierarchy_group_name_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateUserHierarchyOutput {}
impl std::fmt::Debug for UpdateUserHierarchyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateUserHierarchyOutput");
        formatter.finish()
    }
}
/// See [`UpdateUserHierarchyOutput`](crate::output::UpdateUserHierarchyOutput)
pub mod update_user_hierarchy_output {
    /// A builder for [`UpdateUserHierarchyOutput`](crate::output::UpdateUserHierarchyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateUserHierarchyOutput`](crate::output::UpdateUserHierarchyOutput)
        pub fn build(self) -> crate::output::UpdateUserHierarchyOutput {
            crate::output::UpdateUserHierarchyOutput {}
        }
    }
}
impl UpdateUserHierarchyOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserHierarchyOutput`](crate::output::UpdateUserHierarchyOutput)
    pub fn builder() -> crate::output::update_user_hierarchy_output::Builder {
        crate::output::update_user_hierarchy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateSecurityProfileOutput {}
impl std::fmt::Debug for UpdateSecurityProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSecurityProfileOutput");
        formatter.finish()
    }
}
/// See [`UpdateSecurityProfileOutput`](crate::output::UpdateSecurityProfileOutput)
pub mod update_security_profile_output {
    /// A builder for [`UpdateSecurityProfileOutput`](crate::output::UpdateSecurityProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateSecurityProfileOutput`](crate::output::UpdateSecurityProfileOutput)
        pub fn build(self) -> crate::output::UpdateSecurityProfileOutput {
            crate::output::UpdateSecurityProfileOutput {}
        }
    }
}
impl UpdateSecurityProfileOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityProfileOutput`](crate::output::UpdateSecurityProfileOutput)
    pub fn builder() -> crate::output::update_security_profile_output::Builder {
        crate::output::update_security_profile_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateRoutingProfileQueuesOutput {}
impl std::fmt::Debug for UpdateRoutingProfileQueuesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRoutingProfileQueuesOutput");
        formatter.finish()
    }
}
/// See [`UpdateRoutingProfileQueuesOutput`](crate::output::UpdateRoutingProfileQueuesOutput)
pub mod update_routing_profile_queues_output {
    /// A builder for [`UpdateRoutingProfileQueuesOutput`](crate::output::UpdateRoutingProfileQueuesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateRoutingProfileQueuesOutput`](crate::output::UpdateRoutingProfileQueuesOutput)
        pub fn build(self) -> crate::output::UpdateRoutingProfileQueuesOutput {
            crate::output::UpdateRoutingProfileQueuesOutput {}
        }
    }
}
impl UpdateRoutingProfileQueuesOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRoutingProfileQueuesOutput`](crate::output::UpdateRoutingProfileQueuesOutput)
    pub fn builder() -> crate::output::update_routing_profile_queues_output::Builder {
        crate::output::update_routing_profile_queues_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateRoutingProfileNameOutput {}
impl std::fmt::Debug for UpdateRoutingProfileNameOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRoutingProfileNameOutput");
        formatter.finish()
    }
}
/// See [`UpdateRoutingProfileNameOutput`](crate::output::UpdateRoutingProfileNameOutput)
pub mod update_routing_profile_name_output {
    /// A builder for [`UpdateRoutingProfileNameOutput`](crate::output::UpdateRoutingProfileNameOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateRoutingProfileNameOutput`](crate::output::UpdateRoutingProfileNameOutput)
        pub fn build(self) -> crate::output::UpdateRoutingProfileNameOutput {
            crate::output::UpdateRoutingProfileNameOutput {}
        }
    }
}
impl UpdateRoutingProfileNameOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRoutingProfileNameOutput`](crate::output::UpdateRoutingProfileNameOutput)
    pub fn builder() -> crate::output::update_routing_profile_name_output::Builder {
        crate::output::update_routing_profile_name_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateRoutingProfileDefaultOutboundQueueOutput {}
impl std::fmt::Debug for UpdateRoutingProfileDefaultOutboundQueueOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRoutingProfileDefaultOutboundQueueOutput");
        formatter.finish()
    }
}
/// See [`UpdateRoutingProfileDefaultOutboundQueueOutput`](crate::output::UpdateRoutingProfileDefaultOutboundQueueOutput)
pub mod update_routing_profile_default_outbound_queue_output {
    /// A builder for [`UpdateRoutingProfileDefaultOutboundQueueOutput`](crate::output::UpdateRoutingProfileDefaultOutboundQueueOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateRoutingProfileDefaultOutboundQueueOutput`](crate::output::UpdateRoutingProfileDefaultOutboundQueueOutput)
        pub fn build(self) -> crate::output::UpdateRoutingProfileDefaultOutboundQueueOutput {
            crate::output::UpdateRoutingProfileDefaultOutboundQueueOutput {}
        }
    }
}
impl UpdateRoutingProfileDefaultOutboundQueueOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRoutingProfileDefaultOutboundQueueOutput`](crate::output::UpdateRoutingProfileDefaultOutboundQueueOutput)
    pub fn builder() -> crate::output::update_routing_profile_default_outbound_queue_output::Builder
    {
        crate::output::update_routing_profile_default_outbound_queue_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateRoutingProfileConcurrencyOutput {}
impl std::fmt::Debug for UpdateRoutingProfileConcurrencyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRoutingProfileConcurrencyOutput");
        formatter.finish()
    }
}
/// See [`UpdateRoutingProfileConcurrencyOutput`](crate::output::UpdateRoutingProfileConcurrencyOutput)
pub mod update_routing_profile_concurrency_output {
    /// A builder for [`UpdateRoutingProfileConcurrencyOutput`](crate::output::UpdateRoutingProfileConcurrencyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateRoutingProfileConcurrencyOutput`](crate::output::UpdateRoutingProfileConcurrencyOutput)
        pub fn build(self) -> crate::output::UpdateRoutingProfileConcurrencyOutput {
            crate::output::UpdateRoutingProfileConcurrencyOutput {}
        }
    }
}
impl UpdateRoutingProfileConcurrencyOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRoutingProfileConcurrencyOutput`](crate::output::UpdateRoutingProfileConcurrencyOutput)
    pub fn builder() -> crate::output::update_routing_profile_concurrency_output::Builder {
        crate::output::update_routing_profile_concurrency_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateQuickConnectNameOutput {}
impl std::fmt::Debug for UpdateQuickConnectNameOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateQuickConnectNameOutput");
        formatter.finish()
    }
}
/// See [`UpdateQuickConnectNameOutput`](crate::output::UpdateQuickConnectNameOutput)
pub mod update_quick_connect_name_output {
    /// A builder for [`UpdateQuickConnectNameOutput`](crate::output::UpdateQuickConnectNameOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateQuickConnectNameOutput`](crate::output::UpdateQuickConnectNameOutput)
        pub fn build(self) -> crate::output::UpdateQuickConnectNameOutput {
            crate::output::UpdateQuickConnectNameOutput {}
        }
    }
}
impl UpdateQuickConnectNameOutput {
    /// Creates a new builder-style object to manufacture [`UpdateQuickConnectNameOutput`](crate::output::UpdateQuickConnectNameOutput)
    pub fn builder() -> crate::output::update_quick_connect_name_output::Builder {
        crate::output::update_quick_connect_name_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateQuickConnectConfigOutput {}
impl std::fmt::Debug for UpdateQuickConnectConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateQuickConnectConfigOutput");
        formatter.finish()
    }
}
/// See [`UpdateQuickConnectConfigOutput`](crate::output::UpdateQuickConnectConfigOutput)
pub mod update_quick_connect_config_output {
    /// A builder for [`UpdateQuickConnectConfigOutput`](crate::output::UpdateQuickConnectConfigOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateQuickConnectConfigOutput`](crate::output::UpdateQuickConnectConfigOutput)
        pub fn build(self) -> crate::output::UpdateQuickConnectConfigOutput {
            crate::output::UpdateQuickConnectConfigOutput {}
        }
    }
}
impl UpdateQuickConnectConfigOutput {
    /// Creates a new builder-style object to manufacture [`UpdateQuickConnectConfigOutput`](crate::output::UpdateQuickConnectConfigOutput)
    pub fn builder() -> crate::output::update_quick_connect_config_output::Builder {
        crate::output::update_quick_connect_config_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateQueueStatusOutput {}
impl std::fmt::Debug for UpdateQueueStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateQueueStatusOutput");
        formatter.finish()
    }
}
/// See [`UpdateQueueStatusOutput`](crate::output::UpdateQueueStatusOutput)
pub mod update_queue_status_output {
    /// A builder for [`UpdateQueueStatusOutput`](crate::output::UpdateQueueStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateQueueStatusOutput`](crate::output::UpdateQueueStatusOutput)
        pub fn build(self) -> crate::output::UpdateQueueStatusOutput {
            crate::output::UpdateQueueStatusOutput {}
        }
    }
}
impl UpdateQueueStatusOutput {
    /// Creates a new builder-style object to manufacture [`UpdateQueueStatusOutput`](crate::output::UpdateQueueStatusOutput)
    pub fn builder() -> crate::output::update_queue_status_output::Builder {
        crate::output::update_queue_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateQueueOutboundCallerConfigOutput {}
impl std::fmt::Debug for UpdateQueueOutboundCallerConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateQueueOutboundCallerConfigOutput");
        formatter.finish()
    }
}
/// See [`UpdateQueueOutboundCallerConfigOutput`](crate::output::UpdateQueueOutboundCallerConfigOutput)
pub mod update_queue_outbound_caller_config_output {
    /// A builder for [`UpdateQueueOutboundCallerConfigOutput`](crate::output::UpdateQueueOutboundCallerConfigOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateQueueOutboundCallerConfigOutput`](crate::output::UpdateQueueOutboundCallerConfigOutput)
        pub fn build(self) -> crate::output::UpdateQueueOutboundCallerConfigOutput {
            crate::output::UpdateQueueOutboundCallerConfigOutput {}
        }
    }
}
impl UpdateQueueOutboundCallerConfigOutput {
    /// Creates a new builder-style object to manufacture [`UpdateQueueOutboundCallerConfigOutput`](crate::output::UpdateQueueOutboundCallerConfigOutput)
    pub fn builder() -> crate::output::update_queue_outbound_caller_config_output::Builder {
        crate::output::update_queue_outbound_caller_config_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateQueueNameOutput {}
impl std::fmt::Debug for UpdateQueueNameOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateQueueNameOutput");
        formatter.finish()
    }
}
/// See [`UpdateQueueNameOutput`](crate::output::UpdateQueueNameOutput)
pub mod update_queue_name_output {
    /// A builder for [`UpdateQueueNameOutput`](crate::output::UpdateQueueNameOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateQueueNameOutput`](crate::output::UpdateQueueNameOutput)
        pub fn build(self) -> crate::output::UpdateQueueNameOutput {
            crate::output::UpdateQueueNameOutput {}
        }
    }
}
impl UpdateQueueNameOutput {
    /// Creates a new builder-style object to manufacture [`UpdateQueueNameOutput`](crate::output::UpdateQueueNameOutput)
    pub fn builder() -> crate::output::update_queue_name_output::Builder {
        crate::output::update_queue_name_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateQueueMaxContactsOutput {}
impl std::fmt::Debug for UpdateQueueMaxContactsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateQueueMaxContactsOutput");
        formatter.finish()
    }
}
/// See [`UpdateQueueMaxContactsOutput`](crate::output::UpdateQueueMaxContactsOutput)
pub mod update_queue_max_contacts_output {
    /// A builder for [`UpdateQueueMaxContactsOutput`](crate::output::UpdateQueueMaxContactsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateQueueMaxContactsOutput`](crate::output::UpdateQueueMaxContactsOutput)
        pub fn build(self) -> crate::output::UpdateQueueMaxContactsOutput {
            crate::output::UpdateQueueMaxContactsOutput {}
        }
    }
}
impl UpdateQueueMaxContactsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateQueueMaxContactsOutput`](crate::output::UpdateQueueMaxContactsOutput)
    pub fn builder() -> crate::output::update_queue_max_contacts_output::Builder {
        crate::output::update_queue_max_contacts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateQueueHoursOfOperationOutput {}
impl std::fmt::Debug for UpdateQueueHoursOfOperationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateQueueHoursOfOperationOutput");
        formatter.finish()
    }
}
/// See [`UpdateQueueHoursOfOperationOutput`](crate::output::UpdateQueueHoursOfOperationOutput)
pub mod update_queue_hours_of_operation_output {
    /// A builder for [`UpdateQueueHoursOfOperationOutput`](crate::output::UpdateQueueHoursOfOperationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateQueueHoursOfOperationOutput`](crate::output::UpdateQueueHoursOfOperationOutput)
        pub fn build(self) -> crate::output::UpdateQueueHoursOfOperationOutput {
            crate::output::UpdateQueueHoursOfOperationOutput {}
        }
    }
}
impl UpdateQueueHoursOfOperationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateQueueHoursOfOperationOutput`](crate::output::UpdateQueueHoursOfOperationOutput)
    pub fn builder() -> crate::output::update_queue_hours_of_operation_output::Builder {
        crate::output::update_queue_hours_of_operation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateInstanceStorageConfigOutput {}
impl std::fmt::Debug for UpdateInstanceStorageConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateInstanceStorageConfigOutput");
        formatter.finish()
    }
}
/// See [`UpdateInstanceStorageConfigOutput`](crate::output::UpdateInstanceStorageConfigOutput)
pub mod update_instance_storage_config_output {
    /// A builder for [`UpdateInstanceStorageConfigOutput`](crate::output::UpdateInstanceStorageConfigOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateInstanceStorageConfigOutput`](crate::output::UpdateInstanceStorageConfigOutput)
        pub fn build(self) -> crate::output::UpdateInstanceStorageConfigOutput {
            crate::output::UpdateInstanceStorageConfigOutput {}
        }
    }
}
impl UpdateInstanceStorageConfigOutput {
    /// Creates a new builder-style object to manufacture [`UpdateInstanceStorageConfigOutput`](crate::output::UpdateInstanceStorageConfigOutput)
    pub fn builder() -> crate::output::update_instance_storage_config_output::Builder {
        crate::output::update_instance_storage_config_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateInstanceAttributeOutput {}
impl std::fmt::Debug for UpdateInstanceAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateInstanceAttributeOutput");
        formatter.finish()
    }
}
/// See [`UpdateInstanceAttributeOutput`](crate::output::UpdateInstanceAttributeOutput)
pub mod update_instance_attribute_output {
    /// A builder for [`UpdateInstanceAttributeOutput`](crate::output::UpdateInstanceAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateInstanceAttributeOutput`](crate::output::UpdateInstanceAttributeOutput)
        pub fn build(self) -> crate::output::UpdateInstanceAttributeOutput {
            crate::output::UpdateInstanceAttributeOutput {}
        }
    }
}
impl UpdateInstanceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`UpdateInstanceAttributeOutput`](crate::output::UpdateInstanceAttributeOutput)
    pub fn builder() -> crate::output::update_instance_attribute_output::Builder {
        crate::output::update_instance_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateHoursOfOperationOutput {}
impl std::fmt::Debug for UpdateHoursOfOperationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateHoursOfOperationOutput");
        formatter.finish()
    }
}
/// See [`UpdateHoursOfOperationOutput`](crate::output::UpdateHoursOfOperationOutput)
pub mod update_hours_of_operation_output {
    /// A builder for [`UpdateHoursOfOperationOutput`](crate::output::UpdateHoursOfOperationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateHoursOfOperationOutput`](crate::output::UpdateHoursOfOperationOutput)
        pub fn build(self) -> crate::output::UpdateHoursOfOperationOutput {
            crate::output::UpdateHoursOfOperationOutput {}
        }
    }
}
impl UpdateHoursOfOperationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateHoursOfOperationOutput`](crate::output::UpdateHoursOfOperationOutput)
    pub fn builder() -> crate::output::update_hours_of_operation_output::Builder {
        crate::output::update_hours_of_operation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateContactScheduleOutput {}
impl std::fmt::Debug for UpdateContactScheduleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateContactScheduleOutput");
        formatter.finish()
    }
}
/// See [`UpdateContactScheduleOutput`](crate::output::UpdateContactScheduleOutput)
pub mod update_contact_schedule_output {
    /// A builder for [`UpdateContactScheduleOutput`](crate::output::UpdateContactScheduleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateContactScheduleOutput`](crate::output::UpdateContactScheduleOutput)
        pub fn build(self) -> crate::output::UpdateContactScheduleOutput {
            crate::output::UpdateContactScheduleOutput {}
        }
    }
}
impl UpdateContactScheduleOutput {
    /// Creates a new builder-style object to manufacture [`UpdateContactScheduleOutput`](crate::output::UpdateContactScheduleOutput)
    pub fn builder() -> crate::output::update_contact_schedule_output::Builder {
        crate::output::update_contact_schedule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateContactFlowNameOutput {}
impl std::fmt::Debug for UpdateContactFlowNameOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateContactFlowNameOutput");
        formatter.finish()
    }
}
/// See [`UpdateContactFlowNameOutput`](crate::output::UpdateContactFlowNameOutput)
pub mod update_contact_flow_name_output {
    /// A builder for [`UpdateContactFlowNameOutput`](crate::output::UpdateContactFlowNameOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateContactFlowNameOutput`](crate::output::UpdateContactFlowNameOutput)
        pub fn build(self) -> crate::output::UpdateContactFlowNameOutput {
            crate::output::UpdateContactFlowNameOutput {}
        }
    }
}
impl UpdateContactFlowNameOutput {
    /// Creates a new builder-style object to manufacture [`UpdateContactFlowNameOutput`](crate::output::UpdateContactFlowNameOutput)
    pub fn builder() -> crate::output::update_contact_flow_name_output::Builder {
        crate::output::update_contact_flow_name_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateContactFlowModuleMetadataOutput {}
impl std::fmt::Debug for UpdateContactFlowModuleMetadataOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateContactFlowModuleMetadataOutput");
        formatter.finish()
    }
}
/// See [`UpdateContactFlowModuleMetadataOutput`](crate::output::UpdateContactFlowModuleMetadataOutput)
pub mod update_contact_flow_module_metadata_output {
    /// A builder for [`UpdateContactFlowModuleMetadataOutput`](crate::output::UpdateContactFlowModuleMetadataOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateContactFlowModuleMetadataOutput`](crate::output::UpdateContactFlowModuleMetadataOutput)
        pub fn build(self) -> crate::output::UpdateContactFlowModuleMetadataOutput {
            crate::output::UpdateContactFlowModuleMetadataOutput {}
        }
    }
}
impl UpdateContactFlowModuleMetadataOutput {
    /// Creates a new builder-style object to manufacture [`UpdateContactFlowModuleMetadataOutput`](crate::output::UpdateContactFlowModuleMetadataOutput)
    pub fn builder() -> crate::output::update_contact_flow_module_metadata_output::Builder {
        crate::output::update_contact_flow_module_metadata_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateContactFlowModuleContentOutput {}
impl std::fmt::Debug for UpdateContactFlowModuleContentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateContactFlowModuleContentOutput");
        formatter.finish()
    }
}
/// See [`UpdateContactFlowModuleContentOutput`](crate::output::UpdateContactFlowModuleContentOutput)
pub mod update_contact_flow_module_content_output {
    /// A builder for [`UpdateContactFlowModuleContentOutput`](crate::output::UpdateContactFlowModuleContentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateContactFlowModuleContentOutput`](crate::output::UpdateContactFlowModuleContentOutput)
        pub fn build(self) -> crate::output::UpdateContactFlowModuleContentOutput {
            crate::output::UpdateContactFlowModuleContentOutput {}
        }
    }
}
impl UpdateContactFlowModuleContentOutput {
    /// Creates a new builder-style object to manufacture [`UpdateContactFlowModuleContentOutput`](crate::output::UpdateContactFlowModuleContentOutput)
    pub fn builder() -> crate::output::update_contact_flow_module_content_output::Builder {
        crate::output::update_contact_flow_module_content_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateContactFlowMetadataOutput {}
impl std::fmt::Debug for UpdateContactFlowMetadataOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateContactFlowMetadataOutput");
        formatter.finish()
    }
}
/// See [`UpdateContactFlowMetadataOutput`](crate::output::UpdateContactFlowMetadataOutput)
pub mod update_contact_flow_metadata_output {
    /// A builder for [`UpdateContactFlowMetadataOutput`](crate::output::UpdateContactFlowMetadataOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateContactFlowMetadataOutput`](crate::output::UpdateContactFlowMetadataOutput)
        pub fn build(self) -> crate::output::UpdateContactFlowMetadataOutput {
            crate::output::UpdateContactFlowMetadataOutput {}
        }
    }
}
impl UpdateContactFlowMetadataOutput {
    /// Creates a new builder-style object to manufacture [`UpdateContactFlowMetadataOutput`](crate::output::UpdateContactFlowMetadataOutput)
    pub fn builder() -> crate::output::update_contact_flow_metadata_output::Builder {
        crate::output::update_contact_flow_metadata_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateContactFlowContentOutput {}
impl std::fmt::Debug for UpdateContactFlowContentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateContactFlowContentOutput");
        formatter.finish()
    }
}
/// See [`UpdateContactFlowContentOutput`](crate::output::UpdateContactFlowContentOutput)
pub mod update_contact_flow_content_output {
    /// A builder for [`UpdateContactFlowContentOutput`](crate::output::UpdateContactFlowContentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateContactFlowContentOutput`](crate::output::UpdateContactFlowContentOutput)
        pub fn build(self) -> crate::output::UpdateContactFlowContentOutput {
            crate::output::UpdateContactFlowContentOutput {}
        }
    }
}
impl UpdateContactFlowContentOutput {
    /// Creates a new builder-style object to manufacture [`UpdateContactFlowContentOutput`](crate::output::UpdateContactFlowContentOutput)
    pub fn builder() -> crate::output::update_contact_flow_content_output::Builder {
        crate::output::update_contact_flow_content_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateContactAttributesOutput {}
impl std::fmt::Debug for UpdateContactAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateContactAttributesOutput");
        formatter.finish()
    }
}
/// See [`UpdateContactAttributesOutput`](crate::output::UpdateContactAttributesOutput)
pub mod update_contact_attributes_output {
    /// A builder for [`UpdateContactAttributesOutput`](crate::output::UpdateContactAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateContactAttributesOutput`](crate::output::UpdateContactAttributesOutput)
        pub fn build(self) -> crate::output::UpdateContactAttributesOutput {
            crate::output::UpdateContactAttributesOutput {}
        }
    }
}
impl UpdateContactAttributesOutput {
    /// Creates a new builder-style object to manufacture [`UpdateContactAttributesOutput`](crate::output::UpdateContactAttributesOutput)
    pub fn builder() -> crate::output::update_contact_attributes_output::Builder {
        crate::output::update_contact_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateContactOutput {}
impl std::fmt::Debug for UpdateContactOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateContactOutput");
        formatter.finish()
    }
}
/// See [`UpdateContactOutput`](crate::output::UpdateContactOutput)
pub mod update_contact_output {
    /// A builder for [`UpdateContactOutput`](crate::output::UpdateContactOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateContactOutput`](crate::output::UpdateContactOutput)
        pub fn build(self) -> crate::output::UpdateContactOutput {
            crate::output::UpdateContactOutput {}
        }
    }
}
impl UpdateContactOutput {
    /// Creates a new builder-style object to manufacture [`UpdateContactOutput`](crate::output::UpdateContactOutput)
    pub fn builder() -> crate::output::update_contact_output::Builder {
        crate::output::update_contact_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateAgentStatusOutput {}
impl std::fmt::Debug for UpdateAgentStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAgentStatusOutput");
        formatter.finish()
    }
}
/// See [`UpdateAgentStatusOutput`](crate::output::UpdateAgentStatusOutput)
pub mod update_agent_status_output {
    /// A builder for [`UpdateAgentStatusOutput`](crate::output::UpdateAgentStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateAgentStatusOutput`](crate::output::UpdateAgentStatusOutput)
        pub fn build(self) -> crate::output::UpdateAgentStatusOutput {
            crate::output::UpdateAgentStatusOutput {}
        }
    }
}
impl UpdateAgentStatusOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAgentStatusOutput`](crate::output::UpdateAgentStatusOutput)
    pub fn builder() -> crate::output::update_agent_status_output::Builder {
        crate::output::update_agent_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SuspendContactRecordingOutput {}
impl std::fmt::Debug for SuspendContactRecordingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SuspendContactRecordingOutput");
        formatter.finish()
    }
}
/// See [`SuspendContactRecordingOutput`](crate::output::SuspendContactRecordingOutput)
pub mod suspend_contact_recording_output {
    /// A builder for [`SuspendContactRecordingOutput`](crate::output::SuspendContactRecordingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SuspendContactRecordingOutput`](crate::output::SuspendContactRecordingOutput)
        pub fn build(self) -> crate::output::SuspendContactRecordingOutput {
            crate::output::SuspendContactRecordingOutput {}
        }
    }
}
impl SuspendContactRecordingOutput {
    /// Creates a new builder-style object to manufacture [`SuspendContactRecordingOutput`](crate::output::SuspendContactRecordingOutput)
    pub fn builder() -> crate::output::suspend_contact_recording_output::Builder {
        crate::output::suspend_contact_recording_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopContactStreamingOutput {}
impl std::fmt::Debug for StopContactStreamingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopContactStreamingOutput");
        formatter.finish()
    }
}
/// See [`StopContactStreamingOutput`](crate::output::StopContactStreamingOutput)
pub mod stop_contact_streaming_output {
    /// A builder for [`StopContactStreamingOutput`](crate::output::StopContactStreamingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StopContactStreamingOutput`](crate::output::StopContactStreamingOutput)
        pub fn build(self) -> crate::output::StopContactStreamingOutput {
            crate::output::StopContactStreamingOutput {}
        }
    }
}
impl StopContactStreamingOutput {
    /// Creates a new builder-style object to manufacture [`StopContactStreamingOutput`](crate::output::StopContactStreamingOutput)
    pub fn builder() -> crate::output::stop_contact_streaming_output::Builder {
        crate::output::stop_contact_streaming_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopContactRecordingOutput {}
impl std::fmt::Debug for StopContactRecordingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopContactRecordingOutput");
        formatter.finish()
    }
}
/// See [`StopContactRecordingOutput`](crate::output::StopContactRecordingOutput)
pub mod stop_contact_recording_output {
    /// A builder for [`StopContactRecordingOutput`](crate::output::StopContactRecordingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StopContactRecordingOutput`](crate::output::StopContactRecordingOutput)
        pub fn build(self) -> crate::output::StopContactRecordingOutput {
            crate::output::StopContactRecordingOutput {}
        }
    }
}
impl StopContactRecordingOutput {
    /// Creates a new builder-style object to manufacture [`StopContactRecordingOutput`](crate::output::StopContactRecordingOutput)
    pub fn builder() -> crate::output::stop_contact_recording_output::Builder {
        crate::output::stop_contact_recording_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopContactOutput {}
impl std::fmt::Debug for StopContactOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopContactOutput");
        formatter.finish()
    }
}
/// See [`StopContactOutput`](crate::output::StopContactOutput)
pub mod stop_contact_output {
    /// A builder for [`StopContactOutput`](crate::output::StopContactOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StopContactOutput`](crate::output::StopContactOutput)
        pub fn build(self) -> crate::output::StopContactOutput {
            crate::output::StopContactOutput {}
        }
    }
}
impl StopContactOutput {
    /// Creates a new builder-style object to manufacture [`StopContactOutput`](crate::output::StopContactOutput)
    pub fn builder() -> crate::output::stop_contact_output::Builder {
        crate::output::stop_contact_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartTaskContactOutput {
    /// <p>The identifier of this contact within the Amazon Connect instance.</p>
    pub contact_id: std::option::Option<std::string::String>,
}
impl StartTaskContactOutput {
    /// <p>The identifier of this contact within the Amazon Connect instance.</p>
    pub fn contact_id(&self) -> std::option::Option<&str> {
        self.contact_id.as_deref()
    }
}
impl std::fmt::Debug for StartTaskContactOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartTaskContactOutput");
        formatter.field("contact_id", &self.contact_id);
        formatter.finish()
    }
}
/// See [`StartTaskContactOutput`](crate::output::StartTaskContactOutput)
pub mod start_task_contact_output {
    /// A builder for [`StartTaskContactOutput`](crate::output::StartTaskContactOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) contact_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of this contact within the Amazon Connect instance.</p>
        pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.contact_id = Some(input.into());
            self
        }
        /// <p>The identifier of this contact within the Amazon Connect instance.</p>
        pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.contact_id = input;
            self
        }
        /// Consumes the builder and constructs a [`StartTaskContactOutput`](crate::output::StartTaskContactOutput)
        pub fn build(self) -> crate::output::StartTaskContactOutput {
            crate::output::StartTaskContactOutput {
                contact_id: self.contact_id,
            }
        }
    }
}
impl StartTaskContactOutput {
    /// Creates a new builder-style object to manufacture [`StartTaskContactOutput`](crate::output::StartTaskContactOutput)
    pub fn builder() -> crate::output::start_task_contact_output::Builder {
        crate::output::start_task_contact_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartOutboundVoiceContactOutput {
    /// <p>The identifier of this contact within the Amazon Connect instance.</p>
    pub contact_id: std::option::Option<std::string::String>,
}
impl StartOutboundVoiceContactOutput {
    /// <p>The identifier of this contact within the Amazon Connect instance.</p>
    pub fn contact_id(&self) -> std::option::Option<&str> {
        self.contact_id.as_deref()
    }
}
impl std::fmt::Debug for StartOutboundVoiceContactOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartOutboundVoiceContactOutput");
        formatter.field("contact_id", &self.contact_id);
        formatter.finish()
    }
}
/// See [`StartOutboundVoiceContactOutput`](crate::output::StartOutboundVoiceContactOutput)
pub mod start_outbound_voice_contact_output {
    /// A builder for [`StartOutboundVoiceContactOutput`](crate::output::StartOutboundVoiceContactOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) contact_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of this contact within the Amazon Connect instance.</p>
        pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.contact_id = Some(input.into());
            self
        }
        /// <p>The identifier of this contact within the Amazon Connect instance.</p>
        pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.contact_id = input;
            self
        }
        /// Consumes the builder and constructs a [`StartOutboundVoiceContactOutput`](crate::output::StartOutboundVoiceContactOutput)
        pub fn build(self) -> crate::output::StartOutboundVoiceContactOutput {
            crate::output::StartOutboundVoiceContactOutput {
                contact_id: self.contact_id,
            }
        }
    }
}
impl StartOutboundVoiceContactOutput {
    /// Creates a new builder-style object to manufacture [`StartOutboundVoiceContactOutput`](crate::output::StartOutboundVoiceContactOutput)
    pub fn builder() -> crate::output::start_outbound_voice_contact_output::Builder {
        crate::output::start_outbound_voice_contact_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartContactStreamingOutput {
    /// <p>The identifier of the streaming configuration enabled. </p>
    pub streaming_id: std::option::Option<std::string::String>,
}
impl StartContactStreamingOutput {
    /// <p>The identifier of the streaming configuration enabled. </p>
    pub fn streaming_id(&self) -> std::option::Option<&str> {
        self.streaming_id.as_deref()
    }
}
impl std::fmt::Debug for StartContactStreamingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartContactStreamingOutput");
        formatter.field("streaming_id", &self.streaming_id);
        formatter.finish()
    }
}
/// See [`StartContactStreamingOutput`](crate::output::StartContactStreamingOutput)
pub mod start_contact_streaming_output {
    /// A builder for [`StartContactStreamingOutput`](crate::output::StartContactStreamingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) streaming_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the streaming configuration enabled. </p>
        pub fn streaming_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.streaming_id = Some(input.into());
            self
        }
        /// <p>The identifier of the streaming configuration enabled. </p>
        pub fn set_streaming_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.streaming_id = input;
            self
        }
        /// Consumes the builder and constructs a [`StartContactStreamingOutput`](crate::output::StartContactStreamingOutput)
        pub fn build(self) -> crate::output::StartContactStreamingOutput {
            crate::output::StartContactStreamingOutput {
                streaming_id: self.streaming_id,
            }
        }
    }
}
impl StartContactStreamingOutput {
    /// Creates a new builder-style object to manufacture [`StartContactStreamingOutput`](crate::output::StartContactStreamingOutput)
    pub fn builder() -> crate::output::start_contact_streaming_output::Builder {
        crate::output::start_contact_streaming_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartContactRecordingOutput {}
impl std::fmt::Debug for StartContactRecordingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartContactRecordingOutput");
        formatter.finish()
    }
}
/// See [`StartContactRecordingOutput`](crate::output::StartContactRecordingOutput)
pub mod start_contact_recording_output {
    /// A builder for [`StartContactRecordingOutput`](crate::output::StartContactRecordingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StartContactRecordingOutput`](crate::output::StartContactRecordingOutput)
        pub fn build(self) -> crate::output::StartContactRecordingOutput {
            crate::output::StartContactRecordingOutput {}
        }
    }
}
impl StartContactRecordingOutput {
    /// Creates a new builder-style object to manufacture [`StartContactRecordingOutput`](crate::output::StartContactRecordingOutput)
    pub fn builder() -> crate::output::start_contact_recording_output::Builder {
        crate::output::start_contact_recording_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartChatContactOutput {
    /// <p>The identifier of this contact within the Amazon Connect instance. </p>
    pub contact_id: std::option::Option<std::string::String>,
    /// <p>The identifier for a chat participant. The participantId for a chat participant is the same throughout the chat lifecycle.</p>
    pub participant_id: std::option::Option<std::string::String>,
    /// <p>The token used by the chat participant to call <a href="https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html">CreateParticipantConnection</a>. The participant token is valid for the lifetime of a chat participant.</p>
    pub participant_token: std::option::Option<std::string::String>,
}
impl StartChatContactOutput {
    /// <p>The identifier of this contact within the Amazon Connect instance. </p>
    pub fn contact_id(&self) -> std::option::Option<&str> {
        self.contact_id.as_deref()
    }
    /// <p>The identifier for a chat participant. The participantId for a chat participant is the same throughout the chat lifecycle.</p>
    pub fn participant_id(&self) -> std::option::Option<&str> {
        self.participant_id.as_deref()
    }
    /// <p>The token used by the chat participant to call <a href="https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html">CreateParticipantConnection</a>. The participant token is valid for the lifetime of a chat participant.</p>
    pub fn participant_token(&self) -> std::option::Option<&str> {
        self.participant_token.as_deref()
    }
}
impl std::fmt::Debug for StartChatContactOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartChatContactOutput");
        formatter.field("contact_id", &self.contact_id);
        formatter.field("participant_id", &self.participant_id);
        formatter.field("participant_token", &self.participant_token);
        formatter.finish()
    }
}
/// See [`StartChatContactOutput`](crate::output::StartChatContactOutput)
pub mod start_chat_contact_output {
    /// A builder for [`StartChatContactOutput`](crate::output::StartChatContactOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) contact_id: std::option::Option<std::string::String>,
        pub(crate) participant_id: std::option::Option<std::string::String>,
        pub(crate) participant_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of this contact within the Amazon Connect instance. </p>
        pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.contact_id = Some(input.into());
            self
        }
        /// <p>The identifier of this contact within the Amazon Connect instance. </p>
        pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.contact_id = input;
            self
        }
        /// <p>The identifier for a chat participant. The participantId for a chat participant is the same throughout the chat lifecycle.</p>
        pub fn participant_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.participant_id = Some(input.into());
            self
        }
        /// <p>The identifier for a chat participant. The participantId for a chat participant is the same throughout the chat lifecycle.</p>
        pub fn set_participant_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.participant_id = input;
            self
        }
        /// <p>The token used by the chat participant to call <a href="https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html">CreateParticipantConnection</a>. The participant token is valid for the lifetime of a chat participant.</p>
        pub fn participant_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.participant_token = Some(input.into());
            self
        }
        /// <p>The token used by the chat participant to call <a href="https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html">CreateParticipantConnection</a>. The participant token is valid for the lifetime of a chat participant.</p>
        pub fn set_participant_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.participant_token = input;
            self
        }
        /// Consumes the builder and constructs a [`StartChatContactOutput`](crate::output::StartChatContactOutput)
        pub fn build(self) -> crate::output::StartChatContactOutput {
            crate::output::StartChatContactOutput {
                contact_id: self.contact_id,
                participant_id: self.participant_id,
                participant_token: self.participant_token,
            }
        }
    }
}
impl StartChatContactOutput {
    /// Creates a new builder-style object to manufacture [`StartChatContactOutput`](crate::output::StartChatContactOutput)
    pub fn builder() -> crate::output::start_chat_contact_output::Builder {
        crate::output::start_chat_contact_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResumeContactRecordingOutput {}
impl std::fmt::Debug for ResumeContactRecordingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResumeContactRecordingOutput");
        formatter.finish()
    }
}
/// See [`ResumeContactRecordingOutput`](crate::output::ResumeContactRecordingOutput)
pub mod resume_contact_recording_output {
    /// A builder for [`ResumeContactRecordingOutput`](crate::output::ResumeContactRecordingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ResumeContactRecordingOutput`](crate::output::ResumeContactRecordingOutput)
        pub fn build(self) -> crate::output::ResumeContactRecordingOutput {
            crate::output::ResumeContactRecordingOutput {}
        }
    }
}
impl ResumeContactRecordingOutput {
    /// Creates a new builder-style object to manufacture [`ResumeContactRecordingOutput`](crate::output::ResumeContactRecordingOutput)
    pub fn builder() -> crate::output::resume_contact_recording_output::Builder {
        crate::output::resume_contact_recording_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListUsersOutput {
    /// <p>Information about the users.</p>
    pub user_summary_list: std::option::Option<std::vec::Vec<crate::model::UserSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListUsersOutput {
    /// <p>Information about the users.</p>
    pub fn user_summary_list(&self) -> std::option::Option<&[crate::model::UserSummary]> {
        self.user_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListUsersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListUsersOutput");
        formatter.field("user_summary_list", &self.user_summary_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListUsersOutput`](crate::output::ListUsersOutput)
pub mod list_users_output {
    /// A builder for [`ListUsersOutput`](crate::output::ListUsersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_summary_list: std::option::Option<std::vec::Vec<crate::model::UserSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `user_summary_list`.
        ///
        /// To override the contents of this collection use [`set_user_summary_list`](Self::set_user_summary_list).
        ///
        /// <p>Information about the users.</p>
        pub fn user_summary_list(mut self, input: crate::model::UserSummary) -> Self {
            let mut v = self.user_summary_list.unwrap_or_default();
            v.push(input);
            self.user_summary_list = Some(v);
            self
        }
        /// <p>Information about the users.</p>
        pub fn set_user_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UserSummary>>,
        ) -> Self {
            self.user_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListUsersOutput`](crate::output::ListUsersOutput)
        pub fn build(self) -> crate::output::ListUsersOutput {
            crate::output::ListUsersOutput {
                user_summary_list: self.user_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListUsersOutput {
    /// Creates a new builder-style object to manufacture [`ListUsersOutput`](crate::output::ListUsersOutput)
    pub fn builder() -> crate::output::list_users_output::Builder {
        crate::output::list_users_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListUserHierarchyGroupsOutput {
    /// <p>Information about the hierarchy groups.</p>
    pub user_hierarchy_group_summary_list:
        std::option::Option<std::vec::Vec<crate::model::HierarchyGroupSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListUserHierarchyGroupsOutput {
    /// <p>Information about the hierarchy groups.</p>
    pub fn user_hierarchy_group_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::HierarchyGroupSummary]> {
        self.user_hierarchy_group_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListUserHierarchyGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListUserHierarchyGroupsOutput");
        formatter.field(
            "user_hierarchy_group_summary_list",
            &self.user_hierarchy_group_summary_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListUserHierarchyGroupsOutput`](crate::output::ListUserHierarchyGroupsOutput)
pub mod list_user_hierarchy_groups_output {
    /// A builder for [`ListUserHierarchyGroupsOutput`](crate::output::ListUserHierarchyGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_hierarchy_group_summary_list:
            std::option::Option<std::vec::Vec<crate::model::HierarchyGroupSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `user_hierarchy_group_summary_list`.
        ///
        /// To override the contents of this collection use [`set_user_hierarchy_group_summary_list`](Self::set_user_hierarchy_group_summary_list).
        ///
        /// <p>Information about the hierarchy groups.</p>
        pub fn user_hierarchy_group_summary_list(
            mut self,
            input: crate::model::HierarchyGroupSummary,
        ) -> Self {
            let mut v = self.user_hierarchy_group_summary_list.unwrap_or_default();
            v.push(input);
            self.user_hierarchy_group_summary_list = Some(v);
            self
        }
        /// <p>Information about the hierarchy groups.</p>
        pub fn set_user_hierarchy_group_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::HierarchyGroupSummary>>,
        ) -> Self {
            self.user_hierarchy_group_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListUserHierarchyGroupsOutput`](crate::output::ListUserHierarchyGroupsOutput)
        pub fn build(self) -> crate::output::ListUserHierarchyGroupsOutput {
            crate::output::ListUserHierarchyGroupsOutput {
                user_hierarchy_group_summary_list: self.user_hierarchy_group_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListUserHierarchyGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListUserHierarchyGroupsOutput`](crate::output::ListUserHierarchyGroupsOutput)
    pub fn builder() -> crate::output::list_user_hierarchy_groups_output::Builder {
        crate::output::list_user_hierarchy_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListUseCasesOutput {
    /// <p>The use cases.</p>
    pub use_case_summary_list: std::option::Option<std::vec::Vec<crate::model::UseCase>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListUseCasesOutput {
    /// <p>The use cases.</p>
    pub fn use_case_summary_list(&self) -> std::option::Option<&[crate::model::UseCase]> {
        self.use_case_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListUseCasesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListUseCasesOutput");
        formatter.field("use_case_summary_list", &self.use_case_summary_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListUseCasesOutput`](crate::output::ListUseCasesOutput)
pub mod list_use_cases_output {
    /// A builder for [`ListUseCasesOutput`](crate::output::ListUseCasesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) use_case_summary_list: std::option::Option<std::vec::Vec<crate::model::UseCase>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `use_case_summary_list`.
        ///
        /// To override the contents of this collection use [`set_use_case_summary_list`](Self::set_use_case_summary_list).
        ///
        /// <p>The use cases.</p>
        pub fn use_case_summary_list(mut self, input: crate::model::UseCase) -> Self {
            let mut v = self.use_case_summary_list.unwrap_or_default();
            v.push(input);
            self.use_case_summary_list = Some(v);
            self
        }
        /// <p>The use cases.</p>
        pub fn set_use_case_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UseCase>>,
        ) -> Self {
            self.use_case_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListUseCasesOutput`](crate::output::ListUseCasesOutput)
        pub fn build(self) -> crate::output::ListUseCasesOutput {
            crate::output::ListUseCasesOutput {
                use_case_summary_list: self.use_case_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListUseCasesOutput {
    /// Creates a new builder-style object to manufacture [`ListUseCasesOutput`](crate::output::ListUseCasesOutput)
    pub fn builder() -> crate::output::list_use_cases_output::Builder {
        crate::output::list_use_cases_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>Information about the tags.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ListTagsForResourceOutput {
    /// <p>Information about the tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Information about the tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>Information about the tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListSecurityProfilesOutput {
    /// <p>Information about the security profiles.</p>
    pub security_profile_summary_list:
        std::option::Option<std::vec::Vec<crate::model::SecurityProfileSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListSecurityProfilesOutput {
    /// <p>Information about the security profiles.</p>
    pub fn security_profile_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::SecurityProfileSummary]> {
        self.security_profile_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListSecurityProfilesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListSecurityProfilesOutput");
        formatter.field(
            "security_profile_summary_list",
            &self.security_profile_summary_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListSecurityProfilesOutput`](crate::output::ListSecurityProfilesOutput)
pub mod list_security_profiles_output {
    /// A builder for [`ListSecurityProfilesOutput`](crate::output::ListSecurityProfilesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_profile_summary_list:
            std::option::Option<std::vec::Vec<crate::model::SecurityProfileSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `security_profile_summary_list`.
        ///
        /// To override the contents of this collection use [`set_security_profile_summary_list`](Self::set_security_profile_summary_list).
        ///
        /// <p>Information about the security profiles.</p>
        pub fn security_profile_summary_list(
            mut self,
            input: crate::model::SecurityProfileSummary,
        ) -> Self {
            let mut v = self.security_profile_summary_list.unwrap_or_default();
            v.push(input);
            self.security_profile_summary_list = Some(v);
            self
        }
        /// <p>Information about the security profiles.</p>
        pub fn set_security_profile_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SecurityProfileSummary>>,
        ) -> Self {
            self.security_profile_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSecurityProfilesOutput`](crate::output::ListSecurityProfilesOutput)
        pub fn build(self) -> crate::output::ListSecurityProfilesOutput {
            crate::output::ListSecurityProfilesOutput {
                security_profile_summary_list: self.security_profile_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListSecurityProfilesOutput {
    /// Creates a new builder-style object to manufacture [`ListSecurityProfilesOutput`](crate::output::ListSecurityProfilesOutput)
    pub fn builder() -> crate::output::list_security_profiles_output::Builder {
        crate::output::list_security_profiles_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListSecurityProfilePermissionsOutput {
    /// <p>The permissions granted to the security profile.</p>
    pub permissions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListSecurityProfilePermissionsOutput {
    /// <p>The permissions granted to the security profile.</p>
    pub fn permissions(&self) -> std::option::Option<&[std::string::String]> {
        self.permissions.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListSecurityProfilePermissionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListSecurityProfilePermissionsOutput");
        formatter.field("permissions", &self.permissions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListSecurityProfilePermissionsOutput`](crate::output::ListSecurityProfilePermissionsOutput)
pub mod list_security_profile_permissions_output {
    /// A builder for [`ListSecurityProfilePermissionsOutput`](crate::output::ListSecurityProfilePermissionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) permissions: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `permissions`.
        ///
        /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
        ///
        /// <p>The permissions granted to the security profile.</p>
        pub fn permissions(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.permissions.unwrap_or_default();
            v.push(input.into());
            self.permissions = Some(v);
            self
        }
        /// <p>The permissions granted to the security profile.</p>
        pub fn set_permissions(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.permissions = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSecurityProfilePermissionsOutput`](crate::output::ListSecurityProfilePermissionsOutput)
        pub fn build(self) -> crate::output::ListSecurityProfilePermissionsOutput {
            crate::output::ListSecurityProfilePermissionsOutput {
                permissions: self.permissions,
                next_token: self.next_token,
            }
        }
    }
}
impl ListSecurityProfilePermissionsOutput {
    /// Creates a new builder-style object to manufacture [`ListSecurityProfilePermissionsOutput`](crate::output::ListSecurityProfilePermissionsOutput)
    pub fn builder() -> crate::output::list_security_profile_permissions_output::Builder {
        crate::output::list_security_profile_permissions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListSecurityKeysOutput {
    /// <p>The security keys.</p>
    pub security_keys: std::option::Option<std::vec::Vec<crate::model::SecurityKey>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListSecurityKeysOutput {
    /// <p>The security keys.</p>
    pub fn security_keys(&self) -> std::option::Option<&[crate::model::SecurityKey]> {
        self.security_keys.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListSecurityKeysOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListSecurityKeysOutput");
        formatter.field("security_keys", &self.security_keys);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListSecurityKeysOutput`](crate::output::ListSecurityKeysOutput)
pub mod list_security_keys_output {
    /// A builder for [`ListSecurityKeysOutput`](crate::output::ListSecurityKeysOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_keys: std::option::Option<std::vec::Vec<crate::model::SecurityKey>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `security_keys`.
        ///
        /// To override the contents of this collection use [`set_security_keys`](Self::set_security_keys).
        ///
        /// <p>The security keys.</p>
        pub fn security_keys(mut self, input: crate::model::SecurityKey) -> Self {
            let mut v = self.security_keys.unwrap_or_default();
            v.push(input);
            self.security_keys = Some(v);
            self
        }
        /// <p>The security keys.</p>
        pub fn set_security_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SecurityKey>>,
        ) -> Self {
            self.security_keys = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSecurityKeysOutput`](crate::output::ListSecurityKeysOutput)
        pub fn build(self) -> crate::output::ListSecurityKeysOutput {
            crate::output::ListSecurityKeysOutput {
                security_keys: self.security_keys,
                next_token: self.next_token,
            }
        }
    }
}
impl ListSecurityKeysOutput {
    /// Creates a new builder-style object to manufacture [`ListSecurityKeysOutput`](crate::output::ListSecurityKeysOutput)
    pub fn builder() -> crate::output::list_security_keys_output::Builder {
        crate::output::list_security_keys_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListRoutingProfilesOutput {
    /// <p>Information about the routing profiles.</p>
    pub routing_profile_summary_list:
        std::option::Option<std::vec::Vec<crate::model::RoutingProfileSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListRoutingProfilesOutput {
    /// <p>Information about the routing profiles.</p>
    pub fn routing_profile_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::RoutingProfileSummary]> {
        self.routing_profile_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListRoutingProfilesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListRoutingProfilesOutput");
        formatter.field(
            "routing_profile_summary_list",
            &self.routing_profile_summary_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListRoutingProfilesOutput`](crate::output::ListRoutingProfilesOutput)
pub mod list_routing_profiles_output {
    /// A builder for [`ListRoutingProfilesOutput`](crate::output::ListRoutingProfilesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) routing_profile_summary_list:
            std::option::Option<std::vec::Vec<crate::model::RoutingProfileSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `routing_profile_summary_list`.
        ///
        /// To override the contents of this collection use [`set_routing_profile_summary_list`](Self::set_routing_profile_summary_list).
        ///
        /// <p>Information about the routing profiles.</p>
        pub fn routing_profile_summary_list(
            mut self,
            input: crate::model::RoutingProfileSummary,
        ) -> Self {
            let mut v = self.routing_profile_summary_list.unwrap_or_default();
            v.push(input);
            self.routing_profile_summary_list = Some(v);
            self
        }
        /// <p>Information about the routing profiles.</p>
        pub fn set_routing_profile_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RoutingProfileSummary>>,
        ) -> Self {
            self.routing_profile_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListRoutingProfilesOutput`](crate::output::ListRoutingProfilesOutput)
        pub fn build(self) -> crate::output::ListRoutingProfilesOutput {
            crate::output::ListRoutingProfilesOutput {
                routing_profile_summary_list: self.routing_profile_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListRoutingProfilesOutput {
    /// Creates a new builder-style object to manufacture [`ListRoutingProfilesOutput`](crate::output::ListRoutingProfilesOutput)
    pub fn builder() -> crate::output::list_routing_profiles_output::Builder {
        crate::output::list_routing_profiles_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListRoutingProfileQueuesOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the routing profiles.</p>
    pub routing_profile_queue_config_summary_list:
        std::option::Option<std::vec::Vec<crate::model::RoutingProfileQueueConfigSummary>>,
}
impl ListRoutingProfileQueuesOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the routing profiles.</p>
    pub fn routing_profile_queue_config_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::RoutingProfileQueueConfigSummary]> {
        self.routing_profile_queue_config_summary_list.as_deref()
    }
}
impl std::fmt::Debug for ListRoutingProfileQueuesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListRoutingProfileQueuesOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field(
            "routing_profile_queue_config_summary_list",
            &self.routing_profile_queue_config_summary_list,
        );
        formatter.finish()
    }
}
/// See [`ListRoutingProfileQueuesOutput`](crate::output::ListRoutingProfileQueuesOutput)
pub mod list_routing_profile_queues_output {
    /// A builder for [`ListRoutingProfileQueuesOutput`](crate::output::ListRoutingProfileQueuesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) routing_profile_queue_config_summary_list:
            std::option::Option<std::vec::Vec<crate::model::RoutingProfileQueueConfigSummary>>,
    }
    impl Builder {
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `routing_profile_queue_config_summary_list`.
        ///
        /// To override the contents of this collection use [`set_routing_profile_queue_config_summary_list`](Self::set_routing_profile_queue_config_summary_list).
        ///
        /// <p>Information about the routing profiles.</p>
        pub fn routing_profile_queue_config_summary_list(
            mut self,
            input: crate::model::RoutingProfileQueueConfigSummary,
        ) -> Self {
            let mut v = self
                .routing_profile_queue_config_summary_list
                .unwrap_or_default();
            v.push(input);
            self.routing_profile_queue_config_summary_list = Some(v);
            self
        }
        /// <p>Information about the routing profiles.</p>
        pub fn set_routing_profile_queue_config_summary_list(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::RoutingProfileQueueConfigSummary>,
            >,
        ) -> Self {
            self.routing_profile_queue_config_summary_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListRoutingProfileQueuesOutput`](crate::output::ListRoutingProfileQueuesOutput)
        pub fn build(self) -> crate::output::ListRoutingProfileQueuesOutput {
            crate::output::ListRoutingProfileQueuesOutput {
                next_token: self.next_token,
                routing_profile_queue_config_summary_list: self
                    .routing_profile_queue_config_summary_list,
            }
        }
    }
}
impl ListRoutingProfileQueuesOutput {
    /// Creates a new builder-style object to manufacture [`ListRoutingProfileQueuesOutput`](crate::output::ListRoutingProfileQueuesOutput)
    pub fn builder() -> crate::output::list_routing_profile_queues_output::Builder {
        crate::output::list_routing_profile_queues_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListQuickConnectsOutput {
    /// <p>Information about the quick connects.</p>
    pub quick_connect_summary_list:
        std::option::Option<std::vec::Vec<crate::model::QuickConnectSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListQuickConnectsOutput {
    /// <p>Information about the quick connects.</p>
    pub fn quick_connect_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::QuickConnectSummary]> {
        self.quick_connect_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListQuickConnectsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListQuickConnectsOutput");
        formatter.field(
            "quick_connect_summary_list",
            &self.quick_connect_summary_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListQuickConnectsOutput`](crate::output::ListQuickConnectsOutput)
pub mod list_quick_connects_output {
    /// A builder for [`ListQuickConnectsOutput`](crate::output::ListQuickConnectsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) quick_connect_summary_list:
            std::option::Option<std::vec::Vec<crate::model::QuickConnectSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `quick_connect_summary_list`.
        ///
        /// To override the contents of this collection use [`set_quick_connect_summary_list`](Self::set_quick_connect_summary_list).
        ///
        /// <p>Information about the quick connects.</p>
        pub fn quick_connect_summary_list(
            mut self,
            input: crate::model::QuickConnectSummary,
        ) -> Self {
            let mut v = self.quick_connect_summary_list.unwrap_or_default();
            v.push(input);
            self.quick_connect_summary_list = Some(v);
            self
        }
        /// <p>Information about the quick connects.</p>
        pub fn set_quick_connect_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::QuickConnectSummary>>,
        ) -> Self {
            self.quick_connect_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListQuickConnectsOutput`](crate::output::ListQuickConnectsOutput)
        pub fn build(self) -> crate::output::ListQuickConnectsOutput {
            crate::output::ListQuickConnectsOutput {
                quick_connect_summary_list: self.quick_connect_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListQuickConnectsOutput {
    /// Creates a new builder-style object to manufacture [`ListQuickConnectsOutput`](crate::output::ListQuickConnectsOutput)
    pub fn builder() -> crate::output::list_quick_connects_output::Builder {
        crate::output::list_quick_connects_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListQueuesOutput {
    /// <p>Information about the queues.</p>
    pub queue_summary_list: std::option::Option<std::vec::Vec<crate::model::QueueSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListQueuesOutput {
    /// <p>Information about the queues.</p>
    pub fn queue_summary_list(&self) -> std::option::Option<&[crate::model::QueueSummary]> {
        self.queue_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListQueuesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListQueuesOutput");
        formatter.field("queue_summary_list", &self.queue_summary_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListQueuesOutput`](crate::output::ListQueuesOutput)
pub mod list_queues_output {
    /// A builder for [`ListQueuesOutput`](crate::output::ListQueuesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) queue_summary_list:
            std::option::Option<std::vec::Vec<crate::model::QueueSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `queue_summary_list`.
        ///
        /// To override the contents of this collection use [`set_queue_summary_list`](Self::set_queue_summary_list).
        ///
        /// <p>Information about the queues.</p>
        pub fn queue_summary_list(mut self, input: crate::model::QueueSummary) -> Self {
            let mut v = self.queue_summary_list.unwrap_or_default();
            v.push(input);
            self.queue_summary_list = Some(v);
            self
        }
        /// <p>Information about the queues.</p>
        pub fn set_queue_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::QueueSummary>>,
        ) -> Self {
            self.queue_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListQueuesOutput`](crate::output::ListQueuesOutput)
        pub fn build(self) -> crate::output::ListQueuesOutput {
            crate::output::ListQueuesOutput {
                queue_summary_list: self.queue_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListQueuesOutput {
    /// Creates a new builder-style object to manufacture [`ListQueuesOutput`](crate::output::ListQueuesOutput)
    pub fn builder() -> crate::output::list_queues_output::Builder {
        crate::output::list_queues_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListQueueQuickConnectsOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the quick connects.</p>
    pub quick_connect_summary_list:
        std::option::Option<std::vec::Vec<crate::model::QuickConnectSummary>>,
}
impl ListQueueQuickConnectsOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the quick connects.</p>
    pub fn quick_connect_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::QuickConnectSummary]> {
        self.quick_connect_summary_list.as_deref()
    }
}
impl std::fmt::Debug for ListQueueQuickConnectsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListQueueQuickConnectsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field(
            "quick_connect_summary_list",
            &self.quick_connect_summary_list,
        );
        formatter.finish()
    }
}
/// See [`ListQueueQuickConnectsOutput`](crate::output::ListQueueQuickConnectsOutput)
pub mod list_queue_quick_connects_output {
    /// A builder for [`ListQueueQuickConnectsOutput`](crate::output::ListQueueQuickConnectsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) quick_connect_summary_list:
            std::option::Option<std::vec::Vec<crate::model::QuickConnectSummary>>,
    }
    impl Builder {
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `quick_connect_summary_list`.
        ///
        /// To override the contents of this collection use [`set_quick_connect_summary_list`](Self::set_quick_connect_summary_list).
        ///
        /// <p>Information about the quick connects.</p>
        pub fn quick_connect_summary_list(
            mut self,
            input: crate::model::QuickConnectSummary,
        ) -> Self {
            let mut v = self.quick_connect_summary_list.unwrap_or_default();
            v.push(input);
            self.quick_connect_summary_list = Some(v);
            self
        }
        /// <p>Information about the quick connects.</p>
        pub fn set_quick_connect_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::QuickConnectSummary>>,
        ) -> Self {
            self.quick_connect_summary_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListQueueQuickConnectsOutput`](crate::output::ListQueueQuickConnectsOutput)
        pub fn build(self) -> crate::output::ListQueueQuickConnectsOutput {
            crate::output::ListQueueQuickConnectsOutput {
                next_token: self.next_token,
                quick_connect_summary_list: self.quick_connect_summary_list,
            }
        }
    }
}
impl ListQueueQuickConnectsOutput {
    /// Creates a new builder-style object to manufacture [`ListQueueQuickConnectsOutput`](crate::output::ListQueueQuickConnectsOutput)
    pub fn builder() -> crate::output::list_queue_quick_connects_output::Builder {
        crate::output::list_queue_quick_connects_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPromptsOutput {
    /// <p>Information about the prompts.</p>
    pub prompt_summary_list: std::option::Option<std::vec::Vec<crate::model::PromptSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListPromptsOutput {
    /// <p>Information about the prompts.</p>
    pub fn prompt_summary_list(&self) -> std::option::Option<&[crate::model::PromptSummary]> {
        self.prompt_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListPromptsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPromptsOutput");
        formatter.field("prompt_summary_list", &self.prompt_summary_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListPromptsOutput`](crate::output::ListPromptsOutput)
pub mod list_prompts_output {
    /// A builder for [`ListPromptsOutput`](crate::output::ListPromptsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prompt_summary_list:
            std::option::Option<std::vec::Vec<crate::model::PromptSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `prompt_summary_list`.
        ///
        /// To override the contents of this collection use [`set_prompt_summary_list`](Self::set_prompt_summary_list).
        ///
        /// <p>Information about the prompts.</p>
        pub fn prompt_summary_list(mut self, input: crate::model::PromptSummary) -> Self {
            let mut v = self.prompt_summary_list.unwrap_or_default();
            v.push(input);
            self.prompt_summary_list = Some(v);
            self
        }
        /// <p>Information about the prompts.</p>
        pub fn set_prompt_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PromptSummary>>,
        ) -> Self {
            self.prompt_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPromptsOutput`](crate::output::ListPromptsOutput)
        pub fn build(self) -> crate::output::ListPromptsOutput {
            crate::output::ListPromptsOutput {
                prompt_summary_list: self.prompt_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListPromptsOutput {
    /// Creates a new builder-style object to manufacture [`ListPromptsOutput`](crate::output::ListPromptsOutput)
    pub fn builder() -> crate::output::list_prompts_output::Builder {
        crate::output::list_prompts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPhoneNumbersOutput {
    /// <p>Information about the phone numbers.</p>
    pub phone_number_summary_list:
        std::option::Option<std::vec::Vec<crate::model::PhoneNumberSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListPhoneNumbersOutput {
    /// <p>Information about the phone numbers.</p>
    pub fn phone_number_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::PhoneNumberSummary]> {
        self.phone_number_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListPhoneNumbersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPhoneNumbersOutput");
        formatter.field("phone_number_summary_list", &self.phone_number_summary_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListPhoneNumbersOutput`](crate::output::ListPhoneNumbersOutput)
pub mod list_phone_numbers_output {
    /// A builder for [`ListPhoneNumbersOutput`](crate::output::ListPhoneNumbersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_number_summary_list:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `phone_number_summary_list`.
        ///
        /// To override the contents of this collection use [`set_phone_number_summary_list`](Self::set_phone_number_summary_list).
        ///
        /// <p>Information about the phone numbers.</p>
        pub fn phone_number_summary_list(
            mut self,
            input: crate::model::PhoneNumberSummary,
        ) -> Self {
            let mut v = self.phone_number_summary_list.unwrap_or_default();
            v.push(input);
            self.phone_number_summary_list = Some(v);
            self
        }
        /// <p>Information about the phone numbers.</p>
        pub fn set_phone_number_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberSummary>>,
        ) -> Self {
            self.phone_number_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPhoneNumbersOutput`](crate::output::ListPhoneNumbersOutput)
        pub fn build(self) -> crate::output::ListPhoneNumbersOutput {
            crate::output::ListPhoneNumbersOutput {
                phone_number_summary_list: self.phone_number_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListPhoneNumbersOutput {
    /// Creates a new builder-style object to manufacture [`ListPhoneNumbersOutput`](crate::output::ListPhoneNumbersOutput)
    pub fn builder() -> crate::output::list_phone_numbers_output::Builder {
        crate::output::list_phone_numbers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListLexBotsOutput {
    /// <p>The names and Regions of the Amazon Lex bots associated with the specified instance.</p>
    pub lex_bots: std::option::Option<std::vec::Vec<crate::model::LexBot>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListLexBotsOutput {
    /// <p>The names and Regions of the Amazon Lex bots associated with the specified instance.</p>
    pub fn lex_bots(&self) -> std::option::Option<&[crate::model::LexBot]> {
        self.lex_bots.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListLexBotsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListLexBotsOutput");
        formatter.field("lex_bots", &self.lex_bots);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListLexBotsOutput`](crate::output::ListLexBotsOutput)
pub mod list_lex_bots_output {
    /// A builder for [`ListLexBotsOutput`](crate::output::ListLexBotsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lex_bots: std::option::Option<std::vec::Vec<crate::model::LexBot>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `lex_bots`.
        ///
        /// To override the contents of this collection use [`set_lex_bots`](Self::set_lex_bots).
        ///
        /// <p>The names and Regions of the Amazon Lex bots associated with the specified instance.</p>
        pub fn lex_bots(mut self, input: crate::model::LexBot) -> Self {
            let mut v = self.lex_bots.unwrap_or_default();
            v.push(input);
            self.lex_bots = Some(v);
            self
        }
        /// <p>The names and Regions of the Amazon Lex bots associated with the specified instance.</p>
        pub fn set_lex_bots(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LexBot>>,
        ) -> Self {
            self.lex_bots = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListLexBotsOutput`](crate::output::ListLexBotsOutput)
        pub fn build(self) -> crate::output::ListLexBotsOutput {
            crate::output::ListLexBotsOutput {
                lex_bots: self.lex_bots,
                next_token: self.next_token,
            }
        }
    }
}
impl ListLexBotsOutput {
    /// Creates a new builder-style object to manufacture [`ListLexBotsOutput`](crate::output::ListLexBotsOutput)
    pub fn builder() -> crate::output::list_lex_bots_output::Builder {
        crate::output::list_lex_bots_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListLambdaFunctionsOutput {
    /// <p>The Lambdafunction ARNs associated with the specified instance.</p>
    pub lambda_functions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListLambdaFunctionsOutput {
    /// <p>The Lambdafunction ARNs associated with the specified instance.</p>
    pub fn lambda_functions(&self) -> std::option::Option<&[std::string::String]> {
        self.lambda_functions.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListLambdaFunctionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListLambdaFunctionsOutput");
        formatter.field("lambda_functions", &self.lambda_functions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListLambdaFunctionsOutput`](crate::output::ListLambdaFunctionsOutput)
pub mod list_lambda_functions_output {
    /// A builder for [`ListLambdaFunctionsOutput`](crate::output::ListLambdaFunctionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lambda_functions: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `lambda_functions`.
        ///
        /// To override the contents of this collection use [`set_lambda_functions`](Self::set_lambda_functions).
        ///
        /// <p>The Lambdafunction ARNs associated with the specified instance.</p>
        pub fn lambda_functions(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.lambda_functions.unwrap_or_default();
            v.push(input.into());
            self.lambda_functions = Some(v);
            self
        }
        /// <p>The Lambdafunction ARNs associated with the specified instance.</p>
        pub fn set_lambda_functions(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.lambda_functions = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListLambdaFunctionsOutput`](crate::output::ListLambdaFunctionsOutput)
        pub fn build(self) -> crate::output::ListLambdaFunctionsOutput {
            crate::output::ListLambdaFunctionsOutput {
                lambda_functions: self.lambda_functions,
                next_token: self.next_token,
            }
        }
    }
}
impl ListLambdaFunctionsOutput {
    /// Creates a new builder-style object to manufacture [`ListLambdaFunctionsOutput`](crate::output::ListLambdaFunctionsOutput)
    pub fn builder() -> crate::output::list_lambda_functions_output::Builder {
        crate::output::list_lambda_functions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListIntegrationAssociationsOutput {
    /// <p>The associations.</p>
    pub integration_association_summary_list:
        std::option::Option<std::vec::Vec<crate::model::IntegrationAssociationSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListIntegrationAssociationsOutput {
    /// <p>The associations.</p>
    pub fn integration_association_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::IntegrationAssociationSummary]> {
        self.integration_association_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListIntegrationAssociationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListIntegrationAssociationsOutput");
        formatter.field(
            "integration_association_summary_list",
            &self.integration_association_summary_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListIntegrationAssociationsOutput`](crate::output::ListIntegrationAssociationsOutput)
pub mod list_integration_associations_output {
    /// A builder for [`ListIntegrationAssociationsOutput`](crate::output::ListIntegrationAssociationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) integration_association_summary_list:
            std::option::Option<std::vec::Vec<crate::model::IntegrationAssociationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `integration_association_summary_list`.
        ///
        /// To override the contents of this collection use [`set_integration_association_summary_list`](Self::set_integration_association_summary_list).
        ///
        /// <p>The associations.</p>
        pub fn integration_association_summary_list(
            mut self,
            input: crate::model::IntegrationAssociationSummary,
        ) -> Self {
            let mut v = self
                .integration_association_summary_list
                .unwrap_or_default();
            v.push(input);
            self.integration_association_summary_list = Some(v);
            self
        }
        /// <p>The associations.</p>
        pub fn set_integration_association_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IntegrationAssociationSummary>>,
        ) -> Self {
            self.integration_association_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListIntegrationAssociationsOutput`](crate::output::ListIntegrationAssociationsOutput)
        pub fn build(self) -> crate::output::ListIntegrationAssociationsOutput {
            crate::output::ListIntegrationAssociationsOutput {
                integration_association_summary_list: self.integration_association_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListIntegrationAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`ListIntegrationAssociationsOutput`](crate::output::ListIntegrationAssociationsOutput)
    pub fn builder() -> crate::output::list_integration_associations_output::Builder {
        crate::output::list_integration_associations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListInstanceStorageConfigsOutput {
    /// <p>A valid storage type.</p>
    pub storage_configs: std::option::Option<std::vec::Vec<crate::model::InstanceStorageConfig>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListInstanceStorageConfigsOutput {
    /// <p>A valid storage type.</p>
    pub fn storage_configs(&self) -> std::option::Option<&[crate::model::InstanceStorageConfig]> {
        self.storage_configs.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListInstanceStorageConfigsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListInstanceStorageConfigsOutput");
        formatter.field("storage_configs", &self.storage_configs);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListInstanceStorageConfigsOutput`](crate::output::ListInstanceStorageConfigsOutput)
pub mod list_instance_storage_configs_output {
    /// A builder for [`ListInstanceStorageConfigsOutput`](crate::output::ListInstanceStorageConfigsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) storage_configs:
            std::option::Option<std::vec::Vec<crate::model::InstanceStorageConfig>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `storage_configs`.
        ///
        /// To override the contents of this collection use [`set_storage_configs`](Self::set_storage_configs).
        ///
        /// <p>A valid storage type.</p>
        pub fn storage_configs(mut self, input: crate::model::InstanceStorageConfig) -> Self {
            let mut v = self.storage_configs.unwrap_or_default();
            v.push(input);
            self.storage_configs = Some(v);
            self
        }
        /// <p>A valid storage type.</p>
        pub fn set_storage_configs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceStorageConfig>>,
        ) -> Self {
            self.storage_configs = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListInstanceStorageConfigsOutput`](crate::output::ListInstanceStorageConfigsOutput)
        pub fn build(self) -> crate::output::ListInstanceStorageConfigsOutput {
            crate::output::ListInstanceStorageConfigsOutput {
                storage_configs: self.storage_configs,
                next_token: self.next_token,
            }
        }
    }
}
impl ListInstanceStorageConfigsOutput {
    /// Creates a new builder-style object to manufacture [`ListInstanceStorageConfigsOutput`](crate::output::ListInstanceStorageConfigsOutput)
    pub fn builder() -> crate::output::list_instance_storage_configs_output::Builder {
        crate::output::list_instance_storage_configs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListInstancesOutput {
    /// <p>Information about the instances.</p>
    pub instance_summary_list: std::option::Option<std::vec::Vec<crate::model::InstanceSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListInstancesOutput {
    /// <p>Information about the instances.</p>
    pub fn instance_summary_list(&self) -> std::option::Option<&[crate::model::InstanceSummary]> {
        self.instance_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListInstancesOutput");
        formatter.field("instance_summary_list", &self.instance_summary_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListInstancesOutput`](crate::output::ListInstancesOutput)
pub mod list_instances_output {
    /// A builder for [`ListInstancesOutput`](crate::output::ListInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_summary_list:
            std::option::Option<std::vec::Vec<crate::model::InstanceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `instance_summary_list`.
        ///
        /// To override the contents of this collection use [`set_instance_summary_list`](Self::set_instance_summary_list).
        ///
        /// <p>Information about the instances.</p>
        pub fn instance_summary_list(mut self, input: crate::model::InstanceSummary) -> Self {
            let mut v = self.instance_summary_list.unwrap_or_default();
            v.push(input);
            self.instance_summary_list = Some(v);
            self
        }
        /// <p>Information about the instances.</p>
        pub fn set_instance_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceSummary>>,
        ) -> Self {
            self.instance_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListInstancesOutput`](crate::output::ListInstancesOutput)
        pub fn build(self) -> crate::output::ListInstancesOutput {
            crate::output::ListInstancesOutput {
                instance_summary_list: self.instance_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListInstancesOutput {
    /// Creates a new builder-style object to manufacture [`ListInstancesOutput`](crate::output::ListInstancesOutput)
    pub fn builder() -> crate::output::list_instances_output::Builder {
        crate::output::list_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListInstanceAttributesOutput {
    /// <p>The attribute types.</p>
    pub attributes: std::option::Option<std::vec::Vec<crate::model::Attribute>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListInstanceAttributesOutput {
    /// <p>The attribute types.</p>
    pub fn attributes(&self) -> std::option::Option<&[crate::model::Attribute]> {
        self.attributes.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListInstanceAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListInstanceAttributesOutput");
        formatter.field("attributes", &self.attributes);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListInstanceAttributesOutput`](crate::output::ListInstanceAttributesOutput)
pub mod list_instance_attributes_output {
    /// A builder for [`ListInstanceAttributesOutput`](crate::output::ListInstanceAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attributes: std::option::Option<std::vec::Vec<crate::model::Attribute>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        ///
        /// <p>The attribute types.</p>
        pub fn attributes(mut self, input: crate::model::Attribute) -> Self {
            let mut v = self.attributes.unwrap_or_default();
            v.push(input);
            self.attributes = Some(v);
            self
        }
        /// <p>The attribute types.</p>
        pub fn set_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Attribute>>,
        ) -> Self {
            self.attributes = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListInstanceAttributesOutput`](crate::output::ListInstanceAttributesOutput)
        pub fn build(self) -> crate::output::ListInstanceAttributesOutput {
            crate::output::ListInstanceAttributesOutput {
                attributes: self.attributes,
                next_token: self.next_token,
            }
        }
    }
}
impl ListInstanceAttributesOutput {
    /// Creates a new builder-style object to manufacture [`ListInstanceAttributesOutput`](crate::output::ListInstanceAttributesOutput)
    pub fn builder() -> crate::output::list_instance_attributes_output::Builder {
        crate::output::list_instance_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListHoursOfOperationsOutput {
    /// <p>Information about the hours of operation.</p>
    pub hours_of_operation_summary_list:
        std::option::Option<std::vec::Vec<crate::model::HoursOfOperationSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListHoursOfOperationsOutput {
    /// <p>Information about the hours of operation.</p>
    pub fn hours_of_operation_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::HoursOfOperationSummary]> {
        self.hours_of_operation_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListHoursOfOperationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListHoursOfOperationsOutput");
        formatter.field(
            "hours_of_operation_summary_list",
            &self.hours_of_operation_summary_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListHoursOfOperationsOutput`](crate::output::ListHoursOfOperationsOutput)
pub mod list_hours_of_operations_output {
    /// A builder for [`ListHoursOfOperationsOutput`](crate::output::ListHoursOfOperationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) hours_of_operation_summary_list:
            std::option::Option<std::vec::Vec<crate::model::HoursOfOperationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `hours_of_operation_summary_list`.
        ///
        /// To override the contents of this collection use [`set_hours_of_operation_summary_list`](Self::set_hours_of_operation_summary_list).
        ///
        /// <p>Information about the hours of operation.</p>
        pub fn hours_of_operation_summary_list(
            mut self,
            input: crate::model::HoursOfOperationSummary,
        ) -> Self {
            let mut v = self.hours_of_operation_summary_list.unwrap_or_default();
            v.push(input);
            self.hours_of_operation_summary_list = Some(v);
            self
        }
        /// <p>Information about the hours of operation.</p>
        pub fn set_hours_of_operation_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::HoursOfOperationSummary>>,
        ) -> Self {
            self.hours_of_operation_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListHoursOfOperationsOutput`](crate::output::ListHoursOfOperationsOutput)
        pub fn build(self) -> crate::output::ListHoursOfOperationsOutput {
            crate::output::ListHoursOfOperationsOutput {
                hours_of_operation_summary_list: self.hours_of_operation_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListHoursOfOperationsOutput {
    /// Creates a new builder-style object to manufacture [`ListHoursOfOperationsOutput`](crate::output::ListHoursOfOperationsOutput)
    pub fn builder() -> crate::output::list_hours_of_operations_output::Builder {
        crate::output::list_hours_of_operations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListContactReferencesOutput {
    /// <p>Information about the contact flows.</p>
    pub reference_summary_list: std::option::Option<std::vec::Vec<crate::model::ReferenceSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p> <important>
    /// <p>This is always returned as null in the response.</p>
    /// </important>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListContactReferencesOutput {
    /// <p>Information about the contact flows.</p>
    pub fn reference_summary_list(&self) -> std::option::Option<&[crate::model::ReferenceSummary]> {
        self.reference_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p> <important>
    /// <p>This is always returned as null in the response.</p>
    /// </important>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListContactReferencesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListContactReferencesOutput");
        formatter.field("reference_summary_list", &self.reference_summary_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListContactReferencesOutput`](crate::output::ListContactReferencesOutput)
pub mod list_contact_references_output {
    /// A builder for [`ListContactReferencesOutput`](crate::output::ListContactReferencesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reference_summary_list:
            std::option::Option<std::vec::Vec<crate::model::ReferenceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `reference_summary_list`.
        ///
        /// To override the contents of this collection use [`set_reference_summary_list`](Self::set_reference_summary_list).
        ///
        /// <p>Information about the contact flows.</p>
        pub fn reference_summary_list(mut self, input: crate::model::ReferenceSummary) -> Self {
            let mut v = self.reference_summary_list.unwrap_or_default();
            v.push(input);
            self.reference_summary_list = Some(v);
            self
        }
        /// <p>Information about the contact flows.</p>
        pub fn set_reference_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReferenceSummary>>,
        ) -> Self {
            self.reference_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p> <important>
        /// <p>This is always returned as null in the response.</p>
        /// </important>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p> <important>
        /// <p>This is always returned as null in the response.</p>
        /// </important>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListContactReferencesOutput`](crate::output::ListContactReferencesOutput)
        pub fn build(self) -> crate::output::ListContactReferencesOutput {
            crate::output::ListContactReferencesOutput {
                reference_summary_list: self.reference_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListContactReferencesOutput {
    /// Creates a new builder-style object to manufacture [`ListContactReferencesOutput`](crate::output::ListContactReferencesOutput)
    pub fn builder() -> crate::output::list_contact_references_output::Builder {
        crate::output::list_contact_references_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListContactFlowsOutput {
    /// <p>Information about the contact flows.</p>
    pub contact_flow_summary_list:
        std::option::Option<std::vec::Vec<crate::model::ContactFlowSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListContactFlowsOutput {
    /// <p>Information about the contact flows.</p>
    pub fn contact_flow_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::ContactFlowSummary]> {
        self.contact_flow_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListContactFlowsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListContactFlowsOutput");
        formatter.field("contact_flow_summary_list", &self.contact_flow_summary_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListContactFlowsOutput`](crate::output::ListContactFlowsOutput)
pub mod list_contact_flows_output {
    /// A builder for [`ListContactFlowsOutput`](crate::output::ListContactFlowsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) contact_flow_summary_list:
            std::option::Option<std::vec::Vec<crate::model::ContactFlowSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `contact_flow_summary_list`.
        ///
        /// To override the contents of this collection use [`set_contact_flow_summary_list`](Self::set_contact_flow_summary_list).
        ///
        /// <p>Information about the contact flows.</p>
        pub fn contact_flow_summary_list(
            mut self,
            input: crate::model::ContactFlowSummary,
        ) -> Self {
            let mut v = self.contact_flow_summary_list.unwrap_or_default();
            v.push(input);
            self.contact_flow_summary_list = Some(v);
            self
        }
        /// <p>Information about the contact flows.</p>
        pub fn set_contact_flow_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ContactFlowSummary>>,
        ) -> Self {
            self.contact_flow_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListContactFlowsOutput`](crate::output::ListContactFlowsOutput)
        pub fn build(self) -> crate::output::ListContactFlowsOutput {
            crate::output::ListContactFlowsOutput {
                contact_flow_summary_list: self.contact_flow_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListContactFlowsOutput {
    /// Creates a new builder-style object to manufacture [`ListContactFlowsOutput`](crate::output::ListContactFlowsOutput)
    pub fn builder() -> crate::output::list_contact_flows_output::Builder {
        crate::output::list_contact_flows_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListContactFlowModulesOutput {
    /// <p>Information about the contact flow module.</p>
    pub contact_flow_modules_summary_list:
        std::option::Option<std::vec::Vec<crate::model::ContactFlowModuleSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListContactFlowModulesOutput {
    /// <p>Information about the contact flow module.</p>
    pub fn contact_flow_modules_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::ContactFlowModuleSummary]> {
        self.contact_flow_modules_summary_list.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListContactFlowModulesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListContactFlowModulesOutput");
        formatter.field(
            "contact_flow_modules_summary_list",
            &self.contact_flow_modules_summary_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListContactFlowModulesOutput`](crate::output::ListContactFlowModulesOutput)
pub mod list_contact_flow_modules_output {
    /// A builder for [`ListContactFlowModulesOutput`](crate::output::ListContactFlowModulesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) contact_flow_modules_summary_list:
            std::option::Option<std::vec::Vec<crate::model::ContactFlowModuleSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `contact_flow_modules_summary_list`.
        ///
        /// To override the contents of this collection use [`set_contact_flow_modules_summary_list`](Self::set_contact_flow_modules_summary_list).
        ///
        /// <p>Information about the contact flow module.</p>
        pub fn contact_flow_modules_summary_list(
            mut self,
            input: crate::model::ContactFlowModuleSummary,
        ) -> Self {
            let mut v = self.contact_flow_modules_summary_list.unwrap_or_default();
            v.push(input);
            self.contact_flow_modules_summary_list = Some(v);
            self
        }
        /// <p>Information about the contact flow module.</p>
        pub fn set_contact_flow_modules_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ContactFlowModuleSummary>>,
        ) -> Self {
            self.contact_flow_modules_summary_list = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListContactFlowModulesOutput`](crate::output::ListContactFlowModulesOutput)
        pub fn build(self) -> crate::output::ListContactFlowModulesOutput {
            crate::output::ListContactFlowModulesOutput {
                contact_flow_modules_summary_list: self.contact_flow_modules_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListContactFlowModulesOutput {
    /// Creates a new builder-style object to manufacture [`ListContactFlowModulesOutput`](crate::output::ListContactFlowModulesOutput)
    pub fn builder() -> crate::output::list_contact_flow_modules_output::Builder {
        crate::output::list_contact_flow_modules_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListBotsOutput {
    /// <p>The names and Regions of the Amazon Lex or Amazon Lex V2 bots associated with the specified instance.</p>
    pub lex_bots: std::option::Option<std::vec::Vec<crate::model::LexBotConfig>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListBotsOutput {
    /// <p>The names and Regions of the Amazon Lex or Amazon Lex V2 bots associated with the specified instance.</p>
    pub fn lex_bots(&self) -> std::option::Option<&[crate::model::LexBotConfig]> {
        self.lex_bots.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListBotsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListBotsOutput");
        formatter.field("lex_bots", &self.lex_bots);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListBotsOutput`](crate::output::ListBotsOutput)
pub mod list_bots_output {
    /// A builder for [`ListBotsOutput`](crate::output::ListBotsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lex_bots: std::option::Option<std::vec::Vec<crate::model::LexBotConfig>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `lex_bots`.
        ///
        /// To override the contents of this collection use [`set_lex_bots`](Self::set_lex_bots).
        ///
        /// <p>The names and Regions of the Amazon Lex or Amazon Lex V2 bots associated with the specified instance.</p>
        pub fn lex_bots(mut self, input: crate::model::LexBotConfig) -> Self {
            let mut v = self.lex_bots.unwrap_or_default();
            v.push(input);
            self.lex_bots = Some(v);
            self
        }
        /// <p>The names and Regions of the Amazon Lex or Amazon Lex V2 bots associated with the specified instance.</p>
        pub fn set_lex_bots(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LexBotConfig>>,
        ) -> Self {
            self.lex_bots = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListBotsOutput`](crate::output::ListBotsOutput)
        pub fn build(self) -> crate::output::ListBotsOutput {
            crate::output::ListBotsOutput {
                lex_bots: self.lex_bots,
                next_token: self.next_token,
            }
        }
    }
}
impl ListBotsOutput {
    /// Creates a new builder-style object to manufacture [`ListBotsOutput`](crate::output::ListBotsOutput)
    pub fn builder() -> crate::output::list_bots_output::Builder {
        crate::output::list_bots_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListApprovedOriginsOutput {
    /// <p>The approved origins.</p>
    pub origins: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListApprovedOriginsOutput {
    /// <p>The approved origins.</p>
    pub fn origins(&self) -> std::option::Option<&[std::string::String]> {
        self.origins.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListApprovedOriginsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListApprovedOriginsOutput");
        formatter.field("origins", &self.origins);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListApprovedOriginsOutput`](crate::output::ListApprovedOriginsOutput)
pub mod list_approved_origins_output {
    /// A builder for [`ListApprovedOriginsOutput`](crate::output::ListApprovedOriginsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) origins: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `origins`.
        ///
        /// To override the contents of this collection use [`set_origins`](Self::set_origins).
        ///
        /// <p>The approved origins.</p>
        pub fn origins(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.origins.unwrap_or_default();
            v.push(input.into());
            self.origins = Some(v);
            self
        }
        /// <p>The approved origins.</p>
        pub fn set_origins(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.origins = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListApprovedOriginsOutput`](crate::output::ListApprovedOriginsOutput)
        pub fn build(self) -> crate::output::ListApprovedOriginsOutput {
            crate::output::ListApprovedOriginsOutput {
                origins: self.origins,
                next_token: self.next_token,
            }
        }
    }
}
impl ListApprovedOriginsOutput {
    /// Creates a new builder-style object to manufacture [`ListApprovedOriginsOutput`](crate::output::ListApprovedOriginsOutput)
    pub fn builder() -> crate::output::list_approved_origins_output::Builder {
        crate::output::list_approved_origins_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAgentStatusesOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A summary of agent statuses.</p>
    pub agent_status_summary_list:
        std::option::Option<std::vec::Vec<crate::model::AgentStatusSummary>>,
}
impl ListAgentStatusesOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A summary of agent statuses.</p>
    pub fn agent_status_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::AgentStatusSummary]> {
        self.agent_status_summary_list.as_deref()
    }
}
impl std::fmt::Debug for ListAgentStatusesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAgentStatusesOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("agent_status_summary_list", &self.agent_status_summary_list);
        formatter.finish()
    }
}
/// See [`ListAgentStatusesOutput`](crate::output::ListAgentStatusesOutput)
pub mod list_agent_statuses_output {
    /// A builder for [`ListAgentStatusesOutput`](crate::output::ListAgentStatusesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) agent_status_summary_list:
            std::option::Option<std::vec::Vec<crate::model::AgentStatusSummary>>,
    }
    impl Builder {
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `agent_status_summary_list`.
        ///
        /// To override the contents of this collection use [`set_agent_status_summary_list`](Self::set_agent_status_summary_list).
        ///
        /// <p>A summary of agent statuses.</p>
        pub fn agent_status_summary_list(
            mut self,
            input: crate::model::AgentStatusSummary,
        ) -> Self {
            let mut v = self.agent_status_summary_list.unwrap_or_default();
            v.push(input);
            self.agent_status_summary_list = Some(v);
            self
        }
        /// <p>A summary of agent statuses.</p>
        pub fn set_agent_status_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AgentStatusSummary>>,
        ) -> Self {
            self.agent_status_summary_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAgentStatusesOutput`](crate::output::ListAgentStatusesOutput)
        pub fn build(self) -> crate::output::ListAgentStatusesOutput {
            crate::output::ListAgentStatusesOutput {
                next_token: self.next_token,
                agent_status_summary_list: self.agent_status_summary_list,
            }
        }
    }
}
impl ListAgentStatusesOutput {
    /// Creates a new builder-style object to manufacture [`ListAgentStatusesOutput`](crate::output::ListAgentStatusesOutput)
    pub fn builder() -> crate::output::list_agent_statuses_output::Builder {
        crate::output::list_agent_statuses_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetMetricDataOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    /// <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the historical metrics.</p>
    /// <p>If no grouping is specified, a summary of metric data is returned.</p>
    pub metric_results: std::option::Option<std::vec::Vec<crate::model::HistoricalMetricResult>>,
}
impl GetMetricDataOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    /// <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the historical metrics.</p>
    /// <p>If no grouping is specified, a summary of metric data is returned.</p>
    pub fn metric_results(&self) -> std::option::Option<&[crate::model::HistoricalMetricResult]> {
        self.metric_results.as_deref()
    }
}
impl std::fmt::Debug for GetMetricDataOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetMetricDataOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("metric_results", &self.metric_results);
        formatter.finish()
    }
}
/// See [`GetMetricDataOutput`](crate::output::GetMetricDataOutput)
pub mod get_metric_data_output {
    /// A builder for [`GetMetricDataOutput`](crate::output::GetMetricDataOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) metric_results:
            std::option::Option<std::vec::Vec<crate::model::HistoricalMetricResult>>,
    }
    impl Builder {
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        /// <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        /// <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `metric_results`.
        ///
        /// To override the contents of this collection use [`set_metric_results`](Self::set_metric_results).
        ///
        /// <p>Information about the historical metrics.</p>
        /// <p>If no grouping is specified, a summary of metric data is returned.</p>
        pub fn metric_results(mut self, input: crate::model::HistoricalMetricResult) -> Self {
            let mut v = self.metric_results.unwrap_or_default();
            v.push(input);
            self.metric_results = Some(v);
            self
        }
        /// <p>Information about the historical metrics.</p>
        /// <p>If no grouping is specified, a summary of metric data is returned.</p>
        pub fn set_metric_results(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::HistoricalMetricResult>>,
        ) -> Self {
            self.metric_results = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMetricDataOutput`](crate::output::GetMetricDataOutput)
        pub fn build(self) -> crate::output::GetMetricDataOutput {
            crate::output::GetMetricDataOutput {
                next_token: self.next_token,
                metric_results: self.metric_results,
            }
        }
    }
}
impl GetMetricDataOutput {
    /// Creates a new builder-style object to manufacture [`GetMetricDataOutput`](crate::output::GetMetricDataOutput)
    pub fn builder() -> crate::output::get_metric_data_output::Builder {
        crate::output::get_metric_data_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetFederationTokenOutput {
    /// <p>The credentials to use for federation.</p>
    pub credentials: std::option::Option<crate::model::Credentials>,
}
impl GetFederationTokenOutput {
    /// <p>The credentials to use for federation.</p>
    pub fn credentials(&self) -> std::option::Option<&crate::model::Credentials> {
        self.credentials.as_ref()
    }
}
impl std::fmt::Debug for GetFederationTokenOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetFederationTokenOutput");
        formatter.field("credentials", &self.credentials);
        formatter.finish()
    }
}
/// See [`GetFederationTokenOutput`](crate::output::GetFederationTokenOutput)
pub mod get_federation_token_output {
    /// A builder for [`GetFederationTokenOutput`](crate::output::GetFederationTokenOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) credentials: std::option::Option<crate::model::Credentials>,
    }
    impl Builder {
        /// <p>The credentials to use for federation.</p>
        pub fn credentials(mut self, input: crate::model::Credentials) -> Self {
            self.credentials = Some(input);
            self
        }
        /// <p>The credentials to use for federation.</p>
        pub fn set_credentials(
            mut self,
            input: std::option::Option<crate::model::Credentials>,
        ) -> Self {
            self.credentials = input;
            self
        }
        /// Consumes the builder and constructs a [`GetFederationTokenOutput`](crate::output::GetFederationTokenOutput)
        pub fn build(self) -> crate::output::GetFederationTokenOutput {
            crate::output::GetFederationTokenOutput {
                credentials: self.credentials,
            }
        }
    }
}
impl GetFederationTokenOutput {
    /// Creates a new builder-style object to manufacture [`GetFederationTokenOutput`](crate::output::GetFederationTokenOutput)
    pub fn builder() -> crate::output::get_federation_token_output::Builder {
        crate::output::get_federation_token_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCurrentMetricDataOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    /// <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the real-time metrics.</p>
    pub metric_results: std::option::Option<std::vec::Vec<crate::model::CurrentMetricResult>>,
    /// <p>The time at which the metrics were retrieved and cached for pagination.</p>
    pub data_snapshot_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl GetCurrentMetricDataOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    /// <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the real-time metrics.</p>
    pub fn metric_results(&self) -> std::option::Option<&[crate::model::CurrentMetricResult]> {
        self.metric_results.as_deref()
    }
    /// <p>The time at which the metrics were retrieved and cached for pagination.</p>
    pub fn data_snapshot_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.data_snapshot_time.as_ref()
    }
}
impl std::fmt::Debug for GetCurrentMetricDataOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCurrentMetricDataOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("metric_results", &self.metric_results);
        formatter.field("data_snapshot_time", &self.data_snapshot_time);
        formatter.finish()
    }
}
/// See [`GetCurrentMetricDataOutput`](crate::output::GetCurrentMetricDataOutput)
pub mod get_current_metric_data_output {
    /// A builder for [`GetCurrentMetricDataOutput`](crate::output::GetCurrentMetricDataOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) metric_results:
            std::option::Option<std::vec::Vec<crate::model::CurrentMetricResult>>,
        pub(crate) data_snapshot_time: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        /// <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        /// <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `metric_results`.
        ///
        /// To override the contents of this collection use [`set_metric_results`](Self::set_metric_results).
        ///
        /// <p>Information about the real-time metrics.</p>
        pub fn metric_results(mut self, input: crate::model::CurrentMetricResult) -> Self {
            let mut v = self.metric_results.unwrap_or_default();
            v.push(input);
            self.metric_results = Some(v);
            self
        }
        /// <p>Information about the real-time metrics.</p>
        pub fn set_metric_results(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CurrentMetricResult>>,
        ) -> Self {
            self.metric_results = input;
            self
        }
        /// <p>The time at which the metrics were retrieved and cached for pagination.</p>
        pub fn data_snapshot_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.data_snapshot_time = Some(input);
            self
        }
        /// <p>The time at which the metrics were retrieved and cached for pagination.</p>
        pub fn set_data_snapshot_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.data_snapshot_time = input;
            self
        }
        /// Consumes the builder and constructs a [`GetCurrentMetricDataOutput`](crate::output::GetCurrentMetricDataOutput)
        pub fn build(self) -> crate::output::GetCurrentMetricDataOutput {
            crate::output::GetCurrentMetricDataOutput {
                next_token: self.next_token,
                metric_results: self.metric_results,
                data_snapshot_time: self.data_snapshot_time,
            }
        }
    }
}
impl GetCurrentMetricDataOutput {
    /// Creates a new builder-style object to manufacture [`GetCurrentMetricDataOutput`](crate::output::GetCurrentMetricDataOutput)
    pub fn builder() -> crate::output::get_current_metric_data_output::Builder {
        crate::output::get_current_metric_data_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetContactAttributesOutput {
    /// <p>Information about the attributes.</p>
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetContactAttributesOutput {
    /// <p>Information about the attributes.</p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
}
impl std::fmt::Debug for GetContactAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetContactAttributesOutput");
        formatter.field("attributes", &self.attributes);
        formatter.finish()
    }
}
/// See [`GetContactAttributesOutput`](crate::output::GetContactAttributesOutput)
pub mod get_contact_attributes_output {
    /// A builder for [`GetContactAttributesOutput`](crate::output::GetContactAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attributes: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        ///
        /// <p>Information about the attributes.</p>
        pub fn attributes(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.attributes.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.attributes = Some(hash_map);
            self
        }
        /// <p>Information about the attributes.</p>
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`GetContactAttributesOutput`](crate::output::GetContactAttributesOutput)
        pub fn build(self) -> crate::output::GetContactAttributesOutput {
            crate::output::GetContactAttributesOutput {
                attributes: self.attributes,
            }
        }
    }
}
impl GetContactAttributesOutput {
    /// Creates a new builder-style object to manufacture [`GetContactAttributesOutput`](crate::output::GetContactAttributesOutput)
    pub fn builder() -> crate::output::get_contact_attributes_output::Builder {
        crate::output::get_contact_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateSecurityKeyOutput {}
impl std::fmt::Debug for DisassociateSecurityKeyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateSecurityKeyOutput");
        formatter.finish()
    }
}
/// See [`DisassociateSecurityKeyOutput`](crate::output::DisassociateSecurityKeyOutput)
pub mod disassociate_security_key_output {
    /// A builder for [`DisassociateSecurityKeyOutput`](crate::output::DisassociateSecurityKeyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateSecurityKeyOutput`](crate::output::DisassociateSecurityKeyOutput)
        pub fn build(self) -> crate::output::DisassociateSecurityKeyOutput {
            crate::output::DisassociateSecurityKeyOutput {}
        }
    }
}
impl DisassociateSecurityKeyOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateSecurityKeyOutput`](crate::output::DisassociateSecurityKeyOutput)
    pub fn builder() -> crate::output::disassociate_security_key_output::Builder {
        crate::output::disassociate_security_key_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateRoutingProfileQueuesOutput {}
impl std::fmt::Debug for DisassociateRoutingProfileQueuesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateRoutingProfileQueuesOutput");
        formatter.finish()
    }
}
/// See [`DisassociateRoutingProfileQueuesOutput`](crate::output::DisassociateRoutingProfileQueuesOutput)
pub mod disassociate_routing_profile_queues_output {
    /// A builder for [`DisassociateRoutingProfileQueuesOutput`](crate::output::DisassociateRoutingProfileQueuesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateRoutingProfileQueuesOutput`](crate::output::DisassociateRoutingProfileQueuesOutput)
        pub fn build(self) -> crate::output::DisassociateRoutingProfileQueuesOutput {
            crate::output::DisassociateRoutingProfileQueuesOutput {}
        }
    }
}
impl DisassociateRoutingProfileQueuesOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateRoutingProfileQueuesOutput`](crate::output::DisassociateRoutingProfileQueuesOutput)
    pub fn builder() -> crate::output::disassociate_routing_profile_queues_output::Builder {
        crate::output::disassociate_routing_profile_queues_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateQueueQuickConnectsOutput {}
impl std::fmt::Debug for DisassociateQueueQuickConnectsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateQueueQuickConnectsOutput");
        formatter.finish()
    }
}
/// See [`DisassociateQueueQuickConnectsOutput`](crate::output::DisassociateQueueQuickConnectsOutput)
pub mod disassociate_queue_quick_connects_output {
    /// A builder for [`DisassociateQueueQuickConnectsOutput`](crate::output::DisassociateQueueQuickConnectsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateQueueQuickConnectsOutput`](crate::output::DisassociateQueueQuickConnectsOutput)
        pub fn build(self) -> crate::output::DisassociateQueueQuickConnectsOutput {
            crate::output::DisassociateQueueQuickConnectsOutput {}
        }
    }
}
impl DisassociateQueueQuickConnectsOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateQueueQuickConnectsOutput`](crate::output::DisassociateQueueQuickConnectsOutput)
    pub fn builder() -> crate::output::disassociate_queue_quick_connects_output::Builder {
        crate::output::disassociate_queue_quick_connects_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateLexBotOutput {}
impl std::fmt::Debug for DisassociateLexBotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateLexBotOutput");
        formatter.finish()
    }
}
/// See [`DisassociateLexBotOutput`](crate::output::DisassociateLexBotOutput)
pub mod disassociate_lex_bot_output {
    /// A builder for [`DisassociateLexBotOutput`](crate::output::DisassociateLexBotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateLexBotOutput`](crate::output::DisassociateLexBotOutput)
        pub fn build(self) -> crate::output::DisassociateLexBotOutput {
            crate::output::DisassociateLexBotOutput {}
        }
    }
}
impl DisassociateLexBotOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateLexBotOutput`](crate::output::DisassociateLexBotOutput)
    pub fn builder() -> crate::output::disassociate_lex_bot_output::Builder {
        crate::output::disassociate_lex_bot_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateLambdaFunctionOutput {}
impl std::fmt::Debug for DisassociateLambdaFunctionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateLambdaFunctionOutput");
        formatter.finish()
    }
}
/// See [`DisassociateLambdaFunctionOutput`](crate::output::DisassociateLambdaFunctionOutput)
pub mod disassociate_lambda_function_output {
    /// A builder for [`DisassociateLambdaFunctionOutput`](crate::output::DisassociateLambdaFunctionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateLambdaFunctionOutput`](crate::output::DisassociateLambdaFunctionOutput)
        pub fn build(self) -> crate::output::DisassociateLambdaFunctionOutput {
            crate::output::DisassociateLambdaFunctionOutput {}
        }
    }
}
impl DisassociateLambdaFunctionOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateLambdaFunctionOutput`](crate::output::DisassociateLambdaFunctionOutput)
    pub fn builder() -> crate::output::disassociate_lambda_function_output::Builder {
        crate::output::disassociate_lambda_function_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateInstanceStorageConfigOutput {}
impl std::fmt::Debug for DisassociateInstanceStorageConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateInstanceStorageConfigOutput");
        formatter.finish()
    }
}
/// See [`DisassociateInstanceStorageConfigOutput`](crate::output::DisassociateInstanceStorageConfigOutput)
pub mod disassociate_instance_storage_config_output {
    /// A builder for [`DisassociateInstanceStorageConfigOutput`](crate::output::DisassociateInstanceStorageConfigOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateInstanceStorageConfigOutput`](crate::output::DisassociateInstanceStorageConfigOutput)
        pub fn build(self) -> crate::output::DisassociateInstanceStorageConfigOutput {
            crate::output::DisassociateInstanceStorageConfigOutput {}
        }
    }
}
impl DisassociateInstanceStorageConfigOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateInstanceStorageConfigOutput`](crate::output::DisassociateInstanceStorageConfigOutput)
    pub fn builder() -> crate::output::disassociate_instance_storage_config_output::Builder {
        crate::output::disassociate_instance_storage_config_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateBotOutput {}
impl std::fmt::Debug for DisassociateBotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateBotOutput");
        formatter.finish()
    }
}
/// See [`DisassociateBotOutput`](crate::output::DisassociateBotOutput)
pub mod disassociate_bot_output {
    /// A builder for [`DisassociateBotOutput`](crate::output::DisassociateBotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateBotOutput`](crate::output::DisassociateBotOutput)
        pub fn build(self) -> crate::output::DisassociateBotOutput {
            crate::output::DisassociateBotOutput {}
        }
    }
}
impl DisassociateBotOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateBotOutput`](crate::output::DisassociateBotOutput)
    pub fn builder() -> crate::output::disassociate_bot_output::Builder {
        crate::output::disassociate_bot_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateApprovedOriginOutput {}
impl std::fmt::Debug for DisassociateApprovedOriginOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateApprovedOriginOutput");
        formatter.finish()
    }
}
/// See [`DisassociateApprovedOriginOutput`](crate::output::DisassociateApprovedOriginOutput)
pub mod disassociate_approved_origin_output {
    /// A builder for [`DisassociateApprovedOriginOutput`](crate::output::DisassociateApprovedOriginOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateApprovedOriginOutput`](crate::output::DisassociateApprovedOriginOutput)
        pub fn build(self) -> crate::output::DisassociateApprovedOriginOutput {
            crate::output::DisassociateApprovedOriginOutput {}
        }
    }
}
impl DisassociateApprovedOriginOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateApprovedOriginOutput`](crate::output::DisassociateApprovedOriginOutput)
    pub fn builder() -> crate::output::disassociate_approved_origin_output::Builder {
        crate::output::disassociate_approved_origin_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeUserHierarchyStructureOutput {
    /// <p>Information about the hierarchy structure.</p>
    pub hierarchy_structure: std::option::Option<crate::model::HierarchyStructure>,
}
impl DescribeUserHierarchyStructureOutput {
    /// <p>Information about the hierarchy structure.</p>
    pub fn hierarchy_structure(&self) -> std::option::Option<&crate::model::HierarchyStructure> {
        self.hierarchy_structure.as_ref()
    }
}
impl std::fmt::Debug for DescribeUserHierarchyStructureOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeUserHierarchyStructureOutput");
        formatter.field("hierarchy_structure", &self.hierarchy_structure);
        formatter.finish()
    }
}
/// See [`DescribeUserHierarchyStructureOutput`](crate::output::DescribeUserHierarchyStructureOutput)
pub mod describe_user_hierarchy_structure_output {
    /// A builder for [`DescribeUserHierarchyStructureOutput`](crate::output::DescribeUserHierarchyStructureOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) hierarchy_structure: std::option::Option<crate::model::HierarchyStructure>,
    }
    impl Builder {
        /// <p>Information about the hierarchy structure.</p>
        pub fn hierarchy_structure(mut self, input: crate::model::HierarchyStructure) -> Self {
            self.hierarchy_structure = Some(input);
            self
        }
        /// <p>Information about the hierarchy structure.</p>
        pub fn set_hierarchy_structure(
            mut self,
            input: std::option::Option<crate::model::HierarchyStructure>,
        ) -> Self {
            self.hierarchy_structure = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeUserHierarchyStructureOutput`](crate::output::DescribeUserHierarchyStructureOutput)
        pub fn build(self) -> crate::output::DescribeUserHierarchyStructureOutput {
            crate::output::DescribeUserHierarchyStructureOutput {
                hierarchy_structure: self.hierarchy_structure,
            }
        }
    }
}
impl DescribeUserHierarchyStructureOutput {
    /// Creates a new builder-style object to manufacture [`DescribeUserHierarchyStructureOutput`](crate::output::DescribeUserHierarchyStructureOutput)
    pub fn builder() -> crate::output::describe_user_hierarchy_structure_output::Builder {
        crate::output::describe_user_hierarchy_structure_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeUserHierarchyGroupOutput {
    /// <p>Information about the hierarchy group.</p>
    pub hierarchy_group: std::option::Option<crate::model::HierarchyGroup>,
}
impl DescribeUserHierarchyGroupOutput {
    /// <p>Information about the hierarchy group.</p>
    pub fn hierarchy_group(&self) -> std::option::Option<&crate::model::HierarchyGroup> {
        self.hierarchy_group.as_ref()
    }
}
impl std::fmt::Debug for DescribeUserHierarchyGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeUserHierarchyGroupOutput");
        formatter.field("hierarchy_group", &self.hierarchy_group);
        formatter.finish()
    }
}
/// See [`DescribeUserHierarchyGroupOutput`](crate::output::DescribeUserHierarchyGroupOutput)
pub mod describe_user_hierarchy_group_output {
    /// A builder for [`DescribeUserHierarchyGroupOutput`](crate::output::DescribeUserHierarchyGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) hierarchy_group: std::option::Option<crate::model::HierarchyGroup>,
    }
    impl Builder {
        /// <p>Information about the hierarchy group.</p>
        pub fn hierarchy_group(mut self, input: crate::model::HierarchyGroup) -> Self {
            self.hierarchy_group = Some(input);
            self
        }
        /// <p>Information about the hierarchy group.</p>
        pub fn set_hierarchy_group(
            mut self,
            input: std::option::Option<crate::model::HierarchyGroup>,
        ) -> Self {
            self.hierarchy_group = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeUserHierarchyGroupOutput`](crate::output::DescribeUserHierarchyGroupOutput)
        pub fn build(self) -> crate::output::DescribeUserHierarchyGroupOutput {
            crate::output::DescribeUserHierarchyGroupOutput {
                hierarchy_group: self.hierarchy_group,
            }
        }
    }
}
impl DescribeUserHierarchyGroupOutput {
    /// Creates a new builder-style object to manufacture [`DescribeUserHierarchyGroupOutput`](crate::output::DescribeUserHierarchyGroupOutput)
    pub fn builder() -> crate::output::describe_user_hierarchy_group_output::Builder {
        crate::output::describe_user_hierarchy_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeUserOutput {
    /// <p>Information about the user account and configuration settings.</p>
    pub user: std::option::Option<crate::model::User>,
}
impl DescribeUserOutput {
    /// <p>Information about the user account and configuration settings.</p>
    pub fn user(&self) -> std::option::Option<&crate::model::User> {
        self.user.as_ref()
    }
}
impl std::fmt::Debug for DescribeUserOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeUserOutput");
        formatter.field("user", &self.user);
        formatter.finish()
    }
}
/// See [`DescribeUserOutput`](crate::output::DescribeUserOutput)
pub mod describe_user_output {
    /// A builder for [`DescribeUserOutput`](crate::output::DescribeUserOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user: std::option::Option<crate::model::User>,
    }
    impl Builder {
        /// <p>Information about the user account and configuration settings.</p>
        pub fn user(mut self, input: crate::model::User) -> Self {
            self.user = Some(input);
            self
        }
        /// <p>Information about the user account and configuration settings.</p>
        pub fn set_user(mut self, input: std::option::Option<crate::model::User>) -> Self {
            self.user = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeUserOutput`](crate::output::DescribeUserOutput)
        pub fn build(self) -> crate::output::DescribeUserOutput {
            crate::output::DescribeUserOutput { user: self.user }
        }
    }
}
impl DescribeUserOutput {
    /// Creates a new builder-style object to manufacture [`DescribeUserOutput`](crate::output::DescribeUserOutput)
    pub fn builder() -> crate::output::describe_user_output::Builder {
        crate::output::describe_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSecurityProfileOutput {
    /// <p>The security profile.</p>
    pub security_profile: std::option::Option<crate::model::SecurityProfile>,
}
impl DescribeSecurityProfileOutput {
    /// <p>The security profile.</p>
    pub fn security_profile(&self) -> std::option::Option<&crate::model::SecurityProfile> {
        self.security_profile.as_ref()
    }
}
impl std::fmt::Debug for DescribeSecurityProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSecurityProfileOutput");
        formatter.field("security_profile", &self.security_profile);
        formatter.finish()
    }
}
/// See [`DescribeSecurityProfileOutput`](crate::output::DescribeSecurityProfileOutput)
pub mod describe_security_profile_output {
    /// A builder for [`DescribeSecurityProfileOutput`](crate::output::DescribeSecurityProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_profile: std::option::Option<crate::model::SecurityProfile>,
    }
    impl Builder {
        /// <p>The security profile.</p>
        pub fn security_profile(mut self, input: crate::model::SecurityProfile) -> Self {
            self.security_profile = Some(input);
            self
        }
        /// <p>The security profile.</p>
        pub fn set_security_profile(
            mut self,
            input: std::option::Option<crate::model::SecurityProfile>,
        ) -> Self {
            self.security_profile = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSecurityProfileOutput`](crate::output::DescribeSecurityProfileOutput)
        pub fn build(self) -> crate::output::DescribeSecurityProfileOutput {
            crate::output::DescribeSecurityProfileOutput {
                security_profile: self.security_profile,
            }
        }
    }
}
impl DescribeSecurityProfileOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSecurityProfileOutput`](crate::output::DescribeSecurityProfileOutput)
    pub fn builder() -> crate::output::describe_security_profile_output::Builder {
        crate::output::describe_security_profile_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeRoutingProfileOutput {
    /// <p>The routing profile.</p>
    pub routing_profile: std::option::Option<crate::model::RoutingProfile>,
}
impl DescribeRoutingProfileOutput {
    /// <p>The routing profile.</p>
    pub fn routing_profile(&self) -> std::option::Option<&crate::model::RoutingProfile> {
        self.routing_profile.as_ref()
    }
}
impl std::fmt::Debug for DescribeRoutingProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeRoutingProfileOutput");
        formatter.field("routing_profile", &self.routing_profile);
        formatter.finish()
    }
}
/// See [`DescribeRoutingProfileOutput`](crate::output::DescribeRoutingProfileOutput)
pub mod describe_routing_profile_output {
    /// A builder for [`DescribeRoutingProfileOutput`](crate::output::DescribeRoutingProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) routing_profile: std::option::Option<crate::model::RoutingProfile>,
    }
    impl Builder {
        /// <p>The routing profile.</p>
        pub fn routing_profile(mut self, input: crate::model::RoutingProfile) -> Self {
            self.routing_profile = Some(input);
            self
        }
        /// <p>The routing profile.</p>
        pub fn set_routing_profile(
            mut self,
            input: std::option::Option<crate::model::RoutingProfile>,
        ) -> Self {
            self.routing_profile = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeRoutingProfileOutput`](crate::output::DescribeRoutingProfileOutput)
        pub fn build(self) -> crate::output::DescribeRoutingProfileOutput {
            crate::output::DescribeRoutingProfileOutput {
                routing_profile: self.routing_profile,
            }
        }
    }
}
impl DescribeRoutingProfileOutput {
    /// Creates a new builder-style object to manufacture [`DescribeRoutingProfileOutput`](crate::output::DescribeRoutingProfileOutput)
    pub fn builder() -> crate::output::describe_routing_profile_output::Builder {
        crate::output::describe_routing_profile_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeQuickConnectOutput {
    /// <p>Information about the quick connect.</p>
    pub quick_connect: std::option::Option<crate::model::QuickConnect>,
}
impl DescribeQuickConnectOutput {
    /// <p>Information about the quick connect.</p>
    pub fn quick_connect(&self) -> std::option::Option<&crate::model::QuickConnect> {
        self.quick_connect.as_ref()
    }
}
impl std::fmt::Debug for DescribeQuickConnectOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeQuickConnectOutput");
        formatter.field("quick_connect", &self.quick_connect);
        formatter.finish()
    }
}
/// See [`DescribeQuickConnectOutput`](crate::output::DescribeQuickConnectOutput)
pub mod describe_quick_connect_output {
    /// A builder for [`DescribeQuickConnectOutput`](crate::output::DescribeQuickConnectOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) quick_connect: std::option::Option<crate::model::QuickConnect>,
    }
    impl Builder {
        /// <p>Information about the quick connect.</p>
        pub fn quick_connect(mut self, input: crate::model::QuickConnect) -> Self {
            self.quick_connect = Some(input);
            self
        }
        /// <p>Information about the quick connect.</p>
        pub fn set_quick_connect(
            mut self,
            input: std::option::Option<crate::model::QuickConnect>,
        ) -> Self {
            self.quick_connect = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeQuickConnectOutput`](crate::output::DescribeQuickConnectOutput)
        pub fn build(self) -> crate::output::DescribeQuickConnectOutput {
            crate::output::DescribeQuickConnectOutput {
                quick_connect: self.quick_connect,
            }
        }
    }
}
impl DescribeQuickConnectOutput {
    /// Creates a new builder-style object to manufacture [`DescribeQuickConnectOutput`](crate::output::DescribeQuickConnectOutput)
    pub fn builder() -> crate::output::describe_quick_connect_output::Builder {
        crate::output::describe_quick_connect_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeQueueOutput {
    /// <p>The name of the queue.</p>
    pub queue: std::option::Option<crate::model::Queue>,
}
impl DescribeQueueOutput {
    /// <p>The name of the queue.</p>
    pub fn queue(&self) -> std::option::Option<&crate::model::Queue> {
        self.queue.as_ref()
    }
}
impl std::fmt::Debug for DescribeQueueOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeQueueOutput");
        formatter.field("queue", &self.queue);
        formatter.finish()
    }
}
/// See [`DescribeQueueOutput`](crate::output::DescribeQueueOutput)
pub mod describe_queue_output {
    /// A builder for [`DescribeQueueOutput`](crate::output::DescribeQueueOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) queue: std::option::Option<crate::model::Queue>,
    }
    impl Builder {
        /// <p>The name of the queue.</p>
        pub fn queue(mut self, input: crate::model::Queue) -> Self {
            self.queue = Some(input);
            self
        }
        /// <p>The name of the queue.</p>
        pub fn set_queue(mut self, input: std::option::Option<crate::model::Queue>) -> Self {
            self.queue = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeQueueOutput`](crate::output::DescribeQueueOutput)
        pub fn build(self) -> crate::output::DescribeQueueOutput {
            crate::output::DescribeQueueOutput { queue: self.queue }
        }
    }
}
impl DescribeQueueOutput {
    /// Creates a new builder-style object to manufacture [`DescribeQueueOutput`](crate::output::DescribeQueueOutput)
    pub fn builder() -> crate::output::describe_queue_output::Builder {
        crate::output::describe_queue_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstanceStorageConfigOutput {
    /// <p>A valid storage type.</p>
    pub storage_config: std::option::Option<crate::model::InstanceStorageConfig>,
}
impl DescribeInstanceStorageConfigOutput {
    /// <p>A valid storage type.</p>
    pub fn storage_config(&self) -> std::option::Option<&crate::model::InstanceStorageConfig> {
        self.storage_config.as_ref()
    }
}
impl std::fmt::Debug for DescribeInstanceStorageConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstanceStorageConfigOutput");
        formatter.field("storage_config", &self.storage_config);
        formatter.finish()
    }
}
/// See [`DescribeInstanceStorageConfigOutput`](crate::output::DescribeInstanceStorageConfigOutput)
pub mod describe_instance_storage_config_output {
    /// A builder for [`DescribeInstanceStorageConfigOutput`](crate::output::DescribeInstanceStorageConfigOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) storage_config: std::option::Option<crate::model::InstanceStorageConfig>,
    }
    impl Builder {
        /// <p>A valid storage type.</p>
        pub fn storage_config(mut self, input: crate::model::InstanceStorageConfig) -> Self {
            self.storage_config = Some(input);
            self
        }
        /// <p>A valid storage type.</p>
        pub fn set_storage_config(
            mut self,
            input: std::option::Option<crate::model::InstanceStorageConfig>,
        ) -> Self {
            self.storage_config = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceStorageConfigOutput`](crate::output::DescribeInstanceStorageConfigOutput)
        pub fn build(self) -> crate::output::DescribeInstanceStorageConfigOutput {
            crate::output::DescribeInstanceStorageConfigOutput {
                storage_config: self.storage_config,
            }
        }
    }
}
impl DescribeInstanceStorageConfigOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceStorageConfigOutput`](crate::output::DescribeInstanceStorageConfigOutput)
    pub fn builder() -> crate::output::describe_instance_storage_config_output::Builder {
        crate::output::describe_instance_storage_config_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstanceAttributeOutput {
    /// <p>The type of attribute.</p>
    pub attribute: std::option::Option<crate::model::Attribute>,
}
impl DescribeInstanceAttributeOutput {
    /// <p>The type of attribute.</p>
    pub fn attribute(&self) -> std::option::Option<&crate::model::Attribute> {
        self.attribute.as_ref()
    }
}
impl std::fmt::Debug for DescribeInstanceAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstanceAttributeOutput");
        formatter.field("attribute", &self.attribute);
        formatter.finish()
    }
}
/// See [`DescribeInstanceAttributeOutput`](crate::output::DescribeInstanceAttributeOutput)
pub mod describe_instance_attribute_output {
    /// A builder for [`DescribeInstanceAttributeOutput`](crate::output::DescribeInstanceAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attribute: std::option::Option<crate::model::Attribute>,
    }
    impl Builder {
        /// <p>The type of attribute.</p>
        pub fn attribute(mut self, input: crate::model::Attribute) -> Self {
            self.attribute = Some(input);
            self
        }
        /// <p>The type of attribute.</p>
        pub fn set_attribute(
            mut self,
            input: std::option::Option<crate::model::Attribute>,
        ) -> Self {
            self.attribute = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceAttributeOutput`](crate::output::DescribeInstanceAttributeOutput)
        pub fn build(self) -> crate::output::DescribeInstanceAttributeOutput {
            crate::output::DescribeInstanceAttributeOutput {
                attribute: self.attribute,
            }
        }
    }
}
impl DescribeInstanceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceAttributeOutput`](crate::output::DescribeInstanceAttributeOutput)
    pub fn builder() -> crate::output::describe_instance_attribute_output::Builder {
        crate::output::describe_instance_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstanceOutput {
    /// <p>The name of the instance.</p>
    pub instance: std::option::Option<crate::model::Instance>,
}
impl DescribeInstanceOutput {
    /// <p>The name of the instance.</p>
    pub fn instance(&self) -> std::option::Option<&crate::model::Instance> {
        self.instance.as_ref()
    }
}
impl std::fmt::Debug for DescribeInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstanceOutput");
        formatter.field("instance", &self.instance);
        formatter.finish()
    }
}
/// See [`DescribeInstanceOutput`](crate::output::DescribeInstanceOutput)
pub mod describe_instance_output {
    /// A builder for [`DescribeInstanceOutput`](crate::output::DescribeInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance: std::option::Option<crate::model::Instance>,
    }
    impl Builder {
        /// <p>The name of the instance.</p>
        pub fn instance(mut self, input: crate::model::Instance) -> Self {
            self.instance = Some(input);
            self
        }
        /// <p>The name of the instance.</p>
        pub fn set_instance(mut self, input: std::option::Option<crate::model::Instance>) -> Self {
            self.instance = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceOutput`](crate::output::DescribeInstanceOutput)
        pub fn build(self) -> crate::output::DescribeInstanceOutput {
            crate::output::DescribeInstanceOutput {
                instance: self.instance,
            }
        }
    }
}
impl DescribeInstanceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceOutput`](crate::output::DescribeInstanceOutput)
    pub fn builder() -> crate::output::describe_instance_output::Builder {
        crate::output::describe_instance_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeHoursOfOperationOutput {
    /// <p>The hours of operation.</p>
    pub hours_of_operation: std::option::Option<crate::model::HoursOfOperation>,
}
impl DescribeHoursOfOperationOutput {
    /// <p>The hours of operation.</p>
    pub fn hours_of_operation(&self) -> std::option::Option<&crate::model::HoursOfOperation> {
        self.hours_of_operation.as_ref()
    }
}
impl std::fmt::Debug for DescribeHoursOfOperationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeHoursOfOperationOutput");
        formatter.field("hours_of_operation", &self.hours_of_operation);
        formatter.finish()
    }
}
/// See [`DescribeHoursOfOperationOutput`](crate::output::DescribeHoursOfOperationOutput)
pub mod describe_hours_of_operation_output {
    /// A builder for [`DescribeHoursOfOperationOutput`](crate::output::DescribeHoursOfOperationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) hours_of_operation: std::option::Option<crate::model::HoursOfOperation>,
    }
    impl Builder {
        /// <p>The hours of operation.</p>
        pub fn hours_of_operation(mut self, input: crate::model::HoursOfOperation) -> Self {
            self.hours_of_operation = Some(input);
            self
        }
        /// <p>The hours of operation.</p>
        pub fn set_hours_of_operation(
            mut self,
            input: std::option::Option<crate::model::HoursOfOperation>,
        ) -> Self {
            self.hours_of_operation = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeHoursOfOperationOutput`](crate::output::DescribeHoursOfOperationOutput)
        pub fn build(self) -> crate::output::DescribeHoursOfOperationOutput {
            crate::output::DescribeHoursOfOperationOutput {
                hours_of_operation: self.hours_of_operation,
            }
        }
    }
}
impl DescribeHoursOfOperationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeHoursOfOperationOutput`](crate::output::DescribeHoursOfOperationOutput)
    pub fn builder() -> crate::output::describe_hours_of_operation_output::Builder {
        crate::output::describe_hours_of_operation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeContactFlowModuleOutput {
    /// <p>Information about the contact flow module.</p>
    pub contact_flow_module: std::option::Option<crate::model::ContactFlowModule>,
}
impl DescribeContactFlowModuleOutput {
    /// <p>Information about the contact flow module.</p>
    pub fn contact_flow_module(&self) -> std::option::Option<&crate::model::ContactFlowModule> {
        self.contact_flow_module.as_ref()
    }
}
impl std::fmt::Debug for DescribeContactFlowModuleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeContactFlowModuleOutput");
        formatter.field("contact_flow_module", &self.contact_flow_module);
        formatter.finish()
    }
}
/// See [`DescribeContactFlowModuleOutput`](crate::output::DescribeContactFlowModuleOutput)
pub mod describe_contact_flow_module_output {
    /// A builder for [`DescribeContactFlowModuleOutput`](crate::output::DescribeContactFlowModuleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) contact_flow_module: std::option::Option<crate::model::ContactFlowModule>,
    }
    impl Builder {
        /// <p>Information about the contact flow module.</p>
        pub fn contact_flow_module(mut self, input: crate::model::ContactFlowModule) -> Self {
            self.contact_flow_module = Some(input);
            self
        }
        /// <p>Information about the contact flow module.</p>
        pub fn set_contact_flow_module(
            mut self,
            input: std::option::Option<crate::model::ContactFlowModule>,
        ) -> Self {
            self.contact_flow_module = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeContactFlowModuleOutput`](crate::output::DescribeContactFlowModuleOutput)
        pub fn build(self) -> crate::output::DescribeContactFlowModuleOutput {
            crate::output::DescribeContactFlowModuleOutput {
                contact_flow_module: self.contact_flow_module,
            }
        }
    }
}
impl DescribeContactFlowModuleOutput {
    /// Creates a new builder-style object to manufacture [`DescribeContactFlowModuleOutput`](crate::output::DescribeContactFlowModuleOutput)
    pub fn builder() -> crate::output::describe_contact_flow_module_output::Builder {
        crate::output::describe_contact_flow_module_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeContactFlowOutput {
    /// <p>Information about the contact flow.</p>
    pub contact_flow: std::option::Option<crate::model::ContactFlow>,
}
impl DescribeContactFlowOutput {
    /// <p>Information about the contact flow.</p>
    pub fn contact_flow(&self) -> std::option::Option<&crate::model::ContactFlow> {
        self.contact_flow.as_ref()
    }
}
impl std::fmt::Debug for DescribeContactFlowOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeContactFlowOutput");
        formatter.field("contact_flow", &self.contact_flow);
        formatter.finish()
    }
}
/// See [`DescribeContactFlowOutput`](crate::output::DescribeContactFlowOutput)
pub mod describe_contact_flow_output {
    /// A builder for [`DescribeContactFlowOutput`](crate::output::DescribeContactFlowOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) contact_flow: std::option::Option<crate::model::ContactFlow>,
    }
    impl Builder {
        /// <p>Information about the contact flow.</p>
        pub fn contact_flow(mut self, input: crate::model::ContactFlow) -> Self {
            self.contact_flow = Some(input);
            self
        }
        /// <p>Information about the contact flow.</p>
        pub fn set_contact_flow(
            mut self,
            input: std::option::Option<crate::model::ContactFlow>,
        ) -> Self {
            self.contact_flow = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeContactFlowOutput`](crate::output::DescribeContactFlowOutput)
        pub fn build(self) -> crate::output::DescribeContactFlowOutput {
            crate::output::DescribeContactFlowOutput {
                contact_flow: self.contact_flow,
            }
        }
    }
}
impl DescribeContactFlowOutput {
    /// Creates a new builder-style object to manufacture [`DescribeContactFlowOutput`](crate::output::DescribeContactFlowOutput)
    pub fn builder() -> crate::output::describe_contact_flow_output::Builder {
        crate::output::describe_contact_flow_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeContactOutput {
    /// <p>Information about the contact.</p>
    pub contact: std::option::Option<crate::model::Contact>,
}
impl DescribeContactOutput {
    /// <p>Information about the contact.</p>
    pub fn contact(&self) -> std::option::Option<&crate::model::Contact> {
        self.contact.as_ref()
    }
}
impl std::fmt::Debug for DescribeContactOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeContactOutput");
        formatter.field("contact", &self.contact);
        formatter.finish()
    }
}
/// See [`DescribeContactOutput`](crate::output::DescribeContactOutput)
pub mod describe_contact_output {
    /// A builder for [`DescribeContactOutput`](crate::output::DescribeContactOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) contact: std::option::Option<crate::model::Contact>,
    }
    impl Builder {
        /// <p>Information about the contact.</p>
        pub fn contact(mut self, input: crate::model::Contact) -> Self {
            self.contact = Some(input);
            self
        }
        /// <p>Information about the contact.</p>
        pub fn set_contact(mut self, input: std::option::Option<crate::model::Contact>) -> Self {
            self.contact = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeContactOutput`](crate::output::DescribeContactOutput)
        pub fn build(self) -> crate::output::DescribeContactOutput {
            crate::output::DescribeContactOutput {
                contact: self.contact,
            }
        }
    }
}
impl DescribeContactOutput {
    /// Creates a new builder-style object to manufacture [`DescribeContactOutput`](crate::output::DescribeContactOutput)
    pub fn builder() -> crate::output::describe_contact_output::Builder {
        crate::output::describe_contact_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAgentStatusOutput {
    /// <p>The agent status.</p>
    pub agent_status: std::option::Option<crate::model::AgentStatus>,
}
impl DescribeAgentStatusOutput {
    /// <p>The agent status.</p>
    pub fn agent_status(&self) -> std::option::Option<&crate::model::AgentStatus> {
        self.agent_status.as_ref()
    }
}
impl std::fmt::Debug for DescribeAgentStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAgentStatusOutput");
        formatter.field("agent_status", &self.agent_status);
        formatter.finish()
    }
}
/// See [`DescribeAgentStatusOutput`](crate::output::DescribeAgentStatusOutput)
pub mod describe_agent_status_output {
    /// A builder for [`DescribeAgentStatusOutput`](crate::output::DescribeAgentStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) agent_status: std::option::Option<crate::model::AgentStatus>,
    }
    impl Builder {
        /// <p>The agent status.</p>
        pub fn agent_status(mut self, input: crate::model::AgentStatus) -> Self {
            self.agent_status = Some(input);
            self
        }
        /// <p>The agent status.</p>
        pub fn set_agent_status(
            mut self,
            input: std::option::Option<crate::model::AgentStatus>,
        ) -> Self {
            self.agent_status = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAgentStatusOutput`](crate::output::DescribeAgentStatusOutput)
        pub fn build(self) -> crate::output::DescribeAgentStatusOutput {
            crate::output::DescribeAgentStatusOutput {
                agent_status: self.agent_status,
            }
        }
    }
}
impl DescribeAgentStatusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAgentStatusOutput`](crate::output::DescribeAgentStatusOutput)
    pub fn builder() -> crate::output::describe_agent_status_output::Builder {
        crate::output::describe_agent_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteUserHierarchyGroupOutput {}
impl std::fmt::Debug for DeleteUserHierarchyGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteUserHierarchyGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteUserHierarchyGroupOutput`](crate::output::DeleteUserHierarchyGroupOutput)
pub mod delete_user_hierarchy_group_output {
    /// A builder for [`DeleteUserHierarchyGroupOutput`](crate::output::DeleteUserHierarchyGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteUserHierarchyGroupOutput`](crate::output::DeleteUserHierarchyGroupOutput)
        pub fn build(self) -> crate::output::DeleteUserHierarchyGroupOutput {
            crate::output::DeleteUserHierarchyGroupOutput {}
        }
    }
}
impl DeleteUserHierarchyGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteUserHierarchyGroupOutput`](crate::output::DeleteUserHierarchyGroupOutput)
    pub fn builder() -> crate::output::delete_user_hierarchy_group_output::Builder {
        crate::output::delete_user_hierarchy_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteUserOutput {}
impl std::fmt::Debug for DeleteUserOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteUserOutput");
        formatter.finish()
    }
}
/// See [`DeleteUserOutput`](crate::output::DeleteUserOutput)
pub mod delete_user_output {
    /// A builder for [`DeleteUserOutput`](crate::output::DeleteUserOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteUserOutput`](crate::output::DeleteUserOutput)
        pub fn build(self) -> crate::output::DeleteUserOutput {
            crate::output::DeleteUserOutput {}
        }
    }
}
impl DeleteUserOutput {
    /// Creates a new builder-style object to manufacture [`DeleteUserOutput`](crate::output::DeleteUserOutput)
    pub fn builder() -> crate::output::delete_user_output::Builder {
        crate::output::delete_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteUseCaseOutput {}
impl std::fmt::Debug for DeleteUseCaseOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteUseCaseOutput");
        formatter.finish()
    }
}
/// See [`DeleteUseCaseOutput`](crate::output::DeleteUseCaseOutput)
pub mod delete_use_case_output {
    /// A builder for [`DeleteUseCaseOutput`](crate::output::DeleteUseCaseOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteUseCaseOutput`](crate::output::DeleteUseCaseOutput)
        pub fn build(self) -> crate::output::DeleteUseCaseOutput {
            crate::output::DeleteUseCaseOutput {}
        }
    }
}
impl DeleteUseCaseOutput {
    /// Creates a new builder-style object to manufacture [`DeleteUseCaseOutput`](crate::output::DeleteUseCaseOutput)
    pub fn builder() -> crate::output::delete_use_case_output::Builder {
        crate::output::delete_use_case_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSecurityProfileOutput {}
impl std::fmt::Debug for DeleteSecurityProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSecurityProfileOutput");
        formatter.finish()
    }
}
/// See [`DeleteSecurityProfileOutput`](crate::output::DeleteSecurityProfileOutput)
pub mod delete_security_profile_output {
    /// A builder for [`DeleteSecurityProfileOutput`](crate::output::DeleteSecurityProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSecurityProfileOutput`](crate::output::DeleteSecurityProfileOutput)
        pub fn build(self) -> crate::output::DeleteSecurityProfileOutput {
            crate::output::DeleteSecurityProfileOutput {}
        }
    }
}
impl DeleteSecurityProfileOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSecurityProfileOutput`](crate::output::DeleteSecurityProfileOutput)
    pub fn builder() -> crate::output::delete_security_profile_output::Builder {
        crate::output::delete_security_profile_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteQuickConnectOutput {}
impl std::fmt::Debug for DeleteQuickConnectOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteQuickConnectOutput");
        formatter.finish()
    }
}
/// See [`DeleteQuickConnectOutput`](crate::output::DeleteQuickConnectOutput)
pub mod delete_quick_connect_output {
    /// A builder for [`DeleteQuickConnectOutput`](crate::output::DeleteQuickConnectOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteQuickConnectOutput`](crate::output::DeleteQuickConnectOutput)
        pub fn build(self) -> crate::output::DeleteQuickConnectOutput {
            crate::output::DeleteQuickConnectOutput {}
        }
    }
}
impl DeleteQuickConnectOutput {
    /// Creates a new builder-style object to manufacture [`DeleteQuickConnectOutput`](crate::output::DeleteQuickConnectOutput)
    pub fn builder() -> crate::output::delete_quick_connect_output::Builder {
        crate::output::delete_quick_connect_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteIntegrationAssociationOutput {}
impl std::fmt::Debug for DeleteIntegrationAssociationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteIntegrationAssociationOutput");
        formatter.finish()
    }
}
/// See [`DeleteIntegrationAssociationOutput`](crate::output::DeleteIntegrationAssociationOutput)
pub mod delete_integration_association_output {
    /// A builder for [`DeleteIntegrationAssociationOutput`](crate::output::DeleteIntegrationAssociationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteIntegrationAssociationOutput`](crate::output::DeleteIntegrationAssociationOutput)
        pub fn build(self) -> crate::output::DeleteIntegrationAssociationOutput {
            crate::output::DeleteIntegrationAssociationOutput {}
        }
    }
}
impl DeleteIntegrationAssociationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteIntegrationAssociationOutput`](crate::output::DeleteIntegrationAssociationOutput)
    pub fn builder() -> crate::output::delete_integration_association_output::Builder {
        crate::output::delete_integration_association_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteInstanceOutput {}
impl std::fmt::Debug for DeleteInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteInstanceOutput");
        formatter.finish()
    }
}
/// See [`DeleteInstanceOutput`](crate::output::DeleteInstanceOutput)
pub mod delete_instance_output {
    /// A builder for [`DeleteInstanceOutput`](crate::output::DeleteInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteInstanceOutput`](crate::output::DeleteInstanceOutput)
        pub fn build(self) -> crate::output::DeleteInstanceOutput {
            crate::output::DeleteInstanceOutput {}
        }
    }
}
impl DeleteInstanceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteInstanceOutput`](crate::output::DeleteInstanceOutput)
    pub fn builder() -> crate::output::delete_instance_output::Builder {
        crate::output::delete_instance_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteHoursOfOperationOutput {}
impl std::fmt::Debug for DeleteHoursOfOperationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteHoursOfOperationOutput");
        formatter.finish()
    }
}
/// See [`DeleteHoursOfOperationOutput`](crate::output::DeleteHoursOfOperationOutput)
pub mod delete_hours_of_operation_output {
    /// A builder for [`DeleteHoursOfOperationOutput`](crate::output::DeleteHoursOfOperationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteHoursOfOperationOutput`](crate::output::DeleteHoursOfOperationOutput)
        pub fn build(self) -> crate::output::DeleteHoursOfOperationOutput {
            crate::output::DeleteHoursOfOperationOutput {}
        }
    }
}
impl DeleteHoursOfOperationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteHoursOfOperationOutput`](crate::output::DeleteHoursOfOperationOutput)
    pub fn builder() -> crate::output::delete_hours_of_operation_output::Builder {
        crate::output::delete_hours_of_operation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteContactFlowModuleOutput {}
impl std::fmt::Debug for DeleteContactFlowModuleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteContactFlowModuleOutput");
        formatter.finish()
    }
}
/// See [`DeleteContactFlowModuleOutput`](crate::output::DeleteContactFlowModuleOutput)
pub mod delete_contact_flow_module_output {
    /// A builder for [`DeleteContactFlowModuleOutput`](crate::output::DeleteContactFlowModuleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteContactFlowModuleOutput`](crate::output::DeleteContactFlowModuleOutput)
        pub fn build(self) -> crate::output::DeleteContactFlowModuleOutput {
            crate::output::DeleteContactFlowModuleOutput {}
        }
    }
}
impl DeleteContactFlowModuleOutput {
    /// Creates a new builder-style object to manufacture [`DeleteContactFlowModuleOutput`](crate::output::DeleteContactFlowModuleOutput)
    pub fn builder() -> crate::output::delete_contact_flow_module_output::Builder {
        crate::output::delete_contact_flow_module_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteContactFlowOutput {}
impl std::fmt::Debug for DeleteContactFlowOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteContactFlowOutput");
        formatter.finish()
    }
}
/// See [`DeleteContactFlowOutput`](crate::output::DeleteContactFlowOutput)
pub mod delete_contact_flow_output {
    /// A builder for [`DeleteContactFlowOutput`](crate::output::DeleteContactFlowOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteContactFlowOutput`](crate::output::DeleteContactFlowOutput)
        pub fn build(self) -> crate::output::DeleteContactFlowOutput {
            crate::output::DeleteContactFlowOutput {}
        }
    }
}
impl DeleteContactFlowOutput {
    /// Creates a new builder-style object to manufacture [`DeleteContactFlowOutput`](crate::output::DeleteContactFlowOutput)
    pub fn builder() -> crate::output::delete_contact_flow_output::Builder {
        crate::output::delete_contact_flow_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateUserHierarchyGroupOutput {
    /// <p>The identifier of the hierarchy group.</p>
    pub hierarchy_group_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the hierarchy group. </p>
    pub hierarchy_group_arn: std::option::Option<std::string::String>,
}
impl CreateUserHierarchyGroupOutput {
    /// <p>The identifier of the hierarchy group.</p>
    pub fn hierarchy_group_id(&self) -> std::option::Option<&str> {
        self.hierarchy_group_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the hierarchy group. </p>
    pub fn hierarchy_group_arn(&self) -> std::option::Option<&str> {
        self.hierarchy_group_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateUserHierarchyGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateUserHierarchyGroupOutput");
        formatter.field("hierarchy_group_id", &self.hierarchy_group_id);
        formatter.field("hierarchy_group_arn", &self.hierarchy_group_arn);
        formatter.finish()
    }
}
/// See [`CreateUserHierarchyGroupOutput`](crate::output::CreateUserHierarchyGroupOutput)
pub mod create_user_hierarchy_group_output {
    /// A builder for [`CreateUserHierarchyGroupOutput`](crate::output::CreateUserHierarchyGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) hierarchy_group_id: std::option::Option<std::string::String>,
        pub(crate) hierarchy_group_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the hierarchy group.</p>
        pub fn hierarchy_group_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.hierarchy_group_id = Some(input.into());
            self
        }
        /// <p>The identifier of the hierarchy group.</p>
        pub fn set_hierarchy_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.hierarchy_group_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the hierarchy group. </p>
        pub fn hierarchy_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.hierarchy_group_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the hierarchy group. </p>
        pub fn set_hierarchy_group_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.hierarchy_group_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateUserHierarchyGroupOutput`](crate::output::CreateUserHierarchyGroupOutput)
        pub fn build(self) -> crate::output::CreateUserHierarchyGroupOutput {
            crate::output::CreateUserHierarchyGroupOutput {
                hierarchy_group_id: self.hierarchy_group_id,
                hierarchy_group_arn: self.hierarchy_group_arn,
            }
        }
    }
}
impl CreateUserHierarchyGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateUserHierarchyGroupOutput`](crate::output::CreateUserHierarchyGroupOutput)
    pub fn builder() -> crate::output::create_user_hierarchy_group_output::Builder {
        crate::output::create_user_hierarchy_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateUserOutput {
    /// <p>The identifier of the user account.</p>
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the user account.</p>
    pub user_arn: std::option::Option<std::string::String>,
}
impl CreateUserOutput {
    /// <p>The identifier of the user account.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the user account.</p>
    pub fn user_arn(&self) -> std::option::Option<&str> {
        self.user_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateUserOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateUserOutput");
        formatter.field("user_id", &self.user_id);
        formatter.field("user_arn", &self.user_arn);
        formatter.finish()
    }
}
/// See [`CreateUserOutput`](crate::output::CreateUserOutput)
pub mod create_user_output {
    /// A builder for [`CreateUserOutput`](crate::output::CreateUserOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_id: std::option::Option<std::string::String>,
        pub(crate) user_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the user account.</p>
        pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_id = Some(input.into());
            self
        }
        /// <p>The identifier of the user account.</p>
        pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.user_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the user account.</p>
        pub fn user_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the user account.</p>
        pub fn set_user_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.user_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateUserOutput`](crate::output::CreateUserOutput)
        pub fn build(self) -> crate::output::CreateUserOutput {
            crate::output::CreateUserOutput {
                user_id: self.user_id,
                user_arn: self.user_arn,
            }
        }
    }
}
impl CreateUserOutput {
    /// Creates a new builder-style object to manufacture [`CreateUserOutput`](crate::output::CreateUserOutput)
    pub fn builder() -> crate::output::create_user_output::Builder {
        crate::output::create_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateUseCaseOutput {
    /// <p>The identifier of the use case.</p>
    pub use_case_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the use case.</p>
    pub use_case_arn: std::option::Option<std::string::String>,
}
impl CreateUseCaseOutput {
    /// <p>The identifier of the use case.</p>
    pub fn use_case_id(&self) -> std::option::Option<&str> {
        self.use_case_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the use case.</p>
    pub fn use_case_arn(&self) -> std::option::Option<&str> {
        self.use_case_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateUseCaseOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateUseCaseOutput");
        formatter.field("use_case_id", &self.use_case_id);
        formatter.field("use_case_arn", &self.use_case_arn);
        formatter.finish()
    }
}
/// See [`CreateUseCaseOutput`](crate::output::CreateUseCaseOutput)
pub mod create_use_case_output {
    /// A builder for [`CreateUseCaseOutput`](crate::output::CreateUseCaseOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) use_case_id: std::option::Option<std::string::String>,
        pub(crate) use_case_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the use case.</p>
        pub fn use_case_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.use_case_id = Some(input.into());
            self
        }
        /// <p>The identifier of the use case.</p>
        pub fn set_use_case_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.use_case_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the use case.</p>
        pub fn use_case_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.use_case_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the use case.</p>
        pub fn set_use_case_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.use_case_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateUseCaseOutput`](crate::output::CreateUseCaseOutput)
        pub fn build(self) -> crate::output::CreateUseCaseOutput {
            crate::output::CreateUseCaseOutput {
                use_case_id: self.use_case_id,
                use_case_arn: self.use_case_arn,
            }
        }
    }
}
impl CreateUseCaseOutput {
    /// Creates a new builder-style object to manufacture [`CreateUseCaseOutput`](crate::output::CreateUseCaseOutput)
    pub fn builder() -> crate::output::create_use_case_output::Builder {
        crate::output::create_use_case_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSecurityProfileOutput {
    /// <p>The identifier for the security profle.</p>
    pub security_profile_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the security profile.</p>
    pub security_profile_arn: std::option::Option<std::string::String>,
}
impl CreateSecurityProfileOutput {
    /// <p>The identifier for the security profle.</p>
    pub fn security_profile_id(&self) -> std::option::Option<&str> {
        self.security_profile_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the security profile.</p>
    pub fn security_profile_arn(&self) -> std::option::Option<&str> {
        self.security_profile_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateSecurityProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSecurityProfileOutput");
        formatter.field("security_profile_id", &self.security_profile_id);
        formatter.field("security_profile_arn", &self.security_profile_arn);
        formatter.finish()
    }
}
/// See [`CreateSecurityProfileOutput`](crate::output::CreateSecurityProfileOutput)
pub mod create_security_profile_output {
    /// A builder for [`CreateSecurityProfileOutput`](crate::output::CreateSecurityProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_profile_id: std::option::Option<std::string::String>,
        pub(crate) security_profile_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier for the security profle.</p>
        pub fn security_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.security_profile_id = Some(input.into());
            self
        }
        /// <p>The identifier for the security profle.</p>
        pub fn set_security_profile_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.security_profile_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the security profile.</p>
        pub fn security_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.security_profile_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the security profile.</p>
        pub fn set_security_profile_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.security_profile_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateSecurityProfileOutput`](crate::output::CreateSecurityProfileOutput)
        pub fn build(self) -> crate::output::CreateSecurityProfileOutput {
            crate::output::CreateSecurityProfileOutput {
                security_profile_id: self.security_profile_id,
                security_profile_arn: self.security_profile_arn,
            }
        }
    }
}
impl CreateSecurityProfileOutput {
    /// Creates a new builder-style object to manufacture [`CreateSecurityProfileOutput`](crate::output::CreateSecurityProfileOutput)
    pub fn builder() -> crate::output::create_security_profile_output::Builder {
        crate::output::create_security_profile_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateRoutingProfileOutput {
    /// <p>The Amazon Resource Name (ARN) of the routing profile.</p>
    pub routing_profile_arn: std::option::Option<std::string::String>,
    /// <p>The identifier of the routing profile.</p>
    pub routing_profile_id: std::option::Option<std::string::String>,
}
impl CreateRoutingProfileOutput {
    /// <p>The Amazon Resource Name (ARN) of the routing profile.</p>
    pub fn routing_profile_arn(&self) -> std::option::Option<&str> {
        self.routing_profile_arn.as_deref()
    }
    /// <p>The identifier of the routing profile.</p>
    pub fn routing_profile_id(&self) -> std::option::Option<&str> {
        self.routing_profile_id.as_deref()
    }
}
impl std::fmt::Debug for CreateRoutingProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateRoutingProfileOutput");
        formatter.field("routing_profile_arn", &self.routing_profile_arn);
        formatter.field("routing_profile_id", &self.routing_profile_id);
        formatter.finish()
    }
}
/// See [`CreateRoutingProfileOutput`](crate::output::CreateRoutingProfileOutput)
pub mod create_routing_profile_output {
    /// A builder for [`CreateRoutingProfileOutput`](crate::output::CreateRoutingProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) routing_profile_arn: std::option::Option<std::string::String>,
        pub(crate) routing_profile_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the routing profile.</p>
        pub fn routing_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.routing_profile_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the routing profile.</p>
        pub fn set_routing_profile_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.routing_profile_arn = input;
            self
        }
        /// <p>The identifier of the routing profile.</p>
        pub fn routing_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.routing_profile_id = Some(input.into());
            self
        }
        /// <p>The identifier of the routing profile.</p>
        pub fn set_routing_profile_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.routing_profile_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateRoutingProfileOutput`](crate::output::CreateRoutingProfileOutput)
        pub fn build(self) -> crate::output::CreateRoutingProfileOutput {
            crate::output::CreateRoutingProfileOutput {
                routing_profile_arn: self.routing_profile_arn,
                routing_profile_id: self.routing_profile_id,
            }
        }
    }
}
impl CreateRoutingProfileOutput {
    /// Creates a new builder-style object to manufacture [`CreateRoutingProfileOutput`](crate::output::CreateRoutingProfileOutput)
    pub fn builder() -> crate::output::create_routing_profile_output::Builder {
        crate::output::create_routing_profile_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateQuickConnectOutput {
    /// <p>The Amazon Resource Name (ARN) for the quick connect. </p>
    pub quick_connect_arn: std::option::Option<std::string::String>,
    /// <p>The identifier for the quick connect. </p>
    pub quick_connect_id: std::option::Option<std::string::String>,
}
impl CreateQuickConnectOutput {
    /// <p>The Amazon Resource Name (ARN) for the quick connect. </p>
    pub fn quick_connect_arn(&self) -> std::option::Option<&str> {
        self.quick_connect_arn.as_deref()
    }
    /// <p>The identifier for the quick connect. </p>
    pub fn quick_connect_id(&self) -> std::option::Option<&str> {
        self.quick_connect_id.as_deref()
    }
}
impl std::fmt::Debug for CreateQuickConnectOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateQuickConnectOutput");
        formatter.field("quick_connect_arn", &self.quick_connect_arn);
        formatter.field("quick_connect_id", &self.quick_connect_id);
        formatter.finish()
    }
}
/// See [`CreateQuickConnectOutput`](crate::output::CreateQuickConnectOutput)
pub mod create_quick_connect_output {
    /// A builder for [`CreateQuickConnectOutput`](crate::output::CreateQuickConnectOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) quick_connect_arn: std::option::Option<std::string::String>,
        pub(crate) quick_connect_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) for the quick connect. </p>
        pub fn quick_connect_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.quick_connect_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the quick connect. </p>
        pub fn set_quick_connect_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.quick_connect_arn = input;
            self
        }
        /// <p>The identifier for the quick connect. </p>
        pub fn quick_connect_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.quick_connect_id = Some(input.into());
            self
        }
        /// <p>The identifier for the quick connect. </p>
        pub fn set_quick_connect_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.quick_connect_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateQuickConnectOutput`](crate::output::CreateQuickConnectOutput)
        pub fn build(self) -> crate::output::CreateQuickConnectOutput {
            crate::output::CreateQuickConnectOutput {
                quick_connect_arn: self.quick_connect_arn,
                quick_connect_id: self.quick_connect_id,
            }
        }
    }
}
impl CreateQuickConnectOutput {
    /// Creates a new builder-style object to manufacture [`CreateQuickConnectOutput`](crate::output::CreateQuickConnectOutput)
    pub fn builder() -> crate::output::create_quick_connect_output::Builder {
        crate::output::create_quick_connect_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateQueueOutput {
    /// <p>The Amazon Resource Name (ARN) of the queue.</p>
    pub queue_arn: std::option::Option<std::string::String>,
    /// <p>The identifier for the queue.</p>
    pub queue_id: std::option::Option<std::string::String>,
}
impl CreateQueueOutput {
    /// <p>The Amazon Resource Name (ARN) of the queue.</p>
    pub fn queue_arn(&self) -> std::option::Option<&str> {
        self.queue_arn.as_deref()
    }
    /// <p>The identifier for the queue.</p>
    pub fn queue_id(&self) -> std::option::Option<&str> {
        self.queue_id.as_deref()
    }
}
impl std::fmt::Debug for CreateQueueOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateQueueOutput");
        formatter.field("queue_arn", &self.queue_arn);
        formatter.field("queue_id", &self.queue_id);
        formatter.finish()
    }
}
/// See [`CreateQueueOutput`](crate::output::CreateQueueOutput)
pub mod create_queue_output {
    /// A builder for [`CreateQueueOutput`](crate::output::CreateQueueOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) queue_arn: std::option::Option<std::string::String>,
        pub(crate) queue_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the queue.</p>
        pub fn queue_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.queue_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the queue.</p>
        pub fn set_queue_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.queue_arn = input;
            self
        }
        /// <p>The identifier for the queue.</p>
        pub fn queue_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.queue_id = Some(input.into());
            self
        }
        /// <p>The identifier for the queue.</p>
        pub fn set_queue_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.queue_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateQueueOutput`](crate::output::CreateQueueOutput)
        pub fn build(self) -> crate::output::CreateQueueOutput {
            crate::output::CreateQueueOutput {
                queue_arn: self.queue_arn,
                queue_id: self.queue_id,
            }
        }
    }
}
impl CreateQueueOutput {
    /// Creates a new builder-style object to manufacture [`CreateQueueOutput`](crate::output::CreateQueueOutput)
    pub fn builder() -> crate::output::create_queue_output::Builder {
        crate::output::create_queue_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateIntegrationAssociationOutput {
    /// <p>The identifier for the integration association.</p>
    pub integration_association_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the association.</p>
    pub integration_association_arn: std::option::Option<std::string::String>,
}
impl CreateIntegrationAssociationOutput {
    /// <p>The identifier for the integration association.</p>
    pub fn integration_association_id(&self) -> std::option::Option<&str> {
        self.integration_association_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the association.</p>
    pub fn integration_association_arn(&self) -> std::option::Option<&str> {
        self.integration_association_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateIntegrationAssociationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateIntegrationAssociationOutput");
        formatter.field(
            "integration_association_id",
            &self.integration_association_id,
        );
        formatter.field(
            "integration_association_arn",
            &self.integration_association_arn,
        );
        formatter.finish()
    }
}
/// See [`CreateIntegrationAssociationOutput`](crate::output::CreateIntegrationAssociationOutput)
pub mod create_integration_association_output {
    /// A builder for [`CreateIntegrationAssociationOutput`](crate::output::CreateIntegrationAssociationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) integration_association_id: std::option::Option<std::string::String>,
        pub(crate) integration_association_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier for the integration association.</p>
        pub fn integration_association_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.integration_association_id = Some(input.into());
            self
        }
        /// <p>The identifier for the integration association.</p>
        pub fn set_integration_association_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.integration_association_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the association.</p>
        pub fn integration_association_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.integration_association_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the association.</p>
        pub fn set_integration_association_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.integration_association_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateIntegrationAssociationOutput`](crate::output::CreateIntegrationAssociationOutput)
        pub fn build(self) -> crate::output::CreateIntegrationAssociationOutput {
            crate::output::CreateIntegrationAssociationOutput {
                integration_association_id: self.integration_association_id,
                integration_association_arn: self.integration_association_arn,
            }
        }
    }
}
impl CreateIntegrationAssociationOutput {
    /// Creates a new builder-style object to manufacture [`CreateIntegrationAssociationOutput`](crate::output::CreateIntegrationAssociationOutput)
    pub fn builder() -> crate::output::create_integration_association_output::Builder {
        crate::output::create_integration_association_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateInstanceOutput {
    /// <p>The identifier for the instance.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the instance.</p>
    pub arn: std::option::Option<std::string::String>,
}
impl CreateInstanceOutput {
    /// <p>The identifier for the instance.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the instance.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl std::fmt::Debug for CreateInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateInstanceOutput");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
/// See [`CreateInstanceOutput`](crate::output::CreateInstanceOutput)
pub mod create_instance_output {
    /// A builder for [`CreateInstanceOutput`](crate::output::CreateInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier for the instance.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The identifier for the instance.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the instance.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the instance.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateInstanceOutput`](crate::output::CreateInstanceOutput)
        pub fn build(self) -> crate::output::CreateInstanceOutput {
            crate::output::CreateInstanceOutput {
                id: self.id,
                arn: self.arn,
            }
        }
    }
}
impl CreateInstanceOutput {
    /// Creates a new builder-style object to manufacture [`CreateInstanceOutput`](crate::output::CreateInstanceOutput)
    pub fn builder() -> crate::output::create_instance_output::Builder {
        crate::output::create_instance_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateHoursOfOperationOutput {
    /// <p>The identifier for the hours of operation.</p>
    pub hours_of_operation_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the hours of operation.</p>
    pub hours_of_operation_arn: std::option::Option<std::string::String>,
}
impl CreateHoursOfOperationOutput {
    /// <p>The identifier for the hours of operation.</p>
    pub fn hours_of_operation_id(&self) -> std::option::Option<&str> {
        self.hours_of_operation_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the hours of operation.</p>
    pub fn hours_of_operation_arn(&self) -> std::option::Option<&str> {
        self.hours_of_operation_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateHoursOfOperationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateHoursOfOperationOutput");
        formatter.field("hours_of_operation_id", &self.hours_of_operation_id);
        formatter.field("hours_of_operation_arn", &self.hours_of_operation_arn);
        formatter.finish()
    }
}
/// See [`CreateHoursOfOperationOutput`](crate::output::CreateHoursOfOperationOutput)
pub mod create_hours_of_operation_output {
    /// A builder for [`CreateHoursOfOperationOutput`](crate::output::CreateHoursOfOperationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) hours_of_operation_id: std::option::Option<std::string::String>,
        pub(crate) hours_of_operation_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier for the hours of operation.</p>
        pub fn hours_of_operation_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.hours_of_operation_id = Some(input.into());
            self
        }
        /// <p>The identifier for the hours of operation.</p>
        pub fn set_hours_of_operation_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.hours_of_operation_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the hours of operation.</p>
        pub fn hours_of_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.hours_of_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the hours of operation.</p>
        pub fn set_hours_of_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.hours_of_operation_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateHoursOfOperationOutput`](crate::output::CreateHoursOfOperationOutput)
        pub fn build(self) -> crate::output::CreateHoursOfOperationOutput {
            crate::output::CreateHoursOfOperationOutput {
                hours_of_operation_id: self.hours_of_operation_id,
                hours_of_operation_arn: self.hours_of_operation_arn,
            }
        }
    }
}
impl CreateHoursOfOperationOutput {
    /// Creates a new builder-style object to manufacture [`CreateHoursOfOperationOutput`](crate::output::CreateHoursOfOperationOutput)
    pub fn builder() -> crate::output::create_hours_of_operation_output::Builder {
        crate::output::create_hours_of_operation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateContactFlowModuleOutput {
    /// <p>The identifier of the contact flow module.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the contact flow module.</p>
    pub arn: std::option::Option<std::string::String>,
}
impl CreateContactFlowModuleOutput {
    /// <p>The identifier of the contact flow module.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the contact flow module.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl std::fmt::Debug for CreateContactFlowModuleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateContactFlowModuleOutput");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
/// See [`CreateContactFlowModuleOutput`](crate::output::CreateContactFlowModuleOutput)
pub mod create_contact_flow_module_output {
    /// A builder for [`CreateContactFlowModuleOutput`](crate::output::CreateContactFlowModuleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the contact flow module.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The identifier of the contact flow module.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the contact flow module.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the contact flow module.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateContactFlowModuleOutput`](crate::output::CreateContactFlowModuleOutput)
        pub fn build(self) -> crate::output::CreateContactFlowModuleOutput {
            crate::output::CreateContactFlowModuleOutput {
                id: self.id,
                arn: self.arn,
            }
        }
    }
}
impl CreateContactFlowModuleOutput {
    /// Creates a new builder-style object to manufacture [`CreateContactFlowModuleOutput`](crate::output::CreateContactFlowModuleOutput)
    pub fn builder() -> crate::output::create_contact_flow_module_output::Builder {
        crate::output::create_contact_flow_module_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateContactFlowOutput {
    /// <p>The identifier of the contact flow.</p>
    pub contact_flow_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the contact flow.</p>
    pub contact_flow_arn: std::option::Option<std::string::String>,
}
impl CreateContactFlowOutput {
    /// <p>The identifier of the contact flow.</p>
    pub fn contact_flow_id(&self) -> std::option::Option<&str> {
        self.contact_flow_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the contact flow.</p>
    pub fn contact_flow_arn(&self) -> std::option::Option<&str> {
        self.contact_flow_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateContactFlowOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateContactFlowOutput");
        formatter.field("contact_flow_id", &self.contact_flow_id);
        formatter.field("contact_flow_arn", &self.contact_flow_arn);
        formatter.finish()
    }
}
/// See [`CreateContactFlowOutput`](crate::output::CreateContactFlowOutput)
pub mod create_contact_flow_output {
    /// A builder for [`CreateContactFlowOutput`](crate::output::CreateContactFlowOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) contact_flow_id: std::option::Option<std::string::String>,
        pub(crate) contact_flow_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the contact flow.</p>
        pub fn contact_flow_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.contact_flow_id = Some(input.into());
            self
        }
        /// <p>The identifier of the contact flow.</p>
        pub fn set_contact_flow_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.contact_flow_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the contact flow.</p>
        pub fn contact_flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.contact_flow_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the contact flow.</p>
        pub fn set_contact_flow_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.contact_flow_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateContactFlowOutput`](crate::output::CreateContactFlowOutput)
        pub fn build(self) -> crate::output::CreateContactFlowOutput {
            crate::output::CreateContactFlowOutput {
                contact_flow_id: self.contact_flow_id,
                contact_flow_arn: self.contact_flow_arn,
            }
        }
    }
}
impl CreateContactFlowOutput {
    /// Creates a new builder-style object to manufacture [`CreateContactFlowOutput`](crate::output::CreateContactFlowOutput)
    pub fn builder() -> crate::output::create_contact_flow_output::Builder {
        crate::output::create_contact_flow_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateAgentStatusOutput {
    /// <p>The Amazon Resource Name (ARN) of the agent status.</p>
    pub agent_status_arn: std::option::Option<std::string::String>,
    /// <p>The identifier of the agent status.</p>
    pub agent_status_id: std::option::Option<std::string::String>,
}
impl CreateAgentStatusOutput {
    /// <p>The Amazon Resource Name (ARN) of the agent status.</p>
    pub fn agent_status_arn(&self) -> std::option::Option<&str> {
        self.agent_status_arn.as_deref()
    }
    /// <p>The identifier of the agent status.</p>
    pub fn agent_status_id(&self) -> std::option::Option<&str> {
        self.agent_status_id.as_deref()
    }
}
impl std::fmt::Debug for CreateAgentStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAgentStatusOutput");
        formatter.field("agent_status_arn", &self.agent_status_arn);
        formatter.field("agent_status_id", &self.agent_status_id);
        formatter.finish()
    }
}
/// See [`CreateAgentStatusOutput`](crate::output::CreateAgentStatusOutput)
pub mod create_agent_status_output {
    /// A builder for [`CreateAgentStatusOutput`](crate::output::CreateAgentStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) agent_status_arn: std::option::Option<std::string::String>,
        pub(crate) agent_status_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the agent status.</p>
        pub fn agent_status_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.agent_status_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the agent status.</p>
        pub fn set_agent_status_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.agent_status_arn = input;
            self
        }
        /// <p>The identifier of the agent status.</p>
        pub fn agent_status_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.agent_status_id = Some(input.into());
            self
        }
        /// <p>The identifier of the agent status.</p>
        pub fn set_agent_status_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.agent_status_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateAgentStatusOutput`](crate::output::CreateAgentStatusOutput)
        pub fn build(self) -> crate::output::CreateAgentStatusOutput {
            crate::output::CreateAgentStatusOutput {
                agent_status_arn: self.agent_status_arn,
                agent_status_id: self.agent_status_id,
            }
        }
    }
}
impl CreateAgentStatusOutput {
    /// Creates a new builder-style object to manufacture [`CreateAgentStatusOutput`](crate::output::CreateAgentStatusOutput)
    pub fn builder() -> crate::output::create_agent_status_output::Builder {
        crate::output::create_agent_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateSecurityKeyOutput {
    /// <p>The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.</p>
    pub association_id: std::option::Option<std::string::String>,
}
impl AssociateSecurityKeyOutput {
    /// <p>The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.</p>
    pub fn association_id(&self) -> std::option::Option<&str> {
        self.association_id.as_deref()
    }
}
impl std::fmt::Debug for AssociateSecurityKeyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateSecurityKeyOutput");
        formatter.field("association_id", &self.association_id);
        formatter.finish()
    }
}
/// See [`AssociateSecurityKeyOutput`](crate::output::AssociateSecurityKeyOutput)
pub mod associate_security_key_output {
    /// A builder for [`AssociateSecurityKeyOutput`](crate::output::AssociateSecurityKeyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.</p>
        pub fn association_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.association_id = Some(input.into());
            self
        }
        /// <p>The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.</p>
        pub fn set_association_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.association_id = input;
            self
        }
        /// Consumes the builder and constructs a [`AssociateSecurityKeyOutput`](crate::output::AssociateSecurityKeyOutput)
        pub fn build(self) -> crate::output::AssociateSecurityKeyOutput {
            crate::output::AssociateSecurityKeyOutput {
                association_id: self.association_id,
            }
        }
    }
}
impl AssociateSecurityKeyOutput {
    /// Creates a new builder-style object to manufacture [`AssociateSecurityKeyOutput`](crate::output::AssociateSecurityKeyOutput)
    pub fn builder() -> crate::output::associate_security_key_output::Builder {
        crate::output::associate_security_key_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateRoutingProfileQueuesOutput {}
impl std::fmt::Debug for AssociateRoutingProfileQueuesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateRoutingProfileQueuesOutput");
        formatter.finish()
    }
}
/// See [`AssociateRoutingProfileQueuesOutput`](crate::output::AssociateRoutingProfileQueuesOutput)
pub mod associate_routing_profile_queues_output {
    /// A builder for [`AssociateRoutingProfileQueuesOutput`](crate::output::AssociateRoutingProfileQueuesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateRoutingProfileQueuesOutput`](crate::output::AssociateRoutingProfileQueuesOutput)
        pub fn build(self) -> crate::output::AssociateRoutingProfileQueuesOutput {
            crate::output::AssociateRoutingProfileQueuesOutput {}
        }
    }
}
impl AssociateRoutingProfileQueuesOutput {
    /// Creates a new builder-style object to manufacture [`AssociateRoutingProfileQueuesOutput`](crate::output::AssociateRoutingProfileQueuesOutput)
    pub fn builder() -> crate::output::associate_routing_profile_queues_output::Builder {
        crate::output::associate_routing_profile_queues_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateQueueQuickConnectsOutput {}
impl std::fmt::Debug for AssociateQueueQuickConnectsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateQueueQuickConnectsOutput");
        formatter.finish()
    }
}
/// See [`AssociateQueueQuickConnectsOutput`](crate::output::AssociateQueueQuickConnectsOutput)
pub mod associate_queue_quick_connects_output {
    /// A builder for [`AssociateQueueQuickConnectsOutput`](crate::output::AssociateQueueQuickConnectsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateQueueQuickConnectsOutput`](crate::output::AssociateQueueQuickConnectsOutput)
        pub fn build(self) -> crate::output::AssociateQueueQuickConnectsOutput {
            crate::output::AssociateQueueQuickConnectsOutput {}
        }
    }
}
impl AssociateQueueQuickConnectsOutput {
    /// Creates a new builder-style object to manufacture [`AssociateQueueQuickConnectsOutput`](crate::output::AssociateQueueQuickConnectsOutput)
    pub fn builder() -> crate::output::associate_queue_quick_connects_output::Builder {
        crate::output::associate_queue_quick_connects_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateLexBotOutput {}
impl std::fmt::Debug for AssociateLexBotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateLexBotOutput");
        formatter.finish()
    }
}
/// See [`AssociateLexBotOutput`](crate::output::AssociateLexBotOutput)
pub mod associate_lex_bot_output {
    /// A builder for [`AssociateLexBotOutput`](crate::output::AssociateLexBotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateLexBotOutput`](crate::output::AssociateLexBotOutput)
        pub fn build(self) -> crate::output::AssociateLexBotOutput {
            crate::output::AssociateLexBotOutput {}
        }
    }
}
impl AssociateLexBotOutput {
    /// Creates a new builder-style object to manufacture [`AssociateLexBotOutput`](crate::output::AssociateLexBotOutput)
    pub fn builder() -> crate::output::associate_lex_bot_output::Builder {
        crate::output::associate_lex_bot_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateLambdaFunctionOutput {}
impl std::fmt::Debug for AssociateLambdaFunctionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateLambdaFunctionOutput");
        formatter.finish()
    }
}
/// See [`AssociateLambdaFunctionOutput`](crate::output::AssociateLambdaFunctionOutput)
pub mod associate_lambda_function_output {
    /// A builder for [`AssociateLambdaFunctionOutput`](crate::output::AssociateLambdaFunctionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateLambdaFunctionOutput`](crate::output::AssociateLambdaFunctionOutput)
        pub fn build(self) -> crate::output::AssociateLambdaFunctionOutput {
            crate::output::AssociateLambdaFunctionOutput {}
        }
    }
}
impl AssociateLambdaFunctionOutput {
    /// Creates a new builder-style object to manufacture [`AssociateLambdaFunctionOutput`](crate::output::AssociateLambdaFunctionOutput)
    pub fn builder() -> crate::output::associate_lambda_function_output::Builder {
        crate::output::associate_lambda_function_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateInstanceStorageConfigOutput {
    /// <p>The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.</p>
    pub association_id: std::option::Option<std::string::String>,
}
impl AssociateInstanceStorageConfigOutput {
    /// <p>The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.</p>
    pub fn association_id(&self) -> std::option::Option<&str> {
        self.association_id.as_deref()
    }
}
impl std::fmt::Debug for AssociateInstanceStorageConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateInstanceStorageConfigOutput");
        formatter.field("association_id", &self.association_id);
        formatter.finish()
    }
}
/// See [`AssociateInstanceStorageConfigOutput`](crate::output::AssociateInstanceStorageConfigOutput)
pub mod associate_instance_storage_config_output {
    /// A builder for [`AssociateInstanceStorageConfigOutput`](crate::output::AssociateInstanceStorageConfigOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.</p>
        pub fn association_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.association_id = Some(input.into());
            self
        }
        /// <p>The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.</p>
        pub fn set_association_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.association_id = input;
            self
        }
        /// Consumes the builder and constructs a [`AssociateInstanceStorageConfigOutput`](crate::output::AssociateInstanceStorageConfigOutput)
        pub fn build(self) -> crate::output::AssociateInstanceStorageConfigOutput {
            crate::output::AssociateInstanceStorageConfigOutput {
                association_id: self.association_id,
            }
        }
    }
}
impl AssociateInstanceStorageConfigOutput {
    /// Creates a new builder-style object to manufacture [`AssociateInstanceStorageConfigOutput`](crate::output::AssociateInstanceStorageConfigOutput)
    pub fn builder() -> crate::output::associate_instance_storage_config_output::Builder {
        crate::output::associate_instance_storage_config_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateBotOutput {}
impl std::fmt::Debug for AssociateBotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateBotOutput");
        formatter.finish()
    }
}
/// See [`AssociateBotOutput`](crate::output::AssociateBotOutput)
pub mod associate_bot_output {
    /// A builder for [`AssociateBotOutput`](crate::output::AssociateBotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateBotOutput`](crate::output::AssociateBotOutput)
        pub fn build(self) -> crate::output::AssociateBotOutput {
            crate::output::AssociateBotOutput {}
        }
    }
}
impl AssociateBotOutput {
    /// Creates a new builder-style object to manufacture [`AssociateBotOutput`](crate::output::AssociateBotOutput)
    pub fn builder() -> crate::output::associate_bot_output::Builder {
        crate::output::associate_bot_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateApprovedOriginOutput {}
impl std::fmt::Debug for AssociateApprovedOriginOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateApprovedOriginOutput");
        formatter.finish()
    }
}
/// See [`AssociateApprovedOriginOutput`](crate::output::AssociateApprovedOriginOutput)
pub mod associate_approved_origin_output {
    /// A builder for [`AssociateApprovedOriginOutput`](crate::output::AssociateApprovedOriginOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateApprovedOriginOutput`](crate::output::AssociateApprovedOriginOutput)
        pub fn build(self) -> crate::output::AssociateApprovedOriginOutput {
            crate::output::AssociateApprovedOriginOutput {}
        }
    }
}
impl AssociateApprovedOriginOutput {
    /// Creates a new builder-style object to manufacture [`AssociateApprovedOriginOutput`](crate::output::AssociateApprovedOriginOutput)
    pub fn builder() -> crate::output::associate_approved_origin_output::Builder {
        crate::output::associate_approved_origin_output::Builder::default()
    }
}
