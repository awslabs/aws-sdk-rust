// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the hours of operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HoursOfOperationConfig {
    /// <p>The day that the hours of operation applies to.</p>
    pub day: crate::types::HoursOfOperationDays,
    /// <p>The start time that your contact center opens.</p>
    pub start_time: ::std::option::Option<crate::types::HoursOfOperationTimeSlice>,
    /// <p>The end time that your contact center closes.</p>
    pub end_time: ::std::option::Option<crate::types::HoursOfOperationTimeSlice>,
}
impl HoursOfOperationConfig {
    /// <p>The day that the hours of operation applies to.</p>
    pub fn day(&self) -> &crate::types::HoursOfOperationDays {
        &self.day
    }
    /// <p>The start time that your contact center opens.</p>
    pub fn start_time(&self) -> ::std::option::Option<&crate::types::HoursOfOperationTimeSlice> {
        self.start_time.as_ref()
    }
    /// <p>The end time that your contact center closes.</p>
    pub fn end_time(&self) -> ::std::option::Option<&crate::types::HoursOfOperationTimeSlice> {
        self.end_time.as_ref()
    }
}
impl HoursOfOperationConfig {
    /// Creates a new builder-style object to manufacture [`HoursOfOperationConfig`](crate::types::HoursOfOperationConfig).
    pub fn builder() -> crate::types::builders::HoursOfOperationConfigBuilder {
        crate::types::builders::HoursOfOperationConfigBuilder::default()
    }
}

/// A builder for [`HoursOfOperationConfig`](crate::types::HoursOfOperationConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HoursOfOperationConfigBuilder {
    pub(crate) day: ::std::option::Option<crate::types::HoursOfOperationDays>,
    pub(crate) start_time: ::std::option::Option<crate::types::HoursOfOperationTimeSlice>,
    pub(crate) end_time: ::std::option::Option<crate::types::HoursOfOperationTimeSlice>,
}
impl HoursOfOperationConfigBuilder {
    /// <p>The day that the hours of operation applies to.</p>
    /// This field is required.
    pub fn day(mut self, input: crate::types::HoursOfOperationDays) -> Self {
        self.day = ::std::option::Option::Some(input);
        self
    }
    /// <p>The day that the hours of operation applies to.</p>
    pub fn set_day(mut self, input: ::std::option::Option<crate::types::HoursOfOperationDays>) -> Self {
        self.day = input;
        self
    }
    /// <p>The day that the hours of operation applies to.</p>
    pub fn get_day(&self) -> &::std::option::Option<crate::types::HoursOfOperationDays> {
        &self.day
    }
    /// <p>The start time that your contact center opens.</p>
    /// This field is required.
    pub fn start_time(mut self, input: crate::types::HoursOfOperationTimeSlice) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time that your contact center opens.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<crate::types::HoursOfOperationTimeSlice>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time that your contact center opens.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<crate::types::HoursOfOperationTimeSlice> {
        &self.start_time
    }
    /// <p>The end time that your contact center closes.</p>
    /// This field is required.
    pub fn end_time(mut self, input: crate::types::HoursOfOperationTimeSlice) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time that your contact center closes.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<crate::types::HoursOfOperationTimeSlice>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time that your contact center closes.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<crate::types::HoursOfOperationTimeSlice> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`HoursOfOperationConfig`](crate::types::HoursOfOperationConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`day`](crate::types::builders::HoursOfOperationConfigBuilder::day)
    pub fn build(self) -> ::std::result::Result<crate::types::HoursOfOperationConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HoursOfOperationConfig {
            day: self.day.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "day",
                    "day was not specified but it is required when building HoursOfOperationConfig",
                )
            })?,
            start_time: self.start_time,
            end_time: self.end_time,
        })
    }
}
