// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The distribution of sign in traffic between the instance and its replica(s).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SignInDistribution {
    /// <p>The Amazon Web Services Region of the sign in distribution.</p>
    pub region: ::std::string::String,
    /// <p>Whether sign in distribution is enabled.</p>
    pub enabled: bool,
}
impl SignInDistribution {
    /// <p>The Amazon Web Services Region of the sign in distribution.</p>
    pub fn region(&self) -> &str {
        use std::ops::Deref;
        self.region.deref()
    }
    /// <p>Whether sign in distribution is enabled.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
}
impl SignInDistribution {
    /// Creates a new builder-style object to manufacture [`SignInDistribution`](crate::types::SignInDistribution).
    pub fn builder() -> crate::types::builders::SignInDistributionBuilder {
        crate::types::builders::SignInDistributionBuilder::default()
    }
}

/// A builder for [`SignInDistribution`](crate::types::SignInDistribution).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SignInDistributionBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
}
impl SignInDistributionBuilder {
    /// <p>The Amazon Web Services Region of the sign in distribution.</p>
    /// This field is required.
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region of the sign in distribution.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region of the sign in distribution.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>Whether sign in distribution is enabled.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether sign in distribution is enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Whether sign in distribution is enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Consumes the builder and constructs a [`SignInDistribution`](crate::types::SignInDistribution).
    /// This method will fail if any of the following fields are not set:
    /// - [`region`](crate::types::builders::SignInDistributionBuilder::region)
    pub fn build(self) -> ::std::result::Result<crate::types::SignInDistribution, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SignInDistribution {
            region: self.region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "region",
                    "region was not specified but it is required when building SignInDistribution",
                )
            })?,
            enabled: self.enabled.unwrap_or_default(),
        })
    }
}
