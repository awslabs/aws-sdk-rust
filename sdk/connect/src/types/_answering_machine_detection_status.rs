// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AnsweringMachineDetectionStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let answeringmachinedetectionstatus = unimplemented!();
/// match answeringmachinedetectionstatus {
///     AnsweringMachineDetectionStatus::AmdError => { /* ... */ },
///     AnsweringMachineDetectionStatus::AmdNotApplicable => { /* ... */ },
///     AnsweringMachineDetectionStatus::AmdUnanswered => { /* ... */ },
///     AnsweringMachineDetectionStatus::AmdUnresolved => { /* ... */ },
///     AnsweringMachineDetectionStatus::Answered => { /* ... */ },
///     AnsweringMachineDetectionStatus::Error => { /* ... */ },
///     AnsweringMachineDetectionStatus::FaxMachineDetected => { /* ... */ },
///     AnsweringMachineDetectionStatus::HumanAnswered => { /* ... */ },
///     AnsweringMachineDetectionStatus::SitToneBusy => { /* ... */ },
///     AnsweringMachineDetectionStatus::SitToneDetected => { /* ... */ },
///     AnsweringMachineDetectionStatus::SitToneInvalidNumber => { /* ... */ },
///     AnsweringMachineDetectionStatus::Undetected => { /* ... */ },
///     AnsweringMachineDetectionStatus::VoicemailBeep => { /* ... */ },
///     AnsweringMachineDetectionStatus::VoicemailNoBeep => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `answeringmachinedetectionstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AnsweringMachineDetectionStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AnsweringMachineDetectionStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AnsweringMachineDetectionStatus::NewFeature` is defined.
/// Specifically, when `answeringmachinedetectionstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AnsweringMachineDetectionStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum AnsweringMachineDetectionStatus {
    #[allow(missing_docs)] // documentation missing in model
    AmdError,
    #[allow(missing_docs)] // documentation missing in model
    AmdNotApplicable,
    #[allow(missing_docs)] // documentation missing in model
    AmdUnanswered,
    #[allow(missing_docs)] // documentation missing in model
    AmdUnresolved,
    #[allow(missing_docs)] // documentation missing in model
    Answered,
    #[allow(missing_docs)] // documentation missing in model
    Error,
    #[allow(missing_docs)] // documentation missing in model
    FaxMachineDetected,
    #[allow(missing_docs)] // documentation missing in model
    HumanAnswered,
    #[allow(missing_docs)] // documentation missing in model
    SitToneBusy,
    #[allow(missing_docs)] // documentation missing in model
    SitToneDetected,
    #[allow(missing_docs)] // documentation missing in model
    SitToneInvalidNumber,
    #[allow(missing_docs)] // documentation missing in model
    Undetected,
    #[allow(missing_docs)] // documentation missing in model
    VoicemailBeep,
    #[allow(missing_docs)] // documentation missing in model
    VoicemailNoBeep,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for AnsweringMachineDetectionStatus {
    fn from(s: &str) -> Self {
        match s {
            "AMD_ERROR" => AnsweringMachineDetectionStatus::AmdError,
            "AMD_NOT_APPLICABLE" => AnsweringMachineDetectionStatus::AmdNotApplicable,
            "AMD_UNANSWERED" => AnsweringMachineDetectionStatus::AmdUnanswered,
            "AMD_UNRESOLVED" => AnsweringMachineDetectionStatus::AmdUnresolved,
            "ANSWERED" => AnsweringMachineDetectionStatus::Answered,
            "ERROR" => AnsweringMachineDetectionStatus::Error,
            "FAX_MACHINE_DETECTED" => AnsweringMachineDetectionStatus::FaxMachineDetected,
            "HUMAN_ANSWERED" => AnsweringMachineDetectionStatus::HumanAnswered,
            "SIT_TONE_BUSY" => AnsweringMachineDetectionStatus::SitToneBusy,
            "SIT_TONE_DETECTED" => AnsweringMachineDetectionStatus::SitToneDetected,
            "SIT_TONE_INVALID_NUMBER" => AnsweringMachineDetectionStatus::SitToneInvalidNumber,
            "UNDETECTED" => AnsweringMachineDetectionStatus::Undetected,
            "VOICEMAIL_BEEP" => AnsweringMachineDetectionStatus::VoicemailBeep,
            "VOICEMAIL_NO_BEEP" => AnsweringMachineDetectionStatus::VoicemailNoBeep,
            other => AnsweringMachineDetectionStatus::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for AnsweringMachineDetectionStatus {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(AnsweringMachineDetectionStatus::from(s))
    }
}
impl AnsweringMachineDetectionStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AnsweringMachineDetectionStatus::AmdError => "AMD_ERROR",
            AnsweringMachineDetectionStatus::AmdNotApplicable => "AMD_NOT_APPLICABLE",
            AnsweringMachineDetectionStatus::AmdUnanswered => "AMD_UNANSWERED",
            AnsweringMachineDetectionStatus::AmdUnresolved => "AMD_UNRESOLVED",
            AnsweringMachineDetectionStatus::Answered => "ANSWERED",
            AnsweringMachineDetectionStatus::Error => "ERROR",
            AnsweringMachineDetectionStatus::FaxMachineDetected => "FAX_MACHINE_DETECTED",
            AnsweringMachineDetectionStatus::HumanAnswered => "HUMAN_ANSWERED",
            AnsweringMachineDetectionStatus::SitToneBusy => "SIT_TONE_BUSY",
            AnsweringMachineDetectionStatus::SitToneDetected => "SIT_TONE_DETECTED",
            AnsweringMachineDetectionStatus::SitToneInvalidNumber => "SIT_TONE_INVALID_NUMBER",
            AnsweringMachineDetectionStatus::Undetected => "UNDETECTED",
            AnsweringMachineDetectionStatus::VoicemailBeep => "VOICEMAIL_BEEP",
            AnsweringMachineDetectionStatus::VoicemailNoBeep => "VOICEMAIL_NO_BEEP",
            AnsweringMachineDetectionStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AMD_ERROR",
            "AMD_NOT_APPLICABLE",
            "AMD_UNANSWERED",
            "AMD_UNRESOLVED",
            "ANSWERED",
            "ERROR",
            "FAX_MACHINE_DETECTED",
            "HUMAN_ANSWERED",
            "SIT_TONE_BUSY",
            "SIT_TONE_DETECTED",
            "SIT_TONE_INVALID_NUMBER",
            "UNDETECTED",
            "VOICEMAIL_BEEP",
            "VOICEMAIL_NO_BEEP",
        ]
    }
}
impl ::std::convert::AsRef<str> for AnsweringMachineDetectionStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl AnsweringMachineDetectionStatus {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for AnsweringMachineDetectionStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            AnsweringMachineDetectionStatus::AmdError => write!(f, "AMD_ERROR"),
            AnsweringMachineDetectionStatus::AmdNotApplicable => write!(f, "AMD_NOT_APPLICABLE"),
            AnsweringMachineDetectionStatus::AmdUnanswered => write!(f, "AMD_UNANSWERED"),
            AnsweringMachineDetectionStatus::AmdUnresolved => write!(f, "AMD_UNRESOLVED"),
            AnsweringMachineDetectionStatus::Answered => write!(f, "ANSWERED"),
            AnsweringMachineDetectionStatus::Error => write!(f, "ERROR"),
            AnsweringMachineDetectionStatus::FaxMachineDetected => write!(f, "FAX_MACHINE_DETECTED"),
            AnsweringMachineDetectionStatus::HumanAnswered => write!(f, "HUMAN_ANSWERED"),
            AnsweringMachineDetectionStatus::SitToneBusy => write!(f, "SIT_TONE_BUSY"),
            AnsweringMachineDetectionStatus::SitToneDetected => write!(f, "SIT_TONE_DETECTED"),
            AnsweringMachineDetectionStatus::SitToneInvalidNumber => write!(f, "SIT_TONE_INVALID_NUMBER"),
            AnsweringMachineDetectionStatus::Undetected => write!(f, "UNDETECTED"),
            AnsweringMachineDetectionStatus::VoicemailBeep => write!(f, "VOICEMAIL_BEEP"),
            AnsweringMachineDetectionStatus::VoicemailNoBeep => write!(f, "VOICEMAIL_NO_BEEP"),
            AnsweringMachineDetectionStatus::Unknown(value) => write!(f, "{value}"),
        }
    }
}
