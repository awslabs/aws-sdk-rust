// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a traffic distribution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Distribution {
    /// <p>The Amazon Web Services Region where the traffic is distributed.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>The percentage of the traffic that is distributed, in increments of 10.</p>
    #[doc(hidden)]
    pub percentage: i32,
}
impl Distribution {
    /// <p>The Amazon Web Services Region where the traffic is distributed.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The percentage of the traffic that is distributed, in increments of 10.</p>
    pub fn percentage(&self) -> i32 {
        self.percentage
    }
}
impl Distribution {
    /// Creates a new builder-style object to manufacture [`Distribution`](crate::types::Distribution).
    pub fn builder() -> crate::types::builders::DistributionBuilder {
        crate::types::builders::DistributionBuilder::default()
    }
}

/// A builder for [`Distribution`](crate::types::Distribution).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DistributionBuilder {
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) percentage: std::option::Option<i32>,
}
impl DistributionBuilder {
    /// <p>The Amazon Web Services Region where the traffic is distributed.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the traffic is distributed.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The percentage of the traffic that is distributed, in increments of 10.</p>
    pub fn percentage(mut self, input: i32) -> Self {
        self.percentage = Some(input);
        self
    }
    /// <p>The percentage of the traffic that is distributed, in increments of 10.</p>
    pub fn set_percentage(mut self, input: std::option::Option<i32>) -> Self {
        self.percentage = input;
        self
    }
    /// Consumes the builder and constructs a [`Distribution`](crate::types::Distribution).
    pub fn build(self) -> crate::types::Distribution {
        crate::types::Distribution {
            region: self.region,
            percentage: self.percentage.unwrap_or_default(),
        }
    }
}
