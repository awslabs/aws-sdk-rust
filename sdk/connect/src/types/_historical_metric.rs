// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a historical metric. For a description of each metric, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html">Historical Metrics Definitions</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HistoricalMetric {
    /// <p>The name of the metric.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::HistoricalMetricName>,
    /// <p>The threshold for the metric, used with service level metrics.</p>
    #[doc(hidden)]
    pub threshold: std::option::Option<crate::types::Threshold>,
    /// <p>The statistic for the metric.</p>
    #[doc(hidden)]
    pub statistic: std::option::Option<crate::types::Statistic>,
    /// <p>The unit for the metric.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<crate::types::Unit>,
}
impl HistoricalMetric {
    /// <p>The name of the metric.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::HistoricalMetricName> {
        self.name.as_ref()
    }
    /// <p>The threshold for the metric, used with service level metrics.</p>
    pub fn threshold(&self) -> std::option::Option<&crate::types::Threshold> {
        self.threshold.as_ref()
    }
    /// <p>The statistic for the metric.</p>
    pub fn statistic(&self) -> std::option::Option<&crate::types::Statistic> {
        self.statistic.as_ref()
    }
    /// <p>The unit for the metric.</p>
    pub fn unit(&self) -> std::option::Option<&crate::types::Unit> {
        self.unit.as_ref()
    }
}
impl HistoricalMetric {
    /// Creates a new builder-style object to manufacture [`HistoricalMetric`](crate::types::HistoricalMetric).
    pub fn builder() -> crate::types::builders::HistoricalMetricBuilder {
        crate::types::builders::HistoricalMetricBuilder::default()
    }
}

/// A builder for [`HistoricalMetric`](crate::types::HistoricalMetric).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HistoricalMetricBuilder {
    pub(crate) name: std::option::Option<crate::types::HistoricalMetricName>,
    pub(crate) threshold: std::option::Option<crate::types::Threshold>,
    pub(crate) statistic: std::option::Option<crate::types::Statistic>,
    pub(crate) unit: std::option::Option<crate::types::Unit>,
}
impl HistoricalMetricBuilder {
    /// <p>The name of the metric.</p>
    pub fn name(mut self, input: crate::types::HistoricalMetricName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The name of the metric.</p>
    pub fn set_name(
        mut self,
        input: std::option::Option<crate::types::HistoricalMetricName>,
    ) -> Self {
        self.name = input;
        self
    }
    /// <p>The threshold for the metric, used with service level metrics.</p>
    pub fn threshold(mut self, input: crate::types::Threshold) -> Self {
        self.threshold = Some(input);
        self
    }
    /// <p>The threshold for the metric, used with service level metrics.</p>
    pub fn set_threshold(mut self, input: std::option::Option<crate::types::Threshold>) -> Self {
        self.threshold = input;
        self
    }
    /// <p>The statistic for the metric.</p>
    pub fn statistic(mut self, input: crate::types::Statistic) -> Self {
        self.statistic = Some(input);
        self
    }
    /// <p>The statistic for the metric.</p>
    pub fn set_statistic(mut self, input: std::option::Option<crate::types::Statistic>) -> Self {
        self.statistic = input;
        self
    }
    /// <p>The unit for the metric.</p>
    pub fn unit(mut self, input: crate::types::Unit) -> Self {
        self.unit = Some(input);
        self
    }
    /// <p>The unit for the metric.</p>
    pub fn set_unit(mut self, input: std::option::Option<crate::types::Unit>) -> Self {
        self.unit = input;
        self
    }
    /// Consumes the builder and constructs a [`HistoricalMetric`](crate::types::HistoricalMetric).
    pub fn build(self) -> crate::types::HistoricalMetric {
        crate::types::HistoricalMetric {
            name: self.name,
            threshold: self.threshold,
            statistic: self.statistic,
            unit: self.unit,
        }
    }
}
