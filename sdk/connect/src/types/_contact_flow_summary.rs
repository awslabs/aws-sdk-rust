// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains summary information about a flow.</p>
/// <p>You can also create and update flows using the <a href="https://docs.aws.amazon.com/connect/latest/APIReference/flow-language.html">Amazon Connect Flow language</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContactFlowSummary {
    /// <p>The identifier of the flow.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the flow.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the flow.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of flow.</p>
    #[doc(hidden)]
    pub contact_flow_type: std::option::Option<crate::types::ContactFlowType>,
    /// <p>The type of flow.</p>
    #[doc(hidden)]
    pub contact_flow_state: std::option::Option<crate::types::ContactFlowState>,
}
impl ContactFlowSummary {
    /// <p>The identifier of the flow.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the flow.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the flow.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of flow.</p>
    pub fn contact_flow_type(&self) -> std::option::Option<&crate::types::ContactFlowType> {
        self.contact_flow_type.as_ref()
    }
    /// <p>The type of flow.</p>
    pub fn contact_flow_state(&self) -> std::option::Option<&crate::types::ContactFlowState> {
        self.contact_flow_state.as_ref()
    }
}
impl ContactFlowSummary {
    /// Creates a new builder-style object to manufacture [`ContactFlowSummary`](crate::types::ContactFlowSummary).
    pub fn builder() -> crate::types::builders::ContactFlowSummaryBuilder {
        crate::types::builders::ContactFlowSummaryBuilder::default()
    }
}

/// A builder for [`ContactFlowSummary`](crate::types::ContactFlowSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContactFlowSummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) contact_flow_type: std::option::Option<crate::types::ContactFlowType>,
    pub(crate) contact_flow_state: std::option::Option<crate::types::ContactFlowState>,
}
impl ContactFlowSummaryBuilder {
    /// <p>The identifier of the flow.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the flow.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the flow.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the flow.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of flow.</p>
    pub fn contact_flow_type(mut self, input: crate::types::ContactFlowType) -> Self {
        self.contact_flow_type = Some(input);
        self
    }
    /// <p>The type of flow.</p>
    pub fn set_contact_flow_type(
        mut self,
        input: std::option::Option<crate::types::ContactFlowType>,
    ) -> Self {
        self.contact_flow_type = input;
        self
    }
    /// <p>The type of flow.</p>
    pub fn contact_flow_state(mut self, input: crate::types::ContactFlowState) -> Self {
        self.contact_flow_state = Some(input);
        self
    }
    /// <p>The type of flow.</p>
    pub fn set_contact_flow_state(
        mut self,
        input: std::option::Option<crate::types::ContactFlowState>,
    ) -> Self {
        self.contact_flow_state = input;
        self
    }
    /// Consumes the builder and constructs a [`ContactFlowSummary`](crate::types::ContactFlowSummary).
    pub fn build(self) -> crate::types::ContactFlowSummary {
        crate::types::ContactFlowSummary {
            id: self.id,
            arn: self.arn,
            name: self.name,
            contact_flow_type: self.contact_flow_type,
            contact_flow_state: self.contact_flow_state,
        }
    }
}
