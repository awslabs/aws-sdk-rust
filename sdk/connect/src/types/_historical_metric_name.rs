// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `HistoricalMetricName`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let historicalmetricname = unimplemented!();
/// match historicalmetricname {
///     HistoricalMetricName::AbandonTime => { /* ... */ },
///     HistoricalMetricName::AfterContactWorkTime => { /* ... */ },
///     HistoricalMetricName::ApiContactsHandled => { /* ... */ },
///     HistoricalMetricName::CallbackContactsHandled => { /* ... */ },
///     HistoricalMetricName::ContactsAbandoned => { /* ... */ },
///     HistoricalMetricName::ContactsAgentHungUpFirst => { /* ... */ },
///     HistoricalMetricName::ContactsConsulted => { /* ... */ },
///     HistoricalMetricName::ContactsHandled => { /* ... */ },
///     HistoricalMetricName::ContactsHandledIncoming => { /* ... */ },
///     HistoricalMetricName::ContactsHandledOutbound => { /* ... */ },
///     HistoricalMetricName::ContactsHoldAbandons => { /* ... */ },
///     HistoricalMetricName::ContactsMissed => { /* ... */ },
///     HistoricalMetricName::ContactsQueued => { /* ... */ },
///     HistoricalMetricName::ContactsTransferredIn => { /* ... */ },
///     HistoricalMetricName::ContactsTransferredInFromQueue => { /* ... */ },
///     HistoricalMetricName::ContactsTransferredOut => { /* ... */ },
///     HistoricalMetricName::ContactsTransferredOutFromQueue => { /* ... */ },
///     HistoricalMetricName::HandleTime => { /* ... */ },
///     HistoricalMetricName::HoldTime => { /* ... */ },
///     HistoricalMetricName::InteractionAndHoldTime => { /* ... */ },
///     HistoricalMetricName::InteractionTime => { /* ... */ },
///     HistoricalMetricName::Occupancy => { /* ... */ },
///     HistoricalMetricName::QueuedTime => { /* ... */ },
///     HistoricalMetricName::QueueAnswerTime => { /* ... */ },
///     HistoricalMetricName::ServiceLevel => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `historicalmetricname` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `HistoricalMetricName::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `HistoricalMetricName::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `HistoricalMetricName::NewFeature` is defined.
/// Specifically, when `historicalmetricname` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `HistoricalMetricName::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// <p>The historical metric names.</p>
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum HistoricalMetricName {
    #[allow(missing_docs)] // documentation missing in model
    AbandonTime,
    #[allow(missing_docs)] // documentation missing in model
    AfterContactWorkTime,
    #[allow(missing_docs)] // documentation missing in model
    ApiContactsHandled,
    #[allow(missing_docs)] // documentation missing in model
    CallbackContactsHandled,
    #[allow(missing_docs)] // documentation missing in model
    ContactsAbandoned,
    #[allow(missing_docs)] // documentation missing in model
    ContactsAgentHungUpFirst,
    #[allow(missing_docs)] // documentation missing in model
    ContactsConsulted,
    #[allow(missing_docs)] // documentation missing in model
    ContactsHandled,
    #[allow(missing_docs)] // documentation missing in model
    ContactsHandledIncoming,
    #[allow(missing_docs)] // documentation missing in model
    ContactsHandledOutbound,
    #[allow(missing_docs)] // documentation missing in model
    ContactsHoldAbandons,
    #[allow(missing_docs)] // documentation missing in model
    ContactsMissed,
    #[allow(missing_docs)] // documentation missing in model
    ContactsQueued,
    #[allow(missing_docs)] // documentation missing in model
    ContactsTransferredIn,
    #[allow(missing_docs)] // documentation missing in model
    ContactsTransferredInFromQueue,
    #[allow(missing_docs)] // documentation missing in model
    ContactsTransferredOut,
    #[allow(missing_docs)] // documentation missing in model
    ContactsTransferredOutFromQueue,
    #[allow(missing_docs)] // documentation missing in model
    HandleTime,
    #[allow(missing_docs)] // documentation missing in model
    HoldTime,
    #[allow(missing_docs)] // documentation missing in model
    InteractionAndHoldTime,
    #[allow(missing_docs)] // documentation missing in model
    InteractionTime,
    #[allow(missing_docs)] // documentation missing in model
    Occupancy,
    #[allow(missing_docs)] // documentation missing in model
    QueuedTime,
    #[allow(missing_docs)] // documentation missing in model
    QueueAnswerTime,
    #[allow(missing_docs)] // documentation missing in model
    ServiceLevel,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for HistoricalMetricName {
    fn from(s: &str) -> Self {
        match s {
            "ABANDON_TIME" => HistoricalMetricName::AbandonTime,
            "AFTER_CONTACT_WORK_TIME" => HistoricalMetricName::AfterContactWorkTime,
            "API_CONTACTS_HANDLED" => HistoricalMetricName::ApiContactsHandled,
            "CALLBACK_CONTACTS_HANDLED" => HistoricalMetricName::CallbackContactsHandled,
            "CONTACTS_ABANDONED" => HistoricalMetricName::ContactsAbandoned,
            "CONTACTS_AGENT_HUNG_UP_FIRST" => HistoricalMetricName::ContactsAgentHungUpFirst,
            "CONTACTS_CONSULTED" => HistoricalMetricName::ContactsConsulted,
            "CONTACTS_HANDLED" => HistoricalMetricName::ContactsHandled,
            "CONTACTS_HANDLED_INCOMING" => HistoricalMetricName::ContactsHandledIncoming,
            "CONTACTS_HANDLED_OUTBOUND" => HistoricalMetricName::ContactsHandledOutbound,
            "CONTACTS_HOLD_ABANDONS" => HistoricalMetricName::ContactsHoldAbandons,
            "CONTACTS_MISSED" => HistoricalMetricName::ContactsMissed,
            "CONTACTS_QUEUED" => HistoricalMetricName::ContactsQueued,
            "CONTACTS_TRANSFERRED_IN" => HistoricalMetricName::ContactsTransferredIn,
            "CONTACTS_TRANSFERRED_IN_FROM_QUEUE" => {
                HistoricalMetricName::ContactsTransferredInFromQueue
            }
            "CONTACTS_TRANSFERRED_OUT" => HistoricalMetricName::ContactsTransferredOut,
            "CONTACTS_TRANSFERRED_OUT_FROM_QUEUE" => {
                HistoricalMetricName::ContactsTransferredOutFromQueue
            }
            "HANDLE_TIME" => HistoricalMetricName::HandleTime,
            "HOLD_TIME" => HistoricalMetricName::HoldTime,
            "INTERACTION_AND_HOLD_TIME" => HistoricalMetricName::InteractionAndHoldTime,
            "INTERACTION_TIME" => HistoricalMetricName::InteractionTime,
            "OCCUPANCY" => HistoricalMetricName::Occupancy,
            "QUEUED_TIME" => HistoricalMetricName::QueuedTime,
            "QUEUE_ANSWER_TIME" => HistoricalMetricName::QueueAnswerTime,
            "SERVICE_LEVEL" => HistoricalMetricName::ServiceLevel,
            other => HistoricalMetricName::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for HistoricalMetricName {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(HistoricalMetricName::from(s))
    }
}
impl HistoricalMetricName {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            HistoricalMetricName::AbandonTime => "ABANDON_TIME",
            HistoricalMetricName::AfterContactWorkTime => "AFTER_CONTACT_WORK_TIME",
            HistoricalMetricName::ApiContactsHandled => "API_CONTACTS_HANDLED",
            HistoricalMetricName::CallbackContactsHandled => "CALLBACK_CONTACTS_HANDLED",
            HistoricalMetricName::ContactsAbandoned => "CONTACTS_ABANDONED",
            HistoricalMetricName::ContactsAgentHungUpFirst => "CONTACTS_AGENT_HUNG_UP_FIRST",
            HistoricalMetricName::ContactsConsulted => "CONTACTS_CONSULTED",
            HistoricalMetricName::ContactsHandled => "CONTACTS_HANDLED",
            HistoricalMetricName::ContactsHandledIncoming => "CONTACTS_HANDLED_INCOMING",
            HistoricalMetricName::ContactsHandledOutbound => "CONTACTS_HANDLED_OUTBOUND",
            HistoricalMetricName::ContactsHoldAbandons => "CONTACTS_HOLD_ABANDONS",
            HistoricalMetricName::ContactsMissed => "CONTACTS_MISSED",
            HistoricalMetricName::ContactsQueued => "CONTACTS_QUEUED",
            HistoricalMetricName::ContactsTransferredIn => "CONTACTS_TRANSFERRED_IN",
            HistoricalMetricName::ContactsTransferredInFromQueue => {
                "CONTACTS_TRANSFERRED_IN_FROM_QUEUE"
            }
            HistoricalMetricName::ContactsTransferredOut => "CONTACTS_TRANSFERRED_OUT",
            HistoricalMetricName::ContactsTransferredOutFromQueue => {
                "CONTACTS_TRANSFERRED_OUT_FROM_QUEUE"
            }
            HistoricalMetricName::HandleTime => "HANDLE_TIME",
            HistoricalMetricName::HoldTime => "HOLD_TIME",
            HistoricalMetricName::InteractionAndHoldTime => "INTERACTION_AND_HOLD_TIME",
            HistoricalMetricName::InteractionTime => "INTERACTION_TIME",
            HistoricalMetricName::Occupancy => "OCCUPANCY",
            HistoricalMetricName::QueuedTime => "QUEUED_TIME",
            HistoricalMetricName::QueueAnswerTime => "QUEUE_ANSWER_TIME",
            HistoricalMetricName::ServiceLevel => "SERVICE_LEVEL",
            HistoricalMetricName::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ABANDON_TIME",
            "AFTER_CONTACT_WORK_TIME",
            "API_CONTACTS_HANDLED",
            "CALLBACK_CONTACTS_HANDLED",
            "CONTACTS_ABANDONED",
            "CONTACTS_AGENT_HUNG_UP_FIRST",
            "CONTACTS_CONSULTED",
            "CONTACTS_HANDLED",
            "CONTACTS_HANDLED_INCOMING",
            "CONTACTS_HANDLED_OUTBOUND",
            "CONTACTS_HOLD_ABANDONS",
            "CONTACTS_MISSED",
            "CONTACTS_QUEUED",
            "CONTACTS_TRANSFERRED_IN",
            "CONTACTS_TRANSFERRED_IN_FROM_QUEUE",
            "CONTACTS_TRANSFERRED_OUT",
            "CONTACTS_TRANSFERRED_OUT_FROM_QUEUE",
            "HANDLE_TIME",
            "HOLD_TIME",
            "INTERACTION_AND_HOLD_TIME",
            "INTERACTION_TIME",
            "OCCUPANCY",
            "QUEUED_TIME",
            "QUEUE_ANSWER_TIME",
            "SERVICE_LEVEL",
        ]
    }
}
impl AsRef<str> for HistoricalMetricName {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
