// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>View content containing all content necessary to render a view except for runtime input data and the runtime input schema, which is auto-generated by this operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ViewInputContent {
    /// <p>The view template representing the structure of the view.</p>
    pub template: ::std::option::Option<::std::string::String>,
    /// <p>A list of possible actions from the view.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ViewInputContent {
    /// <p>The view template representing the structure of the view.</p>
    pub fn template(&self) -> ::std::option::Option<&str> {
        self.template.as_deref()
    }
    /// <p>A list of possible actions from the view.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[::std::string::String] {
        self.actions.as_deref().unwrap_or_default()
    }
}
impl ViewInputContent {
    /// Creates a new builder-style object to manufacture [`ViewInputContent`](crate::types::ViewInputContent).
    pub fn builder() -> crate::types::builders::ViewInputContentBuilder {
        crate::types::builders::ViewInputContentBuilder::default()
    }
}

/// A builder for [`ViewInputContent`](crate::types::ViewInputContent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ViewInputContentBuilder {
    pub(crate) template: ::std::option::Option<::std::string::String>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ViewInputContentBuilder {
    /// <p>The view template representing the structure of the view.</p>
    pub fn template(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The view template representing the structure of the view.</p>
    pub fn set_template(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template = input;
        self
    }
    /// <p>The view template representing the structure of the view.</p>
    pub fn get_template(&self) -> &::std::option::Option<::std::string::String> {
        &self.template
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>A list of possible actions from the view.</p>
    pub fn actions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input.into());
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of possible actions from the view.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>A list of possible actions from the view.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.actions
    }
    /// Consumes the builder and constructs a [`ViewInputContent`](crate::types::ViewInputContent).
    pub fn build(self) -> crate::types::ViewInputContent {
        crate::types::ViewInputContent {
            template: self.template,
            actions: self.actions,
        }
    }
}
