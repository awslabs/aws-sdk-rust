// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `VocabularyLanguageCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let vocabularylanguagecode = unimplemented!();
/// match vocabularylanguagecode {
///     VocabularyLanguageCode::ArAe => { /* ... */ },
///     VocabularyLanguageCode::CaEs => { /* ... */ },
///     VocabularyLanguageCode::DaDk => { /* ... */ },
///     VocabularyLanguageCode::DeCh => { /* ... */ },
///     VocabularyLanguageCode::DeDe => { /* ... */ },
///     VocabularyLanguageCode::EnAb => { /* ... */ },
///     VocabularyLanguageCode::EnAu => { /* ... */ },
///     VocabularyLanguageCode::EnGb => { /* ... */ },
///     VocabularyLanguageCode::EnIe => { /* ... */ },
///     VocabularyLanguageCode::EnIn => { /* ... */ },
///     VocabularyLanguageCode::EnNz => { /* ... */ },
///     VocabularyLanguageCode::EnUs => { /* ... */ },
///     VocabularyLanguageCode::EnWl => { /* ... */ },
///     VocabularyLanguageCode::EnZa => { /* ... */ },
///     VocabularyLanguageCode::EsEs => { /* ... */ },
///     VocabularyLanguageCode::EsUs => { /* ... */ },
///     VocabularyLanguageCode::FiFi => { /* ... */ },
///     VocabularyLanguageCode::FrCa => { /* ... */ },
///     VocabularyLanguageCode::FrFr => { /* ... */ },
///     VocabularyLanguageCode::HiIn => { /* ... */ },
///     VocabularyLanguageCode::IdId => { /* ... */ },
///     VocabularyLanguageCode::ItIt => { /* ... */ },
///     VocabularyLanguageCode::JaJp => { /* ... */ },
///     VocabularyLanguageCode::KoKr => { /* ... */ },
///     VocabularyLanguageCode::MsMy => { /* ... */ },
///     VocabularyLanguageCode::NlNl => { /* ... */ },
///     VocabularyLanguageCode::NoNo => { /* ... */ },
///     VocabularyLanguageCode::PlPl => { /* ... */ },
///     VocabularyLanguageCode::PtBr => { /* ... */ },
///     VocabularyLanguageCode::PtPt => { /* ... */ },
///     VocabularyLanguageCode::SvSe => { /* ... */ },
///     VocabularyLanguageCode::TlPh => { /* ... */ },
///     VocabularyLanguageCode::ZhCn => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `vocabularylanguagecode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `VocabularyLanguageCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `VocabularyLanguageCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `VocabularyLanguageCode::NewFeature` is defined.
/// Specifically, when `vocabularylanguagecode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `VocabularyLanguageCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum VocabularyLanguageCode {
    #[allow(missing_docs)] // documentation missing in model
    ArAe,
    #[allow(missing_docs)] // documentation missing in model
    CaEs,
    #[allow(missing_docs)] // documentation missing in model
    DaDk,
    #[allow(missing_docs)] // documentation missing in model
    DeCh,
    #[allow(missing_docs)] // documentation missing in model
    DeDe,
    #[allow(missing_docs)] // documentation missing in model
    EnAb,
    #[allow(missing_docs)] // documentation missing in model
    EnAu,
    #[allow(missing_docs)] // documentation missing in model
    EnGb,
    #[allow(missing_docs)] // documentation missing in model
    EnIe,
    #[allow(missing_docs)] // documentation missing in model
    EnIn,
    #[allow(missing_docs)] // documentation missing in model
    EnNz,
    #[allow(missing_docs)] // documentation missing in model
    EnUs,
    #[allow(missing_docs)] // documentation missing in model
    EnWl,
    #[allow(missing_docs)] // documentation missing in model
    EnZa,
    #[allow(missing_docs)] // documentation missing in model
    EsEs,
    #[allow(missing_docs)] // documentation missing in model
    EsUs,
    #[allow(missing_docs)] // documentation missing in model
    FiFi,
    #[allow(missing_docs)] // documentation missing in model
    FrCa,
    #[allow(missing_docs)] // documentation missing in model
    FrFr,
    #[allow(missing_docs)] // documentation missing in model
    HiIn,
    #[allow(missing_docs)] // documentation missing in model
    IdId,
    #[allow(missing_docs)] // documentation missing in model
    ItIt,
    #[allow(missing_docs)] // documentation missing in model
    JaJp,
    #[allow(missing_docs)] // documentation missing in model
    KoKr,
    #[allow(missing_docs)] // documentation missing in model
    MsMy,
    #[allow(missing_docs)] // documentation missing in model
    NlNl,
    #[allow(missing_docs)] // documentation missing in model
    NoNo,
    #[allow(missing_docs)] // documentation missing in model
    PlPl,
    #[allow(missing_docs)] // documentation missing in model
    PtBr,
    #[allow(missing_docs)] // documentation missing in model
    PtPt,
    #[allow(missing_docs)] // documentation missing in model
    SvSe,
    #[allow(missing_docs)] // documentation missing in model
    TlPh,
    #[allow(missing_docs)] // documentation missing in model
    ZhCn,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for VocabularyLanguageCode {
    fn from(s: &str) -> Self {
        match s {
            "ar-AE" => VocabularyLanguageCode::ArAe,
            "ca-ES" => VocabularyLanguageCode::CaEs,
            "da-DK" => VocabularyLanguageCode::DaDk,
            "de-CH" => VocabularyLanguageCode::DeCh,
            "de-DE" => VocabularyLanguageCode::DeDe,
            "en-AB" => VocabularyLanguageCode::EnAb,
            "en-AU" => VocabularyLanguageCode::EnAu,
            "en-GB" => VocabularyLanguageCode::EnGb,
            "en-IE" => VocabularyLanguageCode::EnIe,
            "en-IN" => VocabularyLanguageCode::EnIn,
            "en-NZ" => VocabularyLanguageCode::EnNz,
            "en-US" => VocabularyLanguageCode::EnUs,
            "en-WL" => VocabularyLanguageCode::EnWl,
            "en-ZA" => VocabularyLanguageCode::EnZa,
            "es-ES" => VocabularyLanguageCode::EsEs,
            "es-US" => VocabularyLanguageCode::EsUs,
            "fi-FI" => VocabularyLanguageCode::FiFi,
            "fr-CA" => VocabularyLanguageCode::FrCa,
            "fr-FR" => VocabularyLanguageCode::FrFr,
            "hi-IN" => VocabularyLanguageCode::HiIn,
            "id-ID" => VocabularyLanguageCode::IdId,
            "it-IT" => VocabularyLanguageCode::ItIt,
            "ja-JP" => VocabularyLanguageCode::JaJp,
            "ko-KR" => VocabularyLanguageCode::KoKr,
            "ms-MY" => VocabularyLanguageCode::MsMy,
            "nl-NL" => VocabularyLanguageCode::NlNl,
            "no-NO" => VocabularyLanguageCode::NoNo,
            "pl-PL" => VocabularyLanguageCode::PlPl,
            "pt-BR" => VocabularyLanguageCode::PtBr,
            "pt-PT" => VocabularyLanguageCode::PtPt,
            "sv-SE" => VocabularyLanguageCode::SvSe,
            "tl-PH" => VocabularyLanguageCode::TlPh,
            "zh-CN" => VocabularyLanguageCode::ZhCn,
            other => VocabularyLanguageCode::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for VocabularyLanguageCode {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(VocabularyLanguageCode::from(s))
    }
}
impl VocabularyLanguageCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            VocabularyLanguageCode::ArAe => "ar-AE",
            VocabularyLanguageCode::CaEs => "ca-ES",
            VocabularyLanguageCode::DaDk => "da-DK",
            VocabularyLanguageCode::DeCh => "de-CH",
            VocabularyLanguageCode::DeDe => "de-DE",
            VocabularyLanguageCode::EnAb => "en-AB",
            VocabularyLanguageCode::EnAu => "en-AU",
            VocabularyLanguageCode::EnGb => "en-GB",
            VocabularyLanguageCode::EnIe => "en-IE",
            VocabularyLanguageCode::EnIn => "en-IN",
            VocabularyLanguageCode::EnNz => "en-NZ",
            VocabularyLanguageCode::EnUs => "en-US",
            VocabularyLanguageCode::EnWl => "en-WL",
            VocabularyLanguageCode::EnZa => "en-ZA",
            VocabularyLanguageCode::EsEs => "es-ES",
            VocabularyLanguageCode::EsUs => "es-US",
            VocabularyLanguageCode::FiFi => "fi-FI",
            VocabularyLanguageCode::FrCa => "fr-CA",
            VocabularyLanguageCode::FrFr => "fr-FR",
            VocabularyLanguageCode::HiIn => "hi-IN",
            VocabularyLanguageCode::IdId => "id-ID",
            VocabularyLanguageCode::ItIt => "it-IT",
            VocabularyLanguageCode::JaJp => "ja-JP",
            VocabularyLanguageCode::KoKr => "ko-KR",
            VocabularyLanguageCode::MsMy => "ms-MY",
            VocabularyLanguageCode::NlNl => "nl-NL",
            VocabularyLanguageCode::NoNo => "no-NO",
            VocabularyLanguageCode::PlPl => "pl-PL",
            VocabularyLanguageCode::PtBr => "pt-BR",
            VocabularyLanguageCode::PtPt => "pt-PT",
            VocabularyLanguageCode::SvSe => "sv-SE",
            VocabularyLanguageCode::TlPh => "tl-PH",
            VocabularyLanguageCode::ZhCn => "zh-CN",
            VocabularyLanguageCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ar-AE", "ca-ES", "da-DK", "de-CH", "de-DE", "en-AB", "en-AU", "en-GB", "en-IE", "en-IN", "en-NZ", "en-US", "en-WL", "en-ZA", "es-ES",
            "es-US", "fi-FI", "fr-CA", "fr-FR", "hi-IN", "id-ID", "it-IT", "ja-JP", "ko-KR", "ms-MY", "nl-NL", "no-NO", "pl-PL", "pt-BR", "pt-PT",
            "sv-SE", "tl-PH", "zh-CN",
        ]
    }
}
impl ::std::convert::AsRef<str> for VocabularyLanguageCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl VocabularyLanguageCode {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for VocabularyLanguageCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            VocabularyLanguageCode::ArAe => write!(f, "ar-AE"),
            VocabularyLanguageCode::CaEs => write!(f, "ca-ES"),
            VocabularyLanguageCode::DaDk => write!(f, "da-DK"),
            VocabularyLanguageCode::DeCh => write!(f, "de-CH"),
            VocabularyLanguageCode::DeDe => write!(f, "de-DE"),
            VocabularyLanguageCode::EnAb => write!(f, "en-AB"),
            VocabularyLanguageCode::EnAu => write!(f, "en-AU"),
            VocabularyLanguageCode::EnGb => write!(f, "en-GB"),
            VocabularyLanguageCode::EnIe => write!(f, "en-IE"),
            VocabularyLanguageCode::EnIn => write!(f, "en-IN"),
            VocabularyLanguageCode::EnNz => write!(f, "en-NZ"),
            VocabularyLanguageCode::EnUs => write!(f, "en-US"),
            VocabularyLanguageCode::EnWl => write!(f, "en-WL"),
            VocabularyLanguageCode::EnZa => write!(f, "en-ZA"),
            VocabularyLanguageCode::EsEs => write!(f, "es-ES"),
            VocabularyLanguageCode::EsUs => write!(f, "es-US"),
            VocabularyLanguageCode::FiFi => write!(f, "fi-FI"),
            VocabularyLanguageCode::FrCa => write!(f, "fr-CA"),
            VocabularyLanguageCode::FrFr => write!(f, "fr-FR"),
            VocabularyLanguageCode::HiIn => write!(f, "hi-IN"),
            VocabularyLanguageCode::IdId => write!(f, "id-ID"),
            VocabularyLanguageCode::ItIt => write!(f, "it-IT"),
            VocabularyLanguageCode::JaJp => write!(f, "ja-JP"),
            VocabularyLanguageCode::KoKr => write!(f, "ko-KR"),
            VocabularyLanguageCode::MsMy => write!(f, "ms-MY"),
            VocabularyLanguageCode::NlNl => write!(f, "nl-NL"),
            VocabularyLanguageCode::NoNo => write!(f, "no-NO"),
            VocabularyLanguageCode::PlPl => write!(f, "pl-PL"),
            VocabularyLanguageCode::PtBr => write!(f, "pt-BR"),
            VocabularyLanguageCode::PtPt => write!(f, "pt-PT"),
            VocabularyLanguageCode::SvSe => write!(f, "sv-SE"),
            VocabularyLanguageCode::TlPh => write!(f, "tl-PH"),
            VocabularyLanguageCode::ZhCn => write!(f, "zh-CN"),
            VocabularyLanguageCode::Unknown(value) => write!(f, "{value}"),
        }
    }
}
