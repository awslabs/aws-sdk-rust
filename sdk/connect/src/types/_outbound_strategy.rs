// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the outbound strategy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OutboundStrategy {
    /// <p>Type of the outbound strategy.</p>
    pub r#type: crate::types::OutboundStrategyType,
    /// <p>Config of the outbound strategy.</p>
    pub config: ::std::option::Option<crate::types::OutboundStrategyConfig>,
}
impl OutboundStrategy {
    /// <p>Type of the outbound strategy.</p>
    pub fn r#type(&self) -> &crate::types::OutboundStrategyType {
        &self.r#type
    }
    /// <p>Config of the outbound strategy.</p>
    pub fn config(&self) -> ::std::option::Option<&crate::types::OutboundStrategyConfig> {
        self.config.as_ref()
    }
}
impl OutboundStrategy {
    /// Creates a new builder-style object to manufacture [`OutboundStrategy`](crate::types::OutboundStrategy).
    pub fn builder() -> crate::types::builders::OutboundStrategyBuilder {
        crate::types::builders::OutboundStrategyBuilder::default()
    }
}

/// A builder for [`OutboundStrategy`](crate::types::OutboundStrategy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OutboundStrategyBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::OutboundStrategyType>,
    pub(crate) config: ::std::option::Option<crate::types::OutboundStrategyConfig>,
}
impl OutboundStrategyBuilder {
    /// <p>Type of the outbound strategy.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::OutboundStrategyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of the outbound strategy.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::OutboundStrategyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Type of the outbound strategy.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::OutboundStrategyType> {
        &self.r#type
    }
    /// <p>Config of the outbound strategy.</p>
    pub fn config(mut self, input: crate::types::OutboundStrategyConfig) -> Self {
        self.config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Config of the outbound strategy.</p>
    pub fn set_config(mut self, input: ::std::option::Option<crate::types::OutboundStrategyConfig>) -> Self {
        self.config = input;
        self
    }
    /// <p>Config of the outbound strategy.</p>
    pub fn get_config(&self) -> &::std::option::Option<crate::types::OutboundStrategyConfig> {
        &self.config
    }
    /// Consumes the builder and constructs a [`OutboundStrategy`](crate::types::OutboundStrategy).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::OutboundStrategyBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::OutboundStrategy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OutboundStrategy {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building OutboundStrategy",
                )
            })?,
            config: self.config,
        })
    }
}
