// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where: </p>
/// <ul>
/// <li> <p>Top level list specifies conditions that need to be applied with <code>OR</code> operator</p> </li>
/// <li> <p>Inner list specifies conditions that need to be applied with <code>AND</code> operator.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ControlPlaneTagFilter {
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition. </p>
    pub or_conditions: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::TagCondition>>>,
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub and_conditions: ::std::option::Option<::std::vec::Vec<crate::types::TagCondition>>,
    /// <p>A leaf node condition which can be used to specify a tag condition. </p>
    pub tag_condition: ::std::option::Option<crate::types::TagCondition>,
}
impl ControlPlaneTagFilter {
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.or_conditions.is_none()`.
    pub fn or_conditions(&self) -> &[::std::vec::Vec<crate::types::TagCondition>] {
        self.or_conditions.as_deref().unwrap_or_default()
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.and_conditions.is_none()`.
    pub fn and_conditions(&self) -> &[crate::types::TagCondition] {
        self.and_conditions.as_deref().unwrap_or_default()
    }
    /// <p>A leaf node condition which can be used to specify a tag condition. </p>
    pub fn tag_condition(&self) -> ::std::option::Option<&crate::types::TagCondition> {
        self.tag_condition.as_ref()
    }
}
impl ControlPlaneTagFilter {
    /// Creates a new builder-style object to manufacture [`ControlPlaneTagFilter`](crate::types::ControlPlaneTagFilter).
    pub fn builder() -> crate::types::builders::ControlPlaneTagFilterBuilder {
        crate::types::builders::ControlPlaneTagFilterBuilder::default()
    }
}

/// A builder for [`ControlPlaneTagFilter`](crate::types::ControlPlaneTagFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ControlPlaneTagFilterBuilder {
    pub(crate) or_conditions: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::TagCondition>>>,
    pub(crate) and_conditions: ::std::option::Option<::std::vec::Vec<crate::types::TagCondition>>,
    pub(crate) tag_condition: ::std::option::Option<crate::types::TagCondition>,
}
impl ControlPlaneTagFilterBuilder {
    /// Appends an item to `or_conditions`.
    ///
    /// To override the contents of this collection use [`set_or_conditions`](Self::set_or_conditions).
    ///
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition. </p>
    pub fn or_conditions(mut self, input: ::std::vec::Vec<crate::types::TagCondition>) -> Self {
        let mut v = self.or_conditions.unwrap_or_default();
        v.push(input);
        self.or_conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition. </p>
    pub fn set_or_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::TagCondition>>>) -> Self {
        self.or_conditions = input;
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition. </p>
    pub fn get_or_conditions(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<crate::types::TagCondition>>> {
        &self.or_conditions
    }
    /// Appends an item to `and_conditions`.
    ///
    /// To override the contents of this collection use [`set_and_conditions`](Self::set_and_conditions).
    ///
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn and_conditions(mut self, input: crate::types::TagCondition) -> Self {
        let mut v = self.and_conditions.unwrap_or_default();
        v.push(input);
        self.and_conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn set_and_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagCondition>>) -> Self {
        self.and_conditions = input;
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn get_and_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagCondition>> {
        &self.and_conditions
    }
    /// <p>A leaf node condition which can be used to specify a tag condition. </p>
    pub fn tag_condition(mut self, input: crate::types::TagCondition) -> Self {
        self.tag_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>A leaf node condition which can be used to specify a tag condition. </p>
    pub fn set_tag_condition(mut self, input: ::std::option::Option<crate::types::TagCondition>) -> Self {
        self.tag_condition = input;
        self
    }
    /// <p>A leaf node condition which can be used to specify a tag condition. </p>
    pub fn get_tag_condition(&self) -> &::std::option::Option<crate::types::TagCondition> {
        &self.tag_condition
    }
    /// Consumes the builder and constructs a [`ControlPlaneTagFilter`](crate::types::ControlPlaneTagFilter).
    pub fn build(self) -> crate::types::ControlPlaneTagFilter {
        crate::types::ControlPlaneTagFilter {
            or_conditions: self.or_conditions,
            and_conditions: self.and_conditions,
            tag_condition: self.tag_condition,
        }
    }
}
