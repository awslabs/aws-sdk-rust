// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Well-formed data on a contact, used by agents to complete a contact request. You can have up to 4,096 UTF-8 bytes across all references for a contact.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Reference {
    /// <p>A valid value for the reference. For example, for a URL reference, a formatted URL that is displayed to an agent in the Contact Control Panel (CCP).</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The type of the reference. <code>DATE</code> must be of type Epoch timestamp. </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ReferenceType>,
}
impl Reference {
    /// <p>A valid value for the reference. For example, for a URL reference, a formatted URL that is displayed to an agent in the Contact Control Panel (CCP).</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The type of the reference. <code>DATE</code> must be of type Epoch timestamp. </p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ReferenceType> {
        self.r#type.as_ref()
    }
}
impl Reference {
    /// Creates a new builder-style object to manufacture [`Reference`](crate::types::Reference).
    pub fn builder() -> crate::types::builders::ReferenceBuilder {
        crate::types::builders::ReferenceBuilder::default()
    }
}

/// A builder for [`Reference`](crate::types::Reference).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReferenceBuilder {
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::ReferenceType>,
}
impl ReferenceBuilder {
    /// <p>A valid value for the reference. For example, for a URL reference, a formatted URL that is displayed to an agent in the Contact Control Panel (CCP).</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>A valid value for the reference. For example, for a URL reference, a formatted URL that is displayed to an agent in the Contact Control Panel (CCP).</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The type of the reference. <code>DATE</code> must be of type Epoch timestamp. </p>
    pub fn r#type(mut self, input: crate::types::ReferenceType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the reference. <code>DATE</code> must be of type Epoch timestamp. </p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ReferenceType>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`Reference`](crate::types::Reference).
    pub fn build(self) -> crate::types::Reference {
        crate::types::Reference {
            value: self.value,
            r#type: self.r#type,
        }
    }
}
