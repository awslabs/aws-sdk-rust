// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains summary information about a flow.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContactFlowModuleSummary {
    /// <p>The identifier of the flow module.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the flow module.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the flow module.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of flow module.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ContactFlowModuleState>,
}
impl ContactFlowModuleSummary {
    /// <p>The identifier of the flow module.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the flow module.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the flow module.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of flow module.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ContactFlowModuleState> {
        self.state.as_ref()
    }
}
impl ContactFlowModuleSummary {
    /// Creates a new builder-style object to manufacture [`ContactFlowModuleSummary`](crate::types::ContactFlowModuleSummary).
    pub fn builder() -> crate::types::builders::ContactFlowModuleSummaryBuilder {
        crate::types::builders::ContactFlowModuleSummaryBuilder::default()
    }
}

/// A builder for [`ContactFlowModuleSummary`](crate::types::ContactFlowModuleSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContactFlowModuleSummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ContactFlowModuleState>,
}
impl ContactFlowModuleSummaryBuilder {
    /// <p>The identifier of the flow module.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the flow module.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow module.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow module.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the flow module.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the flow module.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of flow module.</p>
    pub fn state(mut self, input: crate::types::ContactFlowModuleState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The type of flow module.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::ContactFlowModuleState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`ContactFlowModuleSummary`](crate::types::ContactFlowModuleSummary).
    pub fn build(self) -> crate::types::ContactFlowModuleSummary {
        crate::types::ContactFlowModuleSummary {
            id: self.id,
            arn: self.arn,
            name: self.name,
            state: self.state,
        }
    }
}
