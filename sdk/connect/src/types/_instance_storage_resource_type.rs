// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `InstanceStorageResourceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let instancestorageresourcetype = unimplemented!();
/// match instancestorageresourcetype {
///     InstanceStorageResourceType::AgentEvents => { /* ... */ },
///     InstanceStorageResourceType::Attachments => { /* ... */ },
///     InstanceStorageResourceType::CallRecordings => { /* ... */ },
///     InstanceStorageResourceType::ChatTranscripts => { /* ... */ },
///     InstanceStorageResourceType::ContactEvaluations => { /* ... */ },
///     InstanceStorageResourceType::ContactTraceRecords => { /* ... */ },
///     InstanceStorageResourceType::EmailMessages => { /* ... */ },
///     InstanceStorageResourceType::MediaStreams => { /* ... */ },
///     InstanceStorageResourceType::RealTimeContactAnalysisChatSegments => { /* ... */ },
///     InstanceStorageResourceType::RealTimeContactAnalysisSegments => { /* ... */ },
///     InstanceStorageResourceType::RealTimeContactAnalysisVoiceSegments => { /* ... */ },
///     InstanceStorageResourceType::ScheduledReports => { /* ... */ },
///     InstanceStorageResourceType::ScreenRecordings => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `instancestorageresourcetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `InstanceStorageResourceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `InstanceStorageResourceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `InstanceStorageResourceType::NewFeature` is defined.
/// Specifically, when `instancestorageresourcetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `InstanceStorageResourceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum InstanceStorageResourceType {
    #[allow(missing_docs)] // documentation missing in model
    AgentEvents,
    #[allow(missing_docs)] // documentation missing in model
    Attachments,
    #[allow(missing_docs)] // documentation missing in model
    CallRecordings,
    #[allow(missing_docs)] // documentation missing in model
    ChatTranscripts,
    #[allow(missing_docs)] // documentation missing in model
    ContactEvaluations,
    #[allow(missing_docs)] // documentation missing in model
    ContactTraceRecords,
    #[allow(missing_docs)] // documentation missing in model
    EmailMessages,
    #[allow(missing_docs)] // documentation missing in model
    MediaStreams,
    #[allow(missing_docs)] // documentation missing in model
    RealTimeContactAnalysisChatSegments,
    #[allow(missing_docs)] // documentation missing in model
    RealTimeContactAnalysisSegments,
    #[allow(missing_docs)] // documentation missing in model
    RealTimeContactAnalysisVoiceSegments,
    #[allow(missing_docs)] // documentation missing in model
    ScheduledReports,
    #[allow(missing_docs)] // documentation missing in model
    ScreenRecordings,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for InstanceStorageResourceType {
    fn from(s: &str) -> Self {
        match s {
            "AGENT_EVENTS" => InstanceStorageResourceType::AgentEvents,
            "ATTACHMENTS" => InstanceStorageResourceType::Attachments,
            "CALL_RECORDINGS" => InstanceStorageResourceType::CallRecordings,
            "CHAT_TRANSCRIPTS" => InstanceStorageResourceType::ChatTranscripts,
            "CONTACT_EVALUATIONS" => InstanceStorageResourceType::ContactEvaluations,
            "CONTACT_TRACE_RECORDS" => InstanceStorageResourceType::ContactTraceRecords,
            "EMAIL_MESSAGES" => InstanceStorageResourceType::EmailMessages,
            "MEDIA_STREAMS" => InstanceStorageResourceType::MediaStreams,
            "REAL_TIME_CONTACT_ANALYSIS_CHAT_SEGMENTS" => InstanceStorageResourceType::RealTimeContactAnalysisChatSegments,
            "REAL_TIME_CONTACT_ANALYSIS_SEGMENTS" => InstanceStorageResourceType::RealTimeContactAnalysisSegments,
            "REAL_TIME_CONTACT_ANALYSIS_VOICE_SEGMENTS" => InstanceStorageResourceType::RealTimeContactAnalysisVoiceSegments,
            "SCHEDULED_REPORTS" => InstanceStorageResourceType::ScheduledReports,
            "SCREEN_RECORDINGS" => InstanceStorageResourceType::ScreenRecordings,
            other => InstanceStorageResourceType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for InstanceStorageResourceType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(InstanceStorageResourceType::from(s))
    }
}
impl InstanceStorageResourceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            InstanceStorageResourceType::AgentEvents => "AGENT_EVENTS",
            InstanceStorageResourceType::Attachments => "ATTACHMENTS",
            InstanceStorageResourceType::CallRecordings => "CALL_RECORDINGS",
            InstanceStorageResourceType::ChatTranscripts => "CHAT_TRANSCRIPTS",
            InstanceStorageResourceType::ContactEvaluations => "CONTACT_EVALUATIONS",
            InstanceStorageResourceType::ContactTraceRecords => "CONTACT_TRACE_RECORDS",
            InstanceStorageResourceType::EmailMessages => "EMAIL_MESSAGES",
            InstanceStorageResourceType::MediaStreams => "MEDIA_STREAMS",
            InstanceStorageResourceType::RealTimeContactAnalysisChatSegments => "REAL_TIME_CONTACT_ANALYSIS_CHAT_SEGMENTS",
            InstanceStorageResourceType::RealTimeContactAnalysisSegments => "REAL_TIME_CONTACT_ANALYSIS_SEGMENTS",
            InstanceStorageResourceType::RealTimeContactAnalysisVoiceSegments => "REAL_TIME_CONTACT_ANALYSIS_VOICE_SEGMENTS",
            InstanceStorageResourceType::ScheduledReports => "SCHEDULED_REPORTS",
            InstanceStorageResourceType::ScreenRecordings => "SCREEN_RECORDINGS",
            InstanceStorageResourceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AGENT_EVENTS",
            "ATTACHMENTS",
            "CALL_RECORDINGS",
            "CHAT_TRANSCRIPTS",
            "CONTACT_EVALUATIONS",
            "CONTACT_TRACE_RECORDS",
            "EMAIL_MESSAGES",
            "MEDIA_STREAMS",
            "REAL_TIME_CONTACT_ANALYSIS_CHAT_SEGMENTS",
            "REAL_TIME_CONTACT_ANALYSIS_SEGMENTS",
            "REAL_TIME_CONTACT_ANALYSIS_VOICE_SEGMENTS",
            "SCHEDULED_REPORTS",
            "SCREEN_RECORDINGS",
        ]
    }
}
impl ::std::convert::AsRef<str> for InstanceStorageResourceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl InstanceStorageResourceType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for InstanceStorageResourceType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            InstanceStorageResourceType::AgentEvents => write!(f, "AGENT_EVENTS"),
            InstanceStorageResourceType::Attachments => write!(f, "ATTACHMENTS"),
            InstanceStorageResourceType::CallRecordings => write!(f, "CALL_RECORDINGS"),
            InstanceStorageResourceType::ChatTranscripts => write!(f, "CHAT_TRANSCRIPTS"),
            InstanceStorageResourceType::ContactEvaluations => write!(f, "CONTACT_EVALUATIONS"),
            InstanceStorageResourceType::ContactTraceRecords => write!(f, "CONTACT_TRACE_RECORDS"),
            InstanceStorageResourceType::EmailMessages => write!(f, "EMAIL_MESSAGES"),
            InstanceStorageResourceType::MediaStreams => write!(f, "MEDIA_STREAMS"),
            InstanceStorageResourceType::RealTimeContactAnalysisChatSegments => write!(f, "REAL_TIME_CONTACT_ANALYSIS_CHAT_SEGMENTS"),
            InstanceStorageResourceType::RealTimeContactAnalysisSegments => write!(f, "REAL_TIME_CONTACT_ANALYSIS_SEGMENTS"),
            InstanceStorageResourceType::RealTimeContactAnalysisVoiceSegments => write!(f, "REAL_TIME_CONTACT_ANALYSIS_VOICE_SEGMENTS"),
            InstanceStorageResourceType::ScheduledReports => write!(f, "SCHEDULED_REPORTS"),
            InstanceStorageResourceType::ScreenRecordings => write!(f, "SCREEN_RECORDINGS"),
            InstanceStorageResourceType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
