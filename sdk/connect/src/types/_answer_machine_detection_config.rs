// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration of the answering machine detection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AnswerMachineDetectionConfig {
    /// <p>The flag to indicate if answer machine detection analysis needs to be performed for a voice call. If set to <code>true</code>, <code>TrafficType</code> must be set as <code>CAMPAIGN</code>. </p>
    #[doc(hidden)]
    pub enable_answer_machine_detection: bool,
    /// <p>Wait for the answering machine prompt.</p>
    #[doc(hidden)]
    pub await_answer_machine_prompt: bool,
}
impl AnswerMachineDetectionConfig {
    /// <p>The flag to indicate if answer machine detection analysis needs to be performed for a voice call. If set to <code>true</code>, <code>TrafficType</code> must be set as <code>CAMPAIGN</code>. </p>
    pub fn enable_answer_machine_detection(&self) -> bool {
        self.enable_answer_machine_detection
    }
    /// <p>Wait for the answering machine prompt.</p>
    pub fn await_answer_machine_prompt(&self) -> bool {
        self.await_answer_machine_prompt
    }
}
impl AnswerMachineDetectionConfig {
    /// Creates a new builder-style object to manufacture [`AnswerMachineDetectionConfig`](crate::types::AnswerMachineDetectionConfig).
    pub fn builder() -> crate::types::builders::AnswerMachineDetectionConfigBuilder {
        crate::types::builders::AnswerMachineDetectionConfigBuilder::default()
    }
}

/// A builder for [`AnswerMachineDetectionConfig`](crate::types::AnswerMachineDetectionConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AnswerMachineDetectionConfigBuilder {
    pub(crate) enable_answer_machine_detection: std::option::Option<bool>,
    pub(crate) await_answer_machine_prompt: std::option::Option<bool>,
}
impl AnswerMachineDetectionConfigBuilder {
    /// <p>The flag to indicate if answer machine detection analysis needs to be performed for a voice call. If set to <code>true</code>, <code>TrafficType</code> must be set as <code>CAMPAIGN</code>. </p>
    pub fn enable_answer_machine_detection(mut self, input: bool) -> Self {
        self.enable_answer_machine_detection = Some(input);
        self
    }
    /// <p>The flag to indicate if answer machine detection analysis needs to be performed for a voice call. If set to <code>true</code>, <code>TrafficType</code> must be set as <code>CAMPAIGN</code>. </p>
    pub fn set_enable_answer_machine_detection(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_answer_machine_detection = input;
        self
    }
    /// <p>Wait for the answering machine prompt.</p>
    pub fn await_answer_machine_prompt(mut self, input: bool) -> Self {
        self.await_answer_machine_prompt = Some(input);
        self
    }
    /// <p>Wait for the answering machine prompt.</p>
    pub fn set_await_answer_machine_prompt(mut self, input: std::option::Option<bool>) -> Self {
        self.await_answer_machine_prompt = input;
        self
    }
    /// Consumes the builder and constructs a [`AnswerMachineDetectionConfig`](crate::types::AnswerMachineDetectionConfig).
    pub fn build(self) -> crate::types::AnswerMachineDetectionConfig {
        crate::types::AnswerMachineDetectionConfig {
            enable_answer_machine_detection: self
                .enable_answer_machine_detection
                .unwrap_or_default(),
            await_answer_machine_prompt: self.await_answer_machine_prompt.unwrap_or_default(),
        }
    }
}
