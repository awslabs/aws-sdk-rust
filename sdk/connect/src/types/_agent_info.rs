// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the agent who accepted the contact.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgentInfo {
    /// <p>The identifier of the agent who accepted the contact.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the contact was accepted by the agent.</p>
    pub accepted_by_agent_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the agent finished previewing the contact.</p>
    pub preview_end_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the contact was connected to the agent.</p>
    pub connected_to_agent_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Agent pause duration for a contact in seconds.</p>
    pub agent_pause_duration_in_seconds: ::std::option::Option<i32>,
    /// <p>The agent hierarchy groups for the agent.</p>
    pub hierarchy_groups: ::std::option::Option<crate::types::HierarchyGroups>,
    /// <p>Information regarding Agent’s device.</p>
    pub device_info: ::std::option::Option<crate::types::DeviceInfo>,
    /// <p>The configuration for the allowed video and screen sharing capabilities for participants present over the call. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/inapp-calling.html">Set up in-app, web, video calling, and screen sharing capabilities</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub capabilities: ::std::option::Option<crate::types::ParticipantCapabilities>,
    /// <p>The difference in time, in whole seconds, between <code>AfterContactWorkStartTimestamp</code> and <code>AfterContactWorkEndTimestamp</code>.</p>
    pub after_contact_work_duration: ::std::option::Option<i32>,
    /// <p>The date and time when the agent started doing After Contact Work for the contact, in UTC time.</p>
    pub after_contact_work_start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the agent ended After Contact Work for the contact, in UTC time. In cases when agent finishes doing <code>AfterContactWork</code> for chat contacts and switches their activity status to offline or equivalent without clearing the contact in CCP, discrepancies may be noticed for <code>AfterContactWorkEndTimestamp</code>.</p>
    pub after_contact_work_end_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The total hold duration in seconds initiated by the agent.</p>
    pub agent_initiated_hold_duration: ::std::option::Option<i32>,
    /// <p>List of <code>StateTransition</code> for a supervisor.</p>
    pub state_transitions: ::std::option::Option<::std::vec::Vec<crate::types::StateTransition>>,
}
impl AgentInfo {
    /// <p>The identifier of the agent who accepted the contact.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The timestamp when the contact was accepted by the agent.</p>
    pub fn accepted_by_agent_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.accepted_by_agent_timestamp.as_ref()
    }
    /// <p>The timestamp when the agent finished previewing the contact.</p>
    pub fn preview_end_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.preview_end_timestamp.as_ref()
    }
    /// <p>The timestamp when the contact was connected to the agent.</p>
    pub fn connected_to_agent_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.connected_to_agent_timestamp.as_ref()
    }
    /// <p>Agent pause duration for a contact in seconds.</p>
    pub fn agent_pause_duration_in_seconds(&self) -> ::std::option::Option<i32> {
        self.agent_pause_duration_in_seconds
    }
    /// <p>The agent hierarchy groups for the agent.</p>
    pub fn hierarchy_groups(&self) -> ::std::option::Option<&crate::types::HierarchyGroups> {
        self.hierarchy_groups.as_ref()
    }
    /// <p>Information regarding Agent’s device.</p>
    pub fn device_info(&self) -> ::std::option::Option<&crate::types::DeviceInfo> {
        self.device_info.as_ref()
    }
    /// <p>The configuration for the allowed video and screen sharing capabilities for participants present over the call. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/inapp-calling.html">Set up in-app, web, video calling, and screen sharing capabilities</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn capabilities(&self) -> ::std::option::Option<&crate::types::ParticipantCapabilities> {
        self.capabilities.as_ref()
    }
    /// <p>The difference in time, in whole seconds, between <code>AfterContactWorkStartTimestamp</code> and <code>AfterContactWorkEndTimestamp</code>.</p>
    pub fn after_contact_work_duration(&self) -> ::std::option::Option<i32> {
        self.after_contact_work_duration
    }
    /// <p>The date and time when the agent started doing After Contact Work for the contact, in UTC time.</p>
    pub fn after_contact_work_start_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.after_contact_work_start_timestamp.as_ref()
    }
    /// <p>The date and time when the agent ended After Contact Work for the contact, in UTC time. In cases when agent finishes doing <code>AfterContactWork</code> for chat contacts and switches their activity status to offline or equivalent without clearing the contact in CCP, discrepancies may be noticed for <code>AfterContactWorkEndTimestamp</code>.</p>
    pub fn after_contact_work_end_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.after_contact_work_end_timestamp.as_ref()
    }
    /// <p>The total hold duration in seconds initiated by the agent.</p>
    pub fn agent_initiated_hold_duration(&self) -> ::std::option::Option<i32> {
        self.agent_initiated_hold_duration
    }
    /// <p>List of <code>StateTransition</code> for a supervisor.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.state_transitions.is_none()`.
    pub fn state_transitions(&self) -> &[crate::types::StateTransition] {
        self.state_transitions.as_deref().unwrap_or_default()
    }
}
impl AgentInfo {
    /// Creates a new builder-style object to manufacture [`AgentInfo`](crate::types::AgentInfo).
    pub fn builder() -> crate::types::builders::AgentInfoBuilder {
        crate::types::builders::AgentInfoBuilder::default()
    }
}

/// A builder for [`AgentInfo`](crate::types::AgentInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AgentInfoBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) accepted_by_agent_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) preview_end_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) connected_to_agent_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) agent_pause_duration_in_seconds: ::std::option::Option<i32>,
    pub(crate) hierarchy_groups: ::std::option::Option<crate::types::HierarchyGroups>,
    pub(crate) device_info: ::std::option::Option<crate::types::DeviceInfo>,
    pub(crate) capabilities: ::std::option::Option<crate::types::ParticipantCapabilities>,
    pub(crate) after_contact_work_duration: ::std::option::Option<i32>,
    pub(crate) after_contact_work_start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) after_contact_work_end_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) agent_initiated_hold_duration: ::std::option::Option<i32>,
    pub(crate) state_transitions: ::std::option::Option<::std::vec::Vec<crate::types::StateTransition>>,
}
impl AgentInfoBuilder {
    /// <p>The identifier of the agent who accepted the contact.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the agent who accepted the contact.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the agent who accepted the contact.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The timestamp when the contact was accepted by the agent.</p>
    pub fn accepted_by_agent_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.accepted_by_agent_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the contact was accepted by the agent.</p>
    pub fn set_accepted_by_agent_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.accepted_by_agent_timestamp = input;
        self
    }
    /// <p>The timestamp when the contact was accepted by the agent.</p>
    pub fn get_accepted_by_agent_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.accepted_by_agent_timestamp
    }
    /// <p>The timestamp when the agent finished previewing the contact.</p>
    pub fn preview_end_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.preview_end_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the agent finished previewing the contact.</p>
    pub fn set_preview_end_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.preview_end_timestamp = input;
        self
    }
    /// <p>The timestamp when the agent finished previewing the contact.</p>
    pub fn get_preview_end_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.preview_end_timestamp
    }
    /// <p>The timestamp when the contact was connected to the agent.</p>
    pub fn connected_to_agent_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.connected_to_agent_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the contact was connected to the agent.</p>
    pub fn set_connected_to_agent_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.connected_to_agent_timestamp = input;
        self
    }
    /// <p>The timestamp when the contact was connected to the agent.</p>
    pub fn get_connected_to_agent_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.connected_to_agent_timestamp
    }
    /// <p>Agent pause duration for a contact in seconds.</p>
    pub fn agent_pause_duration_in_seconds(mut self, input: i32) -> Self {
        self.agent_pause_duration_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Agent pause duration for a contact in seconds.</p>
    pub fn set_agent_pause_duration_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.agent_pause_duration_in_seconds = input;
        self
    }
    /// <p>Agent pause duration for a contact in seconds.</p>
    pub fn get_agent_pause_duration_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.agent_pause_duration_in_seconds
    }
    /// <p>The agent hierarchy groups for the agent.</p>
    pub fn hierarchy_groups(mut self, input: crate::types::HierarchyGroups) -> Self {
        self.hierarchy_groups = ::std::option::Option::Some(input);
        self
    }
    /// <p>The agent hierarchy groups for the agent.</p>
    pub fn set_hierarchy_groups(mut self, input: ::std::option::Option<crate::types::HierarchyGroups>) -> Self {
        self.hierarchy_groups = input;
        self
    }
    /// <p>The agent hierarchy groups for the agent.</p>
    pub fn get_hierarchy_groups(&self) -> &::std::option::Option<crate::types::HierarchyGroups> {
        &self.hierarchy_groups
    }
    /// <p>Information regarding Agent’s device.</p>
    pub fn device_info(mut self, input: crate::types::DeviceInfo) -> Self {
        self.device_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information regarding Agent’s device.</p>
    pub fn set_device_info(mut self, input: ::std::option::Option<crate::types::DeviceInfo>) -> Self {
        self.device_info = input;
        self
    }
    /// <p>Information regarding Agent’s device.</p>
    pub fn get_device_info(&self) -> &::std::option::Option<crate::types::DeviceInfo> {
        &self.device_info
    }
    /// <p>The configuration for the allowed video and screen sharing capabilities for participants present over the call. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/inapp-calling.html">Set up in-app, web, video calling, and screen sharing capabilities</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn capabilities(mut self, input: crate::types::ParticipantCapabilities) -> Self {
        self.capabilities = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the allowed video and screen sharing capabilities for participants present over the call. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/inapp-calling.html">Set up in-app, web, video calling, and screen sharing capabilities</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn set_capabilities(mut self, input: ::std::option::Option<crate::types::ParticipantCapabilities>) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>The configuration for the allowed video and screen sharing capabilities for participants present over the call. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/inapp-calling.html">Set up in-app, web, video calling, and screen sharing capabilities</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn get_capabilities(&self) -> &::std::option::Option<crate::types::ParticipantCapabilities> {
        &self.capabilities
    }
    /// <p>The difference in time, in whole seconds, between <code>AfterContactWorkStartTimestamp</code> and <code>AfterContactWorkEndTimestamp</code>.</p>
    pub fn after_contact_work_duration(mut self, input: i32) -> Self {
        self.after_contact_work_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The difference in time, in whole seconds, between <code>AfterContactWorkStartTimestamp</code> and <code>AfterContactWorkEndTimestamp</code>.</p>
    pub fn set_after_contact_work_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.after_contact_work_duration = input;
        self
    }
    /// <p>The difference in time, in whole seconds, between <code>AfterContactWorkStartTimestamp</code> and <code>AfterContactWorkEndTimestamp</code>.</p>
    pub fn get_after_contact_work_duration(&self) -> &::std::option::Option<i32> {
        &self.after_contact_work_duration
    }
    /// <p>The date and time when the agent started doing After Contact Work for the contact, in UTC time.</p>
    pub fn after_contact_work_start_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.after_contact_work_start_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the agent started doing After Contact Work for the contact, in UTC time.</p>
    pub fn set_after_contact_work_start_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.after_contact_work_start_timestamp = input;
        self
    }
    /// <p>The date and time when the agent started doing After Contact Work for the contact, in UTC time.</p>
    pub fn get_after_contact_work_start_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.after_contact_work_start_timestamp
    }
    /// <p>The date and time when the agent ended After Contact Work for the contact, in UTC time. In cases when agent finishes doing <code>AfterContactWork</code> for chat contacts and switches their activity status to offline or equivalent without clearing the contact in CCP, discrepancies may be noticed for <code>AfterContactWorkEndTimestamp</code>.</p>
    pub fn after_contact_work_end_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.after_contact_work_end_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the agent ended After Contact Work for the contact, in UTC time. In cases when agent finishes doing <code>AfterContactWork</code> for chat contacts and switches their activity status to offline or equivalent without clearing the contact in CCP, discrepancies may be noticed for <code>AfterContactWorkEndTimestamp</code>.</p>
    pub fn set_after_contact_work_end_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.after_contact_work_end_timestamp = input;
        self
    }
    /// <p>The date and time when the agent ended After Contact Work for the contact, in UTC time. In cases when agent finishes doing <code>AfterContactWork</code> for chat contacts and switches their activity status to offline or equivalent without clearing the contact in CCP, discrepancies may be noticed for <code>AfterContactWorkEndTimestamp</code>.</p>
    pub fn get_after_contact_work_end_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.after_contact_work_end_timestamp
    }
    /// <p>The total hold duration in seconds initiated by the agent.</p>
    pub fn agent_initiated_hold_duration(mut self, input: i32) -> Self {
        self.agent_initiated_hold_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total hold duration in seconds initiated by the agent.</p>
    pub fn set_agent_initiated_hold_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.agent_initiated_hold_duration = input;
        self
    }
    /// <p>The total hold duration in seconds initiated by the agent.</p>
    pub fn get_agent_initiated_hold_duration(&self) -> &::std::option::Option<i32> {
        &self.agent_initiated_hold_duration
    }
    /// Appends an item to `state_transitions`.
    ///
    /// To override the contents of this collection use [`set_state_transitions`](Self::set_state_transitions).
    ///
    /// <p>List of <code>StateTransition</code> for a supervisor.</p>
    pub fn state_transitions(mut self, input: crate::types::StateTransition) -> Self {
        let mut v = self.state_transitions.unwrap_or_default();
        v.push(input);
        self.state_transitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of <code>StateTransition</code> for a supervisor.</p>
    pub fn set_state_transitions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StateTransition>>) -> Self {
        self.state_transitions = input;
        self
    }
    /// <p>List of <code>StateTransition</code> for a supervisor.</p>
    pub fn get_state_transitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StateTransition>> {
        &self.state_transitions
    }
    /// Consumes the builder and constructs a [`AgentInfo`](crate::types::AgentInfo).
    pub fn build(self) -> crate::types::AgentInfo {
        crate::types::AgentInfo {
            id: self.id,
            accepted_by_agent_timestamp: self.accepted_by_agent_timestamp,
            preview_end_timestamp: self.preview_end_timestamp,
            connected_to_agent_timestamp: self.connected_to_agent_timestamp,
            agent_pause_duration_in_seconds: self.agent_pause_duration_in_seconds,
            hierarchy_groups: self.hierarchy_groups,
            device_info: self.device_info,
            capabilities: self.capabilities,
            after_contact_work_duration: self.after_contact_work_duration,
            after_contact_work_start_timestamp: self.after_contact_work_start_timestamp,
            after_contact_work_end_timestamp: self.after_contact_work_end_timestamp,
            agent_initiated_hold_duration: self.agent_initiated_hold_duration,
            state_transitions: self.state_transitions,
        }
    }
}
