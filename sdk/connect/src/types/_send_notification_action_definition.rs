// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the send notification action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendNotificationActionDefinition {
    /// <p>Notification delivery method.</p>
    #[doc(hidden)]
    pub delivery_method: std::option::Option<crate::types::NotificationDeliveryType>,
    /// <p>The subject of the email if the delivery method is <code>EMAIL</code>. Supports variable injection. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html">JSONPath reference</a> in the <i>Amazon Connect Administrators Guide</i>.</p>
    #[doc(hidden)]
    pub subject: std::option::Option<std::string::String>,
    /// <p>Notification content. Supports variable injection. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html">JSONPath reference</a> in the <i>Amazon Connect Administrators Guide</i>.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::string::String>,
    /// <p>Content type format.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<crate::types::NotificationContentType>,
    /// <p>Notification recipient.</p>
    #[doc(hidden)]
    pub recipient: std::option::Option<crate::types::NotificationRecipientType>,
}
impl SendNotificationActionDefinition {
    /// <p>Notification delivery method.</p>
    pub fn delivery_method(&self) -> std::option::Option<&crate::types::NotificationDeliveryType> {
        self.delivery_method.as_ref()
    }
    /// <p>The subject of the email if the delivery method is <code>EMAIL</code>. Supports variable injection. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html">JSONPath reference</a> in the <i>Amazon Connect Administrators Guide</i>.</p>
    pub fn subject(&self) -> std::option::Option<&str> {
        self.subject.as_deref()
    }
    /// <p>Notification content. Supports variable injection. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html">JSONPath reference</a> in the <i>Amazon Connect Administrators Guide</i>.</p>
    pub fn content(&self) -> std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>Content type format.</p>
    pub fn content_type(&self) -> std::option::Option<&crate::types::NotificationContentType> {
        self.content_type.as_ref()
    }
    /// <p>Notification recipient.</p>
    pub fn recipient(&self) -> std::option::Option<&crate::types::NotificationRecipientType> {
        self.recipient.as_ref()
    }
}
impl SendNotificationActionDefinition {
    /// Creates a new builder-style object to manufacture [`SendNotificationActionDefinition`](crate::types::SendNotificationActionDefinition).
    pub fn builder() -> crate::types::builders::SendNotificationActionDefinitionBuilder {
        crate::types::builders::SendNotificationActionDefinitionBuilder::default()
    }
}

/// A builder for [`SendNotificationActionDefinition`](crate::types::SendNotificationActionDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendNotificationActionDefinitionBuilder {
    pub(crate) delivery_method: std::option::Option<crate::types::NotificationDeliveryType>,
    pub(crate) subject: std::option::Option<std::string::String>,
    pub(crate) content: std::option::Option<std::string::String>,
    pub(crate) content_type: std::option::Option<crate::types::NotificationContentType>,
    pub(crate) recipient: std::option::Option<crate::types::NotificationRecipientType>,
}
impl SendNotificationActionDefinitionBuilder {
    /// <p>Notification delivery method.</p>
    pub fn delivery_method(mut self, input: crate::types::NotificationDeliveryType) -> Self {
        self.delivery_method = Some(input);
        self
    }
    /// <p>Notification delivery method.</p>
    pub fn set_delivery_method(
        mut self,
        input: std::option::Option<crate::types::NotificationDeliveryType>,
    ) -> Self {
        self.delivery_method = input;
        self
    }
    /// <p>The subject of the email if the delivery method is <code>EMAIL</code>. Supports variable injection. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html">JSONPath reference</a> in the <i>Amazon Connect Administrators Guide</i>.</p>
    pub fn subject(mut self, input: impl Into<std::string::String>) -> Self {
        self.subject = Some(input.into());
        self
    }
    /// <p>The subject of the email if the delivery method is <code>EMAIL</code>. Supports variable injection. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html">JSONPath reference</a> in the <i>Amazon Connect Administrators Guide</i>.</p>
    pub fn set_subject(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subject = input;
        self
    }
    /// <p>Notification content. Supports variable injection. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html">JSONPath reference</a> in the <i>Amazon Connect Administrators Guide</i>.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.content = Some(input.into());
        self
    }
    /// <p>Notification content. Supports variable injection. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html">JSONPath reference</a> in the <i>Amazon Connect Administrators Guide</i>.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>Content type format.</p>
    pub fn content_type(mut self, input: crate::types::NotificationContentType) -> Self {
        self.content_type = Some(input);
        self
    }
    /// <p>Content type format.</p>
    pub fn set_content_type(
        mut self,
        input: std::option::Option<crate::types::NotificationContentType>,
    ) -> Self {
        self.content_type = input;
        self
    }
    /// <p>Notification recipient.</p>
    pub fn recipient(mut self, input: crate::types::NotificationRecipientType) -> Self {
        self.recipient = Some(input);
        self
    }
    /// <p>Notification recipient.</p>
    pub fn set_recipient(
        mut self,
        input: std::option::Option<crate::types::NotificationRecipientType>,
    ) -> Self {
        self.recipient = input;
        self
    }
    /// Consumes the builder and constructs a [`SendNotificationActionDefinition`](crate::types::SendNotificationActionDefinition).
    pub fn build(self) -> crate::types::SendNotificationActionDefinition {
        crate::types::SendNotificationActionDefinition {
            delivery_method: self.delivery_method,
            subject: self.subject,
            content: self.content,
            content_type: self.content_type,
            recipient: self.recipient,
        }
    }
}
