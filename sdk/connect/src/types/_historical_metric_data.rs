// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the data for a historical metric.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HistoricalMetricData {
    /// <p>Information about the metric.</p>
    #[doc(hidden)]
    pub metric: std::option::Option<crate::types::HistoricalMetric>,
    /// <p>The value of the metric.</p>
    #[doc(hidden)]
    pub value: std::option::Option<f64>,
}
impl HistoricalMetricData {
    /// <p>Information about the metric.</p>
    pub fn metric(&self) -> std::option::Option<&crate::types::HistoricalMetric> {
        self.metric.as_ref()
    }
    /// <p>The value of the metric.</p>
    pub fn value(&self) -> std::option::Option<f64> {
        self.value
    }
}
impl HistoricalMetricData {
    /// Creates a new builder-style object to manufacture [`HistoricalMetricData`](crate::types::HistoricalMetricData).
    pub fn builder() -> crate::types::builders::HistoricalMetricDataBuilder {
        crate::types::builders::HistoricalMetricDataBuilder::default()
    }
}

/// A builder for [`HistoricalMetricData`](crate::types::HistoricalMetricData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HistoricalMetricDataBuilder {
    pub(crate) metric: std::option::Option<crate::types::HistoricalMetric>,
    pub(crate) value: std::option::Option<f64>,
}
impl HistoricalMetricDataBuilder {
    /// <p>Information about the metric.</p>
    pub fn metric(mut self, input: crate::types::HistoricalMetric) -> Self {
        self.metric = Some(input);
        self
    }
    /// <p>Information about the metric.</p>
    pub fn set_metric(
        mut self,
        input: std::option::Option<crate::types::HistoricalMetric>,
    ) -> Self {
        self.metric = input;
        self
    }
    /// <p>The value of the metric.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value of the metric.</p>
    pub fn set_value(mut self, input: std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`HistoricalMetricData`](crate::types::HistoricalMetricData).
    pub fn build(self) -> crate::types::HistoricalMetricData {
        crate::types::HistoricalMetricData {
            metric: self.metric,
            value: self.value,
        }
    }
}
