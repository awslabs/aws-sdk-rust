// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The value of the timer. Either the timer action (<code>Unset</code> to delete the timer), or the duration of the timer in minutes. Only one value can be set.</p>
/// <p>For more information about how chat timeouts work, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/setup-chat-timeouts.html">Set up chat timeouts for human participants</a>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum ParticipantTimerValue {
    /// <p>The timer action. Currently only one value is allowed: <code>Unset</code>. It deletes a timer.</p>
    ParticipantTimerAction(crate::types::ParticipantTimerAction),
    /// <p>The duration of a timer, in minutes. </p>
    ParticipantTimerDurationInMinutes(i32),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ParticipantTimerValue {
    /// Tries to convert the enum instance into [`ParticipantTimerAction`](crate::types::ParticipantTimerValue::ParticipantTimerAction), extracting the inner [`ParticipantTimerAction`](crate::types::ParticipantTimerAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_participant_timer_action(
        &self,
    ) -> std::result::Result<&crate::types::ParticipantTimerAction, &Self> {
        if let ParticipantTimerValue::ParticipantTimerAction(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ParticipantTimerAction`](crate::types::ParticipantTimerValue::ParticipantTimerAction).
    pub fn is_participant_timer_action(&self) -> bool {
        self.as_participant_timer_action().is_ok()
    }
    /// Tries to convert the enum instance into [`ParticipantTimerDurationInMinutes`](crate::types::ParticipantTimerValue::ParticipantTimerDurationInMinutes), extracting the inner [`i32`](i32).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_participant_timer_duration_in_minutes(&self) -> std::result::Result<&i32, &Self> {
        if let ParticipantTimerValue::ParticipantTimerDurationInMinutes(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ParticipantTimerDurationInMinutes`](crate::types::ParticipantTimerValue::ParticipantTimerDurationInMinutes).
    pub fn is_participant_timer_duration_in_minutes(&self) -> bool {
        self.as_participant_timer_duration_in_minutes().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
