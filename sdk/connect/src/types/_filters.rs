// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the filter to apply when retrieving metrics.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Filters {
    /// <p>The queues to use to filter the metrics. You should specify at least one queue, and can specify up to 100 queues per request. The <code>GetCurrentMetricsData</code> API in particular requires a queue when you include a <code>Filter</code> in your request. </p>
    pub queues: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The channel to use to filter the metrics.</p>
    pub channels: ::std::option::Option<::std::vec::Vec<crate::types::Channel>>,
    /// <p>A list of up to 100 routing profile IDs or ARNs.</p>
    pub routing_profiles: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl Filters {
    /// <p>The queues to use to filter the metrics. You should specify at least one queue, and can specify up to 100 queues per request. The <code>GetCurrentMetricsData</code> API in particular requires a queue when you include a <code>Filter</code> in your request. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.queues.is_none()`.
    pub fn queues(&self) -> &[::std::string::String] {
        self.queues.as_deref().unwrap_or_default()
    }
    /// <p>The channel to use to filter the metrics.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.channels.is_none()`.
    pub fn channels(&self) -> &[crate::types::Channel] {
        self.channels.as_deref().unwrap_or_default()
    }
    /// <p>A list of up to 100 routing profile IDs or ARNs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.routing_profiles.is_none()`.
    pub fn routing_profiles(&self) -> &[::std::string::String] {
        self.routing_profiles.as_deref().unwrap_or_default()
    }
}
impl Filters {
    /// Creates a new builder-style object to manufacture [`Filters`](crate::types::Filters).
    pub fn builder() -> crate::types::builders::FiltersBuilder {
        crate::types::builders::FiltersBuilder::default()
    }
}

/// A builder for [`Filters`](crate::types::Filters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FiltersBuilder {
    pub(crate) queues: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) channels: ::std::option::Option<::std::vec::Vec<crate::types::Channel>>,
    pub(crate) routing_profiles: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FiltersBuilder {
    /// Appends an item to `queues`.
    ///
    /// To override the contents of this collection use [`set_queues`](Self::set_queues).
    ///
    /// <p>The queues to use to filter the metrics. You should specify at least one queue, and can specify up to 100 queues per request. The <code>GetCurrentMetricsData</code> API in particular requires a queue when you include a <code>Filter</code> in your request. </p>
    pub fn queues(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.queues.unwrap_or_default();
        v.push(input.into());
        self.queues = ::std::option::Option::Some(v);
        self
    }
    /// <p>The queues to use to filter the metrics. You should specify at least one queue, and can specify up to 100 queues per request. The <code>GetCurrentMetricsData</code> API in particular requires a queue when you include a <code>Filter</code> in your request. </p>
    pub fn set_queues(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.queues = input;
        self
    }
    /// <p>The queues to use to filter the metrics. You should specify at least one queue, and can specify up to 100 queues per request. The <code>GetCurrentMetricsData</code> API in particular requires a queue when you include a <code>Filter</code> in your request. </p>
    pub fn get_queues(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.queues
    }
    /// Appends an item to `channels`.
    ///
    /// To override the contents of this collection use [`set_channels`](Self::set_channels).
    ///
    /// <p>The channel to use to filter the metrics.</p>
    pub fn channels(mut self, input: crate::types::Channel) -> Self {
        let mut v = self.channels.unwrap_or_default();
        v.push(input);
        self.channels = ::std::option::Option::Some(v);
        self
    }
    /// <p>The channel to use to filter the metrics.</p>
    pub fn set_channels(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Channel>>) -> Self {
        self.channels = input;
        self
    }
    /// <p>The channel to use to filter the metrics.</p>
    pub fn get_channels(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Channel>> {
        &self.channels
    }
    /// Appends an item to `routing_profiles`.
    ///
    /// To override the contents of this collection use [`set_routing_profiles`](Self::set_routing_profiles).
    ///
    /// <p>A list of up to 100 routing profile IDs or ARNs.</p>
    pub fn routing_profiles(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.routing_profiles.unwrap_or_default();
        v.push(input.into());
        self.routing_profiles = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of up to 100 routing profile IDs or ARNs.</p>
    pub fn set_routing_profiles(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.routing_profiles = input;
        self
    }
    /// <p>A list of up to 100 routing profile IDs or ARNs.</p>
    pub fn get_routing_profiles(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.routing_profiles
    }
    /// Consumes the builder and constructs a [`Filters`](crate::types::Filters).
    pub fn build(self) -> crate::types::Filters {
        crate::types::Filters {
            queues: self.queues,
            channels: self.channels,
            routing_profiles: self.routing_profiles,
        }
    }
}
