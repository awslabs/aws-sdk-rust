// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration settings for a quick connect.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QuickConnectConfig {
    /// <p>The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE). </p>
    #[doc(hidden)]
    pub quick_connect_type: std::option::Option<crate::types::QuickConnectType>,
    /// <p>The user configuration. This is required only if QuickConnectType is USER.</p>
    #[doc(hidden)]
    pub user_config: std::option::Option<crate::types::UserQuickConnectConfig>,
    /// <p>The queue configuration. This is required only if QuickConnectType is QUEUE.</p>
    #[doc(hidden)]
    pub queue_config: std::option::Option<crate::types::QueueQuickConnectConfig>,
    /// <p>The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.</p>
    #[doc(hidden)]
    pub phone_config: std::option::Option<crate::types::PhoneNumberQuickConnectConfig>,
}
impl QuickConnectConfig {
    /// <p>The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE). </p>
    pub fn quick_connect_type(&self) -> std::option::Option<&crate::types::QuickConnectType> {
        self.quick_connect_type.as_ref()
    }
    /// <p>The user configuration. This is required only if QuickConnectType is USER.</p>
    pub fn user_config(&self) -> std::option::Option<&crate::types::UserQuickConnectConfig> {
        self.user_config.as_ref()
    }
    /// <p>The queue configuration. This is required only if QuickConnectType is QUEUE.</p>
    pub fn queue_config(&self) -> std::option::Option<&crate::types::QueueQuickConnectConfig> {
        self.queue_config.as_ref()
    }
    /// <p>The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.</p>
    pub fn phone_config(
        &self,
    ) -> std::option::Option<&crate::types::PhoneNumberQuickConnectConfig> {
        self.phone_config.as_ref()
    }
}
impl QuickConnectConfig {
    /// Creates a new builder-style object to manufacture [`QuickConnectConfig`](crate::types::QuickConnectConfig).
    pub fn builder() -> crate::types::builders::QuickConnectConfigBuilder {
        crate::types::builders::QuickConnectConfigBuilder::default()
    }
}

/// A builder for [`QuickConnectConfig`](crate::types::QuickConnectConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QuickConnectConfigBuilder {
    pub(crate) quick_connect_type: std::option::Option<crate::types::QuickConnectType>,
    pub(crate) user_config: std::option::Option<crate::types::UserQuickConnectConfig>,
    pub(crate) queue_config: std::option::Option<crate::types::QueueQuickConnectConfig>,
    pub(crate) phone_config: std::option::Option<crate::types::PhoneNumberQuickConnectConfig>,
}
impl QuickConnectConfigBuilder {
    /// <p>The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE). </p>
    pub fn quick_connect_type(mut self, input: crate::types::QuickConnectType) -> Self {
        self.quick_connect_type = Some(input);
        self
    }
    /// <p>The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE). </p>
    pub fn set_quick_connect_type(
        mut self,
        input: std::option::Option<crate::types::QuickConnectType>,
    ) -> Self {
        self.quick_connect_type = input;
        self
    }
    /// <p>The user configuration. This is required only if QuickConnectType is USER.</p>
    pub fn user_config(mut self, input: crate::types::UserQuickConnectConfig) -> Self {
        self.user_config = Some(input);
        self
    }
    /// <p>The user configuration. This is required only if QuickConnectType is USER.</p>
    pub fn set_user_config(
        mut self,
        input: std::option::Option<crate::types::UserQuickConnectConfig>,
    ) -> Self {
        self.user_config = input;
        self
    }
    /// <p>The queue configuration. This is required only if QuickConnectType is QUEUE.</p>
    pub fn queue_config(mut self, input: crate::types::QueueQuickConnectConfig) -> Self {
        self.queue_config = Some(input);
        self
    }
    /// <p>The queue configuration. This is required only if QuickConnectType is QUEUE.</p>
    pub fn set_queue_config(
        mut self,
        input: std::option::Option<crate::types::QueueQuickConnectConfig>,
    ) -> Self {
        self.queue_config = input;
        self
    }
    /// <p>The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.</p>
    pub fn phone_config(mut self, input: crate::types::PhoneNumberQuickConnectConfig) -> Self {
        self.phone_config = Some(input);
        self
    }
    /// <p>The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.</p>
    pub fn set_phone_config(
        mut self,
        input: std::option::Option<crate::types::PhoneNumberQuickConnectConfig>,
    ) -> Self {
        self.phone_config = input;
        self
    }
    /// Consumes the builder and constructs a [`QuickConnectConfig`](crate::types::QuickConnectConfig).
    pub fn build(self) -> crate::types::QuickConnectConfig {
        crate::types::QuickConnectConfig {
            quick_connect_type: self.quick_connect_type,
            user_config: self.user_config,
            queue_config: self.queue_config,
            phone_config: self.phone_config,
        }
    }
}
