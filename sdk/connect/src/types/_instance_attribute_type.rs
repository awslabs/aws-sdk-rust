// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `InstanceAttributeType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let instanceattributetype = unimplemented!();
/// match instanceattributetype {
///     InstanceAttributeType::AutoResolveBestVoices => { /* ... */ },
///     InstanceAttributeType::ContactflowLogs => { /* ... */ },
///     InstanceAttributeType::ContactLens => { /* ... */ },
///     InstanceAttributeType::EarlyMedia => { /* ... */ },
///     InstanceAttributeType::EnhancedChatMonitoring => { /* ... */ },
///     InstanceAttributeType::EnhancedContactMonitoring => { /* ... */ },
///     InstanceAttributeType::HighVolumeOutbound => { /* ... */ },
///     InstanceAttributeType::InboundCalls => { /* ... */ },
///     InstanceAttributeType::MultiPartyChatConference => { /* ... */ },
///     InstanceAttributeType::MultiPartyConference => { /* ... */ },
///     InstanceAttributeType::OutboundCalls => { /* ... */ },
///     InstanceAttributeType::UseCustomTtsVoices => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `instanceattributetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `InstanceAttributeType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `InstanceAttributeType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `InstanceAttributeType::NewFeature` is defined.
/// Specifically, when `instanceattributetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `InstanceAttributeType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum InstanceAttributeType {
    #[allow(missing_docs)] // documentation missing in model
    AutoResolveBestVoices,
    #[allow(missing_docs)] // documentation missing in model
    ContactflowLogs,
    #[allow(missing_docs)] // documentation missing in model
    ContactLens,
    #[allow(missing_docs)] // documentation missing in model
    EarlyMedia,
    #[allow(missing_docs)] // documentation missing in model
    EnhancedChatMonitoring,
    #[allow(missing_docs)] // documentation missing in model
    EnhancedContactMonitoring,
    #[allow(missing_docs)] // documentation missing in model
    HighVolumeOutbound,
    #[allow(missing_docs)] // documentation missing in model
    InboundCalls,
    #[allow(missing_docs)] // documentation missing in model
    MultiPartyChatConference,
    #[allow(missing_docs)] // documentation missing in model
    MultiPartyConference,
    #[allow(missing_docs)] // documentation missing in model
    OutboundCalls,
    #[allow(missing_docs)] // documentation missing in model
    UseCustomTtsVoices,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for InstanceAttributeType {
    fn from(s: &str) -> Self {
        match s {
            "AUTO_RESOLVE_BEST_VOICES" => InstanceAttributeType::AutoResolveBestVoices,
            "CONTACTFLOW_LOGS" => InstanceAttributeType::ContactflowLogs,
            "CONTACT_LENS" => InstanceAttributeType::ContactLens,
            "EARLY_MEDIA" => InstanceAttributeType::EarlyMedia,
            "ENHANCED_CHAT_MONITORING" => InstanceAttributeType::EnhancedChatMonitoring,
            "ENHANCED_CONTACT_MONITORING" => InstanceAttributeType::EnhancedContactMonitoring,
            "HIGH_VOLUME_OUTBOUND" => InstanceAttributeType::HighVolumeOutbound,
            "INBOUND_CALLS" => InstanceAttributeType::InboundCalls,
            "MULTI_PARTY_CHAT_CONFERENCE" => InstanceAttributeType::MultiPartyChatConference,
            "MULTI_PARTY_CONFERENCE" => InstanceAttributeType::MultiPartyConference,
            "OUTBOUND_CALLS" => InstanceAttributeType::OutboundCalls,
            "USE_CUSTOM_TTS_VOICES" => InstanceAttributeType::UseCustomTtsVoices,
            other => InstanceAttributeType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for InstanceAttributeType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(InstanceAttributeType::from(s))
    }
}
impl InstanceAttributeType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            InstanceAttributeType::AutoResolveBestVoices => "AUTO_RESOLVE_BEST_VOICES",
            InstanceAttributeType::ContactflowLogs => "CONTACTFLOW_LOGS",
            InstanceAttributeType::ContactLens => "CONTACT_LENS",
            InstanceAttributeType::EarlyMedia => "EARLY_MEDIA",
            InstanceAttributeType::EnhancedChatMonitoring => "ENHANCED_CHAT_MONITORING",
            InstanceAttributeType::EnhancedContactMonitoring => "ENHANCED_CONTACT_MONITORING",
            InstanceAttributeType::HighVolumeOutbound => "HIGH_VOLUME_OUTBOUND",
            InstanceAttributeType::InboundCalls => "INBOUND_CALLS",
            InstanceAttributeType::MultiPartyChatConference => "MULTI_PARTY_CHAT_CONFERENCE",
            InstanceAttributeType::MultiPartyConference => "MULTI_PARTY_CONFERENCE",
            InstanceAttributeType::OutboundCalls => "OUTBOUND_CALLS",
            InstanceAttributeType::UseCustomTtsVoices => "USE_CUSTOM_TTS_VOICES",
            InstanceAttributeType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AUTO_RESOLVE_BEST_VOICES",
            "CONTACTFLOW_LOGS",
            "CONTACT_LENS",
            "EARLY_MEDIA",
            "ENHANCED_CHAT_MONITORING",
            "ENHANCED_CONTACT_MONITORING",
            "HIGH_VOLUME_OUTBOUND",
            "INBOUND_CALLS",
            "MULTI_PARTY_CHAT_CONFERENCE",
            "MULTI_PARTY_CONFERENCE",
            "OUTBOUND_CALLS",
            "USE_CUSTOM_TTS_VOICES",
        ]
    }
}
impl ::std::convert::AsRef<str> for InstanceAttributeType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl InstanceAttributeType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for InstanceAttributeType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            InstanceAttributeType::AutoResolveBestVoices => write!(f, "AUTO_RESOLVE_BEST_VOICES"),
            InstanceAttributeType::ContactflowLogs => write!(f, "CONTACTFLOW_LOGS"),
            InstanceAttributeType::ContactLens => write!(f, "CONTACT_LENS"),
            InstanceAttributeType::EarlyMedia => write!(f, "EARLY_MEDIA"),
            InstanceAttributeType::EnhancedChatMonitoring => write!(f, "ENHANCED_CHAT_MONITORING"),
            InstanceAttributeType::EnhancedContactMonitoring => write!(f, "ENHANCED_CONTACT_MONITORING"),
            InstanceAttributeType::HighVolumeOutbound => write!(f, "HIGH_VOLUME_OUTBOUND"),
            InstanceAttributeType::InboundCalls => write!(f, "INBOUND_CALLS"),
            InstanceAttributeType::MultiPartyChatConference => write!(f, "MULTI_PARTY_CHAT_CONFERENCE"),
            InstanceAttributeType::MultiPartyConference => write!(f, "MULTI_PARTY_CONFERENCE"),
            InstanceAttributeType::OutboundCalls => write!(f, "OUTBOUND_CALLS"),
            InstanceAttributeType::UseCustomTtsVoices => write!(f, "USE_CUSTOM_TTS_VOICES"),
            InstanceAttributeType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
