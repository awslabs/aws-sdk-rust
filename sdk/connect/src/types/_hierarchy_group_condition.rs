// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A leaf node condition which can be used to specify a hierarchy group condition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HierarchyGroupCondition {
    /// <p>The value in the hierarchy group condition.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The type of hierarchy group match.</p>
    #[doc(hidden)]
    pub hierarchy_group_match_type: std::option::Option<crate::types::HierarchyGroupMatchType>,
}
impl HierarchyGroupCondition {
    /// <p>The value in the hierarchy group condition.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The type of hierarchy group match.</p>
    pub fn hierarchy_group_match_type(
        &self,
    ) -> std::option::Option<&crate::types::HierarchyGroupMatchType> {
        self.hierarchy_group_match_type.as_ref()
    }
}
impl HierarchyGroupCondition {
    /// Creates a new builder-style object to manufacture [`HierarchyGroupCondition`](crate::types::HierarchyGroupCondition).
    pub fn builder() -> crate::types::builders::HierarchyGroupConditionBuilder {
        crate::types::builders::HierarchyGroupConditionBuilder::default()
    }
}

/// A builder for [`HierarchyGroupCondition`](crate::types::HierarchyGroupCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HierarchyGroupConditionBuilder {
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) hierarchy_group_match_type:
        std::option::Option<crate::types::HierarchyGroupMatchType>,
}
impl HierarchyGroupConditionBuilder {
    /// <p>The value in the hierarchy group condition.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value in the hierarchy group condition.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The type of hierarchy group match.</p>
    pub fn hierarchy_group_match_type(
        mut self,
        input: crate::types::HierarchyGroupMatchType,
    ) -> Self {
        self.hierarchy_group_match_type = Some(input);
        self
    }
    /// <p>The type of hierarchy group match.</p>
    pub fn set_hierarchy_group_match_type(
        mut self,
        input: std::option::Option<crate::types::HierarchyGroupMatchType>,
    ) -> Self {
        self.hierarchy_group_match_type = input;
        self
    }
    /// Consumes the builder and constructs a [`HierarchyGroupCondition`](crate::types::HierarchyGroupCondition).
    pub fn build(self) -> crate::types::HierarchyGroupCondition {
        crate::types::HierarchyGroupCondition {
            value: self.value,
            hierarchy_group_match_type: self.hierarchy_group_match_type,
        }
    }
}
