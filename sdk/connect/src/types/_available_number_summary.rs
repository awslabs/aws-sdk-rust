// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about available phone numbers.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AvailableNumberSummary {
    /// <p>The phone number. Phone numbers are formatted <code>[+] [country code] [subscriber number including area code]</code>.</p>
    #[doc(hidden)]
    pub phone_number: std::option::Option<std::string::String>,
    /// <p>The ISO country code.</p>
    #[doc(hidden)]
    pub phone_number_country_code: std::option::Option<crate::types::PhoneNumberCountryCode>,
    /// <p>The type of phone number.</p>
    #[doc(hidden)]
    pub phone_number_type: std::option::Option<crate::types::PhoneNumberType>,
}
impl AvailableNumberSummary {
    /// <p>The phone number. Phone numbers are formatted <code>[+] [country code] [subscriber number including area code]</code>.</p>
    pub fn phone_number(&self) -> std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>The ISO country code.</p>
    pub fn phone_number_country_code(
        &self,
    ) -> std::option::Option<&crate::types::PhoneNumberCountryCode> {
        self.phone_number_country_code.as_ref()
    }
    /// <p>The type of phone number.</p>
    pub fn phone_number_type(&self) -> std::option::Option<&crate::types::PhoneNumberType> {
        self.phone_number_type.as_ref()
    }
}
impl AvailableNumberSummary {
    /// Creates a new builder-style object to manufacture [`AvailableNumberSummary`](crate::types::AvailableNumberSummary).
    pub fn builder() -> crate::types::builders::AvailableNumberSummaryBuilder {
        crate::types::builders::AvailableNumberSummaryBuilder::default()
    }
}

/// A builder for [`AvailableNumberSummary`](crate::types::AvailableNumberSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AvailableNumberSummaryBuilder {
    pub(crate) phone_number: std::option::Option<std::string::String>,
    pub(crate) phone_number_country_code: std::option::Option<crate::types::PhoneNumberCountryCode>,
    pub(crate) phone_number_type: std::option::Option<crate::types::PhoneNumberType>,
}
impl AvailableNumberSummaryBuilder {
    /// <p>The phone number. Phone numbers are formatted <code>[+] [country code] [subscriber number including area code]</code>.</p>
    pub fn phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number = Some(input.into());
        self
    }
    /// <p>The phone number. Phone numbers are formatted <code>[+] [country code] [subscriber number including area code]</code>.</p>
    pub fn set_phone_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>The ISO country code.</p>
    pub fn phone_number_country_code(
        mut self,
        input: crate::types::PhoneNumberCountryCode,
    ) -> Self {
        self.phone_number_country_code = Some(input);
        self
    }
    /// <p>The ISO country code.</p>
    pub fn set_phone_number_country_code(
        mut self,
        input: std::option::Option<crate::types::PhoneNumberCountryCode>,
    ) -> Self {
        self.phone_number_country_code = input;
        self
    }
    /// <p>The type of phone number.</p>
    pub fn phone_number_type(mut self, input: crate::types::PhoneNumberType) -> Self {
        self.phone_number_type = Some(input);
        self
    }
    /// <p>The type of phone number.</p>
    pub fn set_phone_number_type(
        mut self,
        input: std::option::Option<crate::types::PhoneNumberType>,
    ) -> Self {
        self.phone_number_type = input;
        self
    }
    /// Consumes the builder and constructs a [`AvailableNumberSummary`](crate::types::AvailableNumberSummary).
    pub fn build(self) -> crate::types::AvailableNumberSummary {
        crate::types::AvailableNumberSummary {
            phone_number: self.phone_number,
            phone_number_country_code: self.phone_number_country_code,
            phone_number_type: self.phone_number_type,
        }
    }
}
