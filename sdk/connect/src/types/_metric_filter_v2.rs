// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the filter used when retrieving metrics. <code>MetricFiltersV2</code> can be used on the following metrics: <code>AVG_AGENT_CONNECTING_TIME</code>, <code>CONTACTS_CREATED</code>, <code>CONTACTS_HANDLED</code>, <code>SUM_CONTACTS_DISCONNECTED</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricFilterV2 {
    /// <p>The key to use for filtering data. </p>
    /// <p>Valid metric filter keys: <code>INITIATION_METHOD</code>, <code>DISCONNECT_REASON</code>. These are the same values as the <code>InitiationMethod</code> and <code>DisconnectReason</code> in the contact record. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/ctr-data-model.html#ctr-ContactTraceRecord">ContactTraceRecord</a> in the <i>Amazon Connect Administrator's Guide</i>. </p>
    pub metric_filter_key: ::std::option::Option<::std::string::String>,
    /// <p>The values to use for filtering data. </p>
    /// <p>Valid metric filter values for <code>INITIATION_METHOD</code>: <code>INBOUND</code> | <code>OUTBOUND</code> | <code>TRANSFER</code> | <code>QUEUE_TRANSFER</code> | <code>CALLBACK</code> | <code>API</code> </p>
    /// <p>Valid metric filter values for <code>DISCONNECT_REASON</code>: <code>CUSTOMER_DISCONNECT</code> | <code>AGENT_DISCONNECT</code> | <code>THIRD_PARTY_DISCONNECT</code> | <code>TELECOM_PROBLEM</code> | <code>BARGED</code> | <code>CONTACT_FLOW_DISCONNECT</code> | <code>OTHER</code> | <code>EXPIRED</code> | <code>API</code> </p>
    pub metric_filter_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The flag to use to filter on requested metric filter values or to not filter on requested metric filter values. By default the negate is <code>false</code>, which indicates to filter on the requested metric filter. </p>
    pub negate: bool,
}
impl MetricFilterV2 {
    /// <p>The key to use for filtering data. </p>
    /// <p>Valid metric filter keys: <code>INITIATION_METHOD</code>, <code>DISCONNECT_REASON</code>. These are the same values as the <code>InitiationMethod</code> and <code>DisconnectReason</code> in the contact record. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/ctr-data-model.html#ctr-ContactTraceRecord">ContactTraceRecord</a> in the <i>Amazon Connect Administrator's Guide</i>. </p>
    pub fn metric_filter_key(&self) -> ::std::option::Option<&str> {
        self.metric_filter_key.as_deref()
    }
    /// <p>The values to use for filtering data. </p>
    /// <p>Valid metric filter values for <code>INITIATION_METHOD</code>: <code>INBOUND</code> | <code>OUTBOUND</code> | <code>TRANSFER</code> | <code>QUEUE_TRANSFER</code> | <code>CALLBACK</code> | <code>API</code> </p>
    /// <p>Valid metric filter values for <code>DISCONNECT_REASON</code>: <code>CUSTOMER_DISCONNECT</code> | <code>AGENT_DISCONNECT</code> | <code>THIRD_PARTY_DISCONNECT</code> | <code>TELECOM_PROBLEM</code> | <code>BARGED</code> | <code>CONTACT_FLOW_DISCONNECT</code> | <code>OTHER</code> | <code>EXPIRED</code> | <code>API</code> </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_filter_values.is_none()`.
    pub fn metric_filter_values(&self) -> &[::std::string::String] {
        self.metric_filter_values.as_deref().unwrap_or_default()
    }
    /// <p>The flag to use to filter on requested metric filter values or to not filter on requested metric filter values. By default the negate is <code>false</code>, which indicates to filter on the requested metric filter. </p>
    pub fn negate(&self) -> bool {
        self.negate
    }
}
impl MetricFilterV2 {
    /// Creates a new builder-style object to manufacture [`MetricFilterV2`](crate::types::MetricFilterV2).
    pub fn builder() -> crate::types::builders::MetricFilterV2Builder {
        crate::types::builders::MetricFilterV2Builder::default()
    }
}

/// A builder for [`MetricFilterV2`](crate::types::MetricFilterV2).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricFilterV2Builder {
    pub(crate) metric_filter_key: ::std::option::Option<::std::string::String>,
    pub(crate) metric_filter_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) negate: ::std::option::Option<bool>,
}
impl MetricFilterV2Builder {
    /// <p>The key to use for filtering data. </p>
    /// <p>Valid metric filter keys: <code>INITIATION_METHOD</code>, <code>DISCONNECT_REASON</code>. These are the same values as the <code>InitiationMethod</code> and <code>DisconnectReason</code> in the contact record. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/ctr-data-model.html#ctr-ContactTraceRecord">ContactTraceRecord</a> in the <i>Amazon Connect Administrator's Guide</i>. </p>
    pub fn metric_filter_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_filter_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key to use for filtering data. </p>
    /// <p>Valid metric filter keys: <code>INITIATION_METHOD</code>, <code>DISCONNECT_REASON</code>. These are the same values as the <code>InitiationMethod</code> and <code>DisconnectReason</code> in the contact record. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/ctr-data-model.html#ctr-ContactTraceRecord">ContactTraceRecord</a> in the <i>Amazon Connect Administrator's Guide</i>. </p>
    pub fn set_metric_filter_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_filter_key = input;
        self
    }
    /// <p>The key to use for filtering data. </p>
    /// <p>Valid metric filter keys: <code>INITIATION_METHOD</code>, <code>DISCONNECT_REASON</code>. These are the same values as the <code>InitiationMethod</code> and <code>DisconnectReason</code> in the contact record. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/ctr-data-model.html#ctr-ContactTraceRecord">ContactTraceRecord</a> in the <i>Amazon Connect Administrator's Guide</i>. </p>
    pub fn get_metric_filter_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_filter_key
    }
    /// Appends an item to `metric_filter_values`.
    ///
    /// To override the contents of this collection use [`set_metric_filter_values`](Self::set_metric_filter_values).
    ///
    /// <p>The values to use for filtering data. </p>
    /// <p>Valid metric filter values for <code>INITIATION_METHOD</code>: <code>INBOUND</code> | <code>OUTBOUND</code> | <code>TRANSFER</code> | <code>QUEUE_TRANSFER</code> | <code>CALLBACK</code> | <code>API</code> </p>
    /// <p>Valid metric filter values for <code>DISCONNECT_REASON</code>: <code>CUSTOMER_DISCONNECT</code> | <code>AGENT_DISCONNECT</code> | <code>THIRD_PARTY_DISCONNECT</code> | <code>TELECOM_PROBLEM</code> | <code>BARGED</code> | <code>CONTACT_FLOW_DISCONNECT</code> | <code>OTHER</code> | <code>EXPIRED</code> | <code>API</code> </p>
    pub fn metric_filter_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.metric_filter_values.unwrap_or_default();
        v.push(input.into());
        self.metric_filter_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values to use for filtering data. </p>
    /// <p>Valid metric filter values for <code>INITIATION_METHOD</code>: <code>INBOUND</code> | <code>OUTBOUND</code> | <code>TRANSFER</code> | <code>QUEUE_TRANSFER</code> | <code>CALLBACK</code> | <code>API</code> </p>
    /// <p>Valid metric filter values for <code>DISCONNECT_REASON</code>: <code>CUSTOMER_DISCONNECT</code> | <code>AGENT_DISCONNECT</code> | <code>THIRD_PARTY_DISCONNECT</code> | <code>TELECOM_PROBLEM</code> | <code>BARGED</code> | <code>CONTACT_FLOW_DISCONNECT</code> | <code>OTHER</code> | <code>EXPIRED</code> | <code>API</code> </p>
    pub fn set_metric_filter_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.metric_filter_values = input;
        self
    }
    /// <p>The values to use for filtering data. </p>
    /// <p>Valid metric filter values for <code>INITIATION_METHOD</code>: <code>INBOUND</code> | <code>OUTBOUND</code> | <code>TRANSFER</code> | <code>QUEUE_TRANSFER</code> | <code>CALLBACK</code> | <code>API</code> </p>
    /// <p>Valid metric filter values for <code>DISCONNECT_REASON</code>: <code>CUSTOMER_DISCONNECT</code> | <code>AGENT_DISCONNECT</code> | <code>THIRD_PARTY_DISCONNECT</code> | <code>TELECOM_PROBLEM</code> | <code>BARGED</code> | <code>CONTACT_FLOW_DISCONNECT</code> | <code>OTHER</code> | <code>EXPIRED</code> | <code>API</code> </p>
    pub fn get_metric_filter_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.metric_filter_values
    }
    /// <p>The flag to use to filter on requested metric filter values or to not filter on requested metric filter values. By default the negate is <code>false</code>, which indicates to filter on the requested metric filter. </p>
    pub fn negate(mut self, input: bool) -> Self {
        self.negate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The flag to use to filter on requested metric filter values or to not filter on requested metric filter values. By default the negate is <code>false</code>, which indicates to filter on the requested metric filter. </p>
    pub fn set_negate(mut self, input: ::std::option::Option<bool>) -> Self {
        self.negate = input;
        self
    }
    /// <p>The flag to use to filter on requested metric filter values or to not filter on requested metric filter values. By default the negate is <code>false</code>, which indicates to filter on the requested metric filter. </p>
    pub fn get_negate(&self) -> &::std::option::Option<bool> {
        &self.negate
    }
    /// Consumes the builder and constructs a [`MetricFilterV2`](crate::types::MetricFilterV2).
    pub fn build(self) -> crate::types::MetricFilterV2 {
        crate::types::MetricFilterV2 {
            metric_filter_key: self.metric_filter_key,
            metric_filter_values: self.metric_filter_values,
            negate: self.negate.unwrap_or_default(),
        }
    }
}
