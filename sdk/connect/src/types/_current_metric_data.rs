// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the data for a real-time metric.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CurrentMetricData {
    /// <p>Information about the metric.</p>
    #[doc(hidden)]
    pub metric: std::option::Option<crate::types::CurrentMetric>,
    /// <p>The value of the metric.</p>
    #[doc(hidden)]
    pub value: std::option::Option<f64>,
}
impl CurrentMetricData {
    /// <p>Information about the metric.</p>
    pub fn metric(&self) -> std::option::Option<&crate::types::CurrentMetric> {
        self.metric.as_ref()
    }
    /// <p>The value of the metric.</p>
    pub fn value(&self) -> std::option::Option<f64> {
        self.value
    }
}
impl CurrentMetricData {
    /// Creates a new builder-style object to manufacture [`CurrentMetricData`](crate::types::CurrentMetricData).
    pub fn builder() -> crate::types::builders::CurrentMetricDataBuilder {
        crate::types::builders::CurrentMetricDataBuilder::default()
    }
}

/// A builder for [`CurrentMetricData`](crate::types::CurrentMetricData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CurrentMetricDataBuilder {
    pub(crate) metric: std::option::Option<crate::types::CurrentMetric>,
    pub(crate) value: std::option::Option<f64>,
}
impl CurrentMetricDataBuilder {
    /// <p>Information about the metric.</p>
    pub fn metric(mut self, input: crate::types::CurrentMetric) -> Self {
        self.metric = Some(input);
        self
    }
    /// <p>Information about the metric.</p>
    pub fn set_metric(mut self, input: std::option::Option<crate::types::CurrentMetric>) -> Self {
        self.metric = input;
        self
    }
    /// <p>The value of the metric.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value of the metric.</p>
    pub fn set_value(mut self, input: std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`CurrentMetricData`](crate::types::CurrentMetricData).
    pub fn build(self) -> crate::types::CurrentMetricData {
        crate::types::CurrentMetricData {
            metric: self.metric,
            value: self.value,
        }
    }
}
