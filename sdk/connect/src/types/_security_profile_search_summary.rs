// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the returned security profiles.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityProfileSearchSummary {
    /// <p>The identifier of the security profile.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The organization resource identifier.</p>
    #[doc(hidden)]
    pub organization_resource_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the security profile.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the security profile.</p>
    #[doc(hidden)]
    pub security_profile_name: std::option::Option<std::string::String>,
    /// <p>The description of the security profile.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl SecurityProfileSearchSummary {
    /// <p>The identifier of the security profile.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The organization resource identifier.</p>
    pub fn organization_resource_id(&self) -> std::option::Option<&str> {
        self.organization_resource_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the security profile.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the security profile.</p>
    pub fn security_profile_name(&self) -> std::option::Option<&str> {
        self.security_profile_name.as_deref()
    }
    /// <p>The description of the security profile.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl SecurityProfileSearchSummary {
    /// Creates a new builder-style object to manufacture [`SecurityProfileSearchSummary`](crate::types::SecurityProfileSearchSummary).
    pub fn builder() -> crate::types::builders::SecurityProfileSearchSummaryBuilder {
        crate::types::builders::SecurityProfileSearchSummaryBuilder::default()
    }
}

/// A builder for [`SecurityProfileSearchSummary`](crate::types::SecurityProfileSearchSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SecurityProfileSearchSummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) organization_resource_id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) security_profile_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl SecurityProfileSearchSummaryBuilder {
    /// <p>The identifier of the security profile.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the security profile.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The organization resource identifier.</p>
    pub fn organization_resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.organization_resource_id = Some(input.into());
        self
    }
    /// <p>The organization resource identifier.</p>
    pub fn set_organization_resource_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.organization_resource_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the security profile.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the security profile.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the security profile.</p>
    pub fn security_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.security_profile_name = Some(input.into());
        self
    }
    /// <p>The name of the security profile.</p>
    pub fn set_security_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.security_profile_name = input;
        self
    }
    /// <p>The description of the security profile.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the security profile.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`SecurityProfileSearchSummary`](crate::types::SecurityProfileSearchSummary).
    pub fn build(self) -> crate::types::SecurityProfileSearchSummary {
        crate::types::SecurityProfileSearchSummary {
            id: self.id,
            organization_resource_id: self.organization_resource_id,
            arn: self.arn,
            security_profile_name: self.security_profile_name,
            description: self.description,
            tags: self.tags,
        }
    }
}
