// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a real-time metric. For a description of each metric, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html">Real-time Metrics Definitions</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CurrentMetric {
    /// <p>The name of the metric.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::CurrentMetricName>,
    /// <p>The unit for the metric.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<crate::types::Unit>,
}
impl CurrentMetric {
    /// <p>The name of the metric.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::CurrentMetricName> {
        self.name.as_ref()
    }
    /// <p>The unit for the metric.</p>
    pub fn unit(&self) -> std::option::Option<&crate::types::Unit> {
        self.unit.as_ref()
    }
}
impl CurrentMetric {
    /// Creates a new builder-style object to manufacture [`CurrentMetric`](crate::types::CurrentMetric).
    pub fn builder() -> crate::types::builders::CurrentMetricBuilder {
        crate::types::builders::CurrentMetricBuilder::default()
    }
}

/// A builder for [`CurrentMetric`](crate::types::CurrentMetric).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CurrentMetricBuilder {
    pub(crate) name: std::option::Option<crate::types::CurrentMetricName>,
    pub(crate) unit: std::option::Option<crate::types::Unit>,
}
impl CurrentMetricBuilder {
    /// <p>The name of the metric.</p>
    pub fn name(mut self, input: crate::types::CurrentMetricName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The name of the metric.</p>
    pub fn set_name(mut self, input: std::option::Option<crate::types::CurrentMetricName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The unit for the metric.</p>
    pub fn unit(mut self, input: crate::types::Unit) -> Self {
        self.unit = Some(input);
        self
    }
    /// <p>The unit for the metric.</p>
    pub fn set_unit(mut self, input: std::option::Option<crate::types::Unit>) -> Self {
        self.unit = input;
        self
    }
    /// Consumes the builder and constructs a [`CurrentMetric`](crate::types::CurrentMetric).
    pub fn build(self) -> crate::types::CurrentMetric {
        crate::types::CurrentMetric {
            name: self.name,
            unit: self.unit,
        }
    }
}
