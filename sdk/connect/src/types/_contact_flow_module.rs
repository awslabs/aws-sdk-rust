// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a flow module.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContactFlowModule {
    /// <p>The Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The identifier of the flow module.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the flow module.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The content of the flow module.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::string::String>,
    /// <p>The description of the flow module.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The type of flow module.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ContactFlowModuleState>,
    /// <p>The status of the flow module.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ContactFlowModuleStatus>,
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ContactFlowModule {
    /// <p>The Amazon Resource Name (ARN).</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The identifier of the flow module.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the flow module.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The content of the flow module.</p>
    pub fn content(&self) -> std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>The description of the flow module.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of flow module.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ContactFlowModuleState> {
        self.state.as_ref()
    }
    /// <p>The status of the flow module.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ContactFlowModuleStatus> {
        self.status.as_ref()
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl ContactFlowModule {
    /// Creates a new builder-style object to manufacture [`ContactFlowModule`](crate::types::ContactFlowModule).
    pub fn builder() -> crate::types::builders::ContactFlowModuleBuilder {
        crate::types::builders::ContactFlowModuleBuilder::default()
    }
}

/// A builder for [`ContactFlowModule`](crate::types::ContactFlowModule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContactFlowModuleBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) content: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ContactFlowModuleState>,
    pub(crate) status: std::option::Option<crate::types::ContactFlowModuleStatus>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ContactFlowModuleBuilder {
    /// <p>The Amazon Resource Name (ARN).</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN).</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The identifier of the flow module.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the flow module.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the flow module.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the flow module.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The content of the flow module.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.content = Some(input.into());
        self
    }
    /// <p>The content of the flow module.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The description of the flow module.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the flow module.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The type of flow module.</p>
    pub fn state(mut self, input: crate::types::ContactFlowModuleState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The type of flow module.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::ContactFlowModuleState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>The status of the flow module.</p>
    pub fn status(mut self, input: crate::types::ContactFlowModuleStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the flow module.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ContactFlowModuleStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`ContactFlowModule`](crate::types::ContactFlowModule).
    pub fn build(self) -> crate::types::ContactFlowModule {
        crate::types::ContactFlowModule {
            arn: self.arn,
            id: self.id,
            name: self.name,
            content: self.content,
            description: self.description,
            state: self.state,
            status: self.status,
            tags: self.tags,
        }
    }
}
