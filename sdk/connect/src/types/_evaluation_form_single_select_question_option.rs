// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the automation configuration in single select questions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EvaluationFormSingleSelectQuestionOption {
    /// <p>The identifier of the answer option. An identifier must be unique within the question.</p>
    pub ref_id: ::std::string::String,
    /// <p>The title of the answer option.</p>
    pub text: ::std::string::String,
    /// <p>The score assigned to the answer option.</p>
    pub score: i32,
    /// <p>The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.</p>
    pub automatic_fail: bool,
}
impl EvaluationFormSingleSelectQuestionOption {
    /// <p>The identifier of the answer option. An identifier must be unique within the question.</p>
    pub fn ref_id(&self) -> &str {
        use std::ops::Deref;
        self.ref_id.deref()
    }
    /// <p>The title of the answer option.</p>
    pub fn text(&self) -> &str {
        use std::ops::Deref;
        self.text.deref()
    }
    /// <p>The score assigned to the answer option.</p>
    pub fn score(&self) -> i32 {
        self.score
    }
    /// <p>The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.</p>
    pub fn automatic_fail(&self) -> bool {
        self.automatic_fail
    }
}
impl EvaluationFormSingleSelectQuestionOption {
    /// Creates a new builder-style object to manufacture [`EvaluationFormSingleSelectQuestionOption`](crate::types::EvaluationFormSingleSelectQuestionOption).
    pub fn builder() -> crate::types::builders::EvaluationFormSingleSelectQuestionOptionBuilder {
        crate::types::builders::EvaluationFormSingleSelectQuestionOptionBuilder::default()
    }
}

/// A builder for [`EvaluationFormSingleSelectQuestionOption`](crate::types::EvaluationFormSingleSelectQuestionOption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EvaluationFormSingleSelectQuestionOptionBuilder {
    pub(crate) ref_id: ::std::option::Option<::std::string::String>,
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) score: ::std::option::Option<i32>,
    pub(crate) automatic_fail: ::std::option::Option<bool>,
}
impl EvaluationFormSingleSelectQuestionOptionBuilder {
    /// <p>The identifier of the answer option. An identifier must be unique within the question.</p>
    /// This field is required.
    pub fn ref_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ref_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the answer option. An identifier must be unique within the question.</p>
    pub fn set_ref_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ref_id = input;
        self
    }
    /// <p>The identifier of the answer option. An identifier must be unique within the question.</p>
    pub fn get_ref_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ref_id
    }
    /// <p>The title of the answer option.</p>
    /// This field is required.
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the answer option.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The title of the answer option.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>The score assigned to the answer option.</p>
    pub fn score(mut self, input: i32) -> Self {
        self.score = ::std::option::Option::Some(input);
        self
    }
    /// <p>The score assigned to the answer option.</p>
    pub fn set_score(mut self, input: ::std::option::Option<i32>) -> Self {
        self.score = input;
        self
    }
    /// <p>The score assigned to the answer option.</p>
    pub fn get_score(&self) -> &::std::option::Option<i32> {
        &self.score
    }
    /// <p>The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.</p>
    pub fn automatic_fail(mut self, input: bool) -> Self {
        self.automatic_fail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.</p>
    pub fn set_automatic_fail(mut self, input: ::std::option::Option<bool>) -> Self {
        self.automatic_fail = input;
        self
    }
    /// <p>The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.</p>
    pub fn get_automatic_fail(&self) -> &::std::option::Option<bool> {
        &self.automatic_fail
    }
    /// Consumes the builder and constructs a [`EvaluationFormSingleSelectQuestionOption`](crate::types::EvaluationFormSingleSelectQuestionOption).
    /// This method will fail if any of the following fields are not set:
    /// - [`ref_id`](crate::types::builders::EvaluationFormSingleSelectQuestionOptionBuilder::ref_id)
    /// - [`text`](crate::types::builders::EvaluationFormSingleSelectQuestionOptionBuilder::text)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::EvaluationFormSingleSelectQuestionOption, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EvaluationFormSingleSelectQuestionOption {
            ref_id: self.ref_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ref_id",
                    "ref_id was not specified but it is required when building EvaluationFormSingleSelectQuestionOption",
                )
            })?,
            text: self.text.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "text",
                    "text was not specified but it is required when building EvaluationFormSingleSelectQuestionOption",
                )
            })?,
            score: self.score.unwrap_or_default(),
            automatic_fail: self.automatic_fail.unwrap_or_default(),
        })
    }
}
