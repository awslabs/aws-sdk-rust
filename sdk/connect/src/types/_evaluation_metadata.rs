// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata information about a contact evaluation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EvaluationMetadata {
    /// <p>The identifier of the contact in this instance of Amazon Connect. </p>
    pub contact_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the evaluation.</p>
    pub evaluator_arn: ::std::string::String,
    /// <p>The identifier of the agent who performed the contact.</p>
    pub contact_agent_id: ::std::option::Option<::std::string::String>,
    /// <p>The overall score of the contact evaluation.</p>
    pub score: ::std::option::Option<crate::types::EvaluationScore>,
}
impl EvaluationMetadata {
    /// <p>The identifier of the contact in this instance of Amazon Connect. </p>
    pub fn contact_id(&self) -> &str {
        use std::ops::Deref;
        self.contact_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the evaluation.</p>
    pub fn evaluator_arn(&self) -> &str {
        use std::ops::Deref;
        self.evaluator_arn.deref()
    }
    /// <p>The identifier of the agent who performed the contact.</p>
    pub fn contact_agent_id(&self) -> ::std::option::Option<&str> {
        self.contact_agent_id.as_deref()
    }
    /// <p>The overall score of the contact evaluation.</p>
    pub fn score(&self) -> ::std::option::Option<&crate::types::EvaluationScore> {
        self.score.as_ref()
    }
}
impl EvaluationMetadata {
    /// Creates a new builder-style object to manufacture [`EvaluationMetadata`](crate::types::EvaluationMetadata).
    pub fn builder() -> crate::types::builders::EvaluationMetadataBuilder {
        crate::types::builders::EvaluationMetadataBuilder::default()
    }
}

/// A builder for [`EvaluationMetadata`](crate::types::EvaluationMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EvaluationMetadataBuilder {
    pub(crate) contact_id: ::std::option::Option<::std::string::String>,
    pub(crate) evaluator_arn: ::std::option::Option<::std::string::String>,
    pub(crate) contact_agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) score: ::std::option::Option<crate::types::EvaluationScore>,
}
impl EvaluationMetadataBuilder {
    /// <p>The identifier of the contact in this instance of Amazon Connect. </p>
    /// This field is required.
    pub fn contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the contact in this instance of Amazon Connect. </p>
    pub fn set_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_id = input;
        self
    }
    /// <p>The identifier of the contact in this instance of Amazon Connect. </p>
    pub fn get_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_id
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the evaluation.</p>
    /// This field is required.
    pub fn evaluator_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.evaluator_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the evaluation.</p>
    pub fn set_evaluator_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.evaluator_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the evaluation.</p>
    pub fn get_evaluator_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.evaluator_arn
    }
    /// <p>The identifier of the agent who performed the contact.</p>
    pub fn contact_agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the agent who performed the contact.</p>
    pub fn set_contact_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_agent_id = input;
        self
    }
    /// <p>The identifier of the agent who performed the contact.</p>
    pub fn get_contact_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_agent_id
    }
    /// <p>The overall score of the contact evaluation.</p>
    pub fn score(mut self, input: crate::types::EvaluationScore) -> Self {
        self.score = ::std::option::Option::Some(input);
        self
    }
    /// <p>The overall score of the contact evaluation.</p>
    pub fn set_score(mut self, input: ::std::option::Option<crate::types::EvaluationScore>) -> Self {
        self.score = input;
        self
    }
    /// <p>The overall score of the contact evaluation.</p>
    pub fn get_score(&self) -> &::std::option::Option<crate::types::EvaluationScore> {
        &self.score
    }
    /// Consumes the builder and constructs a [`EvaluationMetadata`](crate::types::EvaluationMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`contact_id`](crate::types::builders::EvaluationMetadataBuilder::contact_id)
    /// - [`evaluator_arn`](crate::types::builders::EvaluationMetadataBuilder::evaluator_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::EvaluationMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EvaluationMetadata {
            contact_id: self.contact_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "contact_id",
                    "contact_id was not specified but it is required when building EvaluationMetadata",
                )
            })?,
            evaluator_arn: self.evaluator_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "evaluator_arn",
                    "evaluator_arn was not specified but it is required when building EvaluationMetadata",
                )
            })?,
            contact_agent_id: self.contact_agent_id,
            score: self.score,
        })
    }
}
