// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `IntegrationType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let integrationtype = unimplemented!();
/// match integrationtype {
///     IntegrationType::AnalyticsConnector => { /* ... */ },
///     IntegrationType::Application => { /* ... */ },
///     IntegrationType::CallTransferConnector => { /* ... */ },
///     IntegrationType::CasesDomain => { /* ... */ },
///     IntegrationType::CognitoUserPool => { /* ... */ },
///     IntegrationType::Event => { /* ... */ },
///     IntegrationType::FileScanner => { /* ... */ },
///     IntegrationType::PinpointApp => { /* ... */ },
///     IntegrationType::QMessageTemplates => { /* ... */ },
///     IntegrationType::SesIdentity => { /* ... */ },
///     IntegrationType::VoiceId => { /* ... */ },
///     IntegrationType::WisdomAssistant => { /* ... */ },
///     IntegrationType::WisdomKnowledgeBase => { /* ... */ },
///     IntegrationType::WisdomQuickResponses => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `integrationtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `IntegrationType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `IntegrationType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `IntegrationType::NewFeature` is defined.
/// Specifically, when `integrationtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `IntegrationType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum IntegrationType {
    #[allow(missing_docs)] // documentation missing in model
    AnalyticsConnector,
    #[allow(missing_docs)] // documentation missing in model
    Application,
    #[allow(missing_docs)] // documentation missing in model
    CallTransferConnector,
    #[allow(missing_docs)] // documentation missing in model
    CasesDomain,
    #[allow(missing_docs)] // documentation missing in model
    CognitoUserPool,
    #[allow(missing_docs)] // documentation missing in model
    Event,
    #[allow(missing_docs)] // documentation missing in model
    FileScanner,
    #[allow(missing_docs)] // documentation missing in model
    PinpointApp,
    #[allow(missing_docs)] // documentation missing in model
    QMessageTemplates,
    #[allow(missing_docs)] // documentation missing in model
    SesIdentity,
    #[allow(missing_docs)] // documentation missing in model
    VoiceId,
    #[allow(missing_docs)] // documentation missing in model
    WisdomAssistant,
    #[allow(missing_docs)] // documentation missing in model
    WisdomKnowledgeBase,
    #[allow(missing_docs)] // documentation missing in model
    WisdomQuickResponses,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for IntegrationType {
    fn from(s: &str) -> Self {
        match s {
            "ANALYTICS_CONNECTOR" => IntegrationType::AnalyticsConnector,
            "APPLICATION" => IntegrationType::Application,
            "CALL_TRANSFER_CONNECTOR" => IntegrationType::CallTransferConnector,
            "CASES_DOMAIN" => IntegrationType::CasesDomain,
            "COGNITO_USER_POOL" => IntegrationType::CognitoUserPool,
            "EVENT" => IntegrationType::Event,
            "FILE_SCANNER" => IntegrationType::FileScanner,
            "PINPOINT_APP" => IntegrationType::PinpointApp,
            "Q_MESSAGE_TEMPLATES" => IntegrationType::QMessageTemplates,
            "SES_IDENTITY" => IntegrationType::SesIdentity,
            "VOICE_ID" => IntegrationType::VoiceId,
            "WISDOM_ASSISTANT" => IntegrationType::WisdomAssistant,
            "WISDOM_KNOWLEDGE_BASE" => IntegrationType::WisdomKnowledgeBase,
            "WISDOM_QUICK_RESPONSES" => IntegrationType::WisdomQuickResponses,
            other => IntegrationType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for IntegrationType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(IntegrationType::from(s))
    }
}
impl IntegrationType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            IntegrationType::AnalyticsConnector => "ANALYTICS_CONNECTOR",
            IntegrationType::Application => "APPLICATION",
            IntegrationType::CallTransferConnector => "CALL_TRANSFER_CONNECTOR",
            IntegrationType::CasesDomain => "CASES_DOMAIN",
            IntegrationType::CognitoUserPool => "COGNITO_USER_POOL",
            IntegrationType::Event => "EVENT",
            IntegrationType::FileScanner => "FILE_SCANNER",
            IntegrationType::PinpointApp => "PINPOINT_APP",
            IntegrationType::QMessageTemplates => "Q_MESSAGE_TEMPLATES",
            IntegrationType::SesIdentity => "SES_IDENTITY",
            IntegrationType::VoiceId => "VOICE_ID",
            IntegrationType::WisdomAssistant => "WISDOM_ASSISTANT",
            IntegrationType::WisdomKnowledgeBase => "WISDOM_KNOWLEDGE_BASE",
            IntegrationType::WisdomQuickResponses => "WISDOM_QUICK_RESPONSES",
            IntegrationType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ANALYTICS_CONNECTOR",
            "APPLICATION",
            "CALL_TRANSFER_CONNECTOR",
            "CASES_DOMAIN",
            "COGNITO_USER_POOL",
            "EVENT",
            "FILE_SCANNER",
            "PINPOINT_APP",
            "Q_MESSAGE_TEMPLATES",
            "SES_IDENTITY",
            "VOICE_ID",
            "WISDOM_ASSISTANT",
            "WISDOM_KNOWLEDGE_BASE",
            "WISDOM_QUICK_RESPONSES",
        ]
    }
}
impl ::std::convert::AsRef<str> for IntegrationType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl IntegrationType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for IntegrationType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            IntegrationType::AnalyticsConnector => write!(f, "ANALYTICS_CONNECTOR"),
            IntegrationType::Application => write!(f, "APPLICATION"),
            IntegrationType::CallTransferConnector => write!(f, "CALL_TRANSFER_CONNECTOR"),
            IntegrationType::CasesDomain => write!(f, "CASES_DOMAIN"),
            IntegrationType::CognitoUserPool => write!(f, "COGNITO_USER_POOL"),
            IntegrationType::Event => write!(f, "EVENT"),
            IntegrationType::FileScanner => write!(f, "FILE_SCANNER"),
            IntegrationType::PinpointApp => write!(f, "PINPOINT_APP"),
            IntegrationType::QMessageTemplates => write!(f, "Q_MESSAGE_TEMPLATES"),
            IntegrationType::SesIdentity => write!(f, "SES_IDENTITY"),
            IntegrationType::VoiceId => write!(f, "VOICE_ID"),
            IntegrationType::WisdomAssistant => write!(f, "WISDOM_ASSISTANT"),
            IntegrationType::WisdomKnowledgeBase => write!(f, "WISDOM_KNOWLEDGE_BASE"),
            IntegrationType::WisdomQuickResponses => write!(f, "WISDOM_QUICK_RESPONSES"),
            IntegrationType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
