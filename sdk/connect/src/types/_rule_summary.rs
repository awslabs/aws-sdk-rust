// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of <code>ActionTypes</code> associated with a rule. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RuleSummary {
    /// <p>The name of the rule.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the rule.</p>
    #[doc(hidden)]
    pub rule_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    #[doc(hidden)]
    pub rule_arn: std::option::Option<std::string::String>,
    /// <p>The name of the event source.</p>
    #[doc(hidden)]
    pub event_source_name: std::option::Option<crate::types::EventSourceName>,
    /// <p>The publish status of the rule.</p>
    #[doc(hidden)]
    pub publish_status: std::option::Option<crate::types::RulePublishStatus>,
    /// <p>A list of ActionTypes associated with a rule. </p>
    #[doc(hidden)]
    pub action_summaries: std::option::Option<std::vec::Vec<crate::types::ActionSummary>>,
    /// <p>The timestamp for when the rule was created. </p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp for when the rule was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl RuleSummary {
    /// <p>The name of the rule.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A unique identifier for the rule.</p>
    pub fn rule_id(&self) -> std::option::Option<&str> {
        self.rule_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub fn rule_arn(&self) -> std::option::Option<&str> {
        self.rule_arn.as_deref()
    }
    /// <p>The name of the event source.</p>
    pub fn event_source_name(&self) -> std::option::Option<&crate::types::EventSourceName> {
        self.event_source_name.as_ref()
    }
    /// <p>The publish status of the rule.</p>
    pub fn publish_status(&self) -> std::option::Option<&crate::types::RulePublishStatus> {
        self.publish_status.as_ref()
    }
    /// <p>A list of ActionTypes associated with a rule. </p>
    pub fn action_summaries(&self) -> std::option::Option<&[crate::types::ActionSummary]> {
        self.action_summaries.as_deref()
    }
    /// <p>The timestamp for when the rule was created. </p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The timestamp for when the rule was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
}
impl RuleSummary {
    /// Creates a new builder-style object to manufacture [`RuleSummary`](crate::types::RuleSummary).
    pub fn builder() -> crate::types::builders::RuleSummaryBuilder {
        crate::types::builders::RuleSummaryBuilder::default()
    }
}

/// A builder for [`RuleSummary`](crate::types::RuleSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RuleSummaryBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) rule_id: std::option::Option<std::string::String>,
    pub(crate) rule_arn: std::option::Option<std::string::String>,
    pub(crate) event_source_name: std::option::Option<crate::types::EventSourceName>,
    pub(crate) publish_status: std::option::Option<crate::types::RulePublishStatus>,
    pub(crate) action_summaries: std::option::Option<std::vec::Vec<crate::types::ActionSummary>>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl RuleSummaryBuilder {
    /// <p>The name of the rule.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the rule.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A unique identifier for the rule.</p>
    pub fn rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the rule.</p>
    pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub fn rule_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub fn set_rule_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_arn = input;
        self
    }
    /// <p>The name of the event source.</p>
    pub fn event_source_name(mut self, input: crate::types::EventSourceName) -> Self {
        self.event_source_name = Some(input);
        self
    }
    /// <p>The name of the event source.</p>
    pub fn set_event_source_name(
        mut self,
        input: std::option::Option<crate::types::EventSourceName>,
    ) -> Self {
        self.event_source_name = input;
        self
    }
    /// <p>The publish status of the rule.</p>
    pub fn publish_status(mut self, input: crate::types::RulePublishStatus) -> Self {
        self.publish_status = Some(input);
        self
    }
    /// <p>The publish status of the rule.</p>
    pub fn set_publish_status(
        mut self,
        input: std::option::Option<crate::types::RulePublishStatus>,
    ) -> Self {
        self.publish_status = input;
        self
    }
    /// Appends an item to `action_summaries`.
    ///
    /// To override the contents of this collection use [`set_action_summaries`](Self::set_action_summaries).
    ///
    /// <p>A list of ActionTypes associated with a rule. </p>
    pub fn action_summaries(mut self, input: crate::types::ActionSummary) -> Self {
        let mut v = self.action_summaries.unwrap_or_default();
        v.push(input);
        self.action_summaries = Some(v);
        self
    }
    /// <p>A list of ActionTypes associated with a rule. </p>
    pub fn set_action_summaries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ActionSummary>>,
    ) -> Self {
        self.action_summaries = input;
        self
    }
    /// <p>The timestamp for when the rule was created. </p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The timestamp for when the rule was created. </p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The timestamp for when the rule was last updated.</p>
    pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = Some(input);
        self
    }
    /// <p>The timestamp for when the rule was last updated.</p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// Consumes the builder and constructs a [`RuleSummary`](crate::types::RuleSummary).
    pub fn build(self) -> crate::types::RuleSummary {
        crate::types::RuleSummary {
            name: self.name,
            rule_id: self.rule_id,
            rule_arn: self.rule_arn,
            event_source_name: self.event_source_name,
            publish_status: self.publish_status,
            action_summaries: self.action_summaries,
            created_time: self.created_time,
            last_updated_time: self.last_updated_time,
        }
    }
}
