// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of <code>ActionTypes</code> associated with a rule. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleSummary {
    /// <p>The name of the rule.</p>
    pub name: ::std::string::String,
    /// <p>A unique identifier for the rule.</p>
    pub rule_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub rule_arn: ::std::string::String,
    /// <p>The name of the event source.</p>
    pub event_source_name: crate::types::EventSourceName,
    /// <p>The publish status of the rule.</p>
    pub publish_status: crate::types::RulePublishStatus,
    /// <p>A list of ActionTypes associated with a rule. </p>
    pub action_summaries: ::std::vec::Vec<crate::types::ActionSummary>,
    /// <p>The timestamp for when the rule was created. </p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The timestamp for when the rule was last updated.</p>
    pub last_updated_time: ::aws_smithy_types::DateTime,
}
impl RuleSummary {
    /// <p>The name of the rule.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>A unique identifier for the rule.</p>
    pub fn rule_id(&self) -> &str {
        use std::ops::Deref;
        self.rule_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub fn rule_arn(&self) -> &str {
        use std::ops::Deref;
        self.rule_arn.deref()
    }
    /// <p>The name of the event source.</p>
    pub fn event_source_name(&self) -> &crate::types::EventSourceName {
        &self.event_source_name
    }
    /// <p>The publish status of the rule.</p>
    pub fn publish_status(&self) -> &crate::types::RulePublishStatus {
        &self.publish_status
    }
    /// <p>A list of ActionTypes associated with a rule. </p>
    pub fn action_summaries(&self) -> &[crate::types::ActionSummary] {
        use std::ops::Deref;
        self.action_summaries.deref()
    }
    /// <p>The timestamp for when the rule was created. </p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The timestamp for when the rule was last updated.</p>
    pub fn last_updated_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_time
    }
}
impl RuleSummary {
    /// Creates a new builder-style object to manufacture [`RuleSummary`](crate::types::RuleSummary).
    pub fn builder() -> crate::types::builders::RuleSummaryBuilder {
        crate::types::builders::RuleSummaryBuilder::default()
    }
}

/// A builder for [`RuleSummary`](crate::types::RuleSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RuleSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) rule_id: ::std::option::Option<::std::string::String>,
    pub(crate) rule_arn: ::std::option::Option<::std::string::String>,
    pub(crate) event_source_name: ::std::option::Option<crate::types::EventSourceName>,
    pub(crate) publish_status: ::std::option::Option<crate::types::RulePublishStatus>,
    pub(crate) action_summaries: ::std::option::Option<::std::vec::Vec<crate::types::ActionSummary>>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RuleSummaryBuilder {
    /// <p>The name of the rule.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the rule.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A unique identifier for the rule.</p>
    /// This field is required.
    pub fn rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the rule.</p>
    pub fn set_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// <p>A unique identifier for the rule.</p>
    pub fn get_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_id
    }
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    /// This field is required.
    pub fn rule_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub fn set_rule_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub fn get_rule_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_arn
    }
    /// <p>The name of the event source.</p>
    /// This field is required.
    pub fn event_source_name(mut self, input: crate::types::EventSourceName) -> Self {
        self.event_source_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the event source.</p>
    pub fn set_event_source_name(mut self, input: ::std::option::Option<crate::types::EventSourceName>) -> Self {
        self.event_source_name = input;
        self
    }
    /// <p>The name of the event source.</p>
    pub fn get_event_source_name(&self) -> &::std::option::Option<crate::types::EventSourceName> {
        &self.event_source_name
    }
    /// <p>The publish status of the rule.</p>
    /// This field is required.
    pub fn publish_status(mut self, input: crate::types::RulePublishStatus) -> Self {
        self.publish_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The publish status of the rule.</p>
    pub fn set_publish_status(mut self, input: ::std::option::Option<crate::types::RulePublishStatus>) -> Self {
        self.publish_status = input;
        self
    }
    /// <p>The publish status of the rule.</p>
    pub fn get_publish_status(&self) -> &::std::option::Option<crate::types::RulePublishStatus> {
        &self.publish_status
    }
    /// Appends an item to `action_summaries`.
    ///
    /// To override the contents of this collection use [`set_action_summaries`](Self::set_action_summaries).
    ///
    /// <p>A list of ActionTypes associated with a rule. </p>
    pub fn action_summaries(mut self, input: crate::types::ActionSummary) -> Self {
        let mut v = self.action_summaries.unwrap_or_default();
        v.push(input);
        self.action_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of ActionTypes associated with a rule. </p>
    pub fn set_action_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ActionSummary>>) -> Self {
        self.action_summaries = input;
        self
    }
    /// <p>A list of ActionTypes associated with a rule. </p>
    pub fn get_action_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ActionSummary>> {
        &self.action_summaries
    }
    /// <p>The timestamp for when the rule was created. </p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the rule was created. </p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The timestamp for when the rule was created. </p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The timestamp for when the rule was last updated.</p>
    /// This field is required.
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the rule was last updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The timestamp for when the rule was last updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// Consumes the builder and constructs a [`RuleSummary`](crate::types::RuleSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::RuleSummaryBuilder::name)
    /// - [`rule_id`](crate::types::builders::RuleSummaryBuilder::rule_id)
    /// - [`rule_arn`](crate::types::builders::RuleSummaryBuilder::rule_arn)
    /// - [`event_source_name`](crate::types::builders::RuleSummaryBuilder::event_source_name)
    /// - [`publish_status`](crate::types::builders::RuleSummaryBuilder::publish_status)
    /// - [`action_summaries`](crate::types::builders::RuleSummaryBuilder::action_summaries)
    /// - [`created_time`](crate::types::builders::RuleSummaryBuilder::created_time)
    /// - [`last_updated_time`](crate::types::builders::RuleSummaryBuilder::last_updated_time)
    pub fn build(self) -> ::std::result::Result<crate::types::RuleSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuleSummary {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building RuleSummary",
                )
            })?,
            rule_id: self.rule_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_id",
                    "rule_id was not specified but it is required when building RuleSummary",
                )
            })?,
            rule_arn: self.rule_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_arn",
                    "rule_arn was not specified but it is required when building RuleSummary",
                )
            })?,
            event_source_name: self.event_source_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_source_name",
                    "event_source_name was not specified but it is required when building RuleSummary",
                )
            })?,
            publish_status: self.publish_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "publish_status",
                    "publish_status was not specified but it is required when building RuleSummary",
                )
            })?,
            action_summaries: self.action_summaries.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_summaries",
                    "action_summaries was not specified but it is required when building RuleSummary",
                )
            })?,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building RuleSummary",
                )
            })?,
            last_updated_time: self.last_updated_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_time",
                    "last_updated_time was not specified but it is required when building RuleSummary",
                )
            })?,
        })
    }
}
