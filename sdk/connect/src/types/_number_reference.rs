// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a reference when the <code>referenceType</code> is <code>NUMBER</code>. Otherwise, null.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NumberReference {
    /// <p>Identifier of the number reference.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A valid number.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl NumberReference {
    /// <p>Identifier of the number reference.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A valid number.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl NumberReference {
    /// Creates a new builder-style object to manufacture [`NumberReference`](crate::types::NumberReference).
    pub fn builder() -> crate::types::builders::NumberReferenceBuilder {
        crate::types::builders::NumberReferenceBuilder::default()
    }
}

/// A builder for [`NumberReference`](crate::types::NumberReference).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NumberReferenceBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl NumberReferenceBuilder {
    /// <p>Identifier of the number reference.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Identifier of the number reference.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A valid number.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>A valid number.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`NumberReference`](crate::types::NumberReference).
    pub fn build(self) -> crate::types::NumberReference {
        crate::types::NumberReference {
            name: self.name,
            value: self.value,
        }
    }
}
