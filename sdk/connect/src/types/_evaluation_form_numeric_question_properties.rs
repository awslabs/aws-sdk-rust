// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about properties for a numeric question in an evaluation form.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EvaluationFormNumericQuestionProperties {
    /// <p>The minimum answer value.</p>
    pub min_value: i32,
    /// <p>The maximum answer value.</p>
    pub max_value: i32,
    /// <p>The scoring options of the numeric question.</p>
    pub options: ::std::option::Option<::std::vec::Vec<crate::types::EvaluationFormNumericQuestionOption>>,
    /// <p>The automation properties of the numeric question.</p>
    pub automation: ::std::option::Option<crate::types::EvaluationFormNumericQuestionAutomation>,
}
impl EvaluationFormNumericQuestionProperties {
    /// <p>The minimum answer value.</p>
    pub fn min_value(&self) -> i32 {
        self.min_value
    }
    /// <p>The maximum answer value.</p>
    pub fn max_value(&self) -> i32 {
        self.max_value
    }
    /// <p>The scoring options of the numeric question.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.options.is_none()`.
    pub fn options(&self) -> &[crate::types::EvaluationFormNumericQuestionOption] {
        self.options.as_deref().unwrap_or_default()
    }
    /// <p>The automation properties of the numeric question.</p>
    pub fn automation(&self) -> ::std::option::Option<&crate::types::EvaluationFormNumericQuestionAutomation> {
        self.automation.as_ref()
    }
}
impl EvaluationFormNumericQuestionProperties {
    /// Creates a new builder-style object to manufacture [`EvaluationFormNumericQuestionProperties`](crate::types::EvaluationFormNumericQuestionProperties).
    pub fn builder() -> crate::types::builders::EvaluationFormNumericQuestionPropertiesBuilder {
        crate::types::builders::EvaluationFormNumericQuestionPropertiesBuilder::default()
    }
}

/// A builder for [`EvaluationFormNumericQuestionProperties`](crate::types::EvaluationFormNumericQuestionProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EvaluationFormNumericQuestionPropertiesBuilder {
    pub(crate) min_value: ::std::option::Option<i32>,
    pub(crate) max_value: ::std::option::Option<i32>,
    pub(crate) options: ::std::option::Option<::std::vec::Vec<crate::types::EvaluationFormNumericQuestionOption>>,
    pub(crate) automation: ::std::option::Option<crate::types::EvaluationFormNumericQuestionAutomation>,
}
impl EvaluationFormNumericQuestionPropertiesBuilder {
    /// <p>The minimum answer value.</p>
    /// This field is required.
    pub fn min_value(mut self, input: i32) -> Self {
        self.min_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum answer value.</p>
    pub fn set_min_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_value = input;
        self
    }
    /// <p>The minimum answer value.</p>
    pub fn get_min_value(&self) -> &::std::option::Option<i32> {
        &self.min_value
    }
    /// <p>The maximum answer value.</p>
    /// This field is required.
    pub fn max_value(mut self, input: i32) -> Self {
        self.max_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum answer value.</p>
    pub fn set_max_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_value = input;
        self
    }
    /// <p>The maximum answer value.</p>
    pub fn get_max_value(&self) -> &::std::option::Option<i32> {
        &self.max_value
    }
    /// Appends an item to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>The scoring options of the numeric question.</p>
    pub fn options(mut self, input: crate::types::EvaluationFormNumericQuestionOption) -> Self {
        let mut v = self.options.unwrap_or_default();
        v.push(input);
        self.options = ::std::option::Option::Some(v);
        self
    }
    /// <p>The scoring options of the numeric question.</p>
    pub fn set_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EvaluationFormNumericQuestionOption>>) -> Self {
        self.options = input;
        self
    }
    /// <p>The scoring options of the numeric question.</p>
    pub fn get_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EvaluationFormNumericQuestionOption>> {
        &self.options
    }
    /// <p>The automation properties of the numeric question.</p>
    pub fn automation(mut self, input: crate::types::EvaluationFormNumericQuestionAutomation) -> Self {
        self.automation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The automation properties of the numeric question.</p>
    pub fn set_automation(mut self, input: ::std::option::Option<crate::types::EvaluationFormNumericQuestionAutomation>) -> Self {
        self.automation = input;
        self
    }
    /// <p>The automation properties of the numeric question.</p>
    pub fn get_automation(&self) -> &::std::option::Option<crate::types::EvaluationFormNumericQuestionAutomation> {
        &self.automation
    }
    /// Consumes the builder and constructs a [`EvaluationFormNumericQuestionProperties`](crate::types::EvaluationFormNumericQuestionProperties).
    pub fn build(self) -> crate::types::EvaluationFormNumericQuestionProperties {
        crate::types::EvaluationFormNumericQuestionProperties {
            min_value: self.min_value.unwrap_or_default(),
            max_value: self.max_value.unwrap_or_default(),
            options: self.options,
            automation: self.automation,
        }
    }
}
