// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filters to be applied to search results.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityProfilesSearchFilter {
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where: </p>
    /// <ul>
    /// <li> <p>Top level list specifies conditions that need to be applied with <code>OR</code> operator</p> </li>
    /// <li> <p>Inner list specifies conditions that need to be applied with <code>AND</code> operator.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub tag_filter: std::option::Option<crate::types::ControlPlaneTagFilter>,
}
impl SecurityProfilesSearchFilter {
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where: </p>
    /// <ul>
    /// <li> <p>Top level list specifies conditions that need to be applied with <code>OR</code> operator</p> </li>
    /// <li> <p>Inner list specifies conditions that need to be applied with <code>AND</code> operator.</p> </li>
    /// </ul>
    pub fn tag_filter(&self) -> std::option::Option<&crate::types::ControlPlaneTagFilter> {
        self.tag_filter.as_ref()
    }
}
impl SecurityProfilesSearchFilter {
    /// Creates a new builder-style object to manufacture [`SecurityProfilesSearchFilter`](crate::types::SecurityProfilesSearchFilter).
    pub fn builder() -> crate::types::builders::SecurityProfilesSearchFilterBuilder {
        crate::types::builders::SecurityProfilesSearchFilterBuilder::default()
    }
}

/// A builder for [`SecurityProfilesSearchFilter`](crate::types::SecurityProfilesSearchFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SecurityProfilesSearchFilterBuilder {
    pub(crate) tag_filter: std::option::Option<crate::types::ControlPlaneTagFilter>,
}
impl SecurityProfilesSearchFilterBuilder {
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where: </p>
    /// <ul>
    /// <li> <p>Top level list specifies conditions that need to be applied with <code>OR</code> operator</p> </li>
    /// <li> <p>Inner list specifies conditions that need to be applied with <code>AND</code> operator.</p> </li>
    /// </ul>
    pub fn tag_filter(mut self, input: crate::types::ControlPlaneTagFilter) -> Self {
        self.tag_filter = Some(input);
        self
    }
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where: </p>
    /// <ul>
    /// <li> <p>Top level list specifies conditions that need to be applied with <code>OR</code> operator</p> </li>
    /// <li> <p>Inner list specifies conditions that need to be applied with <code>AND</code> operator.</p> </li>
    /// </ul>
    pub fn set_tag_filter(
        mut self,
        input: std::option::Option<crate::types::ControlPlaneTagFilter>,
    ) -> Self {
        self.tag_filter = input;
        self
    }
    /// Consumes the builder and constructs a [`SecurityProfilesSearchFilter`](crate::types::SecurityProfilesSearchFilter).
    pub fn build(self) -> crate::types::SecurityProfilesSearchFilter {
        crate::types::SecurityProfilesSearchFilter {
            tag_filter: self.tag_filter,
        }
    }
}
