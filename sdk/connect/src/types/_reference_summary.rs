// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains summary information about a reference. <code>ReferenceSummary</code> contains only one non null field between the URL and attachment based on the reference type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum ReferenceSummary {
    /// <p>Information about the reference when the <code>referenceType</code> is <code>ATTACHMENT</code>. Otherwise, null.</p>
    Attachment(crate::types::AttachmentReference),
    /// <p>Information about a reference when the <code>referenceType</code> is <code>DATE</code>. Otherwise, null.</p>
    Date(crate::types::DateReference),
    /// <p>Information about a reference when the <code>referenceType</code> is <code>EMAIL</code>. Otherwise, null.</p>
    Email(crate::types::EmailReference),
    /// <p>Information about a reference when the <code>referenceType</code> is <code>NUMBER</code>. Otherwise, null.</p>
    Number(crate::types::NumberReference),
    /// <p>Information about a reference when the <code>referenceType</code> is <code>STRING</code>. Otherwise, null.</p>
    String(crate::types::StringReference),
    /// <p>Information about the reference when the <code>referenceType</code> is <code>URL</code>. Otherwise, null.</p>
    Url(crate::types::UrlReference),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ReferenceSummary {
    /// Tries to convert the enum instance into [`Attachment`](crate::types::ReferenceSummary::Attachment), extracting the inner [`AttachmentReference`](crate::types::AttachmentReference).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_attachment(&self) -> std::result::Result<&crate::types::AttachmentReference, &Self> {
        if let ReferenceSummary::Attachment(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Attachment`](crate::types::ReferenceSummary::Attachment).
    pub fn is_attachment(&self) -> bool {
        self.as_attachment().is_ok()
    }
    /// Tries to convert the enum instance into [`Date`](crate::types::ReferenceSummary::Date), extracting the inner [`DateReference`](crate::types::DateReference).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_date(&self) -> std::result::Result<&crate::types::DateReference, &Self> {
        if let ReferenceSummary::Date(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Date`](crate::types::ReferenceSummary::Date).
    pub fn is_date(&self) -> bool {
        self.as_date().is_ok()
    }
    /// Tries to convert the enum instance into [`Email`](crate::types::ReferenceSummary::Email), extracting the inner [`EmailReference`](crate::types::EmailReference).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_email(&self) -> std::result::Result<&crate::types::EmailReference, &Self> {
        if let ReferenceSummary::Email(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Email`](crate::types::ReferenceSummary::Email).
    pub fn is_email(&self) -> bool {
        self.as_email().is_ok()
    }
    /// Tries to convert the enum instance into [`Number`](crate::types::ReferenceSummary::Number), extracting the inner [`NumberReference`](crate::types::NumberReference).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_number(&self) -> std::result::Result<&crate::types::NumberReference, &Self> {
        if let ReferenceSummary::Number(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Number`](crate::types::ReferenceSummary::Number).
    pub fn is_number(&self) -> bool {
        self.as_number().is_ok()
    }
    /// Tries to convert the enum instance into [`String`](crate::types::ReferenceSummary::String), extracting the inner [`StringReference`](crate::types::StringReference).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string(&self) -> std::result::Result<&crate::types::StringReference, &Self> {
        if let ReferenceSummary::String(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`String`](crate::types::ReferenceSummary::String).
    pub fn is_string(&self) -> bool {
        self.as_string().is_ok()
    }
    /// Tries to convert the enum instance into [`Url`](crate::types::ReferenceSummary::Url), extracting the inner [`UrlReference`](crate::types::UrlReference).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_url(&self) -> std::result::Result<&crate::types::UrlReference, &Self> {
        if let ReferenceSummary::Url(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Url`](crate::types::ReferenceSummary::Url).
    pub fn is_url(&self) -> bool {
        self.as_url().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
