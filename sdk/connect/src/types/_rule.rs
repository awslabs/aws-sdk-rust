// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a rule.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Rule {
    /// <p>The name of the rule.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the rule.</p>
    #[doc(hidden)]
    pub rule_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    #[doc(hidden)]
    pub rule_arn: std::option::Option<std::string::String>,
    /// <p>The event source to trigger the rule.</p>
    #[doc(hidden)]
    pub trigger_event_source: std::option::Option<crate::types::RuleTriggerEventSource>,
    /// <p>The conditions of the rule.</p>
    #[doc(hidden)]
    pub function: std::option::Option<std::string::String>,
    /// <p>A list of actions to be run when the rule is triggered.</p>
    #[doc(hidden)]
    pub actions: std::option::Option<std::vec::Vec<crate::types::RuleAction>>,
    /// <p>The publish status of the rule.</p>
    #[doc(hidden)]
    pub publish_status: std::option::Option<crate::types::RulePublishStatus>,
    /// <p>The timestamp for when the rule was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp for the when the rule was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the rule.</p>
    #[doc(hidden)]
    pub last_updated_by: std::option::Option<std::string::String>,
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl Rule {
    /// <p>The name of the rule.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A unique identifier for the rule.</p>
    pub fn rule_id(&self) -> std::option::Option<&str> {
        self.rule_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub fn rule_arn(&self) -> std::option::Option<&str> {
        self.rule_arn.as_deref()
    }
    /// <p>The event source to trigger the rule.</p>
    pub fn trigger_event_source(
        &self,
    ) -> std::option::Option<&crate::types::RuleTriggerEventSource> {
        self.trigger_event_source.as_ref()
    }
    /// <p>The conditions of the rule.</p>
    pub fn function(&self) -> std::option::Option<&str> {
        self.function.as_deref()
    }
    /// <p>A list of actions to be run when the rule is triggered.</p>
    pub fn actions(&self) -> std::option::Option<&[crate::types::RuleAction]> {
        self.actions.as_deref()
    }
    /// <p>The publish status of the rule.</p>
    pub fn publish_status(&self) -> std::option::Option<&crate::types::RulePublishStatus> {
        self.publish_status.as_ref()
    }
    /// <p>The timestamp for when the rule was created.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The timestamp for the when the rule was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the rule.</p>
    pub fn last_updated_by(&self) -> std::option::Option<&str> {
        self.last_updated_by.as_deref()
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl Rule {
    /// Creates a new builder-style object to manufacture [`Rule`](crate::types::Rule).
    pub fn builder() -> crate::types::builders::RuleBuilder {
        crate::types::builders::RuleBuilder::default()
    }
}

/// A builder for [`Rule`](crate::types::Rule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RuleBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) rule_id: std::option::Option<std::string::String>,
    pub(crate) rule_arn: std::option::Option<std::string::String>,
    pub(crate) trigger_event_source: std::option::Option<crate::types::RuleTriggerEventSource>,
    pub(crate) function: std::option::Option<std::string::String>,
    pub(crate) actions: std::option::Option<std::vec::Vec<crate::types::RuleAction>>,
    pub(crate) publish_status: std::option::Option<crate::types::RulePublishStatus>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_by: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl RuleBuilder {
    /// <p>The name of the rule.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the rule.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A unique identifier for the rule.</p>
    pub fn rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the rule.</p>
    pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub fn rule_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub fn set_rule_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_arn = input;
        self
    }
    /// <p>The event source to trigger the rule.</p>
    pub fn trigger_event_source(mut self, input: crate::types::RuleTriggerEventSource) -> Self {
        self.trigger_event_source = Some(input);
        self
    }
    /// <p>The event source to trigger the rule.</p>
    pub fn set_trigger_event_source(
        mut self,
        input: std::option::Option<crate::types::RuleTriggerEventSource>,
    ) -> Self {
        self.trigger_event_source = input;
        self
    }
    /// <p>The conditions of the rule.</p>
    pub fn function(mut self, input: impl Into<std::string::String>) -> Self {
        self.function = Some(input.into());
        self
    }
    /// <p>The conditions of the rule.</p>
    pub fn set_function(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.function = input;
        self
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>A list of actions to be run when the rule is triggered.</p>
    pub fn actions(mut self, input: crate::types::RuleAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = Some(v);
        self
    }
    /// <p>A list of actions to be run when the rule is triggered.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RuleAction>>,
    ) -> Self {
        self.actions = input;
        self
    }
    /// <p>The publish status of the rule.</p>
    pub fn publish_status(mut self, input: crate::types::RulePublishStatus) -> Self {
        self.publish_status = Some(input);
        self
    }
    /// <p>The publish status of the rule.</p>
    pub fn set_publish_status(
        mut self,
        input: std::option::Option<crate::types::RulePublishStatus>,
    ) -> Self {
        self.publish_status = input;
        self
    }
    /// <p>The timestamp for when the rule was created.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The timestamp for when the rule was created.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The timestamp for the when the rule was last updated.</p>
    pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = Some(input);
        self
    }
    /// <p>The timestamp for the when the rule was last updated.</p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the rule.</p>
    pub fn last_updated_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_updated_by = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user who last updated the rule.</p>
    pub fn set_last_updated_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_updated_by = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`Rule`](crate::types::Rule).
    pub fn build(self) -> crate::types::Rule {
        crate::types::Rule {
            name: self.name,
            rule_id: self.rule_id,
            rule_arn: self.rule_arn,
            trigger_event_source: self.trigger_event_source,
            function: self.function,
            actions: self.actions,
            publish_status: self.publish_status,
            created_time: self.created_time,
            last_updated_time: self.last_updated_time,
            last_updated_by: self.last_updated_by,
            tags: self.tags,
        }
    }
}
