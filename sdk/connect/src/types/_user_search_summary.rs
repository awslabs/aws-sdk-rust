// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the returned users.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserSearchSummary {
    /// <p>The Amazon Resource Name (ARN) of the user.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The directory identifier of the user.</p>
    pub directory_user_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the user's hierarchy group.</p>
    pub hierarchy_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the user's summary.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The user's first name and last name.</p>
    pub identity_info: ::std::option::Option<crate::types::UserIdentityInfoLite>,
    /// <p>Contains information about the phone configuration settings for a user.</p>
    pub phone_config: ::std::option::Option<crate::types::UserPhoneConfig>,
    /// <p>The identifier of the user's routing profile.</p>
    pub routing_profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifiers of the user's security profiles.</p>
    pub security_profile_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The name of the user.</p>
    pub username: ::std::option::Option<::std::string::String>,
}
impl UserSearchSummary {
    /// <p>The Amazon Resource Name (ARN) of the user.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The directory identifier of the user.</p>
    pub fn directory_user_id(&self) -> ::std::option::Option<&str> {
        self.directory_user_id.as_deref()
    }
    /// <p>The identifier of the user's hierarchy group.</p>
    pub fn hierarchy_group_id(&self) -> ::std::option::Option<&str> {
        self.hierarchy_group_id.as_deref()
    }
    /// <p>The identifier of the user's summary.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The user's first name and last name.</p>
    pub fn identity_info(&self) -> ::std::option::Option<&crate::types::UserIdentityInfoLite> {
        self.identity_info.as_ref()
    }
    /// <p>Contains information about the phone configuration settings for a user.</p>
    pub fn phone_config(&self) -> ::std::option::Option<&crate::types::UserPhoneConfig> {
        self.phone_config.as_ref()
    }
    /// <p>The identifier of the user's routing profile.</p>
    pub fn routing_profile_id(&self) -> ::std::option::Option<&str> {
        self.routing_profile_id.as_deref()
    }
    /// <p>The identifiers of the user's security profiles.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_profile_ids.is_none()`.
    pub fn security_profile_ids(&self) -> &[::std::string::String] {
        self.security_profile_ids.as_deref().unwrap_or_default()
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The name of the user.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
}
impl UserSearchSummary {
    /// Creates a new builder-style object to manufacture [`UserSearchSummary`](crate::types::UserSearchSummary).
    pub fn builder() -> crate::types::builders::UserSearchSummaryBuilder {
        crate::types::builders::UserSearchSummaryBuilder::default()
    }
}

/// A builder for [`UserSearchSummary`](crate::types::UserSearchSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserSearchSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) directory_user_id: ::std::option::Option<::std::string::String>,
    pub(crate) hierarchy_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) identity_info: ::std::option::Option<crate::types::UserIdentityInfoLite>,
    pub(crate) phone_config: ::std::option::Option<crate::types::UserPhoneConfig>,
    pub(crate) routing_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) security_profile_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
}
impl UserSearchSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the user.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The directory identifier of the user.</p>
    pub fn directory_user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The directory identifier of the user.</p>
    pub fn set_directory_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_user_id = input;
        self
    }
    /// <p>The directory identifier of the user.</p>
    pub fn get_directory_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_user_id
    }
    /// <p>The identifier of the user's hierarchy group.</p>
    pub fn hierarchy_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hierarchy_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user's hierarchy group.</p>
    pub fn set_hierarchy_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hierarchy_group_id = input;
        self
    }
    /// <p>The identifier of the user's hierarchy group.</p>
    pub fn get_hierarchy_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.hierarchy_group_id
    }
    /// <p>The identifier of the user's summary.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user's summary.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the user's summary.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The user's first name and last name.</p>
    pub fn identity_info(mut self, input: crate::types::UserIdentityInfoLite) -> Self {
        self.identity_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>The user's first name and last name.</p>
    pub fn set_identity_info(mut self, input: ::std::option::Option<crate::types::UserIdentityInfoLite>) -> Self {
        self.identity_info = input;
        self
    }
    /// <p>The user's first name and last name.</p>
    pub fn get_identity_info(&self) -> &::std::option::Option<crate::types::UserIdentityInfoLite> {
        &self.identity_info
    }
    /// <p>Contains information about the phone configuration settings for a user.</p>
    pub fn phone_config(mut self, input: crate::types::UserPhoneConfig) -> Self {
        self.phone_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the phone configuration settings for a user.</p>
    pub fn set_phone_config(mut self, input: ::std::option::Option<crate::types::UserPhoneConfig>) -> Self {
        self.phone_config = input;
        self
    }
    /// <p>Contains information about the phone configuration settings for a user.</p>
    pub fn get_phone_config(&self) -> &::std::option::Option<crate::types::UserPhoneConfig> {
        &self.phone_config
    }
    /// <p>The identifier of the user's routing profile.</p>
    pub fn routing_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.routing_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user's routing profile.</p>
    pub fn set_routing_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.routing_profile_id = input;
        self
    }
    /// <p>The identifier of the user's routing profile.</p>
    pub fn get_routing_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.routing_profile_id
    }
    /// Appends an item to `security_profile_ids`.
    ///
    /// To override the contents of this collection use [`set_security_profile_ids`](Self::set_security_profile_ids).
    ///
    /// <p>The identifiers of the user's security profiles.</p>
    pub fn security_profile_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_profile_ids.unwrap_or_default();
        v.push(input.into());
        self.security_profile_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifiers of the user's security profiles.</p>
    pub fn set_security_profile_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_profile_ids = input;
        self
    }
    /// <p>The identifiers of the user's security profiles.</p>
    pub fn get_security_profile_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_profile_ids
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The name of the user.</p>
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The name of the user.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// Consumes the builder and constructs a [`UserSearchSummary`](crate::types::UserSearchSummary).
    pub fn build(self) -> crate::types::UserSearchSummary {
        crate::types::UserSearchSummary {
            arn: self.arn,
            directory_user_id: self.directory_user_id,
            hierarchy_group_id: self.hierarchy_group_id,
            id: self.id,
            identity_info: self.identity_info,
            phone_config: self.phone_config,
            routing_profile_id: self.routing_profile_id,
            security_profile_ids: self.security_profile_ids,
            tags: self.tags,
            username: self.username,
        }
    }
}
