// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A leaf node condition which can be used to specify a tag condition, for example, <code>HAVE BPO = 123</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagCondition {
    /// <p>The tag key in the tag condition.</p>
    #[doc(hidden)]
    pub tag_key: std::option::Option<std::string::String>,
    /// <p>The tag value in the tag condition.</p>
    #[doc(hidden)]
    pub tag_value: std::option::Option<std::string::String>,
}
impl TagCondition {
    /// <p>The tag key in the tag condition.</p>
    pub fn tag_key(&self) -> std::option::Option<&str> {
        self.tag_key.as_deref()
    }
    /// <p>The tag value in the tag condition.</p>
    pub fn tag_value(&self) -> std::option::Option<&str> {
        self.tag_value.as_deref()
    }
}
impl TagCondition {
    /// Creates a new builder-style object to manufacture [`TagCondition`](crate::types::TagCondition).
    pub fn builder() -> crate::types::builders::TagConditionBuilder {
        crate::types::builders::TagConditionBuilder::default()
    }
}

/// A builder for [`TagCondition`](crate::types::TagCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TagConditionBuilder {
    pub(crate) tag_key: std::option::Option<std::string::String>,
    pub(crate) tag_value: std::option::Option<std::string::String>,
}
impl TagConditionBuilder {
    /// <p>The tag key in the tag condition.</p>
    pub fn tag_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.tag_key = Some(input.into());
        self
    }
    /// <p>The tag key in the tag condition.</p>
    pub fn set_tag_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tag_key = input;
        self
    }
    /// <p>The tag value in the tag condition.</p>
    pub fn tag_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.tag_value = Some(input.into());
        self
    }
    /// <p>The tag value in the tag condition.</p>
    pub fn set_tag_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tag_value = input;
        self
    }
    /// Consumes the builder and constructs a [`TagCondition`](crate::types::TagCondition).
    pub fn build(self) -> crate::types::TagCondition {
        crate::types::TagCondition {
            tag_key: self.tag_key,
            tag_value: self.tag_value,
        }
    }
}
