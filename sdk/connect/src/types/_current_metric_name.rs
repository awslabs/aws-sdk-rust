// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `CurrentMetricName`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let currentmetricname = unimplemented!();
/// match currentmetricname {
///     CurrentMetricName::AgentsAfterContactWork => { /* ... */ },
///     CurrentMetricName::AgentsAvailable => { /* ... */ },
///     CurrentMetricName::AgentsError => { /* ... */ },
///     CurrentMetricName::AgentsNonProductive => { /* ... */ },
///     CurrentMetricName::AgentsOnline => { /* ... */ },
///     CurrentMetricName::AgentsOnCall => { /* ... */ },
///     CurrentMetricName::AgentsOnContact => { /* ... */ },
///     CurrentMetricName::AgentsStaffed => { /* ... */ },
///     CurrentMetricName::ContactsInQueue => { /* ... */ },
///     CurrentMetricName::ContactsScheduled => { /* ... */ },
///     CurrentMetricName::OldestContactAge => { /* ... */ },
///     CurrentMetricName::SlotsActive => { /* ... */ },
///     CurrentMetricName::SlotsAvailable => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `currentmetricname` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `CurrentMetricName::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `CurrentMetricName::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `CurrentMetricName::NewFeature` is defined.
/// Specifically, when `currentmetricname` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `CurrentMetricName::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// <p>The current metric names.</p>
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CurrentMetricName {
    #[allow(missing_docs)] // documentation missing in model
    AgentsAfterContactWork,
    #[allow(missing_docs)] // documentation missing in model
    AgentsAvailable,
    #[allow(missing_docs)] // documentation missing in model
    AgentsError,
    #[allow(missing_docs)] // documentation missing in model
    AgentsNonProductive,
    #[allow(missing_docs)] // documentation missing in model
    AgentsOnline,
    #[allow(missing_docs)] // documentation missing in model
    AgentsOnCall,
    #[allow(missing_docs)] // documentation missing in model
    AgentsOnContact,
    #[allow(missing_docs)] // documentation missing in model
    AgentsStaffed,
    #[allow(missing_docs)] // documentation missing in model
    ContactsInQueue,
    #[allow(missing_docs)] // documentation missing in model
    ContactsScheduled,
    #[allow(missing_docs)] // documentation missing in model
    OldestContactAge,
    #[allow(missing_docs)] // documentation missing in model
    SlotsActive,
    #[allow(missing_docs)] // documentation missing in model
    SlotsAvailable,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for CurrentMetricName {
    fn from(s: &str) -> Self {
        match s {
            "AGENTS_AFTER_CONTACT_WORK" => CurrentMetricName::AgentsAfterContactWork,
            "AGENTS_AVAILABLE" => CurrentMetricName::AgentsAvailable,
            "AGENTS_ERROR" => CurrentMetricName::AgentsError,
            "AGENTS_NON_PRODUCTIVE" => CurrentMetricName::AgentsNonProductive,
            "AGENTS_ONLINE" => CurrentMetricName::AgentsOnline,
            "AGENTS_ON_CALL" => CurrentMetricName::AgentsOnCall,
            "AGENTS_ON_CONTACT" => CurrentMetricName::AgentsOnContact,
            "AGENTS_STAFFED" => CurrentMetricName::AgentsStaffed,
            "CONTACTS_IN_QUEUE" => CurrentMetricName::ContactsInQueue,
            "CONTACTS_SCHEDULED" => CurrentMetricName::ContactsScheduled,
            "OLDEST_CONTACT_AGE" => CurrentMetricName::OldestContactAge,
            "SLOTS_ACTIVE" => CurrentMetricName::SlotsActive,
            "SLOTS_AVAILABLE" => CurrentMetricName::SlotsAvailable,
            other => {
                CurrentMetricName::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for CurrentMetricName {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CurrentMetricName::from(s))
    }
}
impl CurrentMetricName {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            CurrentMetricName::AgentsAfterContactWork => "AGENTS_AFTER_CONTACT_WORK",
            CurrentMetricName::AgentsAvailable => "AGENTS_AVAILABLE",
            CurrentMetricName::AgentsError => "AGENTS_ERROR",
            CurrentMetricName::AgentsNonProductive => "AGENTS_NON_PRODUCTIVE",
            CurrentMetricName::AgentsOnline => "AGENTS_ONLINE",
            CurrentMetricName::AgentsOnCall => "AGENTS_ON_CALL",
            CurrentMetricName::AgentsOnContact => "AGENTS_ON_CONTACT",
            CurrentMetricName::AgentsStaffed => "AGENTS_STAFFED",
            CurrentMetricName::ContactsInQueue => "CONTACTS_IN_QUEUE",
            CurrentMetricName::ContactsScheduled => "CONTACTS_SCHEDULED",
            CurrentMetricName::OldestContactAge => "OLDEST_CONTACT_AGE",
            CurrentMetricName::SlotsActive => "SLOTS_ACTIVE",
            CurrentMetricName::SlotsAvailable => "SLOTS_AVAILABLE",
            CurrentMetricName::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AGENTS_AFTER_CONTACT_WORK",
            "AGENTS_AVAILABLE",
            "AGENTS_ERROR",
            "AGENTS_NON_PRODUCTIVE",
            "AGENTS_ONLINE",
            "AGENTS_ON_CALL",
            "AGENTS_ON_CONTACT",
            "AGENTS_STAFFED",
            "CONTACTS_IN_QUEUE",
            "CONTACTS_SCHEDULED",
            "OLDEST_CONTACT_AGE",
            "SLOTS_ACTIVE",
            "SLOTS_AVAILABLE",
        ]
    }
}
impl AsRef<str> for CurrentMetricName {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
