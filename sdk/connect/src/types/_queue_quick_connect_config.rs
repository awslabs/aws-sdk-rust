// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a queue for a quick connect. The flow must be of type Transfer to Queue.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueueQuickConnectConfig {
    /// <p>The identifier for the queue.</p>
    pub queue_id: ::std::string::String,
    /// <p>The identifier of the flow.</p>
    pub contact_flow_id: ::std::string::String,
}
impl QueueQuickConnectConfig {
    /// <p>The identifier for the queue.</p>
    pub fn queue_id(&self) -> &str {
        use std::ops::Deref;
        self.queue_id.deref()
    }
    /// <p>The identifier of the flow.</p>
    pub fn contact_flow_id(&self) -> &str {
        use std::ops::Deref;
        self.contact_flow_id.deref()
    }
}
impl QueueQuickConnectConfig {
    /// Creates a new builder-style object to manufacture [`QueueQuickConnectConfig`](crate::types::QueueQuickConnectConfig).
    pub fn builder() -> crate::types::builders::QueueQuickConnectConfigBuilder {
        crate::types::builders::QueueQuickConnectConfigBuilder::default()
    }
}

/// A builder for [`QueueQuickConnectConfig`](crate::types::QueueQuickConnectConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct QueueQuickConnectConfigBuilder {
    pub(crate) queue_id: ::std::option::Option<::std::string::String>,
    pub(crate) contact_flow_id: ::std::option::Option<::std::string::String>,
}
impl QueueQuickConnectConfigBuilder {
    /// <p>The identifier for the queue.</p>
    /// This field is required.
    pub fn queue_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.queue_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the queue.</p>
    pub fn set_queue_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.queue_id = input;
        self
    }
    /// <p>The identifier for the queue.</p>
    pub fn get_queue_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.queue_id
    }
    /// <p>The identifier of the flow.</p>
    /// This field is required.
    pub fn contact_flow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_flow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the flow.</p>
    pub fn set_contact_flow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_flow_id = input;
        self
    }
    /// <p>The identifier of the flow.</p>
    pub fn get_contact_flow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_flow_id
    }
    /// Consumes the builder and constructs a [`QueueQuickConnectConfig`](crate::types::QueueQuickConnectConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`queue_id`](crate::types::builders::QueueQuickConnectConfigBuilder::queue_id)
    /// - [`contact_flow_id`](crate::types::builders::QueueQuickConnectConfigBuilder::contact_flow_id)
    pub fn build(self) -> ::std::result::Result<crate::types::QueueQuickConnectConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QueueQuickConnectConfig {
            queue_id: self.queue_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "queue_id",
                    "queue_id was not specified but it is required when building QueueQuickConnectConfig",
                )
            })?,
            contact_flow_id: self.contact_flow_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "contact_flow_id",
                    "contact_flow_id was not specified but it is required when building QueueQuickConnectConfig",
                )
            })?,
        })
    }
}
