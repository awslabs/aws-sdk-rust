// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The search criteria to be used to return routing profiles.</p> <note>
/// <p>The <code>name</code> and <code>description</code> fields support "contains" queries with a minimum of 2 characters and a maximum of 25 characters. Any queries with character lengths outside of this range will throw invalid results. </p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RoutingProfileSearchCriteria {
    /// <p>A list of conditions which would be applied together with an OR condition.</p>
    #[doc(hidden)]
    pub or_conditions:
        std::option::Option<std::vec::Vec<crate::types::RoutingProfileSearchCriteria>>,
    /// <p>A list of conditions which would be applied together with an AND condition.</p>
    #[doc(hidden)]
    pub and_conditions:
        std::option::Option<std::vec::Vec<crate::types::RoutingProfileSearchCriteria>>,
    /// <p>A leaf node condition which can be used to specify a string condition. </p> <note>
    /// <p>The currently supported value for <code>FieldName</code>: <code>name</code> </p>
    /// </note>
    #[doc(hidden)]
    pub string_condition: std::option::Option<crate::types::StringCondition>,
}
impl RoutingProfileSearchCriteria {
    /// <p>A list of conditions which would be applied together with an OR condition.</p>
    pub fn or_conditions(
        &self,
    ) -> std::option::Option<&[crate::types::RoutingProfileSearchCriteria]> {
        self.or_conditions.as_deref()
    }
    /// <p>A list of conditions which would be applied together with an AND condition.</p>
    pub fn and_conditions(
        &self,
    ) -> std::option::Option<&[crate::types::RoutingProfileSearchCriteria]> {
        self.and_conditions.as_deref()
    }
    /// <p>A leaf node condition which can be used to specify a string condition. </p> <note>
    /// <p>The currently supported value for <code>FieldName</code>: <code>name</code> </p>
    /// </note>
    pub fn string_condition(&self) -> std::option::Option<&crate::types::StringCondition> {
        self.string_condition.as_ref()
    }
}
impl RoutingProfileSearchCriteria {
    /// Creates a new builder-style object to manufacture [`RoutingProfileSearchCriteria`](crate::types::RoutingProfileSearchCriteria).
    pub fn builder() -> crate::types::builders::RoutingProfileSearchCriteriaBuilder {
        crate::types::builders::RoutingProfileSearchCriteriaBuilder::default()
    }
}

/// A builder for [`RoutingProfileSearchCriteria`](crate::types::RoutingProfileSearchCriteria).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RoutingProfileSearchCriteriaBuilder {
    pub(crate) or_conditions:
        std::option::Option<std::vec::Vec<crate::types::RoutingProfileSearchCriteria>>,
    pub(crate) and_conditions:
        std::option::Option<std::vec::Vec<crate::types::RoutingProfileSearchCriteria>>,
    pub(crate) string_condition: std::option::Option<crate::types::StringCondition>,
}
impl RoutingProfileSearchCriteriaBuilder {
    /// Appends an item to `or_conditions`.
    ///
    /// To override the contents of this collection use [`set_or_conditions`](Self::set_or_conditions).
    ///
    /// <p>A list of conditions which would be applied together with an OR condition.</p>
    pub fn or_conditions(mut self, input: crate::types::RoutingProfileSearchCriteria) -> Self {
        let mut v = self.or_conditions.unwrap_or_default();
        v.push(input);
        self.or_conditions = Some(v);
        self
    }
    /// <p>A list of conditions which would be applied together with an OR condition.</p>
    pub fn set_or_conditions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RoutingProfileSearchCriteria>>,
    ) -> Self {
        self.or_conditions = input;
        self
    }
    /// Appends an item to `and_conditions`.
    ///
    /// To override the contents of this collection use [`set_and_conditions`](Self::set_and_conditions).
    ///
    /// <p>A list of conditions which would be applied together with an AND condition.</p>
    pub fn and_conditions(mut self, input: crate::types::RoutingProfileSearchCriteria) -> Self {
        let mut v = self.and_conditions.unwrap_or_default();
        v.push(input);
        self.and_conditions = Some(v);
        self
    }
    /// <p>A list of conditions which would be applied together with an AND condition.</p>
    pub fn set_and_conditions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RoutingProfileSearchCriteria>>,
    ) -> Self {
        self.and_conditions = input;
        self
    }
    /// <p>A leaf node condition which can be used to specify a string condition. </p> <note>
    /// <p>The currently supported value for <code>FieldName</code>: <code>name</code> </p>
    /// </note>
    pub fn string_condition(mut self, input: crate::types::StringCondition) -> Self {
        self.string_condition = Some(input);
        self
    }
    /// <p>A leaf node condition which can be used to specify a string condition. </p> <note>
    /// <p>The currently supported value for <code>FieldName</code>: <code>name</code> </p>
    /// </note>
    pub fn set_string_condition(
        mut self,
        input: std::option::Option<crate::types::StringCondition>,
    ) -> Self {
        self.string_condition = input;
        self
    }
    /// Consumes the builder and constructs a [`RoutingProfileSearchCriteria`](crate::types::RoutingProfileSearchCriteria).
    pub fn build(self) -> crate::types::RoutingProfileSearchCriteria {
        crate::types::RoutingProfileSearchCriteria {
            or_conditions: self.or_conditions,
            and_conditions: self.and_conditions,
            string_condition: self.string_condition,
        }
    }
}
