// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This API is in preview release for Amazon Connect and is subject to change. To request access to this API, contact Amazon Web ServicesSupport.</p>
/// <p>Information about an authentication profile. An authentication profile is a resource that stores the authentication settings for users in your contact center. You use authentication profiles to set up IP address range restrictions and session timeouts. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html">Set IP address restrictions or session timeouts</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthenticationProfile {
    /// <p>A unique identifier for the authentication profile.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the authentication profile.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name for the authentication profile.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description for the authentication profile.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A list of IP address range strings that are allowed to access the Amazon Connect instance. For more information about how to configure IP addresses, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-ip-based-ac">Configure IP address based access control</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub allowed_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of IP address range strings that are blocked from accessing the Amazon Connect instance. For more information about how to configure IP addresses, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-ip-based-ac">Configure IP address based access control</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub blocked_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Shows whether the authentication profile is the default authentication profile for the Amazon Connect instance. The default authentication profile applies to all agents in an Amazon Connect instance, unless overridden by another authentication profile.</p>
    pub is_default: bool,
    /// <p>The timestamp when the authentication profile was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the authentication profile was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon Web Services Region where the authentication profile was last modified.</p>
    pub last_modified_region: ::std::option::Option<::std::string::String>,
    /// <p>The short lived session duration configuration for users logged in to Amazon Connect, in minutes. This value determines the maximum possible time before an agent is authenticated. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-session-timeouts">Configure the session duration</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub periodic_session_duration: ::std::option::Option<i32>,
    /// <p>The long lived session duration for users logged in to Amazon Connect, in minutes. After this time period, users must log in again. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-session-timeouts">Configure the session duration</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub max_session_duration: ::std::option::Option<i32>,
}
impl AuthenticationProfile {
    /// <p>A unique identifier for the authentication profile.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the authentication profile.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name for the authentication profile.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description for the authentication profile.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of IP address range strings that are allowed to access the Amazon Connect instance. For more information about how to configure IP addresses, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-ip-based-ac">Configure IP address based access control</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_ips.is_none()`.
    pub fn allowed_ips(&self) -> &[::std::string::String] {
        self.allowed_ips.as_deref().unwrap_or_default()
    }
    /// <p>A list of IP address range strings that are blocked from accessing the Amazon Connect instance. For more information about how to configure IP addresses, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-ip-based-ac">Configure IP address based access control</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.blocked_ips.is_none()`.
    pub fn blocked_ips(&self) -> &[::std::string::String] {
        self.blocked_ips.as_deref().unwrap_or_default()
    }
    /// <p>Shows whether the authentication profile is the default authentication profile for the Amazon Connect instance. The default authentication profile applies to all agents in an Amazon Connect instance, unless overridden by another authentication profile.</p>
    pub fn is_default(&self) -> bool {
        self.is_default
    }
    /// <p>The timestamp when the authentication profile was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The timestamp when the authentication profile was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The Amazon Web Services Region where the authentication profile was last modified.</p>
    pub fn last_modified_region(&self) -> ::std::option::Option<&str> {
        self.last_modified_region.as_deref()
    }
    /// <p>The short lived session duration configuration for users logged in to Amazon Connect, in minutes. This value determines the maximum possible time before an agent is authenticated. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-session-timeouts">Configure the session duration</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn periodic_session_duration(&self) -> ::std::option::Option<i32> {
        self.periodic_session_duration
    }
    /// <p>The long lived session duration for users logged in to Amazon Connect, in minutes. After this time period, users must log in again. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-session-timeouts">Configure the session duration</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn max_session_duration(&self) -> ::std::option::Option<i32> {
        self.max_session_duration
    }
}
impl AuthenticationProfile {
    /// Creates a new builder-style object to manufacture [`AuthenticationProfile`](crate::types::AuthenticationProfile).
    pub fn builder() -> crate::types::builders::AuthenticationProfileBuilder {
        crate::types::builders::AuthenticationProfileBuilder::default()
    }
}

/// A builder for [`AuthenticationProfile`](crate::types::AuthenticationProfile).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuthenticationProfileBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) allowed_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) blocked_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) is_default: ::std::option::Option<bool>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_region: ::std::option::Option<::std::string::String>,
    pub(crate) periodic_session_duration: ::std::option::Option<i32>,
    pub(crate) max_session_duration: ::std::option::Option<i32>,
}
impl AuthenticationProfileBuilder {
    /// <p>A unique identifier for the authentication profile.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the authentication profile.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A unique identifier for the authentication profile.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) for the authentication profile.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the authentication profile.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the authentication profile.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name for the authentication profile.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the authentication profile.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for the authentication profile.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description for the authentication profile.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the authentication profile.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for the authentication profile.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `allowed_ips`.
    ///
    /// To override the contents of this collection use [`set_allowed_ips`](Self::set_allowed_ips).
    ///
    /// <p>A list of IP address range strings that are allowed to access the Amazon Connect instance. For more information about how to configure IP addresses, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-ip-based-ac">Configure IP address based access control</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn allowed_ips(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_ips.unwrap_or_default();
        v.push(input.into());
        self.allowed_ips = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of IP address range strings that are allowed to access the Amazon Connect instance. For more information about how to configure IP addresses, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-ip-based-ac">Configure IP address based access control</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn set_allowed_ips(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_ips = input;
        self
    }
    /// <p>A list of IP address range strings that are allowed to access the Amazon Connect instance. For more information about how to configure IP addresses, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-ip-based-ac">Configure IP address based access control</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn get_allowed_ips(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_ips
    }
    /// Appends an item to `blocked_ips`.
    ///
    /// To override the contents of this collection use [`set_blocked_ips`](Self::set_blocked_ips).
    ///
    /// <p>A list of IP address range strings that are blocked from accessing the Amazon Connect instance. For more information about how to configure IP addresses, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-ip-based-ac">Configure IP address based access control</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn blocked_ips(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.blocked_ips.unwrap_or_default();
        v.push(input.into());
        self.blocked_ips = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of IP address range strings that are blocked from accessing the Amazon Connect instance. For more information about how to configure IP addresses, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-ip-based-ac">Configure IP address based access control</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn set_blocked_ips(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.blocked_ips = input;
        self
    }
    /// <p>A list of IP address range strings that are blocked from accessing the Amazon Connect instance. For more information about how to configure IP addresses, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-ip-based-ac">Configure IP address based access control</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn get_blocked_ips(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.blocked_ips
    }
    /// <p>Shows whether the authentication profile is the default authentication profile for the Amazon Connect instance. The default authentication profile applies to all agents in an Amazon Connect instance, unless overridden by another authentication profile.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.is_default = ::std::option::Option::Some(input);
        self
    }
    /// <p>Shows whether the authentication profile is the default authentication profile for the Amazon Connect instance. The default authentication profile applies to all agents in an Amazon Connect instance, unless overridden by another authentication profile.</p>
    pub fn set_is_default(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_default = input;
        self
    }
    /// <p>Shows whether the authentication profile is the default authentication profile for the Amazon Connect instance. The default authentication profile applies to all agents in an Amazon Connect instance, unless overridden by another authentication profile.</p>
    pub fn get_is_default(&self) -> &::std::option::Option<bool> {
        &self.is_default
    }
    /// <p>The timestamp when the authentication profile was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the authentication profile was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The timestamp when the authentication profile was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The timestamp when the authentication profile was last modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the authentication profile was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The timestamp when the authentication profile was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The Amazon Web Services Region where the authentication profile was last modified.</p>
    pub fn last_modified_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_modified_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the authentication profile was last modified.</p>
    pub fn set_last_modified_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_modified_region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the authentication profile was last modified.</p>
    pub fn get_last_modified_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_modified_region
    }
    /// <p>The short lived session duration configuration for users logged in to Amazon Connect, in minutes. This value determines the maximum possible time before an agent is authenticated. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-session-timeouts">Configure the session duration</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn periodic_session_duration(mut self, input: i32) -> Self {
        self.periodic_session_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The short lived session duration configuration for users logged in to Amazon Connect, in minutes. This value determines the maximum possible time before an agent is authenticated. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-session-timeouts">Configure the session duration</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn set_periodic_session_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.periodic_session_duration = input;
        self
    }
    /// <p>The short lived session duration configuration for users logged in to Amazon Connect, in minutes. This value determines the maximum possible time before an agent is authenticated. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-session-timeouts">Configure the session duration</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn get_periodic_session_duration(&self) -> &::std::option::Option<i32> {
        &self.periodic_session_duration
    }
    /// <p>The long lived session duration for users logged in to Amazon Connect, in minutes. After this time period, users must log in again. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-session-timeouts">Configure the session duration</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn max_session_duration(mut self, input: i32) -> Self {
        self.max_session_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The long lived session duration for users logged in to Amazon Connect, in minutes. After this time period, users must log in again. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-session-timeouts">Configure the session duration</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn set_max_session_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_session_duration = input;
        self
    }
    /// <p>The long lived session duration for users logged in to Amazon Connect, in minutes. After this time period, users must log in again. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/authentication-profiles.html#configure-session-timeouts">Configure the session duration</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn get_max_session_duration(&self) -> &::std::option::Option<i32> {
        &self.max_session_duration
    }
    /// Consumes the builder and constructs a [`AuthenticationProfile`](crate::types::AuthenticationProfile).
    pub fn build(self) -> crate::types::AuthenticationProfile {
        crate::types::AuthenticationProfile {
            id: self.id,
            arn: self.arn,
            name: self.name,
            description: self.description,
            allowed_ips: self.allowed_ips,
            blocked_ips: self.blocked_ips,
            is_default: self.is_default.unwrap_or_default(),
            created_time: self.created_time,
            last_modified_time: self.last_modified_time,
            last_modified_region: self.last_modified_region,
            periodic_session_duration: self.periodic_session_duration,
            max_session_duration: self.max_session_duration,
        }
    }
}
