// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the property value used in automation of a numeric questions. Label values are associated with minimum and maximum values for the numeric question.</p>
/// <ul>
/// <li> <p>Sentiment scores have a minimum value of -5 and maximum value of 5.</p> </li>
/// <li> <p> Duration labels, such as <code>NON_TALK_TIME</code>, <code>CONTACT_DURATION</code>, <code>AGENT_INTERACTION_DURATION</code>, <code>CUSTOMER_HOLD_TIME</code> have a minimum value of 0 and maximum value of 28800.</p> </li>
/// <li> <p>Percentages have a minimum value of 0 and maximum value of 100. </p> </li>
/// <li> <p> <code>NUMBER_OF_INTERRUPTIONS</code> has a minimum value of 0 and maximum value of 1000.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NumericQuestionPropertyValueAutomation {
    /// <p>The property label of the automation.</p>
    pub label: crate::types::NumericQuestionPropertyAutomationLabel,
}
impl NumericQuestionPropertyValueAutomation {
    /// <p>The property label of the automation.</p>
    pub fn label(&self) -> &crate::types::NumericQuestionPropertyAutomationLabel {
        &self.label
    }
}
impl NumericQuestionPropertyValueAutomation {
    /// Creates a new builder-style object to manufacture [`NumericQuestionPropertyValueAutomation`](crate::types::NumericQuestionPropertyValueAutomation).
    pub fn builder() -> crate::types::builders::NumericQuestionPropertyValueAutomationBuilder {
        crate::types::builders::NumericQuestionPropertyValueAutomationBuilder::default()
    }
}

/// A builder for [`NumericQuestionPropertyValueAutomation`](crate::types::NumericQuestionPropertyValueAutomation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NumericQuestionPropertyValueAutomationBuilder {
    pub(crate) label: ::std::option::Option<crate::types::NumericQuestionPropertyAutomationLabel>,
}
impl NumericQuestionPropertyValueAutomationBuilder {
    /// <p>The property label of the automation.</p>
    /// This field is required.
    pub fn label(mut self, input: crate::types::NumericQuestionPropertyAutomationLabel) -> Self {
        self.label = ::std::option::Option::Some(input);
        self
    }
    /// <p>The property label of the automation.</p>
    pub fn set_label(mut self, input: ::std::option::Option<crate::types::NumericQuestionPropertyAutomationLabel>) -> Self {
        self.label = input;
        self
    }
    /// <p>The property label of the automation.</p>
    pub fn get_label(&self) -> &::std::option::Option<crate::types::NumericQuestionPropertyAutomationLabel> {
        &self.label
    }
    /// Consumes the builder and constructs a [`NumericQuestionPropertyValueAutomation`](crate::types::NumericQuestionPropertyValueAutomation).
    /// This method will fail if any of the following fields are not set:
    /// - [`label`](crate::types::builders::NumericQuestionPropertyValueAutomationBuilder::label)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::NumericQuestionPropertyValueAutomation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NumericQuestionPropertyValueAutomation {
            label: self.label.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "label",
                    "label was not specified but it is required when building NumericQuestionPropertyValueAutomation",
                )
            })?,
        })
    }
}
