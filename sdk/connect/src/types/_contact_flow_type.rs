// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ContactFlowType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let contactflowtype = unimplemented!();
/// match contactflowtype {
///     ContactFlowType::AgentHold => { /* ... */ },
///     ContactFlowType::AgentTransfer => { /* ... */ },
///     ContactFlowType::AgentWhisper => { /* ... */ },
///     ContactFlowType::ContactFlow => { /* ... */ },
///     ContactFlowType::CustomerHold => { /* ... */ },
///     ContactFlowType::CustomerQueue => { /* ... */ },
///     ContactFlowType::CustomerWhisper => { /* ... */ },
///     ContactFlowType::OutboundWhisper => { /* ... */ },
///     ContactFlowType::QueueTransfer => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `contactflowtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ContactFlowType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ContactFlowType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ContactFlowType::NewFeature` is defined.
/// Specifically, when `contactflowtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ContactFlowType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ContactFlowType {
    #[allow(missing_docs)] // documentation missing in model
    AgentHold,
    #[allow(missing_docs)] // documentation missing in model
    AgentTransfer,
    #[allow(missing_docs)] // documentation missing in model
    AgentWhisper,
    #[allow(missing_docs)] // documentation missing in model
    ContactFlow,
    #[allow(missing_docs)] // documentation missing in model
    CustomerHold,
    #[allow(missing_docs)] // documentation missing in model
    CustomerQueue,
    #[allow(missing_docs)] // documentation missing in model
    CustomerWhisper,
    #[allow(missing_docs)] // documentation missing in model
    OutboundWhisper,
    #[allow(missing_docs)] // documentation missing in model
    QueueTransfer,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ContactFlowType {
    fn from(s: &str) -> Self {
        match s {
            "AGENT_HOLD" => ContactFlowType::AgentHold,
            "AGENT_TRANSFER" => ContactFlowType::AgentTransfer,
            "AGENT_WHISPER" => ContactFlowType::AgentWhisper,
            "CONTACT_FLOW" => ContactFlowType::ContactFlow,
            "CUSTOMER_HOLD" => ContactFlowType::CustomerHold,
            "CUSTOMER_QUEUE" => ContactFlowType::CustomerQueue,
            "CUSTOMER_WHISPER" => ContactFlowType::CustomerWhisper,
            "OUTBOUND_WHISPER" => ContactFlowType::OutboundWhisper,
            "QUEUE_TRANSFER" => ContactFlowType::QueueTransfer,
            other => {
                ContactFlowType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for ContactFlowType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ContactFlowType::from(s))
    }
}
impl ContactFlowType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ContactFlowType::AgentHold => "AGENT_HOLD",
            ContactFlowType::AgentTransfer => "AGENT_TRANSFER",
            ContactFlowType::AgentWhisper => "AGENT_WHISPER",
            ContactFlowType::ContactFlow => "CONTACT_FLOW",
            ContactFlowType::CustomerHold => "CUSTOMER_HOLD",
            ContactFlowType::CustomerQueue => "CUSTOMER_QUEUE",
            ContactFlowType::CustomerWhisper => "CUSTOMER_WHISPER",
            ContactFlowType::OutboundWhisper => "OUTBOUND_WHISPER",
            ContactFlowType::QueueTransfer => "QUEUE_TRANSFER",
            ContactFlowType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AGENT_HOLD",
            "AGENT_TRANSFER",
            "AGENT_WHISPER",
            "CONTACT_FLOW",
            "CUSTOMER_HOLD",
            "CUSTOMER_QUEUE",
            "CUSTOMER_WHISPER",
            "OUTBOUND_WHISPER",
            "QUEUE_TRANSFER",
        ]
    }
}
impl AsRef<str> for ContactFlowType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
