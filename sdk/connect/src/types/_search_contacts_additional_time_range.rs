// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Time range that you <b>additionally</b> want to filter on.</p><note>
/// <p>This is different from the <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_SearchContactsTimeRange.html">SearchContactsTimeRange</a> data type.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchContactsAdditionalTimeRange {
    /// <p>List of criteria of the time range to additionally filter on.</p>
    pub criteria: ::std::vec::Vec<crate::types::SearchContactsAdditionalTimeRangeCriteria>,
    /// <p>The match type combining multiple time range filters.</p>
    pub match_type: crate::types::SearchContactsMatchType,
}
impl SearchContactsAdditionalTimeRange {
    /// <p>List of criteria of the time range to additionally filter on.</p>
    pub fn criteria(&self) -> &[crate::types::SearchContactsAdditionalTimeRangeCriteria] {
        use std::ops::Deref;
        self.criteria.deref()
    }
    /// <p>The match type combining multiple time range filters.</p>
    pub fn match_type(&self) -> &crate::types::SearchContactsMatchType {
        &self.match_type
    }
}
impl SearchContactsAdditionalTimeRange {
    /// Creates a new builder-style object to manufacture [`SearchContactsAdditionalTimeRange`](crate::types::SearchContactsAdditionalTimeRange).
    pub fn builder() -> crate::types::builders::SearchContactsAdditionalTimeRangeBuilder {
        crate::types::builders::SearchContactsAdditionalTimeRangeBuilder::default()
    }
}

/// A builder for [`SearchContactsAdditionalTimeRange`](crate::types::SearchContactsAdditionalTimeRange).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchContactsAdditionalTimeRangeBuilder {
    pub(crate) criteria: ::std::option::Option<::std::vec::Vec<crate::types::SearchContactsAdditionalTimeRangeCriteria>>,
    pub(crate) match_type: ::std::option::Option<crate::types::SearchContactsMatchType>,
}
impl SearchContactsAdditionalTimeRangeBuilder {
    /// Appends an item to `criteria`.
    ///
    /// To override the contents of this collection use [`set_criteria`](Self::set_criteria).
    ///
    /// <p>List of criteria of the time range to additionally filter on.</p>
    pub fn criteria(mut self, input: crate::types::SearchContactsAdditionalTimeRangeCriteria) -> Self {
        let mut v = self.criteria.unwrap_or_default();
        v.push(input);
        self.criteria = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of criteria of the time range to additionally filter on.</p>
    pub fn set_criteria(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SearchContactsAdditionalTimeRangeCriteria>>) -> Self {
        self.criteria = input;
        self
    }
    /// <p>List of criteria of the time range to additionally filter on.</p>
    pub fn get_criteria(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SearchContactsAdditionalTimeRangeCriteria>> {
        &self.criteria
    }
    /// <p>The match type combining multiple time range filters.</p>
    /// This field is required.
    pub fn match_type(mut self, input: crate::types::SearchContactsMatchType) -> Self {
        self.match_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The match type combining multiple time range filters.</p>
    pub fn set_match_type(mut self, input: ::std::option::Option<crate::types::SearchContactsMatchType>) -> Self {
        self.match_type = input;
        self
    }
    /// <p>The match type combining multiple time range filters.</p>
    pub fn get_match_type(&self) -> &::std::option::Option<crate::types::SearchContactsMatchType> {
        &self.match_type
    }
    /// Consumes the builder and constructs a [`SearchContactsAdditionalTimeRange`](crate::types::SearchContactsAdditionalTimeRange).
    /// This method will fail if any of the following fields are not set:
    /// - [`criteria`](crate::types::builders::SearchContactsAdditionalTimeRangeBuilder::criteria)
    /// - [`match_type`](crate::types::builders::SearchContactsAdditionalTimeRangeBuilder::match_type)
    pub fn build(self) -> ::std::result::Result<crate::types::SearchContactsAdditionalTimeRange, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchContactsAdditionalTimeRange {
            criteria: self.criteria.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "criteria",
                    "criteria was not specified but it is required when building SearchContactsAdditionalTimeRange",
                )
            })?,
            match_type: self.match_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "match_type",
                    "match_type was not specified but it is required when building SearchContactsAdditionalTimeRange",
                )
            })?,
        })
    }
}
