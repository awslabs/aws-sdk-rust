// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateRoutingProfile`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`instance_id(impl Into<String>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::instance_id) / [`set_instance_id(Option<String>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::set_instance_id): <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    ///   - [`name(impl Into<String>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::set_name): <p>The name of the routing profile. Must not be more than 127 characters.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::set_description): <p>Description of the routing profile. Must not be more than 250 characters.</p>
    ///   - [`default_outbound_queue_id(impl Into<String>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::default_outbound_queue_id) / [`set_default_outbound_queue_id(Option<String>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::set_default_outbound_queue_id): <p>The default outbound queue for the routing profile.</p>
    ///   - [`queue_configs(Vec<RoutingProfileQueueConfig>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::queue_configs) / [`set_queue_configs(Option<Vec<RoutingProfileQueueConfig>>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::set_queue_configs): <p>The inbound queues associated with the routing profile. If no queue is added, the agent can make only outbound calls.</p>
    ///   - [`media_concurrencies(Vec<MediaConcurrency>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::media_concurrencies) / [`set_media_concurrencies(Option<Vec<MediaConcurrency>>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::set_media_concurrencies): <p>The channels that agents can handle in the Contact Control Panel (CCP) for this routing profile.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::set_tags): <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    /// - On success, responds with [`CreateRoutingProfileOutput`](crate::operation::create_routing_profile::CreateRoutingProfileOutput) with field(s):
    ///   - [`routing_profile_arn(Option<String>)`](crate::operation::create_routing_profile::CreateRoutingProfileOutput::routing_profile_arn): <p>The Amazon Resource Name (ARN) of the routing profile.</p>
    ///   - [`routing_profile_id(Option<String>)`](crate::operation::create_routing_profile::CreateRoutingProfileOutput::routing_profile_id): <p>The identifier of the routing profile.</p>
    /// - On failure, responds with [`SdkError<CreateRoutingProfileError>`](crate::operation::create_routing_profile::CreateRoutingProfileError)
    pub fn create_routing_profile(
        &self,
    ) -> crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder {
        crate::operation::create_routing_profile::builders::CreateRoutingProfileFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
