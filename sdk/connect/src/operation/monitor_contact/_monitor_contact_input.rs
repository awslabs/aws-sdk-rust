// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitorContactInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the contact.</p>
    #[doc(hidden)]
    pub contact_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the user account.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>Specify which monitoring actions the user is allowed to take. For example, whether the user is allowed to escalate from silent monitoring to barge.</p>
    #[doc(hidden)]
    pub allowed_monitor_capabilities:
        std::option::Option<std::vec::Vec<crate::types::MonitorCapability>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl MonitorContactInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The identifier of the contact.</p>
    pub fn contact_id(&self) -> std::option::Option<&str> {
        self.contact_id.as_deref()
    }
    /// <p>The identifier of the user account.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>Specify which monitoring actions the user is allowed to take. For example, whether the user is allowed to escalate from silent monitoring to barge.</p>
    pub fn allowed_monitor_capabilities(
        &self,
    ) -> std::option::Option<&[crate::types::MonitorCapability]> {
        self.allowed_monitor_capabilities.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl MonitorContactInput {
    /// Creates a new builder-style object to manufacture [`MonitorContactInput`](crate::operation::monitor_contact::MonitorContactInput).
    pub fn builder() -> crate::operation::monitor_contact::builders::MonitorContactInputBuilder {
        crate::operation::monitor_contact::builders::MonitorContactInputBuilder::default()
    }
}

/// A builder for [`MonitorContactInput`](crate::operation::monitor_contact::MonitorContactInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitorContactInputBuilder {
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) contact_id: std::option::Option<std::string::String>,
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) allowed_monitor_capabilities:
        std::option::Option<std::vec::Vec<crate::types::MonitorCapability>>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl MonitorContactInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the contact.</p>
    pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_id = Some(input.into());
        self
    }
    /// <p>The identifier of the contact.</p>
    pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.contact_id = input;
        self
    }
    /// <p>The identifier of the user account.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The identifier of the user account.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// Appends an item to `allowed_monitor_capabilities`.
    ///
    /// To override the contents of this collection use [`set_allowed_monitor_capabilities`](Self::set_allowed_monitor_capabilities).
    ///
    /// <p>Specify which monitoring actions the user is allowed to take. For example, whether the user is allowed to escalate from silent monitoring to barge.</p>
    pub fn allowed_monitor_capabilities(mut self, input: crate::types::MonitorCapability) -> Self {
        let mut v = self.allowed_monitor_capabilities.unwrap_or_default();
        v.push(input);
        self.allowed_monitor_capabilities = Some(v);
        self
    }
    /// <p>Specify which monitoring actions the user is allowed to take. For example, whether the user is allowed to escalate from silent monitoring to barge.</p>
    pub fn set_allowed_monitor_capabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MonitorCapability>>,
    ) -> Self {
        self.allowed_monitor_capabilities = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`MonitorContactInput`](crate::operation::monitor_contact::MonitorContactInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::monitor_contact::MonitorContactInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::monitor_contact::MonitorContactInput {
            instance_id: self.instance_id,
            contact_id: self.contact_id,
            user_id: self.user_id,
            allowed_monitor_capabilities: self.allowed_monitor_capabilities,
            client_token: self.client_token,
        })
    }
}
