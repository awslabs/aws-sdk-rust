// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateViewMetadataInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the view. Both <code>ViewArn</code> and <code>ViewId</code> can be used.</p>
    pub view_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the view.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the view.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl UpdateViewMetadataInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The identifier of the view. Both <code>ViewArn</code> and <code>ViewId</code> can be used.</p>
    pub fn view_id(&self) -> ::std::option::Option<&str> {
        self.view_id.as_deref()
    }
    /// <p>The name of the view.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the view.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateViewMetadataInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateViewMetadataInput");
        formatter.field("instance_id", &self.instance_id);
        formatter.field("view_id", &self.view_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &self.description);
        formatter.finish()
    }
}
impl UpdateViewMetadataInput {
    /// Creates a new builder-style object to manufacture [`UpdateViewMetadataInput`](crate::operation::update_view_metadata::UpdateViewMetadataInput).
    pub fn builder() -> crate::operation::update_view_metadata::builders::UpdateViewMetadataInputBuilder {
        crate::operation::update_view_metadata::builders::UpdateViewMetadataInputBuilder::default()
    }
}

/// A builder for [`UpdateViewMetadataInput`](crate::operation::update_view_metadata::UpdateViewMetadataInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateViewMetadataInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) view_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl UpdateViewMetadataInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The identifier of the view. Both <code>ViewArn</code> and <code>ViewId</code> can be used.</p>
    /// This field is required.
    pub fn view_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.view_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the view. Both <code>ViewArn</code> and <code>ViewId</code> can be used.</p>
    pub fn set_view_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.view_id = input;
        self
    }
    /// <p>The identifier of the view. Both <code>ViewArn</code> and <code>ViewId</code> can be used.</p>
    pub fn get_view_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.view_id
    }
    /// <p>The name of the view.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the view.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the view.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the view.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the view.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the view.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`UpdateViewMetadataInput`](crate::operation::update_view_metadata::UpdateViewMetadataInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_view_metadata::UpdateViewMetadataInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_view_metadata::UpdateViewMetadataInput {
            instance_id: self.instance_id,
            view_id: self.view_id,
            name: self.name,
            description: self.description,
        })
    }
}
impl ::std::fmt::Debug for UpdateViewMetadataInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateViewMetadataInputBuilder");
        formatter.field("instance_id", &self.instance_id);
        formatter.field("view_id", &self.view_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &self.description);
        formatter.finish()
    }
}
