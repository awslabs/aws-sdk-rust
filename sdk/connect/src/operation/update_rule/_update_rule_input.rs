// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateRuleInput {
    /// <p>A unique identifier for the rule.</p>
    #[doc(hidden)]
    pub rule_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The name of the rule. You can change the name only if <code>TriggerEventSource</code> is one of the following values: <code>OnZendeskTicketCreate</code> | <code>OnZendeskTicketStatusUpdate</code> | <code>OnSalesforceCaseCreate</code> </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The conditions of the rule.</p>
    #[doc(hidden)]
    pub function: std::option::Option<std::string::String>,
    /// <p>A list of actions to be run when the rule is triggered.</p>
    #[doc(hidden)]
    pub actions: std::option::Option<std::vec::Vec<crate::types::RuleAction>>,
    /// <p>The publish status of the rule.</p>
    #[doc(hidden)]
    pub publish_status: std::option::Option<crate::types::RulePublishStatus>,
}
impl UpdateRuleInput {
    /// <p>A unique identifier for the rule.</p>
    pub fn rule_id(&self) -> std::option::Option<&str> {
        self.rule_id.as_deref()
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The name of the rule. You can change the name only if <code>TriggerEventSource</code> is one of the following values: <code>OnZendeskTicketCreate</code> | <code>OnZendeskTicketStatusUpdate</code> | <code>OnSalesforceCaseCreate</code> </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The conditions of the rule.</p>
    pub fn function(&self) -> std::option::Option<&str> {
        self.function.as_deref()
    }
    /// <p>A list of actions to be run when the rule is triggered.</p>
    pub fn actions(&self) -> std::option::Option<&[crate::types::RuleAction]> {
        self.actions.as_deref()
    }
    /// <p>The publish status of the rule.</p>
    pub fn publish_status(&self) -> std::option::Option<&crate::types::RulePublishStatus> {
        self.publish_status.as_ref()
    }
}
impl UpdateRuleInput {
    /// Creates a new builder-style object to manufacture [`UpdateRuleInput`](crate::operation::update_rule::UpdateRuleInput).
    pub fn builder() -> crate::operation::update_rule::builders::UpdateRuleInputBuilder {
        crate::operation::update_rule::builders::UpdateRuleInputBuilder::default()
    }
}

/// A builder for [`UpdateRuleInput`](crate::operation::update_rule::UpdateRuleInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateRuleInputBuilder {
    pub(crate) rule_id: std::option::Option<std::string::String>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) function: std::option::Option<std::string::String>,
    pub(crate) actions: std::option::Option<std::vec::Vec<crate::types::RuleAction>>,
    pub(crate) publish_status: std::option::Option<crate::types::RulePublishStatus>,
}
impl UpdateRuleInputBuilder {
    /// <p>A unique identifier for the rule.</p>
    pub fn rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the rule.</p>
    pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The name of the rule. You can change the name only if <code>TriggerEventSource</code> is one of the following values: <code>OnZendeskTicketCreate</code> | <code>OnZendeskTicketStatusUpdate</code> | <code>OnSalesforceCaseCreate</code> </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the rule. You can change the name only if <code>TriggerEventSource</code> is one of the following values: <code>OnZendeskTicketCreate</code> | <code>OnZendeskTicketStatusUpdate</code> | <code>OnSalesforceCaseCreate</code> </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The conditions of the rule.</p>
    pub fn function(mut self, input: impl Into<std::string::String>) -> Self {
        self.function = Some(input.into());
        self
    }
    /// <p>The conditions of the rule.</p>
    pub fn set_function(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.function = input;
        self
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>A list of actions to be run when the rule is triggered.</p>
    pub fn actions(mut self, input: crate::types::RuleAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = Some(v);
        self
    }
    /// <p>A list of actions to be run when the rule is triggered.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RuleAction>>,
    ) -> Self {
        self.actions = input;
        self
    }
    /// <p>The publish status of the rule.</p>
    pub fn publish_status(mut self, input: crate::types::RulePublishStatus) -> Self {
        self.publish_status = Some(input);
        self
    }
    /// <p>The publish status of the rule.</p>
    pub fn set_publish_status(
        mut self,
        input: std::option::Option<crate::types::RulePublishStatus>,
    ) -> Self {
        self.publish_status = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateRuleInput`](crate::operation::update_rule::UpdateRuleInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_rule::UpdateRuleInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_rule::UpdateRuleInput {
            rule_id: self.rule_id,
            instance_id: self.instance_id,
            name: self.name,
            function: self.function,
            actions: self.actions,
            publish_status: self.publish_status,
        })
    }
}
