// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_traffic_distribution_group::_describe_traffic_distribution_group_output::DescribeTrafficDistributionGroupOutputBuilder;

pub use crate::operation::describe_traffic_distribution_group::_describe_traffic_distribution_group_input::DescribeTrafficDistributionGroupInputBuilder;

impl DescribeTrafficDistributionGroupInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_traffic_distribution_group::DescribeTrafficDistributionGroupOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_traffic_distribution_group::DescribeTrafficDistributionGroupError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_traffic_distribution_group();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeTrafficDistributionGroup`.
///
/// <p>Gets details and status of a traffic distribution group.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeTrafficDistributionGroupFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_traffic_distribution_group::builders::DescribeTrafficDistributionGroupInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_traffic_distribution_group::DescribeTrafficDistributionGroupOutput,
        crate::operation::describe_traffic_distribution_group::DescribeTrafficDistributionGroupError,
    > for DescribeTrafficDistributionGroupFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_traffic_distribution_group::DescribeTrafficDistributionGroupOutput,
            crate::operation::describe_traffic_distribution_group::DescribeTrafficDistributionGroupError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeTrafficDistributionGroupFluentBuilder {
    /// Creates a new `DescribeTrafficDistributionGroup`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeTrafficDistributionGroup as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_traffic_distribution_group::builders::DescribeTrafficDistributionGroupInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_traffic_distribution_group::DescribeTrafficDistributionGroupOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_traffic_distribution_group::DescribeTrafficDistributionGroupError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_traffic_distribution_group::DescribeTrafficDistributionGroup::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_traffic_distribution_group::DescribeTrafficDistributionGroup::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_traffic_distribution_group::DescribeTrafficDistributionGroupOutput,
        crate::operation::describe_traffic_distribution_group::DescribeTrafficDistributionGroupError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub fn traffic_distribution_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.traffic_distribution_group_id(input.into());
        self
    }
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub fn set_traffic_distribution_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_traffic_distribution_group_id(input);
        self
    }
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub fn get_traffic_distribution_group_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_traffic_distribution_group_id()
    }
}
