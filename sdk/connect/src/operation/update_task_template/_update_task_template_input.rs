// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateTaskTemplateInput {
    /// <p>A unique identifier for the task template.</p>
    #[doc(hidden)]
    pub task_template_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The name of the task template.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the task template.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The identifier of the flow that runs by default when a task is created by referencing this template.</p>
    #[doc(hidden)]
    pub contact_flow_id: std::option::Option<std::string::String>,
    /// <p>Constraints that are applicable to the fields listed.</p>
    #[doc(hidden)]
    pub constraints: std::option::Option<crate::types::TaskTemplateConstraints>,
    /// <p>The default values for fields when a task is created by referencing this template.</p>
    #[doc(hidden)]
    pub defaults: std::option::Option<crate::types::TaskTemplateDefaults>,
    /// <p>Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::TaskTemplateStatus>,
    /// <p>Fields that are part of the template.</p>
    #[doc(hidden)]
    pub fields: std::option::Option<std::vec::Vec<crate::types::TaskTemplateField>>,
}
impl UpdateTaskTemplateInput {
    /// <p>A unique identifier for the task template.</p>
    pub fn task_template_id(&self) -> std::option::Option<&str> {
        self.task_template_id.as_deref()
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The name of the task template.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the task template.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The identifier of the flow that runs by default when a task is created by referencing this template.</p>
    pub fn contact_flow_id(&self) -> std::option::Option<&str> {
        self.contact_flow_id.as_deref()
    }
    /// <p>Constraints that are applicable to the fields listed.</p>
    pub fn constraints(&self) -> std::option::Option<&crate::types::TaskTemplateConstraints> {
        self.constraints.as_ref()
    }
    /// <p>The default values for fields when a task is created by referencing this template.</p>
    pub fn defaults(&self) -> std::option::Option<&crate::types::TaskTemplateDefaults> {
        self.defaults.as_ref()
    }
    /// <p>Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::TaskTemplateStatus> {
        self.status.as_ref()
    }
    /// <p>Fields that are part of the template.</p>
    pub fn fields(&self) -> std::option::Option<&[crate::types::TaskTemplateField]> {
        self.fields.as_deref()
    }
}
impl UpdateTaskTemplateInput {
    /// Creates a new builder-style object to manufacture [`UpdateTaskTemplateInput`](crate::operation::update_task_template::UpdateTaskTemplateInput).
    pub fn builder(
    ) -> crate::operation::update_task_template::builders::UpdateTaskTemplateInputBuilder {
        crate::operation::update_task_template::builders::UpdateTaskTemplateInputBuilder::default()
    }
}

/// A builder for [`UpdateTaskTemplateInput`](crate::operation::update_task_template::UpdateTaskTemplateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateTaskTemplateInputBuilder {
    pub(crate) task_template_id: std::option::Option<std::string::String>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) contact_flow_id: std::option::Option<std::string::String>,
    pub(crate) constraints: std::option::Option<crate::types::TaskTemplateConstraints>,
    pub(crate) defaults: std::option::Option<crate::types::TaskTemplateDefaults>,
    pub(crate) status: std::option::Option<crate::types::TaskTemplateStatus>,
    pub(crate) fields: std::option::Option<std::vec::Vec<crate::types::TaskTemplateField>>,
}
impl UpdateTaskTemplateInputBuilder {
    /// <p>A unique identifier for the task template.</p>
    pub fn task_template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_template_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the task template.</p>
    pub fn set_task_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_template_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The name of the task template.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the task template.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the task template.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the task template.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The identifier of the flow that runs by default when a task is created by referencing this template.</p>
    pub fn contact_flow_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_flow_id = Some(input.into());
        self
    }
    /// <p>The identifier of the flow that runs by default when a task is created by referencing this template.</p>
    pub fn set_contact_flow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.contact_flow_id = input;
        self
    }
    /// <p>Constraints that are applicable to the fields listed.</p>
    pub fn constraints(mut self, input: crate::types::TaskTemplateConstraints) -> Self {
        self.constraints = Some(input);
        self
    }
    /// <p>Constraints that are applicable to the fields listed.</p>
    pub fn set_constraints(
        mut self,
        input: std::option::Option<crate::types::TaskTemplateConstraints>,
    ) -> Self {
        self.constraints = input;
        self
    }
    /// <p>The default values for fields when a task is created by referencing this template.</p>
    pub fn defaults(mut self, input: crate::types::TaskTemplateDefaults) -> Self {
        self.defaults = Some(input);
        self
    }
    /// <p>The default values for fields when a task is created by referencing this template.</p>
    pub fn set_defaults(
        mut self,
        input: std::option::Option<crate::types::TaskTemplateDefaults>,
    ) -> Self {
        self.defaults = input;
        self
    }
    /// <p>Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created.</p>
    pub fn status(mut self, input: crate::types::TaskTemplateStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::TaskTemplateStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>Fields that are part of the template.</p>
    pub fn fields(mut self, input: crate::types::TaskTemplateField) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input);
        self.fields = Some(v);
        self
    }
    /// <p>Fields that are part of the template.</p>
    pub fn set_fields(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TaskTemplateField>>,
    ) -> Self {
        self.fields = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateTaskTemplateInput`](crate::operation::update_task_template::UpdateTaskTemplateInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_task_template::UpdateTaskTemplateInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_task_template::UpdateTaskTemplateInput {
                task_template_id: self.task_template_id,
                instance_id: self.instance_id,
                name: self.name,
                description: self.description,
                contact_flow_id: self.contact_flow_id,
                constraints: self.constraints,
                defaults: self.defaults,
                status: self.status,
                fields: self.fields,
            },
        )
    }
}
