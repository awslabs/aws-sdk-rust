// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTaskTemplateOutput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the task template resource.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the task template resource.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the task template.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the task template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the flow that runs by default when a task is created by referencing this template.</p>
    pub contact_flow_id: ::std::option::Option<::std::string::String>,
    /// <p>Constraints that are applicable to the fields listed.</p>
    pub constraints: ::std::option::Option<crate::types::TaskTemplateConstraints>,
    /// <p>The default values for fields when a task is created by referencing this template.</p>
    pub defaults: ::std::option::Option<crate::types::TaskTemplateDefaults>,
    /// <p>Fields that are part of the template.</p>
    pub fields: ::std::option::Option<::std::vec::Vec<crate::types::TaskTemplateField>>,
    /// <p>Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created.</p>
    pub status: ::std::option::Option<crate::types::TaskTemplateStatus>,
    /// <p>The timestamp when the task template was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the task template was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdateTaskTemplateOutput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The identifier of the task template resource.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the task template resource.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the task template.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the task template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The identifier of the flow that runs by default when a task is created by referencing this template.</p>
    pub fn contact_flow_id(&self) -> ::std::option::Option<&str> {
        self.contact_flow_id.as_deref()
    }
    /// <p>Constraints that are applicable to the fields listed.</p>
    pub fn constraints(&self) -> ::std::option::Option<&crate::types::TaskTemplateConstraints> {
        self.constraints.as_ref()
    }
    /// <p>The default values for fields when a task is created by referencing this template.</p>
    pub fn defaults(&self) -> ::std::option::Option<&crate::types::TaskTemplateDefaults> {
        self.defaults.as_ref()
    }
    /// <p>Fields that are part of the template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.fields.is_none()`.
    pub fn fields(&self) -> &[crate::types::TaskTemplateField] {
        self.fields.as_deref().unwrap_or_default()
    }
    /// <p>Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TaskTemplateStatus> {
        self.status.as_ref()
    }
    /// <p>The timestamp when the task template was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The timestamp when the task template was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for UpdateTaskTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateTaskTemplateOutput {
    /// Creates a new builder-style object to manufacture [`UpdateTaskTemplateOutput`](crate::operation::update_task_template::UpdateTaskTemplateOutput).
    pub fn builder() -> crate::operation::update_task_template::builders::UpdateTaskTemplateOutputBuilder {
        crate::operation::update_task_template::builders::UpdateTaskTemplateOutputBuilder::default()
    }
}

/// A builder for [`UpdateTaskTemplateOutput`](crate::operation::update_task_template::UpdateTaskTemplateOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateTaskTemplateOutputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) contact_flow_id: ::std::option::Option<::std::string::String>,
    pub(crate) constraints: ::std::option::Option<crate::types::TaskTemplateConstraints>,
    pub(crate) defaults: ::std::option::Option<crate::types::TaskTemplateDefaults>,
    pub(crate) fields: ::std::option::Option<::std::vec::Vec<crate::types::TaskTemplateField>>,
    pub(crate) status: ::std::option::Option<crate::types::TaskTemplateStatus>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdateTaskTemplateOutputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The identifier of the task template resource.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the task template resource.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the task template resource.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) for the task template resource.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the task template resource.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the task template resource.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the task template.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the task template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the task template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the task template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the task template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the task template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The identifier of the flow that runs by default when a task is created by referencing this template.</p>
    pub fn contact_flow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_flow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the flow that runs by default when a task is created by referencing this template.</p>
    pub fn set_contact_flow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_flow_id = input;
        self
    }
    /// <p>The identifier of the flow that runs by default when a task is created by referencing this template.</p>
    pub fn get_contact_flow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_flow_id
    }
    /// <p>Constraints that are applicable to the fields listed.</p>
    pub fn constraints(mut self, input: crate::types::TaskTemplateConstraints) -> Self {
        self.constraints = ::std::option::Option::Some(input);
        self
    }
    /// <p>Constraints that are applicable to the fields listed.</p>
    pub fn set_constraints(mut self, input: ::std::option::Option<crate::types::TaskTemplateConstraints>) -> Self {
        self.constraints = input;
        self
    }
    /// <p>Constraints that are applicable to the fields listed.</p>
    pub fn get_constraints(&self) -> &::std::option::Option<crate::types::TaskTemplateConstraints> {
        &self.constraints
    }
    /// <p>The default values for fields when a task is created by referencing this template.</p>
    pub fn defaults(mut self, input: crate::types::TaskTemplateDefaults) -> Self {
        self.defaults = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default values for fields when a task is created by referencing this template.</p>
    pub fn set_defaults(mut self, input: ::std::option::Option<crate::types::TaskTemplateDefaults>) -> Self {
        self.defaults = input;
        self
    }
    /// <p>The default values for fields when a task is created by referencing this template.</p>
    pub fn get_defaults(&self) -> &::std::option::Option<crate::types::TaskTemplateDefaults> {
        &self.defaults
    }
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>Fields that are part of the template.</p>
    pub fn fields(mut self, input: crate::types::TaskTemplateField) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input);
        self.fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>Fields that are part of the template.</p>
    pub fn set_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TaskTemplateField>>) -> Self {
        self.fields = input;
        self
    }
    /// <p>Fields that are part of the template.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TaskTemplateField>> {
        &self.fields
    }
    /// <p>Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created.</p>
    pub fn status(mut self, input: crate::types::TaskTemplateStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TaskTemplateStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TaskTemplateStatus> {
        &self.status
    }
    /// <p>The timestamp when the task template was last modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the task template was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The timestamp when the task template was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The timestamp when the task template was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the task template was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The timestamp when the task template was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateTaskTemplateOutput`](crate::operation::update_task_template::UpdateTaskTemplateOutput).
    pub fn build(self) -> crate::operation::update_task_template::UpdateTaskTemplateOutput {
        crate::operation::update_task_template::UpdateTaskTemplateOutput {
            instance_id: self.instance_id,
            id: self.id,
            arn: self.arn,
            name: self.name,
            description: self.description,
            contact_flow_id: self.contact_flow_id,
            constraints: self.constraints,
            defaults: self.defaults,
            fields: self.fields,
            status: self.status,
            last_modified_time: self.last_modified_time,
            created_time: self.created_time,
            _request_id: self._request_id,
        }
    }
}
