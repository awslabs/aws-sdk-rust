// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::associate_instance_storage_config::_associate_instance_storage_config_output::AssociateInstanceStorageConfigOutputBuilder;

pub use crate::operation::associate_instance_storage_config::_associate_instance_storage_config_input::AssociateInstanceStorageConfigInputBuilder;

/// Fluent builder constructing a request to `AssociateInstanceStorageConfig`.
///
/// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
/// <p>Associates a storage resource type for the first time. You can only associate one type of storage configuration in a single call. This means, for example, that you can't define an instance with multiple S3 buckets for storing chat transcripts.</p>
/// <p>This API does not create a resource that doesn't exist. It only associates it to the instance. Ensure that the resource being specified in the storage configuration, like an S3 bucket, exists when being used for association.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociateInstanceStorageConfigFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::associate_instance_storage_config::builders::AssociateInstanceStorageConfigInputBuilder
            }
impl AssociateInstanceStorageConfigFluentBuilder {
    /// Creates a new `AssociateInstanceStorageConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::associate_instance_storage_config::AssociateInstanceStorageConfig, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::associate_instance_storage_config::AssociateInstanceStorageConfigError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::associate_instance_storage_config::AssociateInstanceStorageConfigOutput, aws_smithy_http::result::SdkError<crate::operation::associate_instance_storage_config::AssociateInstanceStorageConfigError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>A valid resource type.</p>
    pub fn resource_type(mut self, input: crate::types::InstanceStorageResourceType) -> Self {
        self.inner = self.inner.resource_type(input);
        self
    }
    /// <p>A valid resource type.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::InstanceStorageResourceType>,
    ) -> Self {
        self.inner = self.inner.set_resource_type(input);
        self
    }
    /// <p>A valid storage type.</p>
    pub fn storage_config(mut self, input: crate::types::InstanceStorageConfig) -> Self {
        self.inner = self.inner.storage_config(input);
        self
    }
    /// <p>A valid storage type.</p>
    pub fn set_storage_config(
        mut self,
        input: std::option::Option<crate::types::InstanceStorageConfig>,
    ) -> Self {
        self.inner = self.inner.set_storage_config(input);
        self
    }
}
