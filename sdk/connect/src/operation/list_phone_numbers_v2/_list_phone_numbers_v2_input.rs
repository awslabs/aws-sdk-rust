// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPhoneNumbersV2Input {
    /// <p>The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to. If <code>TargetArn</code> input is not provided, this API lists numbers claimed to all the Amazon Connect instances belonging to your account in the same Amazon Web Services Region as the request.</p>
    #[doc(hidden)]
    pub target_arn: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return per page.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ISO country code.</p>
    #[doc(hidden)]
    pub phone_number_country_codes:
        std::option::Option<std::vec::Vec<crate::types::PhoneNumberCountryCode>>,
    /// <p>The type of phone number.</p>
    #[doc(hidden)]
    pub phone_number_types: std::option::Option<std::vec::Vec<crate::types::PhoneNumberType>>,
    /// <p>The prefix of the phone number. If provided, it must contain <code>+</code> as part of the country code.</p>
    #[doc(hidden)]
    pub phone_number_prefix: std::option::Option<std::string::String>,
}
impl ListPhoneNumbersV2Input {
    /// <p>The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to. If <code>TargetArn</code> input is not provided, this API lists numbers claimed to all the Amazon Connect instances belonging to your account in the same Amazon Web Services Region as the request.</p>
    pub fn target_arn(&self) -> std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The ISO country code.</p>
    pub fn phone_number_country_codes(
        &self,
    ) -> std::option::Option<&[crate::types::PhoneNumberCountryCode]> {
        self.phone_number_country_codes.as_deref()
    }
    /// <p>The type of phone number.</p>
    pub fn phone_number_types(&self) -> std::option::Option<&[crate::types::PhoneNumberType]> {
        self.phone_number_types.as_deref()
    }
    /// <p>The prefix of the phone number. If provided, it must contain <code>+</code> as part of the country code.</p>
    pub fn phone_number_prefix(&self) -> std::option::Option<&str> {
        self.phone_number_prefix.as_deref()
    }
}
impl ListPhoneNumbersV2Input {
    /// Creates a new builder-style object to manufacture [`ListPhoneNumbersV2Input`](crate::operation::list_phone_numbers_v2::ListPhoneNumbersV2Input).
    pub fn builder(
    ) -> crate::operation::list_phone_numbers_v2::builders::ListPhoneNumbersV2InputBuilder {
        crate::operation::list_phone_numbers_v2::builders::ListPhoneNumbersV2InputBuilder::default()
    }
}

/// A builder for [`ListPhoneNumbersV2Input`](crate::operation::list_phone_numbers_v2::ListPhoneNumbersV2Input).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListPhoneNumbersV2InputBuilder {
    pub(crate) target_arn: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) phone_number_country_codes:
        std::option::Option<std::vec::Vec<crate::types::PhoneNumberCountryCode>>,
    pub(crate) phone_number_types:
        std::option::Option<std::vec::Vec<crate::types::PhoneNumberType>>,
    pub(crate) phone_number_prefix: std::option::Option<std::string::String>,
}
impl ListPhoneNumbersV2InputBuilder {
    /// <p>The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to. If <code>TargetArn</code> input is not provided, this API lists numbers claimed to all the Amazon Connect instances belonging to your account in the same Amazon Web Services Region as the request.</p>
    pub fn target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to. If <code>TargetArn</code> input is not provided, this API lists numbers claimed to all the Amazon Connect instances belonging to your account in the same Amazon Web Services Region as the request.</p>
    pub fn set_target_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `phone_number_country_codes`.
    ///
    /// To override the contents of this collection use [`set_phone_number_country_codes`](Self::set_phone_number_country_codes).
    ///
    /// <p>The ISO country code.</p>
    pub fn phone_number_country_codes(
        mut self,
        input: crate::types::PhoneNumberCountryCode,
    ) -> Self {
        let mut v = self.phone_number_country_codes.unwrap_or_default();
        v.push(input);
        self.phone_number_country_codes = Some(v);
        self
    }
    /// <p>The ISO country code.</p>
    pub fn set_phone_number_country_codes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PhoneNumberCountryCode>>,
    ) -> Self {
        self.phone_number_country_codes = input;
        self
    }
    /// Appends an item to `phone_number_types`.
    ///
    /// To override the contents of this collection use [`set_phone_number_types`](Self::set_phone_number_types).
    ///
    /// <p>The type of phone number.</p>
    pub fn phone_number_types(mut self, input: crate::types::PhoneNumberType) -> Self {
        let mut v = self.phone_number_types.unwrap_or_default();
        v.push(input);
        self.phone_number_types = Some(v);
        self
    }
    /// <p>The type of phone number.</p>
    pub fn set_phone_number_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PhoneNumberType>>,
    ) -> Self {
        self.phone_number_types = input;
        self
    }
    /// <p>The prefix of the phone number. If provided, it must contain <code>+</code> as part of the country code.</p>
    pub fn phone_number_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number_prefix = Some(input.into());
        self
    }
    /// <p>The prefix of the phone number. If provided, it must contain <code>+</code> as part of the country code.</p>
    pub fn set_phone_number_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.phone_number_prefix = input;
        self
    }
    /// Consumes the builder and constructs a [`ListPhoneNumbersV2Input`](crate::operation::list_phone_numbers_v2::ListPhoneNumbersV2Input).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_phone_numbers_v2::ListPhoneNumbersV2Input,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_phone_numbers_v2::ListPhoneNumbersV2Input {
                target_arn: self.target_arn,
                max_results: self.max_results,
                next_token: self.next_token,
                phone_number_country_codes: self.phone_number_country_codes,
                phone_number_types: self.phone_number_types,
                phone_number_prefix: self.phone_number_prefix,
            },
        )
    }
}
