// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_contact_evaluation::_update_contact_evaluation_output::UpdateContactEvaluationOutputBuilder;

pub use crate::operation::update_contact_evaluation::_update_contact_evaluation_input::UpdateContactEvaluationInputBuilder;

impl crate::operation::update_contact_evaluation::builders::UpdateContactEvaluationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_contact_evaluation::UpdateContactEvaluationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_contact_evaluation::UpdateContactEvaluationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_contact_evaluation();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateContactEvaluation`.
///
/// <p>Updates details about a contact evaluation in the specified Amazon Connect instance. A contact evaluation must be in draft state. Answers included in the request are merged with existing answers for the given evaluation. An answer or note can be deleted by passing an empty object (<code>{}</code>) to the question identifier.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateContactEvaluationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_contact_evaluation::builders::UpdateContactEvaluationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_contact_evaluation::UpdateContactEvaluationOutput,
        crate::operation::update_contact_evaluation::UpdateContactEvaluationError,
    > for UpdateContactEvaluationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_contact_evaluation::UpdateContactEvaluationOutput,
            crate::operation::update_contact_evaluation::UpdateContactEvaluationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateContactEvaluationFluentBuilder {
    /// Creates a new `UpdateContactEvaluation`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateContactEvaluation as a reference.
    pub fn as_input(&self) -> &crate::operation::update_contact_evaluation::builders::UpdateContactEvaluationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_contact_evaluation::UpdateContactEvaluationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_contact_evaluation::UpdateContactEvaluationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_contact_evaluation::UpdateContactEvaluation::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_contact_evaluation::UpdateContactEvaluation::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_contact_evaluation::UpdateContactEvaluationOutput,
        crate::operation::update_contact_evaluation::UpdateContactEvaluationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_id()
    }
    /// <p>A unique identifier for the contact evaluation.</p>
    pub fn evaluation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.evaluation_id(input.into());
        self
    }
    /// <p>A unique identifier for the contact evaluation.</p>
    pub fn set_evaluation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_evaluation_id(input);
        self
    }
    /// <p>A unique identifier for the contact evaluation.</p>
    pub fn get_evaluation_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_evaluation_id()
    }
    ///
    /// Adds a key-value pair to `Answers`.
    ///
    /// To override the contents of this collection use [`set_answers`](Self::set_answers).
    ///
    /// <p>A map of question identifiers to answer value.</p>
    pub fn answers(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::EvaluationAnswerInput) -> Self {
        self.inner = self.inner.answers(k.into(), v);
        self
    }
    /// <p>A map of question identifiers to answer value.</p>
    pub fn set_answers(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::EvaluationAnswerInput>>,
    ) -> Self {
        self.inner = self.inner.set_answers(input);
        self
    }
    /// <p>A map of question identifiers to answer value.</p>
    pub fn get_answers(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::EvaluationAnswerInput>> {
        self.inner.get_answers()
    }
    ///
    /// Adds a key-value pair to `Notes`.
    ///
    /// To override the contents of this collection use [`set_notes`](Self::set_notes).
    ///
    /// <p>A map of question identifiers to note value.</p>
    pub fn notes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::EvaluationNote) -> Self {
        self.inner = self.inner.notes(k.into(), v);
        self
    }
    /// <p>A map of question identifiers to note value.</p>
    pub fn set_notes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::EvaluationNote>>,
    ) -> Self {
        self.inner = self.inner.set_notes(input);
        self
    }
    /// <p>A map of question identifiers to note value.</p>
    pub fn get_notes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::EvaluationNote>> {
        self.inner.get_notes()
    }
}
