// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateUseCaseInput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the integration association.</p>
    pub integration_association_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of use case to associate to the integration association. Each integration association can have only one of each use case type.</p>
    pub use_case_type: ::std::option::Option<crate::types::UseCaseType>,
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateUseCaseInput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The identifier for the integration association.</p>
    pub fn integration_association_id(&self) -> ::std::option::Option<&str> {
        self.integration_association_id.as_deref()
    }
    /// <p>The type of use case to associate to the integration association. Each integration association can have only one of each use case type.</p>
    pub fn use_case_type(&self) -> ::std::option::Option<&crate::types::UseCaseType> {
        self.use_case_type.as_ref()
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateUseCaseInput {
    /// Creates a new builder-style object to manufacture [`CreateUseCaseInput`](crate::operation::create_use_case::CreateUseCaseInput).
    pub fn builder() -> crate::operation::create_use_case::builders::CreateUseCaseInputBuilder {
        crate::operation::create_use_case::builders::CreateUseCaseInputBuilder::default()
    }
}

/// A builder for [`CreateUseCaseInput`](crate::operation::create_use_case::CreateUseCaseInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateUseCaseInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) integration_association_id: ::std::option::Option<::std::string::String>,
    pub(crate) use_case_type: ::std::option::Option<crate::types::UseCaseType>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateUseCaseInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The identifier for the integration association.</p>
    /// This field is required.
    pub fn integration_association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the integration association.</p>
    pub fn set_integration_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_association_id = input;
        self
    }
    /// <p>The identifier for the integration association.</p>
    pub fn get_integration_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_association_id
    }
    /// <p>The type of use case to associate to the integration association. Each integration association can have only one of each use case type.</p>
    /// This field is required.
    pub fn use_case_type(mut self, input: crate::types::UseCaseType) -> Self {
        self.use_case_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of use case to associate to the integration association. Each integration association can have only one of each use case type.</p>
    pub fn set_use_case_type(mut self, input: ::std::option::Option<crate::types::UseCaseType>) -> Self {
        self.use_case_type = input;
        self
    }
    /// <p>The type of use case to associate to the integration association. Each integration association can have only one of each use case type.</p>
    pub fn get_use_case_type(&self) -> &::std::option::Option<crate::types::UseCaseType> {
        &self.use_case_type
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateUseCaseInput`](crate::operation::create_use_case::CreateUseCaseInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_use_case::CreateUseCaseInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_use_case::CreateUseCaseInput {
            instance_id: self.instance_id,
            integration_association_id: self.integration_association_id,
            use_case_type: self.use_case_type,
            tags: self.tags,
        })
    }
}
