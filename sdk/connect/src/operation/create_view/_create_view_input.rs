// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateViewInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique Id for each create view request to avoid duplicate view creation. For example, the view is idempotent ClientToken is provided.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the view status as either <code>SAVED</code> or <code>PUBLISHED</code>. The <code>PUBLISHED</code> status will initiate validation on the content.</p>
    pub status: ::std::option::Option<crate::types::ViewStatus>,
    /// <p>View content containing all content necessary to render a view except for runtime input data.</p>
    /// <p>The total uncompressed content has a maximum file size of 400kB.</p>
    pub content: ::std::option::Option<crate::types::ViewInputContent>,
    /// <p>The description of the view.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the view.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The tags associated with the view resource (not specific to view version).These tags can be used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateViewInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>A unique Id for each create view request to avoid duplicate view creation. For example, the view is idempotent ClientToken is provided.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Indicates the view status as either <code>SAVED</code> or <code>PUBLISHED</code>. The <code>PUBLISHED</code> status will initiate validation on the content.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ViewStatus> {
        self.status.as_ref()
    }
    /// <p>View content containing all content necessary to render a view except for runtime input data.</p>
    /// <p>The total uncompressed content has a maximum file size of 400kB.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::ViewInputContent> {
        self.content.as_ref()
    }
    /// <p>The description of the view.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the view.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The tags associated with the view resource (not specific to view version).These tags can be used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateViewInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateViewInput");
        formatter.field("instance_id", &self.instance_id);
        formatter.field("client_token", &self.client_token);
        formatter.field("status", &self.status);
        formatter.field("content", &self.content);
        formatter.field("description", &self.description);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateViewInput {
    /// Creates a new builder-style object to manufacture [`CreateViewInput`](crate::operation::create_view::CreateViewInput).
    pub fn builder() -> crate::operation::create_view::builders::CreateViewInputBuilder {
        crate::operation::create_view::builders::CreateViewInputBuilder::default()
    }
}

/// A builder for [`CreateViewInput`](crate::operation::create_view::CreateViewInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateViewInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ViewStatus>,
    pub(crate) content: ::std::option::Option<crate::types::ViewInputContent>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateViewInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>A unique Id for each create view request to avoid duplicate view creation. For example, the view is idempotent ClientToken is provided.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique Id for each create view request to avoid duplicate view creation. For example, the view is idempotent ClientToken is provided.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique Id for each create view request to avoid duplicate view creation. For example, the view is idempotent ClientToken is provided.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Indicates the view status as either <code>SAVED</code> or <code>PUBLISHED</code>. The <code>PUBLISHED</code> status will initiate validation on the content.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ViewStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the view status as either <code>SAVED</code> or <code>PUBLISHED</code>. The <code>PUBLISHED</code> status will initiate validation on the content.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ViewStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates the view status as either <code>SAVED</code> or <code>PUBLISHED</code>. The <code>PUBLISHED</code> status will initiate validation on the content.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ViewStatus> {
        &self.status
    }
    /// <p>View content containing all content necessary to render a view except for runtime input data.</p>
    /// <p>The total uncompressed content has a maximum file size of 400kB.</p>
    /// This field is required.
    pub fn content(mut self, input: crate::types::ViewInputContent) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>View content containing all content necessary to render a view except for runtime input data.</p>
    /// <p>The total uncompressed content has a maximum file size of 400kB.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::ViewInputContent>) -> Self {
        self.content = input;
        self
    }
    /// <p>View content containing all content necessary to render a view except for runtime input data.</p>
    /// <p>The total uncompressed content has a maximum file size of 400kB.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::ViewInputContent> {
        &self.content
    }
    /// <p>The description of the view.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the view.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the view.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the view.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the view.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the view.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the view resource (not specific to view version).These tags can be used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags associated with the view resource (not specific to view version).These tags can be used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with the view resource (not specific to view version).These tags can be used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateViewInput`](crate::operation::create_view::CreateViewInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_view::CreateViewInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_view::CreateViewInput {
            instance_id: self.instance_id,
            client_token: self.client_token,
            status: self.status,
            content: self.content,
            description: self.description,
            name: self.name,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateViewInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateViewInputBuilder");
        formatter.field("instance_id", &self.instance_id);
        formatter.field("client_token", &self.client_token);
        formatter.field("status", &self.status);
        formatter.field("content", &self.content);
        formatter.field("description", &self.description);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
