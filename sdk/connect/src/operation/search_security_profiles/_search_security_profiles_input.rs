// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchSecurityProfilesInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return per page.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The search criteria to be used to return security profiles. </p> <note>
    /// <p>The <code>name</code> field support "contains" queries with a minimum of 2 characters and maximum of 25 characters. Any queries with character lengths outside of this range will throw invalid results.</p>
    /// </note> <note>
    /// <p>The currently supported value for <code>FieldName</code>: <code>name</code> </p>
    /// </note>
    #[doc(hidden)]
    pub search_criteria: std::option::Option<crate::types::SecurityProfileSearchCriteria>,
    /// <p>Filters to be applied to search results.</p>
    #[doc(hidden)]
    pub search_filter: std::option::Option<crate::types::SecurityProfilesSearchFilter>,
}
impl SearchSecurityProfilesInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The search criteria to be used to return security profiles. </p> <note>
    /// <p>The <code>name</code> field support "contains" queries with a minimum of 2 characters and maximum of 25 characters. Any queries with character lengths outside of this range will throw invalid results.</p>
    /// </note> <note>
    /// <p>The currently supported value for <code>FieldName</code>: <code>name</code> </p>
    /// </note>
    pub fn search_criteria(
        &self,
    ) -> std::option::Option<&crate::types::SecurityProfileSearchCriteria> {
        self.search_criteria.as_ref()
    }
    /// <p>Filters to be applied to search results.</p>
    pub fn search_filter(
        &self,
    ) -> std::option::Option<&crate::types::SecurityProfilesSearchFilter> {
        self.search_filter.as_ref()
    }
}
impl SearchSecurityProfilesInput {
    /// Creates a new builder-style object to manufacture [`SearchSecurityProfilesInput`](crate::operation::search_security_profiles::SearchSecurityProfilesInput).
    pub fn builder(
    ) -> crate::operation::search_security_profiles::builders::SearchSecurityProfilesInputBuilder
    {
        crate::operation::search_security_profiles::builders::SearchSecurityProfilesInputBuilder::default()
    }
}

/// A builder for [`SearchSecurityProfilesInput`](crate::operation::search_security_profiles::SearchSecurityProfilesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchSecurityProfilesInputBuilder {
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) search_criteria: std::option::Option<crate::types::SecurityProfileSearchCriteria>,
    pub(crate) search_filter: std::option::Option<crate::types::SecurityProfilesSearchFilter>,
}
impl SearchSecurityProfilesInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The search criteria to be used to return security profiles. </p> <note>
    /// <p>The <code>name</code> field support "contains" queries with a minimum of 2 characters and maximum of 25 characters. Any queries with character lengths outside of this range will throw invalid results.</p>
    /// </note> <note>
    /// <p>The currently supported value for <code>FieldName</code>: <code>name</code> </p>
    /// </note>
    pub fn search_criteria(mut self, input: crate::types::SecurityProfileSearchCriteria) -> Self {
        self.search_criteria = Some(input);
        self
    }
    /// <p>The search criteria to be used to return security profiles. </p> <note>
    /// <p>The <code>name</code> field support "contains" queries with a minimum of 2 characters and maximum of 25 characters. Any queries with character lengths outside of this range will throw invalid results.</p>
    /// </note> <note>
    /// <p>The currently supported value for <code>FieldName</code>: <code>name</code> </p>
    /// </note>
    pub fn set_search_criteria(
        mut self,
        input: std::option::Option<crate::types::SecurityProfileSearchCriteria>,
    ) -> Self {
        self.search_criteria = input;
        self
    }
    /// <p>Filters to be applied to search results.</p>
    pub fn search_filter(mut self, input: crate::types::SecurityProfilesSearchFilter) -> Self {
        self.search_filter = Some(input);
        self
    }
    /// <p>Filters to be applied to search results.</p>
    pub fn set_search_filter(
        mut self,
        input: std::option::Option<crate::types::SecurityProfilesSearchFilter>,
    ) -> Self {
        self.search_filter = input;
        self
    }
    /// Consumes the builder and constructs a [`SearchSecurityProfilesInput`](crate::operation::search_security_profiles::SearchSecurityProfilesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::search_security_profiles::SearchSecurityProfilesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::search_security_profiles::SearchSecurityProfilesInput {
                instance_id: self.instance_id,
                next_token: self.next_token,
                max_results: self.max_results,
                search_criteria: self.search_criteria,
                search_filter: self.search_filter,
            },
        )
    }
}
