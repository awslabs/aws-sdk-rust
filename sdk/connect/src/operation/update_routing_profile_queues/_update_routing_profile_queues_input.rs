// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateRoutingProfileQueuesInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the routing profile.</p>
    #[doc(hidden)]
    pub routing_profile_id: std::option::Option<std::string::String>,
    /// <p>The queues to be updated for this routing profile. Queues must first be associated to the routing profile. You can do this using AssociateRoutingProfileQueues.</p>
    #[doc(hidden)]
    pub queue_configs: std::option::Option<std::vec::Vec<crate::types::RoutingProfileQueueConfig>>,
}
impl UpdateRoutingProfileQueuesInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The identifier of the routing profile.</p>
    pub fn routing_profile_id(&self) -> std::option::Option<&str> {
        self.routing_profile_id.as_deref()
    }
    /// <p>The queues to be updated for this routing profile. Queues must first be associated to the routing profile. You can do this using AssociateRoutingProfileQueues.</p>
    pub fn queue_configs(&self) -> std::option::Option<&[crate::types::RoutingProfileQueueConfig]> {
        self.queue_configs.as_deref()
    }
}
impl UpdateRoutingProfileQueuesInput {
    /// Creates a new builder-style object to manufacture [`UpdateRoutingProfileQueuesInput`](crate::operation::update_routing_profile_queues::UpdateRoutingProfileQueuesInput).
    pub fn builder() -> crate::operation::update_routing_profile_queues::builders::UpdateRoutingProfileQueuesInputBuilder{
        crate::operation::update_routing_profile_queues::builders::UpdateRoutingProfileQueuesInputBuilder::default()
    }
}

/// A builder for [`UpdateRoutingProfileQueuesInput`](crate::operation::update_routing_profile_queues::UpdateRoutingProfileQueuesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateRoutingProfileQueuesInputBuilder {
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) routing_profile_id: std::option::Option<std::string::String>,
    pub(crate) queue_configs:
        std::option::Option<std::vec::Vec<crate::types::RoutingProfileQueueConfig>>,
}
impl UpdateRoutingProfileQueuesInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the routing profile.</p>
    pub fn routing_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.routing_profile_id = Some(input.into());
        self
    }
    /// <p>The identifier of the routing profile.</p>
    pub fn set_routing_profile_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.routing_profile_id = input;
        self
    }
    /// Appends an item to `queue_configs`.
    ///
    /// To override the contents of this collection use [`set_queue_configs`](Self::set_queue_configs).
    ///
    /// <p>The queues to be updated for this routing profile. Queues must first be associated to the routing profile. You can do this using AssociateRoutingProfileQueues.</p>
    pub fn queue_configs(mut self, input: crate::types::RoutingProfileQueueConfig) -> Self {
        let mut v = self.queue_configs.unwrap_or_default();
        v.push(input);
        self.queue_configs = Some(v);
        self
    }
    /// <p>The queues to be updated for this routing profile. Queues must first be associated to the routing profile. You can do this using AssociateRoutingProfileQueues.</p>
    pub fn set_queue_configs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RoutingProfileQueueConfig>>,
    ) -> Self {
        self.queue_configs = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateRoutingProfileQueuesInput`](crate::operation::update_routing_profile_queues::UpdateRoutingProfileQueuesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_routing_profile_queues::UpdateRoutingProfileQueuesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_routing_profile_queues::UpdateRoutingProfileQueuesInput {
                instance_id: self.instance_id,
                routing_profile_id: self.routing_profile_id,
                queue_configs: self.queue_configs,
            },
        )
    }
}
