// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateHoursOfOperationInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The name of the hours of operation.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the hours of operation.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The time zone of the hours of operation.</p>
    #[doc(hidden)]
    pub time_zone: std::option::Option<std::string::String>,
    /// <p>Configuration information for the hours of operation: day, start time, and end time.</p>
    #[doc(hidden)]
    pub config: std::option::Option<std::vec::Vec<crate::types::HoursOfOperationConfig>>,
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateHoursOfOperationInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The name of the hours of operation.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the hours of operation.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The time zone of the hours of operation.</p>
    pub fn time_zone(&self) -> std::option::Option<&str> {
        self.time_zone.as_deref()
    }
    /// <p>Configuration information for the hours of operation: day, start time, and end time.</p>
    pub fn config(&self) -> std::option::Option<&[crate::types::HoursOfOperationConfig]> {
        self.config.as_deref()
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CreateHoursOfOperationInput {
    /// Creates a new builder-style object to manufacture [`CreateHoursOfOperationInput`](crate::operation::create_hours_of_operation::CreateHoursOfOperationInput).
    pub fn builder(
    ) -> crate::operation::create_hours_of_operation::builders::CreateHoursOfOperationInputBuilder
    {
        crate::operation::create_hours_of_operation::builders::CreateHoursOfOperationInputBuilder::default()
    }
}

/// A builder for [`CreateHoursOfOperationInput`](crate::operation::create_hours_of_operation::CreateHoursOfOperationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateHoursOfOperationInputBuilder {
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) time_zone: std::option::Option<std::string::String>,
    pub(crate) config: std::option::Option<std::vec::Vec<crate::types::HoursOfOperationConfig>>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateHoursOfOperationInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The name of the hours of operation.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the hours of operation.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the hours of operation.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the hours of operation.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The time zone of the hours of operation.</p>
    pub fn time_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.time_zone = Some(input.into());
        self
    }
    /// <p>The time zone of the hours of operation.</p>
    pub fn set_time_zone(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.time_zone = input;
        self
    }
    /// Appends an item to `config`.
    ///
    /// To override the contents of this collection use [`set_config`](Self::set_config).
    ///
    /// <p>Configuration information for the hours of operation: day, start time, and end time.</p>
    pub fn config(mut self, input: crate::types::HoursOfOperationConfig) -> Self {
        let mut v = self.config.unwrap_or_default();
        v.push(input);
        self.config = Some(v);
        self
    }
    /// <p>Configuration information for the hours of operation: day, start time, and end time.</p>
    pub fn set_config(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HoursOfOperationConfig>>,
    ) -> Self {
        self.config = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateHoursOfOperationInput`](crate::operation::create_hours_of_operation::CreateHoursOfOperationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_hours_of_operation::CreateHoursOfOperationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_hours_of_operation::CreateHoursOfOperationInput {
                instance_id: self.instance_id,
                name: self.name,
                description: self.description,
                time_zone: self.time_zone,
                config: self.config,
                tags: self.tags,
            },
        )
    }
}
