// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disassociate_queue_quick_connects::_disassociate_queue_quick_connects_output::DisassociateQueueQuickConnectsOutputBuilder;

pub use crate::operation::disassociate_queue_quick_connects::_disassociate_queue_quick_connects_input::DisassociateQueueQuickConnectsInputBuilder;

/// Fluent builder constructing a request to `DisassociateQueueQuickConnects`.
///
/// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
/// <p>Disassociates a set of quick connects from a queue.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateQueueQuickConnectsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::disassociate_queue_quick_connects::builders::DisassociateQueueQuickConnectsInputBuilder
            }
impl DisassociateQueueQuickConnectsFluentBuilder {
    /// Creates a new `DisassociateQueueQuickConnects`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::disassociate_queue_quick_connects::DisassociateQueueQuickConnects, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::disassociate_queue_quick_connects::DisassociateQueueQuickConnectsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::disassociate_queue_quick_connects::DisassociateQueueQuickConnectsOutput, aws_smithy_http::result::SdkError<crate::operation::disassociate_queue_quick_connects::DisassociateQueueQuickConnectsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>The identifier for the queue.</p>
    pub fn queue_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.queue_id(input.into());
        self
    }
    /// <p>The identifier for the queue.</p>
    pub fn set_queue_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_queue_id(input);
        self
    }
    /// Appends an item to `QuickConnectIds`.
    ///
    /// To override the contents of this collection use [`set_quick_connect_ids`](Self::set_quick_connect_ids).
    ///
    /// <p>The quick connects to disassociate from the queue.</p>
    pub fn quick_connect_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.quick_connect_ids(input.into());
        self
    }
    /// <p>The quick connects to disassociate from the queue.</p>
    pub fn set_quick_connect_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_quick_connect_ids(input);
        self
    }
}
