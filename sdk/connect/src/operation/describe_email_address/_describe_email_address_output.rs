// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DescribeEmailAddressOutput {
    /// <p>The identifier of the email address.</p>
    pub email_address_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the email address.</p>
    pub email_address_arn: ::std::option::Option<::std::string::String>,
    /// <p>The email address, including the domain.</p>
    pub email_address: ::std::option::Option<::std::string::String>,
    /// <p>The display name of email address</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the email address.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The email address creation timestamp in ISO 8601 Datetime.</p>
    pub create_timestamp: ::std::option::Option<::std::string::String>,
    /// <p>The email address last modification timestamp in ISO 8601 Datetime.</p>
    pub modified_timestamp: ::std::option::Option<::std::string::String>,
    /// <p>A list of alias configurations associated with this email address. Contains details about email addresses that forward to this primary email address. The list can contain at most one alias configuration per email address.</p>
    pub alias_configurations: ::std::option::Option<::std::vec::Vec<crate::types::AliasConfiguration>>,
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "Tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeEmailAddressOutput {
    /// <p>The identifier of the email address.</p>
    pub fn email_address_id(&self) -> ::std::option::Option<&str> {
        self.email_address_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the email address.</p>
    pub fn email_address_arn(&self) -> ::std::option::Option<&str> {
        self.email_address_arn.as_deref()
    }
    /// <p>The email address, including the domain.</p>
    pub fn email_address(&self) -> ::std::option::Option<&str> {
        self.email_address.as_deref()
    }
    /// <p>The display name of email address</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The description of the email address.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The email address creation timestamp in ISO 8601 Datetime.</p>
    pub fn create_timestamp(&self) -> ::std::option::Option<&str> {
        self.create_timestamp.as_deref()
    }
    /// <p>The email address last modification timestamp in ISO 8601 Datetime.</p>
    pub fn modified_timestamp(&self) -> ::std::option::Option<&str> {
        self.modified_timestamp.as_deref()
    }
    /// <p>A list of alias configurations associated with this email address. Contains details about email addresses that forward to this primary email address. The list can contain at most one alias configuration per email address.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.alias_configurations.is_none()`.
    pub fn alias_configurations(&self) -> &[crate::types::AliasConfiguration] {
        self.alias_configurations.as_deref().unwrap_or_default()
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "Tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for DescribeEmailAddressOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEmailAddressOutput");
        formatter.field("email_address_id", &self.email_address_id);
        formatter.field("email_address_arn", &self.email_address_arn);
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("create_timestamp", &self.create_timestamp);
        formatter.field("modified_timestamp", &self.modified_timestamp);
        formatter.field("alias_configurations", &self.alias_configurations);
        formatter.field("tags", &self.tags);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for DescribeEmailAddressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEmailAddressOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEmailAddressOutput`](crate::operation::describe_email_address::DescribeEmailAddressOutput).
    pub fn builder() -> crate::operation::describe_email_address::builders::DescribeEmailAddressOutputBuilder {
        crate::operation::describe_email_address::builders::DescribeEmailAddressOutputBuilder::default()
    }
}

/// A builder for [`DescribeEmailAddressOutput`](crate::operation::describe_email_address::DescribeEmailAddressOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DescribeEmailAddressOutputBuilder {
    pub(crate) email_address_id: ::std::option::Option<::std::string::String>,
    pub(crate) email_address_arn: ::std::option::Option<::std::string::String>,
    pub(crate) email_address: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) create_timestamp: ::std::option::Option<::std::string::String>,
    pub(crate) modified_timestamp: ::std::option::Option<::std::string::String>,
    pub(crate) alias_configurations: ::std::option::Option<::std::vec::Vec<crate::types::AliasConfiguration>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeEmailAddressOutputBuilder {
    /// <p>The identifier of the email address.</p>
    pub fn email_address_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the email address.</p>
    pub fn set_email_address_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address_id = input;
        self
    }
    /// <p>The identifier of the email address.</p>
    pub fn get_email_address_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address_id
    }
    /// <p>The Amazon Resource Name (ARN) of the email address.</p>
    pub fn email_address_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the email address.</p>
    pub fn set_email_address_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the email address.</p>
    pub fn get_email_address_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address_arn
    }
    /// <p>The email address, including the domain.</p>
    pub fn email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address, including the domain.</p>
    pub fn set_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>The email address, including the domain.</p>
    pub fn get_email_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address
    }
    /// <p>The display name of email address</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of email address</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of email address</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The description of the email address.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the email address.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the email address.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The email address creation timestamp in ISO 8601 Datetime.</p>
    pub fn create_timestamp(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.create_timestamp = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address creation timestamp in ISO 8601 Datetime.</p>
    pub fn set_create_timestamp(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.create_timestamp = input;
        self
    }
    /// <p>The email address creation timestamp in ISO 8601 Datetime.</p>
    pub fn get_create_timestamp(&self) -> &::std::option::Option<::std::string::String> {
        &self.create_timestamp
    }
    /// <p>The email address last modification timestamp in ISO 8601 Datetime.</p>
    pub fn modified_timestamp(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.modified_timestamp = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address last modification timestamp in ISO 8601 Datetime.</p>
    pub fn set_modified_timestamp(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.modified_timestamp = input;
        self
    }
    /// <p>The email address last modification timestamp in ISO 8601 Datetime.</p>
    pub fn get_modified_timestamp(&self) -> &::std::option::Option<::std::string::String> {
        &self.modified_timestamp
    }
    /// Appends an item to `alias_configurations`.
    ///
    /// To override the contents of this collection use [`set_alias_configurations`](Self::set_alias_configurations).
    ///
    /// <p>A list of alias configurations associated with this email address. Contains details about email addresses that forward to this primary email address. The list can contain at most one alias configuration per email address.</p>
    pub fn alias_configurations(mut self, input: crate::types::AliasConfiguration) -> Self {
        let mut v = self.alias_configurations.unwrap_or_default();
        v.push(input);
        self.alias_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of alias configurations associated with this email address. Contains details about email addresses that forward to this primary email address. The list can contain at most one alias configuration per email address.</p>
    pub fn set_alias_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AliasConfiguration>>) -> Self {
        self.alias_configurations = input;
        self
    }
    /// <p>A list of alias configurations associated with this email address. Contains details about email addresses that forward to this primary email address. The list can contain at most one alias configuration per email address.</p>
    pub fn get_alias_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AliasConfiguration>> {
        &self.alias_configurations
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "Tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "Tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "Tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEmailAddressOutput`](crate::operation::describe_email_address::DescribeEmailAddressOutput).
    pub fn build(self) -> crate::operation::describe_email_address::DescribeEmailAddressOutput {
        crate::operation::describe_email_address::DescribeEmailAddressOutput {
            email_address_id: self.email_address_id,
            email_address_arn: self.email_address_arn,
            email_address: self.email_address,
            display_name: self.display_name,
            description: self.description,
            create_timestamp: self.create_timestamp,
            modified_timestamp: self.modified_timestamp,
            alias_configurations: self.alias_configurations,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for DescribeEmailAddressOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEmailAddressOutputBuilder");
        formatter.field("email_address_id", &self.email_address_id);
        formatter.field("email_address_arn", &self.email_address_arn);
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("create_timestamp", &self.create_timestamp);
        formatter.field("modified_timestamp", &self.modified_timestamp);
        formatter.field("alias_configurations", &self.alias_configurations);
        formatter.field("tags", &self.tags);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
