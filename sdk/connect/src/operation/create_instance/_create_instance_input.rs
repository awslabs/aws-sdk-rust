// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateInstanceInput {
    /// <p>The idempotency token.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The type of identity management for your Amazon Connect users.</p>
    pub identity_management_type: ::std::option::Option<crate::types::DirectoryType>,
    /// <p>The name for your instance.</p>
    pub instance_alias: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the directory.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>Your contact center handles incoming contacts.</p>
    pub inbound_calls_enabled: ::std::option::Option<bool>,
    /// <p>Your contact center allows outbound calls.</p>
    pub outbound_calls_enabled: ::std::option::Option<bool>,
}
impl CreateInstanceInput {
    /// <p>The idempotency token.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The type of identity management for your Amazon Connect users.</p>
    pub fn identity_management_type(&self) -> ::std::option::Option<&crate::types::DirectoryType> {
        self.identity_management_type.as_ref()
    }
    /// <p>The name for your instance.</p>
    pub fn instance_alias(&self) -> ::std::option::Option<&str> {
        self.instance_alias.as_deref()
    }
    /// <p>The identifier for the directory.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>Your contact center handles incoming contacts.</p>
    pub fn inbound_calls_enabled(&self) -> ::std::option::Option<bool> {
        self.inbound_calls_enabled
    }
    /// <p>Your contact center allows outbound calls.</p>
    pub fn outbound_calls_enabled(&self) -> ::std::option::Option<bool> {
        self.outbound_calls_enabled
    }
}
impl ::std::fmt::Debug for CreateInstanceInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateInstanceInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("identity_management_type", &self.identity_management_type);
        formatter.field("instance_alias", &"*** Sensitive Data Redacted ***");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("inbound_calls_enabled", &self.inbound_calls_enabled);
        formatter.field("outbound_calls_enabled", &self.outbound_calls_enabled);
        formatter.finish()
    }
}
impl CreateInstanceInput {
    /// Creates a new builder-style object to manufacture [`CreateInstanceInput`](crate::operation::create_instance::CreateInstanceInput).
    pub fn builder() -> crate::operation::create_instance::builders::CreateInstanceInputBuilder {
        crate::operation::create_instance::builders::CreateInstanceInputBuilder::default()
    }
}

/// A builder for [`CreateInstanceInput`](crate::operation::create_instance::CreateInstanceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateInstanceInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) identity_management_type: ::std::option::Option<crate::types::DirectoryType>,
    pub(crate) instance_alias: ::std::option::Option<::std::string::String>,
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) inbound_calls_enabled: ::std::option::Option<bool>,
    pub(crate) outbound_calls_enabled: ::std::option::Option<bool>,
}
impl CreateInstanceInputBuilder {
    /// <p>The idempotency token.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The idempotency token.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The idempotency token.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The type of identity management for your Amazon Connect users.</p>
    /// This field is required.
    pub fn identity_management_type(mut self, input: crate::types::DirectoryType) -> Self {
        self.identity_management_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of identity management for your Amazon Connect users.</p>
    pub fn set_identity_management_type(mut self, input: ::std::option::Option<crate::types::DirectoryType>) -> Self {
        self.identity_management_type = input;
        self
    }
    /// <p>The type of identity management for your Amazon Connect users.</p>
    pub fn get_identity_management_type(&self) -> &::std::option::Option<crate::types::DirectoryType> {
        &self.identity_management_type
    }
    /// <p>The name for your instance.</p>
    pub fn instance_alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for your instance.</p>
    pub fn set_instance_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_alias = input;
        self
    }
    /// <p>The name for your instance.</p>
    pub fn get_instance_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_alias
    }
    /// <p>The identifier for the directory.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the directory.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier for the directory.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>Your contact center handles incoming contacts.</p>
    /// This field is required.
    pub fn inbound_calls_enabled(mut self, input: bool) -> Self {
        self.inbound_calls_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Your contact center handles incoming contacts.</p>
    pub fn set_inbound_calls_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inbound_calls_enabled = input;
        self
    }
    /// <p>Your contact center handles incoming contacts.</p>
    pub fn get_inbound_calls_enabled(&self) -> &::std::option::Option<bool> {
        &self.inbound_calls_enabled
    }
    /// <p>Your contact center allows outbound calls.</p>
    /// This field is required.
    pub fn outbound_calls_enabled(mut self, input: bool) -> Self {
        self.outbound_calls_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Your contact center allows outbound calls.</p>
    pub fn set_outbound_calls_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.outbound_calls_enabled = input;
        self
    }
    /// <p>Your contact center allows outbound calls.</p>
    pub fn get_outbound_calls_enabled(&self) -> &::std::option::Option<bool> {
        &self.outbound_calls_enabled
    }
    /// Consumes the builder and constructs a [`CreateInstanceInput`](crate::operation::create_instance::CreateInstanceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_instance::CreateInstanceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_instance::CreateInstanceInput {
            client_token: self.client_token,
            identity_management_type: self.identity_management_type,
            instance_alias: self.instance_alias,
            directory_id: self.directory_id,
            inbound_calls_enabled: self.inbound_calls_enabled,
            outbound_calls_enabled: self.outbound_calls_enabled,
        })
    }
}
impl ::std::fmt::Debug for CreateInstanceInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateInstanceInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("identity_management_type", &self.identity_management_type);
        formatter.field("instance_alias", &"*** Sensitive Data Redacted ***");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("inbound_calls_enabled", &self.inbound_calls_enabled);
        formatter.field("outbound_calls_enabled", &self.outbound_calls_enabled);
        formatter.finish()
    }
}
