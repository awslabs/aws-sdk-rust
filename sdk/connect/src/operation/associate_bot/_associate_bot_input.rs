// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateBotInput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>Configuration information of an Amazon Lex bot.</p>
    pub lex_bot: ::std::option::Option<crate::types::LexBot>,
    /// <p>The Amazon Lex V2 bot to associate with the instance.</p>
    pub lex_v2_bot: ::std::option::Option<crate::types::LexV2Bot>,
}
impl AssociateBotInput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>Configuration information of an Amazon Lex bot.</p>
    pub fn lex_bot(&self) -> ::std::option::Option<&crate::types::LexBot> {
        self.lex_bot.as_ref()
    }
    /// <p>The Amazon Lex V2 bot to associate with the instance.</p>
    pub fn lex_v2_bot(&self) -> ::std::option::Option<&crate::types::LexV2Bot> {
        self.lex_v2_bot.as_ref()
    }
}
impl AssociateBotInput {
    /// Creates a new builder-style object to manufacture [`AssociateBotInput`](crate::operation::associate_bot::AssociateBotInput).
    pub fn builder() -> crate::operation::associate_bot::builders::AssociateBotInputBuilder {
        crate::operation::associate_bot::builders::AssociateBotInputBuilder::default()
    }
}

/// A builder for [`AssociateBotInput`](crate::operation::associate_bot::AssociateBotInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociateBotInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) lex_bot: ::std::option::Option<crate::types::LexBot>,
    pub(crate) lex_v2_bot: ::std::option::Option<crate::types::LexV2Bot>,
}
impl AssociateBotInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>Configuration information of an Amazon Lex bot.</p>
    pub fn lex_bot(mut self, input: crate::types::LexBot) -> Self {
        self.lex_bot = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration information of an Amazon Lex bot.</p>
    pub fn set_lex_bot(mut self, input: ::std::option::Option<crate::types::LexBot>) -> Self {
        self.lex_bot = input;
        self
    }
    /// <p>Configuration information of an Amazon Lex bot.</p>
    pub fn get_lex_bot(&self) -> &::std::option::Option<crate::types::LexBot> {
        &self.lex_bot
    }
    /// <p>The Amazon Lex V2 bot to associate with the instance.</p>
    pub fn lex_v2_bot(mut self, input: crate::types::LexV2Bot) -> Self {
        self.lex_v2_bot = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Lex V2 bot to associate with the instance.</p>
    pub fn set_lex_v2_bot(mut self, input: ::std::option::Option<crate::types::LexV2Bot>) -> Self {
        self.lex_v2_bot = input;
        self
    }
    /// <p>The Amazon Lex V2 bot to associate with the instance.</p>
    pub fn get_lex_v2_bot(&self) -> &::std::option::Option<crate::types::LexV2Bot> {
        &self.lex_v2_bot
    }
    /// Consumes the builder and constructs a [`AssociateBotInput`](crate::operation::associate_bot::AssociateBotInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::associate_bot::AssociateBotInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::associate_bot::AssociateBotInput {
            instance_id: self.instance_id,
            lex_bot: self.lex_bot,
            lex_v2_bot: self.lex_v2_bot,
        })
    }
}
