// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListQueuesInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The type of queue.</p>
    #[doc(hidden)]
    pub queue_types: std::option::Option<std::vec::Vec<crate::types::QueueType>>,
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return per page. The default MaxResult size is 100.</p>
    #[doc(hidden)]
    pub max_results: i32,
}
impl ListQueuesInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The type of queue.</p>
    pub fn queue_types(&self) -> std::option::Option<&[crate::types::QueueType]> {
        self.queue_types.as_deref()
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return per page. The default MaxResult size is 100.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
}
impl ListQueuesInput {
    /// Creates a new builder-style object to manufacture [`ListQueuesInput`](crate::operation::list_queues::ListQueuesInput).
    pub fn builder() -> crate::operation::list_queues::builders::ListQueuesInputBuilder {
        crate::operation::list_queues::builders::ListQueuesInputBuilder::default()
    }
}

/// A builder for [`ListQueuesInput`](crate::operation::list_queues::ListQueuesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListQueuesInputBuilder {
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) queue_types: std::option::Option<std::vec::Vec<crate::types::QueueType>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListQueuesInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// Appends an item to `queue_types`.
    ///
    /// To override the contents of this collection use [`set_queue_types`](Self::set_queue_types).
    ///
    /// <p>The type of queue.</p>
    pub fn queue_types(mut self, input: crate::types::QueueType) -> Self {
        let mut v = self.queue_types.unwrap_or_default();
        v.push(input);
        self.queue_types = Some(v);
        self
    }
    /// <p>The type of queue.</p>
    pub fn set_queue_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::QueueType>>,
    ) -> Self {
        self.queue_types = input;
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return per page. The default MaxResult size is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return per page. The default MaxResult size is 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListQueuesInput`](crate::operation::list_queues::ListQueuesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_queues::ListQueuesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_queues::ListQueuesInput {
            instance_id: self.instance_id,
            queue_types: self.queue_types,
            next_token: self.next_token,
            max_results: self.max_results.unwrap_or_default(),
        })
    }
}
