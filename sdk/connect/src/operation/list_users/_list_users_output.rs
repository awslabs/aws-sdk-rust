// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListUsersOutput {
    /// <p>Information about the users.</p>
    pub user_summary_list: ::std::option::Option<::std::vec::Vec<crate::types::UserSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListUsersOutput {
    /// <p>Information about the users.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_summary_list.is_none()`.
    pub fn user_summary_list(&self) -> &[crate::types::UserSummary] {
        self.user_summary_list.as_deref().unwrap_or_default()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListUsersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListUsersOutput {
    /// Creates a new builder-style object to manufacture [`ListUsersOutput`](crate::operation::list_users::ListUsersOutput).
    pub fn builder() -> crate::operation::list_users::builders::ListUsersOutputBuilder {
        crate::operation::list_users::builders::ListUsersOutputBuilder::default()
    }
}

/// A builder for [`ListUsersOutput`](crate::operation::list_users::ListUsersOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListUsersOutputBuilder {
    pub(crate) user_summary_list: ::std::option::Option<::std::vec::Vec<crate::types::UserSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListUsersOutputBuilder {
    /// Appends an item to `user_summary_list`.
    ///
    /// To override the contents of this collection use [`set_user_summary_list`](Self::set_user_summary_list).
    ///
    /// <p>Information about the users.</p>
    pub fn user_summary_list(mut self, input: crate::types::UserSummary) -> Self {
        let mut v = self.user_summary_list.unwrap_or_default();
        v.push(input);
        self.user_summary_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the users.</p>
    pub fn set_user_summary_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UserSummary>>) -> Self {
        self.user_summary_list = input;
        self
    }
    /// <p>Information about the users.</p>
    pub fn get_user_summary_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UserSummary>> {
        &self.user_summary_list
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListUsersOutput`](crate::operation::list_users::ListUsersOutput).
    pub fn build(self) -> crate::operation::list_users::ListUsersOutput {
        crate::operation::list_users::ListUsersOutput {
            user_summary_list: self.user_summary_list,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
