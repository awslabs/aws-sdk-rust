// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchAvailablePhoneNumbersInput {
    /// <p>The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to.</p>
    #[doc(hidden)]
    pub target_arn: std::option::Option<std::string::String>,
    /// <p>The ISO country code.</p>
    #[doc(hidden)]
    pub phone_number_country_code: std::option::Option<crate::types::PhoneNumberCountryCode>,
    /// <p>The type of phone number.</p>
    #[doc(hidden)]
    pub phone_number_type: std::option::Option<crate::types::PhoneNumberType>,
    /// <p>The prefix of the phone number. If provided, it must contain <code>+</code> as part of the country code.</p>
    #[doc(hidden)]
    pub phone_number_prefix: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return per page.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl SearchAvailablePhoneNumbersInput {
    /// <p>The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to.</p>
    pub fn target_arn(&self) -> std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>The ISO country code.</p>
    pub fn phone_number_country_code(
        &self,
    ) -> std::option::Option<&crate::types::PhoneNumberCountryCode> {
        self.phone_number_country_code.as_ref()
    }
    /// <p>The type of phone number.</p>
    pub fn phone_number_type(&self) -> std::option::Option<&crate::types::PhoneNumberType> {
        self.phone_number_type.as_ref()
    }
    /// <p>The prefix of the phone number. If provided, it must contain <code>+</code> as part of the country code.</p>
    pub fn phone_number_prefix(&self) -> std::option::Option<&str> {
        self.phone_number_prefix.as_deref()
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl SearchAvailablePhoneNumbersInput {
    /// Creates a new builder-style object to manufacture [`SearchAvailablePhoneNumbersInput`](crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput).
    pub fn builder() -> crate::operation::search_available_phone_numbers::builders::SearchAvailablePhoneNumbersInputBuilder{
        crate::operation::search_available_phone_numbers::builders::SearchAvailablePhoneNumbersInputBuilder::default()
    }
}

/// A builder for [`SearchAvailablePhoneNumbersInput`](crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchAvailablePhoneNumbersInputBuilder {
    pub(crate) target_arn: std::option::Option<std::string::String>,
    pub(crate) phone_number_country_code: std::option::Option<crate::types::PhoneNumberCountryCode>,
    pub(crate) phone_number_type: std::option::Option<crate::types::PhoneNumberType>,
    pub(crate) phone_number_prefix: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl SearchAvailablePhoneNumbersInputBuilder {
    /// <p>The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to.</p>
    pub fn target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution groups that phone numbers are claimed to.</p>
    pub fn set_target_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The ISO country code.</p>
    pub fn phone_number_country_code(
        mut self,
        input: crate::types::PhoneNumberCountryCode,
    ) -> Self {
        self.phone_number_country_code = Some(input);
        self
    }
    /// <p>The ISO country code.</p>
    pub fn set_phone_number_country_code(
        mut self,
        input: std::option::Option<crate::types::PhoneNumberCountryCode>,
    ) -> Self {
        self.phone_number_country_code = input;
        self
    }
    /// <p>The type of phone number.</p>
    pub fn phone_number_type(mut self, input: crate::types::PhoneNumberType) -> Self {
        self.phone_number_type = Some(input);
        self
    }
    /// <p>The type of phone number.</p>
    pub fn set_phone_number_type(
        mut self,
        input: std::option::Option<crate::types::PhoneNumberType>,
    ) -> Self {
        self.phone_number_type = input;
        self
    }
    /// <p>The prefix of the phone number. If provided, it must contain <code>+</code> as part of the country code.</p>
    pub fn phone_number_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number_prefix = Some(input.into());
        self
    }
    /// <p>The prefix of the phone number. If provided, it must contain <code>+</code> as part of the country code.</p>
    pub fn set_phone_number_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.phone_number_prefix = input;
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`SearchAvailablePhoneNumbersInput`](crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersInput {
                target_arn: self.target_arn,
                phone_number_country_code: self.phone_number_country_code,
                phone_number_type: self.phone_number_type,
                phone_number_prefix: self.phone_number_prefix,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
