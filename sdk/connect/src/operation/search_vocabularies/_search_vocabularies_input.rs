// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchVocabulariesInput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return per page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the custom vocabulary.</p>
    pub state: ::std::option::Option<crate::types::VocabularyState>,
    /// <p>The starting pattern of the name of the vocabulary.</p>
    pub name_starts_with: ::std::option::Option<::std::string::String>,
    /// <p>The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html">What is Amazon Transcribe?</a> </p>
    pub language_code: ::std::option::Option<crate::types::VocabularyLanguageCode>,
}
impl SearchVocabulariesInput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The current state of the custom vocabulary.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::VocabularyState> {
        self.state.as_ref()
    }
    /// <p>The starting pattern of the name of the vocabulary.</p>
    pub fn name_starts_with(&self) -> ::std::option::Option<&str> {
        self.name_starts_with.as_deref()
    }
    /// <p>The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html">What is Amazon Transcribe?</a> </p>
    pub fn language_code(&self) -> ::std::option::Option<&crate::types::VocabularyLanguageCode> {
        self.language_code.as_ref()
    }
}
impl SearchVocabulariesInput {
    /// Creates a new builder-style object to manufacture [`SearchVocabulariesInput`](crate::operation::search_vocabularies::SearchVocabulariesInput).
    pub fn builder() -> crate::operation::search_vocabularies::builders::SearchVocabulariesInputBuilder {
        crate::operation::search_vocabularies::builders::SearchVocabulariesInputBuilder::default()
    }
}

/// A builder for [`SearchVocabulariesInput`](crate::operation::search_vocabularies::SearchVocabulariesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchVocabulariesInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::VocabularyState>,
    pub(crate) name_starts_with: ::std::option::Option<::std::string::String>,
    pub(crate) language_code: ::std::option::Option<crate::types::VocabularyLanguageCode>,
}
impl SearchVocabulariesInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The current state of the custom vocabulary.</p>
    pub fn state(mut self, input: crate::types::VocabularyState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the custom vocabulary.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::VocabularyState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the custom vocabulary.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::VocabularyState> {
        &self.state
    }
    /// <p>The starting pattern of the name of the vocabulary.</p>
    pub fn name_starts_with(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name_starts_with = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The starting pattern of the name of the vocabulary.</p>
    pub fn set_name_starts_with(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name_starts_with = input;
        self
    }
    /// <p>The starting pattern of the name of the vocabulary.</p>
    pub fn get_name_starts_with(&self) -> &::std::option::Option<::std::string::String> {
        &self.name_starts_with
    }
    /// <p>The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html">What is Amazon Transcribe?</a> </p>
    pub fn language_code(mut self, input: crate::types::VocabularyLanguageCode) -> Self {
        self.language_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html">What is Amazon Transcribe?</a> </p>
    pub fn set_language_code(mut self, input: ::std::option::Option<crate::types::VocabularyLanguageCode>) -> Self {
        self.language_code = input;
        self
    }
    /// <p>The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html">What is Amazon Transcribe?</a> </p>
    pub fn get_language_code(&self) -> &::std::option::Option<crate::types::VocabularyLanguageCode> {
        &self.language_code
    }
    /// Consumes the builder and constructs a [`SearchVocabulariesInput`](crate::operation::search_vocabularies::SearchVocabulariesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::search_vocabularies::SearchVocabulariesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::search_vocabularies::SearchVocabulariesInput {
            instance_id: self.instance_id,
            max_results: self.max_results,
            next_token: self.next_token,
            state: self.state,
            name_starts_with: self.name_starts_with,
            language_code: self.language_code,
        })
    }
}
