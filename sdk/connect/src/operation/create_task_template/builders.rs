// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_task_template::_create_task_template_output::CreateTaskTemplateOutputBuilder;

pub use crate::operation::create_task_template::_create_task_template_input::CreateTaskTemplateInputBuilder;

/// Fluent builder constructing a request to `CreateTaskTemplate`.
///
/// <p>Creates a new task template in the specified Amazon Connect instance.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateTaskTemplateFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_task_template::builders::CreateTaskTemplateInputBuilder,
}
impl CreateTaskTemplateFluentBuilder {
    /// Creates a new `CreateTaskTemplate`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_task_template::CreateTaskTemplate,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_task_template::CreateTaskTemplateError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_task_template::CreateTaskTemplateOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_task_template::CreateTaskTemplateError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>The name of the task template.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the task template.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The description of the task template.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the task template.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The identifier of the flow that runs by default when a task is created by referencing this template.</p>
    pub fn contact_flow_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_flow_id(input.into());
        self
    }
    /// <p>The identifier of the flow that runs by default when a task is created by referencing this template.</p>
    pub fn set_contact_flow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_contact_flow_id(input);
        self
    }
    /// <p>Constraints that are applicable to the fields listed.</p>
    pub fn constraints(mut self, input: crate::types::TaskTemplateConstraints) -> Self {
        self.inner = self.inner.constraints(input);
        self
    }
    /// <p>Constraints that are applicable to the fields listed.</p>
    pub fn set_constraints(
        mut self,
        input: std::option::Option<crate::types::TaskTemplateConstraints>,
    ) -> Self {
        self.inner = self.inner.set_constraints(input);
        self
    }
    /// <p>The default values for fields when a task is created by referencing this template.</p>
    pub fn defaults(mut self, input: crate::types::TaskTemplateDefaults) -> Self {
        self.inner = self.inner.defaults(input);
        self
    }
    /// <p>The default values for fields when a task is created by referencing this template.</p>
    pub fn set_defaults(
        mut self,
        input: std::option::Option<crate::types::TaskTemplateDefaults>,
    ) -> Self {
        self.inner = self.inner.set_defaults(input);
        self
    }
    /// <p>Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created. </p>
    pub fn status(mut self, input: crate::types::TaskTemplateStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>Marks a template as <code>ACTIVE</code> or <code>INACTIVE</code> for a task to refer to it. Tasks can only be created from <code>ACTIVE</code> templates. If a template is marked as <code>INACTIVE</code>, then a task that refers to this template cannot be created. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::TaskTemplateStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// Appends an item to `Fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>Fields that are part of the template.</p>
    pub fn fields(mut self, input: crate::types::TaskTemplateField) -> Self {
        self.inner = self.inner.fields(input);
        self
    }
    /// <p>Fields that are part of the template.</p>
    pub fn set_fields(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TaskTemplateField>>,
    ) -> Self {
        self.inner = self.inner.set_fields(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}
