// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_traffic_distribution::_update_traffic_distribution_output::UpdateTrafficDistributionOutputBuilder;

pub use crate::operation::update_traffic_distribution::_update_traffic_distribution_input::UpdateTrafficDistributionInputBuilder;

impl crate::operation::update_traffic_distribution::builders::UpdateTrafficDistributionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_traffic_distribution::UpdateTrafficDistributionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_traffic_distribution::UpdateTrafficDistributionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_traffic_distribution();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateTrafficDistribution`.
///
/// <p>Updates the traffic distribution for a given traffic distribution group.</p><note>
/// <p>The <code>SignInConfig</code> distribution is available only on a default <code>TrafficDistributionGroup</code> (see the <code>IsDefault</code> parameter in the <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_TrafficDistributionGroup.html">TrafficDistributionGroup</a> data type). If you call <code>UpdateTrafficDistribution</code> with a modified <code>SignInConfig</code> and a non-default <code>TrafficDistributionGroup</code>, an <code>InvalidRequestException</code> is returned.</p>
/// </note>
/// <p>For more information about updating a traffic distribution group, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/update-telephony-traffic-distribution.html">Update telephony traffic distribution across Amazon Web Services Regions </a> in the <i>Amazon Connect Administrator Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateTrafficDistributionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_traffic_distribution::builders::UpdateTrafficDistributionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_traffic_distribution::UpdateTrafficDistributionOutput,
        crate::operation::update_traffic_distribution::UpdateTrafficDistributionError,
    > for UpdateTrafficDistributionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_traffic_distribution::UpdateTrafficDistributionOutput,
            crate::operation::update_traffic_distribution::UpdateTrafficDistributionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateTrafficDistributionFluentBuilder {
    /// Creates a new `UpdateTrafficDistribution`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateTrafficDistribution as a reference.
    pub fn as_input(&self) -> &crate::operation::update_traffic_distribution::builders::UpdateTrafficDistributionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_traffic_distribution::UpdateTrafficDistributionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_traffic_distribution::UpdateTrafficDistributionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_traffic_distribution::UpdateTrafficDistribution::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_traffic_distribution::UpdateTrafficDistribution::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_traffic_distribution::UpdateTrafficDistributionOutput,
        crate::operation::update_traffic_distribution::UpdateTrafficDistributionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_id()
    }
    /// <p>The distribution of traffic between the instance and its replica(s).</p>
    pub fn telephony_config(mut self, input: crate::types::TelephonyConfig) -> Self {
        self.inner = self.inner.telephony_config(input);
        self
    }
    /// <p>The distribution of traffic between the instance and its replica(s).</p>
    pub fn set_telephony_config(mut self, input: ::std::option::Option<crate::types::TelephonyConfig>) -> Self {
        self.inner = self.inner.set_telephony_config(input);
        self
    }
    /// <p>The distribution of traffic between the instance and its replica(s).</p>
    pub fn get_telephony_config(&self) -> &::std::option::Option<crate::types::TelephonyConfig> {
        self.inner.get_telephony_config()
    }
    /// <p>The distribution that determines which Amazon Web Services Regions should be used to sign in agents in to both the instance and its replica(s).</p>
    pub fn sign_in_config(mut self, input: crate::types::SignInConfig) -> Self {
        self.inner = self.inner.sign_in_config(input);
        self
    }
    /// <p>The distribution that determines which Amazon Web Services Regions should be used to sign in agents in to both the instance and its replica(s).</p>
    pub fn set_sign_in_config(mut self, input: ::std::option::Option<crate::types::SignInConfig>) -> Self {
        self.inner = self.inner.set_sign_in_config(input);
        self
    }
    /// <p>The distribution that determines which Amazon Web Services Regions should be used to sign in agents in to both the instance and its replica(s).</p>
    pub fn get_sign_in_config(&self) -> &::std::option::Option<crate::types::SignInConfig> {
        self.inner.get_sign_in_config()
    }
    /// <p>The distribution of agents between the instance and its replica(s).</p>
    pub fn agent_config(mut self, input: crate::types::AgentConfig) -> Self {
        self.inner = self.inner.agent_config(input);
        self
    }
    /// <p>The distribution of agents between the instance and its replica(s).</p>
    pub fn set_agent_config(mut self, input: ::std::option::Option<crate::types::AgentConfig>) -> Self {
        self.inner = self.inner.set_agent_config(input);
        self
    }
    /// <p>The distribution of agents between the instance and its replica(s).</p>
    pub fn get_agent_config(&self) -> &::std::option::Option<crate::types::AgentConfig> {
        self.inner.get_agent_config()
    }
}
