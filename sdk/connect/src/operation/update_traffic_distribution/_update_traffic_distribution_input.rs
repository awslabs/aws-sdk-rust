// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTrafficDistributionInput {
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The distribution of traffic between the instance and its replica(s).</p>
    pub telephony_config: ::std::option::Option<crate::types::TelephonyConfig>,
    /// <p>The distribution that determines which Amazon Web Services Regions should be used to sign in agents in to both the instance and its replica(s).</p>
    pub sign_in_config: ::std::option::Option<crate::types::SignInConfig>,
    /// <p>The distribution of agents between the instance and its replica(s).</p>
    pub agent_config: ::std::option::Option<crate::types::AgentConfig>,
}
impl UpdateTrafficDistributionInput {
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The distribution of traffic between the instance and its replica(s).</p>
    pub fn telephony_config(&self) -> ::std::option::Option<&crate::types::TelephonyConfig> {
        self.telephony_config.as_ref()
    }
    /// <p>The distribution that determines which Amazon Web Services Regions should be used to sign in agents in to both the instance and its replica(s).</p>
    pub fn sign_in_config(&self) -> ::std::option::Option<&crate::types::SignInConfig> {
        self.sign_in_config.as_ref()
    }
    /// <p>The distribution of agents between the instance and its replica(s).</p>
    pub fn agent_config(&self) -> ::std::option::Option<&crate::types::AgentConfig> {
        self.agent_config.as_ref()
    }
}
impl UpdateTrafficDistributionInput {
    /// Creates a new builder-style object to manufacture [`UpdateTrafficDistributionInput`](crate::operation::update_traffic_distribution::UpdateTrafficDistributionInput).
    pub fn builder() -> crate::operation::update_traffic_distribution::builders::UpdateTrafficDistributionInputBuilder {
        crate::operation::update_traffic_distribution::builders::UpdateTrafficDistributionInputBuilder::default()
    }
}

/// A builder for [`UpdateTrafficDistributionInput`](crate::operation::update_traffic_distribution::UpdateTrafficDistributionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateTrafficDistributionInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) telephony_config: ::std::option::Option<crate::types::TelephonyConfig>,
    pub(crate) sign_in_config: ::std::option::Option<crate::types::SignInConfig>,
    pub(crate) agent_config: ::std::option::Option<crate::types::AgentConfig>,
}
impl UpdateTrafficDistributionInputBuilder {
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the traffic distribution group. This can be the ID or the ARN if the API is being called in the Region where the traffic distribution group was created. The ARN must be provided if the call is from the replicated Region.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The distribution of traffic between the instance and its replica(s).</p>
    pub fn telephony_config(mut self, input: crate::types::TelephonyConfig) -> Self {
        self.telephony_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distribution of traffic between the instance and its replica(s).</p>
    pub fn set_telephony_config(mut self, input: ::std::option::Option<crate::types::TelephonyConfig>) -> Self {
        self.telephony_config = input;
        self
    }
    /// <p>The distribution of traffic between the instance and its replica(s).</p>
    pub fn get_telephony_config(&self) -> &::std::option::Option<crate::types::TelephonyConfig> {
        &self.telephony_config
    }
    /// <p>The distribution that determines which Amazon Web Services Regions should be used to sign in agents in to both the instance and its replica(s).</p>
    pub fn sign_in_config(mut self, input: crate::types::SignInConfig) -> Self {
        self.sign_in_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distribution that determines which Amazon Web Services Regions should be used to sign in agents in to both the instance and its replica(s).</p>
    pub fn set_sign_in_config(mut self, input: ::std::option::Option<crate::types::SignInConfig>) -> Self {
        self.sign_in_config = input;
        self
    }
    /// <p>The distribution that determines which Amazon Web Services Regions should be used to sign in agents in to both the instance and its replica(s).</p>
    pub fn get_sign_in_config(&self) -> &::std::option::Option<crate::types::SignInConfig> {
        &self.sign_in_config
    }
    /// <p>The distribution of agents between the instance and its replica(s).</p>
    pub fn agent_config(mut self, input: crate::types::AgentConfig) -> Self {
        self.agent_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distribution of agents between the instance and its replica(s).</p>
    pub fn set_agent_config(mut self, input: ::std::option::Option<crate::types::AgentConfig>) -> Self {
        self.agent_config = input;
        self
    }
    /// <p>The distribution of agents between the instance and its replica(s).</p>
    pub fn get_agent_config(&self) -> &::std::option::Option<crate::types::AgentConfig> {
        &self.agent_config
    }
    /// Consumes the builder and constructs a [`UpdateTrafficDistributionInput`](crate::operation::update_traffic_distribution::UpdateTrafficDistributionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_traffic_distribution::UpdateTrafficDistributionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_traffic_distribution::UpdateTrafficDistributionInput {
            id: self.id,
            telephony_config: self.telephony_config,
            sign_in_config: self.sign_in_config,
            agent_config: self.agent_config,
        })
    }
}
