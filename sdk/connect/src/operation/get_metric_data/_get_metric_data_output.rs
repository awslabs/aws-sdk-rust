// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMetricDataOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    /// <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the historical metrics.</p>
    /// <p>If no grouping is specified, a summary of metric data is returned.</p>
    #[doc(hidden)]
    pub metric_results: std::option::Option<std::vec::Vec<crate::types::HistoricalMetricResult>>,
    _request_id: Option<String>,
}
impl GetMetricDataOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    /// <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the historical metrics.</p>
    /// <p>If no grouping is specified, a summary of metric data is returned.</p>
    pub fn metric_results(&self) -> std::option::Option<&[crate::types::HistoricalMetricResult]> {
        self.metric_results.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetMetricDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMetricDataOutput {
    /// Creates a new builder-style object to manufacture [`GetMetricDataOutput`](crate::operation::get_metric_data::GetMetricDataOutput).
    pub fn builder() -> crate::operation::get_metric_data::builders::GetMetricDataOutputBuilder {
        crate::operation::get_metric_data::builders::GetMetricDataOutputBuilder::default()
    }
}

/// A builder for [`GetMetricDataOutput`](crate::operation::get_metric_data::GetMetricDataOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetMetricDataOutputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) metric_results:
        std::option::Option<std::vec::Vec<crate::types::HistoricalMetricResult>>,
    _request_id: Option<String>,
}
impl GetMetricDataOutputBuilder {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    /// <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    /// <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `metric_results`.
    ///
    /// To override the contents of this collection use [`set_metric_results`](Self::set_metric_results).
    ///
    /// <p>Information about the historical metrics.</p>
    /// <p>If no grouping is specified, a summary of metric data is returned.</p>
    pub fn metric_results(mut self, input: crate::types::HistoricalMetricResult) -> Self {
        let mut v = self.metric_results.unwrap_or_default();
        v.push(input);
        self.metric_results = Some(v);
        self
    }
    /// <p>Information about the historical metrics.</p>
    /// <p>If no grouping is specified, a summary of metric data is returned.</p>
    pub fn set_metric_results(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HistoricalMetricResult>>,
    ) -> Self {
        self.metric_results = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMetricDataOutput`](crate::operation::get_metric_data::GetMetricDataOutput).
    pub fn build(self) -> crate::operation::get_metric_data::GetMetricDataOutput {
        crate::operation::get_metric_data::GetMetricDataOutput {
            next_token: self.next_token,
            metric_results: self.metric_results,
            _request_id: self._request_id,
        }
    }
}
