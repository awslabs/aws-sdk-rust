// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateHoursOfOperationInput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the hours of operation.</p>
    pub hours_of_operation_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the hours of operation.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the hours of operation.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The time zone of the hours of operation.</p>
    pub time_zone: ::std::option::Option<::std::string::String>,
    /// <p>Configuration information of the hours of operation.</p>
    pub config: ::std::option::Option<::std::vec::Vec<crate::types::HoursOfOperationConfig>>,
}
impl UpdateHoursOfOperationInput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The identifier of the hours of operation.</p>
    pub fn hours_of_operation_id(&self) -> ::std::option::Option<&str> {
        self.hours_of_operation_id.as_deref()
    }
    /// <p>The name of the hours of operation.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the hours of operation.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The time zone of the hours of operation.</p>
    pub fn time_zone(&self) -> ::std::option::Option<&str> {
        self.time_zone.as_deref()
    }
    /// <p>Configuration information of the hours of operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.config.is_none()`.
    pub fn config(&self) -> &[crate::types::HoursOfOperationConfig] {
        self.config.as_deref().unwrap_or_default()
    }
}
impl UpdateHoursOfOperationInput {
    /// Creates a new builder-style object to manufacture [`UpdateHoursOfOperationInput`](crate::operation::update_hours_of_operation::UpdateHoursOfOperationInput).
    pub fn builder() -> crate::operation::update_hours_of_operation::builders::UpdateHoursOfOperationInputBuilder {
        crate::operation::update_hours_of_operation::builders::UpdateHoursOfOperationInputBuilder::default()
    }
}

/// A builder for [`UpdateHoursOfOperationInput`](crate::operation::update_hours_of_operation::UpdateHoursOfOperationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateHoursOfOperationInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) hours_of_operation_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) time_zone: ::std::option::Option<::std::string::String>,
    pub(crate) config: ::std::option::Option<::std::vec::Vec<crate::types::HoursOfOperationConfig>>,
}
impl UpdateHoursOfOperationInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The identifier of the hours of operation.</p>
    /// This field is required.
    pub fn hours_of_operation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hours_of_operation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the hours of operation.</p>
    pub fn set_hours_of_operation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hours_of_operation_id = input;
        self
    }
    /// <p>The identifier of the hours of operation.</p>
    pub fn get_hours_of_operation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.hours_of_operation_id
    }
    /// <p>The name of the hours of operation.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hours of operation.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the hours of operation.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the hours of operation.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the hours of operation.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the hours of operation.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The time zone of the hours of operation.</p>
    pub fn time_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time zone of the hours of operation.</p>
    pub fn set_time_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_zone = input;
        self
    }
    /// <p>The time zone of the hours of operation.</p>
    pub fn get_time_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_zone
    }
    /// Appends an item to `config`.
    ///
    /// To override the contents of this collection use [`set_config`](Self::set_config).
    ///
    /// <p>Configuration information of the hours of operation.</p>
    pub fn config(mut self, input: crate::types::HoursOfOperationConfig) -> Self {
        let mut v = self.config.unwrap_or_default();
        v.push(input);
        self.config = ::std::option::Option::Some(v);
        self
    }
    /// <p>Configuration information of the hours of operation.</p>
    pub fn set_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HoursOfOperationConfig>>) -> Self {
        self.config = input;
        self
    }
    /// <p>Configuration information of the hours of operation.</p>
    pub fn get_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HoursOfOperationConfig>> {
        &self.config
    }
    /// Consumes the builder and constructs a [`UpdateHoursOfOperationInput`](crate::operation::update_hours_of_operation::UpdateHoursOfOperationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_hours_of_operation::UpdateHoursOfOperationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_hours_of_operation::UpdateHoursOfOperationInput {
            instance_id: self.instance_id,
            hours_of_operation_id: self.hours_of_operation_id,
            name: self.name,
            description: self.description,
            time_zone: self.time_zone,
            config: self.config,
        })
    }
}
