// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListContactReferencesInput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the initial contact.</p>
    pub contact_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of reference.</p>
    pub reference_types: ::std::option::Option<::std::vec::Vec<crate::types::ReferenceType>>,
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p> <important>
    /// <p>This is not expected to be set, because the value returned in the previous response is always null.</p>
    /// </important>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListContactReferencesInput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The identifier of the initial contact.</p>
    pub fn contact_id(&self) -> ::std::option::Option<&str> {
        self.contact_id.as_deref()
    }
    /// <p>The type of reference.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reference_types.is_none()`.
    pub fn reference_types(&self) -> &[crate::types::ReferenceType] {
        self.reference_types.as_deref().unwrap_or_default()
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p> <important>
    /// <p>This is not expected to be set, because the value returned in the previous response is always null.</p>
    /// </important>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListContactReferencesInput {
    /// Creates a new builder-style object to manufacture [`ListContactReferencesInput`](crate::operation::list_contact_references::ListContactReferencesInput).
    pub fn builder() -> crate::operation::list_contact_references::builders::ListContactReferencesInputBuilder {
        crate::operation::list_contact_references::builders::ListContactReferencesInputBuilder::default()
    }
}

/// A builder for [`ListContactReferencesInput`](crate::operation::list_contact_references::ListContactReferencesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListContactReferencesInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) contact_id: ::std::option::Option<::std::string::String>,
    pub(crate) reference_types: ::std::option::Option<::std::vec::Vec<crate::types::ReferenceType>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListContactReferencesInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The identifier of the initial contact.</p>
    /// This field is required.
    pub fn contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the initial contact.</p>
    pub fn set_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_id = input;
        self
    }
    /// <p>The identifier of the initial contact.</p>
    pub fn get_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_id
    }
    /// Appends an item to `reference_types`.
    ///
    /// To override the contents of this collection use [`set_reference_types`](Self::set_reference_types).
    ///
    /// <p>The type of reference.</p>
    pub fn reference_types(mut self, input: crate::types::ReferenceType) -> Self {
        let mut v = self.reference_types.unwrap_or_default();
        v.push(input);
        self.reference_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type of reference.</p>
    pub fn set_reference_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReferenceType>>) -> Self {
        self.reference_types = input;
        self
    }
    /// <p>The type of reference.</p>
    pub fn get_reference_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReferenceType>> {
        &self.reference_types
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p> <important>
    /// <p>This is not expected to be set, because the value returned in the previous response is always null.</p>
    /// </important>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p> <important>
    /// <p>This is not expected to be set, because the value returned in the previous response is always null.</p>
    /// </important>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p> <important>
    /// <p>This is not expected to be set, because the value returned in the previous response is always null.</p>
    /// </important>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListContactReferencesInput`](crate::operation::list_contact_references::ListContactReferencesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_contact_references::ListContactReferencesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_contact_references::ListContactReferencesInput {
            instance_id: self.instance_id,
            contact_id: self.contact_id,
            reference_types: self.reference_types,
            next_token: self.next_token,
        })
    }
}
