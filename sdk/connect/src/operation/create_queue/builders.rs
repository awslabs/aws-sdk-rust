// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_queue::_create_queue_output::CreateQueueOutputBuilder;

pub use crate::operation::create_queue::_create_queue_input::CreateQueueInputBuilder;

/// Fluent builder constructing a request to `CreateQueue`.
///
/// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
/// <p>Creates a new queue for the specified Amazon Connect instance.</p> <important>
/// <p>If the number being used in the input is claimed to a traffic distribution group, and you are calling this API using an instance in the Amazon Web Services Region where the traffic distribution group was created, you can use either a full phone number ARN or UUID value for the <code>OutboundCallerIdNumberId</code> value of the <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_OutboundCallerConfig">OutboundCallerConfig</a> request body parameter. However, if the number is claimed to a traffic distribution group and you are calling this API using an instance in the alternate Amazon Web Services Region associated with the traffic distribution group, you must provide a full phone number ARN. If a UUID is provided in this scenario, you will receive a <code>ResourceNotFoundException</code>.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateQueueFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_queue::builders::CreateQueueInputBuilder,
}
impl CreateQueueFluentBuilder {
    /// Creates a new `CreateQueue`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_queue::CreateQueue,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_queue::CreateQueueError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_queue::CreateQueueOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_queue::CreateQueueError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>The name of the queue.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the queue.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The description of the queue.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the queue.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The outbound caller ID name, number, and outbound whisper flow.</p>
    pub fn outbound_caller_config(mut self, input: crate::types::OutboundCallerConfig) -> Self {
        self.inner = self.inner.outbound_caller_config(input);
        self
    }
    /// <p>The outbound caller ID name, number, and outbound whisper flow.</p>
    pub fn set_outbound_caller_config(
        mut self,
        input: std::option::Option<crate::types::OutboundCallerConfig>,
    ) -> Self {
        self.inner = self.inner.set_outbound_caller_config(input);
        self
    }
    /// <p>The identifier for the hours of operation.</p>
    pub fn hours_of_operation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hours_of_operation_id(input.into());
        self
    }
    /// <p>The identifier for the hours of operation.</p>
    pub fn set_hours_of_operation_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hours_of_operation_id(input);
        self
    }
    /// <p>The maximum number of contacts that can be in the queue before it is considered full.</p>
    pub fn max_contacts(mut self, input: i32) -> Self {
        self.inner = self.inner.max_contacts(input);
        self
    }
    /// <p>The maximum number of contacts that can be in the queue before it is considered full.</p>
    pub fn set_max_contacts(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_contacts(input);
        self
    }
    /// Appends an item to `QuickConnectIds`.
    ///
    /// To override the contents of this collection use [`set_quick_connect_ids`](Self::set_quick_connect_ids).
    ///
    /// <p>The quick connects available to agents who are working the queue.</p>
    pub fn quick_connect_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.quick_connect_ids(input.into());
        self
    }
    /// <p>The quick connects available to agents who are working the queue.</p>
    pub fn set_quick_connect_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_quick_connect_ids(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
