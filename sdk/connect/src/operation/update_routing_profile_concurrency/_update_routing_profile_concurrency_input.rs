// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateRoutingProfileConcurrencyInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the routing profile.</p>
    #[doc(hidden)]
    pub routing_profile_id: std::option::Option<std::string::String>,
    /// <p>The channels that agents can handle in the Contact Control Panel (CCP).</p>
    #[doc(hidden)]
    pub media_concurrencies: std::option::Option<std::vec::Vec<crate::types::MediaConcurrency>>,
}
impl UpdateRoutingProfileConcurrencyInput {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The identifier of the routing profile.</p>
    pub fn routing_profile_id(&self) -> std::option::Option<&str> {
        self.routing_profile_id.as_deref()
    }
    /// <p>The channels that agents can handle in the Contact Control Panel (CCP).</p>
    pub fn media_concurrencies(&self) -> std::option::Option<&[crate::types::MediaConcurrency]> {
        self.media_concurrencies.as_deref()
    }
}
impl UpdateRoutingProfileConcurrencyInput {
    /// Creates a new builder-style object to manufacture [`UpdateRoutingProfileConcurrencyInput`](crate::operation::update_routing_profile_concurrency::UpdateRoutingProfileConcurrencyInput).
    pub fn builder() -> crate::operation::update_routing_profile_concurrency::builders::UpdateRoutingProfileConcurrencyInputBuilder{
        crate::operation::update_routing_profile_concurrency::builders::UpdateRoutingProfileConcurrencyInputBuilder::default()
    }
}

/// A builder for [`UpdateRoutingProfileConcurrencyInput`](crate::operation::update_routing_profile_concurrency::UpdateRoutingProfileConcurrencyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateRoutingProfileConcurrencyInputBuilder {
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) routing_profile_id: std::option::Option<std::string::String>,
    pub(crate) media_concurrencies:
        std::option::Option<std::vec::Vec<crate::types::MediaConcurrency>>,
}
impl UpdateRoutingProfileConcurrencyInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the routing profile.</p>
    pub fn routing_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.routing_profile_id = Some(input.into());
        self
    }
    /// <p>The identifier of the routing profile.</p>
    pub fn set_routing_profile_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.routing_profile_id = input;
        self
    }
    /// Appends an item to `media_concurrencies`.
    ///
    /// To override the contents of this collection use [`set_media_concurrencies`](Self::set_media_concurrencies).
    ///
    /// <p>The channels that agents can handle in the Contact Control Panel (CCP).</p>
    pub fn media_concurrencies(mut self, input: crate::types::MediaConcurrency) -> Self {
        let mut v = self.media_concurrencies.unwrap_or_default();
        v.push(input);
        self.media_concurrencies = Some(v);
        self
    }
    /// <p>The channels that agents can handle in the Contact Control Panel (CCP).</p>
    pub fn set_media_concurrencies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MediaConcurrency>>,
    ) -> Self {
        self.media_concurrencies = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateRoutingProfileConcurrencyInput`](crate::operation::update_routing_profile_concurrency::UpdateRoutingProfileConcurrencyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_routing_profile_concurrency::UpdateRoutingProfileConcurrencyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_routing_profile_concurrency::UpdateRoutingProfileConcurrencyInput {
                instance_id: self.instance_id
                ,
                routing_profile_id: self.routing_profile_id
                ,
                media_concurrencies: self.media_concurrencies
                ,
            }
        )
    }
}
