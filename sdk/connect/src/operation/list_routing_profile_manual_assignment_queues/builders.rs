// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_routing_profile_manual_assignment_queues::_list_routing_profile_manual_assignment_queues_output::ListRoutingProfileManualAssignmentQueuesOutputBuilder;

pub use crate::operation::list_routing_profile_manual_assignment_queues::_list_routing_profile_manual_assignment_queues_input::ListRoutingProfileManualAssignmentQueuesInputBuilder;

impl crate::operation::list_routing_profile_manual_assignment_queues::builders::ListRoutingProfileManualAssignmentQueuesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_routing_profile_manual_assignment_queues::ListRoutingProfileManualAssignmentQueuesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_routing_profile_manual_assignment_queues::ListRoutingProfileManualAssignmentQueuesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_routing_profile_manual_assignment_queues();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListRoutingProfileManualAssignmentQueues`.
///
/// <p>Lists the manual assignment queues associated with a routing profile.</p>
/// <p><b>Use cases</b></p>
/// <p>Following are common uses cases for this API:</p>
/// <ul>
/// <li>
/// <p>This API returns list of queues where contacts can be manually assigned or picked by an agent who has access to the Worklist app. The user can additionally filter on queues, if they have access to those queues (otherwise a invalid request exception will be thrown).</p>
/// <p>For information about how manual contact assignment works in the agent workspace, see the <a href="https://docs.aws.amazon.com/connect/latest/adminguide/worklist-app.html">Access the Worklist app in the Amazon Connect agent workspace</a> in the <i>Amazon Connect Administrator Guide</i>.</p></li>
/// </ul>
/// <p><b>Important things to know</b></p>
/// <ul>
/// <li>
/// <p>This API only returns the manual assignment queues associated with a routing profile. Use the ListRoutingProfileQueues API to list the auto assignment queues for the routing profile.</p></li>
/// </ul>
/// <p><b>Endpoints</b>: See <a href="https://docs.aws.amazon.com/general/latest/gr/connect_region.html">Amazon Connect endpoints and quotas</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListRoutingProfileManualAssignmentQueuesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_routing_profile_manual_assignment_queues::builders::ListRoutingProfileManualAssignmentQueuesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_routing_profile_manual_assignment_queues::ListRoutingProfileManualAssignmentQueuesOutput,
        crate::operation::list_routing_profile_manual_assignment_queues::ListRoutingProfileManualAssignmentQueuesError,
    > for ListRoutingProfileManualAssignmentQueuesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_routing_profile_manual_assignment_queues::ListRoutingProfileManualAssignmentQueuesOutput,
            crate::operation::list_routing_profile_manual_assignment_queues::ListRoutingProfileManualAssignmentQueuesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListRoutingProfileManualAssignmentQueuesFluentBuilder {
    /// Creates a new `ListRoutingProfileManualAssignmentQueuesFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListRoutingProfileManualAssignmentQueues as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::list_routing_profile_manual_assignment_queues::builders::ListRoutingProfileManualAssignmentQueuesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_routing_profile_manual_assignment_queues::ListRoutingProfileManualAssignmentQueuesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_routing_profile_manual_assignment_queues::ListRoutingProfileManualAssignmentQueuesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::list_routing_profile_manual_assignment_queues::ListRoutingProfileManualAssignmentQueues::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::list_routing_profile_manual_assignment_queues::ListRoutingProfileManualAssignmentQueues::orchestrate(
            &runtime_plugins,
            input,
        )
        .await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_routing_profile_manual_assignment_queues::ListRoutingProfileManualAssignmentQueuesOutput,
        crate::operation::list_routing_profile_manual_assignment_queues::ListRoutingProfileManualAssignmentQueuesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_routing_profile_manual_assignment_queues::paginator::ListRoutingProfileManualAssignmentQueuesPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_routing_profile_manual_assignment_queues::paginator::ListRoutingProfileManualAssignmentQueuesPaginator {
        crate::operation::list_routing_profile_manual_assignment_queues::paginator::ListRoutingProfileManualAssignmentQueuesPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_id()
    }
    /// <p>The identifier of the routing profile.</p>
    pub fn routing_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.routing_profile_id(input.into());
        self
    }
    /// <p>The identifier of the routing profile.</p>
    pub fn set_routing_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_routing_profile_id(input);
        self
    }
    /// <p>The identifier of the routing profile.</p>
    pub fn get_routing_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_routing_profile_id()
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
