// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_associate_approved_origin_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateApprovedOriginInput,
) {
    if let Some(var_1) = &input.origin {
        object.key("Origin").string(var_1);
    }
}

pub fn serialize_structure_associate_bot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateBotInput,
) {
    if let Some(var_2) = &input.lex_bot {
        let mut object_3 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_lex_bot(&mut object_3, var_2);
        object_3.finish();
    }
    if let Some(var_4) = &input.lex_v2_bot {
        let mut object_5 = object.key("LexV2Bot").start_object();
        crate::json_ser::serialize_structure_lex_v2_bot(&mut object_5, var_4);
        object_5.finish();
    }
}

pub fn serialize_structure_associate_instance_storage_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateInstanceStorageConfigInput,
) {
    if let Some(var_6) = &input.resource_type {
        object.key("ResourceType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.storage_config {
        let mut object_8 = object.key("StorageConfig").start_object();
        crate::json_ser::serialize_structure_instance_storage_config(&mut object_8, var_7);
        object_8.finish();
    }
}

pub fn serialize_structure_associate_lambda_function_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateLambdaFunctionInput,
) {
    if let Some(var_9) = &input.function_arn {
        object.key("FunctionArn").string(var_9);
    }
}

pub fn serialize_structure_associate_lex_bot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateLexBotInput,
) {
    if let Some(var_10) = &input.lex_bot {
        let mut object_11 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_lex_bot(&mut object_11, var_10);
        object_11.finish();
    }
}

pub fn serialize_structure_associate_queue_quick_connects_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateQueueQuickConnectsInput,
) {
    if let Some(var_12) = &input.quick_connect_ids {
        let mut array_13 = object.key("QuickConnectIds").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14);
            }
        }
        array_13.finish();
    }
}

pub fn serialize_structure_associate_routing_profile_queues_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateRoutingProfileQueuesInput,
) {
    if let Some(var_15) = &input.queue_configs {
        let mut array_16 = object.key("QueueConfigs").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_routing_profile_queue_config(
                    &mut object_18,
                    item_17,
                );
                object_18.finish();
            }
        }
        array_16.finish();
    }
}

pub fn serialize_structure_associate_security_key_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateSecurityKeyInput,
) {
    if let Some(var_19) = &input.key {
        object.key("Key").string(var_19);
    }
}

pub fn serialize_structure_create_contact_flow_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactFlowInput,
) {
    if let Some(var_20) = &input.content {
        object.key("Content").string(var_20);
    }
    if let Some(var_21) = &input.description {
        object.key("Description").string(var_21);
    }
    if let Some(var_22) = &input.name {
        object.key("Name").string(var_22);
    }
    if let Some(var_23) = &input.tags {
        let mut object_24 = object.key("Tags").start_object();
        for (key_25, value_26) in var_23 {
            {
                object_24.key(key_25).string(value_26);
            }
        }
        object_24.finish();
    }
    if let Some(var_27) = &input.r#type {
        object.key("Type").string(var_27.as_str());
    }
}

pub fn serialize_structure_create_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInstanceInput,
) {
    if let Some(var_28) = &input.client_token {
        object.key("ClientToken").string(var_28);
    }
    if let Some(var_29) = &input.directory_id {
        object.key("DirectoryId").string(var_29);
    }
    if let Some(var_30) = &input.identity_management_type {
        object.key("IdentityManagementType").string(var_30.as_str());
    }
    if let Some(var_31) = &input.inbound_calls_enabled {
        object.key("InboundCallsEnabled").boolean(*var_31);
    }
    if let Some(var_32) = &input.instance_alias {
        object.key("InstanceAlias").string(var_32);
    }
    if let Some(var_33) = &input.outbound_calls_enabled {
        object.key("OutboundCallsEnabled").boolean(*var_33);
    }
}

pub fn serialize_structure_create_integration_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIntegrationAssociationInput,
) {
    if let Some(var_34) = &input.integration_arn {
        object.key("IntegrationArn").string(var_34);
    }
    if let Some(var_35) = &input.integration_type {
        object.key("IntegrationType").string(var_35.as_str());
    }
    if let Some(var_36) = &input.source_application_name {
        object.key("SourceApplicationName").string(var_36);
    }
    if let Some(var_37) = &input.source_application_url {
        object.key("SourceApplicationUrl").string(var_37);
    }
    if let Some(var_38) = &input.source_type {
        object.key("SourceType").string(var_38.as_str());
    }
    if let Some(var_39) = &input.tags {
        let mut object_40 = object.key("Tags").start_object();
        for (key_41, value_42) in var_39 {
            {
                object_40.key(key_41).string(value_42);
            }
        }
        object_40.finish();
    }
}

pub fn serialize_structure_create_queue_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQueueInput,
) {
    if let Some(var_43) = &input.description {
        object.key("Description").string(var_43);
    }
    if let Some(var_44) = &input.hours_of_operation_id {
        object.key("HoursOfOperationId").string(var_44);
    }
    if let Some(var_45) = &input.max_contacts {
        object.key("MaxContacts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_45).into()),
        );
    }
    if let Some(var_46) = &input.name {
        object.key("Name").string(var_46);
    }
    if let Some(var_47) = &input.outbound_caller_config {
        let mut object_48 = object.key("OutboundCallerConfig").start_object();
        crate::json_ser::serialize_structure_outbound_caller_config(&mut object_48, var_47);
        object_48.finish();
    }
    if let Some(var_49) = &input.quick_connect_ids {
        let mut array_50 = object.key("QuickConnectIds").start_array();
        for item_51 in var_49 {
            {
                array_50.value().string(item_51);
            }
        }
        array_50.finish();
    }
    if let Some(var_52) = &input.tags {
        let mut object_53 = object.key("Tags").start_object();
        for (key_54, value_55) in var_52 {
            {
                object_53.key(key_54).string(value_55);
            }
        }
        object_53.finish();
    }
}

pub fn serialize_structure_create_quick_connect_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuickConnectInput,
) {
    if let Some(var_56) = &input.description {
        object.key("Description").string(var_56);
    }
    if let Some(var_57) = &input.name {
        object.key("Name").string(var_57);
    }
    if let Some(var_58) = &input.quick_connect_config {
        let mut object_59 = object.key("QuickConnectConfig").start_object();
        crate::json_ser::serialize_structure_quick_connect_config(&mut object_59, var_58);
        object_59.finish();
    }
    if let Some(var_60) = &input.tags {
        let mut object_61 = object.key("Tags").start_object();
        for (key_62, value_63) in var_60 {
            {
                object_61.key(key_62).string(value_63);
            }
        }
        object_61.finish();
    }
}

pub fn serialize_structure_create_routing_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRoutingProfileInput,
) {
    if let Some(var_64) = &input.default_outbound_queue_id {
        object.key("DefaultOutboundQueueId").string(var_64);
    }
    if let Some(var_65) = &input.description {
        object.key("Description").string(var_65);
    }
    if let Some(var_66) = &input.media_concurrencies {
        let mut array_67 = object.key("MediaConcurrencies").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_media_concurrency(&mut object_69, item_68);
                object_69.finish();
            }
        }
        array_67.finish();
    }
    if let Some(var_70) = &input.name {
        object.key("Name").string(var_70);
    }
    if let Some(var_71) = &input.queue_configs {
        let mut array_72 = object.key("QueueConfigs").start_array();
        for item_73 in var_71 {
            {
                let mut object_74 = array_72.value().start_object();
                crate::json_ser::serialize_structure_routing_profile_queue_config(
                    &mut object_74,
                    item_73,
                );
                object_74.finish();
            }
        }
        array_72.finish();
    }
    if let Some(var_75) = &input.tags {
        let mut object_76 = object.key("Tags").start_object();
        for (key_77, value_78) in var_75 {
            {
                object_76.key(key_77).string(value_78);
            }
        }
        object_76.finish();
    }
}

pub fn serialize_structure_create_use_case_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUseCaseInput,
) {
    if let Some(var_79) = &input.tags {
        let mut object_80 = object.key("Tags").start_object();
        for (key_81, value_82) in var_79 {
            {
                object_80.key(key_81).string(value_82);
            }
        }
        object_80.finish();
    }
    if let Some(var_83) = &input.use_case_type {
        object.key("UseCaseType").string(var_83.as_str());
    }
}

pub fn serialize_structure_create_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) {
    if let Some(var_84) = &input.directory_user_id {
        object.key("DirectoryUserId").string(var_84);
    }
    if let Some(var_85) = &input.hierarchy_group_id {
        object.key("HierarchyGroupId").string(var_85);
    }
    if let Some(var_86) = &input.identity_info {
        let mut object_87 = object.key("IdentityInfo").start_object();
        crate::json_ser::serialize_structure_user_identity_info(&mut object_87, var_86);
        object_87.finish();
    }
    if let Some(var_88) = &input.password {
        object.key("Password").string(var_88);
    }
    if let Some(var_89) = &input.phone_config {
        let mut object_90 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_user_phone_config(&mut object_90, var_89);
        object_90.finish();
    }
    if let Some(var_91) = &input.routing_profile_id {
        object.key("RoutingProfileId").string(var_91);
    }
    if let Some(var_92) = &input.security_profile_ids {
        let mut array_93 = object.key("SecurityProfileIds").start_array();
        for item_94 in var_92 {
            {
                array_93.value().string(item_94);
            }
        }
        array_93.finish();
    }
    if let Some(var_95) = &input.tags {
        let mut object_96 = object.key("Tags").start_object();
        for (key_97, value_98) in var_95 {
            {
                object_96.key(key_97).string(value_98);
            }
        }
        object_96.finish();
    }
    if let Some(var_99) = &input.username {
        object.key("Username").string(var_99);
    }
}

pub fn serialize_structure_create_user_hierarchy_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserHierarchyGroupInput,
) {
    if let Some(var_100) = &input.name {
        object.key("Name").string(var_100);
    }
    if let Some(var_101) = &input.parent_group_id {
        object.key("ParentGroupId").string(var_101);
    }
}

pub fn serialize_structure_disassociate_bot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateBotInput,
) {
    if let Some(var_102) = &input.lex_bot {
        let mut object_103 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_lex_bot(&mut object_103, var_102);
        object_103.finish();
    }
    if let Some(var_104) = &input.lex_v2_bot {
        let mut object_105 = object.key("LexV2Bot").start_object();
        crate::json_ser::serialize_structure_lex_v2_bot(&mut object_105, var_104);
        object_105.finish();
    }
}

pub fn serialize_structure_disassociate_queue_quick_connects_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateQueueQuickConnectsInput,
) {
    if let Some(var_106) = &input.quick_connect_ids {
        let mut array_107 = object.key("QuickConnectIds").start_array();
        for item_108 in var_106 {
            {
                array_107.value().string(item_108);
            }
        }
        array_107.finish();
    }
}

pub fn serialize_structure_disassociate_routing_profile_queues_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateRoutingProfileQueuesInput,
) {
    if let Some(var_109) = &input.queue_references {
        let mut array_110 = object.key("QueueReferences").start_array();
        for item_111 in var_109 {
            {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_routing_profile_queue_reference(
                    &mut object_112,
                    item_111,
                );
                object_112.finish();
            }
        }
        array_110.finish();
    }
}

pub fn serialize_structure_get_current_metric_data_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCurrentMetricDataInput,
) {
    if let Some(var_113) = &input.current_metrics {
        let mut array_114 = object.key("CurrentMetrics").start_array();
        for item_115 in var_113 {
            {
                let mut object_116 = array_114.value().start_object();
                crate::json_ser::serialize_structure_current_metric(&mut object_116, item_115);
                object_116.finish();
            }
        }
        array_114.finish();
    }
    if let Some(var_117) = &input.filters {
        let mut object_118 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_filters(&mut object_118, var_117);
        object_118.finish();
    }
    if let Some(var_119) = &input.groupings {
        let mut array_120 = object.key("Groupings").start_array();
        for item_121 in var_119 {
            {
                array_120.value().string(item_121.as_str());
            }
        }
        array_120.finish();
    }
    if let Some(var_122) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_122).into()),
        );
    }
    if let Some(var_123) = &input.next_token {
        object.key("NextToken").string(var_123);
    }
}

pub fn serialize_structure_get_metric_data_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMetricDataInput,
) {
    if let Some(var_124) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_124, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_125) = &input.filters {
        let mut object_126 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_filters(&mut object_126, var_125);
        object_126.finish();
    }
    if let Some(var_127) = &input.groupings {
        let mut array_128 = object.key("Groupings").start_array();
        for item_129 in var_127 {
            {
                array_128.value().string(item_129.as_str());
            }
        }
        array_128.finish();
    }
    if let Some(var_130) = &input.historical_metrics {
        let mut array_131 = object.key("HistoricalMetrics").start_array();
        for item_132 in var_130 {
            {
                let mut object_133 = array_131.value().start_object();
                crate::json_ser::serialize_structure_historical_metric(&mut object_133, item_132);
                object_133.finish();
            }
        }
        array_131.finish();
    }
    if let Some(var_134) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_134).into()),
        );
    }
    if let Some(var_135) = &input.next_token {
        object.key("NextToken").string(var_135);
    }
    if let Some(var_136) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_136, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_resume_contact_recording_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeContactRecordingInput,
) {
    if let Some(var_137) = &input.contact_id {
        object.key("ContactId").string(var_137);
    }
    if let Some(var_138) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_138);
    }
    if let Some(var_139) = &input.instance_id {
        object.key("InstanceId").string(var_139);
    }
}

pub fn serialize_structure_start_chat_contact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartChatContactInput,
) {
    if let Some(var_140) = &input.attributes {
        let mut object_141 = object.key("Attributes").start_object();
        for (key_142, value_143) in var_140 {
            {
                object_141.key(key_142).string(value_143);
            }
        }
        object_141.finish();
    }
    if let Some(var_144) = &input.client_token {
        object.key("ClientToken").string(var_144);
    }
    if let Some(var_145) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_145);
    }
    if let Some(var_146) = &input.initial_message {
        let mut object_147 = object.key("InitialMessage").start_object();
        crate::json_ser::serialize_structure_chat_message(&mut object_147, var_146);
        object_147.finish();
    }
    if let Some(var_148) = &input.instance_id {
        object.key("InstanceId").string(var_148);
    }
    if let Some(var_149) = &input.participant_details {
        let mut object_150 = object.key("ParticipantDetails").start_object();
        crate::json_ser::serialize_structure_participant_details(&mut object_150, var_149);
        object_150.finish();
    }
}

pub fn serialize_structure_start_contact_recording_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartContactRecordingInput,
) {
    if let Some(var_151) = &input.contact_id {
        object.key("ContactId").string(var_151);
    }
    if let Some(var_152) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_152);
    }
    if let Some(var_153) = &input.instance_id {
        object.key("InstanceId").string(var_153);
    }
    if let Some(var_154) = &input.voice_recording_configuration {
        let mut object_155 = object.key("VoiceRecordingConfiguration").start_object();
        crate::json_ser::serialize_structure_voice_recording_configuration(
            &mut object_155,
            var_154,
        );
        object_155.finish();
    }
}

pub fn serialize_structure_start_outbound_voice_contact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartOutboundVoiceContactInput,
) {
    if let Some(var_156) = &input.attributes {
        let mut object_157 = object.key("Attributes").start_object();
        for (key_158, value_159) in var_156 {
            {
                object_157.key(key_158).string(value_159);
            }
        }
        object_157.finish();
    }
    if let Some(var_160) = &input.client_token {
        object.key("ClientToken").string(var_160);
    }
    if let Some(var_161) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_161);
    }
    if let Some(var_162) = &input.destination_phone_number {
        object.key("DestinationPhoneNumber").string(var_162);
    }
    if let Some(var_163) = &input.instance_id {
        object.key("InstanceId").string(var_163);
    }
    if let Some(var_164) = &input.queue_id {
        object.key("QueueId").string(var_164);
    }
    if let Some(var_165) = &input.source_phone_number {
        object.key("SourcePhoneNumber").string(var_165);
    }
}

pub fn serialize_structure_start_task_contact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTaskContactInput,
) {
    if let Some(var_166) = &input.attributes {
        let mut object_167 = object.key("Attributes").start_object();
        for (key_168, value_169) in var_166 {
            {
                object_167.key(key_168).string(value_169);
            }
        }
        object_167.finish();
    }
    if let Some(var_170) = &input.client_token {
        object.key("ClientToken").string(var_170);
    }
    if let Some(var_171) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_171);
    }
    if let Some(var_172) = &input.description {
        object.key("Description").string(var_172);
    }
    if let Some(var_173) = &input.instance_id {
        object.key("InstanceId").string(var_173);
    }
    if let Some(var_174) = &input.name {
        object.key("Name").string(var_174);
    }
    if let Some(var_175) = &input.previous_contact_id {
        object.key("PreviousContactId").string(var_175);
    }
    if let Some(var_176) = &input.references {
        let mut object_177 = object.key("References").start_object();
        for (key_178, value_179) in var_176 {
            {
                let mut object_180 = object_177.key(key_178).start_object();
                crate::json_ser::serialize_structure_reference(&mut object_180, value_179);
                object_180.finish();
            }
        }
        object_177.finish();
    }
}

pub fn serialize_structure_stop_contact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopContactInput,
) {
    if let Some(var_181) = &input.contact_id {
        object.key("ContactId").string(var_181);
    }
    if let Some(var_182) = &input.instance_id {
        object.key("InstanceId").string(var_182);
    }
}

pub fn serialize_structure_stop_contact_recording_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopContactRecordingInput,
) {
    if let Some(var_183) = &input.contact_id {
        object.key("ContactId").string(var_183);
    }
    if let Some(var_184) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_184);
    }
    if let Some(var_185) = &input.instance_id {
        object.key("InstanceId").string(var_185);
    }
}

pub fn serialize_structure_suspend_contact_recording_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SuspendContactRecordingInput,
) {
    if let Some(var_186) = &input.contact_id {
        object.key("ContactId").string(var_186);
    }
    if let Some(var_187) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_187);
    }
    if let Some(var_188) = &input.instance_id {
        object.key("InstanceId").string(var_188);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_189) = &input.tags {
        let mut object_190 = object.key("tags").start_object();
        for (key_191, value_192) in var_189 {
            {
                object_190.key(key_191).string(value_192);
            }
        }
        object_190.finish();
    }
}

pub fn serialize_structure_update_contact_attributes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactAttributesInput,
) {
    if let Some(var_193) = &input.attributes {
        let mut object_194 = object.key("Attributes").start_object();
        for (key_195, value_196) in var_193 {
            {
                object_194.key(key_195).string(value_196);
            }
        }
        object_194.finish();
    }
    if let Some(var_197) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_197);
    }
    if let Some(var_198) = &input.instance_id {
        object.key("InstanceId").string(var_198);
    }
}

pub fn serialize_structure_update_contact_flow_content_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowContentInput,
) {
    if let Some(var_199) = &input.content {
        object.key("Content").string(var_199);
    }
}

pub fn serialize_structure_update_contact_flow_name_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowNameInput,
) {
    if let Some(var_200) = &input.description {
        object.key("Description").string(var_200);
    }
    if let Some(var_201) = &input.name {
        object.key("Name").string(var_201);
    }
}

pub fn serialize_structure_update_instance_attribute_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInstanceAttributeInput,
) {
    if let Some(var_202) = &input.value {
        object.key("Value").string(var_202);
    }
}

pub fn serialize_structure_update_instance_storage_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInstanceStorageConfigInput,
) {
    if let Some(var_203) = &input.storage_config {
        let mut object_204 = object.key("StorageConfig").start_object();
        crate::json_ser::serialize_structure_instance_storage_config(&mut object_204, var_203);
        object_204.finish();
    }
}

pub fn serialize_structure_update_queue_hours_of_operation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueHoursOfOperationInput,
) {
    if let Some(var_205) = &input.hours_of_operation_id {
        object.key("HoursOfOperationId").string(var_205);
    }
}

pub fn serialize_structure_update_queue_max_contacts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueMaxContactsInput,
) {
    if let Some(var_206) = &input.max_contacts {
        object.key("MaxContacts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_206).into()),
        );
    }
}

pub fn serialize_structure_update_queue_name_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueNameInput,
) {
    if let Some(var_207) = &input.description {
        object.key("Description").string(var_207);
    }
    if let Some(var_208) = &input.name {
        object.key("Name").string(var_208);
    }
}

pub fn serialize_structure_update_queue_outbound_caller_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueOutboundCallerConfigInput,
) {
    if let Some(var_209) = &input.outbound_caller_config {
        let mut object_210 = object.key("OutboundCallerConfig").start_object();
        crate::json_ser::serialize_structure_outbound_caller_config(&mut object_210, var_209);
        object_210.finish();
    }
}

pub fn serialize_structure_update_queue_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueStatusInput,
) {
    if let Some(var_211) = &input.status {
        object.key("Status").string(var_211.as_str());
    }
}

pub fn serialize_structure_update_quick_connect_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuickConnectConfigInput,
) {
    if let Some(var_212) = &input.quick_connect_config {
        let mut object_213 = object.key("QuickConnectConfig").start_object();
        crate::json_ser::serialize_structure_quick_connect_config(&mut object_213, var_212);
        object_213.finish();
    }
}

pub fn serialize_structure_update_quick_connect_name_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuickConnectNameInput,
) {
    if let Some(var_214) = &input.description {
        object.key("Description").string(var_214);
    }
    if let Some(var_215) = &input.name {
        object.key("Name").string(var_215);
    }
}

pub fn serialize_structure_update_routing_profile_concurrency_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileConcurrencyInput,
) {
    if let Some(var_216) = &input.media_concurrencies {
        let mut array_217 = object.key("MediaConcurrencies").start_array();
        for item_218 in var_216 {
            {
                let mut object_219 = array_217.value().start_object();
                crate::json_ser::serialize_structure_media_concurrency(&mut object_219, item_218);
                object_219.finish();
            }
        }
        array_217.finish();
    }
}

pub fn serialize_structure_update_routing_profile_default_outbound_queue_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileDefaultOutboundQueueInput,
) {
    if let Some(var_220) = &input.default_outbound_queue_id {
        object.key("DefaultOutboundQueueId").string(var_220);
    }
}

pub fn serialize_structure_update_routing_profile_name_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileNameInput,
) {
    if let Some(var_221) = &input.description {
        object.key("Description").string(var_221);
    }
    if let Some(var_222) = &input.name {
        object.key("Name").string(var_222);
    }
}

pub fn serialize_structure_update_routing_profile_queues_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileQueuesInput,
) {
    if let Some(var_223) = &input.queue_configs {
        let mut array_224 = object.key("QueueConfigs").start_array();
        for item_225 in var_223 {
            {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_routing_profile_queue_config(
                    &mut object_226,
                    item_225,
                );
                object_226.finish();
            }
        }
        array_224.finish();
    }
}

pub fn serialize_structure_update_user_hierarchy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserHierarchyInput,
) {
    if let Some(var_227) = &input.hierarchy_group_id {
        object.key("HierarchyGroupId").string(var_227);
    }
}

pub fn serialize_structure_update_user_hierarchy_group_name_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserHierarchyGroupNameInput,
) {
    if let Some(var_228) = &input.name {
        object.key("Name").string(var_228);
    }
}

pub fn serialize_structure_update_user_hierarchy_structure_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserHierarchyStructureInput,
) {
    if let Some(var_229) = &input.hierarchy_structure {
        let mut object_230 = object.key("HierarchyStructure").start_object();
        crate::json_ser::serialize_structure_hierarchy_structure_update(&mut object_230, var_229);
        object_230.finish();
    }
}

pub fn serialize_structure_update_user_identity_info_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserIdentityInfoInput,
) {
    if let Some(var_231) = &input.identity_info {
        let mut object_232 = object.key("IdentityInfo").start_object();
        crate::json_ser::serialize_structure_user_identity_info(&mut object_232, var_231);
        object_232.finish();
    }
}

pub fn serialize_structure_update_user_phone_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserPhoneConfigInput,
) {
    if let Some(var_233) = &input.phone_config {
        let mut object_234 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_user_phone_config(&mut object_234, var_233);
        object_234.finish();
    }
}

pub fn serialize_structure_update_user_routing_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserRoutingProfileInput,
) {
    if let Some(var_235) = &input.routing_profile_id {
        object.key("RoutingProfileId").string(var_235);
    }
}

pub fn serialize_structure_update_user_security_profiles_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserSecurityProfilesInput,
) {
    if let Some(var_236) = &input.security_profile_ids {
        let mut array_237 = object.key("SecurityProfileIds").start_array();
        for item_238 in var_236 {
            {
                array_237.value().string(item_238);
            }
        }
        array_237.finish();
    }
}

pub fn serialize_structure_lex_bot(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LexBot,
) {
    if let Some(var_239) = &input.name {
        object.key("Name").string(var_239);
    }
    if let Some(var_240) = &input.lex_region {
        object.key("LexRegion").string(var_240);
    }
}

pub fn serialize_structure_lex_v2_bot(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LexV2Bot,
) {
    if let Some(var_241) = &input.alias_arn {
        object.key("AliasArn").string(var_241);
    }
}

pub fn serialize_structure_instance_storage_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceStorageConfig,
) {
    if let Some(var_242) = &input.association_id {
        object.key("AssociationId").string(var_242);
    }
    if let Some(var_243) = &input.storage_type {
        object.key("StorageType").string(var_243.as_str());
    }
    if let Some(var_244) = &input.s3_config {
        let mut object_245 = object.key("S3Config").start_object();
        crate::json_ser::serialize_structure_s3_config(&mut object_245, var_244);
        object_245.finish();
    }
    if let Some(var_246) = &input.kinesis_video_stream_config {
        let mut object_247 = object.key("KinesisVideoStreamConfig").start_object();
        crate::json_ser::serialize_structure_kinesis_video_stream_config(&mut object_247, var_246);
        object_247.finish();
    }
    if let Some(var_248) = &input.kinesis_stream_config {
        let mut object_249 = object.key("KinesisStreamConfig").start_object();
        crate::json_ser::serialize_structure_kinesis_stream_config(&mut object_249, var_248);
        object_249.finish();
    }
    if let Some(var_250) = &input.kinesis_firehose_config {
        let mut object_251 = object.key("KinesisFirehoseConfig").start_object();
        crate::json_ser::serialize_structure_kinesis_firehose_config(&mut object_251, var_250);
        object_251.finish();
    }
}

pub fn serialize_structure_routing_profile_queue_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RoutingProfileQueueConfig,
) {
    if let Some(var_252) = &input.queue_reference {
        let mut object_253 = object.key("QueueReference").start_object();
        crate::json_ser::serialize_structure_routing_profile_queue_reference(
            &mut object_253,
            var_252,
        );
        object_253.finish();
    }
    if let Some(var_254) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_254).into()),
        );
    }
    if let Some(var_255) = &input.delay {
        object.key("Delay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_255).into()),
        );
    }
}

pub fn serialize_structure_outbound_caller_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutboundCallerConfig,
) {
    if let Some(var_256) = &input.outbound_caller_id_name {
        object.key("OutboundCallerIdName").string(var_256);
    }
    if let Some(var_257) = &input.outbound_caller_id_number_id {
        object.key("OutboundCallerIdNumberId").string(var_257);
    }
    if let Some(var_258) = &input.outbound_flow_id {
        object.key("OutboundFlowId").string(var_258);
    }
}

pub fn serialize_structure_quick_connect_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QuickConnectConfig,
) {
    if let Some(var_259) = &input.quick_connect_type {
        object.key("QuickConnectType").string(var_259.as_str());
    }
    if let Some(var_260) = &input.user_config {
        let mut object_261 = object.key("UserConfig").start_object();
        crate::json_ser::serialize_structure_user_quick_connect_config(&mut object_261, var_260);
        object_261.finish();
    }
    if let Some(var_262) = &input.queue_config {
        let mut object_263 = object.key("QueueConfig").start_object();
        crate::json_ser::serialize_structure_queue_quick_connect_config(&mut object_263, var_262);
        object_263.finish();
    }
    if let Some(var_264) = &input.phone_config {
        let mut object_265 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_phone_number_quick_connect_config(
            &mut object_265,
            var_264,
        );
        object_265.finish();
    }
}

pub fn serialize_structure_media_concurrency(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MediaConcurrency,
) {
    if let Some(var_266) = &input.channel {
        object.key("Channel").string(var_266.as_str());
    }
    {
        object.key("Concurrency").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.concurrency).into()),
        );
    }
}

pub fn serialize_structure_user_identity_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserIdentityInfo,
) {
    if let Some(var_267) = &input.first_name {
        object.key("FirstName").string(var_267);
    }
    if let Some(var_268) = &input.last_name {
        object.key("LastName").string(var_268);
    }
    if let Some(var_269) = &input.email {
        object.key("Email").string(var_269);
    }
}

pub fn serialize_structure_user_phone_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserPhoneConfig,
) {
    if let Some(var_270) = &input.phone_type {
        object.key("PhoneType").string(var_270.as_str());
    }
    if input.auto_accept {
        object.key("AutoAccept").boolean(input.auto_accept);
    }
    if input.after_contact_work_time_limit != 0 {
        object.key("AfterContactWorkTimeLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.after_contact_work_time_limit).into()),
        );
    }
    if let Some(var_271) = &input.desk_phone_number {
        object.key("DeskPhoneNumber").string(var_271);
    }
}

pub fn serialize_structure_routing_profile_queue_reference(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RoutingProfileQueueReference,
) {
    if let Some(var_272) = &input.queue_id {
        object.key("QueueId").string(var_272);
    }
    if let Some(var_273) = &input.channel {
        object.key("Channel").string(var_273.as_str());
    }
}

pub fn serialize_structure_current_metric(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CurrentMetric,
) {
    if let Some(var_274) = &input.name {
        object.key("Name").string(var_274.as_str());
    }
    if let Some(var_275) = &input.unit {
        object.key("Unit").string(var_275.as_str());
    }
}

pub fn serialize_structure_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filters,
) {
    if let Some(var_276) = &input.queues {
        let mut array_277 = object.key("Queues").start_array();
        for item_278 in var_276 {
            {
                array_277.value().string(item_278);
            }
        }
        array_277.finish();
    }
    if let Some(var_279) = &input.channels {
        let mut array_280 = object.key("Channels").start_array();
        for item_281 in var_279 {
            {
                array_280.value().string(item_281.as_str());
            }
        }
        array_280.finish();
    }
}

pub fn serialize_structure_historical_metric(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HistoricalMetric,
) {
    if let Some(var_282) = &input.name {
        object.key("Name").string(var_282.as_str());
    }
    if let Some(var_283) = &input.threshold {
        let mut object_284 = object.key("Threshold").start_object();
        crate::json_ser::serialize_structure_threshold(&mut object_284, var_283);
        object_284.finish();
    }
    if let Some(var_285) = &input.statistic {
        object.key("Statistic").string(var_285.as_str());
    }
    if let Some(var_286) = &input.unit {
        object.key("Unit").string(var_286.as_str());
    }
}

pub fn serialize_structure_chat_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChatMessage,
) {
    if let Some(var_287) = &input.content_type {
        object.key("ContentType").string(var_287);
    }
    if let Some(var_288) = &input.content {
        object.key("Content").string(var_288);
    }
}

pub fn serialize_structure_participant_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParticipantDetails,
) {
    if let Some(var_289) = &input.display_name {
        object.key("DisplayName").string(var_289);
    }
}

pub fn serialize_structure_voice_recording_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceRecordingConfiguration,
) {
    if let Some(var_290) = &input.voice_recording_track {
        object.key("VoiceRecordingTrack").string(var_290.as_str());
    }
}

pub fn serialize_structure_reference(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Reference,
) {
    if let Some(var_291) = &input.value {
        object.key("Value").string(var_291);
    }
    if let Some(var_292) = &input.r#type {
        object.key("Type").string(var_292.as_str());
    }
}

pub fn serialize_structure_hierarchy_structure_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchyStructureUpdate,
) {
    if let Some(var_293) = &input.level_one {
        let mut object_294 = object.key("LevelOne").start_object();
        crate::json_ser::serialize_structure_hierarchy_level_update(&mut object_294, var_293);
        object_294.finish();
    }
    if let Some(var_295) = &input.level_two {
        let mut object_296 = object.key("LevelTwo").start_object();
        crate::json_ser::serialize_structure_hierarchy_level_update(&mut object_296, var_295);
        object_296.finish();
    }
    if let Some(var_297) = &input.level_three {
        let mut object_298 = object.key("LevelThree").start_object();
        crate::json_ser::serialize_structure_hierarchy_level_update(&mut object_298, var_297);
        object_298.finish();
    }
    if let Some(var_299) = &input.level_four {
        let mut object_300 = object.key("LevelFour").start_object();
        crate::json_ser::serialize_structure_hierarchy_level_update(&mut object_300, var_299);
        object_300.finish();
    }
    if let Some(var_301) = &input.level_five {
        let mut object_302 = object.key("LevelFive").start_object();
        crate::json_ser::serialize_structure_hierarchy_level_update(&mut object_302, var_301);
        object_302.finish();
    }
}

pub fn serialize_structure_s3_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Config,
) {
    if let Some(var_303) = &input.bucket_name {
        object.key("BucketName").string(var_303);
    }
    if let Some(var_304) = &input.bucket_prefix {
        object.key("BucketPrefix").string(var_304);
    }
    if let Some(var_305) = &input.encryption_config {
        let mut object_306 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_encryption_config(&mut object_306, var_305);
        object_306.finish();
    }
}

pub fn serialize_structure_kinesis_video_stream_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisVideoStreamConfig,
) {
    if let Some(var_307) = &input.prefix {
        object.key("Prefix").string(var_307);
    }
    {
        object.key("RetentionPeriodHours").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.retention_period_hours).into()),
        );
    }
    if let Some(var_308) = &input.encryption_config {
        let mut object_309 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_encryption_config(&mut object_309, var_308);
        object_309.finish();
    }
}

pub fn serialize_structure_kinesis_stream_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisStreamConfig,
) {
    if let Some(var_310) = &input.stream_arn {
        object.key("StreamArn").string(var_310);
    }
}

pub fn serialize_structure_kinesis_firehose_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisFirehoseConfig,
) {
    if let Some(var_311) = &input.firehose_arn {
        object.key("FirehoseArn").string(var_311);
    }
}

pub fn serialize_structure_user_quick_connect_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserQuickConnectConfig,
) {
    if let Some(var_312) = &input.user_id {
        object.key("UserId").string(var_312);
    }
    if let Some(var_313) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_313);
    }
}

pub fn serialize_structure_queue_quick_connect_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueueQuickConnectConfig,
) {
    if let Some(var_314) = &input.queue_id {
        object.key("QueueId").string(var_314);
    }
    if let Some(var_315) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_315);
    }
}

pub fn serialize_structure_phone_number_quick_connect_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhoneNumberQuickConnectConfig,
) {
    if let Some(var_316) = &input.phone_number {
        object.key("PhoneNumber").string(var_316);
    }
}

pub fn serialize_structure_threshold(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Threshold,
) {
    if let Some(var_317) = &input.comparison {
        object.key("Comparison").string(var_317.as_str());
    }
    if let Some(var_318) = &input.threshold_value {
        object.key("ThresholdValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_318).into()),
        );
    }
}

pub fn serialize_structure_hierarchy_level_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchyLevelUpdate,
) {
    if let Some(var_319) = &input.name {
        object.key("Name").string(var_319);
    }
}

pub fn serialize_structure_encryption_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfig,
) {
    if let Some(var_320) = &input.encryption_type {
        object.key("EncryptionType").string(var_320.as_str());
    }
    if let Some(var_321) = &input.key_id {
        object.key("KeyId").string(var_321);
    }
}
