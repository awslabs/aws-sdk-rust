// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_approved_origin_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateApprovedOriginInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.origin {
        object.key("Origin").string(var_1);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.lex_bot {
        let mut object_3 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.lex_v2_bot {
        let mut object_5 = object.key("LexV2Bot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_v2_bot(&mut object_5, var_4)?;
        object_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_instance_storage_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateInstanceStorageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.resource_type {
        object.key("ResourceType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.storage_config {
        let mut object_8 = object.key("StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_storage_config(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_lambda_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateLambdaFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.function_arn {
        object.key("FunctionArn").string(var_9);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_lex_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateLexBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.lex_bot {
        let mut object_11 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_queue_quick_connects_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateQueueQuickConnectsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.quick_connect_ids {
        let mut array_13 = object.key("QuickConnectIds").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14);
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_routing_profile_queues_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateRoutingProfileQueuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.queue_configs {
        let mut array_16 = object.key("QueueConfigs").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_security_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateSecurityKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.key {
        object.key("Key").string(var_19);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_agent_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAgentStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.description {
        object.key("Description").string(var_20);
    }
    if let Some(var_21) = &input.display_order {
        object.key("DisplayOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_21).into()),
        );
    }
    if let Some(var_22) = &input.name {
        object.key("Name").string(var_22);
    }
    if let Some(var_23) = &input.state {
        object.key("State").string(var_23.as_str());
    }
    if let Some(var_24) = &input.tags {
        let mut object_25 = object.key("Tags").start_object();
        for (key_26, value_27) in var_24 {
            {
                object_25.key(key_26).string(value_27);
            }
        }
        object_25.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_28) = &input.content {
        object.key("Content").string(var_28);
    }
    if let Some(var_29) = &input.description {
        object.key("Description").string(var_29);
    }
    if let Some(var_30) = &input.name {
        object.key("Name").string(var_30);
    }
    if let Some(var_31) = &input.tags {
        let mut object_32 = object.key("Tags").start_object();
        for (key_33, value_34) in var_31 {
            {
                object_32.key(key_33).string(value_34);
            }
        }
        object_32.finish();
    }
    if let Some(var_35) = &input.r#type {
        object.key("Type").string(var_35.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_flow_module_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactFlowModuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.client_token {
        object.key("ClientToken").string(var_36);
    }
    if let Some(var_37) = &input.content {
        object.key("Content").string(var_37);
    }
    if let Some(var_38) = &input.description {
        object.key("Description").string(var_38);
    }
    if let Some(var_39) = &input.name {
        object.key("Name").string(var_39);
    }
    if let Some(var_40) = &input.tags {
        let mut object_41 = object.key("Tags").start_object();
        for (key_42, value_43) in var_40 {
            {
                object_41.key(key_42).string(value_43);
            }
        }
        object_41.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_hours_of_operation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHoursOfOperationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.config {
        let mut array_45 = object.key("Config").start_array();
        for item_46 in var_44 {
            {
                let mut object_47 = array_45.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hours_of_operation_config(
                    &mut object_47,
                    item_46,
                )?;
                object_47.finish();
            }
        }
        array_45.finish();
    }
    if let Some(var_48) = &input.description {
        object.key("Description").string(var_48);
    }
    if let Some(var_49) = &input.name {
        object.key("Name").string(var_49);
    }
    if let Some(var_50) = &input.tags {
        let mut object_51 = object.key("Tags").start_object();
        for (key_52, value_53) in var_50 {
            {
                object_51.key(key_52).string(value_53);
            }
        }
        object_51.finish();
    }
    if let Some(var_54) = &input.time_zone {
        object.key("TimeZone").string(var_54);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.client_token {
        object.key("ClientToken").string(var_55);
    }
    if let Some(var_56) = &input.directory_id {
        object.key("DirectoryId").string(var_56);
    }
    if let Some(var_57) = &input.identity_management_type {
        object.key("IdentityManagementType").string(var_57.as_str());
    }
    if let Some(var_58) = &input.inbound_calls_enabled {
        object.key("InboundCallsEnabled").boolean(*var_58);
    }
    if let Some(var_59) = &input.instance_alias {
        object.key("InstanceAlias").string(var_59);
    }
    if let Some(var_60) = &input.outbound_calls_enabled {
        object.key("OutboundCallsEnabled").boolean(*var_60);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_integration_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIntegrationAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_61) = &input.integration_arn {
        object.key("IntegrationArn").string(var_61);
    }
    if let Some(var_62) = &input.integration_type {
        object.key("IntegrationType").string(var_62.as_str());
    }
    if let Some(var_63) = &input.source_application_name {
        object.key("SourceApplicationName").string(var_63);
    }
    if let Some(var_64) = &input.source_application_url {
        object.key("SourceApplicationUrl").string(var_64);
    }
    if let Some(var_65) = &input.source_type {
        object.key("SourceType").string(var_65.as_str());
    }
    if let Some(var_66) = &input.tags {
        let mut object_67 = object.key("Tags").start_object();
        for (key_68, value_69) in var_66 {
            {
                object_67.key(key_68).string(value_69);
            }
        }
        object_67.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_queue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQueueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.description {
        object.key("Description").string(var_70);
    }
    if let Some(var_71) = &input.hours_of_operation_id {
        object.key("HoursOfOperationId").string(var_71);
    }
    if let Some(var_72) = &input.max_contacts {
        object.key("MaxContacts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    if let Some(var_73) = &input.name {
        object.key("Name").string(var_73);
    }
    if let Some(var_74) = &input.outbound_caller_config {
        let mut object_75 = object.key("OutboundCallerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_outbound_caller_config(
            &mut object_75,
            var_74,
        )?;
        object_75.finish();
    }
    if let Some(var_76) = &input.quick_connect_ids {
        let mut array_77 = object.key("QuickConnectIds").start_array();
        for item_78 in var_76 {
            {
                array_77.value().string(item_78);
            }
        }
        array_77.finish();
    }
    if let Some(var_79) = &input.tags {
        let mut object_80 = object.key("Tags").start_object();
        for (key_81, value_82) in var_79 {
            {
                object_80.key(key_81).string(value_82);
            }
        }
        object_80.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_quick_connect_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuickConnectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.description {
        object.key("Description").string(var_83);
    }
    if let Some(var_84) = &input.name {
        object.key("Name").string(var_84);
    }
    if let Some(var_85) = &input.quick_connect_config {
        let mut object_86 = object.key("QuickConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_quick_connect_config(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    if let Some(var_87) = &input.tags {
        let mut object_88 = object.key("Tags").start_object();
        for (key_89, value_90) in var_87 {
            {
                object_88.key(key_89).string(value_90);
            }
        }
        object_88.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_routing_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRoutingProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.default_outbound_queue_id {
        object.key("DefaultOutboundQueueId").string(var_91);
    }
    if let Some(var_92) = &input.description {
        object.key("Description").string(var_92);
    }
    if let Some(var_93) = &input.media_concurrencies {
        let mut array_94 = object.key("MediaConcurrencies").start_array();
        for item_95 in var_93 {
            {
                let mut object_96 = array_94.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_concurrency(
                    &mut object_96,
                    item_95,
                )?;
                object_96.finish();
            }
        }
        array_94.finish();
    }
    if let Some(var_97) = &input.name {
        object.key("Name").string(var_97);
    }
    if let Some(var_98) = &input.queue_configs {
        let mut array_99 = object.key("QueueConfigs").start_array();
        for item_100 in var_98 {
            {
                let mut object_101 = array_99.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(
                    &mut object_101,
                    item_100,
                )?;
                object_101.finish();
            }
        }
        array_99.finish();
    }
    if let Some(var_102) = &input.tags {
        let mut object_103 = object.key("Tags").start_object();
        for (key_104, value_105) in var_102 {
            {
                object_103.key(key_104).string(value_105);
            }
        }
        object_103.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.description {
        object.key("Description").string(var_106);
    }
    if let Some(var_107) = &input.permissions {
        let mut array_108 = object.key("Permissions").start_array();
        for item_109 in var_107 {
            {
                array_108.value().string(item_109);
            }
        }
        array_108.finish();
    }
    if let Some(var_110) = &input.security_profile_name {
        object.key("SecurityProfileName").string(var_110);
    }
    if let Some(var_111) = &input.tags {
        let mut object_112 = object.key("Tags").start_object();
        for (key_113, value_114) in var_111 {
            {
                object_112.key(key_113).string(value_114);
            }
        }
        object_112.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_use_case_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUseCaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.tags {
        let mut object_116 = object.key("Tags").start_object();
        for (key_117, value_118) in var_115 {
            {
                object_116.key(key_117).string(value_118);
            }
        }
        object_116.finish();
    }
    if let Some(var_119) = &input.use_case_type {
        object.key("UseCaseType").string(var_119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.directory_user_id {
        object.key("DirectoryUserId").string(var_120);
    }
    if let Some(var_121) = &input.hierarchy_group_id {
        object.key("HierarchyGroupId").string(var_121);
    }
    if let Some(var_122) = &input.identity_info {
        let mut object_123 = object.key("IdentityInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_info(
            &mut object_123,
            var_122,
        )?;
        object_123.finish();
    }
    if let Some(var_124) = &input.password {
        object.key("Password").string(var_124);
    }
    if let Some(var_125) = &input.phone_config {
        let mut object_126 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_phone_config(
            &mut object_126,
            var_125,
        )?;
        object_126.finish();
    }
    if let Some(var_127) = &input.routing_profile_id {
        object.key("RoutingProfileId").string(var_127);
    }
    if let Some(var_128) = &input.security_profile_ids {
        let mut array_129 = object.key("SecurityProfileIds").start_array();
        for item_130 in var_128 {
            {
                array_129.value().string(item_130);
            }
        }
        array_129.finish();
    }
    if let Some(var_131) = &input.tags {
        let mut object_132 = object.key("Tags").start_object();
        for (key_133, value_134) in var_131 {
            {
                object_132.key(key_133).string(value_134);
            }
        }
        object_132.finish();
    }
    if let Some(var_135) = &input.username {
        object.key("Username").string(var_135);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_hierarchy_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserHierarchyGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.name {
        object.key("Name").string(var_136);
    }
    if let Some(var_137) = &input.parent_group_id {
        object.key("ParentGroupId").string(var_137);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.lex_bot {
        let mut object_139 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_139, var_138)?;
        object_139.finish();
    }
    if let Some(var_140) = &input.lex_v2_bot {
        let mut object_141 = object.key("LexV2Bot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_v2_bot(&mut object_141, var_140)?;
        object_141.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_queue_quick_connects_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateQueueQuickConnectsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.quick_connect_ids {
        let mut array_143 = object.key("QuickConnectIds").start_array();
        for item_144 in var_142 {
            {
                array_143.value().string(item_144);
            }
        }
        array_143.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_routing_profile_queues_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateRoutingProfileQueuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.queue_references {
        let mut array_146 = object.key("QueueReferences").start_array();
        for item_147 in var_145 {
            {
                let mut object_148 = array_146.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_reference(
                    &mut object_148,
                    item_147,
                )?;
                object_148.finish();
            }
        }
        array_146.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_current_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCurrentMetricDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.current_metrics {
        let mut array_150 = object.key("CurrentMetrics").start_array();
        for item_151 in var_149 {
            {
                let mut object_152 = array_150.value().start_object();
                crate::json_ser::serialize_structure_crate_model_current_metric(
                    &mut object_152,
                    item_151,
                )?;
                object_152.finish();
            }
        }
        array_150.finish();
    }
    if let Some(var_153) = &input.filters {
        let mut object_154 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_filters(&mut object_154, var_153)?;
        object_154.finish();
    }
    if let Some(var_155) = &input.groupings {
        let mut array_156 = object.key("Groupings").start_array();
        for item_157 in var_155 {
            {
                array_156.value().string(item_157.as_str());
            }
        }
        array_156.finish();
    }
    if let Some(var_158) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_158).into()),
        );
    }
    if let Some(var_159) = &input.next_token {
        object.key("NextToken").string(var_159);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMetricDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_160, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_161) = &input.filters {
        let mut object_162 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_filters(&mut object_162, var_161)?;
        object_162.finish();
    }
    if let Some(var_163) = &input.groupings {
        let mut array_164 = object.key("Groupings").start_array();
        for item_165 in var_163 {
            {
                array_164.value().string(item_165.as_str());
            }
        }
        array_164.finish();
    }
    if let Some(var_166) = &input.historical_metrics {
        let mut array_167 = object.key("HistoricalMetrics").start_array();
        for item_168 in var_166 {
            {
                let mut object_169 = array_167.value().start_object();
                crate::json_ser::serialize_structure_crate_model_historical_metric(
                    &mut object_169,
                    item_168,
                )?;
                object_169.finish();
            }
        }
        array_167.finish();
    }
    if let Some(var_170) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_170).into()),
        );
    }
    if let Some(var_171) = &input.next_token {
        object.key("NextToken").string(var_171);
    }
    if let Some(var_172) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_172, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_contact_recording_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeContactRecordingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.contact_id {
        object.key("ContactId").string(var_173);
    }
    if let Some(var_174) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_174);
    }
    if let Some(var_175) = &input.instance_id {
        object.key("InstanceId").string(var_175);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_chat_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartChatContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.attributes {
        let mut object_177 = object.key("Attributes").start_object();
        for (key_178, value_179) in var_176 {
            {
                object_177.key(key_178).string(value_179);
            }
        }
        object_177.finish();
    }
    if let Some(var_180) = &input.client_token {
        object.key("ClientToken").string(var_180);
    }
    if let Some(var_181) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_181);
    }
    if let Some(var_182) = &input.initial_message {
        let mut object_183 = object.key("InitialMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_chat_message(&mut object_183, var_182)?;
        object_183.finish();
    }
    if let Some(var_184) = &input.instance_id {
        object.key("InstanceId").string(var_184);
    }
    if let Some(var_185) = &input.participant_details {
        let mut object_186 = object.key("ParticipantDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_participant_details(
            &mut object_186,
            var_185,
        )?;
        object_186.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_contact_recording_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartContactRecordingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_187) = &input.contact_id {
        object.key("ContactId").string(var_187);
    }
    if let Some(var_188) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_188);
    }
    if let Some(var_189) = &input.instance_id {
        object.key("InstanceId").string(var_189);
    }
    if let Some(var_190) = &input.voice_recording_configuration {
        let mut object_191 = object.key("VoiceRecordingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_recording_configuration(
            &mut object_191,
            var_190,
        )?;
        object_191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_contact_streaming_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartContactStreamingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.chat_streaming_configuration {
        let mut object_193 = object.key("ChatStreamingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_chat_streaming_configuration(
            &mut object_193,
            var_192,
        )?;
        object_193.finish();
    }
    if let Some(var_194) = &input.client_token {
        object.key("ClientToken").string(var_194);
    }
    if let Some(var_195) = &input.contact_id {
        object.key("ContactId").string(var_195);
    }
    if let Some(var_196) = &input.instance_id {
        object.key("InstanceId").string(var_196);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_outbound_voice_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartOutboundVoiceContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_197) = &input.answer_machine_detection_config {
        let mut object_198 = object.key("AnswerMachineDetectionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_answer_machine_detection_config(
            &mut object_198,
            var_197,
        )?;
        object_198.finish();
    }
    if let Some(var_199) = &input.attributes {
        let mut object_200 = object.key("Attributes").start_object();
        for (key_201, value_202) in var_199 {
            {
                object_200.key(key_201).string(value_202);
            }
        }
        object_200.finish();
    }
    if let Some(var_203) = &input.campaign_id {
        object.key("CampaignId").string(var_203);
    }
    if let Some(var_204) = &input.client_token {
        object.key("ClientToken").string(var_204);
    }
    if let Some(var_205) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_205);
    }
    if let Some(var_206) = &input.destination_phone_number {
        object.key("DestinationPhoneNumber").string(var_206);
    }
    if let Some(var_207) = &input.instance_id {
        object.key("InstanceId").string(var_207);
    }
    if let Some(var_208) = &input.queue_id {
        object.key("QueueId").string(var_208);
    }
    if let Some(var_209) = &input.source_phone_number {
        object.key("SourcePhoneNumber").string(var_209);
    }
    if let Some(var_210) = &input.traffic_type {
        object.key("TrafficType").string(var_210.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_task_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTaskContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.attributes {
        let mut object_212 = object.key("Attributes").start_object();
        for (key_213, value_214) in var_211 {
            {
                object_212.key(key_213).string(value_214);
            }
        }
        object_212.finish();
    }
    if let Some(var_215) = &input.client_token {
        object.key("ClientToken").string(var_215);
    }
    if let Some(var_216) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_216);
    }
    if let Some(var_217) = &input.description {
        object.key("Description").string(var_217);
    }
    if let Some(var_218) = &input.instance_id {
        object.key("InstanceId").string(var_218);
    }
    if let Some(var_219) = &input.name {
        object.key("Name").string(var_219);
    }
    if let Some(var_220) = &input.previous_contact_id {
        object.key("PreviousContactId").string(var_220);
    }
    if let Some(var_221) = &input.references {
        let mut object_222 = object.key("References").start_object();
        for (key_223, value_224) in var_221 {
            {
                let mut object_225 = object_222.key(key_223).start_object();
                crate::json_ser::serialize_structure_crate_model_reference(
                    &mut object_225,
                    value_224,
                )?;
                object_225.finish();
            }
        }
        object_222.finish();
    }
    if let Some(var_226) = &input.scheduled_time {
        object
            .key("ScheduledTime")
            .date_time(var_226, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.contact_id {
        object.key("ContactId").string(var_227);
    }
    if let Some(var_228) = &input.instance_id {
        object.key("InstanceId").string(var_228);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_recording_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopContactRecordingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.contact_id {
        object.key("ContactId").string(var_229);
    }
    if let Some(var_230) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_230);
    }
    if let Some(var_231) = &input.instance_id {
        object.key("InstanceId").string(var_231);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_streaming_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopContactStreamingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.contact_id {
        object.key("ContactId").string(var_232);
    }
    if let Some(var_233) = &input.instance_id {
        object.key("InstanceId").string(var_233);
    }
    if let Some(var_234) = &input.streaming_id {
        object.key("StreamingId").string(var_234);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_suspend_contact_recording_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SuspendContactRecordingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.contact_id {
        object.key("ContactId").string(var_235);
    }
    if let Some(var_236) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_236);
    }
    if let Some(var_237) = &input.instance_id {
        object.key("InstanceId").string(var_237);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_238) = &input.tags {
        let mut object_239 = object.key("tags").start_object();
        for (key_240, value_241) in var_238 {
            {
                object_239.key(key_240).string(value_241);
            }
        }
        object_239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_agent_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAgentStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.description {
        object.key("Description").string(var_242);
    }
    if let Some(var_243) = &input.display_order {
        object.key("DisplayOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_243).into()),
        );
    }
    if let Some(var_244) = &input.name {
        object.key("Name").string(var_244);
    }
    if input.reset_order_number {
        object
            .key("ResetOrderNumber")
            .boolean(input.reset_order_number);
    }
    if let Some(var_245) = &input.state {
        object.key("State").string(var_245.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.description {
        object.key("Description").string(var_246);
    }
    if let Some(var_247) = &input.name {
        object.key("Name").string(var_247);
    }
    if let Some(var_248) = &input.references {
        let mut object_249 = object.key("References").start_object();
        for (key_250, value_251) in var_248 {
            {
                let mut object_252 = object_249.key(key_250).start_object();
                crate::json_ser::serialize_structure_crate_model_reference(
                    &mut object_252,
                    value_251,
                )?;
                object_252.finish();
            }
        }
        object_249.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_253) = &input.attributes {
        let mut object_254 = object.key("Attributes").start_object();
        for (key_255, value_256) in var_253 {
            {
                object_254.key(key_255).string(value_256);
            }
        }
        object_254.finish();
    }
    if let Some(var_257) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_257);
    }
    if let Some(var_258) = &input.instance_id {
        object.key("InstanceId").string(var_258);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_content_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowContentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_259) = &input.content {
        object.key("Content").string(var_259);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.contact_flow_state {
        object.key("ContactFlowState").string(var_260.as_str());
    }
    if let Some(var_261) = &input.description {
        object.key("Description").string(var_261);
    }
    if let Some(var_262) = &input.name {
        object.key("Name").string(var_262);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_module_content_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowModuleContentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.content {
        object.key("Content").string(var_263);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_module_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowModuleMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.description {
        object.key("Description").string(var_264);
    }
    if let Some(var_265) = &input.name {
        object.key("Name").string(var_265);
    }
    if let Some(var_266) = &input.state {
        object.key("State").string(var_266.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_267) = &input.description {
        object.key("Description").string(var_267);
    }
    if let Some(var_268) = &input.name {
        object.key("Name").string(var_268);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.contact_id {
        object.key("ContactId").string(var_269);
    }
    if let Some(var_270) = &input.instance_id {
        object.key("InstanceId").string(var_270);
    }
    if let Some(var_271) = &input.scheduled_time {
        object
            .key("ScheduledTime")
            .date_time(var_271, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_hours_of_operation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateHoursOfOperationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.config {
        let mut array_273 = object.key("Config").start_array();
        for item_274 in var_272 {
            {
                let mut object_275 = array_273.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hours_of_operation_config(
                    &mut object_275,
                    item_274,
                )?;
                object_275.finish();
            }
        }
        array_273.finish();
    }
    if let Some(var_276) = &input.description {
        object.key("Description").string(var_276);
    }
    if let Some(var_277) = &input.name {
        object.key("Name").string(var_277);
    }
    if let Some(var_278) = &input.time_zone {
        object.key("TimeZone").string(var_278);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_instance_attribute_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInstanceAttributeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.value {
        object.key("Value").string(var_279);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_instance_storage_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInstanceStorageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_280) = &input.storage_config {
        let mut object_281 = object.key("StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_storage_config(
            &mut object_281,
            var_280,
        )?;
        object_281.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_hours_of_operation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueHoursOfOperationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.hours_of_operation_id {
        object.key("HoursOfOperationId").string(var_282);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_max_contacts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueMaxContactsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.max_contacts {
        object.key("MaxContacts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_283).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_284) = &input.description {
        object.key("Description").string(var_284);
    }
    if let Some(var_285) = &input.name {
        object.key("Name").string(var_285);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_outbound_caller_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueOutboundCallerConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_286) = &input.outbound_caller_config {
        let mut object_287 = object.key("OutboundCallerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_outbound_caller_config(
            &mut object_287,
            var_286,
        )?;
        object_287.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_288) = &input.status {
        object.key("Status").string(var_288.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_quick_connect_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuickConnectConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.quick_connect_config {
        let mut object_290 = object.key("QuickConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_quick_connect_config(
            &mut object_290,
            var_289,
        )?;
        object_290.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_quick_connect_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuickConnectNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_291) = &input.description {
        object.key("Description").string(var_291);
    }
    if let Some(var_292) = &input.name {
        object.key("Name").string(var_292);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_concurrency_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileConcurrencyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.media_concurrencies {
        let mut array_294 = object.key("MediaConcurrencies").start_array();
        for item_295 in var_293 {
            {
                let mut object_296 = array_294.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_concurrency(
                    &mut object_296,
                    item_295,
                )?;
                object_296.finish();
            }
        }
        array_294.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_default_outbound_queue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileDefaultOutboundQueueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_297) = &input.default_outbound_queue_id {
        object.key("DefaultOutboundQueueId").string(var_297);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.description {
        object.key("Description").string(var_298);
    }
    if let Some(var_299) = &input.name {
        object.key("Name").string(var_299);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_queues_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileQueuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_300) = &input.queue_configs {
        let mut array_301 = object.key("QueueConfigs").start_array();
        for item_302 in var_300 {
            {
                let mut object_303 = array_301.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(
                    &mut object_303,
                    item_302,
                )?;
                object_303.finish();
            }
        }
        array_301.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_security_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSecurityProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_304) = &input.description {
        object.key("Description").string(var_304);
    }
    if let Some(var_305) = &input.permissions {
        let mut array_306 = object.key("Permissions").start_array();
        for item_307 in var_305 {
            {
                array_306.value().string(item_307);
            }
        }
        array_306.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserHierarchyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_308) = &input.hierarchy_group_id {
        object.key("HierarchyGroupId").string(var_308);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_group_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserHierarchyGroupNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_309) = &input.name {
        object.key("Name").string(var_309);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_structure_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserHierarchyStructureInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.hierarchy_structure {
        let mut object_311 = object.key("HierarchyStructure").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_structure_update(
            &mut object_311,
            var_310,
        )?;
        object_311.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_identity_info_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserIdentityInfoInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.identity_info {
        let mut object_313 = object.key("IdentityInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_info(
            &mut object_313,
            var_312,
        )?;
        object_313.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_phone_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserPhoneConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_314) = &input.phone_config {
        let mut object_315 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_phone_config(
            &mut object_315,
            var_314,
        )?;
        object_315.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_routing_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserRoutingProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.routing_profile_id {
        object.key("RoutingProfileId").string(var_316);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_security_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserSecurityProfilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_317) = &input.security_profile_ids {
        let mut array_318 = object.key("SecurityProfileIds").start_array();
        for item_319 in var_317 {
            {
                array_318.value().string(item_319);
            }
        }
        array_318.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_bot(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LexBot,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_320) = &input.name {
        object.key("Name").string(var_320);
    }
    if let Some(var_321) = &input.lex_region {
        object.key("LexRegion").string(var_321);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_v2_bot(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LexV2Bot,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.alias_arn {
        object.key("AliasArn").string(var_322);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_storage_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceStorageConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_323) = &input.association_id {
        object.key("AssociationId").string(var_323);
    }
    if let Some(var_324) = &input.storage_type {
        object.key("StorageType").string(var_324.as_str());
    }
    if let Some(var_325) = &input.s3_config {
        let mut object_326 = object.key("S3Config").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_config(&mut object_326, var_325)?;
        object_326.finish();
    }
    if let Some(var_327) = &input.kinesis_video_stream_config {
        let mut object_328 = object.key("KinesisVideoStreamConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_video_stream_config(
            &mut object_328,
            var_327,
        )?;
        object_328.finish();
    }
    if let Some(var_329) = &input.kinesis_stream_config {
        let mut object_330 = object.key("KinesisStreamConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_stream_config(
            &mut object_330,
            var_329,
        )?;
        object_330.finish();
    }
    if let Some(var_331) = &input.kinesis_firehose_config {
        let mut object_332 = object.key("KinesisFirehoseConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_firehose_config(
            &mut object_332,
            var_331,
        )?;
        object_332.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_queue_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RoutingProfileQueueConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.queue_reference {
        let mut object_334 = object.key("QueueReference").start_object();
        crate::json_ser::serialize_structure_crate_model_routing_profile_queue_reference(
            &mut object_334,
            var_333,
        )?;
        object_334.finish();
    }
    if let Some(var_335) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_335).into()),
        );
    }
    if let Some(var_336) = &input.delay {
        object.key("Delay").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_336).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hours_of_operation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HoursOfOperationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.day {
        object.key("Day").string(var_337.as_str());
    }
    if let Some(var_338) = &input.start_time {
        let mut object_339 = object.key("StartTime").start_object();
        crate::json_ser::serialize_structure_crate_model_hours_of_operation_time_slice(
            &mut object_339,
            var_338,
        )?;
        object_339.finish();
    }
    if let Some(var_340) = &input.end_time {
        let mut object_341 = object.key("EndTime").start_object();
        crate::json_ser::serialize_structure_crate_model_hours_of_operation_time_slice(
            &mut object_341,
            var_340,
        )?;
        object_341.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_outbound_caller_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutboundCallerConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_342) = &input.outbound_caller_id_name {
        object.key("OutboundCallerIdName").string(var_342);
    }
    if let Some(var_343) = &input.outbound_caller_id_number_id {
        object.key("OutboundCallerIdNumberId").string(var_343);
    }
    if let Some(var_344) = &input.outbound_flow_id {
        object.key("OutboundFlowId").string(var_344);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_quick_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QuickConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.quick_connect_type {
        object.key("QuickConnectType").string(var_345.as_str());
    }
    if let Some(var_346) = &input.user_config {
        let mut object_347 = object.key("UserConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_quick_connect_config(
            &mut object_347,
            var_346,
        )?;
        object_347.finish();
    }
    if let Some(var_348) = &input.queue_config {
        let mut object_349 = object.key("QueueConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_queue_quick_connect_config(
            &mut object_349,
            var_348,
        )?;
        object_349.finish();
    }
    if let Some(var_350) = &input.phone_config {
        let mut object_351 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_phone_number_quick_connect_config(
            &mut object_351,
            var_350,
        )?;
        object_351.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_media_concurrency(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MediaConcurrency,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_352) = &input.channel {
        object.key("Channel").string(var_352.as_str());
    }
    {
        object.key("Concurrency").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.concurrency).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_identity_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserIdentityInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_353) = &input.first_name {
        object.key("FirstName").string(var_353);
    }
    if let Some(var_354) = &input.last_name {
        object.key("LastName").string(var_354);
    }
    if let Some(var_355) = &input.email {
        object.key("Email").string(var_355);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_phone_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserPhoneConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.phone_type {
        object.key("PhoneType").string(var_356.as_str());
    }
    if input.auto_accept {
        object.key("AutoAccept").boolean(input.auto_accept);
    }
    if input.after_contact_work_time_limit != 0 {
        object.key("AfterContactWorkTimeLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.after_contact_work_time_limit).into()),
        );
    }
    if let Some(var_357) = &input.desk_phone_number {
        object.key("DeskPhoneNumber").string(var_357);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_queue_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RoutingProfileQueueReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_358) = &input.queue_id {
        object.key("QueueId").string(var_358);
    }
    if let Some(var_359) = &input.channel {
        object.key("Channel").string(var_359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_current_metric(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CurrentMetric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.name {
        object.key("Name").string(var_360.as_str());
    }
    if let Some(var_361) = &input.unit {
        object.key("Unit").string(var_361.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_362) = &input.queues {
        let mut array_363 = object.key("Queues").start_array();
        for item_364 in var_362 {
            {
                array_363.value().string(item_364);
            }
        }
        array_363.finish();
    }
    if let Some(var_365) = &input.channels {
        let mut array_366 = object.key("Channels").start_array();
        for item_367 in var_365 {
            {
                array_366.value().string(item_367.as_str());
            }
        }
        array_366.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_historical_metric(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HistoricalMetric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.name {
        object.key("Name").string(var_368.as_str());
    }
    if let Some(var_369) = &input.threshold {
        let mut object_370 = object.key("Threshold").start_object();
        crate::json_ser::serialize_structure_crate_model_threshold(&mut object_370, var_369)?;
        object_370.finish();
    }
    if let Some(var_371) = &input.statistic {
        object.key("Statistic").string(var_371.as_str());
    }
    if let Some(var_372) = &input.unit {
        object.key("Unit").string(var_372.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_chat_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChatMessage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_373) = &input.content_type {
        object.key("ContentType").string(var_373);
    }
    if let Some(var_374) = &input.content {
        object.key("Content").string(var_374);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_participant_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParticipantDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.display_name {
        object.key("DisplayName").string(var_375);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_voice_recording_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceRecordingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_376) = &input.voice_recording_track {
        object.key("VoiceRecordingTrack").string(var_376.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_chat_streaming_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChatStreamingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.streaming_endpoint_arn {
        object.key("StreamingEndpointArn").string(var_377);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_answer_machine_detection_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnswerMachineDetectionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable_answer_machine_detection {
        object
            .key("EnableAnswerMachineDetection")
            .boolean(input.enable_answer_machine_detection);
    }
    if input.await_answer_machine_prompt {
        object
            .key("AwaitAnswerMachinePrompt")
            .boolean(input.await_answer_machine_prompt);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Reference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_378) = &input.value {
        object.key("Value").string(var_378);
    }
    if let Some(var_379) = &input.r#type {
        object.key("Type").string(var_379.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_structure_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchyStructureUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.level_one {
        let mut object_381 = object.key("LevelOne").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_381,
            var_380,
        )?;
        object_381.finish();
    }
    if let Some(var_382) = &input.level_two {
        let mut object_383 = object.key("LevelTwo").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_383,
            var_382,
        )?;
        object_383.finish();
    }
    if let Some(var_384) = &input.level_three {
        let mut object_385 = object.key("LevelThree").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_385,
            var_384,
        )?;
        object_385.finish();
    }
    if let Some(var_386) = &input.level_four {
        let mut object_387 = object.key("LevelFour").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_387,
            var_386,
        )?;
        object_387.finish();
    }
    if let Some(var_388) = &input.level_five {
        let mut object_389 = object.key("LevelFive").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_389,
            var_388,
        )?;
        object_389.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Config,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_390) = &input.bucket_name {
        object.key("BucketName").string(var_390);
    }
    if let Some(var_391) = &input.bucket_prefix {
        object.key("BucketPrefix").string(var_391);
    }
    if let Some(var_392) = &input.encryption_config {
        let mut object_393 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(
            &mut object_393,
            var_392,
        )?;
        object_393.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_video_stream_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisVideoStreamConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_394) = &input.prefix {
        object.key("Prefix").string(var_394);
    }
    {
        object.key("RetentionPeriodHours").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_period_hours).into()),
        );
    }
    if let Some(var_395) = &input.encryption_config {
        let mut object_396 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(
            &mut object_396,
            var_395,
        )?;
        object_396.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_stream_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisStreamConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_397) = &input.stream_arn {
        object.key("StreamArn").string(var_397);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_firehose_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisFirehoseConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_398) = &input.firehose_arn {
        object.key("FirehoseArn").string(var_398);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hours_of_operation_time_slice(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HoursOfOperationTimeSlice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_399) = &input.hours {
        object.key("Hours").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_399).into()),
        );
    }
    if let Some(var_400) = &input.minutes {
        object.key("Minutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_400).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_quick_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserQuickConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_401) = &input.user_id {
        object.key("UserId").string(var_401);
    }
    if let Some(var_402) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_402);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_queue_quick_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueueQuickConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_403) = &input.queue_id {
        object.key("QueueId").string(var_403);
    }
    if let Some(var_404) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_404);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_phone_number_quick_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhoneNumberQuickConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_405) = &input.phone_number {
        object.key("PhoneNumber").string(var_405);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_threshold(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Threshold,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_406) = &input.comparison {
        object.key("Comparison").string(var_406.as_str());
    }
    if let Some(var_407) = &input.threshold_value {
        object.key("ThresholdValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_407).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_level_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchyLevelUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_408) = &input.name {
        object.key("Name").string(var_408);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_409) = &input.encryption_type {
        object.key("EncryptionType").string(var_409.as_str());
    }
    if let Some(var_410) = &input.key_id {
        object.key("KeyId").string(var_410);
    }
    Ok(())
}
