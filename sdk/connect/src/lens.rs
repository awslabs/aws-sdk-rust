// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_current_metric_data_output_next_token(
    input: &crate::operation::get_current_metric_data::GetCurrentMetricDataOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_current_user_data_output_next_token(
    input: &crate::operation::get_current_user_data::GetCurrentUserDataOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_metric_data_output_next_token(
    input: &crate::operation::get_metric_data::GetMetricDataOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_metric_data_v2_output_next_token(
    input: &crate::operation::get_metric_data_v2::GetMetricDataV2Output,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_agent_statuses_output_next_token(
    input: &crate::operation::list_agent_statuses::ListAgentStatusesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_approved_origins_output_next_token(
    input: &crate::operation::list_approved_origins::ListApprovedOriginsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_bots_output_next_token(
    input: &crate::operation::list_bots::ListBotsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_contact_evaluations_output_next_token(
    input: &crate::operation::list_contact_evaluations::ListContactEvaluationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_contact_flow_modules_output_next_token(
    input: &crate::operation::list_contact_flow_modules::ListContactFlowModulesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_contact_flows_output_next_token(
    input: &crate::operation::list_contact_flows::ListContactFlowsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_contact_references_output_next_token(
    input: &crate::operation::list_contact_references::ListContactReferencesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_default_vocabularies_output_next_token(
    input: &crate::operation::list_default_vocabularies::ListDefaultVocabulariesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_evaluation_form_versions_output_next_token(
    input: &crate::operation::list_evaluation_form_versions::ListEvaluationFormVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_evaluation_forms_output_next_token(
    input: &crate::operation::list_evaluation_forms::ListEvaluationFormsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_hours_of_operations_output_next_token(
    input: &crate::operation::list_hours_of_operations::ListHoursOfOperationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_instance_attributes_output_next_token(
    input: &crate::operation::list_instance_attributes::ListInstanceAttributesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_instance_storage_configs_output_next_token(
    input: &crate::operation::list_instance_storage_configs::ListInstanceStorageConfigsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_instances_output_next_token(
    input: &crate::operation::list_instances::ListInstancesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_integration_associations_output_next_token(
    input: &crate::operation::list_integration_associations::ListIntegrationAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_lambda_functions_output_next_token(
    input: &crate::operation::list_lambda_functions::ListLambdaFunctionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_lex_bots_output_next_token(
    input: &crate::operation::list_lex_bots::ListLexBotsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_phone_numbers_output_next_token(
    input: &crate::operation::list_phone_numbers::ListPhoneNumbersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_phone_numbers_v2_output_next_token(
    input: &crate::operation::list_phone_numbers_v2::ListPhoneNumbersV2Output,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_prompts_output_next_token(
    input: &crate::operation::list_prompts::ListPromptsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_queue_quick_connects_output_next_token(
    input: &crate::operation::list_queue_quick_connects::ListQueueQuickConnectsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_queues_output_next_token(
    input: &crate::operation::list_queues::ListQueuesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_quick_connects_output_next_token(
    input: &crate::operation::list_quick_connects::ListQuickConnectsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_routing_profile_queues_output_next_token(
    input: &crate::operation::list_routing_profile_queues::ListRoutingProfileQueuesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_routing_profiles_output_next_token(
    input: &crate::operation::list_routing_profiles::ListRoutingProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_rules_output_next_token(
    input: &crate::operation::list_rules::ListRulesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_security_keys_output_next_token(
    input: &crate::operation::list_security_keys::ListSecurityKeysOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_security_profile_applications_output_next_token(
    input: &crate::operation::list_security_profile_applications::ListSecurityProfileApplicationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_security_profile_permissions_output_next_token(
    input: &crate::operation::list_security_profile_permissions::ListSecurityProfilePermissionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_security_profiles_output_next_token(
    input: &crate::operation::list_security_profiles::ListSecurityProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_task_templates_output_next_token(
    input: &crate::operation::list_task_templates::ListTaskTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_traffic_distribution_group_users_output_next_token(
    input: &crate::operation::list_traffic_distribution_group_users::ListTrafficDistributionGroupUsersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_traffic_distribution_groups_output_next_token(
    input: &crate::operation::list_traffic_distribution_groups::ListTrafficDistributionGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_use_cases_output_next_token(
    input: &crate::operation::list_use_cases::ListUseCasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_user_hierarchy_groups_output_next_token(
    input: &crate::operation::list_user_hierarchy_groups::ListUserHierarchyGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_users_output_next_token(
    input: &crate::operation::list_users::ListUsersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_view_versions_output_next_token(
    input: &crate::operation::list_view_versions::ListViewVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_views_output_next_token(
    input: &crate::operation::list_views::ListViewsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_available_phone_numbers_output_next_token(
    input: &crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_hours_of_operations_output_next_token(
    input: &crate::operation::search_hours_of_operations::SearchHoursOfOperationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_prompts_output_next_token(
    input: &crate::operation::search_prompts::SearchPromptsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_queues_output_next_token(
    input: &crate::operation::search_queues::SearchQueuesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_quick_connects_output_next_token(
    input: &crate::operation::search_quick_connects::SearchQuickConnectsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_resource_tags_output_next_token(
    input: &crate::operation::search_resource_tags::SearchResourceTagsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_routing_profiles_output_next_token(
    input: &crate::operation::search_routing_profiles::SearchRoutingProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_security_profiles_output_next_token(
    input: &crate::operation::search_security_profiles::SearchSecurityProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_users_output_next_token(
    input: &crate::operation::search_users::SearchUsersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_vocabularies_output_next_token(
    input: &crate::operation::search_vocabularies::SearchVocabulariesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_agent_statuses_output_agent_status_summary_list(
    input: crate::operation::list_agent_statuses::ListAgentStatusesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AgentStatusSummary>> {
    let input = match input.agent_status_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_approved_origins_output_origins(
    input: crate::operation::list_approved_origins::ListApprovedOriginsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = match input.origins {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_bots_output_lex_bots(
    input: crate::operation::list_bots::ListBotsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LexBotConfig>> {
    let input = match input.lex_bots {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_contact_evaluations_output_evaluation_summary_list(
    input: crate::operation::list_contact_evaluations::ListContactEvaluationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EvaluationSummary>> {
    let input = input.evaluation_summary_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_contact_flow_modules_output_contact_flow_modules_summary_list(
    input: crate::operation::list_contact_flow_modules::ListContactFlowModulesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ContactFlowModuleSummary>> {
    let input = match input.contact_flow_modules_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_contact_flows_output_contact_flow_summary_list(
    input: crate::operation::list_contact_flows::ListContactFlowsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ContactFlowSummary>> {
    let input = match input.contact_flow_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_contact_references_output_reference_summary_list(
    input: crate::operation::list_contact_references::ListContactReferencesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ReferenceSummary>> {
    let input = match input.reference_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_default_vocabularies_output_default_vocabulary_list(
    input: crate::operation::list_default_vocabularies::ListDefaultVocabulariesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DefaultVocabulary>> {
    let input = input.default_vocabulary_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_evaluation_form_versions_output_evaluation_form_version_summary_list(
    input: crate::operation::list_evaluation_form_versions::ListEvaluationFormVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EvaluationFormVersionSummary>> {
    let input = input.evaluation_form_version_summary_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_evaluation_forms_output_evaluation_form_summary_list(
    input: crate::operation::list_evaluation_forms::ListEvaluationFormsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EvaluationFormSummary>> {
    let input = input.evaluation_form_summary_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_hours_of_operations_output_hours_of_operation_summary_list(
    input: crate::operation::list_hours_of_operations::ListHoursOfOperationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::HoursOfOperationSummary>> {
    let input = match input.hours_of_operation_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_instance_attributes_output_attributes(
    input: crate::operation::list_instance_attributes::ListInstanceAttributesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Attribute>> {
    let input = match input.attributes {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_instance_storage_configs_output_storage_configs(
    input: crate::operation::list_instance_storage_configs::ListInstanceStorageConfigsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::InstanceStorageConfig>> {
    let input = match input.storage_configs {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_instances_output_instance_summary_list(
    input: crate::operation::list_instances::ListInstancesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::InstanceSummary>> {
    let input = match input.instance_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_integration_associations_output_integration_association_summary_list(
    input: crate::operation::list_integration_associations::ListIntegrationAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::IntegrationAssociationSummary>> {
    let input = match input.integration_association_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_lambda_functions_output_lambda_functions(
    input: crate::operation::list_lambda_functions::ListLambdaFunctionsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = match input.lambda_functions {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_lex_bots_output_lex_bots(
    input: crate::operation::list_lex_bots::ListLexBotsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LexBot>> {
    let input = match input.lex_bots {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_phone_numbers_output_phone_number_summary_list(
    input: crate::operation::list_phone_numbers::ListPhoneNumbersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberSummary>> {
    let input = match input.phone_number_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_phone_numbers_v2_output_list_phone_numbers_summary_list(
    input: crate::operation::list_phone_numbers_v2::ListPhoneNumbersV2Output,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListPhoneNumbersSummary>> {
    let input = match input.list_phone_numbers_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_prompts_output_prompt_summary_list(
    input: crate::operation::list_prompts::ListPromptsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PromptSummary>> {
    let input = match input.prompt_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_queue_quick_connects_output_quick_connect_summary_list(
    input: crate::operation::list_queue_quick_connects::ListQueueQuickConnectsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::QuickConnectSummary>> {
    let input = match input.quick_connect_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_queues_output_queue_summary_list(
    input: crate::operation::list_queues::ListQueuesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::QueueSummary>> {
    let input = match input.queue_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_quick_connects_output_quick_connect_summary_list(
    input: crate::operation::list_quick_connects::ListQuickConnectsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::QuickConnectSummary>> {
    let input = match input.quick_connect_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_routing_profile_queues_output_routing_profile_queue_config_summary_list(
    input: crate::operation::list_routing_profile_queues::ListRoutingProfileQueuesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RoutingProfileQueueConfigSummary>> {
    let input = match input.routing_profile_queue_config_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_routing_profiles_output_routing_profile_summary_list(
    input: crate::operation::list_routing_profiles::ListRoutingProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RoutingProfileSummary>> {
    let input = match input.routing_profile_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_rules_output_rule_summary_list(
    input: crate::operation::list_rules::ListRulesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RuleSummary>> {
    let input = input.rule_summary_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_security_keys_output_security_keys(
    input: crate::operation::list_security_keys::ListSecurityKeysOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SecurityKey>> {
    let input = match input.security_keys {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_security_profile_applications_output_applications(
    input: crate::operation::list_security_profile_applications::ListSecurityProfileApplicationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Application>> {
    let input = match input.applications {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_security_profile_permissions_output_permissions(
    input: crate::operation::list_security_profile_permissions::ListSecurityProfilePermissionsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = match input.permissions {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_security_profiles_output_security_profile_summary_list(
    input: crate::operation::list_security_profiles::ListSecurityProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SecurityProfileSummary>> {
    let input = match input.security_profile_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_task_templates_output_task_templates(
    input: crate::operation::list_task_templates::ListTaskTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TaskTemplateMetadata>> {
    let input = match input.task_templates {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_traffic_distribution_group_users_output_traffic_distribution_group_user_summary_list(
    input: crate::operation::list_traffic_distribution_group_users::ListTrafficDistributionGroupUsersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TrafficDistributionGroupUserSummary>> {
    let input = match input.traffic_distribution_group_user_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_traffic_distribution_groups_output_traffic_distribution_group_summary_list(
    input: crate::operation::list_traffic_distribution_groups::ListTrafficDistributionGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TrafficDistributionGroupSummary>> {
    let input = match input.traffic_distribution_group_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_use_cases_output_use_case_summary_list(
    input: crate::operation::list_use_cases::ListUseCasesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UseCase>> {
    let input = match input.use_case_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_user_hierarchy_groups_output_user_hierarchy_group_summary_list(
    input: crate::operation::list_user_hierarchy_groups::ListUserHierarchyGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::HierarchyGroupSummary>> {
    let input = match input.user_hierarchy_group_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_users_output_user_summary_list(
    input: crate::operation::list_users::ListUsersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UserSummary>> {
    let input = match input.user_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_view_versions_output_view_version_summary_list(
    input: crate::operation::list_view_versions::ListViewVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ViewVersionSummary>> {
    let input = match input.view_version_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_views_output_views_summary_list(
    input: crate::operation::list_views::ListViewsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ViewSummary>> {
    let input = match input.views_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_available_phone_numbers_output_available_numbers_list(
    input: crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AvailableNumberSummary>> {
    let input = match input.available_numbers_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_hours_of_operations_output_hours_of_operations(
    input: crate::operation::search_hours_of_operations::SearchHoursOfOperationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::HoursOfOperation>> {
    let input = match input.hours_of_operations {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_prompts_output_prompts(
    input: crate::operation::search_prompts::SearchPromptsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Prompt>> {
    let input = match input.prompts {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_queues_output_queues(
    input: crate::operation::search_queues::SearchQueuesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Queue>> {
    let input = match input.queues {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_quick_connects_output_quick_connects(
    input: crate::operation::search_quick_connects::SearchQuickConnectsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::QuickConnect>> {
    let input = match input.quick_connects {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_resource_tags_output_tags(
    input: crate::operation::search_resource_tags::SearchResourceTagsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TagSet>> {
    let input = match input.tags {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_routing_profiles_output_routing_profiles(
    input: crate::operation::search_routing_profiles::SearchRoutingProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RoutingProfile>> {
    let input = match input.routing_profiles {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_security_profiles_output_security_profiles(
    input: crate::operation::search_security_profiles::SearchSecurityProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SecurityProfileSearchSummary>> {
    let input = match input.security_profiles {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_users_output_users(
    input: crate::operation::search_users::SearchUsersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UserSearchSummary>> {
    let input = match input.users {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_vocabularies_output_vocabulary_summary_list(
    input: crate::operation::search_vocabularies::SearchVocabulariesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::VocabularySummary>> {
    let input = match input.vocabulary_summary_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
