// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_get_current_metric_data_output_next_token(
    input: &crate::output::GetCurrentMetricDataOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_metric_data_output_next_token(
    input: &crate::output::GetMetricDataOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_agent_statuses_output_next_token(
    input: &crate::output::ListAgentStatusesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_approved_origins_output_next_token(
    input: &crate::output::ListApprovedOriginsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_bots_output_next_token(
    input: &crate::output::ListBotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_contact_flow_modules_output_next_token(
    input: &crate::output::ListContactFlowModulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_contact_flows_output_next_token(
    input: &crate::output::ListContactFlowsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_contact_references_output_next_token(
    input: &crate::output::ListContactReferencesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_default_vocabularies_output_next_token(
    input: &crate::output::ListDefaultVocabulariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_hours_of_operations_output_next_token(
    input: &crate::output::ListHoursOfOperationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_instance_attributes_output_next_token(
    input: &crate::output::ListInstanceAttributesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_instances_output_next_token(
    input: &crate::output::ListInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_instance_storage_configs_output_next_token(
    input: &crate::output::ListInstanceStorageConfigsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_integration_associations_output_next_token(
    input: &crate::output::ListIntegrationAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_lambda_functions_output_next_token(
    input: &crate::output::ListLambdaFunctionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_lex_bots_output_next_token(
    input: &crate::output::ListLexBotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_phone_numbers_output_next_token(
    input: &crate::output::ListPhoneNumbersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_prompts_output_next_token(
    input: &crate::output::ListPromptsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_queue_quick_connects_output_next_token(
    input: &crate::output::ListQueueQuickConnectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_queues_output_next_token(
    input: &crate::output::ListQueuesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_quick_connects_output_next_token(
    input: &crate::output::ListQuickConnectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_routing_profile_queues_output_next_token(
    input: &crate::output::ListRoutingProfileQueuesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_routing_profiles_output_next_token(
    input: &crate::output::ListRoutingProfilesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_security_keys_output_next_token(
    input: &crate::output::ListSecurityKeysOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_security_profile_permissions_output_next_token(
    input: &crate::output::ListSecurityProfilePermissionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_security_profiles_output_next_token(
    input: &crate::output::ListSecurityProfilesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_use_cases_output_next_token(
    input: &crate::output::ListUseCasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_user_hierarchy_groups_output_next_token(
    input: &crate::output::ListUserHierarchyGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_users_output_next_token(
    input: &crate::output::ListUsersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_vocabularies_output_next_token(
    input: &crate::output::SearchVocabulariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_agent_statuses_output_agent_status_summary_list(
    input: crate::output::ListAgentStatusesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AgentStatusSummary>> {
    let input = match input.agent_status_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_approved_origins_output_origins(
    input: crate::output::ListApprovedOriginsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.origins {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_bots_output_lex_bots(
    input: crate::output::ListBotsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::LexBotConfig>> {
    let input = match input.lex_bots {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_contact_flow_modules_output_contact_flow_modules_summary_list(
    input: crate::output::ListContactFlowModulesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ContactFlowModuleSummary>> {
    let input = match input.contact_flow_modules_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_contact_flows_output_contact_flow_summary_list(
    input: crate::output::ListContactFlowsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ContactFlowSummary>> {
    let input = match input.contact_flow_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_contact_references_output_reference_summary_list(
    input: crate::output::ListContactReferencesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReferenceSummary>> {
    let input = match input.reference_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_default_vocabularies_output_default_vocabulary_list(
    input: crate::output::ListDefaultVocabulariesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DefaultVocabulary>> {
    let input = match input.default_vocabulary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_hours_of_operations_output_hours_of_operation_summary_list(
    input: crate::output::ListHoursOfOperationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::HoursOfOperationSummary>> {
    let input = match input.hours_of_operation_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_instance_attributes_output_attributes(
    input: crate::output::ListInstanceAttributesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Attribute>> {
    let input = match input.attributes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_instances_output_instance_summary_list(
    input: crate::output::ListInstancesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::InstanceSummary>> {
    let input = match input.instance_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_instance_storage_configs_output_storage_configs(
    input: crate::output::ListInstanceStorageConfigsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::InstanceStorageConfig>> {
    let input = match input.storage_configs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_integration_associations_output_integration_association_summary_list(
    input: crate::output::ListIntegrationAssociationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::IntegrationAssociationSummary>> {
    let input = match input.integration_association_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_lambda_functions_output_lambda_functions(
    input: crate::output::ListLambdaFunctionsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.lambda_functions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_lex_bots_output_lex_bots(
    input: crate::output::ListLexBotsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::LexBot>> {
    let input = match input.lex_bots {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_phone_numbers_output_phone_number_summary_list(
    input: crate::output::ListPhoneNumbersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PhoneNumberSummary>> {
    let input = match input.phone_number_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_prompts_output_prompt_summary_list(
    input: crate::output::ListPromptsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PromptSummary>> {
    let input = match input.prompt_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_queue_quick_connects_output_quick_connect_summary_list(
    input: crate::output::ListQueueQuickConnectsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::QuickConnectSummary>> {
    let input = match input.quick_connect_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_queues_output_queue_summary_list(
    input: crate::output::ListQueuesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::QueueSummary>> {
    let input = match input.queue_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_quick_connects_output_quick_connect_summary_list(
    input: crate::output::ListQuickConnectsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::QuickConnectSummary>> {
    let input = match input.quick_connect_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_routing_profile_queues_output_routing_profile_queue_config_summary_list(
    input: crate::output::ListRoutingProfileQueuesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RoutingProfileQueueConfigSummary>> {
    let input = match input.routing_profile_queue_config_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_routing_profiles_output_routing_profile_summary_list(
    input: crate::output::ListRoutingProfilesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RoutingProfileSummary>> {
    let input = match input.routing_profile_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_security_keys_output_security_keys(
    input: crate::output::ListSecurityKeysOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SecurityKey>> {
    let input = match input.security_keys {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_security_profile_permissions_output_permissions(
    input: crate::output::ListSecurityProfilePermissionsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.permissions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_security_profiles_output_security_profile_summary_list(
    input: crate::output::ListSecurityProfilesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SecurityProfileSummary>> {
    let input = match input.security_profile_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_use_cases_output_use_case_summary_list(
    input: crate::output::ListUseCasesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UseCase>> {
    let input = match input.use_case_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_user_hierarchy_groups_output_user_hierarchy_group_summary_list(
    input: crate::output::ListUserHierarchyGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::HierarchyGroupSummary>> {
    let input = match input.user_hierarchy_group_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_users_output_user_summary_list(
    input: crate::output::ListUsersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UserSummary>> {
    let input = match input.user_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_search_vocabularies_output_vocabulary_summary_list(
    input: crate::output::SearchVocabulariesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::VocabularySummary>> {
    let input = match input.vocabulary_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
