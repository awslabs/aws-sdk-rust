// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn activate_evaluation_form_output_correct_errors(
    mut builder: crate::operation::activate_evaluation_form::builders::ActivateEvaluationFormOutputBuilder,
) -> crate::operation::activate_evaluation_form::builders::ActivateEvaluationFormOutputBuilder {
    if builder.evaluation_form_id.is_none() {
        builder.evaluation_form_id = Some(Default::default())
    }
    if builder.evaluation_form_arn.is_none() {
        builder.evaluation_form_arn = Some(Default::default())
    }
    if builder.evaluation_form_version.is_none() {
        builder.evaluation_form_version = Some(Default::default())
    }
    builder
}

pub(crate) fn create_evaluation_form_output_correct_errors(
    mut builder: crate::operation::create_evaluation_form::builders::CreateEvaluationFormOutputBuilder,
) -> crate::operation::create_evaluation_form::builders::CreateEvaluationFormOutputBuilder {
    if builder.evaluation_form_id.is_none() {
        builder.evaluation_form_id = Some(Default::default())
    }
    if builder.evaluation_form_arn.is_none() {
        builder.evaluation_form_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_rule_output_correct_errors(
    mut builder: crate::operation::create_rule::builders::CreateRuleOutputBuilder,
) -> crate::operation::create_rule::builders::CreateRuleOutputBuilder {
    if builder.rule_arn.is_none() {
        builder.rule_arn = Some(Default::default())
    }
    if builder.rule_id.is_none() {
        builder.rule_id = Some(Default::default())
    }
    builder
}

pub(crate) fn property_validation_exception_correct_errors(
    mut builder: crate::types::error::builders::PropertyValidationExceptionBuilder,
) -> crate::types::error::builders::PropertyValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_task_template_output_correct_errors(
    mut builder: crate::operation::create_task_template::builders::CreateTaskTemplateOutputBuilder,
) -> crate::operation::create_task_template::builders::CreateTaskTemplateOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_vocabulary_output_correct_errors(
    mut builder: crate::operation::create_vocabulary::builders::CreateVocabularyOutputBuilder,
) -> crate::operation::create_vocabulary::builders::CreateVocabularyOutputBuilder {
    if builder.vocabulary_arn.is_none() {
        builder.vocabulary_arn = Some(Default::default())
    }
    if builder.vocabulary_id.is_none() {
        builder.vocabulary_id = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::VocabularyState>().ok()
    }
    builder
}

pub(crate) fn deactivate_evaluation_form_output_correct_errors(
    mut builder: crate::operation::deactivate_evaluation_form::builders::DeactivateEvaluationFormOutputBuilder,
) -> crate::operation::deactivate_evaluation_form::builders::DeactivateEvaluationFormOutputBuilder {
    if builder.evaluation_form_id.is_none() {
        builder.evaluation_form_id = Some(Default::default())
    }
    if builder.evaluation_form_arn.is_none() {
        builder.evaluation_form_arn = Some(Default::default())
    }
    if builder.evaluation_form_version.is_none() {
        builder.evaluation_form_version = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_vocabulary_output_correct_errors(
    mut builder: crate::operation::delete_vocabulary::builders::DeleteVocabularyOutputBuilder,
) -> crate::operation::delete_vocabulary::builders::DeleteVocabularyOutputBuilder {
    if builder.vocabulary_arn.is_none() {
        builder.vocabulary_arn = Some(Default::default())
    }
    if builder.vocabulary_id.is_none() {
        builder.vocabulary_id = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::VocabularyState>().ok()
    }
    builder
}

pub(crate) fn describe_contact_evaluation_output_correct_errors(
    mut builder: crate::operation::describe_contact_evaluation::builders::DescribeContactEvaluationOutputBuilder,
) -> crate::operation::describe_contact_evaluation::builders::DescribeContactEvaluationOutputBuilder {
    if builder.evaluation.is_none() {
        builder.evaluation = {
            let builder = crate::types::builders::EvaluationBuilder::default();
            crate::serde_util::evaluation_correct_errors(builder).build().ok()
        }
    }
    if builder.evaluation_form.is_none() {
        builder.evaluation_form = {
            let builder = crate::types::builders::EvaluationFormContentBuilder::default();
            crate::serde_util::evaluation_form_content_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_evaluation_form_output_correct_errors(
    mut builder: crate::operation::describe_evaluation_form::builders::DescribeEvaluationFormOutputBuilder,
) -> crate::operation::describe_evaluation_form::builders::DescribeEvaluationFormOutputBuilder {
    if builder.evaluation_form.is_none() {
        builder.evaluation_form = {
            let builder = crate::types::builders::EvaluationFormBuilder::default();
            crate::serde_util::evaluation_form_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_rule_output_correct_errors(
    mut builder: crate::operation::describe_rule::builders::DescribeRuleOutputBuilder,
) -> crate::operation::describe_rule::builders::DescribeRuleOutputBuilder {
    if builder.rule.is_none() {
        builder.rule = {
            let builder = crate::types::builders::RuleBuilder::default();
            crate::serde_util::rule_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_vocabulary_output_correct_errors(
    mut builder: crate::operation::describe_vocabulary::builders::DescribeVocabularyOutputBuilder,
) -> crate::operation::describe_vocabulary::builders::DescribeVocabularyOutputBuilder {
    if builder.vocabulary.is_none() {
        builder.vocabulary = {
            let builder = crate::types::builders::VocabularyBuilder::default();
            crate::serde_util::vocabulary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_task_template_output_correct_errors(
    mut builder: crate::operation::get_task_template::builders::GetTaskTemplateOutputBuilder,
) -> crate::operation::get_task_template::builders::GetTaskTemplateOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn list_contact_evaluations_output_correct_errors(
    mut builder: crate::operation::list_contact_evaluations::builders::ListContactEvaluationsOutputBuilder,
) -> crate::operation::list_contact_evaluations::builders::ListContactEvaluationsOutputBuilder {
    if builder.evaluation_summary_list.is_none() {
        builder.evaluation_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_default_vocabularies_output_correct_errors(
    mut builder: crate::operation::list_default_vocabularies::builders::ListDefaultVocabulariesOutputBuilder,
) -> crate::operation::list_default_vocabularies::builders::ListDefaultVocabulariesOutputBuilder {
    if builder.default_vocabulary_list.is_none() {
        builder.default_vocabulary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_evaluation_form_versions_output_correct_errors(
    mut builder: crate::operation::list_evaluation_form_versions::builders::ListEvaluationFormVersionsOutputBuilder,
) -> crate::operation::list_evaluation_form_versions::builders::ListEvaluationFormVersionsOutputBuilder {
    if builder.evaluation_form_version_summary_list.is_none() {
        builder.evaluation_form_version_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_evaluation_forms_output_correct_errors(
    mut builder: crate::operation::list_evaluation_forms::builders::ListEvaluationFormsOutputBuilder,
) -> crate::operation::list_evaluation_forms::builders::ListEvaluationFormsOutputBuilder {
    if builder.evaluation_form_summary_list.is_none() {
        builder.evaluation_form_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_rules_output_correct_errors(
    mut builder: crate::operation::list_rules::builders::ListRulesOutputBuilder,
) -> crate::operation::list_rules::builders::ListRulesOutputBuilder {
    if builder.rule_summary_list.is_none() {
        builder.rule_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn start_contact_evaluation_output_correct_errors(
    mut builder: crate::operation::start_contact_evaluation::builders::StartContactEvaluationOutputBuilder,
) -> crate::operation::start_contact_evaluation::builders::StartContactEvaluationOutputBuilder {
    if builder.evaluation_id.is_none() {
        builder.evaluation_id = Some(Default::default())
    }
    if builder.evaluation_arn.is_none() {
        builder.evaluation_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn start_contact_streaming_output_correct_errors(
    mut builder: crate::operation::start_contact_streaming::builders::StartContactStreamingOutputBuilder,
) -> crate::operation::start_contact_streaming::builders::StartContactStreamingOutputBuilder {
    if builder.streaming_id.is_none() {
        builder.streaming_id = Some(Default::default())
    }
    builder
}

pub(crate) fn submit_contact_evaluation_output_correct_errors(
    mut builder: crate::operation::submit_contact_evaluation::builders::SubmitContactEvaluationOutputBuilder,
) -> crate::operation::submit_contact_evaluation::builders::SubmitContactEvaluationOutputBuilder {
    if builder.evaluation_id.is_none() {
        builder.evaluation_id = Some(Default::default())
    }
    if builder.evaluation_arn.is_none() {
        builder.evaluation_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_contact_evaluation_output_correct_errors(
    mut builder: crate::operation::update_contact_evaluation::builders::UpdateContactEvaluationOutputBuilder,
) -> crate::operation::update_contact_evaluation::builders::UpdateContactEvaluationOutputBuilder {
    if builder.evaluation_id.is_none() {
        builder.evaluation_id = Some(Default::default())
    }
    if builder.evaluation_arn.is_none() {
        builder.evaluation_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_evaluation_form_output_correct_errors(
    mut builder: crate::operation::update_evaluation_form::builders::UpdateEvaluationFormOutputBuilder,
) -> crate::operation::update_evaluation_form::builders::UpdateEvaluationFormOutputBuilder {
    if builder.evaluation_form_id.is_none() {
        builder.evaluation_form_id = Some(Default::default())
    }
    if builder.evaluation_form_arn.is_none() {
        builder.evaluation_form_arn = Some(Default::default())
    }
    if builder.evaluation_form_version.is_none() {
        builder.evaluation_form_version = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_correct_errors(mut builder: crate::types::builders::EvaluationBuilder) -> crate::types::builders::EvaluationBuilder {
    if builder.evaluation_id.is_none() {
        builder.evaluation_id = Some(Default::default())
    }
    if builder.evaluation_arn.is_none() {
        builder.evaluation_arn = Some(Default::default())
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::EvaluationMetadataBuilder::default();
            crate::serde_util::evaluation_metadata_correct_errors(builder).build().ok()
        }
    }
    if builder.answers.is_none() {
        builder.answers = Some(Default::default())
    }
    if builder.notes.is_none() {
        builder.notes = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EvaluationStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn evaluation_form_content_correct_errors(
    mut builder: crate::types::builders::EvaluationFormContentBuilder,
) -> crate::types::builders::EvaluationFormContentBuilder {
    if builder.evaluation_form_version.is_none() {
        builder.evaluation_form_version = Some(Default::default())
    }
    if builder.evaluation_form_id.is_none() {
        builder.evaluation_form_id = Some(Default::default())
    }
    if builder.evaluation_form_arn.is_none() {
        builder.evaluation_form_arn = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_form_correct_errors(
    mut builder: crate::types::builders::EvaluationFormBuilder,
) -> crate::types::builders::EvaluationFormBuilder {
    if builder.evaluation_form_id.is_none() {
        builder.evaluation_form_id = Some(Default::default())
    }
    if builder.evaluation_form_version.is_none() {
        builder.evaluation_form_version = Some(Default::default())
    }
    if builder.locked.is_none() {
        builder.locked = Some(Default::default())
    }
    if builder.evaluation_form_arn.is_none() {
        builder.evaluation_form_arn = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EvaluationFormVersionStatus>().ok()
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_by.is_none() {
        builder.last_modified_by = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_correct_errors(mut builder: crate::types::builders::RuleBuilder) -> crate::types::builders::RuleBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.rule_id.is_none() {
        builder.rule_id = Some(Default::default())
    }
    if builder.rule_arn.is_none() {
        builder.rule_arn = Some(Default::default())
    }
    if builder.trigger_event_source.is_none() {
        builder.trigger_event_source = {
            let builder = crate::types::builders::RuleTriggerEventSourceBuilder::default();
            crate::serde_util::rule_trigger_event_source_correct_errors(builder).build().ok()
        }
    }
    if builder.function.is_none() {
        builder.function = Some(Default::default())
    }
    if builder.actions.is_none() {
        builder.actions = Some(Default::default())
    }
    if builder.publish_status.is_none() {
        builder.publish_status = "no value was set".parse::<crate::types::RulePublishStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_by.is_none() {
        builder.last_updated_by = Some(Default::default())
    }
    builder
}

pub(crate) fn vocabulary_correct_errors(mut builder: crate::types::builders::VocabularyBuilder) -> crate::types::builders::VocabularyBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.language_code.is_none() {
        builder.language_code = "no value was set".parse::<crate::types::VocabularyLanguageCode>().ok()
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::VocabularyState>().ok()
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_config_correct_errors(mut builder: crate::types::builders::AgentConfigBuilder) -> crate::types::builders::AgentConfigBuilder {
    if builder.distributions.is_none() {
        builder.distributions = Some(Default::default())
    }
    builder
}

pub(crate) fn instance_storage_config_correct_errors(
    mut builder: crate::types::builders::InstanceStorageConfigBuilder,
) -> crate::types::builders::InstanceStorageConfigBuilder {
    if builder.storage_type.is_none() {
        builder.storage_type = "no value was set".parse::<crate::types::StorageType>().ok()
    }
    builder
}

pub(crate) fn sign_in_config_correct_errors(mut builder: crate::types::builders::SignInConfigBuilder) -> crate::types::builders::SignInConfigBuilder {
    if builder.distributions.is_none() {
        builder.distributions = Some(Default::default())
    }
    builder
}

pub(crate) fn telephony_config_correct_errors(
    mut builder: crate::types::builders::TelephonyConfigBuilder,
) -> crate::types::builders::TelephonyConfigBuilder {
    if builder.distributions.is_none() {
        builder.distributions = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_metadata_correct_errors(
    mut builder: crate::types::builders::EvaluationMetadataBuilder,
) -> crate::types::builders::EvaluationMetadataBuilder {
    if builder.contact_id.is_none() {
        builder.contact_id = Some(Default::default())
    }
    if builder.evaluator_arn.is_none() {
        builder.evaluator_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_trigger_event_source_correct_errors(
    mut builder: crate::types::builders::RuleTriggerEventSourceBuilder,
) -> crate::types::builders::RuleTriggerEventSourceBuilder {
    if builder.event_source_name.is_none() {
        builder.event_source_name = "no value was set".parse::<crate::types::EventSourceName>().ok()
    }
    builder
}

pub(crate) fn default_vocabulary_correct_errors(
    mut builder: crate::types::builders::DefaultVocabularyBuilder,
) -> crate::types::builders::DefaultVocabularyBuilder {
    if builder.instance_id.is_none() {
        builder.instance_id = Some(Default::default())
    }
    if builder.language_code.is_none() {
        builder.language_code = "no value was set".parse::<crate::types::VocabularyLanguageCode>().ok()
    }
    if builder.vocabulary_id.is_none() {
        builder.vocabulary_id = Some(Default::default())
    }
    if builder.vocabulary_name.is_none() {
        builder.vocabulary_name = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_form_scoring_strategy_correct_errors(
    mut builder: crate::types::builders::EvaluationFormScoringStrategyBuilder,
) -> crate::types::builders::EvaluationFormScoringStrategyBuilder {
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::EvaluationFormScoringMode>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EvaluationFormScoringStatus>().ok()
    }
    builder
}

pub(crate) fn evaluation_form_summary_correct_errors(
    mut builder: crate::types::builders::EvaluationFormSummaryBuilder,
) -> crate::types::builders::EvaluationFormSummaryBuilder {
    if builder.evaluation_form_id.is_none() {
        builder.evaluation_form_id = Some(Default::default())
    }
    if builder.evaluation_form_arn.is_none() {
        builder.evaluation_form_arn = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_by.is_none() {
        builder.last_modified_by = Some(Default::default())
    }
    if builder.latest_version.is_none() {
        builder.latest_version = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_form_version_summary_correct_errors(
    mut builder: crate::types::builders::EvaluationFormVersionSummaryBuilder,
) -> crate::types::builders::EvaluationFormVersionSummaryBuilder {
    if builder.evaluation_form_arn.is_none() {
        builder.evaluation_form_arn = Some(Default::default())
    }
    if builder.evaluation_form_id.is_none() {
        builder.evaluation_form_id = Some(Default::default())
    }
    if builder.evaluation_form_version.is_none() {
        builder.evaluation_form_version = Some(Default::default())
    }
    if builder.locked.is_none() {
        builder.locked = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EvaluationFormVersionStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_by.is_none() {
        builder.last_modified_by = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_summary_correct_errors(
    mut builder: crate::types::builders::EvaluationSummaryBuilder,
) -> crate::types::builders::EvaluationSummaryBuilder {
    if builder.evaluation_id.is_none() {
        builder.evaluation_id = Some(Default::default())
    }
    if builder.evaluation_arn.is_none() {
        builder.evaluation_arn = Some(Default::default())
    }
    if builder.evaluation_form_title.is_none() {
        builder.evaluation_form_title = Some(Default::default())
    }
    if builder.evaluation_form_id.is_none() {
        builder.evaluation_form_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EvaluationStatus>().ok()
    }
    if builder.evaluator_arn.is_none() {
        builder.evaluator_arn = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn kinesis_firehose_config_correct_errors(
    mut builder: crate::types::builders::KinesisFirehoseConfigBuilder,
) -> crate::types::builders::KinesisFirehoseConfigBuilder {
    if builder.firehose_arn.is_none() {
        builder.firehose_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn kinesis_stream_config_correct_errors(
    mut builder: crate::types::builders::KinesisStreamConfigBuilder,
) -> crate::types::builders::KinesisStreamConfigBuilder {
    if builder.stream_arn.is_none() {
        builder.stream_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn kinesis_video_stream_config_correct_errors(
    mut builder: crate::types::builders::KinesisVideoStreamConfigBuilder,
) -> crate::types::builders::KinesisVideoStreamConfigBuilder {
    if builder.prefix.is_none() {
        builder.prefix = Some(Default::default())
    }
    if builder.retention_period_hours.is_none() {
        builder.retention_period_hours = Some(Default::default())
    }
    if builder.encryption_config.is_none() {
        builder.encryption_config = {
            let builder = crate::types::builders::EncryptionConfigBuilder::default();
            crate::serde_util::encryption_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn lex_bot_correct_errors(mut builder: crate::types::builders::LexBotBuilder) -> crate::types::builders::LexBotBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.lex_region.is_none() {
        builder.lex_region = Some(Default::default())
    }
    builder
}

pub(crate) fn property_validation_exception_property_correct_errors(
    mut builder: crate::types::builders::PropertyValidationExceptionPropertyBuilder,
) -> crate::types::builders::PropertyValidationExceptionPropertyBuilder {
    if builder.property_path.is_none() {
        builder.property_path = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::PropertyValidationExceptionReason>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn quick_connect_config_correct_errors(
    mut builder: crate::types::builders::QuickConnectConfigBuilder,
) -> crate::types::builders::QuickConnectConfigBuilder {
    if builder.quick_connect_type.is_none() {
        builder.quick_connect_type = "no value was set".parse::<crate::types::QuickConnectType>().ok()
    }
    builder
}

pub(crate) fn routing_profile_queue_config_summary_correct_errors(
    mut builder: crate::types::builders::RoutingProfileQueueConfigSummaryBuilder,
) -> crate::types::builders::RoutingProfileQueueConfigSummaryBuilder {
    if builder.queue_id.is_none() {
        builder.queue_id = Some(Default::default())
    }
    if builder.queue_arn.is_none() {
        builder.queue_arn = Some(Default::default())
    }
    if builder.queue_name.is_none() {
        builder.queue_name = Some(Default::default())
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    if builder.delay.is_none() {
        builder.delay = Some(Default::default())
    }
    if builder.channel.is_none() {
        builder.channel = "no value was set".parse::<crate::types::Channel>().ok()
    }
    builder
}

pub(crate) fn rule_summary_correct_errors(mut builder: crate::types::builders::RuleSummaryBuilder) -> crate::types::builders::RuleSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.rule_id.is_none() {
        builder.rule_id = Some(Default::default())
    }
    if builder.rule_arn.is_none() {
        builder.rule_arn = Some(Default::default())
    }
    if builder.event_source_name.is_none() {
        builder.event_source_name = "no value was set".parse::<crate::types::EventSourceName>().ok()
    }
    if builder.publish_status.is_none() {
        builder.publish_status = "no value was set".parse::<crate::types::RulePublishStatus>().ok()
    }
    if builder.action_summaries.is_none() {
        builder.action_summaries = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn s3_config_correct_errors(mut builder: crate::types::builders::S3ConfigBuilder) -> crate::types::builders::S3ConfigBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.bucket_prefix.is_none() {
        builder.bucket_prefix = Some(Default::default())
    }
    builder
}

pub(crate) fn task_template_field_correct_errors(
    mut builder: crate::types::builders::TaskTemplateFieldBuilder,
) -> crate::types::builders::TaskTemplateFieldBuilder {
    if builder.id.is_none() {
        builder.id = {
            let builder = crate::types::builders::TaskTemplateFieldIdentifierBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn user_phone_config_correct_errors(
    mut builder: crate::types::builders::UserPhoneConfigBuilder,
) -> crate::types::builders::UserPhoneConfigBuilder {
    if builder.phone_type.is_none() {
        builder.phone_type = "no value was set".parse::<crate::types::PhoneType>().ok()
    }
    builder
}

pub(crate) fn vocabulary_summary_correct_errors(
    mut builder: crate::types::builders::VocabularySummaryBuilder,
) -> crate::types::builders::VocabularySummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.language_code.is_none() {
        builder.language_code = "no value was set".parse::<crate::types::VocabularyLanguageCode>().ok()
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::VocabularyState>().ok()
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn distribution_correct_errors(mut builder: crate::types::builders::DistributionBuilder) -> crate::types::builders::DistributionBuilder {
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    if builder.percentage.is_none() {
        builder.percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_config_correct_errors(
    mut builder: crate::types::builders::EncryptionConfigBuilder,
) -> crate::types::builders::EncryptionConfigBuilder {
    if builder.encryption_type.is_none() {
        builder.encryption_type = "no value was set".parse::<crate::types::EncryptionType>().ok()
    }
    if builder.key_id.is_none() {
        builder.key_id = Some(Default::default())
    }
    builder
}

pub(crate) fn hours_of_operation_config_correct_errors(
    mut builder: crate::types::builders::HoursOfOperationConfigBuilder,
) -> crate::types::builders::HoursOfOperationConfigBuilder {
    if builder.day.is_none() {
        builder.day = "no value was set".parse::<crate::types::HoursOfOperationDays>().ok()
    }
    if builder.start_time.is_none() {
        builder.start_time = {
            let builder = crate::types::builders::HoursOfOperationTimeSliceBuilder::default();
            crate::serde_util::hours_of_operation_time_slice_correct_errors(builder).build().ok()
        }
    }
    if builder.end_time.is_none() {
        builder.end_time = {
            let builder = crate::types::builders::HoursOfOperationTimeSliceBuilder::default();
            crate::serde_util::hours_of_operation_time_slice_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn media_concurrency_correct_errors(
    mut builder: crate::types::builders::MediaConcurrencyBuilder,
) -> crate::types::builders::MediaConcurrencyBuilder {
    if builder.channel.is_none() {
        builder.channel = "no value was set".parse::<crate::types::Channel>().ok()
    }
    if builder.concurrency.is_none() {
        builder.concurrency = Some(Default::default())
    }
    builder
}

pub(crate) fn phone_number_quick_connect_config_correct_errors(
    mut builder: crate::types::builders::PhoneNumberQuickConnectConfigBuilder,
) -> crate::types::builders::PhoneNumberQuickConnectConfigBuilder {
    if builder.phone_number.is_none() {
        builder.phone_number = Some(Default::default())
    }
    builder
}

pub(crate) fn queue_quick_connect_config_correct_errors(
    mut builder: crate::types::builders::QueueQuickConnectConfigBuilder,
) -> crate::types::builders::QueueQuickConnectConfigBuilder {
    if builder.queue_id.is_none() {
        builder.queue_id = Some(Default::default())
    }
    if builder.contact_flow_id.is_none() {
        builder.contact_flow_id = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_action_correct_errors(mut builder: crate::types::builders::RuleActionBuilder) -> crate::types::builders::RuleActionBuilder {
    if builder.action_type.is_none() {
        builder.action_type = "no value was set".parse::<crate::types::ActionType>().ok()
    }
    builder
}

pub(crate) fn sign_in_distribution_correct_errors(
    mut builder: crate::types::builders::SignInDistributionBuilder,
) -> crate::types::builders::SignInDistributionBuilder {
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn user_quick_connect_config_correct_errors(
    mut builder: crate::types::builders::UserQuickConnectConfigBuilder,
) -> crate::types::builders::UserQuickConnectConfigBuilder {
    if builder.user_id.is_none() {
        builder.user_id = Some(Default::default())
    }
    if builder.contact_flow_id.is_none() {
        builder.contact_flow_id = Some(Default::default())
    }
    builder
}

pub(crate) fn action_summary_correct_errors(
    mut builder: crate::types::builders::ActionSummaryBuilder,
) -> crate::types::builders::ActionSummaryBuilder {
    if builder.action_type.is_none() {
        builder.action_type = "no value was set".parse::<crate::types::ActionType>().ok()
    }
    builder
}

pub(crate) fn cross_channel_behavior_correct_errors(
    mut builder: crate::types::builders::CrossChannelBehaviorBuilder,
) -> crate::types::builders::CrossChannelBehaviorBuilder {
    if builder.behavior_type.is_none() {
        builder.behavior_type = "no value was set".parse::<crate::types::BehaviorType>().ok()
    }
    builder
}

pub(crate) fn evaluation_form_question_correct_errors(
    mut builder: crate::types::builders::EvaluationFormQuestionBuilder,
) -> crate::types::builders::EvaluationFormQuestionBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.ref_id.is_none() {
        builder.ref_id = Some(Default::default())
    }
    if builder.question_type.is_none() {
        builder.question_type = "no value was set".parse::<crate::types::EvaluationFormQuestionType>().ok()
    }
    builder
}

pub(crate) fn evaluation_form_section_correct_errors(
    mut builder: crate::types::builders::EvaluationFormSectionBuilder,
) -> crate::types::builders::EvaluationFormSectionBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.ref_id.is_none() {
        builder.ref_id = Some(Default::default())
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn event_bridge_action_definition_correct_errors(
    mut builder: crate::types::builders::EventBridgeActionDefinitionBuilder,
) -> crate::types::builders::EventBridgeActionDefinitionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn hours_of_operation_time_slice_correct_errors(
    mut builder: crate::types::builders::HoursOfOperationTimeSliceBuilder,
) -> crate::types::builders::HoursOfOperationTimeSliceBuilder {
    if builder.hours.is_none() {
        builder.hours = Some(Default::default())
    }
    if builder.minutes.is_none() {
        builder.minutes = Some(Default::default())
    }
    builder
}

pub(crate) fn send_notification_action_definition_correct_errors(
    mut builder: crate::types::builders::SendNotificationActionDefinitionBuilder,
) -> crate::types::builders::SendNotificationActionDefinitionBuilder {
    if builder.delivery_method.is_none() {
        builder.delivery_method = "no value was set".parse::<crate::types::NotificationDeliveryType>().ok()
    }
    if builder.content.is_none() {
        builder.content = Some(Default::default())
    }
    if builder.content_type.is_none() {
        builder.content_type = "no value was set".parse::<crate::types::NotificationContentType>().ok()
    }
    if builder.recipient.is_none() {
        builder.recipient = {
            let builder = crate::types::builders::NotificationRecipientTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn task_action_definition_correct_errors(
    mut builder: crate::types::builders::TaskActionDefinitionBuilder,
) -> crate::types::builders::TaskActionDefinitionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.contact_flow_id.is_none() {
        builder.contact_flow_id = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_form_numeric_question_properties_correct_errors(
    mut builder: crate::types::builders::EvaluationFormNumericQuestionPropertiesBuilder,
) -> crate::types::builders::EvaluationFormNumericQuestionPropertiesBuilder {
    if builder.min_value.is_none() {
        builder.min_value = Some(Default::default())
    }
    if builder.max_value.is_none() {
        builder.max_value = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_form_single_select_question_properties_correct_errors(
    mut builder: crate::types::builders::EvaluationFormSingleSelectQuestionPropertiesBuilder,
) -> crate::types::builders::EvaluationFormSingleSelectQuestionPropertiesBuilder {
    if builder.options.is_none() {
        builder.options = Some(Default::default())
    }
    builder
}

pub(crate) fn reference_correct_errors(mut builder: crate::types::builders::ReferenceBuilder) -> crate::types::builders::ReferenceBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ReferenceType>().ok()
    }
    builder
}

pub(crate) fn evaluation_form_single_select_question_automation_correct_errors(
    mut builder: crate::types::builders::EvaluationFormSingleSelectQuestionAutomationBuilder,
) -> crate::types::builders::EvaluationFormSingleSelectQuestionAutomationBuilder {
    if builder.options.is_none() {
        builder.options = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_form_numeric_question_option_correct_errors(
    mut builder: crate::types::builders::EvaluationFormNumericQuestionOptionBuilder,
) -> crate::types::builders::EvaluationFormNumericQuestionOptionBuilder {
    if builder.min_value.is_none() {
        builder.min_value = Some(Default::default())
    }
    if builder.max_value.is_none() {
        builder.max_value = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_form_single_select_question_option_correct_errors(
    mut builder: crate::types::builders::EvaluationFormSingleSelectQuestionOptionBuilder,
) -> crate::types::builders::EvaluationFormSingleSelectQuestionOptionBuilder {
    if builder.ref_id.is_none() {
        builder.ref_id = Some(Default::default())
    }
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn numeric_question_property_value_automation_correct_errors(
    mut builder: crate::types::builders::NumericQuestionPropertyValueAutomationBuilder,
) -> crate::types::builders::NumericQuestionPropertyValueAutomationBuilder {
    if builder.label.is_none() {
        builder.label = "no value was set".parse::<crate::types::NumericQuestionPropertyAutomationLabel>().ok()
    }
    builder
}

pub(crate) fn single_select_question_rule_category_automation_correct_errors(
    mut builder: crate::types::builders::SingleSelectQuestionRuleCategoryAutomationBuilder,
) -> crate::types::builders::SingleSelectQuestionRuleCategoryAutomationBuilder {
    if builder.category.is_none() {
        builder.category = Some(Default::default())
    }
    if builder.condition.is_none() {
        builder.condition = "no value was set"
            .parse::<crate::types::SingleSelectQuestionRuleCategoryAutomationCondition>()
            .ok()
    }
    if builder.option_ref_id.is_none() {
        builder.option_ref_id = Some(Default::default())
    }
    builder
}
