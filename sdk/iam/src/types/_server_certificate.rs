// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a server certificate.</p>
/// <p> This data type is used as a response element in the <code>GetServerCertificate</code> operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServerCertificate {
    /// <p>The meta information of the server certificate, such as its name, path, ID, and ARN.</p>
    #[doc(hidden)]
    pub server_certificate_metadata: std::option::Option<crate::types::ServerCertificateMetadata>,
    /// <p>The contents of the public key certificate.</p>
    #[doc(hidden)]
    pub certificate_body: std::option::Option<std::string::String>,
    /// <p>The contents of the public key certificate chain.</p>
    #[doc(hidden)]
    pub certificate_chain: std::option::Option<std::string::String>,
    /// <p>A list of tags that are attached to the server certificate. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl ServerCertificate {
    /// <p>The meta information of the server certificate, such as its name, path, ID, and ARN.</p>
    pub fn server_certificate_metadata(
        &self,
    ) -> std::option::Option<&crate::types::ServerCertificateMetadata> {
        self.server_certificate_metadata.as_ref()
    }
    /// <p>The contents of the public key certificate.</p>
    pub fn certificate_body(&self) -> std::option::Option<&str> {
        self.certificate_body.as_deref()
    }
    /// <p>The contents of the public key certificate chain.</p>
    pub fn certificate_chain(&self) -> std::option::Option<&str> {
        self.certificate_chain.as_deref()
    }
    /// <p>A list of tags that are attached to the server certificate. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl ServerCertificate {
    /// Creates a new builder-style object to manufacture [`ServerCertificate`](crate::types::ServerCertificate).
    pub fn builder() -> crate::types::builders::ServerCertificateBuilder {
        crate::types::builders::ServerCertificateBuilder::default()
    }
}

/// A builder for [`ServerCertificate`](crate::types::ServerCertificate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServerCertificateBuilder {
    pub(crate) server_certificate_metadata:
        std::option::Option<crate::types::ServerCertificateMetadata>,
    pub(crate) certificate_body: std::option::Option<std::string::String>,
    pub(crate) certificate_chain: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl ServerCertificateBuilder {
    /// <p>The meta information of the server certificate, such as its name, path, ID, and ARN.</p>
    pub fn server_certificate_metadata(
        mut self,
        input: crate::types::ServerCertificateMetadata,
    ) -> Self {
        self.server_certificate_metadata = Some(input);
        self
    }
    /// <p>The meta information of the server certificate, such as its name, path, ID, and ARN.</p>
    pub fn set_server_certificate_metadata(
        mut self,
        input: std::option::Option<crate::types::ServerCertificateMetadata>,
    ) -> Self {
        self.server_certificate_metadata = input;
        self
    }
    /// <p>The contents of the public key certificate.</p>
    pub fn certificate_body(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_body = Some(input.into());
        self
    }
    /// <p>The contents of the public key certificate.</p>
    pub fn set_certificate_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_body = input;
        self
    }
    /// <p>The contents of the public key certificate chain.</p>
    pub fn certificate_chain(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_chain = Some(input.into());
        self
    }
    /// <p>The contents of the public key certificate chain.</p>
    pub fn set_certificate_chain(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.certificate_chain = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags that are attached to the server certificate. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tags that are attached to the server certificate. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`ServerCertificate`](crate::types::ServerCertificate).
    pub fn build(self) -> crate::types::ServerCertificate {
        crate::types::ServerCertificate {
            server_certificate_metadata: self.server_certificate_metadata,
            certificate_body: self.certificate_body,
            certificate_chain: self.certificate_chain,
            tags: self.tags,
        }
    }
}
