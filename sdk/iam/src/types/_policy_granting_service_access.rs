// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the permissions policies that are attached to the specified identity (user, group, or role).</p>
/// <p>This data type is an element of the <code>ListPoliciesGrantingServiceAccessEntry</code> object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PolicyGrantingServiceAccess {
    /// <p>The policy name.</p>
    pub policy_name: ::std::string::String,
    /// <p>The policy type. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub policy_type: crate::types::PolicyType,
    /// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
    /// <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
    pub policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of entity (user or role) that used the policy to access the service to which the inline policy is attached.</p>
    /// <p>This field is null for managed policies. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub entity_type: ::std::option::Option<crate::types::PolicyOwnerEntityType>,
    /// <p>The name of the entity (user or role) to which the inline policy is attached.</p>
    /// <p>This field is null for managed policies. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub entity_name: ::std::option::Option<::std::string::String>,
}
impl PolicyGrantingServiceAccess {
    /// <p>The policy name.</p>
    pub fn policy_name(&self) -> &str {
        use std::ops::Deref;
        self.policy_name.deref()
    }
    /// <p>The policy type. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub fn policy_type(&self) -> &crate::types::PolicyType {
        &self.policy_type
    }
    /// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
    /// <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
    pub fn policy_arn(&self) -> ::std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>The type of entity (user or role) that used the policy to access the service to which the inline policy is attached.</p>
    /// <p>This field is null for managed policies. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub fn entity_type(&self) -> ::std::option::Option<&crate::types::PolicyOwnerEntityType> {
        self.entity_type.as_ref()
    }
    /// <p>The name of the entity (user or role) to which the inline policy is attached.</p>
    /// <p>This field is null for managed policies. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub fn entity_name(&self) -> ::std::option::Option<&str> {
        self.entity_name.as_deref()
    }
}
impl PolicyGrantingServiceAccess {
    /// Creates a new builder-style object to manufacture [`PolicyGrantingServiceAccess`](crate::types::PolicyGrantingServiceAccess).
    pub fn builder() -> crate::types::builders::PolicyGrantingServiceAccessBuilder {
        crate::types::builders::PolicyGrantingServiceAccessBuilder::default()
    }
}

/// A builder for [`PolicyGrantingServiceAccess`](crate::types::PolicyGrantingServiceAccess).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PolicyGrantingServiceAccessBuilder {
    pub(crate) policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) policy_type: ::std::option::Option<crate::types::PolicyType>,
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) entity_type: ::std::option::Option<crate::types::PolicyOwnerEntityType>,
    pub(crate) entity_name: ::std::option::Option<::std::string::String>,
}
impl PolicyGrantingServiceAccessBuilder {
    /// <p>The policy name.</p>
    /// This field is required.
    pub fn policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The policy name.</p>
    pub fn set_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>The policy name.</p>
    pub fn get_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_name
    }
    /// <p>The policy type. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    /// This field is required.
    pub fn policy_type(mut self, input: crate::types::PolicyType) -> Self {
        self.policy_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The policy type. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub fn set_policy_type(mut self, input: ::std::option::Option<crate::types::PolicyType>) -> Self {
        self.policy_type = input;
        self
    }
    /// <p>The policy type. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub fn get_policy_type(&self) -> &::std::option::Option<crate::types::PolicyType> {
        &self.policy_type
    }
    /// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
    /// <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
    /// <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
    /// <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The type of entity (user or role) that used the policy to access the service to which the inline policy is attached.</p>
    /// <p>This field is null for managed policies. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub fn entity_type(mut self, input: crate::types::PolicyOwnerEntityType) -> Self {
        self.entity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of entity (user or role) that used the policy to access the service to which the inline policy is attached.</p>
    /// <p>This field is null for managed policies. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<crate::types::PolicyOwnerEntityType>) -> Self {
        self.entity_type = input;
        self
    }
    /// <p>The type of entity (user or role) that used the policy to access the service to which the inline policy is attached.</p>
    /// <p>This field is null for managed policies. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub fn get_entity_type(&self) -> &::std::option::Option<crate::types::PolicyOwnerEntityType> {
        &self.entity_type
    }
    /// <p>The name of the entity (user or role) to which the inline policy is attached.</p>
    /// <p>This field is null for managed policies. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub fn entity_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the entity (user or role) to which the inline policy is attached.</p>
    /// <p>This field is null for managed policies. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub fn set_entity_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_name = input;
        self
    }
    /// <p>The name of the entity (user or role) to which the inline policy is attached.</p>
    /// <p>This field is null for managed policies. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
    pub fn get_entity_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_name
    }
    /// Consumes the builder and constructs a [`PolicyGrantingServiceAccess`](crate::types::PolicyGrantingServiceAccess).
    /// This method will fail if any of the following fields are not set:
    /// - [`policy_name`](crate::types::builders::PolicyGrantingServiceAccessBuilder::policy_name)
    /// - [`policy_type`](crate::types::builders::PolicyGrantingServiceAccessBuilder::policy_type)
    pub fn build(self) -> ::std::result::Result<crate::types::PolicyGrantingServiceAccess, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PolicyGrantingServiceAccess {
            policy_name: self.policy_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_name",
                    "policy_name was not specified but it is required when building PolicyGrantingServiceAccess",
                )
            })?,
            policy_type: self.policy_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_type",
                    "policy_type was not specified but it is required when building PolicyGrantingServiceAccess",
                )
            })?,
            policy_arn: self.policy_arn,
            entity_type: self.entity_type,
            entity_name: self.entity_name,
        })
    }
}
