// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `SummaryKeyType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let summarykeytype = unimplemented!();
/// match summarykeytype {
///     SummaryKeyType::AccessKeysPerUserQuota => { /* ... */ },
///     SummaryKeyType::AccountAccessKeysPresent => { /* ... */ },
///     SummaryKeyType::AccountMfaEnabled => { /* ... */ },
///     SummaryKeyType::AccountSigningCertificatesPresent => { /* ... */ },
///     SummaryKeyType::AttachedPoliciesPerGroupQuota => { /* ... */ },
///     SummaryKeyType::AttachedPoliciesPerRoleQuota => { /* ... */ },
///     SummaryKeyType::AttachedPoliciesPerUserQuota => { /* ... */ },
///     SummaryKeyType::GlobalEndpointTokenVersion => { /* ... */ },
///     SummaryKeyType::GroupPolicySizeQuota => { /* ... */ },
///     SummaryKeyType::Groups => { /* ... */ },
///     SummaryKeyType::GroupsPerUserQuota => { /* ... */ },
///     SummaryKeyType::GroupsQuota => { /* ... */ },
///     SummaryKeyType::MfaDevices => { /* ... */ },
///     SummaryKeyType::MfaDevicesInUse => { /* ... */ },
///     SummaryKeyType::Policies => { /* ... */ },
///     SummaryKeyType::PoliciesQuota => { /* ... */ },
///     SummaryKeyType::PolicySizeQuota => { /* ... */ },
///     SummaryKeyType::PolicyVersionsInUse => { /* ... */ },
///     SummaryKeyType::PolicyVersionsInUseQuota => { /* ... */ },
///     SummaryKeyType::ServerCertificates => { /* ... */ },
///     SummaryKeyType::ServerCertificatesQuota => { /* ... */ },
///     SummaryKeyType::SigningCertificatesPerUserQuota => { /* ... */ },
///     SummaryKeyType::UserPolicySizeQuota => { /* ... */ },
///     SummaryKeyType::Users => { /* ... */ },
///     SummaryKeyType::UsersQuota => { /* ... */ },
///     SummaryKeyType::VersionsPerPolicyQuota => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `summarykeytype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `SummaryKeyType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `SummaryKeyType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `SummaryKeyType::NewFeature` is defined.
/// Specifically, when `summarykeytype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `SummaryKeyType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum SummaryKeyType {
    #[allow(missing_docs)] // documentation missing in model
    AccessKeysPerUserQuota,
    #[allow(missing_docs)] // documentation missing in model
    AccountAccessKeysPresent,
    #[allow(missing_docs)] // documentation missing in model
    AccountMfaEnabled,
    #[allow(missing_docs)] // documentation missing in model
    AccountSigningCertificatesPresent,
    #[allow(missing_docs)] // documentation missing in model
    AttachedPoliciesPerGroupQuota,
    #[allow(missing_docs)] // documentation missing in model
    AttachedPoliciesPerRoleQuota,
    #[allow(missing_docs)] // documentation missing in model
    AttachedPoliciesPerUserQuota,
    #[allow(missing_docs)] // documentation missing in model
    GlobalEndpointTokenVersion,
    #[allow(missing_docs)] // documentation missing in model
    GroupPolicySizeQuota,
    #[allow(missing_docs)] // documentation missing in model
    Groups,
    #[allow(missing_docs)] // documentation missing in model
    GroupsPerUserQuota,
    #[allow(missing_docs)] // documentation missing in model
    GroupsQuota,
    #[allow(missing_docs)] // documentation missing in model
    MfaDevices,
    #[allow(missing_docs)] // documentation missing in model
    MfaDevicesInUse,
    #[allow(missing_docs)] // documentation missing in model
    Policies,
    #[allow(missing_docs)] // documentation missing in model
    PoliciesQuota,
    #[allow(missing_docs)] // documentation missing in model
    PolicySizeQuota,
    #[allow(missing_docs)] // documentation missing in model
    PolicyVersionsInUse,
    #[allow(missing_docs)] // documentation missing in model
    PolicyVersionsInUseQuota,
    #[allow(missing_docs)] // documentation missing in model
    ServerCertificates,
    #[allow(missing_docs)] // documentation missing in model
    ServerCertificatesQuota,
    #[allow(missing_docs)] // documentation missing in model
    SigningCertificatesPerUserQuota,
    #[allow(missing_docs)] // documentation missing in model
    UserPolicySizeQuota,
    #[allow(missing_docs)] // documentation missing in model
    Users,
    #[allow(missing_docs)] // documentation missing in model
    UsersQuota,
    #[allow(missing_docs)] // documentation missing in model
    VersionsPerPolicyQuota,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for SummaryKeyType {
    fn from(s: &str) -> Self {
        match s {
            "AccessKeysPerUserQuota" => SummaryKeyType::AccessKeysPerUserQuota,
            "AccountAccessKeysPresent" => SummaryKeyType::AccountAccessKeysPresent,
            "AccountMFAEnabled" => SummaryKeyType::AccountMfaEnabled,
            "AccountSigningCertificatesPresent" => {
                SummaryKeyType::AccountSigningCertificatesPresent
            }
            "AttachedPoliciesPerGroupQuota" => SummaryKeyType::AttachedPoliciesPerGroupQuota,
            "AttachedPoliciesPerRoleQuota" => SummaryKeyType::AttachedPoliciesPerRoleQuota,
            "AttachedPoliciesPerUserQuota" => SummaryKeyType::AttachedPoliciesPerUserQuota,
            "GlobalEndpointTokenVersion" => SummaryKeyType::GlobalEndpointTokenVersion,
            "GroupPolicySizeQuota" => SummaryKeyType::GroupPolicySizeQuota,
            "Groups" => SummaryKeyType::Groups,
            "GroupsPerUserQuota" => SummaryKeyType::GroupsPerUserQuota,
            "GroupsQuota" => SummaryKeyType::GroupsQuota,
            "MFADevices" => SummaryKeyType::MfaDevices,
            "MFADevicesInUse" => SummaryKeyType::MfaDevicesInUse,
            "Policies" => SummaryKeyType::Policies,
            "PoliciesQuota" => SummaryKeyType::PoliciesQuota,
            "PolicySizeQuota" => SummaryKeyType::PolicySizeQuota,
            "PolicyVersionsInUse" => SummaryKeyType::PolicyVersionsInUse,
            "PolicyVersionsInUseQuota" => SummaryKeyType::PolicyVersionsInUseQuota,
            "ServerCertificates" => SummaryKeyType::ServerCertificates,
            "ServerCertificatesQuota" => SummaryKeyType::ServerCertificatesQuota,
            "SigningCertificatesPerUserQuota" => SummaryKeyType::SigningCertificatesPerUserQuota,
            "UserPolicySizeQuota" => SummaryKeyType::UserPolicySizeQuota,
            "Users" => SummaryKeyType::Users,
            "UsersQuota" => SummaryKeyType::UsersQuota,
            "VersionsPerPolicyQuota" => SummaryKeyType::VersionsPerPolicyQuota,
            other => {
                SummaryKeyType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for SummaryKeyType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(SummaryKeyType::from(s))
    }
}
impl SummaryKeyType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            SummaryKeyType::AccessKeysPerUserQuota => "AccessKeysPerUserQuota",
            SummaryKeyType::AccountAccessKeysPresent => "AccountAccessKeysPresent",
            SummaryKeyType::AccountMfaEnabled => "AccountMFAEnabled",
            SummaryKeyType::AccountSigningCertificatesPresent => {
                "AccountSigningCertificatesPresent"
            }
            SummaryKeyType::AttachedPoliciesPerGroupQuota => "AttachedPoliciesPerGroupQuota",
            SummaryKeyType::AttachedPoliciesPerRoleQuota => "AttachedPoliciesPerRoleQuota",
            SummaryKeyType::AttachedPoliciesPerUserQuota => "AttachedPoliciesPerUserQuota",
            SummaryKeyType::GlobalEndpointTokenVersion => "GlobalEndpointTokenVersion",
            SummaryKeyType::GroupPolicySizeQuota => "GroupPolicySizeQuota",
            SummaryKeyType::Groups => "Groups",
            SummaryKeyType::GroupsPerUserQuota => "GroupsPerUserQuota",
            SummaryKeyType::GroupsQuota => "GroupsQuota",
            SummaryKeyType::MfaDevices => "MFADevices",
            SummaryKeyType::MfaDevicesInUse => "MFADevicesInUse",
            SummaryKeyType::Policies => "Policies",
            SummaryKeyType::PoliciesQuota => "PoliciesQuota",
            SummaryKeyType::PolicySizeQuota => "PolicySizeQuota",
            SummaryKeyType::PolicyVersionsInUse => "PolicyVersionsInUse",
            SummaryKeyType::PolicyVersionsInUseQuota => "PolicyVersionsInUseQuota",
            SummaryKeyType::ServerCertificates => "ServerCertificates",
            SummaryKeyType::ServerCertificatesQuota => "ServerCertificatesQuota",
            SummaryKeyType::SigningCertificatesPerUserQuota => "SigningCertificatesPerUserQuota",
            SummaryKeyType::UserPolicySizeQuota => "UserPolicySizeQuota",
            SummaryKeyType::Users => "Users",
            SummaryKeyType::UsersQuota => "UsersQuota",
            SummaryKeyType::VersionsPerPolicyQuota => "VersionsPerPolicyQuota",
            SummaryKeyType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AccessKeysPerUserQuota",
            "AccountAccessKeysPresent",
            "AccountMFAEnabled",
            "AccountSigningCertificatesPresent",
            "AttachedPoliciesPerGroupQuota",
            "AttachedPoliciesPerRoleQuota",
            "AttachedPoliciesPerUserQuota",
            "GlobalEndpointTokenVersion",
            "GroupPolicySizeQuota",
            "Groups",
            "GroupsPerUserQuota",
            "GroupsQuota",
            "MFADevices",
            "MFADevicesInUse",
            "Policies",
            "PoliciesQuota",
            "PolicySizeQuota",
            "PolicyVersionsInUse",
            "PolicyVersionsInUseQuota",
            "ServerCertificates",
            "ServerCertificatesQuota",
            "SigningCertificatesPerUserQuota",
            "UserPolicySizeQuota",
            "Users",
            "UsersQuota",
            "VersionsPerPolicyQuota",
        ]
    }
}
impl AsRef<str> for SummaryKeyType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
