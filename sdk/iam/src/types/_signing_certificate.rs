// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an X.509 signing certificate.</p>
/// <p>This data type is used as a response element in the <code>UploadSigningCertificate</code> and <code>ListSigningCertificates</code> operations. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SigningCertificate {
    /// <p>The name of the user the signing certificate is associated with.</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    /// <p>The ID for the signing certificate.</p>
    #[doc(hidden)]
    pub certificate_id: std::option::Option<std::string::String>,
    /// <p>The contents of the signing certificate.</p>
    #[doc(hidden)]
    pub certificate_body: std::option::Option<std::string::String>,
    /// <p>The status of the signing certificate. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::StatusType>,
    /// <p>The date when the signing certificate was uploaded.</p>
    #[doc(hidden)]
    pub upload_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl SigningCertificate {
    /// <p>The name of the user the signing certificate is associated with.</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The ID for the signing certificate.</p>
    pub fn certificate_id(&self) -> std::option::Option<&str> {
        self.certificate_id.as_deref()
    }
    /// <p>The contents of the signing certificate.</p>
    pub fn certificate_body(&self) -> std::option::Option<&str> {
        self.certificate_body.as_deref()
    }
    /// <p>The status of the signing certificate. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::StatusType> {
        self.status.as_ref()
    }
    /// <p>The date when the signing certificate was uploaded.</p>
    pub fn upload_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.upload_date.as_ref()
    }
}
impl SigningCertificate {
    /// Creates a new builder-style object to manufacture [`SigningCertificate`](crate::types::SigningCertificate).
    pub fn builder() -> crate::types::builders::SigningCertificateBuilder {
        crate::types::builders::SigningCertificateBuilder::default()
    }
}

/// A builder for [`SigningCertificate`](crate::types::SigningCertificate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SigningCertificateBuilder {
    pub(crate) user_name: std::option::Option<std::string::String>,
    pub(crate) certificate_id: std::option::Option<std::string::String>,
    pub(crate) certificate_body: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::StatusType>,
    pub(crate) upload_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl SigningCertificateBuilder {
    /// <p>The name of the user the signing certificate is associated with.</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>The name of the user the signing certificate is associated with.</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The ID for the signing certificate.</p>
    pub fn certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_id = Some(input.into());
        self
    }
    /// <p>The ID for the signing certificate.</p>
    pub fn set_certificate_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_id = input;
        self
    }
    /// <p>The contents of the signing certificate.</p>
    pub fn certificate_body(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_body = Some(input.into());
        self
    }
    /// <p>The contents of the signing certificate.</p>
    pub fn set_certificate_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_body = input;
        self
    }
    /// <p>The status of the signing certificate. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    pub fn status(mut self, input: crate::types::StatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the signing certificate. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::StatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The date when the signing certificate was uploaded.</p>
    pub fn upload_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.upload_date = Some(input);
        self
    }
    /// <p>The date when the signing certificate was uploaded.</p>
    pub fn set_upload_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.upload_date = input;
        self
    }
    /// Consumes the builder and constructs a [`SigningCertificate`](crate::types::SigningCertificate).
    pub fn build(self) -> crate::types::SigningCertificate {
        crate::types::SigningCertificate {
            user_name: self.user_name,
            certificate_id: self.certificate_id,
            certificate_body: self.certificate_body,
            status: self.status,
            upload_date: self.upload_date,
        }
    }
}
