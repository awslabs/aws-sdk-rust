// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an X.509 signing certificate.</p>
/// <p>This data type is used as a response element in the <code>UploadSigningCertificate</code> and <code>ListSigningCertificates</code> operations. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SigningCertificate {
    /// <p>The name of the user the signing certificate is associated with.</p>
    pub user_name: ::std::string::String,
    /// <p>The ID for the signing certificate.</p>
    pub certificate_id: ::std::string::String,
    /// <p>The contents of the signing certificate.</p>
    pub certificate_body: ::std::string::String,
    /// <p>The status of the signing certificate. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    pub status: crate::types::StatusType,
    /// <p>The date when the signing certificate was uploaded.</p>
    pub upload_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SigningCertificate {
    /// <p>The name of the user the signing certificate is associated with.</p>
    pub fn user_name(&self) -> &str {
        use std::ops::Deref;
        self.user_name.deref()
    }
    /// <p>The ID for the signing certificate.</p>
    pub fn certificate_id(&self) -> &str {
        use std::ops::Deref;
        self.certificate_id.deref()
    }
    /// <p>The contents of the signing certificate.</p>
    pub fn certificate_body(&self) -> &str {
        use std::ops::Deref;
        self.certificate_body.deref()
    }
    /// <p>The status of the signing certificate. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    pub fn status(&self) -> &crate::types::StatusType {
        &self.status
    }
    /// <p>The date when the signing certificate was uploaded.</p>
    pub fn upload_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.upload_date.as_ref()
    }
}
impl SigningCertificate {
    /// Creates a new builder-style object to manufacture [`SigningCertificate`](crate::types::SigningCertificate).
    pub fn builder() -> crate::types::builders::SigningCertificateBuilder {
        crate::types::builders::SigningCertificateBuilder::default()
    }
}

/// A builder for [`SigningCertificate`](crate::types::SigningCertificate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SigningCertificateBuilder {
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_id: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_body: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::StatusType>,
    pub(crate) upload_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SigningCertificateBuilder {
    /// <p>The name of the user the signing certificate is associated with.</p>
    /// This field is required.
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user the signing certificate is associated with.</p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The name of the user the signing certificate is associated with.</p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>The ID for the signing certificate.</p>
    /// This field is required.
    pub fn certificate_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the signing certificate.</p>
    pub fn set_certificate_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_id = input;
        self
    }
    /// <p>The ID for the signing certificate.</p>
    pub fn get_certificate_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_id
    }
    /// <p>The contents of the signing certificate.</p>
    /// This field is required.
    pub fn certificate_body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contents of the signing certificate.</p>
    pub fn set_certificate_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_body = input;
        self
    }
    /// <p>The contents of the signing certificate.</p>
    pub fn get_certificate_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_body
    }
    /// <p>The status of the signing certificate. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::StatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the signing certificate. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the signing certificate. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StatusType> {
        &self.status
    }
    /// <p>The date when the signing certificate was uploaded.</p>
    pub fn upload_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.upload_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the signing certificate was uploaded.</p>
    pub fn set_upload_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.upload_date = input;
        self
    }
    /// <p>The date when the signing certificate was uploaded.</p>
    pub fn get_upload_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.upload_date
    }
    /// Consumes the builder and constructs a [`SigningCertificate`](crate::types::SigningCertificate).
    /// This method will fail if any of the following fields are not set:
    /// - [`user_name`](crate::types::builders::SigningCertificateBuilder::user_name)
    /// - [`certificate_id`](crate::types::builders::SigningCertificateBuilder::certificate_id)
    /// - [`certificate_body`](crate::types::builders::SigningCertificateBuilder::certificate_body)
    /// - [`status`](crate::types::builders::SigningCertificateBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::SigningCertificate, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SigningCertificate {
            user_name: self.user_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_name",
                    "user_name was not specified but it is required when building SigningCertificate",
                )
            })?,
            certificate_id: self.certificate_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "certificate_id",
                    "certificate_id was not specified but it is required when building SigningCertificate",
                )
            })?,
            certificate_body: self.certificate_body.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "certificate_body",
                    "certificate_body was not specified but it is required when building SigningCertificate",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building SigningCertificate",
                )
            })?,
            upload_date: self.upload_date,
        })
    }
}
