// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the results of a simulation.</p>
/// <p>This data type is used by the return parameter of <code> <code>SimulateCustomPolicy</code> </code> and <code> <code>SimulatePrincipalPolicy</code> </code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EvaluationResult {
    /// <p>The name of the API operation tested on the indicated resource.</p>
    pub eval_action_name: ::std::string::String,
    /// <p>The ARN of the resource that the indicated API operation was tested on.</p>
    pub eval_resource_name: ::std::option::Option<::std::string::String>,
    /// <p>The result of the simulation.</p>
    pub eval_decision: crate::types::PolicyEvaluationDecisionType,
    /// <p>A list of the statements in the input policies that determine the result for this scenario. Remember that even if multiple statements allow the operation on the resource, if only one statement denies that operation, then the explicit deny overrides any allow. In addition, the deny statement is the only entry included in the result.</p>
    pub matched_statements: ::std::option::Option<::std::vec::Vec<crate::types::Statement>>,
    /// <p>A list of context keys that are required by the included input policies but that were not provided by one of the input parameters. This list is used when the resource in a simulation is "*", either explicitly, or when the <code>ResourceArns</code> parameter blank. If you include a list of resources, then any missing context values are instead included under the <code>ResourceSpecificResults</code> section. To discover the context keys used by a set of policies, you can call <code>GetContextKeysForCustomPolicy</code> or <code>GetContextKeysForPrincipalPolicy</code>.</p>
    pub missing_context_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A structure that details how Organizations and its service control policies affect the results of the simulation. Only applies if the simulated user's account is part of an organization.</p>
    pub organizations_decision_detail: ::std::option::Option<crate::types::OrganizationsDecisionDetail>,
    /// <p>Contains information about the effect that a permissions boundary has on a policy simulation when the boundary is applied to an IAM entity.</p>
    pub permissions_boundary_decision_detail: ::std::option::Option<crate::types::PermissionsBoundaryDecisionDetail>,
    /// <p>Additional details about the results of the cross-account evaluation decision. This parameter is populated for only cross-account simulations. It contains a brief summary of how each policy type contributes to the final evaluation decision.</p>
    /// <p>If the simulation evaluates policies within the same account and includes a resource ARN, then the parameter is present but the response is empty. If the simulation evaluates policies within the same account and specifies all resources (<code>*</code>), then the parameter is not returned.</p>
    /// <p>When you make a cross-account request, Amazon Web Services evaluates the request in the trusting account and the trusted account. The request is allowed only if both evaluations return <code>true</code>. For more information about how policies are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies within a single account</a>.</p>
    /// <p>If an Organizations SCP included in the evaluation denies access, the simulation ends. In this case, policy evaluation does not proceed any further and this parameter is not returned.</p>
    pub eval_decision_details: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PolicyEvaluationDecisionType>>,
    /// <p>The individual results of the simulation of the API operation specified in EvalActionName on each resource.</p>
    pub resource_specific_results: ::std::option::Option<::std::vec::Vec<crate::types::ResourceSpecificResult>>,
}
impl EvaluationResult {
    /// <p>The name of the API operation tested on the indicated resource.</p>
    pub fn eval_action_name(&self) -> &str {
        use std::ops::Deref;
        self.eval_action_name.deref()
    }
    /// <p>The ARN of the resource that the indicated API operation was tested on.</p>
    pub fn eval_resource_name(&self) -> ::std::option::Option<&str> {
        self.eval_resource_name.as_deref()
    }
    /// <p>The result of the simulation.</p>
    pub fn eval_decision(&self) -> &crate::types::PolicyEvaluationDecisionType {
        &self.eval_decision
    }
    /// <p>A list of the statements in the input policies that determine the result for this scenario. Remember that even if multiple statements allow the operation on the resource, if only one statement denies that operation, then the explicit deny overrides any allow. In addition, the deny statement is the only entry included in the result.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.matched_statements.is_none()`.
    pub fn matched_statements(&self) -> &[crate::types::Statement] {
        self.matched_statements.as_deref().unwrap_or_default()
    }
    /// <p>A list of context keys that are required by the included input policies but that were not provided by one of the input parameters. This list is used when the resource in a simulation is "*", either explicitly, or when the <code>ResourceArns</code> parameter blank. If you include a list of resources, then any missing context values are instead included under the <code>ResourceSpecificResults</code> section. To discover the context keys used by a set of policies, you can call <code>GetContextKeysForCustomPolicy</code> or <code>GetContextKeysForPrincipalPolicy</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.missing_context_values.is_none()`.
    pub fn missing_context_values(&self) -> &[::std::string::String] {
        self.missing_context_values.as_deref().unwrap_or_default()
    }
    /// <p>A structure that details how Organizations and its service control policies affect the results of the simulation. Only applies if the simulated user's account is part of an organization.</p>
    pub fn organizations_decision_detail(&self) -> ::std::option::Option<&crate::types::OrganizationsDecisionDetail> {
        self.organizations_decision_detail.as_ref()
    }
    /// <p>Contains information about the effect that a permissions boundary has on a policy simulation when the boundary is applied to an IAM entity.</p>
    pub fn permissions_boundary_decision_detail(&self) -> ::std::option::Option<&crate::types::PermissionsBoundaryDecisionDetail> {
        self.permissions_boundary_decision_detail.as_ref()
    }
    /// <p>Additional details about the results of the cross-account evaluation decision. This parameter is populated for only cross-account simulations. It contains a brief summary of how each policy type contributes to the final evaluation decision.</p>
    /// <p>If the simulation evaluates policies within the same account and includes a resource ARN, then the parameter is present but the response is empty. If the simulation evaluates policies within the same account and specifies all resources (<code>*</code>), then the parameter is not returned.</p>
    /// <p>When you make a cross-account request, Amazon Web Services evaluates the request in the trusting account and the trusted account. The request is allowed only if both evaluations return <code>true</code>. For more information about how policies are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies within a single account</a>.</p>
    /// <p>If an Organizations SCP included in the evaluation denies access, the simulation ends. In this case, policy evaluation does not proceed any further and this parameter is not returned.</p>
    pub fn eval_decision_details(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::PolicyEvaluationDecisionType>> {
        self.eval_decision_details.as_ref()
    }
    /// <p>The individual results of the simulation of the API operation specified in EvalActionName on each resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_specific_results.is_none()`.
    pub fn resource_specific_results(&self) -> &[crate::types::ResourceSpecificResult] {
        self.resource_specific_results.as_deref().unwrap_or_default()
    }
}
impl EvaluationResult {
    /// Creates a new builder-style object to manufacture [`EvaluationResult`](crate::types::EvaluationResult).
    pub fn builder() -> crate::types::builders::EvaluationResultBuilder {
        crate::types::builders::EvaluationResultBuilder::default()
    }
}

/// A builder for [`EvaluationResult`](crate::types::EvaluationResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EvaluationResultBuilder {
    pub(crate) eval_action_name: ::std::option::Option<::std::string::String>,
    pub(crate) eval_resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) eval_decision: ::std::option::Option<crate::types::PolicyEvaluationDecisionType>,
    pub(crate) matched_statements: ::std::option::Option<::std::vec::Vec<crate::types::Statement>>,
    pub(crate) missing_context_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) organizations_decision_detail: ::std::option::Option<crate::types::OrganizationsDecisionDetail>,
    pub(crate) permissions_boundary_decision_detail: ::std::option::Option<crate::types::PermissionsBoundaryDecisionDetail>,
    pub(crate) eval_decision_details:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PolicyEvaluationDecisionType>>,
    pub(crate) resource_specific_results: ::std::option::Option<::std::vec::Vec<crate::types::ResourceSpecificResult>>,
}
impl EvaluationResultBuilder {
    /// <p>The name of the API operation tested on the indicated resource.</p>
    /// This field is required.
    pub fn eval_action_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.eval_action_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the API operation tested on the indicated resource.</p>
    pub fn set_eval_action_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.eval_action_name = input;
        self
    }
    /// <p>The name of the API operation tested on the indicated resource.</p>
    pub fn get_eval_action_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.eval_action_name
    }
    /// <p>The ARN of the resource that the indicated API operation was tested on.</p>
    pub fn eval_resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.eval_resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the resource that the indicated API operation was tested on.</p>
    pub fn set_eval_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.eval_resource_name = input;
        self
    }
    /// <p>The ARN of the resource that the indicated API operation was tested on.</p>
    pub fn get_eval_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.eval_resource_name
    }
    /// <p>The result of the simulation.</p>
    /// This field is required.
    pub fn eval_decision(mut self, input: crate::types::PolicyEvaluationDecisionType) -> Self {
        self.eval_decision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The result of the simulation.</p>
    pub fn set_eval_decision(mut self, input: ::std::option::Option<crate::types::PolicyEvaluationDecisionType>) -> Self {
        self.eval_decision = input;
        self
    }
    /// <p>The result of the simulation.</p>
    pub fn get_eval_decision(&self) -> &::std::option::Option<crate::types::PolicyEvaluationDecisionType> {
        &self.eval_decision
    }
    /// Appends an item to `matched_statements`.
    ///
    /// To override the contents of this collection use [`set_matched_statements`](Self::set_matched_statements).
    ///
    /// <p>A list of the statements in the input policies that determine the result for this scenario. Remember that even if multiple statements allow the operation on the resource, if only one statement denies that operation, then the explicit deny overrides any allow. In addition, the deny statement is the only entry included in the result.</p>
    pub fn matched_statements(mut self, input: crate::types::Statement) -> Self {
        let mut v = self.matched_statements.unwrap_or_default();
        v.push(input);
        self.matched_statements = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the statements in the input policies that determine the result for this scenario. Remember that even if multiple statements allow the operation on the resource, if only one statement denies that operation, then the explicit deny overrides any allow. In addition, the deny statement is the only entry included in the result.</p>
    pub fn set_matched_statements(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Statement>>) -> Self {
        self.matched_statements = input;
        self
    }
    /// <p>A list of the statements in the input policies that determine the result for this scenario. Remember that even if multiple statements allow the operation on the resource, if only one statement denies that operation, then the explicit deny overrides any allow. In addition, the deny statement is the only entry included in the result.</p>
    pub fn get_matched_statements(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Statement>> {
        &self.matched_statements
    }
    /// Appends an item to `missing_context_values`.
    ///
    /// To override the contents of this collection use [`set_missing_context_values`](Self::set_missing_context_values).
    ///
    /// <p>A list of context keys that are required by the included input policies but that were not provided by one of the input parameters. This list is used when the resource in a simulation is "*", either explicitly, or when the <code>ResourceArns</code> parameter blank. If you include a list of resources, then any missing context values are instead included under the <code>ResourceSpecificResults</code> section. To discover the context keys used by a set of policies, you can call <code>GetContextKeysForCustomPolicy</code> or <code>GetContextKeysForPrincipalPolicy</code>.</p>
    pub fn missing_context_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.missing_context_values.unwrap_or_default();
        v.push(input.into());
        self.missing_context_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of context keys that are required by the included input policies but that were not provided by one of the input parameters. This list is used when the resource in a simulation is "*", either explicitly, or when the <code>ResourceArns</code> parameter blank. If you include a list of resources, then any missing context values are instead included under the <code>ResourceSpecificResults</code> section. To discover the context keys used by a set of policies, you can call <code>GetContextKeysForCustomPolicy</code> or <code>GetContextKeysForPrincipalPolicy</code>.</p>
    pub fn set_missing_context_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.missing_context_values = input;
        self
    }
    /// <p>A list of context keys that are required by the included input policies but that were not provided by one of the input parameters. This list is used when the resource in a simulation is "*", either explicitly, or when the <code>ResourceArns</code> parameter blank. If you include a list of resources, then any missing context values are instead included under the <code>ResourceSpecificResults</code> section. To discover the context keys used by a set of policies, you can call <code>GetContextKeysForCustomPolicy</code> or <code>GetContextKeysForPrincipalPolicy</code>.</p>
    pub fn get_missing_context_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.missing_context_values
    }
    /// <p>A structure that details how Organizations and its service control policies affect the results of the simulation. Only applies if the simulated user's account is part of an organization.</p>
    pub fn organizations_decision_detail(mut self, input: crate::types::OrganizationsDecisionDetail) -> Self {
        self.organizations_decision_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that details how Organizations and its service control policies affect the results of the simulation. Only applies if the simulated user's account is part of an organization.</p>
    pub fn set_organizations_decision_detail(mut self, input: ::std::option::Option<crate::types::OrganizationsDecisionDetail>) -> Self {
        self.organizations_decision_detail = input;
        self
    }
    /// <p>A structure that details how Organizations and its service control policies affect the results of the simulation. Only applies if the simulated user's account is part of an organization.</p>
    pub fn get_organizations_decision_detail(&self) -> &::std::option::Option<crate::types::OrganizationsDecisionDetail> {
        &self.organizations_decision_detail
    }
    /// <p>Contains information about the effect that a permissions boundary has on a policy simulation when the boundary is applied to an IAM entity.</p>
    pub fn permissions_boundary_decision_detail(mut self, input: crate::types::PermissionsBoundaryDecisionDetail) -> Self {
        self.permissions_boundary_decision_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the effect that a permissions boundary has on a policy simulation when the boundary is applied to an IAM entity.</p>
    pub fn set_permissions_boundary_decision_detail(mut self, input: ::std::option::Option<crate::types::PermissionsBoundaryDecisionDetail>) -> Self {
        self.permissions_boundary_decision_detail = input;
        self
    }
    /// <p>Contains information about the effect that a permissions boundary has on a policy simulation when the boundary is applied to an IAM entity.</p>
    pub fn get_permissions_boundary_decision_detail(&self) -> &::std::option::Option<crate::types::PermissionsBoundaryDecisionDetail> {
        &self.permissions_boundary_decision_detail
    }
    /// Adds a key-value pair to `eval_decision_details`.
    ///
    /// To override the contents of this collection use [`set_eval_decision_details`](Self::set_eval_decision_details).
    ///
    /// <p>Additional details about the results of the cross-account evaluation decision. This parameter is populated for only cross-account simulations. It contains a brief summary of how each policy type contributes to the final evaluation decision.</p>
    /// <p>If the simulation evaluates policies within the same account and includes a resource ARN, then the parameter is present but the response is empty. If the simulation evaluates policies within the same account and specifies all resources (<code>*</code>), then the parameter is not returned.</p>
    /// <p>When you make a cross-account request, Amazon Web Services evaluates the request in the trusting account and the trusted account. The request is allowed only if both evaluations return <code>true</code>. For more information about how policies are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies within a single account</a>.</p>
    /// <p>If an Organizations SCP included in the evaluation denies access, the simulation ends. In this case, policy evaluation does not proceed any further and this parameter is not returned.</p>
    pub fn eval_decision_details(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::PolicyEvaluationDecisionType,
    ) -> Self {
        let mut hash_map = self.eval_decision_details.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.eval_decision_details = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Additional details about the results of the cross-account evaluation decision. This parameter is populated for only cross-account simulations. It contains a brief summary of how each policy type contributes to the final evaluation decision.</p>
    /// <p>If the simulation evaluates policies within the same account and includes a resource ARN, then the parameter is present but the response is empty. If the simulation evaluates policies within the same account and specifies all resources (<code>*</code>), then the parameter is not returned.</p>
    /// <p>When you make a cross-account request, Amazon Web Services evaluates the request in the trusting account and the trusted account. The request is allowed only if both evaluations return <code>true</code>. For more information about how policies are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies within a single account</a>.</p>
    /// <p>If an Organizations SCP included in the evaluation denies access, the simulation ends. In this case, policy evaluation does not proceed any further and this parameter is not returned.</p>
    pub fn set_eval_decision_details(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PolicyEvaluationDecisionType>>,
    ) -> Self {
        self.eval_decision_details = input;
        self
    }
    /// <p>Additional details about the results of the cross-account evaluation decision. This parameter is populated for only cross-account simulations. It contains a brief summary of how each policy type contributes to the final evaluation decision.</p>
    /// <p>If the simulation evaluates policies within the same account and includes a resource ARN, then the parameter is present but the response is empty. If the simulation evaluates policies within the same account and specifies all resources (<code>*</code>), then the parameter is not returned.</p>
    /// <p>When you make a cross-account request, Amazon Web Services evaluates the request in the trusting account and the trusted account. The request is allowed only if both evaluations return <code>true</code>. For more information about how policies are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies within a single account</a>.</p>
    /// <p>If an Organizations SCP included in the evaluation denies access, the simulation ends. In this case, policy evaluation does not proceed any further and this parameter is not returned.</p>
    pub fn get_eval_decision_details(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PolicyEvaluationDecisionType>> {
        &self.eval_decision_details
    }
    /// Appends an item to `resource_specific_results`.
    ///
    /// To override the contents of this collection use [`set_resource_specific_results`](Self::set_resource_specific_results).
    ///
    /// <p>The individual results of the simulation of the API operation specified in EvalActionName on each resource.</p>
    pub fn resource_specific_results(mut self, input: crate::types::ResourceSpecificResult) -> Self {
        let mut v = self.resource_specific_results.unwrap_or_default();
        v.push(input);
        self.resource_specific_results = ::std::option::Option::Some(v);
        self
    }
    /// <p>The individual results of the simulation of the API operation specified in EvalActionName on each resource.</p>
    pub fn set_resource_specific_results(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceSpecificResult>>) -> Self {
        self.resource_specific_results = input;
        self
    }
    /// <p>The individual results of the simulation of the API operation specified in EvalActionName on each resource.</p>
    pub fn get_resource_specific_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceSpecificResult>> {
        &self.resource_specific_results
    }
    /// Consumes the builder and constructs a [`EvaluationResult`](crate::types::EvaluationResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`eval_action_name`](crate::types::builders::EvaluationResultBuilder::eval_action_name)
    /// - [`eval_decision`](crate::types::builders::EvaluationResultBuilder::eval_decision)
    pub fn build(self) -> ::std::result::Result<crate::types::EvaluationResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EvaluationResult {
            eval_action_name: self.eval_action_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "eval_action_name",
                    "eval_action_name was not specified but it is required when building EvaluationResult",
                )
            })?,
            eval_resource_name: self.eval_resource_name,
            eval_decision: self.eval_decision.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "eval_decision",
                    "eval_decision was not specified but it is required when building EvaluationResult",
                )
            })?,
            matched_statements: self.matched_statements,
            missing_context_values: self.missing_context_values,
            organizations_decision_detail: self.organizations_decision_detail,
            permissions_boundary_decision_detail: self.permissions_boundary_decision_detail,
            eval_decision_details: self.eval_decision_details,
            resource_specific_results: self.resource_specific_results,
        })
    }
}
