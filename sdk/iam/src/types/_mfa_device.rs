// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an MFA device.</p>
/// <p>This data type is used as a response element in the <code>ListMFADevices</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MfaDevice {
    /// <p>The user with whom the MFA device is associated.</p>
    pub user_name: ::std::string::String,
    /// <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>
    pub serial_number: ::std::string::String,
    /// <p>The date when the MFA device was enabled for the user.</p>
    pub enable_date: ::aws_smithy_types::DateTime,
}
impl MfaDevice {
    /// <p>The user with whom the MFA device is associated.</p>
    pub fn user_name(&self) -> &str {
        use std::ops::Deref;
        self.user_name.deref()
    }
    /// <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>
    pub fn serial_number(&self) -> &str {
        use std::ops::Deref;
        self.serial_number.deref()
    }
    /// <p>The date when the MFA device was enabled for the user.</p>
    pub fn enable_date(&self) -> &::aws_smithy_types::DateTime {
        &self.enable_date
    }
}
impl MfaDevice {
    /// Creates a new builder-style object to manufacture [`MfaDevice`](crate::types::MfaDevice).
    pub fn builder() -> crate::types::builders::MfaDeviceBuilder {
        crate::types::builders::MfaDeviceBuilder::default()
    }
}

/// A builder for [`MfaDevice`](crate::types::MfaDevice).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MfaDeviceBuilder {
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) serial_number: ::std::option::Option<::std::string::String>,
    pub(crate) enable_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl MfaDeviceBuilder {
    /// <p>The user with whom the MFA device is associated.</p>
    /// This field is required.
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user with whom the MFA device is associated.</p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The user with whom the MFA device is associated.</p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>
    /// This field is required.
    pub fn serial_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.serial_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>
    pub fn set_serial_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.serial_number = input;
        self
    }
    /// <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>
    pub fn get_serial_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.serial_number
    }
    /// <p>The date when the MFA device was enabled for the user.</p>
    /// This field is required.
    pub fn enable_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.enable_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the MFA device was enabled for the user.</p>
    pub fn set_enable_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.enable_date = input;
        self
    }
    /// <p>The date when the MFA device was enabled for the user.</p>
    pub fn get_enable_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.enable_date
    }
    /// Consumes the builder and constructs a [`MfaDevice`](crate::types::MfaDevice).
    /// This method will fail if any of the following fields are not set:
    /// - [`user_name`](crate::types::builders::MfaDeviceBuilder::user_name)
    /// - [`serial_number`](crate::types::builders::MfaDeviceBuilder::serial_number)
    /// - [`enable_date`](crate::types::builders::MfaDeviceBuilder::enable_date)
    pub fn build(self) -> ::std::result::Result<crate::types::MfaDevice, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MfaDevice {
            user_name: self.user_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_name",
                    "user_name was not specified but it is required when building MfaDevice",
                )
            })?,
            serial_number: self.serial_number.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "serial_number",
                    "serial_number was not specified but it is required when building MfaDevice",
                )
            })?,
            enable_date: self.enable_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enable_date",
                    "enable_date was not specified but it is required when building MfaDevice",
                )
            })?,
        })
    }
}
