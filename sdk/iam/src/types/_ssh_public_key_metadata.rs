// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an SSH public key, without the key's body or fingerprint.</p>
/// <p>This data type is used as a response element in the <code>ListSSHPublicKeys</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SshPublicKeyMetadata {
    /// <p>The name of the IAM user associated with the SSH public key.</p>
    pub user_name: ::std::string::String,
    /// <p>The unique identifier for the SSH public key.</p>
    pub ssh_public_key_id: ::std::string::String,
    /// <p>The status of the SSH public key. <code>Active</code> means that the key can be used for authentication with an CodeCommit repository. <code>Inactive</code> means that the key cannot be used.</p>
    pub status: crate::types::StatusType,
    /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the SSH public key was uploaded.</p>
    pub upload_date: ::aws_smithy_types::DateTime,
}
impl SshPublicKeyMetadata {
    /// <p>The name of the IAM user associated with the SSH public key.</p>
    pub fn user_name(&self) -> &str {
        use std::ops::Deref;
        self.user_name.deref()
    }
    /// <p>The unique identifier for the SSH public key.</p>
    pub fn ssh_public_key_id(&self) -> &str {
        use std::ops::Deref;
        self.ssh_public_key_id.deref()
    }
    /// <p>The status of the SSH public key. <code>Active</code> means that the key can be used for authentication with an CodeCommit repository. <code>Inactive</code> means that the key cannot be used.</p>
    pub fn status(&self) -> &crate::types::StatusType {
        &self.status
    }
    /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the SSH public key was uploaded.</p>
    pub fn upload_date(&self) -> &::aws_smithy_types::DateTime {
        &self.upload_date
    }
}
impl SshPublicKeyMetadata {
    /// Creates a new builder-style object to manufacture [`SshPublicKeyMetadata`](crate::types::SshPublicKeyMetadata).
    pub fn builder() -> crate::types::builders::SshPublicKeyMetadataBuilder {
        crate::types::builders::SshPublicKeyMetadataBuilder::default()
    }
}

/// A builder for [`SshPublicKeyMetadata`](crate::types::SshPublicKeyMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SshPublicKeyMetadataBuilder {
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) ssh_public_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::StatusType>,
    pub(crate) upload_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SshPublicKeyMetadataBuilder {
    /// <p>The name of the IAM user associated with the SSH public key.</p>
    /// This field is required.
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the IAM user associated with the SSH public key.</p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The name of the IAM user associated with the SSH public key.</p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>The unique identifier for the SSH public key.</p>
    /// This field is required.
    pub fn ssh_public_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ssh_public_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the SSH public key.</p>
    pub fn set_ssh_public_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ssh_public_key_id = input;
        self
    }
    /// <p>The unique identifier for the SSH public key.</p>
    pub fn get_ssh_public_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ssh_public_key_id
    }
    /// <p>The status of the SSH public key. <code>Active</code> means that the key can be used for authentication with an CodeCommit repository. <code>Inactive</code> means that the key cannot be used.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::StatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the SSH public key. <code>Active</code> means that the key can be used for authentication with an CodeCommit repository. <code>Inactive</code> means that the key cannot be used.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the SSH public key. <code>Active</code> means that the key can be used for authentication with an CodeCommit repository. <code>Inactive</code> means that the key cannot be used.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StatusType> {
        &self.status
    }
    /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the SSH public key was uploaded.</p>
    /// This field is required.
    pub fn upload_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.upload_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the SSH public key was uploaded.</p>
    pub fn set_upload_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.upload_date = input;
        self
    }
    /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the SSH public key was uploaded.</p>
    pub fn get_upload_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.upload_date
    }
    /// Consumes the builder and constructs a [`SshPublicKeyMetadata`](crate::types::SshPublicKeyMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`user_name`](crate::types::builders::SshPublicKeyMetadataBuilder::user_name)
    /// - [`ssh_public_key_id`](crate::types::builders::SshPublicKeyMetadataBuilder::ssh_public_key_id)
    /// - [`status`](crate::types::builders::SshPublicKeyMetadataBuilder::status)
    /// - [`upload_date`](crate::types::builders::SshPublicKeyMetadataBuilder::upload_date)
    pub fn build(self) -> ::std::result::Result<crate::types::SshPublicKeyMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SshPublicKeyMetadata {
            user_name: self.user_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_name",
                    "user_name was not specified but it is required when building SshPublicKeyMetadata",
                )
            })?,
            ssh_public_key_id: self.ssh_public_key_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ssh_public_key_id",
                    "ssh_public_key_id was not specified but it is required when building SshPublicKeyMetadata",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building SshPublicKeyMetadata",
                )
            })?,
            upload_date: self.upload_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "upload_date",
                    "upload_date was not specified but it is required when building SshPublicKeyMetadata",
                )
            })?,
        })
    }
}
