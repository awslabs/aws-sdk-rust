// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details of a service-specific credential.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ServiceSpecificCredential {
    /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the service-specific credential were created.</p>
    pub create_date: ::aws_smithy_types::DateTime,
    /// <p>The name of the service associated with the service-specific credential.</p>
    pub service_name: ::std::string::String,
    /// <p>The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the Amazon Web Services account, as in <code>jane-at-123456789012</code>, for example. This value cannot be configured by the user.</p>
    pub service_user_name: ::std::string::String,
    /// <p>The generated password for the service-specific credential.</p>
    pub service_password: ::std::string::String,
    /// <p>The unique identifier for the service-specific credential.</p>
    pub service_specific_credential_id: ::std::string::String,
    /// <p>The name of the IAM user associated with the service-specific credential.</p>
    pub user_name: ::std::string::String,
    /// <p>The status of the service-specific credential. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    pub status: crate::types::StatusType,
}
impl ServiceSpecificCredential {
    /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the service-specific credential were created.</p>
    pub fn create_date(&self) -> &::aws_smithy_types::DateTime {
        &self.create_date
    }
    /// <p>The name of the service associated with the service-specific credential.</p>
    pub fn service_name(&self) -> &str {
        use std::ops::Deref;
        self.service_name.deref()
    }
    /// <p>The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the Amazon Web Services account, as in <code>jane-at-123456789012</code>, for example. This value cannot be configured by the user.</p>
    pub fn service_user_name(&self) -> &str {
        use std::ops::Deref;
        self.service_user_name.deref()
    }
    /// <p>The generated password for the service-specific credential.</p>
    pub fn service_password(&self) -> &str {
        use std::ops::Deref;
        self.service_password.deref()
    }
    /// <p>The unique identifier for the service-specific credential.</p>
    pub fn service_specific_credential_id(&self) -> &str {
        use std::ops::Deref;
        self.service_specific_credential_id.deref()
    }
    /// <p>The name of the IAM user associated with the service-specific credential.</p>
    pub fn user_name(&self) -> &str {
        use std::ops::Deref;
        self.user_name.deref()
    }
    /// <p>The status of the service-specific credential. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    pub fn status(&self) -> &crate::types::StatusType {
        &self.status
    }
}
impl ::std::fmt::Debug for ServiceSpecificCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceSpecificCredential");
        formatter.field("create_date", &self.create_date);
        formatter.field("service_name", &self.service_name);
        formatter.field("service_user_name", &self.service_user_name);
        formatter.field("service_password", &"*** Sensitive Data Redacted ***");
        formatter.field("service_specific_credential_id", &self.service_specific_credential_id);
        formatter.field("user_name", &self.user_name);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
impl ServiceSpecificCredential {
    /// Creates a new builder-style object to manufacture [`ServiceSpecificCredential`](crate::types::ServiceSpecificCredential).
    pub fn builder() -> crate::types::builders::ServiceSpecificCredentialBuilder {
        crate::types::builders::ServiceSpecificCredentialBuilder::default()
    }
}

/// A builder for [`ServiceSpecificCredential`](crate::types::ServiceSpecificCredential).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ServiceSpecificCredentialBuilder {
    pub(crate) create_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
    pub(crate) service_user_name: ::std::option::Option<::std::string::String>,
    pub(crate) service_password: ::std::option::Option<::std::string::String>,
    pub(crate) service_specific_credential_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::StatusType>,
}
impl ServiceSpecificCredentialBuilder {
    /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the service-specific credential were created.</p>
    /// This field is required.
    pub fn create_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the service-specific credential were created.</p>
    pub fn set_create_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_date = input;
        self
    }
    /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the service-specific credential were created.</p>
    pub fn get_create_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_date
    }
    /// <p>The name of the service associated with the service-specific credential.</p>
    /// This field is required.
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service associated with the service-specific credential.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of the service associated with the service-specific credential.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// <p>The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the Amazon Web Services account, as in <code>jane-at-123456789012</code>, for example. This value cannot be configured by the user.</p>
    /// This field is required.
    pub fn service_user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the Amazon Web Services account, as in <code>jane-at-123456789012</code>, for example. This value cannot be configured by the user.</p>
    pub fn set_service_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_user_name = input;
        self
    }
    /// <p>The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the Amazon Web Services account, as in <code>jane-at-123456789012</code>, for example. This value cannot be configured by the user.</p>
    pub fn get_service_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_user_name
    }
    /// <p>The generated password for the service-specific credential.</p>
    /// This field is required.
    pub fn service_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The generated password for the service-specific credential.</p>
    pub fn set_service_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_password = input;
        self
    }
    /// <p>The generated password for the service-specific credential.</p>
    pub fn get_service_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_password
    }
    /// <p>The unique identifier for the service-specific credential.</p>
    /// This field is required.
    pub fn service_specific_credential_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_specific_credential_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the service-specific credential.</p>
    pub fn set_service_specific_credential_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_specific_credential_id = input;
        self
    }
    /// <p>The unique identifier for the service-specific credential.</p>
    pub fn get_service_specific_credential_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_specific_credential_id
    }
    /// <p>The name of the IAM user associated with the service-specific credential.</p>
    /// This field is required.
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the IAM user associated with the service-specific credential.</p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The name of the IAM user associated with the service-specific credential.</p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>The status of the service-specific credential. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::StatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the service-specific credential. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the service-specific credential. <code>Active</code> means that the key is valid for API calls, while <code>Inactive</code> means it is not.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StatusType> {
        &self.status
    }
    /// Consumes the builder and constructs a [`ServiceSpecificCredential`](crate::types::ServiceSpecificCredential).
    /// This method will fail if any of the following fields are not set:
    /// - [`create_date`](crate::types::builders::ServiceSpecificCredentialBuilder::create_date)
    /// - [`service_name`](crate::types::builders::ServiceSpecificCredentialBuilder::service_name)
    /// - [`service_user_name`](crate::types::builders::ServiceSpecificCredentialBuilder::service_user_name)
    /// - [`service_password`](crate::types::builders::ServiceSpecificCredentialBuilder::service_password)
    /// - [`service_specific_credential_id`](crate::types::builders::ServiceSpecificCredentialBuilder::service_specific_credential_id)
    /// - [`user_name`](crate::types::builders::ServiceSpecificCredentialBuilder::user_name)
    /// - [`status`](crate::types::builders::ServiceSpecificCredentialBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceSpecificCredential, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceSpecificCredential {
            create_date: self.create_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_date",
                    "create_date was not specified but it is required when building ServiceSpecificCredential",
                )
            })?,
            service_name: self.service_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_name",
                    "service_name was not specified but it is required when building ServiceSpecificCredential",
                )
            })?,
            service_user_name: self.service_user_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_user_name",
                    "service_user_name was not specified but it is required when building ServiceSpecificCredential",
                )
            })?,
            service_password: self.service_password.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_password",
                    "service_password was not specified but it is required when building ServiceSpecificCredential",
                )
            })?,
            service_specific_credential_id: self.service_specific_credential_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_specific_credential_id",
                    "service_specific_credential_id was not specified but it is required when building ServiceSpecificCredential",
                )
            })?,
            user_name: self.user_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_name",
                    "user_name was not specified but it is required when building ServiceSpecificCredential",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ServiceSpecificCredential",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ServiceSpecificCredentialBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceSpecificCredentialBuilder");
        formatter.field("create_date", &self.create_date);
        formatter.field("service_name", &self.service_name);
        formatter.field("service_user_name", &self.service_user_name);
        formatter.field("service_password", &"*** Sensitive Data Redacted ***");
        formatter.field("service_specific_credential_id", &self.service_specific_credential_id);
        formatter.field("user_name", &self.user_name);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
