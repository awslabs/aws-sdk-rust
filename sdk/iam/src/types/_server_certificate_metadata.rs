// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a server certificate without its certificate body, certificate chain, and private key.</p>
/// <p> This data type is used as a response element in the <code>UploadServerCertificate</code> and <code>ListServerCertificates</code> operations. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServerCertificateMetadata {
    /// <p> The path to the server certificate. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    pub path: ::std::string::String,
    /// <p>The name that identifies the server certificate.</p>
    pub server_certificate_name: ::std::string::String,
    /// <p> The stable and unique string identifying the server certificate. For more information about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    pub server_certificate_id: ::std::string::String,
    /// <p> The Amazon Resource Name (ARN) specifying the server certificate. For more information about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    pub arn: ::std::string::String,
    /// <p>The date when the server certificate was uploaded.</p>
    pub upload_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date on which the certificate is set to expire.</p>
    pub expiration: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ServerCertificateMetadata {
    /// <p> The path to the server certificate. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    pub fn path(&self) -> &str {
        use std::ops::Deref;
        self.path.deref()
    }
    /// <p>The name that identifies the server certificate.</p>
    pub fn server_certificate_name(&self) -> &str {
        use std::ops::Deref;
        self.server_certificate_name.deref()
    }
    /// <p> The stable and unique string identifying the server certificate. For more information about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    pub fn server_certificate_id(&self) -> &str {
        use std::ops::Deref;
        self.server_certificate_id.deref()
    }
    /// <p> The Amazon Resource Name (ARN) specifying the server certificate. For more information about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The date when the server certificate was uploaded.</p>
    pub fn upload_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.upload_date.as_ref()
    }
    /// <p>The date on which the certificate is set to expire.</p>
    pub fn expiration(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiration.as_ref()
    }
}
impl ServerCertificateMetadata {
    /// Creates a new builder-style object to manufacture [`ServerCertificateMetadata`](crate::types::ServerCertificateMetadata).
    pub fn builder() -> crate::types::builders::ServerCertificateMetadataBuilder {
        crate::types::builders::ServerCertificateMetadataBuilder::default()
    }
}

/// A builder for [`ServerCertificateMetadata`](crate::types::ServerCertificateMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ServerCertificateMetadataBuilder {
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) server_certificate_name: ::std::option::Option<::std::string::String>,
    pub(crate) server_certificate_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) upload_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expiration: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ServerCertificateMetadataBuilder {
    /// <p> The path to the server certificate. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    /// This field is required.
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The path to the server certificate. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p> The path to the server certificate. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>The name that identifies the server certificate.</p>
    /// This field is required.
    pub fn server_certificate_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_certificate_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name that identifies the server certificate.</p>
    pub fn set_server_certificate_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_certificate_name = input;
        self
    }
    /// <p>The name that identifies the server certificate.</p>
    pub fn get_server_certificate_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_certificate_name
    }
    /// <p> The stable and unique string identifying the server certificate. For more information about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    /// This field is required.
    pub fn server_certificate_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_certificate_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The stable and unique string identifying the server certificate. For more information about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    pub fn set_server_certificate_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_certificate_id = input;
        self
    }
    /// <p> The stable and unique string identifying the server certificate. For more information about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    pub fn get_server_certificate_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_certificate_id
    }
    /// <p> The Amazon Resource Name (ARN) specifying the server certificate. For more information about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) specifying the server certificate. For more information about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) specifying the server certificate. For more information about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The date when the server certificate was uploaded.</p>
    pub fn upload_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.upload_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the server certificate was uploaded.</p>
    pub fn set_upload_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.upload_date = input;
        self
    }
    /// <p>The date when the server certificate was uploaded.</p>
    pub fn get_upload_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.upload_date
    }
    /// <p>The date on which the certificate is set to expire.</p>
    pub fn expiration(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date on which the certificate is set to expire.</p>
    pub fn set_expiration(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration = input;
        self
    }
    /// <p>The date on which the certificate is set to expire.</p>
    pub fn get_expiration(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration
    }
    /// Consumes the builder and constructs a [`ServerCertificateMetadata`](crate::types::ServerCertificateMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`path`](crate::types::builders::ServerCertificateMetadataBuilder::path)
    /// - [`server_certificate_name`](crate::types::builders::ServerCertificateMetadataBuilder::server_certificate_name)
    /// - [`server_certificate_id`](crate::types::builders::ServerCertificateMetadataBuilder::server_certificate_id)
    /// - [`arn`](crate::types::builders::ServerCertificateMetadataBuilder::arn)
    pub fn build(self) -> ::std::result::Result<crate::types::ServerCertificateMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServerCertificateMetadata {
            path: self.path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "path",
                    "path was not specified but it is required when building ServerCertificateMetadata",
                )
            })?,
            server_certificate_name: self.server_certificate_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "server_certificate_name",
                    "server_certificate_name was not specified but it is required when building ServerCertificateMetadata",
                )
            })?,
            server_certificate_id: self.server_certificate_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "server_certificate_id",
                    "server_certificate_id was not specified but it is required when building ServerCertificateMetadata",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ServerCertificateMetadata",
                )
            })?,
            upload_date: self.upload_date,
            expiration: self.expiration,
        })
    }
}
