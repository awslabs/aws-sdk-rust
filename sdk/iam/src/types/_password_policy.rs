// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the account password policy.</p>
/// <p> This data type is used as a response element in the <code>GetAccountPasswordPolicy</code> operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PasswordPolicy {
    /// <p>Minimum length to require for IAM user passwords.</p>
    #[doc(hidden)]
    pub minimum_password_length: std::option::Option<i32>,
    /// <p>Specifies whether IAM user passwords must contain at least one of the following symbols:</p>
    /// <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p>
    #[doc(hidden)]
    pub require_symbols: bool,
    /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
    #[doc(hidden)]
    pub require_numbers: bool,
    /// <p>Specifies whether IAM user passwords must contain at least one uppercase character (A to Z).</p>
    #[doc(hidden)]
    pub require_uppercase_characters: bool,
    /// <p>Specifies whether IAM user passwords must contain at least one lowercase character (a to z).</p>
    #[doc(hidden)]
    pub require_lowercase_characters: bool,
    /// <p>Specifies whether IAM users are allowed to change their own password. Gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM.</p>
    #[doc(hidden)]
    pub allow_users_to_change_password: bool,
    /// <p>Indicates whether passwords in the account expire. Returns true if <code>MaxPasswordAge</code> contains a value greater than 0. Returns false if MaxPasswordAge is 0 or not present.</p>
    #[doc(hidden)]
    pub expire_passwords: bool,
    /// <p>The number of days that an IAM user password is valid.</p>
    #[doc(hidden)]
    pub max_password_age: std::option::Option<i32>,
    /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
    #[doc(hidden)]
    pub password_reuse_prevention: std::option::Option<i32>,
    /// <p>Specifies whether IAM users are prevented from setting a new password via the Amazon Web Services Management Console after their password has expired. The IAM user cannot access the console until an administrator resets the password. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p>
    #[doc(hidden)]
    pub hard_expiry: std::option::Option<bool>,
}
impl PasswordPolicy {
    /// <p>Minimum length to require for IAM user passwords.</p>
    pub fn minimum_password_length(&self) -> std::option::Option<i32> {
        self.minimum_password_length
    }
    /// <p>Specifies whether IAM user passwords must contain at least one of the following symbols:</p>
    /// <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p>
    pub fn require_symbols(&self) -> bool {
        self.require_symbols
    }
    /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
    pub fn require_numbers(&self) -> bool {
        self.require_numbers
    }
    /// <p>Specifies whether IAM user passwords must contain at least one uppercase character (A to Z).</p>
    pub fn require_uppercase_characters(&self) -> bool {
        self.require_uppercase_characters
    }
    /// <p>Specifies whether IAM user passwords must contain at least one lowercase character (a to z).</p>
    pub fn require_lowercase_characters(&self) -> bool {
        self.require_lowercase_characters
    }
    /// <p>Specifies whether IAM users are allowed to change their own password. Gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM.</p>
    pub fn allow_users_to_change_password(&self) -> bool {
        self.allow_users_to_change_password
    }
    /// <p>Indicates whether passwords in the account expire. Returns true if <code>MaxPasswordAge</code> contains a value greater than 0. Returns false if MaxPasswordAge is 0 or not present.</p>
    pub fn expire_passwords(&self) -> bool {
        self.expire_passwords
    }
    /// <p>The number of days that an IAM user password is valid.</p>
    pub fn max_password_age(&self) -> std::option::Option<i32> {
        self.max_password_age
    }
    /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
    pub fn password_reuse_prevention(&self) -> std::option::Option<i32> {
        self.password_reuse_prevention
    }
    /// <p>Specifies whether IAM users are prevented from setting a new password via the Amazon Web Services Management Console after their password has expired. The IAM user cannot access the console until an administrator resets the password. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p>
    pub fn hard_expiry(&self) -> std::option::Option<bool> {
        self.hard_expiry
    }
}
impl PasswordPolicy {
    /// Creates a new builder-style object to manufacture [`PasswordPolicy`](crate::types::PasswordPolicy).
    pub fn builder() -> crate::types::builders::PasswordPolicyBuilder {
        crate::types::builders::PasswordPolicyBuilder::default()
    }
}

/// A builder for [`PasswordPolicy`](crate::types::PasswordPolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PasswordPolicyBuilder {
    pub(crate) minimum_password_length: std::option::Option<i32>,
    pub(crate) require_symbols: std::option::Option<bool>,
    pub(crate) require_numbers: std::option::Option<bool>,
    pub(crate) require_uppercase_characters: std::option::Option<bool>,
    pub(crate) require_lowercase_characters: std::option::Option<bool>,
    pub(crate) allow_users_to_change_password: std::option::Option<bool>,
    pub(crate) expire_passwords: std::option::Option<bool>,
    pub(crate) max_password_age: std::option::Option<i32>,
    pub(crate) password_reuse_prevention: std::option::Option<i32>,
    pub(crate) hard_expiry: std::option::Option<bool>,
}
impl PasswordPolicyBuilder {
    /// <p>Minimum length to require for IAM user passwords.</p>
    pub fn minimum_password_length(mut self, input: i32) -> Self {
        self.minimum_password_length = Some(input);
        self
    }
    /// <p>Minimum length to require for IAM user passwords.</p>
    pub fn set_minimum_password_length(mut self, input: std::option::Option<i32>) -> Self {
        self.minimum_password_length = input;
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one of the following symbols:</p>
    /// <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p>
    pub fn require_symbols(mut self, input: bool) -> Self {
        self.require_symbols = Some(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one of the following symbols:</p>
    /// <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p>
    pub fn set_require_symbols(mut self, input: std::option::Option<bool>) -> Self {
        self.require_symbols = input;
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
    pub fn require_numbers(mut self, input: bool) -> Self {
        self.require_numbers = Some(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
    pub fn set_require_numbers(mut self, input: std::option::Option<bool>) -> Self {
        self.require_numbers = input;
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one uppercase character (A to Z).</p>
    pub fn require_uppercase_characters(mut self, input: bool) -> Self {
        self.require_uppercase_characters = Some(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one uppercase character (A to Z).</p>
    pub fn set_require_uppercase_characters(mut self, input: std::option::Option<bool>) -> Self {
        self.require_uppercase_characters = input;
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one lowercase character (a to z).</p>
    pub fn require_lowercase_characters(mut self, input: bool) -> Self {
        self.require_lowercase_characters = Some(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one lowercase character (a to z).</p>
    pub fn set_require_lowercase_characters(mut self, input: std::option::Option<bool>) -> Self {
        self.require_lowercase_characters = input;
        self
    }
    /// <p>Specifies whether IAM users are allowed to change their own password. Gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM.</p>
    pub fn allow_users_to_change_password(mut self, input: bool) -> Self {
        self.allow_users_to_change_password = Some(input);
        self
    }
    /// <p>Specifies whether IAM users are allowed to change their own password. Gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM.</p>
    pub fn set_allow_users_to_change_password(mut self, input: std::option::Option<bool>) -> Self {
        self.allow_users_to_change_password = input;
        self
    }
    /// <p>Indicates whether passwords in the account expire. Returns true if <code>MaxPasswordAge</code> contains a value greater than 0. Returns false if MaxPasswordAge is 0 or not present.</p>
    pub fn expire_passwords(mut self, input: bool) -> Self {
        self.expire_passwords = Some(input);
        self
    }
    /// <p>Indicates whether passwords in the account expire. Returns true if <code>MaxPasswordAge</code> contains a value greater than 0. Returns false if MaxPasswordAge is 0 or not present.</p>
    pub fn set_expire_passwords(mut self, input: std::option::Option<bool>) -> Self {
        self.expire_passwords = input;
        self
    }
    /// <p>The number of days that an IAM user password is valid.</p>
    pub fn max_password_age(mut self, input: i32) -> Self {
        self.max_password_age = Some(input);
        self
    }
    /// <p>The number of days that an IAM user password is valid.</p>
    pub fn set_max_password_age(mut self, input: std::option::Option<i32>) -> Self {
        self.max_password_age = input;
        self
    }
    /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
    pub fn password_reuse_prevention(mut self, input: i32) -> Self {
        self.password_reuse_prevention = Some(input);
        self
    }
    /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
    pub fn set_password_reuse_prevention(mut self, input: std::option::Option<i32>) -> Self {
        self.password_reuse_prevention = input;
        self
    }
    /// <p>Specifies whether IAM users are prevented from setting a new password via the Amazon Web Services Management Console after their password has expired. The IAM user cannot access the console until an administrator resets the password. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p>
    pub fn hard_expiry(mut self, input: bool) -> Self {
        self.hard_expiry = Some(input);
        self
    }
    /// <p>Specifies whether IAM users are prevented from setting a new password via the Amazon Web Services Management Console after their password has expired. The IAM user cannot access the console until an administrator resets the password. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p>
    pub fn set_hard_expiry(mut self, input: std::option::Option<bool>) -> Self {
        self.hard_expiry = input;
        self
    }
    /// Consumes the builder and constructs a [`PasswordPolicy`](crate::types::PasswordPolicy).
    pub fn build(self) -> crate::types::PasswordPolicy {
        crate::types::PasswordPolicy {
            minimum_password_length: self.minimum_password_length,
            require_symbols: self.require_symbols.unwrap_or_default(),
            require_numbers: self.require_numbers.unwrap_or_default(),
            require_uppercase_characters: self.require_uppercase_characters.unwrap_or_default(),
            require_lowercase_characters: self.require_lowercase_characters.unwrap_or_default(),
            allow_users_to_change_password: self.allow_users_to_change_password.unwrap_or_default(),
            expire_passwords: self.expire_passwords.unwrap_or_default(),
            max_password_age: self.max_password_age,
            password_reuse_prevention: self.password_reuse_prevention,
            hard_expiry: self.hard_expiry,
        }
    }
}
