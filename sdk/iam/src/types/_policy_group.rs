// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a group that a managed policy is attached to.</p>
/// <p>This data type is used as a response element in the <code>ListEntitiesForPolicy</code> operation. </p>
/// <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PolicyGroup {
    /// <p>The name (friendly name, not ARN) identifying the group.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>The stable and unique string identifying the group. For more information about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>.</p>
    #[doc(hidden)]
    pub group_id: std::option::Option<std::string::String>,
}
impl PolicyGroup {
    /// <p>The name (friendly name, not ARN) identifying the group.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The stable and unique string identifying the group. For more information about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>.</p>
    pub fn group_id(&self) -> std::option::Option<&str> {
        self.group_id.as_deref()
    }
}
impl PolicyGroup {
    /// Creates a new builder-style object to manufacture [`PolicyGroup`](crate::types::PolicyGroup).
    pub fn builder() -> crate::types::builders::PolicyGroupBuilder {
        crate::types::builders::PolicyGroupBuilder::default()
    }
}

/// A builder for [`PolicyGroup`](crate::types::PolicyGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PolicyGroupBuilder {
    pub(crate) group_name: std::option::Option<std::string::String>,
    pub(crate) group_id: std::option::Option<std::string::String>,
}
impl PolicyGroupBuilder {
    /// <p>The name (friendly name, not ARN) identifying the group.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>The name (friendly name, not ARN) identifying the group.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The stable and unique string identifying the group. For more information about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>.</p>
    pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_id = Some(input.into());
        self
    }
    /// <p>The stable and unique string identifying the group. For more information about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>.</p>
    pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// Consumes the builder and constructs a [`PolicyGroup`](crate::types::PolicyGroup).
    pub fn build(self) -> crate::types::PolicyGroup {
        crate::types::PolicyGroup {
            group_name: self.group_name,
            group_id: self.group_id,
        }
    }
}
