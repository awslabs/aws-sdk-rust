// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_simulate_principal_policy_input_input(
    input: &crate::operation::simulate_principal_policy::SimulatePrincipalPolicyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SimulatePrincipalPolicy", "2010-05-08");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("PolicySourceArn");
    if let Some(var_2) = &input.policy_source_arn {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("PolicyInputList");
    if let Some(var_4) = &input.policy_input_list {
        let mut list_6 = scope_3.start_list(false, None);
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("PermissionsBoundaryPolicyInputList");
    if let Some(var_9) = &input.permissions_boundary_policy_input_list {
        let mut list_11 = scope_8.start_list(false, None);
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            entry_12.string(item_10);
        }
        list_11.finish();
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("ActionNames");
    if let Some(var_14) = &input.action_names {
        let mut list_16 = scope_13.start_list(false, None);
        for item_15 in var_14 {
            #[allow(unused_mut)]
            let mut entry_17 = list_16.entry();
            entry_17.string(item_15);
        }
        list_16.finish();
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("ResourceArns");
    if let Some(var_19) = &input.resource_arns {
        let mut list_21 = scope_18.start_list(false, None);
        for item_20 in var_19 {
            #[allow(unused_mut)]
            let mut entry_22 = list_21.entry();
            entry_22.string(item_20);
        }
        list_21.finish();
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("ResourcePolicy");
    if let Some(var_24) = &input.resource_policy {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("ResourceOwner");
    if let Some(var_26) = &input.resource_owner {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("CallerArn");
    if let Some(var_28) = &input.caller_arn {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("ContextEntries");
    if let Some(var_30) = &input.context_entries {
        let mut list_32 = scope_29.start_list(false, None);
        for item_31 in var_30 {
            #[allow(unused_mut)]
            let mut entry_33 = list_32.entry();
            crate::protocol_serde::shape_context_entry::ser_context_entry(entry_33, item_31)?;
        }
        list_32.finish();
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ResourceHandlingOption");
    if let Some(var_35) = &input.resource_handling_option {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("MaxItems");
    if let Some(var_37) = &input.max_items {
        scope_36.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_37).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("Marker");
    if let Some(var_39) = &input.marker {
        scope_38.string(var_39);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
