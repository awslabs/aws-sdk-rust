// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_service_specific_credential(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ServiceSpecificCredential, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ServiceSpecificCredential::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CreateDate") /* CreateDate com.amazonaws.iam#ServiceSpecificCredential$CreateDate */ =>  {
                let var_1 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.iam#dateType`)"))
                        ?
                    )
                ;
                builder = builder.set_create_date(var_1);
            }
            ,
            s if s.matches("ServiceName") /* ServiceName com.amazonaws.iam#ServiceSpecificCredential$ServiceName */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_name(var_2);
            }
            ,
            s if s.matches("ServiceUserName") /* ServiceUserName com.amazonaws.iam#ServiceSpecificCredential$ServiceUserName */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_user_name(var_3);
            }
            ,
            s if s.matches("ServicePassword") /* ServicePassword com.amazonaws.iam#ServiceSpecificCredential$ServicePassword */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_password(var_4);
            }
            ,
            s if s.matches("ServiceSpecificCredentialId") /* ServiceSpecificCredentialId com.amazonaws.iam#ServiceSpecificCredential$ServiceSpecificCredentialId */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_service_specific_credential_id(var_5);
            }
            ,
            s if s.matches("UserName") /* UserName com.amazonaws.iam#ServiceSpecificCredential$UserName */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_name(var_6);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.iam#ServiceSpecificCredential$Status */ =>  {
                let var_7 =
                    Some(
                        Result::<crate::types::StatusType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::StatusType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
