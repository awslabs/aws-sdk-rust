// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_role(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::Role, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Role::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Path") /* Path com.amazonaws.iam#Role$Path */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_path(var_1);
            }
            ,
            s if s.matches("RoleName") /* RoleName com.amazonaws.iam#Role$RoleName */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_role_name(var_2);
            }
            ,
            s if s.matches("RoleId") /* RoleId com.amazonaws.iam#Role$RoleId */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_role_id(var_3);
            }
            ,
            s if s.matches("Arn") /* Arn com.amazonaws.iam#Role$Arn */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_4);
            }
            ,
            s if s.matches("CreateDate") /* CreateDate com.amazonaws.iam#Role$CreateDate */ =>  {
                let var_5 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.iam#dateType`)"))
                        ?
                    )
                ;
                builder = builder.set_create_date(var_5);
            }
            ,
            s if s.matches("AssumeRolePolicyDocument") /* AssumeRolePolicyDocument com.amazonaws.iam#Role$AssumeRolePolicyDocument */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_assume_role_policy_document(var_6);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.iam#Role$Description */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_7);
            }
            ,
            s if s.matches("MaxSessionDuration") /* MaxSessionDuration com.amazonaws.iam#Role$MaxSessionDuration */ =>  {
                let var_8 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.iam#roleMaxSessionDurationType`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_session_duration(var_8);
            }
            ,
            s if s.matches("PermissionsBoundary") /* PermissionsBoundary com.amazonaws.iam#Role$PermissionsBoundary */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_attached_permissions_boundary::de_attached_permissions_boundary(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_permissions_boundary(var_9);
            }
            ,
            s if s.matches("Tags") /* Tags com.amazonaws.iam#Role$Tags */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_tag_list_type::de_tag_list_type(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_10);
            }
            ,
            s if s.matches("RoleLastUsed") /* RoleLastUsed com.amazonaws.iam#Role$RoleLastUsed */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_role_last_used::de_role_last_used(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_role_last_used(var_11);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
