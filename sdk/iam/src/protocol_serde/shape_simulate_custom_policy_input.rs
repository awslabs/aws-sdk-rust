// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_simulate_custom_policy_input_input(
    input: &crate::operation::simulate_custom_policy::SimulateCustomPolicyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SimulateCustomPolicy", "2010-05-08");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("PolicyInputList");
    if let Some(var_2) = &input.policy_input_list {
        let mut list_4 = scope_1.start_list(false, None);
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            entry_5.string(item_3);
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("PermissionsBoundaryPolicyInputList");
    if let Some(var_7) = &input.permissions_boundary_policy_input_list {
        let mut list_9 = scope_6.start_list(false, None);
        for item_8 in var_7 {
            #[allow(unused_mut)]
            let mut entry_10 = list_9.entry();
            entry_10.string(item_8);
        }
        list_9.finish();
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("ActionNames");
    if let Some(var_12) = &input.action_names {
        let mut list_14 = scope_11.start_list(false, None);
        for item_13 in var_12 {
            #[allow(unused_mut)]
            let mut entry_15 = list_14.entry();
            entry_15.string(item_13);
        }
        list_14.finish();
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("ResourceArns");
    if let Some(var_17) = &input.resource_arns {
        let mut list_19 = scope_16.start_list(false, None);
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("ResourcePolicy");
    if let Some(var_22) = &input.resource_policy {
        scope_21.string(var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("ResourceOwner");
    if let Some(var_24) = &input.resource_owner {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("CallerArn");
    if let Some(var_26) = &input.caller_arn {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("ContextEntries");
    if let Some(var_28) = &input.context_entries {
        let mut list_30 = scope_27.start_list(false, None);
        for item_29 in var_28 {
            #[allow(unused_mut)]
            let mut entry_31 = list_30.entry();
            crate::protocol_serde::shape_context_entry::ser_context_entry(entry_31, item_29)?;
        }
        list_30.finish();
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("ResourceHandlingOption");
    if let Some(var_33) = &input.resource_handling_option {
        scope_32.string(var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("MaxItems");
    if let Some(var_35) = &input.max_items {
        scope_34.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_35).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("Marker");
    if let Some(var_37) = &input.marker {
        scope_36.string(var_37);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
