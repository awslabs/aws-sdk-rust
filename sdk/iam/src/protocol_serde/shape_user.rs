// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_user(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::User, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::User::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Path") /* Path com.amazonaws.iam#User$Path */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_path(var_1);
            }
            ,
            s if s.matches("UserName") /* UserName com.amazonaws.iam#User$UserName */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_name(var_2);
            }
            ,
            s if s.matches("UserId") /* UserId com.amazonaws.iam#User$UserId */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_id(var_3);
            }
            ,
            s if s.matches("Arn") /* Arn com.amazonaws.iam#User$Arn */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_4);
            }
            ,
            s if s.matches("CreateDate") /* CreateDate com.amazonaws.iam#User$CreateDate */ =>  {
                let var_5 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.iam#dateType`)"))
                        ?
                    )
                ;
                builder = builder.set_create_date(var_5);
            }
            ,
            s if s.matches("PasswordLastUsed") /* PasswordLastUsed com.amazonaws.iam#User$PasswordLastUsed */ =>  {
                let var_6 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.iam#dateType`)"))
                        ?
                    )
                ;
                builder = builder.set_password_last_used(var_6);
            }
            ,
            s if s.matches("PermissionsBoundary") /* PermissionsBoundary com.amazonaws.iam#User$PermissionsBoundary */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_attached_permissions_boundary::de_attached_permissions_boundary(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_permissions_boundary(var_7);
            }
            ,
            s if s.matches("Tags") /* Tags com.amazonaws.iam#User$Tags */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_tag_list_type::de_tag_list_type(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tags(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
