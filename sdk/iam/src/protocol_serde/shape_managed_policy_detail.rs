// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_managed_policy_detail(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ManagedPolicyDetail, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ManagedPolicyDetail::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("PolicyName") /* PolicyName com.amazonaws.iam#ManagedPolicyDetail$PolicyName */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_policy_name(var_1);
            }
            ,
            s if s.matches("PolicyId") /* PolicyId com.amazonaws.iam#ManagedPolicyDetail$PolicyId */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_policy_id(var_2);
            }
            ,
            s if s.matches("Arn") /* Arn com.amazonaws.iam#ManagedPolicyDetail$Arn */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_3);
            }
            ,
            s if s.matches("Path") /* Path com.amazonaws.iam#ManagedPolicyDetail$Path */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_path(var_4);
            }
            ,
            s if s.matches("DefaultVersionId") /* DefaultVersionId com.amazonaws.iam#ManagedPolicyDetail$DefaultVersionId */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_default_version_id(var_5);
            }
            ,
            s if s.matches("AttachmentCount") /* AttachmentCount com.amazonaws.iam#ManagedPolicyDetail$AttachmentCount */ =>  {
                let var_6 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.iam#attachmentCountType`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_attachment_count(var_6);
            }
            ,
            s if s.matches("PermissionsBoundaryUsageCount") /* PermissionsBoundaryUsageCount com.amazonaws.iam#ManagedPolicyDetail$PermissionsBoundaryUsageCount */ =>  {
                let var_7 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.iam#attachmentCountType`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_permissions_boundary_usage_count(var_7);
            }
            ,
            s if s.matches("IsAttachable") /* IsAttachable com.amazonaws.iam#ManagedPolicyDetail$IsAttachable */ =>  {
                let var_8 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.iam#booleanType`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_attachable(var_8);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.iam#ManagedPolicyDetail$Description */ =>  {
                let var_9 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_9);
            }
            ,
            s if s.matches("CreateDate") /* CreateDate com.amazonaws.iam#ManagedPolicyDetail$CreateDate */ =>  {
                let var_10 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.iam#dateType`)"))
                        ?
                    )
                ;
                builder = builder.set_create_date(var_10);
            }
            ,
            s if s.matches("UpdateDate") /* UpdateDate com.amazonaws.iam#ManagedPolicyDetail$UpdateDate */ =>  {
                let var_11 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.iam#dateType`)"))
                        ?
                    )
                ;
                builder = builder.set_update_date(var_11);
            }
            ,
            s if s.matches("PolicyVersionList") /* PolicyVersionList com.amazonaws.iam#ManagedPolicyDetail$PolicyVersionList */ =>  {
                let var_12 =
                    Some(
                        crate::protocol_serde::shape_policy_document_version_list_type::de_policy_document_version_list_type(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_policy_version_list(var_12);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
