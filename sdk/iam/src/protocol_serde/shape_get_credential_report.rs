// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_get_credential_report_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::get_credential_report::GetCredentialReportOutput,
    crate::operation::get_credential_report::GetCredentialReportError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::get_credential_report::GetCredentialReportError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::get_credential_report::GetCredentialReportError::unhandled(
                    generic,
                ),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ReportExpired" => crate::operation::get_credential_report::GetCredentialReportError::CredentialReportExpiredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CredentialReportExpiredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_credential_report_expired_exception::de_credential_report_expired_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::get_credential_report::GetCredentialReportError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "ReportNotPresent" => crate::operation::get_credential_report::GetCredentialReportError::CredentialReportNotPresentException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CredentialReportNotPresentExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_credential_report_not_present_exception::de_credential_report_not_present_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::get_credential_report::GetCredentialReportError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "ReportInProgress" => crate::operation::get_credential_report::GetCredentialReportError::CredentialReportNotReadyException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CredentialReportNotReadyExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_credential_report_not_ready_exception::de_credential_report_not_ready_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::get_credential_report::GetCredentialReportError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "ServiceFailure" => crate::operation::get_credential_report::GetCredentialReportError::ServiceFailureException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ServiceFailureExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_service_failure_exception::de_service_failure_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::get_credential_report::GetCredentialReportError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::get_credential_report::GetCredentialReportError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_credential_report_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::get_credential_report::GetCredentialReportOutput,
    crate::operation::get_credential_report::GetCredentialReportError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_credential_report::builders::GetCredentialReportOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_get_credential_report::de_get_credential_report(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::get_credential_report::GetCredentialReportError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_get_credential_report(
    inp: &[u8],
    mut builder: crate::operation::get_credential_report::builders::GetCredentialReportOutputBuilder,
) -> Result<
    crate::operation::get_credential_report::builders::GetCredentialReportOutputBuilder,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("GetCredentialReportResponse")) {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected GetCredentialReportResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("GetCredentialReportResult")) {
            return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected GetCredentialReportResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Content") /* Content com.amazonaws.iam.synthetic#GetCredentialReportOutput$Content */ =>  {
                let var_1 =
                    Some(
                        aws_smithy_types::base64::decode(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                        .map_err(|err|aws_smithy_xml::decode::XmlDecodeError::custom(format!("invalid base64: {:?}", err))).map(aws_smithy_types::Blob::new)
                        ?
                    )
                ;
                builder = builder.set_content(var_1);
            }
            ,
            s if s.matches("ReportFormat") /* ReportFormat com.amazonaws.iam.synthetic#GetCredentialReportOutput$ReportFormat */ =>  {
                let var_2 =
                    Some(
                        Result::<crate::types::ReportFormatType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ReportFormatType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_report_format(var_2);
            }
            ,
            s if s.matches("GeneratedTime") /* GeneratedTime com.amazonaws.iam.synthetic#GetCredentialReportOutput$GeneratedTime */ =>  {
                let var_3 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.iam#dateType`)"))
                        ?
                    )
                ;
                builder = builder.set_generated_time(var_3);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected GetCredentialReportResult tag",
        ));
    };
    Ok(builder)
}
