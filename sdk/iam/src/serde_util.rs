// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_access_key_output_correct_errors(
    mut builder: crate::operation::create_access_key::builders::CreateAccessKeyOutputBuilder,
) -> crate::operation::create_access_key::builders::CreateAccessKeyOutputBuilder {
    if builder.access_key.is_none() {
        builder.access_key = {
            let builder = crate::types::builders::AccessKeyBuilder::default();
            crate::serde_util::access_key_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_group_output_correct_errors(
    mut builder: crate::operation::create_group::builders::CreateGroupOutputBuilder,
) -> crate::operation::create_group::builders::CreateGroupOutputBuilder {
    if builder.group.is_none() {
        builder.group = {
            let builder = crate::types::builders::GroupBuilder::default();
            crate::serde_util::group_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_instance_profile_output_correct_errors(
    mut builder: crate::operation::create_instance_profile::builders::CreateInstanceProfileOutputBuilder,
) -> crate::operation::create_instance_profile::builders::CreateInstanceProfileOutputBuilder {
    if builder.instance_profile.is_none() {
        builder.instance_profile = {
            let builder = crate::types::builders::InstanceProfileBuilder::default();
            crate::serde_util::instance_profile_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_login_profile_output_correct_errors(
    mut builder: crate::operation::create_login_profile::builders::CreateLoginProfileOutputBuilder,
) -> crate::operation::create_login_profile::builders::CreateLoginProfileOutputBuilder {
    if builder.login_profile.is_none() {
        builder.login_profile = {
            let builder = crate::types::builders::LoginProfileBuilder::default();
            crate::serde_util::login_profile_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_role_output_correct_errors(
    mut builder: crate::operation::create_role::builders::CreateRoleOutputBuilder,
) -> crate::operation::create_role::builders::CreateRoleOutputBuilder {
    if builder.role.is_none() {
        builder.role = {
            let builder = crate::types::builders::RoleBuilder::default();
            crate::serde_util::role_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_virtual_mfa_device_output_correct_errors(
    mut builder: crate::operation::create_virtual_mfa_device::builders::CreateVirtualMfaDeviceOutputBuilder,
) -> crate::operation::create_virtual_mfa_device::builders::CreateVirtualMfaDeviceOutputBuilder {
    if builder.virtual_mfa_device.is_none() {
        builder.virtual_mfa_device = {
            let builder = crate::types::builders::VirtualMfaDeviceBuilder::default();
            crate::serde_util::virtual_mfa_device_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_service_linked_role_output_correct_errors(
    mut builder: crate::operation::delete_service_linked_role::builders::DeleteServiceLinkedRoleOutputBuilder,
) -> crate::operation::delete_service_linked_role::builders::DeleteServiceLinkedRoleOutputBuilder {
    if builder.deletion_task_id.is_none() {
        builder.deletion_task_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_account_password_policy_output_correct_errors(
    mut builder: crate::operation::get_account_password_policy::builders::GetAccountPasswordPolicyOutputBuilder,
) -> crate::operation::get_account_password_policy::builders::GetAccountPasswordPolicyOutputBuilder {
    if builder.password_policy.is_none() {
        builder.password_policy = {
            let builder = crate::types::builders::PasswordPolicyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_group_output_correct_errors(
    mut builder: crate::operation::get_group::builders::GetGroupOutputBuilder,
) -> crate::operation::get_group::builders::GetGroupOutputBuilder {
    if builder.group.is_none() {
        builder.group = {
            let builder = crate::types::builders::GroupBuilder::default();
            crate::serde_util::group_correct_errors(builder).build().ok()
        }
    }
    if builder.users.is_none() {
        builder.users = Some(Default::default())
    }
    builder
}

pub(crate) fn get_group_policy_output_correct_errors(
    mut builder: crate::operation::get_group_policy::builders::GetGroupPolicyOutputBuilder,
) -> crate::operation::get_group_policy::builders::GetGroupPolicyOutputBuilder {
    if builder.group_name.is_none() {
        builder.group_name = Some(Default::default())
    }
    if builder.policy_name.is_none() {
        builder.policy_name = Some(Default::default())
    }
    if builder.policy_document.is_none() {
        builder.policy_document = Some(Default::default())
    }
    builder
}

pub(crate) fn get_instance_profile_output_correct_errors(
    mut builder: crate::operation::get_instance_profile::builders::GetInstanceProfileOutputBuilder,
) -> crate::operation::get_instance_profile::builders::GetInstanceProfileOutputBuilder {
    if builder.instance_profile.is_none() {
        builder.instance_profile = {
            let builder = crate::types::builders::InstanceProfileBuilder::default();
            crate::serde_util::instance_profile_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_login_profile_output_correct_errors(
    mut builder: crate::operation::get_login_profile::builders::GetLoginProfileOutputBuilder,
) -> crate::operation::get_login_profile::builders::GetLoginProfileOutputBuilder {
    if builder.login_profile.is_none() {
        builder.login_profile = {
            let builder = crate::types::builders::LoginProfileBuilder::default();
            crate::serde_util::login_profile_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_mfa_device_output_correct_errors(
    mut builder: crate::operation::get_mfa_device::builders::GetMfaDeviceOutputBuilder,
) -> crate::operation::get_mfa_device::builders::GetMfaDeviceOutputBuilder {
    if builder.serial_number.is_none() {
        builder.serial_number = Some(Default::default())
    }
    builder
}

pub(crate) fn get_organizations_access_report_output_correct_errors(
    mut builder: crate::operation::get_organizations_access_report::builders::GetOrganizationsAccessReportOutputBuilder,
) -> crate::operation::get_organizations_access_report::builders::GetOrganizationsAccessReportOutputBuilder {
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatusType>().ok()
    }
    if builder.job_creation_date.is_none() {
        builder.job_creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_role_output_correct_errors(
    mut builder: crate::operation::get_role::builders::GetRoleOutputBuilder,
) -> crate::operation::get_role::builders::GetRoleOutputBuilder {
    if builder.role.is_none() {
        builder.role = {
            let builder = crate::types::builders::RoleBuilder::default();
            crate::serde_util::role_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_role_policy_output_correct_errors(
    mut builder: crate::operation::get_role_policy::builders::GetRolePolicyOutputBuilder,
) -> crate::operation::get_role_policy::builders::GetRolePolicyOutputBuilder {
    if builder.role_name.is_none() {
        builder.role_name = Some(Default::default())
    }
    if builder.policy_name.is_none() {
        builder.policy_name = Some(Default::default())
    }
    if builder.policy_document.is_none() {
        builder.policy_document = Some(Default::default())
    }
    builder
}

pub(crate) fn get_server_certificate_output_correct_errors(
    mut builder: crate::operation::get_server_certificate::builders::GetServerCertificateOutputBuilder,
) -> crate::operation::get_server_certificate::builders::GetServerCertificateOutputBuilder {
    if builder.server_certificate.is_none() {
        builder.server_certificate = {
            let builder = crate::types::builders::ServerCertificateBuilder::default();
            crate::serde_util::server_certificate_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_service_last_accessed_details_output_correct_errors(
    mut builder: crate::operation::get_service_last_accessed_details::builders::GetServiceLastAccessedDetailsOutputBuilder,
) -> crate::operation::get_service_last_accessed_details::builders::GetServiceLastAccessedDetailsOutputBuilder {
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatusType>().ok()
    }
    if builder.job_creation_date.is_none() {
        builder.job_creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.services_last_accessed.is_none() {
        builder.services_last_accessed = Some(Default::default())
    }
    if builder.job_completion_date.is_none() {
        builder.job_completion_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_service_last_accessed_details_with_entities_output_correct_errors(
    mut builder: crate::operation::get_service_last_accessed_details_with_entities::builders::GetServiceLastAccessedDetailsWithEntitiesOutputBuilder,
) -> crate::operation::get_service_last_accessed_details_with_entities::builders::GetServiceLastAccessedDetailsWithEntitiesOutputBuilder {
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatusType>().ok()
    }
    if builder.job_creation_date.is_none() {
        builder.job_creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.job_completion_date.is_none() {
        builder.job_completion_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.entity_details_list.is_none() {
        builder.entity_details_list = Some(Default::default())
    }
    builder
}

pub(crate) fn get_service_linked_role_deletion_status_output_correct_errors(
    mut builder: crate::operation::get_service_linked_role_deletion_status::builders::GetServiceLinkedRoleDeletionStatusOutputBuilder,
) -> crate::operation::get_service_linked_role_deletion_status::builders::GetServiceLinkedRoleDeletionStatusOutputBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DeletionTaskStatusType>().ok()
    }
    builder
}

pub(crate) fn get_user_output_correct_errors(
    mut builder: crate::operation::get_user::builders::GetUserOutputBuilder,
) -> crate::operation::get_user::builders::GetUserOutputBuilder {
    if builder.user.is_none() {
        builder.user = {
            let builder = crate::types::builders::UserBuilder::default();
            crate::serde_util::user_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_user_policy_output_correct_errors(
    mut builder: crate::operation::get_user_policy::builders::GetUserPolicyOutputBuilder,
) -> crate::operation::get_user_policy::builders::GetUserPolicyOutputBuilder {
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.policy_name.is_none() {
        builder.policy_name = Some(Default::default())
    }
    if builder.policy_document.is_none() {
        builder.policy_document = Some(Default::default())
    }
    builder
}

pub(crate) fn list_access_keys_output_correct_errors(
    mut builder: crate::operation::list_access_keys::builders::ListAccessKeysOutputBuilder,
) -> crate::operation::list_access_keys::builders::ListAccessKeysOutputBuilder {
    if builder.access_key_metadata.is_none() {
        builder.access_key_metadata = Some(Default::default())
    }
    builder
}

pub(crate) fn list_account_aliases_output_correct_errors(
    mut builder: crate::operation::list_account_aliases::builders::ListAccountAliasesOutputBuilder,
) -> crate::operation::list_account_aliases::builders::ListAccountAliasesOutputBuilder {
    if builder.account_aliases.is_none() {
        builder.account_aliases = Some(Default::default())
    }
    builder
}

pub(crate) fn list_group_policies_output_correct_errors(
    mut builder: crate::operation::list_group_policies::builders::ListGroupPoliciesOutputBuilder,
) -> crate::operation::list_group_policies::builders::ListGroupPoliciesOutputBuilder {
    if builder.policy_names.is_none() {
        builder.policy_names = Some(Default::default())
    }
    builder
}

pub(crate) fn list_groups_output_correct_errors(
    mut builder: crate::operation::list_groups::builders::ListGroupsOutputBuilder,
) -> crate::operation::list_groups::builders::ListGroupsOutputBuilder {
    if builder.groups.is_none() {
        builder.groups = Some(Default::default())
    }
    builder
}

pub(crate) fn list_groups_for_user_output_correct_errors(
    mut builder: crate::operation::list_groups_for_user::builders::ListGroupsForUserOutputBuilder,
) -> crate::operation::list_groups_for_user::builders::ListGroupsForUserOutputBuilder {
    if builder.groups.is_none() {
        builder.groups = Some(Default::default())
    }
    builder
}

pub(crate) fn list_instance_profile_tags_output_correct_errors(
    mut builder: crate::operation::list_instance_profile_tags::builders::ListInstanceProfileTagsOutputBuilder,
) -> crate::operation::list_instance_profile_tags::builders::ListInstanceProfileTagsOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn list_instance_profiles_output_correct_errors(
    mut builder: crate::operation::list_instance_profiles::builders::ListInstanceProfilesOutputBuilder,
) -> crate::operation::list_instance_profiles::builders::ListInstanceProfilesOutputBuilder {
    if builder.instance_profiles.is_none() {
        builder.instance_profiles = Some(Default::default())
    }
    builder
}

pub(crate) fn list_instance_profiles_for_role_output_correct_errors(
    mut builder: crate::operation::list_instance_profiles_for_role::builders::ListInstanceProfilesForRoleOutputBuilder,
) -> crate::operation::list_instance_profiles_for_role::builders::ListInstanceProfilesForRoleOutputBuilder {
    if builder.instance_profiles.is_none() {
        builder.instance_profiles = Some(Default::default())
    }
    builder
}

pub(crate) fn list_mfa_device_tags_output_correct_errors(
    mut builder: crate::operation::list_mfa_device_tags::builders::ListMfaDeviceTagsOutputBuilder,
) -> crate::operation::list_mfa_device_tags::builders::ListMfaDeviceTagsOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn list_mfa_devices_output_correct_errors(
    mut builder: crate::operation::list_mfa_devices::builders::ListMfaDevicesOutputBuilder,
) -> crate::operation::list_mfa_devices::builders::ListMfaDevicesOutputBuilder {
    if builder.mfa_devices.is_none() {
        builder.mfa_devices = Some(Default::default())
    }
    builder
}

pub(crate) fn list_open_id_connect_provider_tags_output_correct_errors(
    mut builder: crate::operation::list_open_id_connect_provider_tags::builders::ListOpenIdConnectProviderTagsOutputBuilder,
) -> crate::operation::list_open_id_connect_provider_tags::builders::ListOpenIdConnectProviderTagsOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn list_policies_granting_service_access_output_correct_errors(
    mut builder: crate::operation::list_policies_granting_service_access::builders::ListPoliciesGrantingServiceAccessOutputBuilder,
) -> crate::operation::list_policies_granting_service_access::builders::ListPoliciesGrantingServiceAccessOutputBuilder {
    if builder.policies_granting_service_access.is_none() {
        builder.policies_granting_service_access = Some(Default::default())
    }
    builder
}

pub(crate) fn list_policy_tags_output_correct_errors(
    mut builder: crate::operation::list_policy_tags::builders::ListPolicyTagsOutputBuilder,
) -> crate::operation::list_policy_tags::builders::ListPolicyTagsOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn list_role_policies_output_correct_errors(
    mut builder: crate::operation::list_role_policies::builders::ListRolePoliciesOutputBuilder,
) -> crate::operation::list_role_policies::builders::ListRolePoliciesOutputBuilder {
    if builder.policy_names.is_none() {
        builder.policy_names = Some(Default::default())
    }
    builder
}

pub(crate) fn list_role_tags_output_correct_errors(
    mut builder: crate::operation::list_role_tags::builders::ListRoleTagsOutputBuilder,
) -> crate::operation::list_role_tags::builders::ListRoleTagsOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn list_roles_output_correct_errors(
    mut builder: crate::operation::list_roles::builders::ListRolesOutputBuilder,
) -> crate::operation::list_roles::builders::ListRolesOutputBuilder {
    if builder.roles.is_none() {
        builder.roles = Some(Default::default())
    }
    builder
}

pub(crate) fn list_saml_provider_tags_output_correct_errors(
    mut builder: crate::operation::list_saml_provider_tags::builders::ListSamlProviderTagsOutputBuilder,
) -> crate::operation::list_saml_provider_tags::builders::ListSamlProviderTagsOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn list_server_certificate_tags_output_correct_errors(
    mut builder: crate::operation::list_server_certificate_tags::builders::ListServerCertificateTagsOutputBuilder,
) -> crate::operation::list_server_certificate_tags::builders::ListServerCertificateTagsOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn list_server_certificates_output_correct_errors(
    mut builder: crate::operation::list_server_certificates::builders::ListServerCertificatesOutputBuilder,
) -> crate::operation::list_server_certificates::builders::ListServerCertificatesOutputBuilder {
    if builder.server_certificate_metadata_list.is_none() {
        builder.server_certificate_metadata_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_signing_certificates_output_correct_errors(
    mut builder: crate::operation::list_signing_certificates::builders::ListSigningCertificatesOutputBuilder,
) -> crate::operation::list_signing_certificates::builders::ListSigningCertificatesOutputBuilder {
    if builder.certificates.is_none() {
        builder.certificates = Some(Default::default())
    }
    builder
}

pub(crate) fn list_user_policies_output_correct_errors(
    mut builder: crate::operation::list_user_policies::builders::ListUserPoliciesOutputBuilder,
) -> crate::operation::list_user_policies::builders::ListUserPoliciesOutputBuilder {
    if builder.policy_names.is_none() {
        builder.policy_names = Some(Default::default())
    }
    builder
}

pub(crate) fn list_user_tags_output_correct_errors(
    mut builder: crate::operation::list_user_tags::builders::ListUserTagsOutputBuilder,
) -> crate::operation::list_user_tags::builders::ListUserTagsOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn list_users_output_correct_errors(
    mut builder: crate::operation::list_users::builders::ListUsersOutputBuilder,
) -> crate::operation::list_users::builders::ListUsersOutputBuilder {
    if builder.users.is_none() {
        builder.users = Some(Default::default())
    }
    builder
}

pub(crate) fn list_virtual_mfa_devices_output_correct_errors(
    mut builder: crate::operation::list_virtual_mfa_devices::builders::ListVirtualMfaDevicesOutputBuilder,
) -> crate::operation::list_virtual_mfa_devices::builders::ListVirtualMfaDevicesOutputBuilder {
    if builder.virtual_mfa_devices.is_none() {
        builder.virtual_mfa_devices = Some(Default::default())
    }
    builder
}

pub(crate) fn upload_signing_certificate_output_correct_errors(
    mut builder: crate::operation::upload_signing_certificate::builders::UploadSigningCertificateOutputBuilder,
) -> crate::operation::upload_signing_certificate::builders::UploadSigningCertificateOutputBuilder {
    if builder.certificate.is_none() {
        builder.certificate = {
            let builder = crate::types::builders::SigningCertificateBuilder::default();
            crate::serde_util::signing_certificate_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn access_key_correct_errors(mut builder: crate::types::builders::AccessKeyBuilder) -> crate::types::builders::AccessKeyBuilder {
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.access_key_id.is_none() {
        builder.access_key_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StatusType>().ok()
    }
    if builder.secret_access_key.is_none() {
        builder.secret_access_key = Some(Default::default())
    }
    builder
}

pub(crate) fn group_correct_errors(mut builder: crate::types::builders::GroupBuilder) -> crate::types::builders::GroupBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.group_name.is_none() {
        builder.group_name = Some(Default::default())
    }
    if builder.group_id.is_none() {
        builder.group_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.create_date.is_none() {
        builder.create_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn instance_profile_correct_errors(
    mut builder: crate::types::builders::InstanceProfileBuilder,
) -> crate::types::builders::InstanceProfileBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.instance_profile_name.is_none() {
        builder.instance_profile_name = Some(Default::default())
    }
    if builder.instance_profile_id.is_none() {
        builder.instance_profile_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.create_date.is_none() {
        builder.create_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.roles.is_none() {
        builder.roles = Some(Default::default())
    }
    builder
}

pub(crate) fn login_profile_correct_errors(mut builder: crate::types::builders::LoginProfileBuilder) -> crate::types::builders::LoginProfileBuilder {
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.create_date.is_none() {
        builder.create_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn role_correct_errors(mut builder: crate::types::builders::RoleBuilder) -> crate::types::builders::RoleBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.role_name.is_none() {
        builder.role_name = Some(Default::default())
    }
    if builder.role_id.is_none() {
        builder.role_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.create_date.is_none() {
        builder.create_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn virtual_mfa_device_correct_errors(
    mut builder: crate::types::builders::VirtualMfaDeviceBuilder,
) -> crate::types::builders::VirtualMfaDeviceBuilder {
    if builder.serial_number.is_none() {
        builder.serial_number = Some(Default::default())
    }
    builder
}

pub(crate) fn server_certificate_correct_errors(
    mut builder: crate::types::builders::ServerCertificateBuilder,
) -> crate::types::builders::ServerCertificateBuilder {
    if builder.server_certificate_metadata.is_none() {
        builder.server_certificate_metadata = {
            let builder = crate::types::builders::ServerCertificateMetadataBuilder::default();
            crate::serde_util::server_certificate_metadata_correct_errors(builder).build().ok()
        }
    }
    if builder.certificate_body.is_none() {
        builder.certificate_body = Some(Default::default())
    }
    builder
}

pub(crate) fn user_correct_errors(mut builder: crate::types::builders::UserBuilder) -> crate::types::builders::UserBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.user_id.is_none() {
        builder.user_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.create_date.is_none() {
        builder.create_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn signing_certificate_correct_errors(
    mut builder: crate::types::builders::SigningCertificateBuilder,
) -> crate::types::builders::SigningCertificateBuilder {
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.certificate_id.is_none() {
        builder.certificate_id = Some(Default::default())
    }
    if builder.certificate_body.is_none() {
        builder.certificate_body = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StatusType>().ok()
    }
    builder
}

pub(crate) fn access_key_last_used_correct_errors(
    mut builder: crate::types::builders::AccessKeyLastUsedBuilder,
) -> crate::types::builders::AccessKeyLastUsedBuilder {
    if builder.last_used_date.is_none() {
        builder.last_used_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    builder
}

pub(crate) fn error_details_correct_errors(mut builder: crate::types::builders::ErrorDetailsBuilder) -> crate::types::builders::ErrorDetailsBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn server_certificate_metadata_correct_errors(
    mut builder: crate::types::builders::ServerCertificateMetadataBuilder,
) -> crate::types::builders::ServerCertificateMetadataBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.server_certificate_name.is_none() {
        builder.server_certificate_name = Some(Default::default())
    }
    if builder.server_certificate_id.is_none() {
        builder.server_certificate_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn service_specific_credential_correct_errors(
    mut builder: crate::types::builders::ServiceSpecificCredentialBuilder,
) -> crate::types::builders::ServiceSpecificCredentialBuilder {
    if builder.create_date.is_none() {
        builder.create_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.service_user_name.is_none() {
        builder.service_user_name = Some(Default::default())
    }
    if builder.service_password.is_none() {
        builder.service_password = Some(Default::default())
    }
    if builder.service_specific_credential_id.is_none() {
        builder.service_specific_credential_id = Some(Default::default())
    }
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StatusType>().ok()
    }
    builder
}

pub(crate) fn ssh_public_key_correct_errors(mut builder: crate::types::builders::SshPublicKeyBuilder) -> crate::types::builders::SshPublicKeyBuilder {
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.ssh_public_key_id.is_none() {
        builder.ssh_public_key_id = Some(Default::default())
    }
    if builder.fingerprint.is_none() {
        builder.fingerprint = Some(Default::default())
    }
    if builder.ssh_public_key_body.is_none() {
        builder.ssh_public_key_body = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StatusType>().ok()
    }
    builder
}

pub(crate) fn access_detail_correct_errors(mut builder: crate::types::builders::AccessDetailBuilder) -> crate::types::builders::AccessDetailBuilder {
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.service_namespace.is_none() {
        builder.service_namespace = Some(Default::default())
    }
    builder
}

pub(crate) fn entity_details_correct_errors(
    mut builder: crate::types::builders::EntityDetailsBuilder,
) -> crate::types::builders::EntityDetailsBuilder {
    if builder.entity_info.is_none() {
        builder.entity_info = {
            let builder = crate::types::builders::EntityInfoBuilder::default();
            crate::serde_util::entity_info_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn evaluation_result_correct_errors(
    mut builder: crate::types::builders::EvaluationResultBuilder,
) -> crate::types::builders::EvaluationResultBuilder {
    if builder.eval_action_name.is_none() {
        builder.eval_action_name = Some(Default::default())
    }
    if builder.eval_decision.is_none() {
        builder.eval_decision = "no value was set".parse::<crate::types::PolicyEvaluationDecisionType>().ok()
    }
    builder
}

pub(crate) fn mfa_device_correct_errors(mut builder: crate::types::builders::MfaDeviceBuilder) -> crate::types::builders::MfaDeviceBuilder {
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.serial_number.is_none() {
        builder.serial_number = Some(Default::default())
    }
    if builder.enable_date.is_none() {
        builder.enable_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn service_last_accessed_correct_errors(
    mut builder: crate::types::builders::ServiceLastAccessedBuilder,
) -> crate::types::builders::ServiceLastAccessedBuilder {
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.service_namespace.is_none() {
        builder.service_namespace = Some(Default::default())
    }
    builder
}

pub(crate) fn service_specific_credential_metadata_correct_errors(
    mut builder: crate::types::builders::ServiceSpecificCredentialMetadataBuilder,
) -> crate::types::builders::ServiceSpecificCredentialMetadataBuilder {
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StatusType>().ok()
    }
    if builder.service_user_name.is_none() {
        builder.service_user_name = Some(Default::default())
    }
    if builder.create_date.is_none() {
        builder.create_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.service_specific_credential_id.is_none() {
        builder.service_specific_credential_id = Some(Default::default())
    }
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    builder
}

pub(crate) fn ssh_public_key_metadata_correct_errors(
    mut builder: crate::types::builders::SshPublicKeyMetadataBuilder,
) -> crate::types::builders::SshPublicKeyMetadataBuilder {
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.ssh_public_key_id.is_none() {
        builder.ssh_public_key_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StatusType>().ok()
    }
    if builder.upload_date.is_none() {
        builder.upload_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn entity_info_correct_errors(mut builder: crate::types::builders::EntityInfoBuilder) -> crate::types::builders::EntityInfoBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::PolicyOwnerEntityType>().ok()
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn policy_granting_service_access_correct_errors(
    mut builder: crate::types::builders::PolicyGrantingServiceAccessBuilder,
) -> crate::types::builders::PolicyGrantingServiceAccessBuilder {
    if builder.policy_name.is_none() {
        builder.policy_name = Some(Default::default())
    }
    if builder.policy_type.is_none() {
        builder.policy_type = "no value was set".parse::<crate::types::PolicyType>().ok()
    }
    builder
}

pub(crate) fn resource_specific_result_correct_errors(
    mut builder: crate::types::builders::ResourceSpecificResultBuilder,
) -> crate::types::builders::ResourceSpecificResultBuilder {
    if builder.eval_resource_name.is_none() {
        builder.eval_resource_name = Some(Default::default())
    }
    if builder.eval_resource_decision.is_none() {
        builder.eval_resource_decision = "no value was set".parse::<crate::types::PolicyEvaluationDecisionType>().ok()
    }
    builder
}
