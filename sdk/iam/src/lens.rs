// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_get_account_authorization_details_output_marker(
    input: &crate::output::GetAccountAuthorizationDetailsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_group_output_marker(
    input: &crate::output::GetGroupOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_access_keys_output_marker(
    input: &crate::output::ListAccessKeysOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_account_aliases_output_marker(
    input: &crate::output::ListAccountAliasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_attached_group_policies_output_marker(
    input: &crate::output::ListAttachedGroupPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_attached_role_policies_output_marker(
    input: &crate::output::ListAttachedRolePoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_attached_user_policies_output_marker(
    input: &crate::output::ListAttachedUserPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_entities_for_policy_output_marker(
    input: &crate::output::ListEntitiesForPolicyOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_group_policies_output_marker(
    input: &crate::output::ListGroupPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_groups_output_marker(
    input: &crate::output::ListGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_groups_for_user_output_marker(
    input: &crate::output::ListGroupsForUserOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_instance_profiles_output_marker(
    input: &crate::output::ListInstanceProfilesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_instance_profiles_for_role_output_marker(
    input: &crate::output::ListInstanceProfilesForRoleOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_mfa_devices_output_marker(
    input: &crate::output::ListMfaDevicesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_policies_output_marker(
    input: &crate::output::ListPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_policy_versions_output_marker(
    input: &crate::output::ListPolicyVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_role_policies_output_marker(
    input: &crate::output::ListRolePoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_roles_output_marker(
    input: &crate::output::ListRolesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_server_certificates_output_marker(
    input: &crate::output::ListServerCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_signing_certificates_output_marker(
    input: &crate::output::ListSigningCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_ssh_public_keys_output_marker(
    input: &crate::output::ListSshPublicKeysOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_user_policies_output_marker(
    input: &crate::output::ListUserPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_users_output_marker(
    input: &crate::output::ListUsersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_user_tags_output_marker(
    input: &crate::output::ListUserTagsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_virtual_mfa_devices_output_marker(
    input: &crate::output::ListVirtualMfaDevicesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_simulate_custom_policy_output_marker(
    input: &crate::output::SimulateCustomPolicyOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_simulate_principal_policy_output_marker(
    input: &crate::output::SimulatePrincipalPolicyOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_group_output_users(
    input: crate::output::GetGroupOutput,
) -> std::option::Option<std::vec::Vec<crate::model::User>> {
    let input = match input.users {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_access_keys_output_access_key_metadata(
    input: crate::output::ListAccessKeysOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AccessKeyMetadata>> {
    let input = match input.access_key_metadata {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_account_aliases_output_account_aliases(
    input: crate::output::ListAccountAliasesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.account_aliases {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_attached_group_policies_output_attached_policies(
    input: crate::output::ListAttachedGroupPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AttachedPolicy>> {
    let input = match input.attached_policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_attached_role_policies_output_attached_policies(
    input: crate::output::ListAttachedRolePoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AttachedPolicy>> {
    let input = match input.attached_policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_attached_user_policies_output_attached_policies(
    input: crate::output::ListAttachedUserPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AttachedPolicy>> {
    let input = match input.attached_policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_group_policies_output_policy_names(
    input: crate::output::ListGroupPoliciesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.policy_names {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_groups_output_groups(
    input: crate::output::ListGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Group>> {
    let input = match input.groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_groups_for_user_output_groups(
    input: crate::output::ListGroupsForUserOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Group>> {
    let input = match input.groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_instance_profiles_output_instance_profiles(
    input: crate::output::ListInstanceProfilesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::InstanceProfile>> {
    let input = match input.instance_profiles {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_instance_profiles_for_role_output_instance_profiles(
    input: crate::output::ListInstanceProfilesForRoleOutput,
) -> std::option::Option<std::vec::Vec<crate::model::InstanceProfile>> {
    let input = match input.instance_profiles {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_mfa_devices_output_mfa_devices(
    input: crate::output::ListMfaDevicesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::MfaDevice>> {
    let input = match input.mfa_devices {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_policies_output_policies(
    input: crate::output::ListPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Policy>> {
    let input = match input.policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_policy_versions_output_versions(
    input: crate::output::ListPolicyVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PolicyVersion>> {
    let input = match input.versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_role_policies_output_policy_names(
    input: crate::output::ListRolePoliciesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.policy_names {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_roles_output_roles(
    input: crate::output::ListRolesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Role>> {
    let input = match input.roles {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_server_certificates_output_server_certificate_metadata_list(
    input: crate::output::ListServerCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ServerCertificateMetadata>> {
    let input = match input.server_certificate_metadata_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_signing_certificates_output_certificates(
    input: crate::output::ListSigningCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SigningCertificate>> {
    let input = match input.certificates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_ssh_public_keys_output_ssh_public_keys(
    input: crate::output::ListSshPublicKeysOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SshPublicKeyMetadata>> {
    let input = match input.ssh_public_keys {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_user_policies_output_policy_names(
    input: crate::output::ListUserPoliciesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.policy_names {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_users_output_users(
    input: crate::output::ListUsersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::User>> {
    let input = match input.users {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_user_tags_output_tags(
    input: crate::output::ListUserTagsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Tag>> {
    let input = match input.tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_virtual_mfa_devices_output_virtual_mfa_devices(
    input: crate::output::ListVirtualMfaDevicesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::VirtualMfaDevice>> {
    let input = match input.virtual_mfa_devices {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_simulate_custom_policy_output_evaluation_results(
    input: crate::output::SimulateCustomPolicyOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EvaluationResult>> {
    let input = match input.evaluation_results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_simulate_principal_policy_output_evaluation_results(
    input: crate::output::SimulatePrincipalPolicyOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EvaluationResult>> {
    let input = match input.evaluation_results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
