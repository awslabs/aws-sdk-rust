// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_account_authorization_details_output_marker(
    input: &crate::operation::get_account_authorization_details::GetAccountAuthorizationDetailsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_group_output_marker(input: &crate::operation::get_group::GetGroupOutput) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_access_keys_output_marker(
    input: &crate::operation::list_access_keys::ListAccessKeysOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_account_aliases_output_marker(
    input: &crate::operation::list_account_aliases::ListAccountAliasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_attached_group_policies_output_marker(
    input: &crate::operation::list_attached_group_policies::ListAttachedGroupPoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_attached_role_policies_output_marker(
    input: &crate::operation::list_attached_role_policies::ListAttachedRolePoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_attached_user_policies_output_marker(
    input: &crate::operation::list_attached_user_policies::ListAttachedUserPoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_entities_for_policy_output_marker(
    input: &crate::operation::list_entities_for_policy::ListEntitiesForPolicyOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_group_policies_output_marker(
    input: &crate::operation::list_group_policies::ListGroupPoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_groups_output_marker(
    input: &crate::operation::list_groups::ListGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_groups_for_user_output_marker(
    input: &crate::operation::list_groups_for_user::ListGroupsForUserOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_instance_profile_tags_output_marker(
    input: &crate::operation::list_instance_profile_tags::ListInstanceProfileTagsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_instance_profiles_output_marker(
    input: &crate::operation::list_instance_profiles::ListInstanceProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_instance_profiles_for_role_output_marker(
    input: &crate::operation::list_instance_profiles_for_role::ListInstanceProfilesForRoleOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_mfa_device_tags_output_marker(
    input: &crate::operation::list_mfa_device_tags::ListMfaDeviceTagsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_mfa_devices_output_marker(
    input: &crate::operation::list_mfa_devices::ListMfaDevicesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_open_id_connect_provider_tags_output_marker(
    input: &crate::operation::list_open_id_connect_provider_tags::ListOpenIdConnectProviderTagsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_policies_output_marker(
    input: &crate::operation::list_policies::ListPoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_policy_tags_output_marker(
    input: &crate::operation::list_policy_tags::ListPolicyTagsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_policy_versions_output_marker(
    input: &crate::operation::list_policy_versions::ListPolicyVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_role_policies_output_marker(
    input: &crate::operation::list_role_policies::ListRolePoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_role_tags_output_marker(
    input: &crate::operation::list_role_tags::ListRoleTagsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_roles_output_marker(
    input: &crate::operation::list_roles::ListRolesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_saml_provider_tags_output_marker(
    input: &crate::operation::list_saml_provider_tags::ListSamlProviderTagsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_server_certificate_tags_output_marker(
    input: &crate::operation::list_server_certificate_tags::ListServerCertificateTagsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_server_certificates_output_marker(
    input: &crate::operation::list_server_certificates::ListServerCertificatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_signing_certificates_output_marker(
    input: &crate::operation::list_signing_certificates::ListSigningCertificatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ssh_public_keys_output_marker(
    input: &crate::operation::list_ssh_public_keys::ListSshPublicKeysOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_user_policies_output_marker(
    input: &crate::operation::list_user_policies::ListUserPoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_user_tags_output_marker(
    input: &crate::operation::list_user_tags::ListUserTagsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_users_output_marker(
    input: &crate::operation::list_users::ListUsersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_virtual_mfa_devices_output_marker(
    input: &crate::operation::list_virtual_mfa_devices::ListVirtualMfaDevicesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_simulate_custom_policy_output_marker(
    input: &crate::operation::simulate_custom_policy::SimulateCustomPolicyOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_simulate_principal_policy_output_marker(
    input: &crate::operation::simulate_principal_policy::SimulatePrincipalPolicyOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_group_output_users(
    input: crate::operation::get_group::GetGroupOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::User>> {
    let input = input.users;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_access_keys_output_access_key_metadata(
    input: crate::operation::list_access_keys::ListAccessKeysOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AccessKeyMetadata>> {
    let input = input.access_key_metadata;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_account_aliases_output_account_aliases(
    input: crate::operation::list_account_aliases::ListAccountAliasesOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.account_aliases;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_attached_group_policies_output_attached_policies(
    input: crate::operation::list_attached_group_policies::ListAttachedGroupPoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AttachedPolicy>> {
    let input = match input.attached_policies {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_attached_role_policies_output_attached_policies(
    input: crate::operation::list_attached_role_policies::ListAttachedRolePoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AttachedPolicy>> {
    let input = match input.attached_policies {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_attached_user_policies_output_attached_policies(
    input: crate::operation::list_attached_user_policies::ListAttachedUserPoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AttachedPolicy>> {
    let input = match input.attached_policies {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_group_policies_output_policy_names(
    input: crate::operation::list_group_policies::ListGroupPoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.policy_names;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_groups_output_groups(
    input: crate::operation::list_groups::ListGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Group>> {
    let input = input.groups;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_groups_for_user_output_groups(
    input: crate::operation::list_groups_for_user::ListGroupsForUserOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Group>> {
    let input = input.groups;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_instance_profile_tags_output_tags(
    input: crate::operation::list_instance_profile_tags::ListInstanceProfileTagsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = input.tags;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_instance_profiles_output_instance_profiles(
    input: crate::operation::list_instance_profiles::ListInstanceProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::InstanceProfile>> {
    let input = input.instance_profiles;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_instance_profiles_for_role_output_instance_profiles(
    input: crate::operation::list_instance_profiles_for_role::ListInstanceProfilesForRoleOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::InstanceProfile>> {
    let input = input.instance_profiles;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_mfa_device_tags_output_tags(
    input: crate::operation::list_mfa_device_tags::ListMfaDeviceTagsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = input.tags;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_mfa_devices_output_mfa_devices(
    input: crate::operation::list_mfa_devices::ListMfaDevicesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MfaDevice>> {
    let input = input.mfa_devices;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_open_id_connect_provider_tags_output_tags(
    input: crate::operation::list_open_id_connect_provider_tags::ListOpenIdConnectProviderTagsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = input.tags;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_policies_output_policies(
    input: crate::operation::list_policies::ListPoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Policy>> {
    let input = match input.policies {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_policy_tags_output_tags(
    input: crate::operation::list_policy_tags::ListPolicyTagsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = input.tags;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_policy_versions_output_versions(
    input: crate::operation::list_policy_versions::ListPolicyVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PolicyVersion>> {
    let input = match input.versions {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_role_policies_output_policy_names(
    input: crate::operation::list_role_policies::ListRolePoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.policy_names;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_role_tags_output_tags(
    input: crate::operation::list_role_tags::ListRoleTagsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = input.tags;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_roles_output_roles(
    input: crate::operation::list_roles::ListRolesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Role>> {
    let input = input.roles;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_saml_provider_tags_output_tags(
    input: crate::operation::list_saml_provider_tags::ListSamlProviderTagsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = input.tags;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_server_certificate_tags_output_tags(
    input: crate::operation::list_server_certificate_tags::ListServerCertificateTagsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = input.tags;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_server_certificates_output_server_certificate_metadata_list(
    input: crate::operation::list_server_certificates::ListServerCertificatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServerCertificateMetadata>> {
    let input = input.server_certificate_metadata_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_signing_certificates_output_certificates(
    input: crate::operation::list_signing_certificates::ListSigningCertificatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SigningCertificate>> {
    let input = input.certificates;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ssh_public_keys_output_ssh_public_keys(
    input: crate::operation::list_ssh_public_keys::ListSshPublicKeysOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SshPublicKeyMetadata>> {
    let input = match input.ssh_public_keys {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_user_policies_output_policy_names(
    input: crate::operation::list_user_policies::ListUserPoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.policy_names;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_user_tags_output_tags(
    input: crate::operation::list_user_tags::ListUserTagsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = input.tags;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_users_output_users(
    input: crate::operation::list_users::ListUsersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::User>> {
    let input = input.users;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_virtual_mfa_devices_output_virtual_mfa_devices(
    input: crate::operation::list_virtual_mfa_devices::ListVirtualMfaDevicesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::VirtualMfaDevice>> {
    let input = input.virtual_mfa_devices;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_simulate_custom_policy_output_evaluation_results(
    input: crate::operation::simulate_custom_policy::SimulateCustomPolicyOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EvaluationResult>> {
    let input = match input.evaluation_results {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_simulate_principal_policy_output_evaluation_results(
    input: crate::operation::simulate_principal_policy::SimulatePrincipalPolicyOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EvaluationResult>> {
    let input = match input.evaluation_results {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
