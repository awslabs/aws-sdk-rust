// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The request was rejected because multiple requests to change this object were submitted simultaneously. Wait a few minutes and submit your request again.</p>
    ConcurrentModificationException(crate::types::error::ConcurrentModificationException),
    /// <p>The request was rejected because the most recent credential report has expired. To generate a new credential report, use <code>GenerateCredentialReport</code>. For more information about credential report expiration, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting credential reports</a> in the <i>IAM User Guide</i>.</p>
    CredentialReportExpiredException(crate::types::error::CredentialReportExpiredException),
    /// <p>The request was rejected because the credential report does not exist. To generate a credential report, use <code>GenerateCredentialReport</code>.</p>
    CredentialReportNotPresentException(crate::types::error::CredentialReportNotPresentException),
    /// <p>The request was rejected because the credential report is still being generated.</p>
    CredentialReportNotReadyException(crate::types::error::CredentialReportNotReadyException),
    /// <p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>
    DeleteConflictException(crate::types::error::DeleteConflictException),
    /// <p>The request was rejected because the same certificate is associated with an IAM user in the account.</p>
    DuplicateCertificateException(crate::types::error::DuplicateCertificateException),
    /// <p>The request was rejected because the SSH public key is already associated with the specified IAM user.</p>
    DuplicateSshPublicKeyException(crate::types::error::DuplicateSshPublicKeyException),
    /// <p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExistsException(crate::types::error::EntityAlreadyExistsException),
    /// <p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>
    EntityTemporarilyUnmodifiableException(
        crate::types::error::EntityTemporarilyUnmodifiableException,
    ),
    /// <p>The request was rejected because the authentication code was not recognized. The error message describes the specific error.</p>
    InvalidAuthenticationCodeException(crate::types::error::InvalidAuthenticationCodeException),
    /// <p>The request was rejected because the certificate is invalid.</p>
    InvalidCertificateException(crate::types::error::InvalidCertificateException),
    /// <p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInputException(crate::types::error::InvalidInputException),
    /// <p>The request was rejected because the public key is malformed or otherwise invalid.</p>
    InvalidPublicKeyException(crate::types::error::InvalidPublicKeyException),
    /// <p>The request was rejected because the type of user for the transaction was incorrect.</p>
    InvalidUserTypeException(crate::types::error::InvalidUserTypeException),
    /// <p>The request was rejected because the public key certificate and the private key do not match.</p>
    KeyPairMismatchException(crate::types::error::KeyPairMismatchException),
    /// <p>The request was rejected because it attempted to create resources beyond the current Amazon Web Services account limits. The error message describes the limit exceeded.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The request was rejected because the certificate was malformed or expired. The error message describes the specific error.</p>
    MalformedCertificateException(crate::types::error::MalformedCertificateException),
    /// <p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>
    MalformedPolicyDocumentException(crate::types::error::MalformedPolicyDocumentException),
    /// <p>The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.</p>
    NoSuchEntityException(crate::types::error::NoSuchEntityException),
    /// <p>The request was rejected because the provided password did not meet the requirements imposed by the account password policy.</p>
    PasswordPolicyViolationException(crate::types::error::PasswordPolicyViolationException),
    /// <p>The request failed because a provided policy could not be successfully evaluated. An additional detailed message indicates the source of the failure.</p>
    PolicyEvaluationException(crate::types::error::PolicyEvaluationException),
    /// <p>The request failed because Amazon Web Services service role policies can only be attached to the service-linked role for that service.</p>
    PolicyNotAttachableException(crate::types::error::PolicyNotAttachableException),
    /// <p>The request failed because the maximum number of concurrent requests for this account are already running.</p>
    ReportGenerationLimitExceededException(
        crate::types::error::ReportGenerationLimitExceededException,
    ),
    /// <p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailureException(crate::types::error::ServiceFailureException),
    /// <p>The specified service does not support service-specific credentials.</p>
    ServiceNotSupportedException(crate::types::error::ServiceNotSupportedException),
    /// <p>The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.</p>
    UnmodifiableEntityException(crate::types::error::UnmodifiableEntityException),
    /// <p>The request was rejected because the public key encoding format is unsupported or unrecognized.</p>
    UnrecognizedPublicKeyEncodingException(
        crate::types::error::UnrecognizedPublicKeyEncodingException,
    ),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::CredentialReportExpiredException(inner) => inner.fmt(f),
            Error::CredentialReportNotPresentException(inner) => inner.fmt(f),
            Error::CredentialReportNotReadyException(inner) => inner.fmt(f),
            Error::DeleteConflictException(inner) => inner.fmt(f),
            Error::DuplicateCertificateException(inner) => inner.fmt(f),
            Error::DuplicateSshPublicKeyException(inner) => inner.fmt(f),
            Error::EntityAlreadyExistsException(inner) => inner.fmt(f),
            Error::EntityTemporarilyUnmodifiableException(inner) => inner.fmt(f),
            Error::InvalidAuthenticationCodeException(inner) => inner.fmt(f),
            Error::InvalidCertificateException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::InvalidPublicKeyException(inner) => inner.fmt(f),
            Error::InvalidUserTypeException(inner) => inner.fmt(f),
            Error::KeyPairMismatchException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::MalformedCertificateException(inner) => inner.fmt(f),
            Error::MalformedPolicyDocumentException(inner) => inner.fmt(f),
            Error::NoSuchEntityException(inner) => inner.fmt(f),
            Error::PasswordPolicyViolationException(inner) => inner.fmt(f),
            Error::PolicyEvaluationException(inner) => inner.fmt(f),
            Error::PolicyNotAttachableException(inner) => inner.fmt(f),
            Error::ReportGenerationLimitExceededException(inner) => inner.fmt(f),
            Error::ServiceFailureException(inner) => inner.fmt(f),
            Error::ServiceNotSupportedException(inner) => inner.fmt(f),
            Error::UnmodifiableEntityException(inner) => inner.fmt(f),
            Error::UnrecognizedPublicKeyEncodingException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::add_client_id_to_open_id_connect_provider::AddClientIDToOpenIDConnectProviderError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::add_client_id_to_open_id_connect_provider::AddClientIDToOpenIDConnectProviderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::add_client_id_to_open_id_connect_provider::AddClientIDToOpenIDConnectProviderError> for Error {
    fn from(err: crate::operation::add_client_id_to_open_id_connect_provider::AddClientIDToOpenIDConnectProviderError) -> Self {
        match err {
            crate::operation::add_client_id_to_open_id_connect_provider::AddClientIDToOpenIDConnectProviderError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::add_client_id_to_open_id_connect_provider::AddClientIDToOpenIDConnectProviderError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::add_client_id_to_open_id_connect_provider::AddClientIDToOpenIDConnectProviderError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::add_client_id_to_open_id_connect_provider::AddClientIDToOpenIDConnectProviderError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::add_client_id_to_open_id_connect_provider::AddClientIDToOpenIDConnectProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::add_role_to_instance_profile::AddRoleToInstanceProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_role_to_instance_profile::AddRoleToInstanceProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_role_to_instance_profile::AddRoleToInstanceProfileError> for Error {
    fn from(
        err: crate::operation::add_role_to_instance_profile::AddRoleToInstanceProfileError,
    ) -> Self {
        match err {
            crate::operation::add_role_to_instance_profile::AddRoleToInstanceProfileError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::add_role_to_instance_profile::AddRoleToInstanceProfileError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::add_role_to_instance_profile::AddRoleToInstanceProfileError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::add_role_to_instance_profile::AddRoleToInstanceProfileError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::add_role_to_instance_profile::AddRoleToInstanceProfileError::UnmodifiableEntityException(inner) => Error::UnmodifiableEntityException(inner),
            crate::operation::add_role_to_instance_profile::AddRoleToInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::add_user_to_group::AddUserToGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_user_to_group::AddUserToGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_user_to_group::AddUserToGroupError> for Error {
    fn from(err: crate::operation::add_user_to_group::AddUserToGroupError) -> Self {
        match err {
            crate::operation::add_user_to_group::AddUserToGroupError::LimitExceededException(
                inner,
            ) => Error::LimitExceededException(inner),
            crate::operation::add_user_to_group::AddUserToGroupError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::operation::add_user_to_group::AddUserToGroupError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::add_user_to_group::AddUserToGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::attach_group_policy::AttachGroupPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::attach_group_policy::AttachGroupPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::attach_group_policy::AttachGroupPolicyError> for Error {
    fn from(err: crate::operation::attach_group_policy::AttachGroupPolicyError) -> Self {
        match err {
            crate::operation::attach_group_policy::AttachGroupPolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::attach_group_policy::AttachGroupPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::attach_group_policy::AttachGroupPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::attach_group_policy::AttachGroupPolicyError::PolicyNotAttachableException(inner) => Error::PolicyNotAttachableException(inner),
            crate::operation::attach_group_policy::AttachGroupPolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::attach_group_policy::AttachGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::attach_role_policy::AttachRolePolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::attach_role_policy::AttachRolePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::attach_role_policy::AttachRolePolicyError> for Error {
    fn from(err: crate::operation::attach_role_policy::AttachRolePolicyError) -> Self {
        match err {
            crate::operation::attach_role_policy::AttachRolePolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::attach_role_policy::AttachRolePolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::attach_role_policy::AttachRolePolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::attach_role_policy::AttachRolePolicyError::PolicyNotAttachableException(inner) => Error::PolicyNotAttachableException(inner),
            crate::operation::attach_role_policy::AttachRolePolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::attach_role_policy::AttachRolePolicyError::UnmodifiableEntityException(inner) => Error::UnmodifiableEntityException(inner),
            crate::operation::attach_role_policy::AttachRolePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::attach_user_policy::AttachUserPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::attach_user_policy::AttachUserPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::attach_user_policy::AttachUserPolicyError> for Error {
    fn from(err: crate::operation::attach_user_policy::AttachUserPolicyError) -> Self {
        match err {
            crate::operation::attach_user_policy::AttachUserPolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::attach_user_policy::AttachUserPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::attach_user_policy::AttachUserPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::attach_user_policy::AttachUserPolicyError::PolicyNotAttachableException(inner) => Error::PolicyNotAttachableException(inner),
            crate::operation::attach_user_policy::AttachUserPolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::attach_user_policy::AttachUserPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::change_password::ChangePasswordError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::change_password::ChangePasswordError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::change_password::ChangePasswordError> for Error {
    fn from(err: crate::operation::change_password::ChangePasswordError) -> Self {
        match err {
            crate::operation::change_password::ChangePasswordError::EntityTemporarilyUnmodifiableException(inner) => Error::EntityTemporarilyUnmodifiableException(inner),
            crate::operation::change_password::ChangePasswordError::InvalidUserTypeException(inner) => Error::InvalidUserTypeException(inner),
            crate::operation::change_password::ChangePasswordError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::change_password::ChangePasswordError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::change_password::ChangePasswordError::PasswordPolicyViolationException(inner) => Error::PasswordPolicyViolationException(inner),
            crate::operation::change_password::ChangePasswordError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::change_password::ChangePasswordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_access_key::CreateAccessKeyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_access_key::CreateAccessKeyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_access_key::CreateAccessKeyError> for Error {
    fn from(err: crate::operation::create_access_key::CreateAccessKeyError) -> Self {
        match err {
            crate::operation::create_access_key::CreateAccessKeyError::LimitExceededException(
                inner,
            ) => Error::LimitExceededException(inner),
            crate::operation::create_access_key::CreateAccessKeyError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::operation::create_access_key::CreateAccessKeyError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::create_access_key::CreateAccessKeyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_account_alias::CreateAccountAliasError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_account_alias::CreateAccountAliasError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_account_alias::CreateAccountAliasError> for Error {
    fn from(err: crate::operation::create_account_alias::CreateAccountAliasError) -> Self {
        match err {
            crate::operation::create_account_alias::CreateAccountAliasError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::create_account_alias::CreateAccountAliasError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_account_alias::CreateAccountAliasError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_account_alias::CreateAccountAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_group::CreateGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_group::CreateGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_group::CreateGroupError> for Error {
    fn from(err: crate::operation::create_group::CreateGroupError) -> Self {
        match err {
            crate::operation::create_group::CreateGroupError::EntityAlreadyExistsException(
                inner,
            ) => Error::EntityAlreadyExistsException(inner),
            crate::operation::create_group::CreateGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_group::CreateGroupError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::create_group::CreateGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::create_group::CreateGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_instance_profile::CreateInstanceProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_instance_profile::CreateInstanceProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_instance_profile::CreateInstanceProfileError> for Error {
    fn from(err: crate::operation::create_instance_profile::CreateInstanceProfileError) -> Self {
        match err {
            crate::operation::create_instance_profile::CreateInstanceProfileError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::create_instance_profile::CreateInstanceProfileError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::create_instance_profile::CreateInstanceProfileError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_instance_profile::CreateInstanceProfileError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_instance_profile::CreateInstanceProfileError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_instance_profile::CreateInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_login_profile::CreateLoginProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_login_profile::CreateLoginProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_login_profile::CreateLoginProfileError> for Error {
    fn from(err: crate::operation::create_login_profile::CreateLoginProfileError) -> Self {
        match err {
            crate::operation::create_login_profile::CreateLoginProfileError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::create_login_profile::CreateLoginProfileError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_login_profile::CreateLoginProfileError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::create_login_profile::CreateLoginProfileError::PasswordPolicyViolationException(inner) => Error::PasswordPolicyViolationException(inner),
            crate::operation::create_login_profile::CreateLoginProfileError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_login_profile::CreateLoginProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_open_id_connect_provider::CreateOpenIDConnectProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_open_id_connect_provider::CreateOpenIDConnectProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_open_id_connect_provider::CreateOpenIDConnectProviderError>
    for Error
{
    fn from(
        err: crate::operation::create_open_id_connect_provider::CreateOpenIDConnectProviderError,
    ) -> Self {
        match err {
            crate::operation::create_open_id_connect_provider::CreateOpenIDConnectProviderError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::create_open_id_connect_provider::CreateOpenIDConnectProviderError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::create_open_id_connect_provider::CreateOpenIDConnectProviderError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_open_id_connect_provider::CreateOpenIDConnectProviderError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_open_id_connect_provider::CreateOpenIDConnectProviderError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_open_id_connect_provider::CreateOpenIDConnectProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_policy::CreatePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_policy::CreatePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_policy::CreatePolicyError> for Error {
    fn from(err: crate::operation::create_policy::CreatePolicyError) -> Self {
        match err {
            crate::operation::create_policy::CreatePolicyError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::create_policy::CreatePolicyError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::create_policy::CreatePolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_policy::CreatePolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_policy::CreatePolicyError::MalformedPolicyDocumentException(inner) => Error::MalformedPolicyDocumentException(inner),
            crate::operation::create_policy::CreatePolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_policy::CreatePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_policy_version::CreatePolicyVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_policy_version::CreatePolicyVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_policy_version::CreatePolicyVersionError> for Error {
    fn from(err: crate::operation::create_policy_version::CreatePolicyVersionError) -> Self {
        match err {
            crate::operation::create_policy_version::CreatePolicyVersionError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_policy_version::CreatePolicyVersionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_policy_version::CreatePolicyVersionError::MalformedPolicyDocumentException(inner) => Error::MalformedPolicyDocumentException(inner),
            crate::operation::create_policy_version::CreatePolicyVersionError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::create_policy_version::CreatePolicyVersionError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_policy_version::CreatePolicyVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_role::CreateRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_role::CreateRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_role::CreateRoleError> for Error {
    fn from(err: crate::operation::create_role::CreateRoleError) -> Self {
        match err {
            crate::operation::create_role::CreateRoleError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::create_role::CreateRoleError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::operation::create_role::CreateRoleError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::create_role::CreateRoleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_role::CreateRoleError::MalformedPolicyDocumentException(
                inner,
            ) => Error::MalformedPolicyDocumentException(inner),
            crate::operation::create_role::CreateRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::create_role::CreateRoleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_saml_provider::CreateSAMLProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_saml_provider::CreateSAMLProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_saml_provider::CreateSAMLProviderError> for Error {
    fn from(err: crate::operation::create_saml_provider::CreateSAMLProviderError) -> Self {
        match err {
            crate::operation::create_saml_provider::CreateSAMLProviderError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::create_saml_provider::CreateSAMLProviderError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::create_saml_provider::CreateSAMLProviderError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_saml_provider::CreateSAMLProviderError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_saml_provider::CreateSAMLProviderError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_saml_provider::CreateSAMLProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_service_linked_role::CreateServiceLinkedRoleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_service_linked_role::CreateServiceLinkedRoleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_service_linked_role::CreateServiceLinkedRoleError> for Error {
    fn from(
        err: crate::operation::create_service_linked_role::CreateServiceLinkedRoleError,
    ) -> Self {
        match err {
            crate::operation::create_service_linked_role::CreateServiceLinkedRoleError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_service_linked_role::CreateServiceLinkedRoleError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_service_linked_role::CreateServiceLinkedRoleError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::create_service_linked_role::CreateServiceLinkedRoleError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_service_linked_role::CreateServiceLinkedRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialError>
    for Error
{
    fn from(
        err: crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialError,
    ) -> Self {
        match err {
            crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialError::ServiceNotSupportedException(inner) => Error::ServiceNotSupportedException(inner),
            crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_user::CreateUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_user::CreateUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_user::CreateUserError> for Error {
    fn from(err: crate::operation::create_user::CreateUserError) -> Self {
        match err {
            crate::operation::create_user::CreateUserError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::create_user::CreateUserError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::operation::create_user::CreateUserError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::create_user::CreateUserError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_user::CreateUserError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::create_user::CreateUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::create_user::CreateUserError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_virtual_mfa_device::CreateVirtualMFADeviceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_virtual_mfa_device::CreateVirtualMFADeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_virtual_mfa_device::CreateVirtualMFADeviceError> for Error {
    fn from(err: crate::operation::create_virtual_mfa_device::CreateVirtualMFADeviceError) -> Self {
        match err {
            crate::operation::create_virtual_mfa_device::CreateVirtualMFADeviceError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::create_virtual_mfa_device::CreateVirtualMFADeviceError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::create_virtual_mfa_device::CreateVirtualMFADeviceError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_virtual_mfa_device::CreateVirtualMFADeviceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_virtual_mfa_device::CreateVirtualMFADeviceError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_virtual_mfa_device::CreateVirtualMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::deactivate_mfa_device::DeactivateMFADeviceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::deactivate_mfa_device::DeactivateMFADeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deactivate_mfa_device::DeactivateMFADeviceError> for Error {
    fn from(err: crate::operation::deactivate_mfa_device::DeactivateMFADeviceError) -> Self {
        match err {
            crate::operation::deactivate_mfa_device::DeactivateMFADeviceError::EntityTemporarilyUnmodifiableException(inner) => Error::EntityTemporarilyUnmodifiableException(inner),
            crate::operation::deactivate_mfa_device::DeactivateMFADeviceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::deactivate_mfa_device::DeactivateMFADeviceError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::deactivate_mfa_device::DeactivateMFADeviceError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::deactivate_mfa_device::DeactivateMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_access_key::DeleteAccessKeyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_access_key::DeleteAccessKeyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_access_key::DeleteAccessKeyError> for Error {
    fn from(err: crate::operation::delete_access_key::DeleteAccessKeyError) -> Self {
        match err {
            crate::operation::delete_access_key::DeleteAccessKeyError::LimitExceededException(
                inner,
            ) => Error::LimitExceededException(inner),
            crate::operation::delete_access_key::DeleteAccessKeyError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::operation::delete_access_key::DeleteAccessKeyError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::delete_access_key::DeleteAccessKeyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_account_alias::DeleteAccountAliasError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_account_alias::DeleteAccountAliasError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_account_alias::DeleteAccountAliasError> for Error {
    fn from(err: crate::operation::delete_account_alias::DeleteAccountAliasError) -> Self {
        match err {
            crate::operation::delete_account_alias::DeleteAccountAliasError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_account_alias::DeleteAccountAliasError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_account_alias::DeleteAccountAliasError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_account_alias::DeleteAccountAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_account_password_policy::DeleteAccountPasswordPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_account_password_policy::DeleteAccountPasswordPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_account_password_policy::DeleteAccountPasswordPolicyError>
    for Error
{
    fn from(
        err: crate::operation::delete_account_password_policy::DeleteAccountPasswordPolicyError,
    ) -> Self {
        match err {
            crate::operation::delete_account_password_policy::DeleteAccountPasswordPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_account_password_policy::DeleteAccountPasswordPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_account_password_policy::DeleteAccountPasswordPolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_account_password_policy::DeleteAccountPasswordPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_group::DeleteGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_group::DeleteGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_group::DeleteGroupError> for Error {
    fn from(err: crate::operation::delete_group::DeleteGroupError) -> Self {
        match err {
            crate::operation::delete_group::DeleteGroupError::DeleteConflictException(inner) => {
                Error::DeleteConflictException(inner)
            }
            crate::operation::delete_group::DeleteGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::delete_group::DeleteGroupError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::delete_group::DeleteGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::delete_group::DeleteGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_group_policy::DeleteGroupPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_group_policy::DeleteGroupPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_group_policy::DeleteGroupPolicyError> for Error {
    fn from(err: crate::operation::delete_group_policy::DeleteGroupPolicyError) -> Self {
        match err {
            crate::operation::delete_group_policy::DeleteGroupPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_group_policy::DeleteGroupPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_group_policy::DeleteGroupPolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_group_policy::DeleteGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_instance_profile::DeleteInstanceProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_instance_profile::DeleteInstanceProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_instance_profile::DeleteInstanceProfileError> for Error {
    fn from(err: crate::operation::delete_instance_profile::DeleteInstanceProfileError) -> Self {
        match err {
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::DeleteConflictException(inner) => Error::DeleteConflictException(inner),
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_instance_profile::DeleteInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_login_profile::DeleteLoginProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_login_profile::DeleteLoginProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_login_profile::DeleteLoginProfileError> for Error {
    fn from(err: crate::operation::delete_login_profile::DeleteLoginProfileError) -> Self {
        match err {
            crate::operation::delete_login_profile::DeleteLoginProfileError::EntityTemporarilyUnmodifiableException(inner) => Error::EntityTemporarilyUnmodifiableException(inner),
            crate::operation::delete_login_profile::DeleteLoginProfileError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_login_profile::DeleteLoginProfileError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_login_profile::DeleteLoginProfileError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_login_profile::DeleteLoginProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_open_id_connect_provider::DeleteOpenIDConnectProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_open_id_connect_provider::DeleteOpenIDConnectProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_open_id_connect_provider::DeleteOpenIDConnectProviderError>
    for Error
{
    fn from(
        err: crate::operation::delete_open_id_connect_provider::DeleteOpenIDConnectProviderError,
    ) -> Self {
        match err {
            crate::operation::delete_open_id_connect_provider::DeleteOpenIDConnectProviderError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_open_id_connect_provider::DeleteOpenIDConnectProviderError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_open_id_connect_provider::DeleteOpenIDConnectProviderError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_open_id_connect_provider::DeleteOpenIDConnectProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_policy::DeletePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_policy::DeletePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_policy::DeletePolicyError> for Error {
    fn from(err: crate::operation::delete_policy::DeletePolicyError) -> Self {
        match err {
            crate::operation::delete_policy::DeletePolicyError::DeleteConflictException(inner) => {
                Error::DeleteConflictException(inner)
            }
            crate::operation::delete_policy::DeletePolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::delete_policy::DeletePolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::delete_policy::DeletePolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::delete_policy::DeletePolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::delete_policy::DeletePolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_policy_version::DeletePolicyVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_policy_version::DeletePolicyVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_policy_version::DeletePolicyVersionError> for Error {
    fn from(err: crate::operation::delete_policy_version::DeletePolicyVersionError) -> Self {
        match err {
            crate::operation::delete_policy_version::DeletePolicyVersionError::DeleteConflictException(inner) => Error::DeleteConflictException(inner),
            crate::operation::delete_policy_version::DeletePolicyVersionError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_policy_version::DeletePolicyVersionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_policy_version::DeletePolicyVersionError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_policy_version::DeletePolicyVersionError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_policy_version::DeletePolicyVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_role::DeleteRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_role::DeleteRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_role::DeleteRoleError> for Error {
    fn from(err: crate::operation::delete_role::DeleteRoleError) -> Self {
        match err {
            crate::operation::delete_role::DeleteRoleError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_role::DeleteRoleError::DeleteConflictException(inner) => {
                Error::DeleteConflictException(inner)
            }
            crate::operation::delete_role::DeleteRoleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::delete_role::DeleteRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::delete_role::DeleteRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::delete_role::DeleteRoleError::UnmodifiableEntityException(inner) => {
                Error::UnmodifiableEntityException(inner)
            }
            crate::operation::delete_role::DeleteRoleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_role_permissions_boundary::DeleteRolePermissionsBoundaryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_role_permissions_boundary::DeleteRolePermissionsBoundaryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_role_permissions_boundary::DeleteRolePermissionsBoundaryError>
    for Error
{
    fn from(
        err: crate::operation::delete_role_permissions_boundary::DeleteRolePermissionsBoundaryError,
    ) -> Self {
        match err {
            crate::operation::delete_role_permissions_boundary::DeleteRolePermissionsBoundaryError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_role_permissions_boundary::DeleteRolePermissionsBoundaryError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_role_permissions_boundary::DeleteRolePermissionsBoundaryError::UnmodifiableEntityException(inner) => Error::UnmodifiableEntityException(inner),
            crate::operation::delete_role_permissions_boundary::DeleteRolePermissionsBoundaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_role_policy::DeleteRolePolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_role_policy::DeleteRolePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_role_policy::DeleteRolePolicyError> for Error {
    fn from(err: crate::operation::delete_role_policy::DeleteRolePolicyError) -> Self {
        match err {
            crate::operation::delete_role_policy::DeleteRolePolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_role_policy::DeleteRolePolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_role_policy::DeleteRolePolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_role_policy::DeleteRolePolicyError::UnmodifiableEntityException(inner) => Error::UnmodifiableEntityException(inner),
            crate::operation::delete_role_policy::DeleteRolePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_saml_provider::DeleteSAMLProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_saml_provider::DeleteSAMLProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_saml_provider::DeleteSAMLProviderError> for Error {
    fn from(err: crate::operation::delete_saml_provider::DeleteSAMLProviderError) -> Self {
        match err {
            crate::operation::delete_saml_provider::DeleteSAMLProviderError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_saml_provider::DeleteSAMLProviderError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_saml_provider::DeleteSAMLProviderError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_saml_provider::DeleteSAMLProviderError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_saml_provider::DeleteSAMLProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_server_certificate::DeleteServerCertificateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_server_certificate::DeleteServerCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_server_certificate::DeleteServerCertificateError> for Error {
    fn from(
        err: crate::operation::delete_server_certificate::DeleteServerCertificateError,
    ) -> Self {
        match err {
            crate::operation::delete_server_certificate::DeleteServerCertificateError::DeleteConflictException(inner) => Error::DeleteConflictException(inner),
            crate::operation::delete_server_certificate::DeleteServerCertificateError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_server_certificate::DeleteServerCertificateError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_server_certificate::DeleteServerCertificateError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_server_certificate::DeleteServerCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_service_linked_role::DeleteServiceLinkedRoleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_service_linked_role::DeleteServiceLinkedRoleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_service_linked_role::DeleteServiceLinkedRoleError> for Error {
    fn from(
        err: crate::operation::delete_service_linked_role::DeleteServiceLinkedRoleError,
    ) -> Self {
        match err {
            crate::operation::delete_service_linked_role::DeleteServiceLinkedRoleError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_service_linked_role::DeleteServiceLinkedRoleError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_service_linked_role::DeleteServiceLinkedRoleError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_service_linked_role::DeleteServiceLinkedRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_service_specific_credential::DeleteServiceSpecificCredentialError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_service_specific_credential::DeleteServiceSpecificCredentialError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::delete_service_specific_credential::DeleteServiceSpecificCredentialError>
    for Error
{
    fn from(
        err: crate::operation::delete_service_specific_credential::DeleteServiceSpecificCredentialError,
    ) -> Self {
        match err {
            crate::operation::delete_service_specific_credential::DeleteServiceSpecificCredentialError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_service_specific_credential::DeleteServiceSpecificCredentialError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_signing_certificate::DeleteSigningCertificateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_signing_certificate::DeleteSigningCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_signing_certificate::DeleteSigningCertificateError> for Error {
    fn from(
        err: crate::operation::delete_signing_certificate::DeleteSigningCertificateError,
    ) -> Self {
        match err {
            crate::operation::delete_signing_certificate::DeleteSigningCertificateError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_signing_certificate::DeleteSigningCertificateError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_signing_certificate::DeleteSigningCertificateError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_signing_certificate::DeleteSigningCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_ssh_public_key::DeleteSSHPublicKeyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_ssh_public_key::DeleteSSHPublicKeyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_ssh_public_key::DeleteSSHPublicKeyError> for Error {
    fn from(err: crate::operation::delete_ssh_public_key::DeleteSSHPublicKeyError) -> Self {
        match err {
            crate::operation::delete_ssh_public_key::DeleteSSHPublicKeyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_ssh_public_key::DeleteSSHPublicKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_user::DeleteUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_user::DeleteUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_user::DeleteUserError> for Error {
    fn from(err: crate::operation::delete_user::DeleteUserError) -> Self {
        match err {
            crate::operation::delete_user::DeleteUserError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_user::DeleteUserError::DeleteConflictException(inner) => {
                Error::DeleteConflictException(inner)
            }
            crate::operation::delete_user::DeleteUserError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::delete_user::DeleteUserError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::delete_user::DeleteUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::delete_user::DeleteUserError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_user_permissions_boundary::DeleteUserPermissionsBoundaryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_user_permissions_boundary::DeleteUserPermissionsBoundaryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_user_permissions_boundary::DeleteUserPermissionsBoundaryError>
    for Error
{
    fn from(
        err: crate::operation::delete_user_permissions_boundary::DeleteUserPermissionsBoundaryError,
    ) -> Self {
        match err {
            crate::operation::delete_user_permissions_boundary::DeleteUserPermissionsBoundaryError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_user_permissions_boundary::DeleteUserPermissionsBoundaryError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_user_permissions_boundary::DeleteUserPermissionsBoundaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_user_policy::DeleteUserPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_user_policy::DeleteUserPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_user_policy::DeleteUserPolicyError> for Error {
    fn from(err: crate::operation::delete_user_policy::DeleteUserPolicyError) -> Self {
        match err {
            crate::operation::delete_user_policy::DeleteUserPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_user_policy::DeleteUserPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_user_policy::DeleteUserPolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_user_policy::DeleteUserPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_virtual_mfa_device::DeleteVirtualMFADeviceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_virtual_mfa_device::DeleteVirtualMFADeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_virtual_mfa_device::DeleteVirtualMFADeviceError> for Error {
    fn from(err: crate::operation::delete_virtual_mfa_device::DeleteVirtualMFADeviceError) -> Self {
        match err {
            crate::operation::delete_virtual_mfa_device::DeleteVirtualMFADeviceError::DeleteConflictException(inner) => Error::DeleteConflictException(inner),
            crate::operation::delete_virtual_mfa_device::DeleteVirtualMFADeviceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_virtual_mfa_device::DeleteVirtualMFADeviceError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::delete_virtual_mfa_device::DeleteVirtualMFADeviceError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_virtual_mfa_device::DeleteVirtualMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::detach_group_policy::DetachGroupPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::detach_group_policy::DetachGroupPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detach_group_policy::DetachGroupPolicyError> for Error {
    fn from(err: crate::operation::detach_group_policy::DetachGroupPolicyError) -> Self {
        match err {
            crate::operation::detach_group_policy::DetachGroupPolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::detach_group_policy::DetachGroupPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::detach_group_policy::DetachGroupPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::detach_group_policy::DetachGroupPolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::detach_group_policy::DetachGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::detach_role_policy::DetachRolePolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::detach_role_policy::DetachRolePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detach_role_policy::DetachRolePolicyError> for Error {
    fn from(err: crate::operation::detach_role_policy::DetachRolePolicyError) -> Self {
        match err {
            crate::operation::detach_role_policy::DetachRolePolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::detach_role_policy::DetachRolePolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::detach_role_policy::DetachRolePolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::detach_role_policy::DetachRolePolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::detach_role_policy::DetachRolePolicyError::UnmodifiableEntityException(inner) => Error::UnmodifiableEntityException(inner),
            crate::operation::detach_role_policy::DetachRolePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::detach_user_policy::DetachUserPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::detach_user_policy::DetachUserPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detach_user_policy::DetachUserPolicyError> for Error {
    fn from(err: crate::operation::detach_user_policy::DetachUserPolicyError) -> Self {
        match err {
            crate::operation::detach_user_policy::DetachUserPolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::detach_user_policy::DetachUserPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::detach_user_policy::DetachUserPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::detach_user_policy::DetachUserPolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::detach_user_policy::DetachUserPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::enable_mfa_device::EnableMFADeviceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::enable_mfa_device::EnableMFADeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::enable_mfa_device::EnableMFADeviceError> for Error {
    fn from(err: crate::operation::enable_mfa_device::EnableMFADeviceError) -> Self {
        match err {
            crate::operation::enable_mfa_device::EnableMFADeviceError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::enable_mfa_device::EnableMFADeviceError::EntityTemporarilyUnmodifiableException(inner) => Error::EntityTemporarilyUnmodifiableException(inner),
            crate::operation::enable_mfa_device::EnableMFADeviceError::InvalidAuthenticationCodeException(inner) => Error::InvalidAuthenticationCodeException(inner),
            crate::operation::enable_mfa_device::EnableMFADeviceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::enable_mfa_device::EnableMFADeviceError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::enable_mfa_device::EnableMFADeviceError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::enable_mfa_device::EnableMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::generate_credential_report::GenerateCredentialReportError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::generate_credential_report::GenerateCredentialReportError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::generate_credential_report::GenerateCredentialReportError> for Error {
    fn from(
        err: crate::operation::generate_credential_report::GenerateCredentialReportError,
    ) -> Self {
        match err {
            crate::operation::generate_credential_report::GenerateCredentialReportError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::generate_credential_report::GenerateCredentialReportError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::generate_credential_report::GenerateCredentialReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::generate_organizations_access_report::GenerateOrganizationsAccessReportError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::generate_organizations_access_report::GenerateOrganizationsAccessReportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::generate_organizations_access_report::GenerateOrganizationsAccessReportError> for Error {
    fn from(err: crate::operation::generate_organizations_access_report::GenerateOrganizationsAccessReportError) -> Self {
        match err {
            crate::operation::generate_organizations_access_report::GenerateOrganizationsAccessReportError::ReportGenerationLimitExceededException(inner) => Error::ReportGenerationLimitExceededException(inner),
            crate::operation::generate_organizations_access_report::GenerateOrganizationsAccessReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::generate_service_last_accessed_details::GenerateServiceLastAccessedDetailsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::generate_service_last_accessed_details::GenerateServiceLastAccessedDetailsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::generate_service_last_accessed_details::GenerateServiceLastAccessedDetailsError> for Error {
    fn from(err: crate::operation::generate_service_last_accessed_details::GenerateServiceLastAccessedDetailsError) -> Self {
        match err {
            crate::operation::generate_service_last_accessed_details::GenerateServiceLastAccessedDetailsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::generate_service_last_accessed_details::GenerateServiceLastAccessedDetailsError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::generate_service_last_accessed_details::GenerateServiceLastAccessedDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_access_key_last_used::GetAccessKeyLastUsedError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_access_key_last_used::GetAccessKeyLastUsedError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_access_key_last_used::GetAccessKeyLastUsedError> for Error {
    fn from(err: crate::operation::get_access_key_last_used::GetAccessKeyLastUsedError) -> Self {
        match err {
            crate::operation::get_access_key_last_used::GetAccessKeyLastUsedError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::get_access_key_last_used::GetAccessKeyLastUsedError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_account_authorization_details::GetAccountAuthorizationDetailsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_account_authorization_details::GetAccountAuthorizationDetailsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_account_authorization_details::GetAccountAuthorizationDetailsError>
    for Error
{
    fn from(
        err: crate::operation::get_account_authorization_details::GetAccountAuthorizationDetailsError,
    ) -> Self {
        match err {
            crate::operation::get_account_authorization_details::GetAccountAuthorizationDetailsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_account_authorization_details::GetAccountAuthorizationDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_account_password_policy::GetAccountPasswordPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_account_password_policy::GetAccountPasswordPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_account_password_policy::GetAccountPasswordPolicyError> for Error {
    fn from(
        err: crate::operation::get_account_password_policy::GetAccountPasswordPolicyError,
    ) -> Self {
        match err {
            crate::operation::get_account_password_policy::GetAccountPasswordPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::get_account_password_policy::GetAccountPasswordPolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_account_password_policy::GetAccountPasswordPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_account_summary::GetAccountSummaryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_account_summary::GetAccountSummaryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_account_summary::GetAccountSummaryError> for Error {
    fn from(err: crate::operation::get_account_summary::GetAccountSummaryError) -> Self {
        match err {
            crate::operation::get_account_summary::GetAccountSummaryError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_account_summary::GetAccountSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_context_keys_for_custom_policy::GetContextKeysForCustomPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_context_keys_for_custom_policy::GetContextKeysForCustomPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_context_keys_for_custom_policy::GetContextKeysForCustomPolicyError>
    for Error
{
    fn from(
        err: crate::operation::get_context_keys_for_custom_policy::GetContextKeysForCustomPolicyError,
    ) -> Self {
        match err {
            crate::operation::get_context_keys_for_custom_policy::GetContextKeysForCustomPolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_context_keys_for_custom_policy::GetContextKeysForCustomPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_context_keys_for_principal_policy::GetContextKeysForPrincipalPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_context_keys_for_principal_policy::GetContextKeysForPrincipalPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_context_keys_for_principal_policy::GetContextKeysForPrincipalPolicyError> for Error {
    fn from(err: crate::operation::get_context_keys_for_principal_policy::GetContextKeysForPrincipalPolicyError) -> Self {
        match err {
            crate::operation::get_context_keys_for_principal_policy::GetContextKeysForPrincipalPolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_context_keys_for_principal_policy::GetContextKeysForPrincipalPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::get_context_keys_for_principal_policy::GetContextKeysForPrincipalPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_credential_report::GetCredentialReportError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_credential_report::GetCredentialReportError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_credential_report::GetCredentialReportError> for Error {
    fn from(err: crate::operation::get_credential_report::GetCredentialReportError) -> Self {
        match err {
            crate::operation::get_credential_report::GetCredentialReportError::CredentialReportExpiredException(inner) => Error::CredentialReportExpiredException(inner),
            crate::operation::get_credential_report::GetCredentialReportError::CredentialReportNotPresentException(inner) => Error::CredentialReportNotPresentException(inner),
            crate::operation::get_credential_report::GetCredentialReportError::CredentialReportNotReadyException(inner) => Error::CredentialReportNotReadyException(inner),
            crate::operation::get_credential_report::GetCredentialReportError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_credential_report::GetCredentialReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_group::GetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_group::GetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_group::GetGroupError> for Error {
    fn from(err: crate::operation::get_group::GetGroupError) -> Self {
        match err {
            crate::operation::get_group::GetGroupError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::get_group::GetGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::get_group::GetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_group_policy::GetGroupPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_group_policy::GetGroupPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_group_policy::GetGroupPolicyError> for Error {
    fn from(err: crate::operation::get_group_policy::GetGroupPolicyError) -> Self {
        match err {
            crate::operation::get_group_policy::GetGroupPolicyError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::operation::get_group_policy::GetGroupPolicyError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::get_group_policy::GetGroupPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_instance_profile::GetInstanceProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_instance_profile::GetInstanceProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_instance_profile::GetInstanceProfileError> for Error {
    fn from(err: crate::operation::get_instance_profile::GetInstanceProfileError) -> Self {
        match err {
            crate::operation::get_instance_profile::GetInstanceProfileError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::get_instance_profile::GetInstanceProfileError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_instance_profile::GetInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_login_profile::GetLoginProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_login_profile::GetLoginProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_login_profile::GetLoginProfileError> for Error {
    fn from(err: crate::operation::get_login_profile::GetLoginProfileError) -> Self {
        match err {
            crate::operation::get_login_profile::GetLoginProfileError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::operation::get_login_profile::GetLoginProfileError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::get_login_profile::GetLoginProfileError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_open_id_connect_provider::GetOpenIDConnectProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_open_id_connect_provider::GetOpenIDConnectProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_open_id_connect_provider::GetOpenIDConnectProviderError> for Error {
    fn from(
        err: crate::operation::get_open_id_connect_provider::GetOpenIDConnectProviderError,
    ) -> Self {
        match err {
            crate::operation::get_open_id_connect_provider::GetOpenIDConnectProviderError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_open_id_connect_provider::GetOpenIDConnectProviderError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::get_open_id_connect_provider::GetOpenIDConnectProviderError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_open_id_connect_provider::GetOpenIDConnectProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_organizations_access_report::GetOrganizationsAccessReportError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_organizations_access_report::GetOrganizationsAccessReportError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_organizations_access_report::GetOrganizationsAccessReportError>
    for Error
{
    fn from(
        err: crate::operation::get_organizations_access_report::GetOrganizationsAccessReportError,
    ) -> Self {
        match err {
            crate::operation::get_organizations_access_report::GetOrganizationsAccessReportError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::get_organizations_access_report::GetOrganizationsAccessReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_policy::GetPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_policy::GetPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_policy::GetPolicyError> for Error {
    fn from(err: crate::operation::get_policy::GetPolicyError) -> Self {
        match err {
            crate::operation::get_policy::GetPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::get_policy::GetPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::get_policy::GetPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::get_policy::GetPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_policy_version::GetPolicyVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_policy_version::GetPolicyVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_policy_version::GetPolicyVersionError> for Error {
    fn from(err: crate::operation::get_policy_version::GetPolicyVersionError) -> Self {
        match err {
            crate::operation::get_policy_version::GetPolicyVersionError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_policy_version::GetPolicyVersionError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::get_policy_version::GetPolicyVersionError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_policy_version::GetPolicyVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_role::GetRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_role::GetRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_role::GetRoleError> for Error {
    fn from(err: crate::operation::get_role::GetRoleError) -> Self {
        match err {
            crate::operation::get_role::GetRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::get_role::GetRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::get_role::GetRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::get_role_policy::GetRolePolicyError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_role_policy::GetRolePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_role_policy::GetRolePolicyError> for Error {
    fn from(err: crate::operation::get_role_policy::GetRolePolicyError) -> Self {
        match err {
            crate::operation::get_role_policy::GetRolePolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::get_role_policy::GetRolePolicyError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::get_role_policy::GetRolePolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_saml_provider::GetSAMLProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_saml_provider::GetSAMLProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_saml_provider::GetSAMLProviderError> for Error {
    fn from(err: crate::operation::get_saml_provider::GetSAMLProviderError) -> Self {
        match err {
            crate::operation::get_saml_provider::GetSAMLProviderError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::operation::get_saml_provider::GetSAMLProviderError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::operation::get_saml_provider::GetSAMLProviderError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::get_saml_provider::GetSAMLProviderError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_server_certificate::GetServerCertificateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_server_certificate::GetServerCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_server_certificate::GetServerCertificateError> for Error {
    fn from(err: crate::operation::get_server_certificate::GetServerCertificateError) -> Self {
        match err {
            crate::operation::get_server_certificate::GetServerCertificateError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::get_server_certificate::GetServerCertificateError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_server_certificate::GetServerCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_service_last_accessed_details::GetServiceLastAccessedDetailsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_service_last_accessed_details::GetServiceLastAccessedDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_service_last_accessed_details::GetServiceLastAccessedDetailsError>
    for Error
{
    fn from(
        err: crate::operation::get_service_last_accessed_details::GetServiceLastAccessedDetailsError,
    ) -> Self {
        match err {
            crate::operation::get_service_last_accessed_details::GetServiceLastAccessedDetailsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_service_last_accessed_details::GetServiceLastAccessedDetailsError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::get_service_last_accessed_details::GetServiceLastAccessedDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_service_last_accessed_details_with_entities::GetServiceLastAccessedDetailsWithEntitiesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_service_last_accessed_details_with_entities::GetServiceLastAccessedDetailsWithEntitiesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_service_last_accessed_details_with_entities::GetServiceLastAccessedDetailsWithEntitiesError> for Error {
    fn from(err: crate::operation::get_service_last_accessed_details_with_entities::GetServiceLastAccessedDetailsWithEntitiesError) -> Self {
        match err {
            crate::operation::get_service_last_accessed_details_with_entities::GetServiceLastAccessedDetailsWithEntitiesError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_service_last_accessed_details_with_entities::GetServiceLastAccessedDetailsWithEntitiesError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::get_service_last_accessed_details_with_entities::GetServiceLastAccessedDetailsWithEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_service_linked_role_deletion_status::GetServiceLinkedRoleDeletionStatusError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_service_linked_role_deletion_status::GetServiceLinkedRoleDeletionStatusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_service_linked_role_deletion_status::GetServiceLinkedRoleDeletionStatusError> for Error {
    fn from(err: crate::operation::get_service_linked_role_deletion_status::GetServiceLinkedRoleDeletionStatusError) -> Self {
        match err {
            crate::operation::get_service_linked_role_deletion_status::GetServiceLinkedRoleDeletionStatusError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_service_linked_role_deletion_status::GetServiceLinkedRoleDeletionStatusError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::get_service_linked_role_deletion_status::GetServiceLinkedRoleDeletionStatusError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_service_linked_role_deletion_status::GetServiceLinkedRoleDeletionStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_ssh_public_key::GetSSHPublicKeyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_ssh_public_key::GetSSHPublicKeyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_ssh_public_key::GetSSHPublicKeyError> for Error {
    fn from(err: crate::operation::get_ssh_public_key::GetSSHPublicKeyError) -> Self {
        match err {
            crate::operation::get_ssh_public_key::GetSSHPublicKeyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::get_ssh_public_key::GetSSHPublicKeyError::UnrecognizedPublicKeyEncodingException(inner) => Error::UnrecognizedPublicKeyEncodingException(inner),
            crate::operation::get_ssh_public_key::GetSSHPublicKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_user::GetUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_user::GetUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_user::GetUserError> for Error {
    fn from(err: crate::operation::get_user::GetUserError) -> Self {
        match err {
            crate::operation::get_user::GetUserError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::get_user::GetUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::get_user::GetUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::get_user_policy::GetUserPolicyError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_user_policy::GetUserPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_user_policy::GetUserPolicyError> for Error {
    fn from(err: crate::operation::get_user_policy::GetUserPolicyError) -> Self {
        match err {
            crate::operation::get_user_policy::GetUserPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::get_user_policy::GetUserPolicyError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::get_user_policy::GetUserPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_access_keys::ListAccessKeysError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_access_keys::ListAccessKeysError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_access_keys::ListAccessKeysError> for Error {
    fn from(err: crate::operation::list_access_keys::ListAccessKeysError) -> Self {
        match err {
            crate::operation::list_access_keys::ListAccessKeysError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::operation::list_access_keys::ListAccessKeysError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::list_access_keys::ListAccessKeysError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_account_aliases::ListAccountAliasesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_account_aliases::ListAccountAliasesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_account_aliases::ListAccountAliasesError> for Error {
    fn from(err: crate::operation::list_account_aliases::ListAccountAliasesError) -> Self {
        match err {
            crate::operation::list_account_aliases::ListAccountAliasesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_account_aliases::ListAccountAliasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_attached_group_policies::ListAttachedGroupPoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_attached_group_policies::ListAttachedGroupPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_attached_group_policies::ListAttachedGroupPoliciesError>
    for Error
{
    fn from(
        err: crate::operation::list_attached_group_policies::ListAttachedGroupPoliciesError,
    ) -> Self {
        match err {
            crate::operation::list_attached_group_policies::ListAttachedGroupPoliciesError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_attached_group_policies::ListAttachedGroupPoliciesError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_attached_group_policies::ListAttachedGroupPoliciesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_attached_group_policies::ListAttachedGroupPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_attached_role_policies::ListAttachedRolePoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_attached_role_policies::ListAttachedRolePoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_attached_role_policies::ListAttachedRolePoliciesError> for Error {
    fn from(
        err: crate::operation::list_attached_role_policies::ListAttachedRolePoliciesError,
    ) -> Self {
        match err {
            crate::operation::list_attached_role_policies::ListAttachedRolePoliciesError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_attached_role_policies::ListAttachedRolePoliciesError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_attached_role_policies::ListAttachedRolePoliciesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_attached_role_policies::ListAttachedRolePoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_attached_user_policies::ListAttachedUserPoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_attached_user_policies::ListAttachedUserPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_attached_user_policies::ListAttachedUserPoliciesError> for Error {
    fn from(
        err: crate::operation::list_attached_user_policies::ListAttachedUserPoliciesError,
    ) -> Self {
        match err {
            crate::operation::list_attached_user_policies::ListAttachedUserPoliciesError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_attached_user_policies::ListAttachedUserPoliciesError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_attached_user_policies::ListAttachedUserPoliciesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_attached_user_policies::ListAttachedUserPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_entities_for_policy::ListEntitiesForPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_entities_for_policy::ListEntitiesForPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_entities_for_policy::ListEntitiesForPolicyError> for Error {
    fn from(err: crate::operation::list_entities_for_policy::ListEntitiesForPolicyError) -> Self {
        match err {
            crate::operation::list_entities_for_policy::ListEntitiesForPolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_entities_for_policy::ListEntitiesForPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_entities_for_policy::ListEntitiesForPolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_entities_for_policy::ListEntitiesForPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_group_policies::ListGroupPoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_group_policies::ListGroupPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_group_policies::ListGroupPoliciesError> for Error {
    fn from(err: crate::operation::list_group_policies::ListGroupPoliciesError) -> Self {
        match err {
            crate::operation::list_group_policies::ListGroupPoliciesError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_group_policies::ListGroupPoliciesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_group_policies::ListGroupPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_groups::ListGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_groups::ListGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_groups::ListGroupsError> for Error {
    fn from(err: crate::operation::list_groups::ListGroupsError) -> Self {
        match err {
            crate::operation::list_groups::ListGroupsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::list_groups::ListGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_groups_for_user::ListGroupsForUserError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_groups_for_user::ListGroupsForUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_groups_for_user::ListGroupsForUserError> for Error {
    fn from(err: crate::operation::list_groups_for_user::ListGroupsForUserError) -> Self {
        match err {
            crate::operation::list_groups_for_user::ListGroupsForUserError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_groups_for_user::ListGroupsForUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_groups_for_user::ListGroupsForUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_instance_profiles::ListInstanceProfilesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_instance_profiles::ListInstanceProfilesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_instance_profiles::ListInstanceProfilesError> for Error {
    fn from(err: crate::operation::list_instance_profiles::ListInstanceProfilesError) -> Self {
        match err {
            crate::operation::list_instance_profiles::ListInstanceProfilesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_instance_profiles::ListInstanceProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_instance_profiles_for_role::ListInstanceProfilesForRoleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_instance_profiles_for_role::ListInstanceProfilesForRoleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_instance_profiles_for_role::ListInstanceProfilesForRoleError>
    for Error
{
    fn from(
        err: crate::operation::list_instance_profiles_for_role::ListInstanceProfilesForRoleError,
    ) -> Self {
        match err {
            crate::operation::list_instance_profiles_for_role::ListInstanceProfilesForRoleError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_instance_profiles_for_role::ListInstanceProfilesForRoleError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_instance_profiles_for_role::ListInstanceProfilesForRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_instance_profile_tags::ListInstanceProfileTagsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_instance_profile_tags::ListInstanceProfileTagsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_instance_profile_tags::ListInstanceProfileTagsError> for Error {
    fn from(
        err: crate::operation::list_instance_profile_tags::ListInstanceProfileTagsError,
    ) -> Self {
        match err {
            crate::operation::list_instance_profile_tags::ListInstanceProfileTagsError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_instance_profile_tags::ListInstanceProfileTagsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_instance_profile_tags::ListInstanceProfileTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_mfa_devices::ListMFADevicesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_mfa_devices::ListMFADevicesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_mfa_devices::ListMFADevicesError> for Error {
    fn from(err: crate::operation::list_mfa_devices::ListMFADevicesError) -> Self {
        match err {
            crate::operation::list_mfa_devices::ListMFADevicesError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::operation::list_mfa_devices::ListMFADevicesError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::list_mfa_devices::ListMFADevicesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_mfa_device_tags::ListMFADeviceTagsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_mfa_device_tags::ListMFADeviceTagsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_mfa_device_tags::ListMFADeviceTagsError> for Error {
    fn from(err: crate::operation::list_mfa_device_tags::ListMFADeviceTagsError) -> Self {
        match err {
            crate::operation::list_mfa_device_tags::ListMFADeviceTagsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_mfa_device_tags::ListMFADeviceTagsError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_mfa_device_tags::ListMFADeviceTagsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_mfa_device_tags::ListMFADeviceTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_open_id_connect_providers::ListOpenIDConnectProvidersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_open_id_connect_providers::ListOpenIDConnectProvidersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_open_id_connect_providers::ListOpenIDConnectProvidersError>
    for Error
{
    fn from(
        err: crate::operation::list_open_id_connect_providers::ListOpenIDConnectProvidersError,
    ) -> Self {
        match err {
            crate::operation::list_open_id_connect_providers::ListOpenIDConnectProvidersError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_open_id_connect_providers::ListOpenIDConnectProvidersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_open_id_connect_provider_tags::ListOpenIDConnectProviderTagsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_open_id_connect_provider_tags::ListOpenIDConnectProviderTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_open_id_connect_provider_tags::ListOpenIDConnectProviderTagsError>
    for Error
{
    fn from(
        err: crate::operation::list_open_id_connect_provider_tags::ListOpenIDConnectProviderTagsError,
    ) -> Self {
        match err {
            crate::operation::list_open_id_connect_provider_tags::ListOpenIDConnectProviderTagsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_open_id_connect_provider_tags::ListOpenIDConnectProviderTagsError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_open_id_connect_provider_tags::ListOpenIDConnectProviderTagsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_open_id_connect_provider_tags::ListOpenIDConnectProviderTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_policies::ListPoliciesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_policies::ListPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_policies::ListPoliciesError> for Error {
    fn from(err: crate::operation::list_policies::ListPoliciesError) -> Self {
        match err {
            crate::operation::list_policies::ListPoliciesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::list_policies::ListPoliciesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_policies_granting_service_access::ListPoliciesGrantingServiceAccessError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_policies_granting_service_access::ListPoliciesGrantingServiceAccessError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_policies_granting_service_access::ListPoliciesGrantingServiceAccessError> for Error {
    fn from(err: crate::operation::list_policies_granting_service_access::ListPoliciesGrantingServiceAccessError) -> Self {
        match err {
            crate::operation::list_policies_granting_service_access::ListPoliciesGrantingServiceAccessError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_policies_granting_service_access::ListPoliciesGrantingServiceAccessError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_policies_granting_service_access::ListPoliciesGrantingServiceAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_policy_tags::ListPolicyTagsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_policy_tags::ListPolicyTagsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_policy_tags::ListPolicyTagsError> for Error {
    fn from(err: crate::operation::list_policy_tags::ListPolicyTagsError) -> Self {
        match err {
            crate::operation::list_policy_tags::ListPolicyTagsError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::operation::list_policy_tags::ListPolicyTagsError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::operation::list_policy_tags::ListPolicyTagsError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::list_policy_tags::ListPolicyTagsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_policy_versions::ListPolicyVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_policy_versions::ListPolicyVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_policy_versions::ListPolicyVersionsError> for Error {
    fn from(err: crate::operation::list_policy_versions::ListPolicyVersionsError) -> Self {
        match err {
            crate::operation::list_policy_versions::ListPolicyVersionsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_policy_versions::ListPolicyVersionsError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_policy_versions::ListPolicyVersionsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_policy_versions::ListPolicyVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_role_policies::ListRolePoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_role_policies::ListRolePoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_role_policies::ListRolePoliciesError> for Error {
    fn from(err: crate::operation::list_role_policies::ListRolePoliciesError) -> Self {
        match err {
            crate::operation::list_role_policies::ListRolePoliciesError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_role_policies::ListRolePoliciesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_role_policies::ListRolePoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_roles::ListRolesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_roles::ListRolesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_roles::ListRolesError> for Error {
    fn from(err: crate::operation::list_roles::ListRolesError) -> Self {
        match err {
            crate::operation::list_roles::ListRolesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::list_roles::ListRolesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_role_tags::ListRoleTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_role_tags::ListRoleTagsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_role_tags::ListRoleTagsError> for Error {
    fn from(err: crate::operation::list_role_tags::ListRoleTagsError) -> Self {
        match err {
            crate::operation::list_role_tags::ListRoleTagsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::list_role_tags::ListRoleTagsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::list_role_tags::ListRoleTagsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_saml_providers::ListSAMLProvidersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_saml_providers::ListSAMLProvidersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_saml_providers::ListSAMLProvidersError> for Error {
    fn from(err: crate::operation::list_saml_providers::ListSAMLProvidersError) -> Self {
        match err {
            crate::operation::list_saml_providers::ListSAMLProvidersError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_saml_providers::ListSAMLProvidersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_saml_provider_tags::ListSAMLProviderTagsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_saml_provider_tags::ListSAMLProviderTagsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_saml_provider_tags::ListSAMLProviderTagsError> for Error {
    fn from(err: crate::operation::list_saml_provider_tags::ListSAMLProviderTagsError) -> Self {
        match err {
            crate::operation::list_saml_provider_tags::ListSAMLProviderTagsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_saml_provider_tags::ListSAMLProviderTagsError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_saml_provider_tags::ListSAMLProviderTagsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_saml_provider_tags::ListSAMLProviderTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_server_certificates::ListServerCertificatesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_server_certificates::ListServerCertificatesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_server_certificates::ListServerCertificatesError> for Error {
    fn from(err: crate::operation::list_server_certificates::ListServerCertificatesError) -> Self {
        match err {
            crate::operation::list_server_certificates::ListServerCertificatesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_server_certificates::ListServerCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_server_certificate_tags::ListServerCertificateTagsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_server_certificate_tags::ListServerCertificateTagsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_server_certificate_tags::ListServerCertificateTagsError>
    for Error
{
    fn from(
        err: crate::operation::list_server_certificate_tags::ListServerCertificateTagsError,
    ) -> Self {
        match err {
            crate::operation::list_server_certificate_tags::ListServerCertificateTagsError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_server_certificate_tags::ListServerCertificateTagsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_server_certificate_tags::ListServerCertificateTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_service_specific_credentials::ListServiceSpecificCredentialsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_service_specific_credentials::ListServiceSpecificCredentialsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_service_specific_credentials::ListServiceSpecificCredentialsError>
    for Error
{
    fn from(
        err: crate::operation::list_service_specific_credentials::ListServiceSpecificCredentialsError,
    ) -> Self {
        match err {
            crate::operation::list_service_specific_credentials::ListServiceSpecificCredentialsError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_service_specific_credentials::ListServiceSpecificCredentialsError::ServiceNotSupportedException(inner) => Error::ServiceNotSupportedException(inner),
            crate::operation::list_service_specific_credentials::ListServiceSpecificCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_signing_certificates::ListSigningCertificatesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_signing_certificates::ListSigningCertificatesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_signing_certificates::ListSigningCertificatesError> for Error {
    fn from(
        err: crate::operation::list_signing_certificates::ListSigningCertificatesError,
    ) -> Self {
        match err {
            crate::operation::list_signing_certificates::ListSigningCertificatesError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_signing_certificates::ListSigningCertificatesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_signing_certificates::ListSigningCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_ssh_public_keys::ListSSHPublicKeysError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_ssh_public_keys::ListSSHPublicKeysError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_ssh_public_keys::ListSSHPublicKeysError> for Error {
    fn from(err: crate::operation::list_ssh_public_keys::ListSSHPublicKeysError) -> Self {
        match err {
            crate::operation::list_ssh_public_keys::ListSSHPublicKeysError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_ssh_public_keys::ListSSHPublicKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_user_policies::ListUserPoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_user_policies::ListUserPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_user_policies::ListUserPoliciesError> for Error {
    fn from(err: crate::operation::list_user_policies::ListUserPoliciesError) -> Self {
        match err {
            crate::operation::list_user_policies::ListUserPoliciesError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::list_user_policies::ListUserPoliciesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_user_policies::ListUserPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_users::ListUsersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_users::ListUsersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_users::ListUsersError> for Error {
    fn from(err: crate::operation::list_users::ListUsersError) -> Self {
        match err {
            crate::operation::list_users::ListUsersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::list_users::ListUsersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_user_tags::ListUserTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_user_tags::ListUserTagsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_user_tags::ListUserTagsError> for Error {
    fn from(err: crate::operation::list_user_tags::ListUserTagsError) -> Self {
        match err {
            crate::operation::list_user_tags::ListUserTagsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::list_user_tags::ListUserTagsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::list_user_tags::ListUserTagsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_virtual_mfa_devices::ListVirtualMFADevicesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_virtual_mfa_devices::ListVirtualMFADevicesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_virtual_mfa_devices::ListVirtualMFADevicesError> for Error {
    fn from(err: crate::operation::list_virtual_mfa_devices::ListVirtualMFADevicesError) -> Self {
        match err {
            crate::operation::list_virtual_mfa_devices::ListVirtualMFADevicesError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_group_policy::PutGroupPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_group_policy::PutGroupPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_group_policy::PutGroupPolicyError> for Error {
    fn from(err: crate::operation::put_group_policy::PutGroupPolicyError) -> Self {
        match err {
            crate::operation::put_group_policy::PutGroupPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_group_policy::PutGroupPolicyError::MalformedPolicyDocumentException(inner) => Error::MalformedPolicyDocumentException(inner),
            crate::operation::put_group_policy::PutGroupPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::put_group_policy::PutGroupPolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::put_group_policy::PutGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_role_permissions_boundary::PutRolePermissionsBoundaryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_role_permissions_boundary::PutRolePermissionsBoundaryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_role_permissions_boundary::PutRolePermissionsBoundaryError>
    for Error
{
    fn from(
        err: crate::operation::put_role_permissions_boundary::PutRolePermissionsBoundaryError,
    ) -> Self {
        match err {
            crate::operation::put_role_permissions_boundary::PutRolePermissionsBoundaryError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::put_role_permissions_boundary::PutRolePermissionsBoundaryError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::put_role_permissions_boundary::PutRolePermissionsBoundaryError::PolicyNotAttachableException(inner) => Error::PolicyNotAttachableException(inner),
            crate::operation::put_role_permissions_boundary::PutRolePermissionsBoundaryError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::put_role_permissions_boundary::PutRolePermissionsBoundaryError::UnmodifiableEntityException(inner) => Error::UnmodifiableEntityException(inner),
            crate::operation::put_role_permissions_boundary::PutRolePermissionsBoundaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::put_role_policy::PutRolePolicyError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_role_policy::PutRolePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_role_policy::PutRolePolicyError> for Error {
    fn from(err: crate::operation::put_role_policy::PutRolePolicyError) -> Self {
        match err {
            crate::operation::put_role_policy::PutRolePolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_role_policy::PutRolePolicyError::MalformedPolicyDocumentException(inner) => Error::MalformedPolicyDocumentException(inner),
            crate::operation::put_role_policy::PutRolePolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::put_role_policy::PutRolePolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::put_role_policy::PutRolePolicyError::UnmodifiableEntityException(inner) => Error::UnmodifiableEntityException(inner),
            crate::operation::put_role_policy::PutRolePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundaryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundaryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundaryError>
    for Error
{
    fn from(
        err: crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundaryError,
    ) -> Self {
        match err {
            crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundaryError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundaryError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundaryError::PolicyNotAttachableException(inner) => Error::PolicyNotAttachableException(inner),
            crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundaryError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::put_user_policy::PutUserPolicyError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_user_policy::PutUserPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_user_policy::PutUserPolicyError> for Error {
    fn from(err: crate::operation::put_user_policy::PutUserPolicyError) -> Self {
        match err {
            crate::operation::put_user_policy::PutUserPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_user_policy::PutUserPolicyError::MalformedPolicyDocumentException(inner) => Error::MalformedPolicyDocumentException(inner),
            crate::operation::put_user_policy::PutUserPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::put_user_policy::PutUserPolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::put_user_policy::PutUserPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::remove_client_id_from_open_id_connect_provider::RemoveClientIDFromOpenIDConnectProviderError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::remove_client_id_from_open_id_connect_provider::RemoveClientIDFromOpenIDConnectProviderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::remove_client_id_from_open_id_connect_provider::RemoveClientIDFromOpenIDConnectProviderError> for Error {
    fn from(err: crate::operation::remove_client_id_from_open_id_connect_provider::RemoveClientIDFromOpenIDConnectProviderError) -> Self {
        match err {
            crate::operation::remove_client_id_from_open_id_connect_provider::RemoveClientIDFromOpenIDConnectProviderError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::remove_client_id_from_open_id_connect_provider::RemoveClientIDFromOpenIDConnectProviderError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::remove_client_id_from_open_id_connect_provider::RemoveClientIDFromOpenIDConnectProviderError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::remove_client_id_from_open_id_connect_provider::RemoveClientIDFromOpenIDConnectProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_role_from_instance_profile::RemoveRoleFromInstanceProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_role_from_instance_profile::RemoveRoleFromInstanceProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_role_from_instance_profile::RemoveRoleFromInstanceProfileError>
    for Error
{
    fn from(
        err: crate::operation::remove_role_from_instance_profile::RemoveRoleFromInstanceProfileError,
    ) -> Self {
        match err {
            crate::operation::remove_role_from_instance_profile::RemoveRoleFromInstanceProfileError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::remove_role_from_instance_profile::RemoveRoleFromInstanceProfileError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::remove_role_from_instance_profile::RemoveRoleFromInstanceProfileError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::remove_role_from_instance_profile::RemoveRoleFromInstanceProfileError::UnmodifiableEntityException(inner) => Error::UnmodifiableEntityException(inner),
            crate::operation::remove_role_from_instance_profile::RemoveRoleFromInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_user_from_group::RemoveUserFromGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_user_from_group::RemoveUserFromGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_user_from_group::RemoveUserFromGroupError> for Error {
    fn from(err: crate::operation::remove_user_from_group::RemoveUserFromGroupError) -> Self {
        match err {
            crate::operation::remove_user_from_group::RemoveUserFromGroupError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::remove_user_from_group::RemoveUserFromGroupError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::remove_user_from_group::RemoveUserFromGroupError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::remove_user_from_group::RemoveUserFromGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::reset_service_specific_credential::ResetServiceSpecificCredentialError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::reset_service_specific_credential::ResetServiceSpecificCredentialError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::reset_service_specific_credential::ResetServiceSpecificCredentialError>
    for Error
{
    fn from(
        err: crate::operation::reset_service_specific_credential::ResetServiceSpecificCredentialError,
    ) -> Self {
        match err {
            crate::operation::reset_service_specific_credential::ResetServiceSpecificCredentialError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::reset_service_specific_credential::ResetServiceSpecificCredentialError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::resync_mfa_device::ResyncMFADeviceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::resync_mfa_device::ResyncMFADeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::resync_mfa_device::ResyncMFADeviceError> for Error {
    fn from(err: crate::operation::resync_mfa_device::ResyncMFADeviceError) -> Self {
        match err {
            crate::operation::resync_mfa_device::ResyncMFADeviceError::InvalidAuthenticationCodeException(inner) => Error::InvalidAuthenticationCodeException(inner),
            crate::operation::resync_mfa_device::ResyncMFADeviceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::resync_mfa_device::ResyncMFADeviceError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::resync_mfa_device::ResyncMFADeviceError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::resync_mfa_device::ResyncMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_default_policy_version::SetDefaultPolicyVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_default_policy_version::SetDefaultPolicyVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_default_policy_version::SetDefaultPolicyVersionError> for Error {
    fn from(
        err: crate::operation::set_default_policy_version::SetDefaultPolicyVersionError,
    ) -> Self {
        match err {
            crate::operation::set_default_policy_version::SetDefaultPolicyVersionError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::set_default_policy_version::SetDefaultPolicyVersionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::set_default_policy_version::SetDefaultPolicyVersionError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::set_default_policy_version::SetDefaultPolicyVersionError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::set_default_policy_version::SetDefaultPolicyVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::set_security_token_service_preferences::SetSecurityTokenServicePreferencesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::set_security_token_service_preferences::SetSecurityTokenServicePreferencesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::set_security_token_service_preferences::SetSecurityTokenServicePreferencesError> for Error {
    fn from(err: crate::operation::set_security_token_service_preferences::SetSecurityTokenServicePreferencesError) -> Self {
        match err {
            crate::operation::set_security_token_service_preferences::SetSecurityTokenServicePreferencesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::set_security_token_service_preferences::SetSecurityTokenServicePreferencesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::simulate_custom_policy::SimulateCustomPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::simulate_custom_policy::SimulateCustomPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::simulate_custom_policy::SimulateCustomPolicyError> for Error {
    fn from(err: crate::operation::simulate_custom_policy::SimulateCustomPolicyError) -> Self {
        match err {
            crate::operation::simulate_custom_policy::SimulateCustomPolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::simulate_custom_policy::SimulateCustomPolicyError::PolicyEvaluationException(inner) => Error::PolicyEvaluationException(inner),
            crate::operation::simulate_custom_policy::SimulateCustomPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::simulate_principal_policy::SimulatePrincipalPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::simulate_principal_policy::SimulatePrincipalPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::simulate_principal_policy::SimulatePrincipalPolicyError> for Error {
    fn from(
        err: crate::operation::simulate_principal_policy::SimulatePrincipalPolicyError,
    ) -> Self {
        match err {
            crate::operation::simulate_principal_policy::SimulatePrincipalPolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::simulate_principal_policy::SimulatePrincipalPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::simulate_principal_policy::SimulatePrincipalPolicyError::PolicyEvaluationException(inner) => Error::PolicyEvaluationException(inner),
            crate::operation::simulate_principal_policy::SimulatePrincipalPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::tag_instance_profile::TagInstanceProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::tag_instance_profile::TagInstanceProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_instance_profile::TagInstanceProfileError> for Error {
    fn from(err: crate::operation::tag_instance_profile::TagInstanceProfileError) -> Self {
        match err {
            crate::operation::tag_instance_profile::TagInstanceProfileError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::tag_instance_profile::TagInstanceProfileError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::tag_instance_profile::TagInstanceProfileError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::tag_instance_profile::TagInstanceProfileError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::tag_instance_profile::TagInstanceProfileError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::tag_instance_profile::TagInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::tag_mfa_device::TagMFADeviceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::tag_mfa_device::TagMFADeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_mfa_device::TagMFADeviceError> for Error {
    fn from(err: crate::operation::tag_mfa_device::TagMFADeviceError) -> Self {
        match err {
            crate::operation::tag_mfa_device::TagMFADeviceError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::tag_mfa_device::TagMFADeviceError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::tag_mfa_device::TagMFADeviceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::tag_mfa_device::TagMFADeviceError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::tag_mfa_device::TagMFADeviceError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::tag_mfa_device::TagMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::tag_open_id_connect_provider::TagOpenIDConnectProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::tag_open_id_connect_provider::TagOpenIDConnectProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_open_id_connect_provider::TagOpenIDConnectProviderError> for Error {
    fn from(
        err: crate::operation::tag_open_id_connect_provider::TagOpenIDConnectProviderError,
    ) -> Self {
        match err {
            crate::operation::tag_open_id_connect_provider::TagOpenIDConnectProviderError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::tag_open_id_connect_provider::TagOpenIDConnectProviderError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::tag_open_id_connect_provider::TagOpenIDConnectProviderError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::tag_open_id_connect_provider::TagOpenIDConnectProviderError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::tag_open_id_connect_provider::TagOpenIDConnectProviderError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::tag_open_id_connect_provider::TagOpenIDConnectProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_policy::TagPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_policy::TagPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_policy::TagPolicyError> for Error {
    fn from(err: crate::operation::tag_policy::TagPolicyError) -> Self {
        match err {
            crate::operation::tag_policy::TagPolicyError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::tag_policy::TagPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::tag_policy::TagPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::tag_policy::TagPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::tag_policy::TagPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::tag_policy::TagPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_role::TagRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_role::TagRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_role::TagRoleError> for Error {
    fn from(err: crate::operation::tag_role::TagRoleError) -> Self {
        match err {
            crate::operation::tag_role::TagRoleError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::tag_role::TagRoleError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::tag_role::TagRoleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::tag_role::TagRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::tag_role::TagRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::tag_role::TagRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::tag_saml_provider::TagSAMLProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::tag_saml_provider::TagSAMLProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_saml_provider::TagSAMLProviderError> for Error {
    fn from(err: crate::operation::tag_saml_provider::TagSAMLProviderError) -> Self {
        match err {
            crate::operation::tag_saml_provider::TagSAMLProviderError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::tag_saml_provider::TagSAMLProviderError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::tag_saml_provider::TagSAMLProviderError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::tag_saml_provider::TagSAMLProviderError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::tag_saml_provider::TagSAMLProviderError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::tag_saml_provider::TagSAMLProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::tag_server_certificate::TagServerCertificateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::tag_server_certificate::TagServerCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_server_certificate::TagServerCertificateError> for Error {
    fn from(err: crate::operation::tag_server_certificate::TagServerCertificateError) -> Self {
        match err {
            crate::operation::tag_server_certificate::TagServerCertificateError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::tag_server_certificate::TagServerCertificateError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::tag_server_certificate::TagServerCertificateError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::tag_server_certificate::TagServerCertificateError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::tag_server_certificate::TagServerCertificateError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::tag_server_certificate::TagServerCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_user::TagUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_user::TagUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_user::TagUserError> for Error {
    fn from(err: crate::operation::tag_user::TagUserError) -> Self {
        match err {
            crate::operation::tag_user::TagUserError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::tag_user::TagUserError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::tag_user::TagUserError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::tag_user::TagUserError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::tag_user::TagUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::tag_user::TagUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::untag_instance_profile::UntagInstanceProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_instance_profile::UntagInstanceProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_instance_profile::UntagInstanceProfileError> for Error {
    fn from(err: crate::operation::untag_instance_profile::UntagInstanceProfileError) -> Self {
        match err {
            crate::operation::untag_instance_profile::UntagInstanceProfileError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::untag_instance_profile::UntagInstanceProfileError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::untag_instance_profile::UntagInstanceProfileError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::untag_instance_profile::UntagInstanceProfileError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::untag_instance_profile::UntagInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::untag_mfa_device::UntagMFADeviceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_mfa_device::UntagMFADeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_mfa_device::UntagMFADeviceError> for Error {
    fn from(err: crate::operation::untag_mfa_device::UntagMFADeviceError) -> Self {
        match err {
            crate::operation::untag_mfa_device::UntagMFADeviceError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::untag_mfa_device::UntagMFADeviceError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::untag_mfa_device::UntagMFADeviceError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::untag_mfa_device::UntagMFADeviceError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::untag_mfa_device::UntagMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::untag_open_id_connect_provider::UntagOpenIDConnectProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_open_id_connect_provider::UntagOpenIDConnectProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_open_id_connect_provider::UntagOpenIDConnectProviderError>
    for Error
{
    fn from(
        err: crate::operation::untag_open_id_connect_provider::UntagOpenIDConnectProviderError,
    ) -> Self {
        match err {
            crate::operation::untag_open_id_connect_provider::UntagOpenIDConnectProviderError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::untag_open_id_connect_provider::UntagOpenIDConnectProviderError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::untag_open_id_connect_provider::UntagOpenIDConnectProviderError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::untag_open_id_connect_provider::UntagOpenIDConnectProviderError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::untag_open_id_connect_provider::UntagOpenIDConnectProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::untag_policy::UntagPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::untag_policy::UntagPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_policy::UntagPolicyError> for Error {
    fn from(err: crate::operation::untag_policy::UntagPolicyError) -> Self {
        match err {
            crate::operation::untag_policy::UntagPolicyError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::untag_policy::UntagPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::untag_policy::UntagPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::untag_policy::UntagPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::untag_policy::UntagPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::untag_role::UntagRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::untag_role::UntagRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_role::UntagRoleError> for Error {
    fn from(err: crate::operation::untag_role::UntagRoleError) -> Self {
        match err {
            crate::operation::untag_role::UntagRoleError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::untag_role::UntagRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::untag_role::UntagRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::untag_role::UntagRoleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::untag_saml_provider::UntagSAMLProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_saml_provider::UntagSAMLProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_saml_provider::UntagSAMLProviderError> for Error {
    fn from(err: crate::operation::untag_saml_provider::UntagSAMLProviderError) -> Self {
        match err {
            crate::operation::untag_saml_provider::UntagSAMLProviderError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::untag_saml_provider::UntagSAMLProviderError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::untag_saml_provider::UntagSAMLProviderError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::untag_saml_provider::UntagSAMLProviderError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::untag_saml_provider::UntagSAMLProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::untag_server_certificate::UntagServerCertificateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_server_certificate::UntagServerCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_server_certificate::UntagServerCertificateError> for Error {
    fn from(err: crate::operation::untag_server_certificate::UntagServerCertificateError) -> Self {
        match err {
            crate::operation::untag_server_certificate::UntagServerCertificateError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::untag_server_certificate::UntagServerCertificateError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::untag_server_certificate::UntagServerCertificateError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::untag_server_certificate::UntagServerCertificateError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::untag_server_certificate::UntagServerCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::untag_user::UntagUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::untag_user::UntagUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_user::UntagUserError> for Error {
    fn from(err: crate::operation::untag_user::UntagUserError) -> Self {
        match err {
            crate::operation::untag_user::UntagUserError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::untag_user::UntagUserError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::untag_user::UntagUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::untag_user::UntagUserError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_access_key::UpdateAccessKeyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_access_key::UpdateAccessKeyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_access_key::UpdateAccessKeyError> for Error {
    fn from(err: crate::operation::update_access_key::UpdateAccessKeyError) -> Self {
        match err {
            crate::operation::update_access_key::UpdateAccessKeyError::LimitExceededException(
                inner,
            ) => Error::LimitExceededException(inner),
            crate::operation::update_access_key::UpdateAccessKeyError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::operation::update_access_key::UpdateAccessKeyError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::update_access_key::UpdateAccessKeyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyError>
    for Error
{
    fn from(
        err: crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyError,
    ) -> Self {
        match err {
            crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyError::MalformedPolicyDocumentException(inner) => Error::MalformedPolicyDocumentException(inner),
            crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_assume_role_policy::UpdateAssumeRolePolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_assume_role_policy::UpdateAssumeRolePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_assume_role_policy::UpdateAssumeRolePolicyError> for Error {
    fn from(err: crate::operation::update_assume_role_policy::UpdateAssumeRolePolicyError) -> Self {
        match err {
            crate::operation::update_assume_role_policy::UpdateAssumeRolePolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_assume_role_policy::UpdateAssumeRolePolicyError::MalformedPolicyDocumentException(inner) => Error::MalformedPolicyDocumentException(inner),
            crate::operation::update_assume_role_policy::UpdateAssumeRolePolicyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::update_assume_role_policy::UpdateAssumeRolePolicyError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_assume_role_policy::UpdateAssumeRolePolicyError::UnmodifiableEntityException(inner) => Error::UnmodifiableEntityException(inner),
            crate::operation::update_assume_role_policy::UpdateAssumeRolePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_group::UpdateGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_group::UpdateGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_group::UpdateGroupError> for Error {
    fn from(err: crate::operation::update_group::UpdateGroupError) -> Self {
        match err {
            crate::operation::update_group::UpdateGroupError::EntityAlreadyExistsException(
                inner,
            ) => Error::EntityAlreadyExistsException(inner),
            crate::operation::update_group::UpdateGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_group::UpdateGroupError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::update_group::UpdateGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::update_group::UpdateGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_login_profile::UpdateLoginProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_login_profile::UpdateLoginProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_login_profile::UpdateLoginProfileError> for Error {
    fn from(err: crate::operation::update_login_profile::UpdateLoginProfileError) -> Self {
        match err {
            crate::operation::update_login_profile::UpdateLoginProfileError::EntityTemporarilyUnmodifiableException(inner) => Error::EntityTemporarilyUnmodifiableException(inner),
            crate::operation::update_login_profile::UpdateLoginProfileError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_login_profile::UpdateLoginProfileError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::update_login_profile::UpdateLoginProfileError::PasswordPolicyViolationException(inner) => Error::PasswordPolicyViolationException(inner),
            crate::operation::update_login_profile::UpdateLoginProfileError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_login_profile::UpdateLoginProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_open_id_connect_provider_thumbprint::UpdateOpenIDConnectProviderThumbprintError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_open_id_connect_provider_thumbprint::UpdateOpenIDConnectProviderThumbprintError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_open_id_connect_provider_thumbprint::UpdateOpenIDConnectProviderThumbprintError> for Error {
    fn from(err: crate::operation::update_open_id_connect_provider_thumbprint::UpdateOpenIDConnectProviderThumbprintError) -> Self {
        match err {
            crate::operation::update_open_id_connect_provider_thumbprint::UpdateOpenIDConnectProviderThumbprintError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::update_open_id_connect_provider_thumbprint::UpdateOpenIDConnectProviderThumbprintError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::update_open_id_connect_provider_thumbprint::UpdateOpenIDConnectProviderThumbprintError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_open_id_connect_provider_thumbprint::UpdateOpenIDConnectProviderThumbprintError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_role::UpdateRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_role::UpdateRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_role::UpdateRoleError> for Error {
    fn from(err: crate::operation::update_role::UpdateRoleError) -> Self {
        match err {
            crate::operation::update_role::UpdateRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::operation::update_role::UpdateRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::update_role::UpdateRoleError::UnmodifiableEntityException(inner) => {
                Error::UnmodifiableEntityException(inner)
            }
            crate::operation::update_role::UpdateRoleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_role_description::UpdateRoleDescriptionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_role_description::UpdateRoleDescriptionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_role_description::UpdateRoleDescriptionError> for Error {
    fn from(err: crate::operation::update_role_description::UpdateRoleDescriptionError) -> Self {
        match err {
            crate::operation::update_role_description::UpdateRoleDescriptionError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::update_role_description::UpdateRoleDescriptionError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_role_description::UpdateRoleDescriptionError::UnmodifiableEntityException(inner) => Error::UnmodifiableEntityException(inner),
            crate::operation::update_role_description::UpdateRoleDescriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_saml_provider::UpdateSAMLProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_saml_provider::UpdateSAMLProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_saml_provider::UpdateSAMLProviderError> for Error {
    fn from(err: crate::operation::update_saml_provider::UpdateSAMLProviderError) -> Self {
        match err {
            crate::operation::update_saml_provider::UpdateSAMLProviderError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::update_saml_provider::UpdateSAMLProviderError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_saml_provider::UpdateSAMLProviderError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::update_saml_provider::UpdateSAMLProviderError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_saml_provider::UpdateSAMLProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_server_certificate::UpdateServerCertificateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_server_certificate::UpdateServerCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_server_certificate::UpdateServerCertificateError> for Error {
    fn from(
        err: crate::operation::update_server_certificate::UpdateServerCertificateError,
    ) -> Self {
        match err {
            crate::operation::update_server_certificate::UpdateServerCertificateError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::update_server_certificate::UpdateServerCertificateError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_server_certificate::UpdateServerCertificateError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::update_server_certificate::UpdateServerCertificateError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_server_certificate::UpdateServerCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_service_specific_credential::UpdateServiceSpecificCredentialError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_service_specific_credential::UpdateServiceSpecificCredentialError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::update_service_specific_credential::UpdateServiceSpecificCredentialError>
    for Error
{
    fn from(
        err: crate::operation::update_service_specific_credential::UpdateServiceSpecificCredentialError,
    ) -> Self {
        match err {
            crate::operation::update_service_specific_credential::UpdateServiceSpecificCredentialError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::update_service_specific_credential::UpdateServiceSpecificCredentialError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_signing_certificate::UpdateSigningCertificateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_signing_certificate::UpdateSigningCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_signing_certificate::UpdateSigningCertificateError> for Error {
    fn from(
        err: crate::operation::update_signing_certificate::UpdateSigningCertificateError,
    ) -> Self {
        match err {
            crate::operation::update_signing_certificate::UpdateSigningCertificateError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_signing_certificate::UpdateSigningCertificateError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::update_signing_certificate::UpdateSigningCertificateError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_signing_certificate::UpdateSigningCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_ssh_public_key::UpdateSSHPublicKeyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_ssh_public_key::UpdateSSHPublicKeyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_ssh_public_key::UpdateSSHPublicKeyError> for Error {
    fn from(err: crate::operation::update_ssh_public_key::UpdateSSHPublicKeyError) -> Self {
        match err {
            crate::operation::update_ssh_public_key::UpdateSSHPublicKeyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::update_ssh_public_key::UpdateSSHPublicKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_user::UpdateUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_user::UpdateUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_user::UpdateUserError> for Error {
    fn from(err: crate::operation::update_user::UpdateUserError) -> Self {
        match err {
            crate::operation::update_user::UpdateUserError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::update_user::UpdateUserError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::update_user::UpdateUserError::EntityTemporarilyUnmodifiableException(inner) => Error::EntityTemporarilyUnmodifiableException(inner),
            crate::operation::update_user::UpdateUserError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_user::UpdateUserError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::update_user::UpdateUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_user::UpdateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::upload_server_certificate::UploadServerCertificateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::upload_server_certificate::UploadServerCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::upload_server_certificate::UploadServerCertificateError> for Error {
    fn from(
        err: crate::operation::upload_server_certificate::UploadServerCertificateError,
    ) -> Self {
        match err {
            crate::operation::upload_server_certificate::UploadServerCertificateError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::upload_server_certificate::UploadServerCertificateError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::upload_server_certificate::UploadServerCertificateError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::upload_server_certificate::UploadServerCertificateError::KeyPairMismatchException(inner) => Error::KeyPairMismatchException(inner),
            crate::operation::upload_server_certificate::UploadServerCertificateError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::upload_server_certificate::UploadServerCertificateError::MalformedCertificateException(inner) => Error::MalformedCertificateException(inner),
            crate::operation::upload_server_certificate::UploadServerCertificateError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::upload_server_certificate::UploadServerCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::upload_signing_certificate::UploadSigningCertificateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::upload_signing_certificate::UploadSigningCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::upload_signing_certificate::UploadSigningCertificateError> for Error {
    fn from(
        err: crate::operation::upload_signing_certificate::UploadSigningCertificateError,
    ) -> Self {
        match err {
            crate::operation::upload_signing_certificate::UploadSigningCertificateError::DuplicateCertificateException(inner) => Error::DuplicateCertificateException(inner),
            crate::operation::upload_signing_certificate::UploadSigningCertificateError::EntityAlreadyExistsException(inner) => Error::EntityAlreadyExistsException(inner),
            crate::operation::upload_signing_certificate::UploadSigningCertificateError::InvalidCertificateException(inner) => Error::InvalidCertificateException(inner),
            crate::operation::upload_signing_certificate::UploadSigningCertificateError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::upload_signing_certificate::UploadSigningCertificateError::MalformedCertificateException(inner) => Error::MalformedCertificateException(inner),
            crate::operation::upload_signing_certificate::UploadSigningCertificateError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::upload_signing_certificate::UploadSigningCertificateError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::upload_signing_certificate::UploadSigningCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::upload_ssh_public_key::UploadSSHPublicKeyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::upload_ssh_public_key::UploadSSHPublicKeyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::upload_ssh_public_key::UploadSSHPublicKeyError> for Error {
    fn from(err: crate::operation::upload_ssh_public_key::UploadSSHPublicKeyError) -> Self {
        match err {
            crate::operation::upload_ssh_public_key::UploadSSHPublicKeyError::DuplicateSshPublicKeyException(inner) => Error::DuplicateSshPublicKeyException(inner),
            crate::operation::upload_ssh_public_key::UploadSSHPublicKeyError::InvalidPublicKeyException(inner) => Error::InvalidPublicKeyException(inner),
            crate::operation::upload_ssh_public_key::UploadSSHPublicKeyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::upload_ssh_public_key::UploadSSHPublicKeyError::NoSuchEntityException(inner) => Error::NoSuchEntityException(inner),
            crate::operation::upload_ssh_public_key::UploadSSHPublicKeyError::UnrecognizedPublicKeyEncodingException(inner) => Error::UnrecognizedPublicKeyEncodingException(inner),
            crate::operation::upload_ssh_public_key::UploadSSHPublicKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::CredentialReportExpiredException(e) => e.request_id(),
            Self::CredentialReportNotPresentException(e) => e.request_id(),
            Self::CredentialReportNotReadyException(e) => e.request_id(),
            Self::DeleteConflictException(e) => e.request_id(),
            Self::DuplicateCertificateException(e) => e.request_id(),
            Self::DuplicateSshPublicKeyException(e) => e.request_id(),
            Self::EntityAlreadyExistsException(e) => e.request_id(),
            Self::EntityTemporarilyUnmodifiableException(e) => e.request_id(),
            Self::InvalidAuthenticationCodeException(e) => e.request_id(),
            Self::InvalidCertificateException(e) => e.request_id(),
            Self::InvalidInputException(e) => e.request_id(),
            Self::InvalidPublicKeyException(e) => e.request_id(),
            Self::InvalidUserTypeException(e) => e.request_id(),
            Self::KeyPairMismatchException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::MalformedCertificateException(e) => e.request_id(),
            Self::MalformedPolicyDocumentException(e) => e.request_id(),
            Self::NoSuchEntityException(e) => e.request_id(),
            Self::PasswordPolicyViolationException(e) => e.request_id(),
            Self::PolicyEvaluationException(e) => e.request_id(),
            Self::PolicyNotAttachableException(e) => e.request_id(),
            Self::ReportGenerationLimitExceededException(e) => e.request_id(),
            Self::ServiceFailureException(e) => e.request_id(),
            Self::ServiceNotSupportedException(e) => e.request_id(),
            Self::UnmodifiableEntityException(e) => e.request_id(),
            Self::UnrecognizedPublicKeyEncodingException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
