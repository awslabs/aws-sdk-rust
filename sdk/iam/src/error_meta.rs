// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The request was rejected because multiple requests to change this object were submitted simultaneously. Wait a few minutes and submit your request again.</p>
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    /// <p>The request was rejected because the most recent credential report has expired. To generate a new credential report, use <code>GenerateCredentialReport</code>. For more information about credential report expiration, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting credential reports</a> in the <i>IAM User Guide</i>.</p>
    CredentialReportExpiredException(crate::error::CredentialReportExpiredException),
    /// <p>The request was rejected because the credential report does not exist. To generate a credential report, use <code>GenerateCredentialReport</code>.</p>
    CredentialReportNotPresentException(crate::error::CredentialReportNotPresentException),
    /// <p>The request was rejected because the credential report is still being generated.</p>
    CredentialReportNotReadyException(crate::error::CredentialReportNotReadyException),
    /// <p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>
    DeleteConflictException(crate::error::DeleteConflictException),
    /// <p>The request was rejected because the same certificate is associated with an IAM user in the account.</p>
    DuplicateCertificateException(crate::error::DuplicateCertificateException),
    /// <p>The request was rejected because the SSH public key is already associated with the specified IAM user.</p>
    DuplicateSshPublicKeyException(crate::error::DuplicateSshPublicKeyException),
    /// <p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExistsException(crate::error::EntityAlreadyExistsException),
    /// <p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>
    EntityTemporarilyUnmodifiableException(crate::error::EntityTemporarilyUnmodifiableException),
    /// <p>The request was rejected because the authentication code was not recognized. The error message describes the specific error.</p>
    InvalidAuthenticationCodeException(crate::error::InvalidAuthenticationCodeException),
    /// <p>The request was rejected because the certificate is invalid.</p>
    InvalidCertificateException(crate::error::InvalidCertificateException),
    /// <p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInputException(crate::error::InvalidInputException),
    /// <p>The request was rejected because the public key is malformed or otherwise invalid.</p>
    InvalidPublicKeyException(crate::error::InvalidPublicKeyException),
    /// <p>The request was rejected because the type of user for the transaction was incorrect.</p>
    InvalidUserTypeException(crate::error::InvalidUserTypeException),
    /// <p>The request was rejected because the public key certificate and the private key do not match.</p>
    KeyPairMismatchException(crate::error::KeyPairMismatchException),
    /// <p>The request was rejected because it attempted to create resources beyond the current Amazon Web Services account limits. The error message describes the limit exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The request was rejected because the certificate was malformed or expired. The error message describes the specific error.</p>
    MalformedCertificateException(crate::error::MalformedCertificateException),
    /// <p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>
    MalformedPolicyDocumentException(crate::error::MalformedPolicyDocumentException),
    /// <p>The request was rejected because it referenced a resource entity that does not exist. The error message describes the resource.</p>
    NoSuchEntityException(crate::error::NoSuchEntityException),
    /// <p>The request was rejected because the provided password did not meet the requirements imposed by the account password policy.</p>
    PasswordPolicyViolationException(crate::error::PasswordPolicyViolationException),
    /// <p>The request failed because a provided policy could not be successfully evaluated. An additional detailed message indicates the source of the failure.</p>
    PolicyEvaluationException(crate::error::PolicyEvaluationException),
    /// <p>The request failed because Amazon Web Services service role policies can only be attached to the service-linked role for that service.</p>
    PolicyNotAttachableException(crate::error::PolicyNotAttachableException),
    /// <p>The request failed because the maximum number of concurrent requests for this account are already running.</p>
    ReportGenerationLimitExceededException(crate::error::ReportGenerationLimitExceededException),
    /// <p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailureException(crate::error::ServiceFailureException),
    /// <p>The specified service does not support service-specific credentials.</p>
    ServiceNotSupportedException(crate::error::ServiceNotSupportedException),
    /// <p>The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.</p>
    UnmodifiableEntityException(crate::error::UnmodifiableEntityException),
    /// <p>The request was rejected because the public key encoding format is unsupported or unrecognized.</p>
    UnrecognizedPublicKeyEncodingException(crate::error::UnrecognizedPublicKeyEncodingException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::CredentialReportExpiredException(inner) => inner.fmt(f),
            Error::CredentialReportNotPresentException(inner) => inner.fmt(f),
            Error::CredentialReportNotReadyException(inner) => inner.fmt(f),
            Error::DeleteConflictException(inner) => inner.fmt(f),
            Error::DuplicateCertificateException(inner) => inner.fmt(f),
            Error::DuplicateSshPublicKeyException(inner) => inner.fmt(f),
            Error::EntityAlreadyExistsException(inner) => inner.fmt(f),
            Error::EntityTemporarilyUnmodifiableException(inner) => inner.fmt(f),
            Error::InvalidAuthenticationCodeException(inner) => inner.fmt(f),
            Error::InvalidCertificateException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::InvalidPublicKeyException(inner) => inner.fmt(f),
            Error::InvalidUserTypeException(inner) => inner.fmt(f),
            Error::KeyPairMismatchException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::MalformedCertificateException(inner) => inner.fmt(f),
            Error::MalformedPolicyDocumentException(inner) => inner.fmt(f),
            Error::NoSuchEntityException(inner) => inner.fmt(f),
            Error::PasswordPolicyViolationException(inner) => inner.fmt(f),
            Error::PolicyEvaluationException(inner) => inner.fmt(f),
            Error::PolicyNotAttachableException(inner) => inner.fmt(f),
            Error::ReportGenerationLimitExceededException(inner) => inner.fmt(f),
            Error::ServiceFailureException(inner) => inner.fmt(f),
            Error::ServiceNotSupportedException(inner) => inner.fmt(f),
            Error::UnmodifiableEntityException(inner) => inner.fmt(f),
            Error::UnrecognizedPublicKeyEncodingException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::AddClientIDToOpenIDConnectProviderError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AddClientIDToOpenIDConnectProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddClientIDToOpenIDConnectProviderError> for Error {
    fn from(err: crate::error::AddClientIDToOpenIDConnectProviderError) -> Self {
        match err {
            crate::error::AddClientIDToOpenIDConnectProviderError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AddClientIDToOpenIDConnectProviderError::LimitExceededException(
                inner,
            ) => Error::LimitExceededException(inner),
            crate::error::AddClientIDToOpenIDConnectProviderError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::AddClientIDToOpenIDConnectProviderError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::error::AddClientIDToOpenIDConnectProviderError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddRoleToInstanceProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddRoleToInstanceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddRoleToInstanceProfileError> for Error {
    fn from(err: crate::error::AddRoleToInstanceProfileError) -> Self {
        match err {
            crate::error::AddRoleToInstanceProfileError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::AddRoleToInstanceProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AddRoleToInstanceProfileError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::AddRoleToInstanceProfileError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::AddRoleToInstanceProfileError::UnmodifiableEntityException(inner) => {
                Error::UnmodifiableEntityException(inner)
            }
            crate::error::AddRoleToInstanceProfileError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddUserToGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddUserToGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddUserToGroupError> for Error {
    fn from(err: crate::error::AddUserToGroupError) -> Self {
        match err {
            crate::error::AddUserToGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AddUserToGroupError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::AddUserToGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::AddUserToGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AttachGroupPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AttachGroupPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachGroupPolicyError> for Error {
    fn from(err: crate::error::AttachGroupPolicyError) -> Self {
        match err {
            crate::error::AttachGroupPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AttachGroupPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AttachGroupPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::AttachGroupPolicyError::PolicyNotAttachableException(inner) => {
                Error::PolicyNotAttachableException(inner)
            }
            crate::error::AttachGroupPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::AttachGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AttachRolePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AttachRolePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachRolePolicyError> for Error {
    fn from(err: crate::error::AttachRolePolicyError) -> Self {
        match err {
            crate::error::AttachRolePolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AttachRolePolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AttachRolePolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::AttachRolePolicyError::PolicyNotAttachableException(inner) => {
                Error::PolicyNotAttachableException(inner)
            }
            crate::error::AttachRolePolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::AttachRolePolicyError::UnmodifiableEntityException(inner) => {
                Error::UnmodifiableEntityException(inner)
            }
            crate::error::AttachRolePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AttachUserPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AttachUserPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachUserPolicyError> for Error {
    fn from(err: crate::error::AttachUserPolicyError) -> Self {
        match err {
            crate::error::AttachUserPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AttachUserPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AttachUserPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::AttachUserPolicyError::PolicyNotAttachableException(inner) => {
                Error::PolicyNotAttachableException(inner)
            }
            crate::error::AttachUserPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::AttachUserPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ChangePasswordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ChangePasswordError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ChangePasswordError> for Error {
    fn from(err: crate::error::ChangePasswordError) -> Self {
        match err {
            crate::error::ChangePasswordError::EntityTemporarilyUnmodifiableException(inner) => {
                Error::EntityTemporarilyUnmodifiableException(inner)
            }
            crate::error::ChangePasswordError::InvalidUserTypeException(inner) => {
                Error::InvalidUserTypeException(inner)
            }
            crate::error::ChangePasswordError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ChangePasswordError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ChangePasswordError::PasswordPolicyViolationException(inner) => {
                Error::PasswordPolicyViolationException(inner)
            }
            crate::error::ChangePasswordError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ChangePasswordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAccessKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAccessKeyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAccessKeyError> for Error {
    fn from(err: crate::error::CreateAccessKeyError) -> Self {
        match err {
            crate::error::CreateAccessKeyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateAccessKeyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::CreateAccessKeyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateAccessKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAccountAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAccountAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAccountAliasError> for Error {
    fn from(err: crate::error::CreateAccountAliasError) -> Self {
        match err {
            crate::error::CreateAccountAliasError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::CreateAccountAliasError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateAccountAliasError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateAccountAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGroupError> for Error {
    fn from(err: crate::error::CreateGroupError) -> Self {
        match err {
            crate::error::CreateGroupError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::CreateGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateGroupError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::CreateGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateInstanceProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateInstanceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateInstanceProfileError> for Error {
    fn from(err: crate::error::CreateInstanceProfileError) -> Self {
        match err {
            crate::error::CreateInstanceProfileError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateInstanceProfileError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::CreateInstanceProfileError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateInstanceProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateInstanceProfileError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLoginProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateLoginProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLoginProfileError> for Error {
    fn from(err: crate::error::CreateLoginProfileError) -> Self {
        match err {
            crate::error::CreateLoginProfileError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::CreateLoginProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateLoginProfileError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::CreateLoginProfileError::PasswordPolicyViolationException(inner) => {
                Error::PasswordPolicyViolationException(inner)
            }
            crate::error::CreateLoginProfileError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateLoginProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateOpenIDConnectProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateOpenIDConnectProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateOpenIDConnectProviderError> for Error {
    fn from(err: crate::error::CreateOpenIDConnectProviderError) -> Self {
        match err {
            crate::error::CreateOpenIDConnectProviderError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::error::CreateOpenIDConnectProviderError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::CreateOpenIDConnectProviderError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateOpenIDConnectProviderError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateOpenIDConnectProviderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateOpenIDConnectProviderError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePolicyError> for Error {
    fn from(err: crate::error::CreatePolicyError) -> Self {
        match err {
            crate::error::CreatePolicyError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreatePolicyError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::CreatePolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreatePolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreatePolicyError::MalformedPolicyDocumentException(inner) => {
                Error::MalformedPolicyDocumentException(inner)
            }
            crate::error::CreatePolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreatePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePolicyVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePolicyVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePolicyVersionError> for Error {
    fn from(err: crate::error::CreatePolicyVersionError) -> Self {
        match err {
            crate::error::CreatePolicyVersionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreatePolicyVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreatePolicyVersionError::MalformedPolicyDocumentException(inner) => {
                Error::MalformedPolicyDocumentException(inner)
            }
            crate::error::CreatePolicyVersionError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::CreatePolicyVersionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreatePolicyVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRoleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateRoleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRoleError> for Error {
    fn from(err: crate::error::CreateRoleError) -> Self {
        match err {
            crate::error::CreateRoleError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateRoleError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::CreateRoleError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateRoleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateRoleError::MalformedPolicyDocumentException(inner) => {
                Error::MalformedPolicyDocumentException(inner)
            }
            crate::error::CreateRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSAMLProviderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSAMLProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSAMLProviderError> for Error {
    fn from(err: crate::error::CreateSAMLProviderError) -> Self {
        match err {
            crate::error::CreateSAMLProviderError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateSAMLProviderError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::CreateSAMLProviderError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateSAMLProviderError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateSAMLProviderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateSAMLProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateServiceLinkedRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateServiceLinkedRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateServiceLinkedRoleError> for Error {
    fn from(err: crate::error::CreateServiceLinkedRoleError) -> Self {
        match err {
            crate::error::CreateServiceLinkedRoleError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateServiceLinkedRoleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateServiceLinkedRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::CreateServiceLinkedRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateServiceLinkedRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateServiceSpecificCredentialError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateServiceSpecificCredentialError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateServiceSpecificCredentialError> for Error {
    fn from(err: crate::error::CreateServiceSpecificCredentialError) -> Self {
        match err {
            crate::error::CreateServiceSpecificCredentialError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateServiceSpecificCredentialError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::CreateServiceSpecificCredentialError::ServiceNotSupportedException(
                inner,
            ) => Error::ServiceNotSupportedException(inner),
            crate::error::CreateServiceSpecificCredentialError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserError> for Error {
    fn from(err: crate::error::CreateUserError) -> Self {
        match err {
            crate::error::CreateUserError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateUserError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::CreateUserError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateUserError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateUserError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::CreateUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVirtualMFADeviceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVirtualMFADeviceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVirtualMFADeviceError> for Error {
    fn from(err: crate::error::CreateVirtualMFADeviceError) -> Self {
        match err {
            crate::error::CreateVirtualMFADeviceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateVirtualMFADeviceError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::CreateVirtualMFADeviceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateVirtualMFADeviceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateVirtualMFADeviceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateVirtualMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeactivateMFADeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeactivateMFADeviceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeactivateMFADeviceError> for Error {
    fn from(err: crate::error::DeactivateMFADeviceError) -> Self {
        match err {
            crate::error::DeactivateMFADeviceError::EntityTemporarilyUnmodifiableException(
                inner,
            ) => Error::EntityTemporarilyUnmodifiableException(inner),
            crate::error::DeactivateMFADeviceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeactivateMFADeviceError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeactivateMFADeviceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeactivateMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAccessKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAccessKeyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAccessKeyError> for Error {
    fn from(err: crate::error::DeleteAccessKeyError) -> Self {
        match err {
            crate::error::DeleteAccessKeyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteAccessKeyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteAccessKeyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteAccessKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAccountAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAccountAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAccountAliasError> for Error {
    fn from(err: crate::error::DeleteAccountAliasError) -> Self {
        match err {
            crate::error::DeleteAccountAliasError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteAccountAliasError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteAccountAliasError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteAccountAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAccountPasswordPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAccountPasswordPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAccountPasswordPolicyError> for Error {
    fn from(err: crate::error::DeleteAccountPasswordPolicyError) -> Self {
        match err {
            crate::error::DeleteAccountPasswordPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteAccountPasswordPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteAccountPasswordPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteAccountPasswordPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGroupError> for Error {
    fn from(err: crate::error::DeleteGroupError) -> Self {
        match err {
            crate::error::DeleteGroupError::DeleteConflictException(inner) => {
                Error::DeleteConflictException(inner)
            }
            crate::error::DeleteGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteGroupError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGroupPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGroupPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGroupPolicyError> for Error {
    fn from(err: crate::error::DeleteGroupPolicyError) -> Self {
        match err {
            crate::error::DeleteGroupPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteGroupPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteGroupPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInstanceProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteInstanceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInstanceProfileError> for Error {
    fn from(err: crate::error::DeleteInstanceProfileError) -> Self {
        match err {
            crate::error::DeleteInstanceProfileError::DeleteConflictException(inner) => {
                Error::DeleteConflictException(inner)
            }
            crate::error::DeleteInstanceProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteInstanceProfileError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteInstanceProfileError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLoginProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteLoginProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLoginProfileError> for Error {
    fn from(err: crate::error::DeleteLoginProfileError) -> Self {
        match err {
            crate::error::DeleteLoginProfileError::EntityTemporarilyUnmodifiableException(
                inner,
            ) => Error::EntityTemporarilyUnmodifiableException(inner),
            crate::error::DeleteLoginProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteLoginProfileError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteLoginProfileError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteLoginProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteOpenIDConnectProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteOpenIDConnectProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteOpenIDConnectProviderError> for Error {
    fn from(err: crate::error::DeleteOpenIDConnectProviderError) -> Self {
        match err {
            crate::error::DeleteOpenIDConnectProviderError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteOpenIDConnectProviderError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteOpenIDConnectProviderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteOpenIDConnectProviderError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePolicyError> for Error {
    fn from(err: crate::error::DeletePolicyError) -> Self {
        match err {
            crate::error::DeletePolicyError::DeleteConflictException(inner) => {
                Error::DeleteConflictException(inner)
            }
            crate::error::DeletePolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeletePolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeletePolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeletePolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeletePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePolicyVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeletePolicyVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePolicyVersionError> for Error {
    fn from(err: crate::error::DeletePolicyVersionError) -> Self {
        match err {
            crate::error::DeletePolicyVersionError::DeleteConflictException(inner) => {
                Error::DeleteConflictException(inner)
            }
            crate::error::DeletePolicyVersionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeletePolicyVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeletePolicyVersionError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeletePolicyVersionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeletePolicyVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRoleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRoleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRoleError> for Error {
    fn from(err: crate::error::DeleteRoleError) -> Self {
        match err {
            crate::error::DeleteRoleError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteRoleError::DeleteConflictException(inner) => {
                Error::DeleteConflictException(inner)
            }
            crate::error::DeleteRoleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteRoleError::UnmodifiableEntityException(inner) => {
                Error::UnmodifiableEntityException(inner)
            }
            crate::error::DeleteRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRolePermissionsBoundaryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRolePermissionsBoundaryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRolePermissionsBoundaryError> for Error {
    fn from(err: crate::error::DeleteRolePermissionsBoundaryError) -> Self {
        match err {
            crate::error::DeleteRolePermissionsBoundaryError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteRolePermissionsBoundaryError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteRolePermissionsBoundaryError::UnmodifiableEntityException(
                inner,
            ) => Error::UnmodifiableEntityException(inner),
            crate::error::DeleteRolePermissionsBoundaryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRolePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRolePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRolePolicyError> for Error {
    fn from(err: crate::error::DeleteRolePolicyError) -> Self {
        match err {
            crate::error::DeleteRolePolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteRolePolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteRolePolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteRolePolicyError::UnmodifiableEntityException(inner) => {
                Error::UnmodifiableEntityException(inner)
            }
            crate::error::DeleteRolePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSAMLProviderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSAMLProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSAMLProviderError> for Error {
    fn from(err: crate::error::DeleteSAMLProviderError) -> Self {
        match err {
            crate::error::DeleteSAMLProviderError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteSAMLProviderError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteSAMLProviderError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteSAMLProviderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteSAMLProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteServerCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteServerCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteServerCertificateError> for Error {
    fn from(err: crate::error::DeleteServerCertificateError) -> Self {
        match err {
            crate::error::DeleteServerCertificateError::DeleteConflictException(inner) => {
                Error::DeleteConflictException(inner)
            }
            crate::error::DeleteServerCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteServerCertificateError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteServerCertificateError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteServerCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteServiceLinkedRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteServiceLinkedRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteServiceLinkedRoleError> for Error {
    fn from(err: crate::error::DeleteServiceLinkedRoleError) -> Self {
        match err {
            crate::error::DeleteServiceLinkedRoleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteServiceLinkedRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteServiceLinkedRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteServiceLinkedRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteServiceSpecificCredentialError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteServiceSpecificCredentialError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteServiceSpecificCredentialError> for Error {
    fn from(err: crate::error::DeleteServiceSpecificCredentialError) -> Self {
        match err {
            crate::error::DeleteServiceSpecificCredentialError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteServiceSpecificCredentialError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSigningCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSigningCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSigningCertificateError> for Error {
    fn from(err: crate::error::DeleteSigningCertificateError) -> Self {
        match err {
            crate::error::DeleteSigningCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteSigningCertificateError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteSigningCertificateError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteSigningCertificateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSSHPublicKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSSHPublicKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSSHPublicKeyError> for Error {
    fn from(err: crate::error::DeleteSSHPublicKeyError) -> Self {
        match err {
            crate::error::DeleteSSHPublicKeyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteSSHPublicKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserError> for Error {
    fn from(err: crate::error::DeleteUserError) -> Self {
        match err {
            crate::error::DeleteUserError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteUserError::DeleteConflictException(inner) => {
                Error::DeleteConflictException(inner)
            }
            crate::error::DeleteUserError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteUserError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserPermissionsBoundaryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteUserPermissionsBoundaryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserPermissionsBoundaryError> for Error {
    fn from(err: crate::error::DeleteUserPermissionsBoundaryError) -> Self {
        match err {
            crate::error::DeleteUserPermissionsBoundaryError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteUserPermissionsBoundaryError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteUserPermissionsBoundaryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteUserPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserPolicyError> for Error {
    fn from(err: crate::error::DeleteUserPolicyError) -> Self {
        match err {
            crate::error::DeleteUserPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteUserPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteUserPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteUserPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVirtualMFADeviceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVirtualMFADeviceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVirtualMFADeviceError> for Error {
    fn from(err: crate::error::DeleteVirtualMFADeviceError) -> Self {
        match err {
            crate::error::DeleteVirtualMFADeviceError::DeleteConflictException(inner) => {
                Error::DeleteConflictException(inner)
            }
            crate::error::DeleteVirtualMFADeviceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteVirtualMFADeviceError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DeleteVirtualMFADeviceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteVirtualMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetachGroupPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DetachGroupPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachGroupPolicyError> for Error {
    fn from(err: crate::error::DetachGroupPolicyError) -> Self {
        match err {
            crate::error::DetachGroupPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DetachGroupPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DetachGroupPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DetachGroupPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DetachGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetachRolePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DetachRolePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachRolePolicyError> for Error {
    fn from(err: crate::error::DetachRolePolicyError) -> Self {
        match err {
            crate::error::DetachRolePolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DetachRolePolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DetachRolePolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DetachRolePolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DetachRolePolicyError::UnmodifiableEntityException(inner) => {
                Error::UnmodifiableEntityException(inner)
            }
            crate::error::DetachRolePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetachUserPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DetachUserPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachUserPolicyError> for Error {
    fn from(err: crate::error::DetachUserPolicyError) -> Self {
        match err {
            crate::error::DetachUserPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DetachUserPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DetachUserPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::DetachUserPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DetachUserPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::EnableMFADeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::EnableMFADeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EnableMFADeviceError> for Error {
    fn from(err: crate::error::EnableMFADeviceError) -> Self {
        match err {
            crate::error::EnableMFADeviceError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::EnableMFADeviceError::EntityTemporarilyUnmodifiableException(inner) => {
                Error::EntityTemporarilyUnmodifiableException(inner)
            }
            crate::error::EnableMFADeviceError::InvalidAuthenticationCodeException(inner) => {
                Error::InvalidAuthenticationCodeException(inner)
            }
            crate::error::EnableMFADeviceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::EnableMFADeviceError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::EnableMFADeviceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::EnableMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GenerateCredentialReportError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GenerateCredentialReportError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GenerateCredentialReportError> for Error {
    fn from(err: crate::error::GenerateCredentialReportError) -> Self {
        match err {
            crate::error::GenerateCredentialReportError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GenerateCredentialReportError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GenerateCredentialReportError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GenerateOrganizationsAccessReportError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GenerateOrganizationsAccessReportError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GenerateOrganizationsAccessReportError> for Error {
    fn from(err: crate::error::GenerateOrganizationsAccessReportError) -> Self {
        match err {
            crate::error::GenerateOrganizationsAccessReportError::ReportGenerationLimitExceededException(inner) => Error::ReportGenerationLimitExceededException(inner),
            crate::error::GenerateOrganizationsAccessReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::GenerateServiceLastAccessedDetailsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GenerateServiceLastAccessedDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GenerateServiceLastAccessedDetailsError> for Error {
    fn from(err: crate::error::GenerateServiceLastAccessedDetailsError) -> Self {
        match err {
            crate::error::GenerateServiceLastAccessedDetailsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GenerateServiceLastAccessedDetailsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GenerateServiceLastAccessedDetailsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccessKeyLastUsedError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAccessKeyLastUsedError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccessKeyLastUsedError> for Error {
    fn from(err: crate::error::GetAccessKeyLastUsedError) -> Self {
        match err {
            crate::error::GetAccessKeyLastUsedError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetAccessKeyLastUsedError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetAccountAuthorizationDetailsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetAccountAuthorizationDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccountAuthorizationDetailsError> for Error {
    fn from(err: crate::error::GetAccountAuthorizationDetailsError) -> Self {
        match err {
            crate::error::GetAccountAuthorizationDetailsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetAccountAuthorizationDetailsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccountPasswordPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAccountPasswordPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccountPasswordPolicyError> for Error {
    fn from(err: crate::error::GetAccountPasswordPolicyError) -> Self {
        match err {
            crate::error::GetAccountPasswordPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetAccountPasswordPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetAccountPasswordPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccountSummaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAccountSummaryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccountSummaryError> for Error {
    fn from(err: crate::error::GetAccountSummaryError) -> Self {
        match err {
            crate::error::GetAccountSummaryError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetAccountSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContextKeysForCustomPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContextKeysForCustomPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContextKeysForCustomPolicyError> for Error {
    fn from(err: crate::error::GetContextKeysForCustomPolicyError) -> Self {
        match err {
            crate::error::GetContextKeysForCustomPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetContextKeysForCustomPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetContextKeysForPrincipalPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetContextKeysForPrincipalPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContextKeysForPrincipalPolicyError> for Error {
    fn from(err: crate::error::GetContextKeysForPrincipalPolicyError) -> Self {
        match err {
            crate::error::GetContextKeysForPrincipalPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetContextKeysForPrincipalPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetContextKeysForPrincipalPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCredentialReportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCredentialReportError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCredentialReportError> for Error {
    fn from(err: crate::error::GetCredentialReportError) -> Self {
        match err {
            crate::error::GetCredentialReportError::CredentialReportExpiredException(inner) => {
                Error::CredentialReportExpiredException(inner)
            }
            crate::error::GetCredentialReportError::CredentialReportNotPresentException(inner) => {
                Error::CredentialReportNotPresentException(inner)
            }
            crate::error::GetCredentialReportError::CredentialReportNotReadyException(inner) => {
                Error::CredentialReportNotReadyException(inner)
            }
            crate::error::GetCredentialReportError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetCredentialReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGroupError> for Error {
    fn from(err: crate::error::GetGroupError) -> Self {
        match err {
            crate::error::GetGroupError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGroupPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGroupPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGroupPolicyError> for Error {
    fn from(err: crate::error::GetGroupPolicyError) -> Self {
        match err {
            crate::error::GetGroupPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetGroupPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstanceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInstanceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstanceProfileError> for Error {
    fn from(err: crate::error::GetInstanceProfileError) -> Self {
        match err {
            crate::error::GetInstanceProfileError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetInstanceProfileError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLoginProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetLoginProfileError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLoginProfileError> for Error {
    fn from(err: crate::error::GetLoginProfileError) -> Self {
        match err {
            crate::error::GetLoginProfileError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetLoginProfileError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetLoginProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOpenIDConnectProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetOpenIDConnectProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOpenIDConnectProviderError> for Error {
    fn from(err: crate::error::GetOpenIDConnectProviderError) -> Self {
        match err {
            crate::error::GetOpenIDConnectProviderError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetOpenIDConnectProviderError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetOpenIDConnectProviderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetOpenIDConnectProviderError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOrganizationsAccessReportError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetOrganizationsAccessReportError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOrganizationsAccessReportError> for Error {
    fn from(err: crate::error::GetOrganizationsAccessReportError) -> Self {
        match err {
            crate::error::GetOrganizationsAccessReportError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetOrganizationsAccessReportError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPolicyError> for Error {
    fn from(err: crate::error::GetPolicyError) -> Self {
        match err {
            crate::error::GetPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPolicyVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPolicyVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPolicyVersionError> for Error {
    fn from(err: crate::error::GetPolicyVersionError) -> Self {
        match err {
            crate::error::GetPolicyVersionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetPolicyVersionError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetPolicyVersionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetPolicyVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRoleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRoleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRoleError> for Error {
    fn from(err: crate::error::GetRoleError) -> Self {
        match err {
            crate::error::GetRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRolePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRolePolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRolePolicyError> for Error {
    fn from(err: crate::error::GetRolePolicyError) -> Self {
        match err {
            crate::error::GetRolePolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetRolePolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetRolePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSAMLProviderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSAMLProviderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSAMLProviderError> for Error {
    fn from(err: crate::error::GetSAMLProviderError) -> Self {
        match err {
            crate::error::GetSAMLProviderError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetSAMLProviderError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetSAMLProviderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetSAMLProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetServerCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetServerCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServerCertificateError> for Error {
    fn from(err: crate::error::GetServerCertificateError) -> Self {
        match err {
            crate::error::GetServerCertificateError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetServerCertificateError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetServerCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetServiceLastAccessedDetailsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetServiceLastAccessedDetailsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServiceLastAccessedDetailsError> for Error {
    fn from(err: crate::error::GetServiceLastAccessedDetailsError) -> Self {
        match err {
            crate::error::GetServiceLastAccessedDetailsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetServiceLastAccessedDetailsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetServiceLastAccessedDetailsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetServiceLastAccessedDetailsWithEntitiesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetServiceLastAccessedDetailsWithEntitiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServiceLastAccessedDetailsWithEntitiesError> for Error {
    fn from(err: crate::error::GetServiceLastAccessedDetailsWithEntitiesError) -> Self {
        match err {
            crate::error::GetServiceLastAccessedDetailsWithEntitiesError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::error::GetServiceLastAccessedDetailsWithEntitiesError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::error::GetServiceLastAccessedDetailsWithEntitiesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::GetServiceLinkedRoleDeletionStatusError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetServiceLinkedRoleDeletionStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServiceLinkedRoleDeletionStatusError> for Error {
    fn from(err: crate::error::GetServiceLinkedRoleDeletionStatusError) -> Self {
        match err {
            crate::error::GetServiceLinkedRoleDeletionStatusError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetServiceLinkedRoleDeletionStatusError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetServiceLinkedRoleDeletionStatusError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::error::GetServiceLinkedRoleDeletionStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSSHPublicKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSSHPublicKeyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSSHPublicKeyError> for Error {
    fn from(err: crate::error::GetSSHPublicKeyError) -> Self {
        match err {
            crate::error::GetSSHPublicKeyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetSSHPublicKeyError::UnrecognizedPublicKeyEncodingException(inner) => {
                Error::UnrecognizedPublicKeyEncodingException(inner)
            }
            crate::error::GetSSHPublicKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUserError> for Error {
    fn from(err: crate::error::GetUserError) -> Self {
        match err {
            crate::error::GetUserError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUserPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUserPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUserPolicyError> for Error {
    fn from(err: crate::error::GetUserPolicyError) -> Self {
        match err {
            crate::error::GetUserPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::GetUserPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetUserPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAccessKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAccessKeysError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAccessKeysError> for Error {
    fn from(err: crate::error::ListAccessKeysError) -> Self {
        match err {
            crate::error::ListAccessKeysError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListAccessKeysError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAccessKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAccountAliasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAccountAliasesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAccountAliasesError> for Error {
    fn from(err: crate::error::ListAccountAliasesError) -> Self {
        match err {
            crate::error::ListAccountAliasesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAccountAliasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAttachedGroupPoliciesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAttachedGroupPoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAttachedGroupPoliciesError> for Error {
    fn from(err: crate::error::ListAttachedGroupPoliciesError) -> Self {
        match err {
            crate::error::ListAttachedGroupPoliciesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListAttachedGroupPoliciesError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListAttachedGroupPoliciesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAttachedGroupPoliciesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAttachedRolePoliciesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAttachedRolePoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAttachedRolePoliciesError> for Error {
    fn from(err: crate::error::ListAttachedRolePoliciesError) -> Self {
        match err {
            crate::error::ListAttachedRolePoliciesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListAttachedRolePoliciesError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListAttachedRolePoliciesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAttachedRolePoliciesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAttachedUserPoliciesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAttachedUserPoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAttachedUserPoliciesError> for Error {
    fn from(err: crate::error::ListAttachedUserPoliciesError) -> Self {
        match err {
            crate::error::ListAttachedUserPoliciesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListAttachedUserPoliciesError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListAttachedUserPoliciesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAttachedUserPoliciesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEntitiesForPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEntitiesForPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEntitiesForPolicyError> for Error {
    fn from(err: crate::error::ListEntitiesForPolicyError) -> Self {
        match err {
            crate::error::ListEntitiesForPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListEntitiesForPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListEntitiesForPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListEntitiesForPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupPoliciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListGroupPoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGroupPoliciesError> for Error {
    fn from(err: crate::error::ListGroupPoliciesError) -> Self {
        match err {
            crate::error::ListGroupPoliciesError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListGroupPoliciesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListGroupPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGroupsError> for Error {
    fn from(err: crate::error::ListGroupsError) -> Self {
        match err {
            crate::error::ListGroupsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupsForUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListGroupsForUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGroupsForUserError> for Error {
    fn from(err: crate::error::ListGroupsForUserError) -> Self {
        match err {
            crate::error::ListGroupsForUserError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListGroupsForUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListGroupsForUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstanceProfilesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListInstanceProfilesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInstanceProfilesError> for Error {
    fn from(err: crate::error::ListInstanceProfilesError) -> Self {
        match err {
            crate::error::ListInstanceProfilesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListInstanceProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstanceProfilesForRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListInstanceProfilesForRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInstanceProfilesForRoleError> for Error {
    fn from(err: crate::error::ListInstanceProfilesForRoleError) -> Self {
        match err {
            crate::error::ListInstanceProfilesForRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListInstanceProfilesForRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListInstanceProfilesForRoleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstanceProfileTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListInstanceProfileTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInstanceProfileTagsError> for Error {
    fn from(err: crate::error::ListInstanceProfileTagsError) -> Self {
        match err {
            crate::error::ListInstanceProfileTagsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListInstanceProfileTagsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListInstanceProfileTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMFADevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMFADevicesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMFADevicesError> for Error {
    fn from(err: crate::error::ListMFADevicesError) -> Self {
        match err {
            crate::error::ListMFADevicesError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListMFADevicesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListMFADevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMFADeviceTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListMFADeviceTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMFADeviceTagsError> for Error {
    fn from(err: crate::error::ListMFADeviceTagsError) -> Self {
        match err {
            crate::error::ListMFADeviceTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListMFADeviceTagsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListMFADeviceTagsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListMFADeviceTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOpenIDConnectProvidersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListOpenIDConnectProvidersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOpenIDConnectProvidersError> for Error {
    fn from(err: crate::error::ListOpenIDConnectProvidersError) -> Self {
        match err {
            crate::error::ListOpenIDConnectProvidersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListOpenIDConnectProvidersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOpenIDConnectProviderTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListOpenIDConnectProviderTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOpenIDConnectProviderTagsError> for Error {
    fn from(err: crate::error::ListOpenIDConnectProviderTagsError) -> Self {
        match err {
            crate::error::ListOpenIDConnectProviderTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListOpenIDConnectProviderTagsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListOpenIDConnectProviderTagsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListOpenIDConnectProviderTagsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPoliciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPoliciesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPoliciesError> for Error {
    fn from(err: crate::error::ListPoliciesError) -> Self {
        match err {
            crate::error::ListPoliciesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListPoliciesGrantingServiceAccessError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListPoliciesGrantingServiceAccessError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPoliciesGrantingServiceAccessError> for Error {
    fn from(err: crate::error::ListPoliciesGrantingServiceAccessError) -> Self {
        match err {
            crate::error::ListPoliciesGrantingServiceAccessError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListPoliciesGrantingServiceAccessError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListPoliciesGrantingServiceAccessError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPolicyTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPolicyTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPolicyTagsError> for Error {
    fn from(err: crate::error::ListPolicyTagsError) -> Self {
        match err {
            crate::error::ListPolicyTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListPolicyTagsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListPolicyTagsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListPolicyTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPolicyVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPolicyVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPolicyVersionsError> for Error {
    fn from(err: crate::error::ListPolicyVersionsError) -> Self {
        match err {
            crate::error::ListPolicyVersionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListPolicyVersionsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListPolicyVersionsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListPolicyVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRolePoliciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRolePoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRolePoliciesError> for Error {
    fn from(err: crate::error::ListRolePoliciesError) -> Self {
        match err {
            crate::error::ListRolePoliciesError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListRolePoliciesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListRolePoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRolesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRolesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRolesError> for Error {
    fn from(err: crate::error::ListRolesError) -> Self {
        match err {
            crate::error::ListRolesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListRolesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRoleTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRoleTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRoleTagsError> for Error {
    fn from(err: crate::error::ListRoleTagsError) -> Self {
        match err {
            crate::error::ListRoleTagsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListRoleTagsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListRoleTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSAMLProvidersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSAMLProvidersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSAMLProvidersError> for Error {
    fn from(err: crate::error::ListSAMLProvidersError) -> Self {
        match err {
            crate::error::ListSAMLProvidersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListSAMLProvidersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSAMLProviderTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSAMLProviderTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSAMLProviderTagsError> for Error {
    fn from(err: crate::error::ListSAMLProviderTagsError) -> Self {
        match err {
            crate::error::ListSAMLProviderTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListSAMLProviderTagsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListSAMLProviderTagsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListSAMLProviderTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListServerCertificatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListServerCertificatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServerCertificatesError> for Error {
    fn from(err: crate::error::ListServerCertificatesError) -> Self {
        match err {
            crate::error::ListServerCertificatesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListServerCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListServerCertificateTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListServerCertificateTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServerCertificateTagsError> for Error {
    fn from(err: crate::error::ListServerCertificateTagsError) -> Self {
        match err {
            crate::error::ListServerCertificateTagsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListServerCertificateTagsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListServerCertificateTagsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListServiceSpecificCredentialsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListServiceSpecificCredentialsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServiceSpecificCredentialsError> for Error {
    fn from(err: crate::error::ListServiceSpecificCredentialsError) -> Self {
        match err {
            crate::error::ListServiceSpecificCredentialsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListServiceSpecificCredentialsError::ServiceNotSupportedException(
                inner,
            ) => Error::ServiceNotSupportedException(inner),
            crate::error::ListServiceSpecificCredentialsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSigningCertificatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSigningCertificatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSigningCertificatesError> for Error {
    fn from(err: crate::error::ListSigningCertificatesError) -> Self {
        match err {
            crate::error::ListSigningCertificatesError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListSigningCertificatesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListSigningCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSSHPublicKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSSHPublicKeysError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSSHPublicKeysError> for Error {
    fn from(err: crate::error::ListSSHPublicKeysError) -> Self {
        match err {
            crate::error::ListSSHPublicKeysError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListSSHPublicKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUserPoliciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListUserPoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUserPoliciesError> for Error {
    fn from(err: crate::error::ListUserPoliciesError) -> Self {
        match err {
            crate::error::ListUserPoliciesError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListUserPoliciesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListUserPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUsersError> for Error {
    fn from(err: crate::error::ListUsersError) -> Self {
        match err {
            crate::error::ListUsersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUserTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUserTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUserTagsError> for Error {
    fn from(err: crate::error::ListUserTagsError) -> Self {
        match err {
            crate::error::ListUserTagsError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ListUserTagsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListUserTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVirtualMFADevicesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVirtualMFADevicesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVirtualMFADevicesError> for Error {
    fn from(err: crate::error::ListVirtualMFADevicesError) -> Self {
        match err {
            crate::error::ListVirtualMFADevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutGroupPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutGroupPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutGroupPolicyError> for Error {
    fn from(err: crate::error::PutGroupPolicyError) -> Self {
        match err {
            crate::error::PutGroupPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutGroupPolicyError::MalformedPolicyDocumentException(inner) => {
                Error::MalformedPolicyDocumentException(inner)
            }
            crate::error::PutGroupPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::PutGroupPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRolePermissionsBoundaryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutRolePermissionsBoundaryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRolePermissionsBoundaryError> for Error {
    fn from(err: crate::error::PutRolePermissionsBoundaryError) -> Self {
        match err {
            crate::error::PutRolePermissionsBoundaryError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::PutRolePermissionsBoundaryError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::PutRolePermissionsBoundaryError::PolicyNotAttachableException(inner) => {
                Error::PolicyNotAttachableException(inner)
            }
            crate::error::PutRolePermissionsBoundaryError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutRolePermissionsBoundaryError::UnmodifiableEntityException(inner) => {
                Error::UnmodifiableEntityException(inner)
            }
            crate::error::PutRolePermissionsBoundaryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRolePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutRolePolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRolePolicyError> for Error {
    fn from(err: crate::error::PutRolePolicyError) -> Self {
        match err {
            crate::error::PutRolePolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutRolePolicyError::MalformedPolicyDocumentException(inner) => {
                Error::MalformedPolicyDocumentException(inner)
            }
            crate::error::PutRolePolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::PutRolePolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutRolePolicyError::UnmodifiableEntityException(inner) => {
                Error::UnmodifiableEntityException(inner)
            }
            crate::error::PutRolePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutUserPermissionsBoundaryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutUserPermissionsBoundaryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutUserPermissionsBoundaryError> for Error {
    fn from(err: crate::error::PutUserPermissionsBoundaryError) -> Self {
        match err {
            crate::error::PutUserPermissionsBoundaryError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::PutUserPermissionsBoundaryError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::PutUserPermissionsBoundaryError::PolicyNotAttachableException(inner) => {
                Error::PolicyNotAttachableException(inner)
            }
            crate::error::PutUserPermissionsBoundaryError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutUserPermissionsBoundaryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutUserPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutUserPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutUserPolicyError> for Error {
    fn from(err: crate::error::PutUserPolicyError) -> Self {
        match err {
            crate::error::PutUserPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutUserPolicyError::MalformedPolicyDocumentException(inner) => {
                Error::MalformedPolicyDocumentException(inner)
            }
            crate::error::PutUserPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::PutUserPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutUserPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::RemoveClientIDFromOpenIDConnectProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RemoveClientIDFromOpenIDConnectProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveClientIDFromOpenIDConnectProviderError> for Error {
    fn from(err: crate::error::RemoveClientIDFromOpenIDConnectProviderError) -> Self {
        match err {
            crate::error::RemoveClientIDFromOpenIDConnectProviderError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::error::RemoveClientIDFromOpenIDConnectProviderError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::error::RemoveClientIDFromOpenIDConnectProviderError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::error::RemoveClientIDFromOpenIDConnectProviderError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveRoleFromInstanceProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveRoleFromInstanceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveRoleFromInstanceProfileError> for Error {
    fn from(err: crate::error::RemoveRoleFromInstanceProfileError) -> Self {
        match err {
            crate::error::RemoveRoleFromInstanceProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::RemoveRoleFromInstanceProfileError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::RemoveRoleFromInstanceProfileError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::RemoveRoleFromInstanceProfileError::UnmodifiableEntityException(
                inner,
            ) => Error::UnmodifiableEntityException(inner),
            crate::error::RemoveRoleFromInstanceProfileError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveUserFromGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveUserFromGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveUserFromGroupError> for Error {
    fn from(err: crate::error::RemoveUserFromGroupError) -> Self {
        match err {
            crate::error::RemoveUserFromGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::RemoveUserFromGroupError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::RemoveUserFromGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::RemoveUserFromGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ResetServiceSpecificCredentialError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ResetServiceSpecificCredentialError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetServiceSpecificCredentialError> for Error {
    fn from(err: crate::error::ResetServiceSpecificCredentialError) -> Self {
        match err {
            crate::error::ResetServiceSpecificCredentialError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ResetServiceSpecificCredentialError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResyncMFADeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ResyncMFADeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResyncMFADeviceError> for Error {
    fn from(err: crate::error::ResyncMFADeviceError) -> Self {
        match err {
            crate::error::ResyncMFADeviceError::InvalidAuthenticationCodeException(inner) => {
                Error::InvalidAuthenticationCodeException(inner)
            }
            crate::error::ResyncMFADeviceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ResyncMFADeviceError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::ResyncMFADeviceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ResyncMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetDefaultPolicyVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetDefaultPolicyVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetDefaultPolicyVersionError> for Error {
    fn from(err: crate::error::SetDefaultPolicyVersionError) -> Self {
        match err {
            crate::error::SetDefaultPolicyVersionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::SetDefaultPolicyVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::SetDefaultPolicyVersionError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::SetDefaultPolicyVersionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::SetDefaultPolicyVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::SetSecurityTokenServicePreferencesError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::SetSecurityTokenServicePreferencesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetSecurityTokenServicePreferencesError> for Error {
    fn from(err: crate::error::SetSecurityTokenServicePreferencesError) -> Self {
        match err {
            crate::error::SetSecurityTokenServicePreferencesError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::error::SetSecurityTokenServicePreferencesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SimulateCustomPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SimulateCustomPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SimulateCustomPolicyError> for Error {
    fn from(err: crate::error::SimulateCustomPolicyError) -> Self {
        match err {
            crate::error::SimulateCustomPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::SimulateCustomPolicyError::PolicyEvaluationException(inner) => {
                Error::PolicyEvaluationException(inner)
            }
            crate::error::SimulateCustomPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SimulatePrincipalPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SimulatePrincipalPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SimulatePrincipalPolicyError> for Error {
    fn from(err: crate::error::SimulatePrincipalPolicyError) -> Self {
        match err {
            crate::error::SimulatePrincipalPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::SimulatePrincipalPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::SimulatePrincipalPolicyError::PolicyEvaluationException(inner) => {
                Error::PolicyEvaluationException(inner)
            }
            crate::error::SimulatePrincipalPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagInstanceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::TagInstanceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagInstanceProfileError> for Error {
    fn from(err: crate::error::TagInstanceProfileError) -> Self {
        match err {
            crate::error::TagInstanceProfileError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::TagInstanceProfileError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::TagInstanceProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagInstanceProfileError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::TagInstanceProfileError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagMFADeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagMFADeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagMFADeviceError> for Error {
    fn from(err: crate::error::TagMFADeviceError) -> Self {
        match err {
            crate::error::TagMFADeviceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::TagMFADeviceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::TagMFADeviceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagMFADeviceError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::TagMFADeviceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagOpenIDConnectProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::TagOpenIDConnectProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagOpenIDConnectProviderError> for Error {
    fn from(err: crate::error::TagOpenIDConnectProviderError) -> Self {
        match err {
            crate::error::TagOpenIDConnectProviderError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::TagOpenIDConnectProviderError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::TagOpenIDConnectProviderError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagOpenIDConnectProviderError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::TagOpenIDConnectProviderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagOpenIDConnectProviderError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagPolicyError> for Error {
    fn from(err: crate::error::TagPolicyError) -> Self {
        match err {
            crate::error::TagPolicyError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::TagPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::TagPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::TagPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagRoleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagRoleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagRoleError> for Error {
    fn from(err: crate::error::TagRoleError) -> Self {
        match err {
            crate::error::TagRoleError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::TagRoleError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::TagRoleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::TagRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagSAMLProviderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagSAMLProviderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagSAMLProviderError> for Error {
    fn from(err: crate::error::TagSAMLProviderError) -> Self {
        match err {
            crate::error::TagSAMLProviderError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::TagSAMLProviderError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::TagSAMLProviderError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagSAMLProviderError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::TagSAMLProviderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagSAMLProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagServerCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::TagServerCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagServerCertificateError> for Error {
    fn from(err: crate::error::TagServerCertificateError) -> Self {
        match err {
            crate::error::TagServerCertificateError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::TagServerCertificateError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::TagServerCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagServerCertificateError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::TagServerCertificateError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagServerCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagUserError> for Error {
    fn from(err: crate::error::TagUserError) -> Self {
        match err {
            crate::error::TagUserError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::TagUserError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::TagUserError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagUserError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::TagUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagInstanceProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UntagInstanceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagInstanceProfileError> for Error {
    fn from(err: crate::error::UntagInstanceProfileError) -> Self {
        match err {
            crate::error::UntagInstanceProfileError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UntagInstanceProfileError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UntagInstanceProfileError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UntagInstanceProfileError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagInstanceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagMFADeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagMFADeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagMFADeviceError> for Error {
    fn from(err: crate::error::UntagMFADeviceError) -> Self {
        match err {
            crate::error::UntagMFADeviceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UntagMFADeviceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UntagMFADeviceError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UntagMFADeviceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagMFADeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagOpenIDConnectProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UntagOpenIDConnectProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagOpenIDConnectProviderError> for Error {
    fn from(err: crate::error::UntagOpenIDConnectProviderError) -> Self {
        match err {
            crate::error::UntagOpenIDConnectProviderError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::error::UntagOpenIDConnectProviderError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UntagOpenIDConnectProviderError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UntagOpenIDConnectProviderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagOpenIDConnectProviderError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagPolicyError> for Error {
    fn from(err: crate::error::UntagPolicyError) -> Self {
        match err {
            crate::error::UntagPolicyError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UntagPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UntagPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UntagPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagRoleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagRoleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagRoleError> for Error {
    fn from(err: crate::error::UntagRoleError) -> Self {
        match err {
            crate::error::UntagRoleError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UntagRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UntagRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagSAMLProviderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UntagSAMLProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagSAMLProviderError> for Error {
    fn from(err: crate::error::UntagSAMLProviderError) -> Self {
        match err {
            crate::error::UntagSAMLProviderError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UntagSAMLProviderError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UntagSAMLProviderError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UntagSAMLProviderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagSAMLProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagServerCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UntagServerCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagServerCertificateError> for Error {
    fn from(err: crate::error::UntagServerCertificateError) -> Self {
        match err {
            crate::error::UntagServerCertificateError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UntagServerCertificateError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UntagServerCertificateError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UntagServerCertificateError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagServerCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagUserError> for Error {
    fn from(err: crate::error::UntagUserError) -> Self {
        match err {
            crate::error::UntagUserError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UntagUserError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UntagUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAccessKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateAccessKeyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAccessKeyError> for Error {
    fn from(err: crate::error::UpdateAccessKeyError) -> Self {
        match err {
            crate::error::UpdateAccessKeyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateAccessKeyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateAccessKeyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateAccessKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAccountPasswordPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAccountPasswordPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAccountPasswordPolicyError> for Error {
    fn from(err: crate::error::UpdateAccountPasswordPolicyError) -> Self {
        match err {
            crate::error::UpdateAccountPasswordPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateAccountPasswordPolicyError::MalformedPolicyDocumentException(
                inner,
            ) => Error::MalformedPolicyDocumentException(inner),
            crate::error::UpdateAccountPasswordPolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateAccountPasswordPolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateAccountPasswordPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAssumeRolePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAssumeRolePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAssumeRolePolicyError> for Error {
    fn from(err: crate::error::UpdateAssumeRolePolicyError) -> Self {
        match err {
            crate::error::UpdateAssumeRolePolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateAssumeRolePolicyError::MalformedPolicyDocumentException(inner) => {
                Error::MalformedPolicyDocumentException(inner)
            }
            crate::error::UpdateAssumeRolePolicyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateAssumeRolePolicyError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateAssumeRolePolicyError::UnmodifiableEntityException(inner) => {
                Error::UnmodifiableEntityException(inner)
            }
            crate::error::UpdateAssumeRolePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGroupError> for Error {
    fn from(err: crate::error::UpdateGroupError) -> Self {
        match err {
            crate::error::UpdateGroupError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::UpdateGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateGroupError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateGroupError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateLoginProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateLoginProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateLoginProfileError> for Error {
    fn from(err: crate::error::UpdateLoginProfileError) -> Self {
        match err {
            crate::error::UpdateLoginProfileError::EntityTemporarilyUnmodifiableException(
                inner,
            ) => Error::EntityTemporarilyUnmodifiableException(inner),
            crate::error::UpdateLoginProfileError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateLoginProfileError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateLoginProfileError::PasswordPolicyViolationException(inner) => {
                Error::PasswordPolicyViolationException(inner)
            }
            crate::error::UpdateLoginProfileError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateLoginProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateOpenIDConnectProviderThumbprintError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateOpenIDConnectProviderThumbprintError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateOpenIDConnectProviderThumbprintError> for Error {
    fn from(err: crate::error::UpdateOpenIDConnectProviderThumbprintError) -> Self {
        match err {
            crate::error::UpdateOpenIDConnectProviderThumbprintError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::error::UpdateOpenIDConnectProviderThumbprintError::NoSuchEntityException(
                inner,
            ) => Error::NoSuchEntityException(inner),
            crate::error::UpdateOpenIDConnectProviderThumbprintError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::error::UpdateOpenIDConnectProviderThumbprintError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRoleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateRoleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRoleError> for Error {
    fn from(err: crate::error::UpdateRoleError) -> Self {
        match err {
            crate::error::UpdateRoleError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateRoleError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateRoleError::UnmodifiableEntityException(inner) => {
                Error::UnmodifiableEntityException(inner)
            }
            crate::error::UpdateRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRoleDescriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRoleDescriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRoleDescriptionError> for Error {
    fn from(err: crate::error::UpdateRoleDescriptionError) -> Self {
        match err {
            crate::error::UpdateRoleDescriptionError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateRoleDescriptionError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateRoleDescriptionError::UnmodifiableEntityException(inner) => {
                Error::UnmodifiableEntityException(inner)
            }
            crate::error::UpdateRoleDescriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSAMLProviderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSAMLProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSAMLProviderError> for Error {
    fn from(err: crate::error::UpdateSAMLProviderError) -> Self {
        match err {
            crate::error::UpdateSAMLProviderError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateSAMLProviderError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateSAMLProviderError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateSAMLProviderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateSAMLProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateServerCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateServerCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServerCertificateError> for Error {
    fn from(err: crate::error::UpdateServerCertificateError) -> Self {
        match err {
            crate::error::UpdateServerCertificateError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::UpdateServerCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateServerCertificateError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateServerCertificateError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateServerCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateServiceSpecificCredentialError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateServiceSpecificCredentialError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServiceSpecificCredentialError> for Error {
    fn from(err: crate::error::UpdateServiceSpecificCredentialError) -> Self {
        match err {
            crate::error::UpdateServiceSpecificCredentialError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateServiceSpecificCredentialError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSigningCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSigningCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSigningCertificateError> for Error {
    fn from(err: crate::error::UpdateSigningCertificateError) -> Self {
        match err {
            crate::error::UpdateSigningCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateSigningCertificateError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateSigningCertificateError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateSigningCertificateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSSHPublicKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSSHPublicKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSSHPublicKeyError> for Error {
    fn from(err: crate::error::UpdateSSHPublicKeyError) -> Self {
        match err {
            crate::error::UpdateSSHPublicKeyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateSSHPublicKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserError> for Error {
    fn from(err: crate::error::UpdateUserError) -> Self {
        match err {
            crate::error::UpdateUserError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateUserError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::UpdateUserError::EntityTemporarilyUnmodifiableException(inner) => {
                Error::EntityTemporarilyUnmodifiableException(inner)
            }
            crate::error::UpdateUserError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateUserError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UpdateUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UploadServerCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UploadServerCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UploadServerCertificateError> for Error {
    fn from(err: crate::error::UploadServerCertificateError) -> Self {
        match err {
            crate::error::UploadServerCertificateError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UploadServerCertificateError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::UploadServerCertificateError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UploadServerCertificateError::KeyPairMismatchException(inner) => {
                Error::KeyPairMismatchException(inner)
            }
            crate::error::UploadServerCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UploadServerCertificateError::MalformedCertificateException(inner) => {
                Error::MalformedCertificateException(inner)
            }
            crate::error::UploadServerCertificateError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UploadServerCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UploadSigningCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UploadSigningCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UploadSigningCertificateError> for Error {
    fn from(err: crate::error::UploadSigningCertificateError) -> Self {
        match err {
            crate::error::UploadSigningCertificateError::DuplicateCertificateException(inner) => {
                Error::DuplicateCertificateException(inner)
            }
            crate::error::UploadSigningCertificateError::EntityAlreadyExistsException(inner) => {
                Error::EntityAlreadyExistsException(inner)
            }
            crate::error::UploadSigningCertificateError::InvalidCertificateException(inner) => {
                Error::InvalidCertificateException(inner)
            }
            crate::error::UploadSigningCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UploadSigningCertificateError::MalformedCertificateException(inner) => {
                Error::MalformedCertificateException(inner)
            }
            crate::error::UploadSigningCertificateError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UploadSigningCertificateError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UploadSigningCertificateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UploadSSHPublicKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UploadSSHPublicKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UploadSSHPublicKeyError> for Error {
    fn from(err: crate::error::UploadSSHPublicKeyError) -> Self {
        match err {
            crate::error::UploadSSHPublicKeyError::DuplicateSshPublicKeyException(inner) => {
                Error::DuplicateSshPublicKeyException(inner)
            }
            crate::error::UploadSSHPublicKeyError::InvalidPublicKeyException(inner) => {
                Error::InvalidPublicKeyException(inner)
            }
            crate::error::UploadSSHPublicKeyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UploadSSHPublicKeyError::NoSuchEntityException(inner) => {
                Error::NoSuchEntityException(inner)
            }
            crate::error::UploadSSHPublicKeyError::UnrecognizedPublicKeyEncodingException(
                inner,
            ) => Error::UnrecognizedPublicKeyEncodingException(inner),
            crate::error::UploadSSHPublicKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::CredentialReportExpiredException(e) => e.request_id(),
            Self::CredentialReportNotPresentException(e) => e.request_id(),
            Self::CredentialReportNotReadyException(e) => e.request_id(),
            Self::DeleteConflictException(e) => e.request_id(),
            Self::DuplicateCertificateException(e) => e.request_id(),
            Self::DuplicateSshPublicKeyException(e) => e.request_id(),
            Self::EntityAlreadyExistsException(e) => e.request_id(),
            Self::EntityTemporarilyUnmodifiableException(e) => e.request_id(),
            Self::InvalidAuthenticationCodeException(e) => e.request_id(),
            Self::InvalidCertificateException(e) => e.request_id(),
            Self::InvalidInputException(e) => e.request_id(),
            Self::InvalidPublicKeyException(e) => e.request_id(),
            Self::InvalidUserTypeException(e) => e.request_id(),
            Self::KeyPairMismatchException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::MalformedCertificateException(e) => e.request_id(),
            Self::MalformedPolicyDocumentException(e) => e.request_id(),
            Self::NoSuchEntityException(e) => e.request_id(),
            Self::PasswordPolicyViolationException(e) => e.request_id(),
            Self::PolicyEvaluationException(e) => e.request_id(),
            Self::PolicyNotAttachableException(e) => e.request_id(),
            Self::ReportGenerationLimitExceededException(e) => e.request_id(),
            Self::ServiceFailureException(e) => e.request_id(),
            Self::ServiceNotSupportedException(e) => e.request_id(),
            Self::UnmodifiableEntityException(e) => e.request_id(),
            Self::UnrecognizedPublicKeyEncodingException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
