// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(
    clippy::collapsible_if,
    clippy::bool_comparison,
    clippy::nonminimal_bool,
    clippy::comparison_to_empty,
    clippy::redundant_pattern_matching,
    clippy::useless_asref
)]
pub(super) fn resolve_endpoint(
    _params: &crate::config::endpoint::Params,
    _diagnostic_collector: &mut crate::endpoint_lib::diagnostic::DiagnosticCollector,
    partition_resolver: &crate::endpoint_lib::partition::PartitionResolver,
) -> ::aws_smithy_http::endpoint::Result {
    #[allow(unused_variables)]
    let use_dual_stack = &_params.use_dual_stack;
    #[allow(unused_variables)]
    let use_fips = &_params.use_fips;
    #[allow(unused_variables)]
    let endpoint = &_params.endpoint;
    #[allow(unused_variables)]
    let region = &_params.region;
    #[allow(unused_variables)]
    if let Some(endpoint) = endpoint {
        if (*use_fips) == (true) {
            return Err(::aws_smithy_http::endpoint::ResolveEndpointError::message(
                "Invalid Configuration: FIPS and custom endpoint are not supported".to_string(),
            ));
        }
        if (*use_dual_stack) == (true) {
            return Err(::aws_smithy_http::endpoint::ResolveEndpointError::message(
                "Invalid Configuration: Dualstack and custom endpoint are not supported".to_string(),
            ));
        }
        return Ok(::aws_smithy_types::endpoint::Endpoint::builder().url(endpoint.to_owned()).build());
    }
    #[allow(unused_variables)]
    if let Some(region) = region {
        #[allow(unused_variables)]
        if let Some(partition_result) = partition_resolver.resolve_partition(region.as_ref() as &str, _diagnostic_collector) {
            if (partition_result.name()) == ("aws") {
                if (*use_fips) == (false) {
                    if (*use_dual_stack) == (true) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam.global.api.aws".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "us-east-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws") {
                if (*use_fips) == (true) {
                    if (*use_dual_stack) == (true) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam-fips.global.api.aws".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "us-east-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-cn") {
                if (*use_fips) == (false) {
                    if (*use_dual_stack) == (true) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam.global.api.amazonwebservices.com.cn".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "cn-north-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-cn") {
                if (*use_fips) == (false) {
                    if (*use_dual_stack) == (false) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam.cn-north-1.amazonaws.com.cn".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "cn-north-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-us-gov") {
                if (*use_fips) == (false) {
                    if (*use_dual_stack) == (true) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam.us-gov.api.aws".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "us-gov-west-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-us-gov") {
                if (*use_fips) == (true) {
                    if (*use_dual_stack) == (true) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam.us-gov.api.aws".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "us-gov-west-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-us-gov") {
                if (*use_fips) == (false) {
                    if (*use_dual_stack) == (false) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam.us-gov.amazonaws.com".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "us-gov-west-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-us-gov") {
                if (*use_fips) == (true) {
                    if (*use_dual_stack) == (false) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam.us-gov.amazonaws.com".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "us-gov-west-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-iso") {
                if (*use_fips) == (false) {
                    if (*use_dual_stack) == (false) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam.us-iso-east-1.c2s.ic.gov".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "us-iso-east-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-iso") {
                if (*use_fips) == (true) {
                    if (*use_dual_stack) == (false) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam-fips.us-iso-east-1.c2s.ic.gov".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "us-iso-east-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-iso-b") {
                if (*use_fips) == (false) {
                    if (*use_dual_stack) == (false) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam.us-isob-east-1.sc2s.sgov.gov".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "us-isob-east-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-iso-b") {
                if (*use_fips) == (true) {
                    if (*use_dual_stack) == (false) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam-fips.us-isob-east-1.sc2s.sgov.gov".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "us-isob-east-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-iso-e") {
                if (*use_fips) == (false) {
                    if (*use_dual_stack) == (false) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam.eu-isoe-west-1.cloud.adc-e.uk".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "eu-isoe-west-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-iso-f") {
                if (*use_fips) == (false) {
                    if (*use_dual_stack) == (false) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam.us-isof-south-1.csp.hci.ic.gov".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "us-isof-south-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (partition_result.name()) == ("aws-eusc") {
                if (*use_fips) == (false) {
                    if (*use_dual_stack) == (false) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url("https://iam.eusc-de-east-1.amazonaws.eu".to_string())
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), "eusc-de-east-1".to_string().into());
                                    out
                                })],
                            )
                            .build());
                    }
                }
            }
            if (*use_fips) == (true) {
                if (*use_dual_stack) == (true) {
                    if (true) == (partition_result.supports_fips()) {
                        if (true) == (partition_result.supports_dual_stack()) {
                            return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                                .url({
                                    let mut out = String::new();
                                    out.push_str("https://iam-fips.");
                                    #[allow(clippy::needless_borrow)]
                                    out.push_str(&partition_result.dual_stack_dns_suffix());
                                    out
                                })
                                .property(
                                    "authSchemes",
                                    vec![::aws_smithy_types::Document::from({
                                        let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                        out.insert("name".to_string(), "sigv4".to_string().into());
                                        out.insert("signingRegion".to_string(), partition_result.implicit_global_region().to_owned().into());
                                        out
                                    })],
                                )
                                .build());
                        }
                    }
                    return Err(::aws_smithy_http::endpoint::ResolveEndpointError::message(
                        "FIPS and DualStack are enabled, but this partition does not support one or both".to_string(),
                    ));
                }
            }
            if (*use_fips) == (true) {
                if (*use_dual_stack) == (false) {
                    if (partition_result.supports_fips()) == (true) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url({
                                let mut out = String::new();
                                out.push_str("https://iam-fips.");
                                #[allow(clippy::needless_borrow)]
                                out.push_str(&partition_result.dns_suffix());
                                out
                            })
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), partition_result.implicit_global_region().to_owned().into());
                                    out
                                })],
                            )
                            .build());
                    }
                    return Err(::aws_smithy_http::endpoint::ResolveEndpointError::message(
                        "FIPS is enabled but this partition does not support FIPS".to_string(),
                    ));
                }
            }
            if (*use_fips) == (false) {
                if (*use_dual_stack) == (true) {
                    if (true) == (partition_result.supports_dual_stack()) {
                        return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                            .url({
                                let mut out = String::new();
                                out.push_str("https://iam.");
                                #[allow(clippy::needless_borrow)]
                                out.push_str(&partition_result.dual_stack_dns_suffix());
                                out
                            })
                            .property(
                                "authSchemes",
                                vec![::aws_smithy_types::Document::from({
                                    let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                                    out.insert("name".to_string(), "sigv4".to_string().into());
                                    out.insert("signingRegion".to_string(), partition_result.implicit_global_region().to_owned().into());
                                    out
                                })],
                            )
                            .build());
                    }
                    return Err(::aws_smithy_http::endpoint::ResolveEndpointError::message(
                        "DualStack is enabled but this partition does not support DualStack".to_string(),
                    ));
                }
            }
            return Ok(::aws_smithy_types::endpoint::Endpoint::builder()
                .url({
                    let mut out = String::new();
                    out.push_str("https://iam.");
                    #[allow(clippy::needless_borrow)]
                    out.push_str(&partition_result.dns_suffix());
                    out
                })
                .property(
                    "authSchemes",
                    vec![::aws_smithy_types::Document::from({
                        let mut out = ::std::collections::HashMap::<String, ::aws_smithy_types::Document>::new();
                        out.insert("name".to_string(), "sigv4".to_string().into());
                        out.insert("signingRegion".to_string(), partition_result.implicit_global_region().to_owned().into());
                        out
                    })],
                )
                .build());
        }
        #[allow(unreachable_code)]
        return Err(::aws_smithy_http::endpoint::ResolveEndpointError::message(format!(
            "No rules matched these parameters. This is a bug. {_params:?}"
        )));
    }
    return Err(::aws_smithy_http::endpoint::ResolveEndpointError::message(
        "Invalid Configuration: Missing Region".to_string(),
    ));
}
