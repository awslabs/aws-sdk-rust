// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetServiceLastAccessedDetailsOutput {
    /// <p>The status of the job.</p>
    pub job_status: crate::types::JobStatusType,
    /// <p>The type of job. Service jobs return information about when each service was last accessed. Action jobs also include information about when tracked actions within the service were last accessed.</p>
    pub job_type: ::std::option::Option<crate::types::AccessAdvisorUsageGranularityType>,
    /// <p>The date and time, in&nbsp;<a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the report job was created.</p>
    pub job_creation_date: ::aws_smithy_types::DateTime,
    /// <p> A&nbsp;<code>ServiceLastAccessed</code> object that contains details about the most recent attempt to access the service.</p>
    pub services_last_accessed: ::std::vec::Vec<crate::types::ServiceLastAccessed>,
    /// <p>The date and time, in&nbsp;<a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the generated report job was completed or failed.</p>
    /// <p>This field is null if the job is still in progress, as indicated by a job status value of <code>IN_PROGRESS</code>.</p>
    pub job_completion_date: ::aws_smithy_types::DateTime,
    /// <p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all your results.</p>
    pub is_truncated: bool,
    /// <p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>An object that contains details about the reason the operation failed.</p>
    pub error: ::std::option::Option<crate::types::ErrorDetails>,
    _request_id: Option<String>,
}
impl GetServiceLastAccessedDetailsOutput {
    /// <p>The status of the job.</p>
    pub fn job_status(&self) -> &crate::types::JobStatusType {
        &self.job_status
    }
    /// <p>The type of job. Service jobs return information about when each service was last accessed. Action jobs also include information about when tracked actions within the service were last accessed.</p>
    pub fn job_type(&self) -> ::std::option::Option<&crate::types::AccessAdvisorUsageGranularityType> {
        self.job_type.as_ref()
    }
    /// <p>The date and time, in&nbsp;<a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the report job was created.</p>
    pub fn job_creation_date(&self) -> &::aws_smithy_types::DateTime {
        &self.job_creation_date
    }
    /// <p> A&nbsp;<code>ServiceLastAccessed</code> object that contains details about the most recent attempt to access the service.</p>
    pub fn services_last_accessed(&self) -> &[crate::types::ServiceLastAccessed] {
        use std::ops::Deref;
        self.services_last_accessed.deref()
    }
    /// <p>The date and time, in&nbsp;<a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the generated report job was completed or failed.</p>
    /// <p>This field is null if the job is still in progress, as indicated by a job status value of <code>IN_PROGRESS</code>.</p>
    pub fn job_completion_date(&self) -> &::aws_smithy_types::DateTime {
        &self.job_completion_date
    }
    /// <p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all your results.</p>
    pub fn is_truncated(&self) -> bool {
        self.is_truncated
    }
    /// <p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>An object that contains details about the reason the operation failed.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ErrorDetails> {
        self.error.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetServiceLastAccessedDetailsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetServiceLastAccessedDetailsOutput {
    /// Creates a new builder-style object to manufacture [`GetServiceLastAccessedDetailsOutput`](crate::operation::get_service_last_accessed_details::GetServiceLastAccessedDetailsOutput).
    pub fn builder() -> crate::operation::get_service_last_accessed_details::builders::GetServiceLastAccessedDetailsOutputBuilder {
        crate::operation::get_service_last_accessed_details::builders::GetServiceLastAccessedDetailsOutputBuilder::default()
    }
}

/// A builder for [`GetServiceLastAccessedDetailsOutput`](crate::operation::get_service_last_accessed_details::GetServiceLastAccessedDetailsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetServiceLastAccessedDetailsOutputBuilder {
    pub(crate) job_status: ::std::option::Option<crate::types::JobStatusType>,
    pub(crate) job_type: ::std::option::Option<crate::types::AccessAdvisorUsageGranularityType>,
    pub(crate) job_creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) services_last_accessed: ::std::option::Option<::std::vec::Vec<crate::types::ServiceLastAccessed>>,
    pub(crate) job_completion_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) is_truncated: ::std::option::Option<bool>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorDetails>,
    _request_id: Option<String>,
}
impl GetServiceLastAccessedDetailsOutputBuilder {
    /// <p>The status of the job.</p>
    /// This field is required.
    pub fn job_status(mut self, input: crate::types::JobStatusType) -> Self {
        self.job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the job.</p>
    pub fn set_job_status(mut self, input: ::std::option::Option<crate::types::JobStatusType>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>The status of the job.</p>
    pub fn get_job_status(&self) -> &::std::option::Option<crate::types::JobStatusType> {
        &self.job_status
    }
    /// <p>The type of job. Service jobs return information about when each service was last accessed. Action jobs also include information about when tracked actions within the service were last accessed.</p>
    pub fn job_type(mut self, input: crate::types::AccessAdvisorUsageGranularityType) -> Self {
        self.job_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of job. Service jobs return information about when each service was last accessed. Action jobs also include information about when tracked actions within the service were last accessed.</p>
    pub fn set_job_type(mut self, input: ::std::option::Option<crate::types::AccessAdvisorUsageGranularityType>) -> Self {
        self.job_type = input;
        self
    }
    /// <p>The type of job. Service jobs return information about when each service was last accessed. Action jobs also include information about when tracked actions within the service were last accessed.</p>
    pub fn get_job_type(&self) -> &::std::option::Option<crate::types::AccessAdvisorUsageGranularityType> {
        &self.job_type
    }
    /// <p>The date and time, in&nbsp;<a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the report job was created.</p>
    /// This field is required.
    pub fn job_creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.job_creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time, in&nbsp;<a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the report job was created.</p>
    pub fn set_job_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.job_creation_date = input;
        self
    }
    /// <p>The date and time, in&nbsp;<a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the report job was created.</p>
    pub fn get_job_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.job_creation_date
    }
    /// Appends an item to `services_last_accessed`.
    ///
    /// To override the contents of this collection use [`set_services_last_accessed`](Self::set_services_last_accessed).
    ///
    /// <p> A&nbsp;<code>ServiceLastAccessed</code> object that contains details about the most recent attempt to access the service.</p>
    pub fn services_last_accessed(mut self, input: crate::types::ServiceLastAccessed) -> Self {
        let mut v = self.services_last_accessed.unwrap_or_default();
        v.push(input);
        self.services_last_accessed = ::std::option::Option::Some(v);
        self
    }
    /// <p> A&nbsp;<code>ServiceLastAccessed</code> object that contains details about the most recent attempt to access the service.</p>
    pub fn set_services_last_accessed(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceLastAccessed>>) -> Self {
        self.services_last_accessed = input;
        self
    }
    /// <p> A&nbsp;<code>ServiceLastAccessed</code> object that contains details about the most recent attempt to access the service.</p>
    pub fn get_services_last_accessed(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceLastAccessed>> {
        &self.services_last_accessed
    }
    /// <p>The date and time, in&nbsp;<a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the generated report job was completed or failed.</p>
    /// <p>This field is null if the job is still in progress, as indicated by a job status value of <code>IN_PROGRESS</code>.</p>
    /// This field is required.
    pub fn job_completion_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.job_completion_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time, in&nbsp;<a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the generated report job was completed or failed.</p>
    /// <p>This field is null if the job is still in progress, as indicated by a job status value of <code>IN_PROGRESS</code>.</p>
    pub fn set_job_completion_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.job_completion_date = input;
        self
    }
    /// <p>The date and time, in&nbsp;<a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the generated report job was completed or failed.</p>
    /// <p>This field is null if the job is still in progress, as indicated by a job status value of <code>IN_PROGRESS</code>.</p>
    pub fn get_job_completion_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.job_completion_date
    }
    /// <p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all your results.</p>
    pub fn is_truncated(mut self, input: bool) -> Self {
        self.is_truncated = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all your results.</p>
    pub fn set_is_truncated(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_truncated = input;
        self
    }
    /// <p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all your results.</p>
    pub fn get_is_truncated(&self) -> &::std::option::Option<bool> {
        &self.is_truncated
    }
    /// <p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>An object that contains details about the reason the operation failed.</p>
    pub fn error(mut self, input: crate::types::ErrorDetails) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains details about the reason the operation failed.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorDetails>) -> Self {
        self.error = input;
        self
    }
    /// <p>An object that contains details about the reason the operation failed.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorDetails> {
        &self.error
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetServiceLastAccessedDetailsOutput`](crate::operation::get_service_last_accessed_details::GetServiceLastAccessedDetailsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_status`](crate::operation::get_service_last_accessed_details::builders::GetServiceLastAccessedDetailsOutputBuilder::job_status)
    /// - [`job_creation_date`](crate::operation::get_service_last_accessed_details::builders::GetServiceLastAccessedDetailsOutputBuilder::job_creation_date)
    /// - [`services_last_accessed`](crate::operation::get_service_last_accessed_details::builders::GetServiceLastAccessedDetailsOutputBuilder::services_last_accessed)
    /// - [`job_completion_date`](crate::operation::get_service_last_accessed_details::builders::GetServiceLastAccessedDetailsOutputBuilder::job_completion_date)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_service_last_accessed_details::GetServiceLastAccessedDetailsOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_service_last_accessed_details::GetServiceLastAccessedDetailsOutput {
            job_status: self.job_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_status",
                    "job_status was not specified but it is required when building GetServiceLastAccessedDetailsOutput",
                )
            })?,
            job_type: self.job_type,
            job_creation_date: self.job_creation_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_creation_date",
                    "job_creation_date was not specified but it is required when building GetServiceLastAccessedDetailsOutput",
                )
            })?,
            services_last_accessed: self.services_last_accessed.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "services_last_accessed",
                    "services_last_accessed was not specified but it is required when building GetServiceLastAccessedDetailsOutput",
                )
            })?,
            job_completion_date: self.job_completion_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_completion_date",
                    "job_completion_date was not specified but it is required when building GetServiceLastAccessedDetailsOutput",
                )
            })?,
            is_truncated: self.is_truncated.unwrap_or_default(),
            marker: self.marker,
            error: self.error,
            _request_id: self._request_id,
        })
    }
}
