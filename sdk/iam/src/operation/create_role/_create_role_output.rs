// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the response to a successful <code>CreateRole</code> request. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRoleOutput {
    /// <p>A structure containing details about the new role.</p>
    pub role: ::std::option::Option<crate::types::Role>,
    _request_id: Option<String>,
}
impl CreateRoleOutput {
    /// <p>A structure containing details about the new role.</p>
    pub fn role(&self) -> ::std::option::Option<&crate::types::Role> {
        self.role.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for CreateRoleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateRoleOutput {
    /// Creates a new builder-style object to manufacture [`CreateRoleOutput`](crate::operation::create_role::CreateRoleOutput).
    pub fn builder() -> crate::operation::create_role::builders::CreateRoleOutputBuilder {
        crate::operation::create_role::builders::CreateRoleOutputBuilder::default()
    }
}

/// A builder for [`CreateRoleOutput`](crate::operation::create_role::CreateRoleOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateRoleOutputBuilder {
    pub(crate) role: ::std::option::Option<crate::types::Role>,
    _request_id: Option<String>,
}
impl CreateRoleOutputBuilder {
    /// <p>A structure containing details about the new role.</p>
    /// This field is required.
    pub fn role(mut self, input: crate::types::Role) -> Self {
        self.role = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure containing details about the new role.</p>
    pub fn set_role(mut self, input: ::std::option::Option<crate::types::Role>) -> Self {
        self.role = input;
        self
    }
    /// <p>A structure containing details about the new role.</p>
    pub fn get_role(&self) -> &::std::option::Option<crate::types::Role> {
        &self.role
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateRoleOutput`](crate::operation::create_role::CreateRoleOutput).
    pub fn build(self) -> crate::operation::create_role::CreateRoleOutput {
        crate::operation::create_role::CreateRoleOutput {
            role: self.role,
            _request_id: self._request_id,
        }
    }
}
