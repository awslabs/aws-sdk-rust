// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateUserInput {
    /// <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    /// <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
    #[doc(hidden)]
    pub new_path: std::option::Option<std::string::String>,
    /// <p>New name for the user. Include this parameter only if you're changing the user's name.</p>
    /// <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
    #[doc(hidden)]
    pub new_user_name: std::option::Option<std::string::String>,
}
impl UpdateUserInput {
    /// <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
    pub fn new_path(&self) -> std::option::Option<&str> {
        self.new_path.as_deref()
    }
    /// <p>New name for the user. Include this parameter only if you're changing the user's name.</p>
    /// <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
    pub fn new_user_name(&self) -> std::option::Option<&str> {
        self.new_user_name.as_deref()
    }
}
impl UpdateUserInput {
    /// Creates a new builder-style object to manufacture [`UpdateUserInput`](crate::operation::update_user::UpdateUserInput).
    pub fn builder() -> crate::operation::update_user::builders::UpdateUserInputBuilder {
        crate::operation::update_user::builders::UpdateUserInputBuilder::default()
    }
}

/// A builder for [`UpdateUserInput`](crate::operation::update_user::UpdateUserInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateUserInputBuilder {
    pub(crate) user_name: std::option::Option<std::string::String>,
    pub(crate) new_path: std::option::Option<std::string::String>,
    pub(crate) new_user_name: std::option::Option<std::string::String>,
}
impl UpdateUserInputBuilder {
    /// <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
    pub fn new_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.new_path = Some(input.into());
        self
    }
    /// <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
    pub fn set_new_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.new_path = input;
        self
    }
    /// <p>New name for the user. Include this parameter only if you're changing the user's name.</p>
    /// <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
    pub fn new_user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.new_user_name = Some(input.into());
        self
    }
    /// <p>New name for the user. Include this parameter only if you're changing the user's name.</p>
    /// <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
    pub fn set_new_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.new_user_name = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateUserInput`](crate::operation::update_user::UpdateUserInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_user::UpdateUserInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_user::UpdateUserInput {
            user_name: self.user_name,
            new_path: self.new_path,
            new_user_name: self.new_user_name,
        })
    }
}
