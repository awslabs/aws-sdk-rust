// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResyncMfaDeviceInput {
    /// <p>The name of the user whose MFA device you want to resynchronize.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    /// <p>Serial number that uniquely identifies the MFA device.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    #[doc(hidden)]
    pub serial_number: std::option::Option<std::string::String>,
    /// <p>An authentication code emitted by the device.</p>
    /// <p>The format for this parameter is a sequence of six digits.</p>
    #[doc(hidden)]
    pub authentication_code1: std::option::Option<std::string::String>,
    /// <p>A subsequent authentication code emitted by the device.</p>
    /// <p>The format for this parameter is a sequence of six digits.</p>
    #[doc(hidden)]
    pub authentication_code2: std::option::Option<std::string::String>,
}
impl ResyncMfaDeviceInput {
    /// <p>The name of the user whose MFA device you want to resynchronize.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>Serial number that uniquely identifies the MFA device.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn serial_number(&self) -> std::option::Option<&str> {
        self.serial_number.as_deref()
    }
    /// <p>An authentication code emitted by the device.</p>
    /// <p>The format for this parameter is a sequence of six digits.</p>
    pub fn authentication_code1(&self) -> std::option::Option<&str> {
        self.authentication_code1.as_deref()
    }
    /// <p>A subsequent authentication code emitted by the device.</p>
    /// <p>The format for this parameter is a sequence of six digits.</p>
    pub fn authentication_code2(&self) -> std::option::Option<&str> {
        self.authentication_code2.as_deref()
    }
}
impl ResyncMfaDeviceInput {
    /// Creates a new builder-style object to manufacture [`ResyncMfaDeviceInput`](crate::operation::resync_mfa_device::ResyncMfaDeviceInput).
    pub fn builder() -> crate::operation::resync_mfa_device::builders::ResyncMfaDeviceInputBuilder {
        crate::operation::resync_mfa_device::builders::ResyncMfaDeviceInputBuilder::default()
    }
}

/// A builder for [`ResyncMfaDeviceInput`](crate::operation::resync_mfa_device::ResyncMfaDeviceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResyncMfaDeviceInputBuilder {
    pub(crate) user_name: std::option::Option<std::string::String>,
    pub(crate) serial_number: std::option::Option<std::string::String>,
    pub(crate) authentication_code1: std::option::Option<std::string::String>,
    pub(crate) authentication_code2: std::option::Option<std::string::String>,
}
impl ResyncMfaDeviceInputBuilder {
    /// <p>The name of the user whose MFA device you want to resynchronize.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>The name of the user whose MFA device you want to resynchronize.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>Serial number that uniquely identifies the MFA device.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn serial_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.serial_number = Some(input.into());
        self
    }
    /// <p>Serial number that uniquely identifies the MFA device.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn set_serial_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.serial_number = input;
        self
    }
    /// <p>An authentication code emitted by the device.</p>
    /// <p>The format for this parameter is a sequence of six digits.</p>
    pub fn authentication_code1(mut self, input: impl Into<std::string::String>) -> Self {
        self.authentication_code1 = Some(input.into());
        self
    }
    /// <p>An authentication code emitted by the device.</p>
    /// <p>The format for this parameter is a sequence of six digits.</p>
    pub fn set_authentication_code1(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.authentication_code1 = input;
        self
    }
    /// <p>A subsequent authentication code emitted by the device.</p>
    /// <p>The format for this parameter is a sequence of six digits.</p>
    pub fn authentication_code2(mut self, input: impl Into<std::string::String>) -> Self {
        self.authentication_code2 = Some(input.into());
        self
    }
    /// <p>A subsequent authentication code emitted by the device.</p>
    /// <p>The format for this parameter is a sequence of six digits.</p>
    pub fn set_authentication_code2(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.authentication_code2 = input;
        self
    }
    /// Consumes the builder and constructs a [`ResyncMfaDeviceInput`](crate::operation::resync_mfa_device::ResyncMfaDeviceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::resync_mfa_device::ResyncMfaDeviceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::resync_mfa_device::ResyncMfaDeviceInput {
            user_name: self.user_name,
            serial_number: self.serial_number,
            authentication_code1: self.authentication_code1,
            authentication_code2: self.authentication_code2,
        })
    }
}
