// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableMfaDeviceInput {
    /// <p>The name of the IAM user for whom you want to enable the MFA device.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    /// <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
    #[doc(hidden)]
    pub serial_number: std::option::Option<std::string::String>,
    /// <p>An authentication code emitted by the device. </p>
    /// <p>The format for this parameter is a string of six digits.</p> <important>
    /// <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p>
    /// </important>
    #[doc(hidden)]
    pub authentication_code1: std::option::Option<std::string::String>,
    /// <p>A subsequent authentication code emitted by the device.</p>
    /// <p>The format for this parameter is a string of six digits.</p> <important>
    /// <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p>
    /// </important>
    #[doc(hidden)]
    pub authentication_code2: std::option::Option<std::string::String>,
}
impl EnableMfaDeviceInput {
    /// <p>The name of the IAM user for whom you want to enable the MFA device.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
    pub fn serial_number(&self) -> std::option::Option<&str> {
        self.serial_number.as_deref()
    }
    /// <p>An authentication code emitted by the device. </p>
    /// <p>The format for this parameter is a string of six digits.</p> <important>
    /// <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p>
    /// </important>
    pub fn authentication_code1(&self) -> std::option::Option<&str> {
        self.authentication_code1.as_deref()
    }
    /// <p>A subsequent authentication code emitted by the device.</p>
    /// <p>The format for this parameter is a string of six digits.</p> <important>
    /// <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p>
    /// </important>
    pub fn authentication_code2(&self) -> std::option::Option<&str> {
        self.authentication_code2.as_deref()
    }
}
impl EnableMfaDeviceInput {
    /// Creates a new builder-style object to manufacture [`EnableMfaDeviceInput`](crate::operation::enable_mfa_device::EnableMfaDeviceInput).
    pub fn builder() -> crate::operation::enable_mfa_device::builders::EnableMfaDeviceInputBuilder {
        crate::operation::enable_mfa_device::builders::EnableMfaDeviceInputBuilder::default()
    }
}

/// A builder for [`EnableMfaDeviceInput`](crate::operation::enable_mfa_device::EnableMfaDeviceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnableMfaDeviceInputBuilder {
    pub(crate) user_name: std::option::Option<std::string::String>,
    pub(crate) serial_number: std::option::Option<std::string::String>,
    pub(crate) authentication_code1: std::option::Option<std::string::String>,
    pub(crate) authentication_code2: std::option::Option<std::string::String>,
}
impl EnableMfaDeviceInputBuilder {
    /// <p>The name of the IAM user for whom you want to enable the MFA device.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>The name of the IAM user for whom you want to enable the MFA device.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
    pub fn serial_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.serial_number = Some(input.into());
        self
    }
    /// <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
    pub fn set_serial_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.serial_number = input;
        self
    }
    /// <p>An authentication code emitted by the device. </p>
    /// <p>The format for this parameter is a string of six digits.</p> <important>
    /// <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p>
    /// </important>
    pub fn authentication_code1(mut self, input: impl Into<std::string::String>) -> Self {
        self.authentication_code1 = Some(input.into());
        self
    }
    /// <p>An authentication code emitted by the device. </p>
    /// <p>The format for this parameter is a string of six digits.</p> <important>
    /// <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p>
    /// </important>
    pub fn set_authentication_code1(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.authentication_code1 = input;
        self
    }
    /// <p>A subsequent authentication code emitted by the device.</p>
    /// <p>The format for this parameter is a string of six digits.</p> <important>
    /// <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p>
    /// </important>
    pub fn authentication_code2(mut self, input: impl Into<std::string::String>) -> Self {
        self.authentication_code2 = Some(input.into());
        self
    }
    /// <p>A subsequent authentication code emitted by the device.</p>
    /// <p>The format for this parameter is a string of six digits.</p> <important>
    /// <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p>
    /// </important>
    pub fn set_authentication_code2(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.authentication_code2 = input;
        self
    }
    /// Consumes the builder and constructs a [`EnableMfaDeviceInput`](crate::operation::enable_mfa_device::EnableMfaDeviceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::enable_mfa_device::EnableMfaDeviceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::enable_mfa_device::EnableMfaDeviceInput {
            user_name: self.user_name,
            serial_number: self.serial_number,
            authentication_code1: self.authentication_code1,
            authentication_code2: self.authentication_code2,
        })
    }
}
