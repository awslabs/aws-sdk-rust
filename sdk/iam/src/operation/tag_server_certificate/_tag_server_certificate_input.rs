// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagServerCertificateInput {
    /// <p>The name of the IAM server certificate to which you want to add tags.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    #[doc(hidden)]
    pub server_certificate_name: std::option::Option<std::string::String>,
    /// <p>The list of tags that you want to attach to the IAM server certificate. Each tag consists of a key name and an associated value.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl TagServerCertificateInput {
    /// <p>The name of the IAM server certificate to which you want to add tags.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn server_certificate_name(&self) -> std::option::Option<&str> {
        self.server_certificate_name.as_deref()
    }
    /// <p>The list of tags that you want to attach to the IAM server certificate. Each tag consists of a key name and an associated value.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl TagServerCertificateInput {
    /// Creates a new builder-style object to manufacture [`TagServerCertificateInput`](crate::operation::tag_server_certificate::TagServerCertificateInput).
    pub fn builder(
    ) -> crate::operation::tag_server_certificate::builders::TagServerCertificateInputBuilder {
        crate::operation::tag_server_certificate::builders::TagServerCertificateInputBuilder::default()
    }
}

/// A builder for [`TagServerCertificateInput`](crate::operation::tag_server_certificate::TagServerCertificateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TagServerCertificateInputBuilder {
    pub(crate) server_certificate_name: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl TagServerCertificateInputBuilder {
    /// <p>The name of the IAM server certificate to which you want to add tags.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn server_certificate_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_certificate_name = Some(input.into());
        self
    }
    /// <p>The name of the IAM server certificate to which you want to add tags.</p>
    /// <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
    pub fn set_server_certificate_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.server_certificate_name = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tags that you want to attach to the IAM server certificate. Each tag consists of a key name and an associated value.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The list of tags that you want to attach to the IAM server certificate. Each tag consists of a key name and an associated value.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`TagServerCertificateInput`](crate::operation::tag_server_certificate::TagServerCertificateInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::tag_server_certificate::TagServerCertificateInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::tag_server_certificate::TagServerCertificateInput {
                server_certificate_name: self.server_certificate_name,
                tags: self.tags,
            },
        )
    }
}
