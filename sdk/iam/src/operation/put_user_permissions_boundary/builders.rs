// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_user_permissions_boundary::_put_user_permissions_boundary_output::PutUserPermissionsBoundaryOutputBuilder;

pub use crate::operation::put_user_permissions_boundary::_put_user_permissions_boundary_input::PutUserPermissionsBoundaryInputBuilder;

/// Fluent builder constructing a request to `PutUserPermissionsBoundary`.
///
/// <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an Amazon Web Services managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important>
/// <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON policy evaluation logic</a> in the IAM User Guide. </p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutUserPermissionsBoundaryFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::put_user_permissions_boundary::builders::PutUserPermissionsBoundaryInputBuilder
            }
impl PutUserPermissionsBoundaryFluentBuilder {
    /// Creates a new `PutUserPermissionsBoundary`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundary,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundaryError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundaryOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::put_user_permissions_boundary::PutUserPermissionsBoundaryError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_name(input.into());
        self
    }
    /// <p>The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_user_name(input);
        self
    }
    /// <p>The ARN of the policy that is used to set the permissions boundary for the user.</p>
    pub fn permissions_boundary(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.permissions_boundary(input.into());
        self
    }
    /// <p>The ARN of the policy that is used to set the permissions boundary for the user.</p>
    pub fn set_permissions_boundary(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_permissions_boundary(input);
        self
    }
}
