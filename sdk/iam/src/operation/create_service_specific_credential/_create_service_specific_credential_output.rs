// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateServiceSpecificCredentialOutput {
    /// <p>A structure that contains information about the newly created service-specific credential.</p> <important>
    /// <p>This is the only time that the password for this credential set is available. It cannot be recovered later. Instead, you must reset the password with <code>ResetServiceSpecificCredential</code>.</p>
    /// </important>
    #[doc(hidden)]
    pub service_specific_credential: std::option::Option<crate::types::ServiceSpecificCredential>,
    _request_id: Option<String>,
}
impl CreateServiceSpecificCredentialOutput {
    /// <p>A structure that contains information about the newly created service-specific credential.</p> <important>
    /// <p>This is the only time that the password for this credential set is available. It cannot be recovered later. Instead, you must reset the password with <code>ResetServiceSpecificCredential</code>.</p>
    /// </important>
    pub fn service_specific_credential(
        &self,
    ) -> std::option::Option<&crate::types::ServiceSpecificCredential> {
        self.service_specific_credential.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateServiceSpecificCredentialOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateServiceSpecificCredentialOutput {
    /// Creates a new builder-style object to manufacture [`CreateServiceSpecificCredentialOutput`](crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialOutput).
    pub fn builder() -> crate::operation::create_service_specific_credential::builders::CreateServiceSpecificCredentialOutputBuilder{
        crate::operation::create_service_specific_credential::builders::CreateServiceSpecificCredentialOutputBuilder::default()
    }
}

/// A builder for [`CreateServiceSpecificCredentialOutput`](crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateServiceSpecificCredentialOutputBuilder {
    pub(crate) service_specific_credential:
        std::option::Option<crate::types::ServiceSpecificCredential>,
    _request_id: Option<String>,
}
impl CreateServiceSpecificCredentialOutputBuilder {
    /// <p>A structure that contains information about the newly created service-specific credential.</p> <important>
    /// <p>This is the only time that the password for this credential set is available. It cannot be recovered later. Instead, you must reset the password with <code>ResetServiceSpecificCredential</code>.</p>
    /// </important>
    pub fn service_specific_credential(
        mut self,
        input: crate::types::ServiceSpecificCredential,
    ) -> Self {
        self.service_specific_credential = Some(input);
        self
    }
    /// <p>A structure that contains information about the newly created service-specific credential.</p> <important>
    /// <p>This is the only time that the password for this credential set is available. It cannot be recovered later. Instead, you must reset the password with <code>ResetServiceSpecificCredential</code>.</p>
    /// </important>
    pub fn set_service_specific_credential(
        mut self,
        input: std::option::Option<crate::types::ServiceSpecificCredential>,
    ) -> Self {
        self.service_specific_credential = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateServiceSpecificCredentialOutput`](crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialOutput
    {
        crate::operation::create_service_specific_credential::CreateServiceSpecificCredentialOutput {
            service_specific_credential: self.service_specific_credential
            ,
            _request_id: self._request_id,
        }
    }
}
