// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetOrganizationsAccessReportInput {
    /// <p>The identifier of the request generated by the <code>GenerateOrganizationsAccessReport</code> operation.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
    /// <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
    #[doc(hidden)]
    pub max_items: std::option::Option<i32>,
    /// <p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.</p>
    #[doc(hidden)]
    pub sort_key: std::option::Option<crate::types::SortKeyType>,
}
impl GetOrganizationsAccessReportInput {
    /// <p>The identifier of the request generated by the <code>GenerateOrganizationsAccessReport</code> operation.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
    /// <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
    pub fn max_items(&self) -> std::option::Option<i32> {
        self.max_items
    }
    /// <p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.</p>
    pub fn sort_key(&self) -> std::option::Option<&crate::types::SortKeyType> {
        self.sort_key.as_ref()
    }
}
impl GetOrganizationsAccessReportInput {
    /// Creates a new builder-style object to manufacture [`GetOrganizationsAccessReportInput`](crate::operation::get_organizations_access_report::GetOrganizationsAccessReportInput).
    pub fn builder() -> crate::operation::get_organizations_access_report::builders::GetOrganizationsAccessReportInputBuilder{
        crate::operation::get_organizations_access_report::builders::GetOrganizationsAccessReportInputBuilder::default()
    }
}

/// A builder for [`GetOrganizationsAccessReportInput`](crate::operation::get_organizations_access_report::GetOrganizationsAccessReportInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetOrganizationsAccessReportInputBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) max_items: std::option::Option<i32>,
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) sort_key: std::option::Option<crate::types::SortKeyType>,
}
impl GetOrganizationsAccessReportInputBuilder {
    /// <p>The identifier of the request generated by the <code>GenerateOrganizationsAccessReport</code> operation.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The identifier of the request generated by the <code>GenerateOrganizationsAccessReport</code> operation.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
    /// <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = Some(input);
        self
    }
    /// <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
    /// <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
    pub fn set_max_items(mut self, input: std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    /// <p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.</p>
    pub fn sort_key(mut self, input: crate::types::SortKeyType) -> Self {
        self.sort_key = Some(input);
        self
    }
    /// <p>The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.</p>
    pub fn set_sort_key(mut self, input: std::option::Option<crate::types::SortKeyType>) -> Self {
        self.sort_key = input;
        self
    }
    /// Consumes the builder and constructs a [`GetOrganizationsAccessReportInput`](crate::operation::get_organizations_access_report::GetOrganizationsAccessReportInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_organizations_access_report::GetOrganizationsAccessReportInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_organizations_access_report::GetOrganizationsAccessReportInput {
                job_id: self.job_id,
                max_items: self.max_items,
                marker: self.marker,
                sort_key: self.sort_key,
            },
        )
    }
}
