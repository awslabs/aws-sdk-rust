// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_account_password_policy::_update_account_password_policy_output::UpdateAccountPasswordPolicyOutputBuilder;

pub use crate::operation::update_account_password_policy::_update_account_password_policy_input::UpdateAccountPasswordPolicyInputBuilder;

/// Fluent builder constructing a request to `UpdateAccountPasswordPolicy`.
///
/// <p>Updates the password policy settings for the Amazon Web Services account.</p> <note>
/// <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p>
/// </note>
/// <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM password policy</a> in the <i>IAM User Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAccountPasswordPolicyFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_account_password_policy::builders::UpdateAccountPasswordPolicyInputBuilder
            }
impl UpdateAccountPasswordPolicyFluentBuilder {
    /// Creates a new `UpdateAccountPasswordPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_account_password_policy::UpdateAccountPasswordPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The minimum number of characters allowed in an IAM user password.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
    pub fn minimum_password_length(mut self, input: i32) -> Self {
        self.inner = self.inner.minimum_password_length(input);
        self
    }
    /// <p>The minimum number of characters allowed in an IAM user password.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
    pub fn set_minimum_password_length(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_minimum_password_length(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p>
    /// <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
    pub fn require_symbols(mut self, input: bool) -> Self {
        self.inner = self.inner.require_symbols(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p>
    /// <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
    pub fn set_require_symbols(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_require_symbols(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
    pub fn require_numbers(mut self, input: bool) -> Self {
        self.inner = self.inner.require_numbers(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
    pub fn set_require_numbers(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_require_numbers(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
    pub fn require_uppercase_characters(mut self, input: bool) -> Self {
        self.inner = self.inner.require_uppercase_characters(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
    pub fn set_require_uppercase_characters(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_require_uppercase_characters(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
    pub fn require_lowercase_characters(mut self, input: bool) -> Self {
        self.inner = self.inner.require_lowercase_characters(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
    pub fn set_require_lowercase_characters(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_require_lowercase_characters(input);
        self
    }
    /// <p> Allows all IAM users in your account to use the Amazon Web Services Management Console to change their own passwords. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_enable-user-change.html">Permitting IAM users to change their own passwords</a> in the <i>IAM User Guide</i>.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
    pub fn allow_users_to_change_password(mut self, input: bool) -> Self {
        self.inner = self.inner.allow_users_to_change_password(input);
        self
    }
    /// <p> Allows all IAM users in your account to use the Amazon Web Services Management Console to change their own passwords. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_enable-user-change.html">Permitting IAM users to change their own passwords</a> in the <i>IAM User Guide</i>.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
    pub fn set_allow_users_to_change_password(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_allow_users_to_change_password(input);
        self
    }
    /// <p>The number of days that an IAM user password is valid.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
    pub fn max_password_age(mut self, input: i32) -> Self {
        self.inner = self.inner.max_password_age(input);
        self
    }
    /// <p>The number of days that an IAM user password is valid.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
    pub fn set_max_password_age(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_password_age(input);
        self
    }
    /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
    pub fn password_reuse_prevention(mut self, input: i32) -> Self {
        self.inner = self.inner.password_reuse_prevention(input);
        self
    }
    /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
    pub fn set_password_reuse_prevention(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_password_reuse_prevention(input);
        self
    }
    /// <p> Prevents IAM users who are accessing the account via the Amazon Web Services Management Console from setting a new console password after their password has expired. The IAM user cannot access the console until an administrator resets the password.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p> <note>
    /// <p> In the Amazon Web Services Management Console, the custom password policy option <b>Allow users to change their own password</b> gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p>
    /// </note>
    pub fn hard_expiry(mut self, input: bool) -> Self {
        self.inner = self.inner.hard_expiry(input);
        self
    }
    /// <p> Prevents IAM users who are accessing the account via the Amazon Web Services Management Console from setting a new console password after their password has expired. The IAM user cannot access the console until an administrator resets the password.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p> <note>
    /// <p> In the Amazon Web Services Management Console, the custom password policy option <b>Allow users to change their own password</b> gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p>
    /// </note>
    pub fn set_hard_expiry(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_hard_expiry(input);
        self
    }
}
