// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAccountPasswordPolicyInput {
    /// <p>The minimum number of characters allowed in an IAM user password.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
    #[doc(hidden)]
    pub minimum_password_length: std::option::Option<i32>,
    /// <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p>
    /// <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
    #[doc(hidden)]
    pub require_symbols: bool,
    /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
    #[doc(hidden)]
    pub require_numbers: bool,
    /// <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
    #[doc(hidden)]
    pub require_uppercase_characters: bool,
    /// <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
    #[doc(hidden)]
    pub require_lowercase_characters: bool,
    /// <p> Allows all IAM users in your account to use the Amazon Web Services Management Console to change their own passwords. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_enable-user-change.html">Permitting IAM users to change their own passwords</a> in the <i>IAM User Guide</i>.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
    #[doc(hidden)]
    pub allow_users_to_change_password: bool,
    /// <p>The number of days that an IAM user password is valid.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
    #[doc(hidden)]
    pub max_password_age: std::option::Option<i32>,
    /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
    #[doc(hidden)]
    pub password_reuse_prevention: std::option::Option<i32>,
    /// <p> Prevents IAM users who are accessing the account via the Amazon Web Services Management Console from setting a new console password after their password has expired. The IAM user cannot access the console until an administrator resets the password.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p> <note>
    /// <p> In the Amazon Web Services Management Console, the custom password policy option <b>Allow users to change their own password</b> gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p>
    /// </note>
    #[doc(hidden)]
    pub hard_expiry: std::option::Option<bool>,
}
impl UpdateAccountPasswordPolicyInput {
    /// <p>The minimum number of characters allowed in an IAM user password.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
    pub fn minimum_password_length(&self) -> std::option::Option<i32> {
        self.minimum_password_length
    }
    /// <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p>
    /// <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
    pub fn require_symbols(&self) -> bool {
        self.require_symbols
    }
    /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
    pub fn require_numbers(&self) -> bool {
        self.require_numbers
    }
    /// <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
    pub fn require_uppercase_characters(&self) -> bool {
        self.require_uppercase_characters
    }
    /// <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
    pub fn require_lowercase_characters(&self) -> bool {
        self.require_lowercase_characters
    }
    /// <p> Allows all IAM users in your account to use the Amazon Web Services Management Console to change their own passwords. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_enable-user-change.html">Permitting IAM users to change their own passwords</a> in the <i>IAM User Guide</i>.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
    pub fn allow_users_to_change_password(&self) -> bool {
        self.allow_users_to_change_password
    }
    /// <p>The number of days that an IAM user password is valid.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
    pub fn max_password_age(&self) -> std::option::Option<i32> {
        self.max_password_age
    }
    /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
    pub fn password_reuse_prevention(&self) -> std::option::Option<i32> {
        self.password_reuse_prevention
    }
    /// <p> Prevents IAM users who are accessing the account via the Amazon Web Services Management Console from setting a new console password after their password has expired. The IAM user cannot access the console until an administrator resets the password.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p> <note>
    /// <p> In the Amazon Web Services Management Console, the custom password policy option <b>Allow users to change their own password</b> gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p>
    /// </note>
    pub fn hard_expiry(&self) -> std::option::Option<bool> {
        self.hard_expiry
    }
}
impl UpdateAccountPasswordPolicyInput {
    /// Creates a new builder-style object to manufacture [`UpdateAccountPasswordPolicyInput`](crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyInput).
    pub fn builder() -> crate::operation::update_account_password_policy::builders::UpdateAccountPasswordPolicyInputBuilder{
        crate::operation::update_account_password_policy::builders::UpdateAccountPasswordPolicyInputBuilder::default()
    }
}

/// A builder for [`UpdateAccountPasswordPolicyInput`](crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateAccountPasswordPolicyInputBuilder {
    pub(crate) minimum_password_length: std::option::Option<i32>,
    pub(crate) require_symbols: std::option::Option<bool>,
    pub(crate) require_numbers: std::option::Option<bool>,
    pub(crate) require_uppercase_characters: std::option::Option<bool>,
    pub(crate) require_lowercase_characters: std::option::Option<bool>,
    pub(crate) allow_users_to_change_password: std::option::Option<bool>,
    pub(crate) max_password_age: std::option::Option<i32>,
    pub(crate) password_reuse_prevention: std::option::Option<i32>,
    pub(crate) hard_expiry: std::option::Option<bool>,
}
impl UpdateAccountPasswordPolicyInputBuilder {
    /// <p>The minimum number of characters allowed in an IAM user password.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
    pub fn minimum_password_length(mut self, input: i32) -> Self {
        self.minimum_password_length = Some(input);
        self
    }
    /// <p>The minimum number of characters allowed in an IAM user password.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
    pub fn set_minimum_password_length(mut self, input: std::option::Option<i32>) -> Self {
        self.minimum_password_length = input;
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p>
    /// <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
    pub fn require_symbols(mut self, input: bool) -> Self {
        self.require_symbols = Some(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p>
    /// <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
    pub fn set_require_symbols(mut self, input: std::option::Option<bool>) -> Self {
        self.require_symbols = input;
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
    pub fn require_numbers(mut self, input: bool) -> Self {
        self.require_numbers = Some(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
    pub fn set_require_numbers(mut self, input: std::option::Option<bool>) -> Self {
        self.require_numbers = input;
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
    pub fn require_uppercase_characters(mut self, input: bool) -> Self {
        self.require_uppercase_characters = Some(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
    pub fn set_require_uppercase_characters(mut self, input: std::option::Option<bool>) -> Self {
        self.require_uppercase_characters = input;
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
    pub fn require_lowercase_characters(mut self, input: bool) -> Self {
        self.require_lowercase_characters = Some(input);
        self
    }
    /// <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
    pub fn set_require_lowercase_characters(mut self, input: std::option::Option<bool>) -> Self {
        self.require_lowercase_characters = input;
        self
    }
    /// <p> Allows all IAM users in your account to use the Amazon Web Services Management Console to change their own passwords. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_enable-user-change.html">Permitting IAM users to change their own passwords</a> in the <i>IAM User Guide</i>.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
    pub fn allow_users_to_change_password(mut self, input: bool) -> Self {
        self.allow_users_to_change_password = Some(input);
        self
    }
    /// <p> Allows all IAM users in your account to use the Amazon Web Services Management Console to change their own passwords. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_enable-user-change.html">Permitting IAM users to change their own passwords</a> in the <i>IAM User Guide</i>.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
    pub fn set_allow_users_to_change_password(mut self, input: std::option::Option<bool>) -> Self {
        self.allow_users_to_change_password = input;
        self
    }
    /// <p>The number of days that an IAM user password is valid.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
    pub fn max_password_age(mut self, input: i32) -> Self {
        self.max_password_age = Some(input);
        self
    }
    /// <p>The number of days that an IAM user password is valid.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
    pub fn set_max_password_age(mut self, input: std::option::Option<i32>) -> Self {
        self.max_password_age = input;
        self
    }
    /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
    pub fn password_reuse_prevention(mut self, input: i32) -> Self {
        self.password_reuse_prevention = Some(input);
        self
    }
    /// <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
    pub fn set_password_reuse_prevention(mut self, input: std::option::Option<i32>) -> Self {
        self.password_reuse_prevention = input;
        self
    }
    /// <p> Prevents IAM users who are accessing the account via the Amazon Web Services Management Console from setting a new console password after their password has expired. The IAM user cannot access the console until an administrator resets the password.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p> <note>
    /// <p> In the Amazon Web Services Management Console, the custom password policy option <b>Allow users to change their own password</b> gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p>
    /// </note>
    pub fn hard_expiry(mut self, input: bool) -> Self {
        self.hard_expiry = Some(input);
        self
    }
    /// <p> Prevents IAM users who are accessing the account via the Amazon Web Services Management Console from setting a new console password after their password has expired. The IAM user cannot access the console until an administrator resets the password.</p>
    /// <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p> <note>
    /// <p> In the Amazon Web Services Management Console, the custom password policy option <b>Allow users to change their own password</b> gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p>
    /// </note>
    pub fn set_hard_expiry(mut self, input: std::option::Option<bool>) -> Self {
        self.hard_expiry = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateAccountPasswordPolicyInput`](crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_account_password_policy::UpdateAccountPasswordPolicyInput {
                minimum_password_length: self.minimum_password_length,
                require_symbols: self.require_symbols.unwrap_or_default(),
                require_numbers: self.require_numbers.unwrap_or_default(),
                require_uppercase_characters: self.require_uppercase_characters.unwrap_or_default(),
                require_lowercase_characters: self.require_lowercase_characters.unwrap_or_default(),
                allow_users_to_change_password: self
                    .allow_users_to_change_password
                    .unwrap_or_default(),
                max_password_age: self.max_password_age,
                password_reuse_prevention: self.password_reuse_prevention,
                hard_expiry: self.hard_expiry,
            },
        )
    }
}
