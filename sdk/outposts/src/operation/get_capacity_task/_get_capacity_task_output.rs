// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCapacityTaskOutput {
    /// <p>ID of the capacity task.</p>
    pub capacity_task_id: ::std::option::Option<::std::string::String>,
    /// <p>ID of the Outpost associated with the specified capacity task.</p>
    pub outpost_id: ::std::option::Option<::std::string::String>,
    /// <p>ID of the Amazon Web Services Outposts order associated with the specified capacity task.</p>
    pub order_id: ::std::option::Option<::std::string::String>,
    /// <p>List of instance pools requested in the capacity task.</p>
    pub requested_instance_pools: ::std::option::Option<::std::vec::Vec<crate::types::InstanceTypeCapacity>>,
    /// <p>Performs a dry run to determine if you are above or below instance capacity.</p>
    pub dry_run: bool,
    /// <p>Status of the capacity task.</p>
    /// <p>A capacity task can have one of the following statuses:</p>
    /// <ul>
    /// <li>
    /// <p><code>REQUESTED</code> - The capacity task was created and is awaiting the next step by Amazon Web Services Outposts.</p></li>
    /// <li>
    /// <p><code>IN_PROGRESS</code> - The capacity task is running and cannot be cancelled.</p></li>
    /// <li>
    /// <p><code>WAITING_FOR_EVACUATION</code> - The capacity task requires capacity to run. You must stop the recommended EC2 running instances to free up capacity for the task to run.</p></li>
    /// </ul>
    pub capacity_task_status: ::std::option::Option<crate::types::CapacityTaskStatus>,
    /// <p>Reason why the capacity task failed.</p>
    pub failed: ::std::option::Option<crate::types::CapacityTaskFailure>,
    /// <p>The date the capacity task was created.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date the capacity task ran successfully.</p>
    pub completion_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date the capacity task was last modified.</p>
    pub last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetCapacityTaskOutput {
    /// <p>ID of the capacity task.</p>
    pub fn capacity_task_id(&self) -> ::std::option::Option<&str> {
        self.capacity_task_id.as_deref()
    }
    /// <p>ID of the Outpost associated with the specified capacity task.</p>
    pub fn outpost_id(&self) -> ::std::option::Option<&str> {
        self.outpost_id.as_deref()
    }
    /// <p>ID of the Amazon Web Services Outposts order associated with the specified capacity task.</p>
    pub fn order_id(&self) -> ::std::option::Option<&str> {
        self.order_id.as_deref()
    }
    /// <p>List of instance pools requested in the capacity task.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.requested_instance_pools.is_none()`.
    pub fn requested_instance_pools(&self) -> &[crate::types::InstanceTypeCapacity] {
        self.requested_instance_pools.as_deref().unwrap_or_default()
    }
    /// <p>Performs a dry run to determine if you are above or below instance capacity.</p>
    pub fn dry_run(&self) -> bool {
        self.dry_run
    }
    /// <p>Status of the capacity task.</p>
    /// <p>A capacity task can have one of the following statuses:</p>
    /// <ul>
    /// <li>
    /// <p><code>REQUESTED</code> - The capacity task was created and is awaiting the next step by Amazon Web Services Outposts.</p></li>
    /// <li>
    /// <p><code>IN_PROGRESS</code> - The capacity task is running and cannot be cancelled.</p></li>
    /// <li>
    /// <p><code>WAITING_FOR_EVACUATION</code> - The capacity task requires capacity to run. You must stop the recommended EC2 running instances to free up capacity for the task to run.</p></li>
    /// </ul>
    pub fn capacity_task_status(&self) -> ::std::option::Option<&crate::types::CapacityTaskStatus> {
        self.capacity_task_status.as_ref()
    }
    /// <p>Reason why the capacity task failed.</p>
    pub fn failed(&self) -> ::std::option::Option<&crate::types::CapacityTaskFailure> {
        self.failed.as_ref()
    }
    /// <p>The date the capacity task was created.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date the capacity task ran successfully.</p>
    pub fn completion_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completion_date.as_ref()
    }
    /// <p>The date the capacity task was last modified.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetCapacityTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCapacityTaskOutput {
    /// Creates a new builder-style object to manufacture [`GetCapacityTaskOutput`](crate::operation::get_capacity_task::GetCapacityTaskOutput).
    pub fn builder() -> crate::operation::get_capacity_task::builders::GetCapacityTaskOutputBuilder {
        crate::operation::get_capacity_task::builders::GetCapacityTaskOutputBuilder::default()
    }
}

/// A builder for [`GetCapacityTaskOutput`](crate::operation::get_capacity_task::GetCapacityTaskOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetCapacityTaskOutputBuilder {
    pub(crate) capacity_task_id: ::std::option::Option<::std::string::String>,
    pub(crate) outpost_id: ::std::option::Option<::std::string::String>,
    pub(crate) order_id: ::std::option::Option<::std::string::String>,
    pub(crate) requested_instance_pools: ::std::option::Option<::std::vec::Vec<crate::types::InstanceTypeCapacity>>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) capacity_task_status: ::std::option::Option<crate::types::CapacityTaskStatus>,
    pub(crate) failed: ::std::option::Option<crate::types::CapacityTaskFailure>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completion_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetCapacityTaskOutputBuilder {
    /// <p>ID of the capacity task.</p>
    pub fn capacity_task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capacity_task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the capacity task.</p>
    pub fn set_capacity_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capacity_task_id = input;
        self
    }
    /// <p>ID of the capacity task.</p>
    pub fn get_capacity_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.capacity_task_id
    }
    /// <p>ID of the Outpost associated with the specified capacity task.</p>
    pub fn outpost_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the Outpost associated with the specified capacity task.</p>
    pub fn set_outpost_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_id = input;
        self
    }
    /// <p>ID of the Outpost associated with the specified capacity task.</p>
    pub fn get_outpost_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_id
    }
    /// <p>ID of the Amazon Web Services Outposts order associated with the specified capacity task.</p>
    pub fn order_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.order_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the Amazon Web Services Outposts order associated with the specified capacity task.</p>
    pub fn set_order_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.order_id = input;
        self
    }
    /// <p>ID of the Amazon Web Services Outposts order associated with the specified capacity task.</p>
    pub fn get_order_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.order_id
    }
    /// Appends an item to `requested_instance_pools`.
    ///
    /// To override the contents of this collection use [`set_requested_instance_pools`](Self::set_requested_instance_pools).
    ///
    /// <p>List of instance pools requested in the capacity task.</p>
    pub fn requested_instance_pools(mut self, input: crate::types::InstanceTypeCapacity) -> Self {
        let mut v = self.requested_instance_pools.unwrap_or_default();
        v.push(input);
        self.requested_instance_pools = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of instance pools requested in the capacity task.</p>
    pub fn set_requested_instance_pools(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InstanceTypeCapacity>>) -> Self {
        self.requested_instance_pools = input;
        self
    }
    /// <p>List of instance pools requested in the capacity task.</p>
    pub fn get_requested_instance_pools(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InstanceTypeCapacity>> {
        &self.requested_instance_pools
    }
    /// <p>Performs a dry run to determine if you are above or below instance capacity.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Performs a dry run to determine if you are above or below instance capacity.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Performs a dry run to determine if you are above or below instance capacity.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>Status of the capacity task.</p>
    /// <p>A capacity task can have one of the following statuses:</p>
    /// <ul>
    /// <li>
    /// <p><code>REQUESTED</code> - The capacity task was created and is awaiting the next step by Amazon Web Services Outposts.</p></li>
    /// <li>
    /// <p><code>IN_PROGRESS</code> - The capacity task is running and cannot be cancelled.</p></li>
    /// <li>
    /// <p><code>WAITING_FOR_EVACUATION</code> - The capacity task requires capacity to run. You must stop the recommended EC2 running instances to free up capacity for the task to run.</p></li>
    /// </ul>
    pub fn capacity_task_status(mut self, input: crate::types::CapacityTaskStatus) -> Self {
        self.capacity_task_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the capacity task.</p>
    /// <p>A capacity task can have one of the following statuses:</p>
    /// <ul>
    /// <li>
    /// <p><code>REQUESTED</code> - The capacity task was created and is awaiting the next step by Amazon Web Services Outposts.</p></li>
    /// <li>
    /// <p><code>IN_PROGRESS</code> - The capacity task is running and cannot be cancelled.</p></li>
    /// <li>
    /// <p><code>WAITING_FOR_EVACUATION</code> - The capacity task requires capacity to run. You must stop the recommended EC2 running instances to free up capacity for the task to run.</p></li>
    /// </ul>
    pub fn set_capacity_task_status(mut self, input: ::std::option::Option<crate::types::CapacityTaskStatus>) -> Self {
        self.capacity_task_status = input;
        self
    }
    /// <p>Status of the capacity task.</p>
    /// <p>A capacity task can have one of the following statuses:</p>
    /// <ul>
    /// <li>
    /// <p><code>REQUESTED</code> - The capacity task was created and is awaiting the next step by Amazon Web Services Outposts.</p></li>
    /// <li>
    /// <p><code>IN_PROGRESS</code> - The capacity task is running and cannot be cancelled.</p></li>
    /// <li>
    /// <p><code>WAITING_FOR_EVACUATION</code> - The capacity task requires capacity to run. You must stop the recommended EC2 running instances to free up capacity for the task to run.</p></li>
    /// </ul>
    pub fn get_capacity_task_status(&self) -> &::std::option::Option<crate::types::CapacityTaskStatus> {
        &self.capacity_task_status
    }
    /// <p>Reason why the capacity task failed.</p>
    pub fn failed(mut self, input: crate::types::CapacityTaskFailure) -> Self {
        self.failed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reason why the capacity task failed.</p>
    pub fn set_failed(mut self, input: ::std::option::Option<crate::types::CapacityTaskFailure>) -> Self {
        self.failed = input;
        self
    }
    /// <p>Reason why the capacity task failed.</p>
    pub fn get_failed(&self) -> &::std::option::Option<crate::types::CapacityTaskFailure> {
        &self.failed
    }
    /// <p>The date the capacity task was created.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the capacity task was created.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date the capacity task was created.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The date the capacity task ran successfully.</p>
    pub fn completion_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completion_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the capacity task ran successfully.</p>
    pub fn set_completion_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completion_date = input;
        self
    }
    /// <p>The date the capacity task ran successfully.</p>
    pub fn get_completion_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completion_date
    }
    /// <p>The date the capacity task was last modified.</p>
    pub fn last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the capacity task was last modified.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date the capacity task was last modified.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_date
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCapacityTaskOutput`](crate::operation::get_capacity_task::GetCapacityTaskOutput).
    pub fn build(self) -> crate::operation::get_capacity_task::GetCapacityTaskOutput {
        crate::operation::get_capacity_task::GetCapacityTaskOutput {
            capacity_task_id: self.capacity_task_id,
            outpost_id: self.outpost_id,
            order_id: self.order_id,
            requested_instance_pools: self.requested_instance_pools,
            dry_run: self.dry_run.unwrap_or_default(),
            capacity_task_status: self.capacity_task_status,
            failed: self.failed,
            creation_date: self.creation_date,
            completion_date: self.completion_date,
            last_modified_date: self.last_modified_date,
            _request_id: self._request_id,
        }
    }
}
