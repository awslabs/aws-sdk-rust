// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListOutpostsInput {
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum page size.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>Filters the results by the lifecycle status.</p>
    #[doc(hidden)]
    pub life_cycle_status_filter: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Filters the results by Availability Zone (for example, <code>us-east-1a</code>).</p>
    #[doc(hidden)]
    pub availability_zone_filter: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Filters the results by AZ ID (for example, <code>use1-az1</code>).</p>
    #[doc(hidden)]
    pub availability_zone_id_filter: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ListOutpostsInput {
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum page size.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>Filters the results by the lifecycle status.</p>
    pub fn life_cycle_status_filter(&self) -> std::option::Option<&[std::string::String]> {
        self.life_cycle_status_filter.as_deref()
    }
    /// <p>Filters the results by Availability Zone (for example, <code>us-east-1a</code>).</p>
    pub fn availability_zone_filter(&self) -> std::option::Option<&[std::string::String]> {
        self.availability_zone_filter.as_deref()
    }
    /// <p>Filters the results by AZ ID (for example, <code>use1-az1</code>).</p>
    pub fn availability_zone_id_filter(&self) -> std::option::Option<&[std::string::String]> {
        self.availability_zone_id_filter.as_deref()
    }
}
impl ListOutpostsInput {
    /// Creates a new builder-style object to manufacture [`ListOutpostsInput`](crate::operation::list_outposts::ListOutpostsInput).
    pub fn builder() -> crate::operation::list_outposts::builders::ListOutpostsInputBuilder {
        crate::operation::list_outposts::builders::ListOutpostsInputBuilder::default()
    }
}

/// A builder for [`ListOutpostsInput`](crate::operation::list_outposts::ListOutpostsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListOutpostsInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) life_cycle_status_filter: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) availability_zone_filter: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) availability_zone_id_filter: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ListOutpostsInputBuilder {
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum page size.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum page size.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Appends an item to `life_cycle_status_filter`.
    ///
    /// To override the contents of this collection use [`set_life_cycle_status_filter`](Self::set_life_cycle_status_filter).
    ///
    /// <p>Filters the results by the lifecycle status.</p>
    pub fn life_cycle_status_filter(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.life_cycle_status_filter.unwrap_or_default();
        v.push(input.into());
        self.life_cycle_status_filter = Some(v);
        self
    }
    /// <p>Filters the results by the lifecycle status.</p>
    pub fn set_life_cycle_status_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.life_cycle_status_filter = input;
        self
    }
    /// Appends an item to `availability_zone_filter`.
    ///
    /// To override the contents of this collection use [`set_availability_zone_filter`](Self::set_availability_zone_filter).
    ///
    /// <p>Filters the results by Availability Zone (for example, <code>us-east-1a</code>).</p>
    pub fn availability_zone_filter(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.availability_zone_filter.unwrap_or_default();
        v.push(input.into());
        self.availability_zone_filter = Some(v);
        self
    }
    /// <p>Filters the results by Availability Zone (for example, <code>us-east-1a</code>).</p>
    pub fn set_availability_zone_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.availability_zone_filter = input;
        self
    }
    /// Appends an item to `availability_zone_id_filter`.
    ///
    /// To override the contents of this collection use [`set_availability_zone_id_filter`](Self::set_availability_zone_id_filter).
    ///
    /// <p>Filters the results by AZ ID (for example, <code>use1-az1</code>).</p>
    pub fn availability_zone_id_filter(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.availability_zone_id_filter.unwrap_or_default();
        v.push(input.into());
        self.availability_zone_id_filter = Some(v);
        self
    }
    /// <p>Filters the results by AZ ID (for example, <code>use1-az1</code>).</p>
    pub fn set_availability_zone_id_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.availability_zone_id_filter = input;
        self
    }
    /// Consumes the builder and constructs a [`ListOutpostsInput`](crate::operation::list_outposts::ListOutpostsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_outposts::ListOutpostsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_outposts::ListOutpostsInput {
            next_token: self.next_token,
            max_results: self.max_results,
            life_cycle_status_filter: self.life_cycle_status_filter,
            availability_zone_filter: self.availability_zone_filter,
            availability_zone_id_filter: self.availability_zone_id_filter,
        })
    }
}
