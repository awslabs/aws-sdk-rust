// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetOutpostBillingInformationOutput {
    /// <p>The pagination token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The subscription details for the specified Outpost.</p>
    pub subscriptions: ::std::option::Option<::std::vec::Vec<crate::types::Subscription>>,
    /// <p>The date the current contract term ends for the specified Outpost. You must start the renewal or decommission process at least 5 business days before the current term for your Amazon Web Services Outposts ends. Failing to complete these steps at least 5 business days before the current term ends might result in unanticipated charges.</p>
    pub contract_end_date: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetOutpostBillingInformationOutput {
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The subscription details for the specified Outpost.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subscriptions.is_none()`.
    pub fn subscriptions(&self) -> &[crate::types::Subscription] {
        self.subscriptions.as_deref().unwrap_or_default()
    }
    /// <p>The date the current contract term ends for the specified Outpost. You must start the renewal or decommission process at least 5 business days before the current term for your Amazon Web Services Outposts ends. Failing to complete these steps at least 5 business days before the current term ends might result in unanticipated charges.</p>
    pub fn contract_end_date(&self) -> ::std::option::Option<&str> {
        self.contract_end_date.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetOutpostBillingInformationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetOutpostBillingInformationOutput {
    /// Creates a new builder-style object to manufacture [`GetOutpostBillingInformationOutput`](crate::operation::get_outpost_billing_information::GetOutpostBillingInformationOutput).
    pub fn builder() -> crate::operation::get_outpost_billing_information::builders::GetOutpostBillingInformationOutputBuilder {
        crate::operation::get_outpost_billing_information::builders::GetOutpostBillingInformationOutputBuilder::default()
    }
}

/// A builder for [`GetOutpostBillingInformationOutput`](crate::operation::get_outpost_billing_information::GetOutpostBillingInformationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetOutpostBillingInformationOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) subscriptions: ::std::option::Option<::std::vec::Vec<crate::types::Subscription>>,
    pub(crate) contract_end_date: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetOutpostBillingInformationOutputBuilder {
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `subscriptions`.
    ///
    /// To override the contents of this collection use [`set_subscriptions`](Self::set_subscriptions).
    ///
    /// <p>The subscription details for the specified Outpost.</p>
    pub fn subscriptions(mut self, input: crate::types::Subscription) -> Self {
        let mut v = self.subscriptions.unwrap_or_default();
        v.push(input);
        self.subscriptions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The subscription details for the specified Outpost.</p>
    pub fn set_subscriptions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Subscription>>) -> Self {
        self.subscriptions = input;
        self
    }
    /// <p>The subscription details for the specified Outpost.</p>
    pub fn get_subscriptions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Subscription>> {
        &self.subscriptions
    }
    /// <p>The date the current contract term ends for the specified Outpost. You must start the renewal or decommission process at least 5 business days before the current term for your Amazon Web Services Outposts ends. Failing to complete these steps at least 5 business days before the current term ends might result in unanticipated charges.</p>
    pub fn contract_end_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contract_end_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date the current contract term ends for the specified Outpost. You must start the renewal or decommission process at least 5 business days before the current term for your Amazon Web Services Outposts ends. Failing to complete these steps at least 5 business days before the current term ends might result in unanticipated charges.</p>
    pub fn set_contract_end_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contract_end_date = input;
        self
    }
    /// <p>The date the current contract term ends for the specified Outpost. You must start the renewal or decommission process at least 5 business days before the current term for your Amazon Web Services Outposts ends. Failing to complete these steps at least 5 business days before the current term ends might result in unanticipated charges.</p>
    pub fn get_contract_end_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.contract_end_date
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetOutpostBillingInformationOutput`](crate::operation::get_outpost_billing_information::GetOutpostBillingInformationOutput).
    pub fn build(self) -> crate::operation::get_outpost_billing_information::GetOutpostBillingInformationOutput {
        crate::operation::get_outpost_billing_information::GetOutpostBillingInformationOutput {
            next_token: self.next_token,
            subscriptions: self.subscriptions,
            contract_end_date: self.contract_end_date,
            _request_id: self._request_id,
        }
    }
}
