// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartOutpostDecommissionInput {
    /// <p>The ID or ARN of the Outpost that you want to decommission.</p>
    pub outpost_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Validates the request without starting the decommission process.</p>
    pub validate_only: ::std::option::Option<bool>,
}
impl StartOutpostDecommissionInput {
    /// <p>The ID or ARN of the Outpost that you want to decommission.</p>
    pub fn outpost_identifier(&self) -> ::std::option::Option<&str> {
        self.outpost_identifier.as_deref()
    }
    /// <p>Validates the request without starting the decommission process.</p>
    pub fn validate_only(&self) -> ::std::option::Option<bool> {
        self.validate_only
    }
}
impl StartOutpostDecommissionInput {
    /// Creates a new builder-style object to manufacture [`StartOutpostDecommissionInput`](crate::operation::start_outpost_decommission::StartOutpostDecommissionInput).
    pub fn builder() -> crate::operation::start_outpost_decommission::builders::StartOutpostDecommissionInputBuilder {
        crate::operation::start_outpost_decommission::builders::StartOutpostDecommissionInputBuilder::default()
    }
}

/// A builder for [`StartOutpostDecommissionInput`](crate::operation::start_outpost_decommission::StartOutpostDecommissionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartOutpostDecommissionInputBuilder {
    pub(crate) outpost_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) validate_only: ::std::option::Option<bool>,
}
impl StartOutpostDecommissionInputBuilder {
    /// <p>The ID or ARN of the Outpost that you want to decommission.</p>
    /// This field is required.
    pub fn outpost_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID or ARN of the Outpost that you want to decommission.</p>
    pub fn set_outpost_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_identifier = input;
        self
    }
    /// <p>The ID or ARN of the Outpost that you want to decommission.</p>
    pub fn get_outpost_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_identifier
    }
    /// <p>Validates the request without starting the decommission process.</p>
    pub fn validate_only(mut self, input: bool) -> Self {
        self.validate_only = ::std::option::Option::Some(input);
        self
    }
    /// <p>Validates the request without starting the decommission process.</p>
    pub fn set_validate_only(mut self, input: ::std::option::Option<bool>) -> Self {
        self.validate_only = input;
        self
    }
    /// <p>Validates the request without starting the decommission process.</p>
    pub fn get_validate_only(&self) -> &::std::option::Option<bool> {
        &self.validate_only
    }
    /// Consumes the builder and constructs a [`StartOutpostDecommissionInput`](crate::operation::start_outpost_decommission::StartOutpostDecommissionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_outpost_decommission::StartOutpostDecommissionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_outpost_decommission::StartOutpostDecommissionInput {
            outpost_identifier: self.outpost_identifier,
            validate_only: self.validate_only,
        })
    }
}
