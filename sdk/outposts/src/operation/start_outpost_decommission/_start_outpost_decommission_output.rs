// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartOutpostDecommissionOutput {
    /// <p>The status of the decommission request.</p>
    pub status: ::std::option::Option<crate::types::DecommissionRequestStatus>,
    /// <p>The resources still associated with the Outpost that you are decommissioning.</p>
    pub blocking_resource_types: ::std::option::Option<::std::vec::Vec<crate::types::BlockingResourceType>>,
    _request_id: Option<String>,
}
impl StartOutpostDecommissionOutput {
    /// <p>The status of the decommission request.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DecommissionRequestStatus> {
        self.status.as_ref()
    }
    /// <p>The resources still associated with the Outpost that you are decommissioning.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.blocking_resource_types.is_none()`.
    pub fn blocking_resource_types(&self) -> &[crate::types::BlockingResourceType] {
        self.blocking_resource_types.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for StartOutpostDecommissionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartOutpostDecommissionOutput {
    /// Creates a new builder-style object to manufacture [`StartOutpostDecommissionOutput`](crate::operation::start_outpost_decommission::StartOutpostDecommissionOutput).
    pub fn builder() -> crate::operation::start_outpost_decommission::builders::StartOutpostDecommissionOutputBuilder {
        crate::operation::start_outpost_decommission::builders::StartOutpostDecommissionOutputBuilder::default()
    }
}

/// A builder for [`StartOutpostDecommissionOutput`](crate::operation::start_outpost_decommission::StartOutpostDecommissionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartOutpostDecommissionOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::DecommissionRequestStatus>,
    pub(crate) blocking_resource_types: ::std::option::Option<::std::vec::Vec<crate::types::BlockingResourceType>>,
    _request_id: Option<String>,
}
impl StartOutpostDecommissionOutputBuilder {
    /// <p>The status of the decommission request.</p>
    pub fn status(mut self, input: crate::types::DecommissionRequestStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the decommission request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DecommissionRequestStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the decommission request.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DecommissionRequestStatus> {
        &self.status
    }
    /// Appends an item to `blocking_resource_types`.
    ///
    /// To override the contents of this collection use [`set_blocking_resource_types`](Self::set_blocking_resource_types).
    ///
    /// <p>The resources still associated with the Outpost that you are decommissioning.</p>
    pub fn blocking_resource_types(mut self, input: crate::types::BlockingResourceType) -> Self {
        let mut v = self.blocking_resource_types.unwrap_or_default();
        v.push(input);
        self.blocking_resource_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resources still associated with the Outpost that you are decommissioning.</p>
    pub fn set_blocking_resource_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BlockingResourceType>>) -> Self {
        self.blocking_resource_types = input;
        self
    }
    /// <p>The resources still associated with the Outpost that you are decommissioning.</p>
    pub fn get_blocking_resource_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BlockingResourceType>> {
        &self.blocking_resource_types
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartOutpostDecommissionOutput`](crate::operation::start_outpost_decommission::StartOutpostDecommissionOutput).
    pub fn build(self) -> crate::operation::start_outpost_decommission::StartOutpostDecommissionOutput {
        crate::operation::start_outpost_decommission::StartOutpostDecommissionOutput {
            status: self.status,
            blocking_resource_types: self.blocking_resource_types,
            _request_id: self._request_id,
        }
    }
}
