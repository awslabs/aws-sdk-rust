// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAssetsInput {
    /// <p> The ID or the Amazon Resource Name (ARN) of the Outpost. </p>
    #[doc(hidden)]
    pub outpost_identifier: std::option::Option<std::string::String>,
    /// <p>Filters the results by the host ID of a Dedicated Host.</p>
    #[doc(hidden)]
    pub host_id_filter: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The maximum page size.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Filters the results by state.</p>
    #[doc(hidden)]
    pub status_filter: std::option::Option<std::vec::Vec<crate::types::AssetState>>,
}
impl ListAssetsInput {
    /// <p> The ID or the Amazon Resource Name (ARN) of the Outpost. </p>
    pub fn outpost_identifier(&self) -> std::option::Option<&str> {
        self.outpost_identifier.as_deref()
    }
    /// <p>Filters the results by the host ID of a Dedicated Host.</p>
    pub fn host_id_filter(&self) -> std::option::Option<&[std::string::String]> {
        self.host_id_filter.as_deref()
    }
    /// <p>The maximum page size.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Filters the results by state.</p>
    pub fn status_filter(&self) -> std::option::Option<&[crate::types::AssetState]> {
        self.status_filter.as_deref()
    }
}
impl ListAssetsInput {
    /// Creates a new builder-style object to manufacture [`ListAssetsInput`](crate::operation::list_assets::ListAssetsInput).
    pub fn builder() -> crate::operation::list_assets::builders::ListAssetsInputBuilder {
        crate::operation::list_assets::builders::ListAssetsInputBuilder::default()
    }
}

/// A builder for [`ListAssetsInput`](crate::operation::list_assets::ListAssetsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListAssetsInputBuilder {
    pub(crate) outpost_identifier: std::option::Option<std::string::String>,
    pub(crate) host_id_filter: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) status_filter: std::option::Option<std::vec::Vec<crate::types::AssetState>>,
}
impl ListAssetsInputBuilder {
    /// <p> The ID or the Amazon Resource Name (ARN) of the Outpost. </p>
    pub fn outpost_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.outpost_identifier = Some(input.into());
        self
    }
    /// <p> The ID or the Amazon Resource Name (ARN) of the Outpost. </p>
    pub fn set_outpost_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.outpost_identifier = input;
        self
    }
    /// Appends an item to `host_id_filter`.
    ///
    /// To override the contents of this collection use [`set_host_id_filter`](Self::set_host_id_filter).
    ///
    /// <p>Filters the results by the host ID of a Dedicated Host.</p>
    pub fn host_id_filter(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.host_id_filter.unwrap_or_default();
        v.push(input.into());
        self.host_id_filter = Some(v);
        self
    }
    /// <p>Filters the results by the host ID of a Dedicated Host.</p>
    pub fn set_host_id_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.host_id_filter = input;
        self
    }
    /// <p>The maximum page size.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum page size.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `status_filter`.
    ///
    /// To override the contents of this collection use [`set_status_filter`](Self::set_status_filter).
    ///
    /// <p>Filters the results by state.</p>
    pub fn status_filter(mut self, input: crate::types::AssetState) -> Self {
        let mut v = self.status_filter.unwrap_or_default();
        v.push(input);
        self.status_filter = Some(v);
        self
    }
    /// <p>Filters the results by state.</p>
    pub fn set_status_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssetState>>,
    ) -> Self {
        self.status_filter = input;
        self
    }
    /// Consumes the builder and constructs a [`ListAssetsInput`](crate::operation::list_assets::ListAssetsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_assets::ListAssetsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_assets::ListAssetsInput {
            outpost_identifier: self.outpost_identifier,
            host_id_filter: self.host_id_filter,
            max_results: self.max_results,
            next_token: self.next_token,
            status_filter: self.status_filter,
        })
    }
}
