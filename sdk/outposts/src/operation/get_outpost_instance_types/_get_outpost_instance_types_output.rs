// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetOutpostInstanceTypesOutput {
    /// <p>Information about the instance types.</p>
    #[doc(hidden)]
    pub instance_types: std::option::Option<std::vec::Vec<crate::types::InstanceTypeItem>>,
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p> The ID of the Outpost. </p>
    #[doc(hidden)]
    pub outpost_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    #[doc(hidden)]
    pub outpost_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetOutpostInstanceTypesOutput {
    /// <p>Information about the instance types.</p>
    pub fn instance_types(&self) -> std::option::Option<&[crate::types::InstanceTypeItem]> {
        self.instance_types.as_deref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> The ID of the Outpost. </p>
    pub fn outpost_id(&self) -> std::option::Option<&str> {
        self.outpost_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn outpost_arn(&self) -> std::option::Option<&str> {
        self.outpost_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetOutpostInstanceTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetOutpostInstanceTypesOutput {
    /// Creates a new builder-style object to manufacture [`GetOutpostInstanceTypesOutput`](crate::operation::get_outpost_instance_types::GetOutpostInstanceTypesOutput).
    pub fn builder(
    ) -> crate::operation::get_outpost_instance_types::builders::GetOutpostInstanceTypesOutputBuilder
    {
        crate::operation::get_outpost_instance_types::builders::GetOutpostInstanceTypesOutputBuilder::default()
    }
}

/// A builder for [`GetOutpostInstanceTypesOutput`](crate::operation::get_outpost_instance_types::GetOutpostInstanceTypesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetOutpostInstanceTypesOutputBuilder {
    pub(crate) instance_types: std::option::Option<std::vec::Vec<crate::types::InstanceTypeItem>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) outpost_id: std::option::Option<std::string::String>,
    pub(crate) outpost_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetOutpostInstanceTypesOutputBuilder {
    /// Appends an item to `instance_types`.
    ///
    /// To override the contents of this collection use [`set_instance_types`](Self::set_instance_types).
    ///
    /// <p>Information about the instance types.</p>
    pub fn instance_types(mut self, input: crate::types::InstanceTypeItem) -> Self {
        let mut v = self.instance_types.unwrap_or_default();
        v.push(input);
        self.instance_types = Some(v);
        self
    }
    /// <p>Information about the instance types.</p>
    pub fn set_instance_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InstanceTypeItem>>,
    ) -> Self {
        self.instance_types = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> The ID of the Outpost. </p>
    pub fn outpost_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.outpost_id = Some(input.into());
        self
    }
    /// <p> The ID of the Outpost. </p>
    pub fn set_outpost_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.outpost_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn outpost_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.outpost_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn set_outpost_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.outpost_arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetOutpostInstanceTypesOutput`](crate::operation::get_outpost_instance_types::GetOutpostInstanceTypesOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_outpost_instance_types::GetOutpostInstanceTypesOutput {
        crate::operation::get_outpost_instance_types::GetOutpostInstanceTypesOutput {
            instance_types: self.instance_types,
            next_token: self.next_token,
            outpost_id: self.outpost_id,
            outpost_arn: self.outpost_arn,
            _request_id: self._request_id,
        }
    }
}
