// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCapacityTasksInput {
    /// <p>Filters the results by an Outpost ID or an Outpost ARN.</p>
    pub outpost_identifier_filter: ::std::option::Option<::std::string::String>,
    /// <p>The maximum page size.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The pagination token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>A list of statuses. For example, <code>REQUESTED</code> or <code>WAITING_FOR_EVACUATION</code>.</p>
    pub capacity_task_status_filter: ::std::option::Option<::std::vec::Vec<crate::types::CapacityTaskStatus>>,
}
impl ListCapacityTasksInput {
    /// <p>Filters the results by an Outpost ID or an Outpost ARN.</p>
    pub fn outpost_identifier_filter(&self) -> ::std::option::Option<&str> {
        self.outpost_identifier_filter.as_deref()
    }
    /// <p>The maximum page size.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of statuses. For example, <code>REQUESTED</code> or <code>WAITING_FOR_EVACUATION</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capacity_task_status_filter.is_none()`.
    pub fn capacity_task_status_filter(&self) -> &[crate::types::CapacityTaskStatus] {
        self.capacity_task_status_filter.as_deref().unwrap_or_default()
    }
}
impl ListCapacityTasksInput {
    /// Creates a new builder-style object to manufacture [`ListCapacityTasksInput`](crate::operation::list_capacity_tasks::ListCapacityTasksInput).
    pub fn builder() -> crate::operation::list_capacity_tasks::builders::ListCapacityTasksInputBuilder {
        crate::operation::list_capacity_tasks::builders::ListCapacityTasksInputBuilder::default()
    }
}

/// A builder for [`ListCapacityTasksInput`](crate::operation::list_capacity_tasks::ListCapacityTasksInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListCapacityTasksInputBuilder {
    pub(crate) outpost_identifier_filter: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) capacity_task_status_filter: ::std::option::Option<::std::vec::Vec<crate::types::CapacityTaskStatus>>,
}
impl ListCapacityTasksInputBuilder {
    /// <p>Filters the results by an Outpost ID or an Outpost ARN.</p>
    pub fn outpost_identifier_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_identifier_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filters the results by an Outpost ID or an Outpost ARN.</p>
    pub fn set_outpost_identifier_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_identifier_filter = input;
        self
    }
    /// <p>Filters the results by an Outpost ID or an Outpost ARN.</p>
    pub fn get_outpost_identifier_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_identifier_filter
    }
    /// <p>The maximum page size.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum page size.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum page size.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `capacity_task_status_filter`.
    ///
    /// To override the contents of this collection use [`set_capacity_task_status_filter`](Self::set_capacity_task_status_filter).
    ///
    /// <p>A list of statuses. For example, <code>REQUESTED</code> or <code>WAITING_FOR_EVACUATION</code>.</p>
    pub fn capacity_task_status_filter(mut self, input: crate::types::CapacityTaskStatus) -> Self {
        let mut v = self.capacity_task_status_filter.unwrap_or_default();
        v.push(input);
        self.capacity_task_status_filter = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of statuses. For example, <code>REQUESTED</code> or <code>WAITING_FOR_EVACUATION</code>.</p>
    pub fn set_capacity_task_status_filter(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CapacityTaskStatus>>) -> Self {
        self.capacity_task_status_filter = input;
        self
    }
    /// <p>A list of statuses. For example, <code>REQUESTED</code> or <code>WAITING_FOR_EVACUATION</code>.</p>
    pub fn get_capacity_task_status_filter(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CapacityTaskStatus>> {
        &self.capacity_task_status_filter
    }
    /// Consumes the builder and constructs a [`ListCapacityTasksInput`](crate::operation::list_capacity_tasks::ListCapacityTasksInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_capacity_tasks::ListCapacityTasksInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_capacity_tasks::ListCapacityTasksInput {
            outpost_identifier_filter: self.outpost_identifier_filter,
            max_results: self.max_results,
            next_token: self.next_token,
            capacity_task_status_filter: self.capacity_task_status_filter,
        })
    }
}
