// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCatalogItemsInput {
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum page size.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>Filters the results by item class.</p>
    #[doc(hidden)]
    pub item_class_filter: std::option::Option<std::vec::Vec<crate::types::CatalogItemClass>>,
    /// <p>Filters the results by storage option.</p>
    #[doc(hidden)]
    pub supported_storage_filter:
        std::option::Option<std::vec::Vec<crate::types::SupportedStorageEnum>>,
    /// <p>Filters the results by EC2 family (for example, M5).</p>
    #[doc(hidden)]
    pub ec2_family_filter: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ListCatalogItemsInput {
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum page size.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>Filters the results by item class.</p>
    pub fn item_class_filter(&self) -> std::option::Option<&[crate::types::CatalogItemClass]> {
        self.item_class_filter.as_deref()
    }
    /// <p>Filters the results by storage option.</p>
    pub fn supported_storage_filter(
        &self,
    ) -> std::option::Option<&[crate::types::SupportedStorageEnum]> {
        self.supported_storage_filter.as_deref()
    }
    /// <p>Filters the results by EC2 family (for example, M5).</p>
    pub fn ec2_family_filter(&self) -> std::option::Option<&[std::string::String]> {
        self.ec2_family_filter.as_deref()
    }
}
impl ListCatalogItemsInput {
    /// Creates a new builder-style object to manufacture [`ListCatalogItemsInput`](crate::operation::list_catalog_items::ListCatalogItemsInput).
    pub fn builder() -> crate::operation::list_catalog_items::builders::ListCatalogItemsInputBuilder
    {
        crate::operation::list_catalog_items::builders::ListCatalogItemsInputBuilder::default()
    }
}

/// A builder for [`ListCatalogItemsInput`](crate::operation::list_catalog_items::ListCatalogItemsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListCatalogItemsInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) item_class_filter:
        std::option::Option<std::vec::Vec<crate::types::CatalogItemClass>>,
    pub(crate) supported_storage_filter:
        std::option::Option<std::vec::Vec<crate::types::SupportedStorageEnum>>,
    pub(crate) ec2_family_filter: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ListCatalogItemsInputBuilder {
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum page size.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum page size.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Appends an item to `item_class_filter`.
    ///
    /// To override the contents of this collection use [`set_item_class_filter`](Self::set_item_class_filter).
    ///
    /// <p>Filters the results by item class.</p>
    pub fn item_class_filter(mut self, input: crate::types::CatalogItemClass) -> Self {
        let mut v = self.item_class_filter.unwrap_or_default();
        v.push(input);
        self.item_class_filter = Some(v);
        self
    }
    /// <p>Filters the results by item class.</p>
    pub fn set_item_class_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CatalogItemClass>>,
    ) -> Self {
        self.item_class_filter = input;
        self
    }
    /// Appends an item to `supported_storage_filter`.
    ///
    /// To override the contents of this collection use [`set_supported_storage_filter`](Self::set_supported_storage_filter).
    ///
    /// <p>Filters the results by storage option.</p>
    pub fn supported_storage_filter(mut self, input: crate::types::SupportedStorageEnum) -> Self {
        let mut v = self.supported_storage_filter.unwrap_or_default();
        v.push(input);
        self.supported_storage_filter = Some(v);
        self
    }
    /// <p>Filters the results by storage option.</p>
    pub fn set_supported_storage_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SupportedStorageEnum>>,
    ) -> Self {
        self.supported_storage_filter = input;
        self
    }
    /// Appends an item to `ec2_family_filter`.
    ///
    /// To override the contents of this collection use [`set_ec2_family_filter`](Self::set_ec2_family_filter).
    ///
    /// <p>Filters the results by EC2 family (for example, M5).</p>
    pub fn ec2_family_filter(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.ec2_family_filter.unwrap_or_default();
        v.push(input.into());
        self.ec2_family_filter = Some(v);
        self
    }
    /// <p>Filters the results by EC2 family (for example, M5).</p>
    pub fn set_ec2_family_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.ec2_family_filter = input;
        self
    }
    /// Consumes the builder and constructs a [`ListCatalogItemsInput`](crate::operation::list_catalog_items::ListCatalogItemsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_catalog_items::ListCatalogItemsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_catalog_items::ListCatalogItemsInput {
                next_token: self.next_token,
                max_results: self.max_results,
                item_class_filter: self.item_class_filter,
                supported_storage_filter: self.supported_storage_filter,
                ec2_family_filter: self.ec2_family_filter,
            },
        )
    }
}
