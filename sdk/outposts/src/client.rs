// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Outposts
///
/// Client for invoking operations on AWS Outposts. Each operation on AWS Outposts is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_outposts::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_outposts::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_outposts::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CancelOrder`](crate::client::fluent_builders::CancelOrder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`order_id(impl Into<String>)`](crate::client::fluent_builders::CancelOrder::order_id) / [`set_order_id(Option<String>)`](crate::client::fluent_builders::CancelOrder::set_order_id): <p> The ID of the order. </p>
    /// - On success, responds with [`CancelOrderOutput`](crate::output::CancelOrderOutput)

    /// - On failure, responds with [`SdkError<CancelOrderError>`](crate::error::CancelOrderError)
    pub fn cancel_order(&self) -> crate::client::fluent_builders::CancelOrder {
        crate::client::fluent_builders::CancelOrder::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateOrder`](crate::client::fluent_builders::CreateOrder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`outpost_identifier(impl Into<String>)`](crate::client::fluent_builders::CreateOrder::outpost_identifier) / [`set_outpost_identifier(Option<String>)`](crate::client::fluent_builders::CreateOrder::set_outpost_identifier): <p> The ID or the Amazon Resource Name (ARN) of the Outpost. </p>
    ///   - [`line_items(Vec<LineItemRequest>)`](crate::client::fluent_builders::CreateOrder::line_items) / [`set_line_items(Option<Vec<LineItemRequest>>)`](crate::client::fluent_builders::CreateOrder::set_line_items): <p>The line items that make up the order.</p>
    ///   - [`payment_option(PaymentOption)`](crate::client::fluent_builders::CreateOrder::payment_option) / [`set_payment_option(Option<PaymentOption>)`](crate::client::fluent_builders::CreateOrder::set_payment_option): <p>The payment option.</p>
    ///   - [`payment_term(PaymentTerm)`](crate::client::fluent_builders::CreateOrder::payment_term) / [`set_payment_term(Option<PaymentTerm>)`](crate::client::fluent_builders::CreateOrder::set_payment_term): <p>The payment terms.</p>
    /// - On success, responds with [`CreateOrderOutput`](crate::output::CreateOrderOutput) with field(s):
    ///   - [`order(Option<Order>)`](crate::output::CreateOrderOutput::order): <p>Information about this order.</p>
    /// - On failure, responds with [`SdkError<CreateOrderError>`](crate::error::CreateOrderError)
    pub fn create_order(&self) -> crate::client::fluent_builders::CreateOrder {
        crate::client::fluent_builders::CreateOrder::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateOutpost`](crate::client::fluent_builders::CreateOutpost) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateOutpost::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateOutpost::set_name): <p>The name of the Outpost.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateOutpost::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateOutpost::set_description): <p>The description of the Outpost.</p>
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::CreateOutpost::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::CreateOutpost::set_site_id): <p> The ID or the Amazon Resource Name (ARN) of the site. </p>
    ///   - [`availability_zone(impl Into<String>)`](crate::client::fluent_builders::CreateOutpost::availability_zone) / [`set_availability_zone(Option<String>)`](crate::client::fluent_builders::CreateOutpost::set_availability_zone): <p>The Availability Zone.</p>
    ///   - [`availability_zone_id(impl Into<String>)`](crate::client::fluent_builders::CreateOutpost::availability_zone_id) / [`set_availability_zone_id(Option<String>)`](crate::client::fluent_builders::CreateOutpost::set_availability_zone_id): <p>The ID of the Availability Zone.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateOutpost::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateOutpost::set_tags): <p>The tags to apply to the Outpost.</p>
    ///   - [`supported_hardware_type(SupportedHardwareType)`](crate::client::fluent_builders::CreateOutpost::supported_hardware_type) / [`set_supported_hardware_type(Option<SupportedHardwareType>)`](crate::client::fluent_builders::CreateOutpost::set_supported_hardware_type): <p> The type of hardware for this Outpost. </p>
    /// - On success, responds with [`CreateOutpostOutput`](crate::output::CreateOutpostOutput) with field(s):
    ///   - [`outpost(Option<Outpost>)`](crate::output::CreateOutpostOutput::outpost): <p>Information about an Outpost.</p>
    /// - On failure, responds with [`SdkError<CreateOutpostError>`](crate::error::CreateOutpostError)
    pub fn create_outpost(&self) -> crate::client::fluent_builders::CreateOutpost {
        crate::client::fluent_builders::CreateOutpost::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateSite`](crate::client::fluent_builders::CreateSite) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateSite::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateSite::set_name): <p>The name of the site.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateSite::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateSite::set_description): <p>The description of the site.</p>
    ///   - [`notes(impl Into<String>)`](crate::client::fluent_builders::CreateSite::notes) / [`set_notes(Option<String>)`](crate::client::fluent_builders::CreateSite::set_notes): <p>Additional information that you provide about site access requirements, electrician scheduling, personal protective equipment, or regulation of equipment materials that could affect your installation process. </p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateSite::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateSite::set_tags): <p> The tags to apply to a site. </p>
    ///   - [`operating_address(Address)`](crate::client::fluent_builders::CreateSite::operating_address) / [`set_operating_address(Option<Address>)`](crate::client::fluent_builders::CreateSite::set_operating_address): <p> The location to install and power on the hardware. This address might be different from the shipping address. </p>
    ///   - [`shipping_address(Address)`](crate::client::fluent_builders::CreateSite::shipping_address) / [`set_shipping_address(Option<Address>)`](crate::client::fluent_builders::CreateSite::set_shipping_address): <p> The location to ship the hardware. This address might be different from the operating address. </p>
    ///   - [`rack_physical_properties(RackPhysicalProperties)`](crate::client::fluent_builders::CreateSite::rack_physical_properties) / [`set_rack_physical_properties(Option<RackPhysicalProperties>)`](crate::client::fluent_builders::CreateSite::set_rack_physical_properties): <p> Information about the physical and logistical details for the rack at this site. For more information about hardware requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist">Network readiness checklist</a> in the Amazon Web Services Outposts User Guide. </p>
    /// - On success, responds with [`CreateSiteOutput`](crate::output::CreateSiteOutput) with field(s):
    ///   - [`site(Option<Site>)`](crate::output::CreateSiteOutput::site): <p>Information about a site.</p>
    /// - On failure, responds with [`SdkError<CreateSiteError>`](crate::error::CreateSiteError)
    pub fn create_site(&self) -> crate::client::fluent_builders::CreateSite {
        crate::client::fluent_builders::CreateSite::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteOutpost`](crate::client::fluent_builders::DeleteOutpost) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`outpost_id(impl Into<String>)`](crate::client::fluent_builders::DeleteOutpost::outpost_id) / [`set_outpost_id(Option<String>)`](crate::client::fluent_builders::DeleteOutpost::set_outpost_id): <p> The ID or the Amazon Resource Name (ARN) of the Outpost. </p>
    /// - On success, responds with [`DeleteOutpostOutput`](crate::output::DeleteOutpostOutput)

    /// - On failure, responds with [`SdkError<DeleteOutpostError>`](crate::error::DeleteOutpostError)
    pub fn delete_outpost(&self) -> crate::client::fluent_builders::DeleteOutpost {
        crate::client::fluent_builders::DeleteOutpost::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteSite`](crate::client::fluent_builders::DeleteSite) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::DeleteSite::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::DeleteSite::set_site_id): <p> The ID or the Amazon Resource Name (ARN) of the site. </p>
    /// - On success, responds with [`DeleteSiteOutput`](crate::output::DeleteSiteOutput)

    /// - On failure, responds with [`SdkError<DeleteSiteError>`](crate::error::DeleteSiteError)
    pub fn delete_site(&self) -> crate::client::fluent_builders::DeleteSite {
        crate::client::fluent_builders::DeleteSite::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCatalogItem`](crate::client::fluent_builders::GetCatalogItem) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`catalog_item_id(impl Into<String>)`](crate::client::fluent_builders::GetCatalogItem::catalog_item_id) / [`set_catalog_item_id(Option<String>)`](crate::client::fluent_builders::GetCatalogItem::set_catalog_item_id): <p>The ID of the catalog item.</p>
    /// - On success, responds with [`GetCatalogItemOutput`](crate::output::GetCatalogItemOutput) with field(s):
    ///   - [`catalog_item(Option<CatalogItem>)`](crate::output::GetCatalogItemOutput::catalog_item): <p>Information about this catalog item.</p>
    /// - On failure, responds with [`SdkError<GetCatalogItemError>`](crate::error::GetCatalogItemError)
    pub fn get_catalog_item(&self) -> crate::client::fluent_builders::GetCatalogItem {
        crate::client::fluent_builders::GetCatalogItem::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetConnection`](crate::client::fluent_builders::GetConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connection_id(impl Into<String>)`](crate::client::fluent_builders::GetConnection::connection_id) / [`set_connection_id(Option<String>)`](crate::client::fluent_builders::GetConnection::set_connection_id): <p> The ID of the connection. </p>
    /// - On success, responds with [`GetConnectionOutput`](crate::output::GetConnectionOutput) with field(s):
    ///   - [`connection_id(Option<String>)`](crate::output::GetConnectionOutput::connection_id): <p> The ID of the connection. </p>
    ///   - [`connection_details(Option<ConnectionDetails>)`](crate::output::GetConnectionOutput::connection_details): <p> Information about the connection. </p>
    /// - On failure, responds with [`SdkError<GetConnectionError>`](crate::error::GetConnectionError)
    pub fn get_connection(&self) -> crate::client::fluent_builders::GetConnection {
        crate::client::fluent_builders::GetConnection::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetOrder`](crate::client::fluent_builders::GetOrder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`order_id(impl Into<String>)`](crate::client::fluent_builders::GetOrder::order_id) / [`set_order_id(Option<String>)`](crate::client::fluent_builders::GetOrder::set_order_id): <p>The ID of the order.</p>
    /// - On success, responds with [`GetOrderOutput`](crate::output::GetOrderOutput) with field(s):
    ///   - [`order(Option<Order>)`](crate::output::GetOrderOutput::order): <p>Information about an order.</p>
    /// - On failure, responds with [`SdkError<GetOrderError>`](crate::error::GetOrderError)
    pub fn get_order(&self) -> crate::client::fluent_builders::GetOrder {
        crate::client::fluent_builders::GetOrder::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetOutpost`](crate::client::fluent_builders::GetOutpost) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`outpost_id(impl Into<String>)`](crate::client::fluent_builders::GetOutpost::outpost_id) / [`set_outpost_id(Option<String>)`](crate::client::fluent_builders::GetOutpost::set_outpost_id): <p> The ID or the Amazon Resource Name (ARN) of the Outpost. </p>
    /// - On success, responds with [`GetOutpostOutput`](crate::output::GetOutpostOutput) with field(s):
    ///   - [`outpost(Option<Outpost>)`](crate::output::GetOutpostOutput::outpost): <p>Information about an Outpost.</p>
    /// - On failure, responds with [`SdkError<GetOutpostError>`](crate::error::GetOutpostError)
    pub fn get_outpost(&self) -> crate::client::fluent_builders::GetOutpost {
        crate::client::fluent_builders::GetOutpost::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetOutpostInstanceTypes`](crate::client::fluent_builders::GetOutpostInstanceTypes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetOutpostInstanceTypes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`outpost_id(impl Into<String>)`](crate::client::fluent_builders::GetOutpostInstanceTypes::outpost_id) / [`set_outpost_id(Option<String>)`](crate::client::fluent_builders::GetOutpostInstanceTypes::set_outpost_id): <p> The ID or the Amazon Resource Name (ARN) of the Outpost. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetOutpostInstanceTypes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetOutpostInstanceTypes::set_next_token): <p>The pagination token.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetOutpostInstanceTypes::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetOutpostInstanceTypes::set_max_results): <p>The maximum page size.</p>
    /// - On success, responds with [`GetOutpostInstanceTypesOutput`](crate::output::GetOutpostInstanceTypesOutput) with field(s):
    ///   - [`instance_types(Option<Vec<InstanceTypeItem>>)`](crate::output::GetOutpostInstanceTypesOutput::instance_types): <p>Information about the instance types.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetOutpostInstanceTypesOutput::next_token): <p>The pagination token.</p>
    ///   - [`outpost_id(Option<String>)`](crate::output::GetOutpostInstanceTypesOutput::outpost_id): <p> The ID of the Outpost. </p>
    ///   - [`outpost_arn(Option<String>)`](crate::output::GetOutpostInstanceTypesOutput::outpost_arn): <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    /// - On failure, responds with [`SdkError<GetOutpostInstanceTypesError>`](crate::error::GetOutpostInstanceTypesError)
    pub fn get_outpost_instance_types(
        &self,
    ) -> crate::client::fluent_builders::GetOutpostInstanceTypes {
        crate::client::fluent_builders::GetOutpostInstanceTypes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSite`](crate::client::fluent_builders::GetSite) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::GetSite::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::GetSite::set_site_id): <p> The ID or the Amazon Resource Name (ARN) of the site. </p>
    /// - On success, responds with [`GetSiteOutput`](crate::output::GetSiteOutput) with field(s):
    ///   - [`site(Option<Site>)`](crate::output::GetSiteOutput::site): <p>Information about a site.</p>
    /// - On failure, responds with [`SdkError<GetSiteError>`](crate::error::GetSiteError)
    pub fn get_site(&self) -> crate::client::fluent_builders::GetSite {
        crate::client::fluent_builders::GetSite::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSiteAddress`](crate::client::fluent_builders::GetSiteAddress) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::GetSiteAddress::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::GetSiteAddress::set_site_id): <p> The ID or the Amazon Resource Name (ARN) of the site. </p>
    ///   - [`address_type(AddressType)`](crate::client::fluent_builders::GetSiteAddress::address_type) / [`set_address_type(Option<AddressType>)`](crate::client::fluent_builders::GetSiteAddress::set_address_type): <p>The type of the address you request. </p>
    /// - On success, responds with [`GetSiteAddressOutput`](crate::output::GetSiteAddressOutput) with field(s):
    ///   - [`site_id(Option<String>)`](crate::output::GetSiteAddressOutput::site_id): <p>The ID of the site.</p>
    ///   - [`address_type(Option<AddressType>)`](crate::output::GetSiteAddressOutput::address_type): <p>The type of the address you receive. </p>
    ///   - [`address(Option<Address>)`](crate::output::GetSiteAddressOutput::address): <p> Information about the address. </p>
    /// - On failure, responds with [`SdkError<GetSiteAddressError>`](crate::error::GetSiteAddressError)
    pub fn get_site_address(&self) -> crate::client::fluent_builders::GetSiteAddress {
        crate::client::fluent_builders::GetSiteAddress::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListAssets`](crate::client::fluent_builders::ListAssets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListAssets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`outpost_identifier(impl Into<String>)`](crate::client::fluent_builders::ListAssets::outpost_identifier) / [`set_outpost_identifier(Option<String>)`](crate::client::fluent_builders::ListAssets::set_outpost_identifier): <p> The ID or the Amazon Resource Name (ARN) of the Outpost. </p>
    ///   - [`host_id_filter(Vec<String>)`](crate::client::fluent_builders::ListAssets::host_id_filter) / [`set_host_id_filter(Option<Vec<String>>)`](crate::client::fluent_builders::ListAssets::set_host_id_filter): <p>Filters the results by the host ID of a Dedicated Host.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListAssets::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListAssets::set_max_results): <p>The maximum page size.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListAssets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListAssets::set_next_token): <p>The pagination token.</p>
    ///   - [`status_filter(Vec<AssetState>)`](crate::client::fluent_builders::ListAssets::status_filter) / [`set_status_filter(Option<Vec<AssetState>>)`](crate::client::fluent_builders::ListAssets::set_status_filter): <p>Filters the results by state.</p>
    /// - On success, responds with [`ListAssetsOutput`](crate::output::ListAssetsOutput) with field(s):
    ///   - [`assets(Option<Vec<AssetInfo>>)`](crate::output::ListAssetsOutput::assets): <p>Information about the hardware assets.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListAssetsOutput::next_token): <p>The pagination token.</p>
    /// - On failure, responds with [`SdkError<ListAssetsError>`](crate::error::ListAssetsError)
    pub fn list_assets(&self) -> crate::client::fluent_builders::ListAssets {
        crate::client::fluent_builders::ListAssets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCatalogItems`](crate::client::fluent_builders::ListCatalogItems) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCatalogItems::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCatalogItems::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCatalogItems::set_next_token): <p>The pagination token.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCatalogItems::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCatalogItems::set_max_results): <p>The maximum page size.</p>
    ///   - [`item_class_filter(Vec<CatalogItemClass>)`](crate::client::fluent_builders::ListCatalogItems::item_class_filter) / [`set_item_class_filter(Option<Vec<CatalogItemClass>>)`](crate::client::fluent_builders::ListCatalogItems::set_item_class_filter): <p>Filters the results by item class.</p>
    ///   - [`supported_storage_filter(Vec<SupportedStorageEnum>)`](crate::client::fluent_builders::ListCatalogItems::supported_storage_filter) / [`set_supported_storage_filter(Option<Vec<SupportedStorageEnum>>)`](crate::client::fluent_builders::ListCatalogItems::set_supported_storage_filter): <p>Filters the results by storage option.</p>
    ///   - [`ec2_family_filter(Vec<String>)`](crate::client::fluent_builders::ListCatalogItems::ec2_family_filter) / [`set_ec2_family_filter(Option<Vec<String>>)`](crate::client::fluent_builders::ListCatalogItems::set_ec2_family_filter): <p>Filters the results by EC2 family (for example, M5).</p>
    /// - On success, responds with [`ListCatalogItemsOutput`](crate::output::ListCatalogItemsOutput) with field(s):
    ///   - [`catalog_items(Option<Vec<CatalogItem>>)`](crate::output::ListCatalogItemsOutput::catalog_items): <p>Information about the catalog items.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListCatalogItemsOutput::next_token): <p>The pagination token.</p>
    /// - On failure, responds with [`SdkError<ListCatalogItemsError>`](crate::error::ListCatalogItemsError)
    pub fn list_catalog_items(&self) -> crate::client::fluent_builders::ListCatalogItems {
        crate::client::fluent_builders::ListCatalogItems::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListOrders`](crate::client::fluent_builders::ListOrders) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListOrders::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`outpost_identifier_filter(impl Into<String>)`](crate::client::fluent_builders::ListOrders::outpost_identifier_filter) / [`set_outpost_identifier_filter(Option<String>)`](crate::client::fluent_builders::ListOrders::set_outpost_identifier_filter): <p> The ID or the Amazon Resource Name (ARN) of the Outpost. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListOrders::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListOrders::set_next_token): <p>The pagination token.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListOrders::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListOrders::set_max_results): <p>The maximum page size.</p>
    /// - On success, responds with [`ListOrdersOutput`](crate::output::ListOrdersOutput) with field(s):
    ///   - [`orders(Option<Vec<OrderSummary>>)`](crate::output::ListOrdersOutput::orders): <p> Information about the orders. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListOrdersOutput::next_token): <p>The pagination token.</p>
    /// - On failure, responds with [`SdkError<ListOrdersError>`](crate::error::ListOrdersError)
    pub fn list_orders(&self) -> crate::client::fluent_builders::ListOrders {
        crate::client::fluent_builders::ListOrders::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListOutposts`](crate::client::fluent_builders::ListOutposts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListOutposts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListOutposts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListOutposts::set_next_token): <p>The pagination token.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListOutposts::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListOutposts::set_max_results): <p>The maximum page size.</p>
    ///   - [`life_cycle_status_filter(Vec<String>)`](crate::client::fluent_builders::ListOutposts::life_cycle_status_filter) / [`set_life_cycle_status_filter(Option<Vec<String>>)`](crate::client::fluent_builders::ListOutposts::set_life_cycle_status_filter): <p>Filters the results by the lifecycle status.</p>
    ///   - [`availability_zone_filter(Vec<String>)`](crate::client::fluent_builders::ListOutposts::availability_zone_filter) / [`set_availability_zone_filter(Option<Vec<String>>)`](crate::client::fluent_builders::ListOutposts::set_availability_zone_filter): <p>Filters the results by Availability Zone (for example, <code>us-east-1a</code>).</p>
    ///   - [`availability_zone_id_filter(Vec<String>)`](crate::client::fluent_builders::ListOutposts::availability_zone_id_filter) / [`set_availability_zone_id_filter(Option<Vec<String>>)`](crate::client::fluent_builders::ListOutposts::set_availability_zone_id_filter): <p>Filters the results by AZ ID (for example, <code>use1-az1</code>).</p>
    /// - On success, responds with [`ListOutpostsOutput`](crate::output::ListOutpostsOutput) with field(s):
    ///   - [`outposts(Option<Vec<Outpost>>)`](crate::output::ListOutpostsOutput::outposts): <p>Information about the Outposts.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListOutpostsOutput::next_token): <p>The pagination token.</p>
    /// - On failure, responds with [`SdkError<ListOutpostsError>`](crate::error::ListOutpostsError)
    pub fn list_outposts(&self) -> crate::client::fluent_builders::ListOutposts {
        crate::client::fluent_builders::ListOutposts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSites`](crate::client::fluent_builders::ListSites) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSites::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSites::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSites::set_next_token): <p>The pagination token.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListSites::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListSites::set_max_results): <p>The maximum page size.</p>
    ///   - [`operating_address_country_code_filter(Vec<String>)`](crate::client::fluent_builders::ListSites::operating_address_country_code_filter) / [`set_operating_address_country_code_filter(Option<Vec<String>>)`](crate::client::fluent_builders::ListSites::set_operating_address_country_code_filter): <p>Filters the results by country code.</p>
    ///   - [`operating_address_state_or_region_filter(Vec<String>)`](crate::client::fluent_builders::ListSites::operating_address_state_or_region_filter) / [`set_operating_address_state_or_region_filter(Option<Vec<String>>)`](crate::client::fluent_builders::ListSites::set_operating_address_state_or_region_filter): <p>Filters the results by state or region.</p>
    ///   - [`operating_address_city_filter(Vec<String>)`](crate::client::fluent_builders::ListSites::operating_address_city_filter) / [`set_operating_address_city_filter(Option<Vec<String>>)`](crate::client::fluent_builders::ListSites::set_operating_address_city_filter): <p>Filters the results by city.</p>
    /// - On success, responds with [`ListSitesOutput`](crate::output::ListSitesOutput) with field(s):
    ///   - [`sites(Option<Vec<Site>>)`](crate::output::ListSitesOutput::sites): <p>Information about the sites.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListSitesOutput::next_token): <p>The pagination token.</p>
    /// - On failure, responds with [`SdkError<ListSitesError>`](crate::error::ListSitesError)
    pub fn list_sites(&self) -> crate::client::fluent_builders::ListSites {
        crate::client::fluent_builders::ListSites::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The resource tags.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartConnection`](crate::client::fluent_builders::StartConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device_serial_number(impl Into<String>)`](crate::client::fluent_builders::StartConnection::device_serial_number) / [`set_device_serial_number(Option<String>)`](crate::client::fluent_builders::StartConnection::set_device_serial_number): <p> The serial number of the dongle. </p>
    ///   - [`asset_id(impl Into<String>)`](crate::client::fluent_builders::StartConnection::asset_id) / [`set_asset_id(Option<String>)`](crate::client::fluent_builders::StartConnection::set_asset_id): <p> The ID of the Outpost server. </p>
    ///   - [`client_public_key(impl Into<String>)`](crate::client::fluent_builders::StartConnection::client_public_key) / [`set_client_public_key(Option<String>)`](crate::client::fluent_builders::StartConnection::set_client_public_key): <p> The public key of the client. </p>
    ///   - [`network_interface_device_index(i32)`](crate::client::fluent_builders::StartConnection::network_interface_device_index) / [`set_network_interface_device_index(i32)`](crate::client::fluent_builders::StartConnection::set_network_interface_device_index): <p> The device index of the network interface on the Outpost server. </p>
    /// - On success, responds with [`StartConnectionOutput`](crate::output::StartConnectionOutput) with field(s):
    ///   - [`connection_id(Option<String>)`](crate::output::StartConnectionOutput::connection_id): <p> The ID of the connection. </p>
    ///   - [`underlay_ip_address(Option<String>)`](crate::output::StartConnectionOutput::underlay_ip_address): <p> The underlay IP address. </p>
    /// - On failure, responds with [`SdkError<StartConnectionError>`](crate::error::StartConnectionError)
    pub fn start_connection(&self) -> crate::client::fluent_builders::StartConnection {
        crate::client::fluent_builders::StartConnection::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags to add to the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The tag keys.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateOutpost`](crate::client::fluent_builders::UpdateOutpost) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`outpost_id(impl Into<String>)`](crate::client::fluent_builders::UpdateOutpost::outpost_id) / [`set_outpost_id(Option<String>)`](crate::client::fluent_builders::UpdateOutpost::set_outpost_id): <p> The ID or the Amazon Resource Name (ARN) of the Outpost. </p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateOutpost::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateOutpost::set_name): <p>The name of the Outpost.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateOutpost::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateOutpost::set_description): <p>The description of the Outpost.</p>
    ///   - [`supported_hardware_type(SupportedHardwareType)`](crate::client::fluent_builders::UpdateOutpost::supported_hardware_type) / [`set_supported_hardware_type(Option<SupportedHardwareType>)`](crate::client::fluent_builders::UpdateOutpost::set_supported_hardware_type): <p> The type of hardware for this Outpost. </p>
    /// - On success, responds with [`UpdateOutpostOutput`](crate::output::UpdateOutpostOutput) with field(s):
    ///   - [`outpost(Option<Outpost>)`](crate::output::UpdateOutpostOutput::outpost): <p>Information about an Outpost.</p>
    /// - On failure, responds with [`SdkError<UpdateOutpostError>`](crate::error::UpdateOutpostError)
    pub fn update_outpost(&self) -> crate::client::fluent_builders::UpdateOutpost {
        crate::client::fluent_builders::UpdateOutpost::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateSite`](crate::client::fluent_builders::UpdateSite) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::UpdateSite::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::UpdateSite::set_site_id): <p> The ID or the Amazon Resource Name (ARN) of the site. </p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateSite::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateSite::set_name): <p>The name of the site.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateSite::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateSite::set_description): <p>The description of the site.</p>
    ///   - [`notes(impl Into<String>)`](crate::client::fluent_builders::UpdateSite::notes) / [`set_notes(Option<String>)`](crate::client::fluent_builders::UpdateSite::set_notes): <p>Notes about a site.</p>
    /// - On success, responds with [`UpdateSiteOutput`](crate::output::UpdateSiteOutput) with field(s):
    ///   - [`site(Option<Site>)`](crate::output::UpdateSiteOutput::site): <p>Information about a site.</p>
    /// - On failure, responds with [`SdkError<UpdateSiteError>`](crate::error::UpdateSiteError)
    pub fn update_site(&self) -> crate::client::fluent_builders::UpdateSite {
        crate::client::fluent_builders::UpdateSite::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateSiteAddress`](crate::client::fluent_builders::UpdateSiteAddress) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::UpdateSiteAddress::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::UpdateSiteAddress::set_site_id): <p> The ID or the Amazon Resource Name (ARN) of the site. </p>
    ///   - [`address_type(AddressType)`](crate::client::fluent_builders::UpdateSiteAddress::address_type) / [`set_address_type(Option<AddressType>)`](crate::client::fluent_builders::UpdateSiteAddress::set_address_type): <p> The type of the address. </p>
    ///   - [`address(Address)`](crate::client::fluent_builders::UpdateSiteAddress::address) / [`set_address(Option<Address>)`](crate::client::fluent_builders::UpdateSiteAddress::set_address): <p> The address for the site. </p>
    /// - On success, responds with [`UpdateSiteAddressOutput`](crate::output::UpdateSiteAddressOutput) with field(s):
    ///   - [`address_type(Option<AddressType>)`](crate::output::UpdateSiteAddressOutput::address_type): <p> The type of the address. </p>
    ///   - [`address(Option<Address>)`](crate::output::UpdateSiteAddressOutput::address): <p> Information about an address. </p>
    /// - On failure, responds with [`SdkError<UpdateSiteAddressError>`](crate::error::UpdateSiteAddressError)
    pub fn update_site_address(&self) -> crate::client::fluent_builders::UpdateSiteAddress {
        crate::client::fluent_builders::UpdateSiteAddress::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateSiteRackPhysicalProperties`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`site_id(impl Into<String>)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::site_id) / [`set_site_id(Option<String>)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::set_site_id): <p> The ID or the Amazon Resource Name (ARN) of the site. </p>
    ///   - [`power_draw_kva(PowerDrawKva)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::power_draw_kva) / [`set_power_draw_kva(Option<PowerDrawKva>)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::set_power_draw_kva): <p>The power draw, in kVA, available at the hardware placement position for the rack.</p>
    ///   - [`power_phase(PowerPhase)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::power_phase) / [`set_power_phase(Option<PowerPhase>)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::set_power_phase): <p>The power option that you can provide for hardware. </p>  <ul>   <li> <p>Single-phase AC feed: 200 V to 277 V, 50 Hz or 60 Hz</p> </li>   <li> <p>Three-phase AC feed: 346 V to 480 V, 50 Hz or 60 Hz</p> </li>  </ul>
    ///   - [`power_connector(PowerConnector)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::power_connector) / [`set_power_connector(Option<PowerConnector>)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::set_power_connector): <p>The power connector that Amazon Web Services should plan to provide for connections to the hardware. Note the correlation between <code>PowerPhase</code> and <code>PowerConnector</code>. </p>  <ul>   <li> <p>Single-phase AC feed</p>    <ul>     <li> <p> <b>L6-30P</b> – (common in US); 30A; single phase</p> </li>     <li> <p> <b>IEC309 (blue)</b> – P+N+E, 6hr; 32 A; single phase</p> </li>    </ul> </li>   <li> <p>Three-phase AC feed</p>    <ul>     <li> <p> <b>AH530P7W (red)</b> – 3P+N+E, 7hr; 30A; three phase</p> </li>     <li> <p> <b>AH532P6W (red)</b> – 3P+N+E, 6hr; 32A; three phase</p> </li>    </ul> </li>  </ul>
    ///   - [`power_feed_drop(PowerFeedDrop)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::power_feed_drop) / [`set_power_feed_drop(Option<PowerFeedDrop>)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::set_power_feed_drop): <p>Indicates whether the power feed comes above or below the rack. </p>
    ///   - [`uplink_gbps(UplinkGbps)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::uplink_gbps) / [`set_uplink_gbps(Option<UplinkGbps>)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::set_uplink_gbps): <p>The uplink speed the rack should support for the connection to the Region. </p>
    ///   - [`uplink_count(UplinkCount)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::uplink_count) / [`set_uplink_count(Option<UplinkCount>)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::set_uplink_count): <p>Racks come with two Outpost network devices. Depending on the supported uplink speed at the site, the Outpost network devices provide a variable number of uplinks. Specify the number of uplinks for each Outpost network device that you intend to use to connect the rack to your network. Note the correlation between <code>UplinkGbps</code> and <code>UplinkCount</code>. </p>  <ul>   <li> <p>1Gbps - Uplinks available: 1, 2, 4, 6, 8</p> </li>   <li> <p>10Gbps - Uplinks available: 1, 2, 4, 8, 12, 16</p> </li>   <li> <p>40 and 100 Gbps- Uplinks available: 1, 2, 4</p> </li>  </ul>
    ///   - [`fiber_optic_cable_type(FiberOpticCableType)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::fiber_optic_cable_type) / [`set_fiber_optic_cable_type(Option<FiberOpticCableType>)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::set_fiber_optic_cable_type): <p>The type of fiber that you will use to attach the Outpost to your network. </p>
    ///   - [`optical_standard(OpticalStandard)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::optical_standard) / [`set_optical_standard(Option<OpticalStandard>)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::set_optical_standard): <p>The type of optical standard that you will use to attach the Outpost to your network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking">Network</a> in the Amazon Web Services Outposts User Guide. </p>  <ul>   <li> <p> <code>OPTIC_10GBASE_SR</code>: 10GBASE-SR</p> </li>   <li> <p> <code>OPTIC_10GBASE_IR</code>: 10GBASE-IR</p> </li>   <li> <p> <code>OPTIC_10GBASE_LR</code>: 10GBASE-LR</p> </li>   <li> <p> <code>OPTIC_40GBASE_SR</code>: 40GBASE-SR</p> </li>   <li> <p> <code>OPTIC_40GBASE_ESR</code>: 40GBASE-ESR</p> </li>   <li> <p> <code>OPTIC_40GBASE_IR4_LR4L</code>: 40GBASE-IR (LR4L)</p> </li>   <li> <p> <code>OPTIC_40GBASE_LR4</code>: 40GBASE-LR4</p> </li>   <li> <p> <code>OPTIC_100GBASE_SR4</code>: 100GBASE-SR4</p> </li>   <li> <p> <code>OPTIC_100GBASE_CWDM4</code>: 100GBASE-CWDM4</p> </li>   <li> <p> <code>OPTIC_100GBASE_LR4</code>: 100GBASE-LR4</p> </li>   <li> <p> <code>OPTIC_100G_PSM4_MSA</code>: 100G PSM4 MSA</p> </li>   <li> <p> <code>OPTIC_1000BASE_LX</code>: 1000Base-LX</p> </li>   <li> <p> <code>OPTIC_1000BASE_SX</code> : 1000Base-SX</p> </li>  </ul>
    ///   - [`maximum_supported_weight_lbs(MaximumSupportedWeightLbs)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::maximum_supported_weight_lbs) / [`set_maximum_supported_weight_lbs(Option<MaximumSupportedWeightLbs>)`](crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::set_maximum_supported_weight_lbs): <p>The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000lbs. </p>
    /// - On success, responds with [`UpdateSiteRackPhysicalPropertiesOutput`](crate::output::UpdateSiteRackPhysicalPropertiesOutput) with field(s):
    ///   - [`site(Option<Site>)`](crate::output::UpdateSiteRackPhysicalPropertiesOutput::site): <p>Information about a site.</p>
    /// - On failure, responds with [`SdkError<UpdateSiteRackPhysicalPropertiesError>`](crate::error::UpdateSiteRackPhysicalPropertiesError)
    pub fn update_site_rack_physical_properties(
        &self,
    ) -> crate::client::fluent_builders::UpdateSiteRackPhysicalProperties {
        crate::client::fluent_builders::UpdateSiteRackPhysicalProperties::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
