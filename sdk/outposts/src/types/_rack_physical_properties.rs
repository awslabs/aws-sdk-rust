// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about the physical and logistical details for racks at sites. For more information about hardware requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist">Network readiness checklist</a> in the Amazon Web Services Outposts User Guide. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RackPhysicalProperties {
    /// <p>The power draw available at the hardware placement position for the rack. </p>
    #[doc(hidden)]
    pub power_draw_kva: std::option::Option<crate::types::PowerDrawKva>,
    /// <p>The power option that you can provide for hardware.</p>
    #[doc(hidden)]
    pub power_phase: std::option::Option<crate::types::PowerPhase>,
    /// <p>The power connector for the hardware. </p>
    #[doc(hidden)]
    pub power_connector: std::option::Option<crate::types::PowerConnector>,
    /// <p>The position of the power feed.</p>
    #[doc(hidden)]
    pub power_feed_drop: std::option::Option<crate::types::PowerFeedDrop>,
    /// <p>The uplink speed the rack supports for the connection to the Region. </p>
    #[doc(hidden)]
    pub uplink_gbps: std::option::Option<crate::types::UplinkGbps>,
    /// <p>The number of uplinks each Outpost network device.</p>
    #[doc(hidden)]
    pub uplink_count: std::option::Option<crate::types::UplinkCount>,
    /// <p>The type of fiber used to attach the Outpost to the network. </p>
    #[doc(hidden)]
    pub fiber_optic_cable_type: std::option::Option<crate::types::FiberOpticCableType>,
    /// <p>The type of optical standard used to attach the Outpost to the network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking">Network</a> in the Amazon Web Services Outposts User Guide. </p>
    #[doc(hidden)]
    pub optical_standard: std::option::Option<crate::types::OpticalStandard>,
    /// <p>The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000 lbs (907 kg). </p>
    #[doc(hidden)]
    pub maximum_supported_weight_lbs: std::option::Option<crate::types::MaximumSupportedWeightLbs>,
}
impl RackPhysicalProperties {
    /// <p>The power draw available at the hardware placement position for the rack. </p>
    pub fn power_draw_kva(&self) -> std::option::Option<&crate::types::PowerDrawKva> {
        self.power_draw_kva.as_ref()
    }
    /// <p>The power option that you can provide for hardware.</p>
    pub fn power_phase(&self) -> std::option::Option<&crate::types::PowerPhase> {
        self.power_phase.as_ref()
    }
    /// <p>The power connector for the hardware. </p>
    pub fn power_connector(&self) -> std::option::Option<&crate::types::PowerConnector> {
        self.power_connector.as_ref()
    }
    /// <p>The position of the power feed.</p>
    pub fn power_feed_drop(&self) -> std::option::Option<&crate::types::PowerFeedDrop> {
        self.power_feed_drop.as_ref()
    }
    /// <p>The uplink speed the rack supports for the connection to the Region. </p>
    pub fn uplink_gbps(&self) -> std::option::Option<&crate::types::UplinkGbps> {
        self.uplink_gbps.as_ref()
    }
    /// <p>The number of uplinks each Outpost network device.</p>
    pub fn uplink_count(&self) -> std::option::Option<&crate::types::UplinkCount> {
        self.uplink_count.as_ref()
    }
    /// <p>The type of fiber used to attach the Outpost to the network. </p>
    pub fn fiber_optic_cable_type(
        &self,
    ) -> std::option::Option<&crate::types::FiberOpticCableType> {
        self.fiber_optic_cable_type.as_ref()
    }
    /// <p>The type of optical standard used to attach the Outpost to the network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking">Network</a> in the Amazon Web Services Outposts User Guide. </p>
    pub fn optical_standard(&self) -> std::option::Option<&crate::types::OpticalStandard> {
        self.optical_standard.as_ref()
    }
    /// <p>The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000 lbs (907 kg). </p>
    pub fn maximum_supported_weight_lbs(
        &self,
    ) -> std::option::Option<&crate::types::MaximumSupportedWeightLbs> {
        self.maximum_supported_weight_lbs.as_ref()
    }
}
impl RackPhysicalProperties {
    /// Creates a new builder-style object to manufacture [`RackPhysicalProperties`](crate::types::RackPhysicalProperties).
    pub fn builder() -> crate::types::builders::RackPhysicalPropertiesBuilder {
        crate::types::builders::RackPhysicalPropertiesBuilder::default()
    }
}

/// A builder for [`RackPhysicalProperties`](crate::types::RackPhysicalProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RackPhysicalPropertiesBuilder {
    pub(crate) power_draw_kva: std::option::Option<crate::types::PowerDrawKva>,
    pub(crate) power_phase: std::option::Option<crate::types::PowerPhase>,
    pub(crate) power_connector: std::option::Option<crate::types::PowerConnector>,
    pub(crate) power_feed_drop: std::option::Option<crate::types::PowerFeedDrop>,
    pub(crate) uplink_gbps: std::option::Option<crate::types::UplinkGbps>,
    pub(crate) uplink_count: std::option::Option<crate::types::UplinkCount>,
    pub(crate) fiber_optic_cable_type: std::option::Option<crate::types::FiberOpticCableType>,
    pub(crate) optical_standard: std::option::Option<crate::types::OpticalStandard>,
    pub(crate) maximum_supported_weight_lbs:
        std::option::Option<crate::types::MaximumSupportedWeightLbs>,
}
impl RackPhysicalPropertiesBuilder {
    /// <p>The power draw available at the hardware placement position for the rack. </p>
    pub fn power_draw_kva(mut self, input: crate::types::PowerDrawKva) -> Self {
        self.power_draw_kva = Some(input);
        self
    }
    /// <p>The power draw available at the hardware placement position for the rack. </p>
    pub fn set_power_draw_kva(
        mut self,
        input: std::option::Option<crate::types::PowerDrawKva>,
    ) -> Self {
        self.power_draw_kva = input;
        self
    }
    /// <p>The power option that you can provide for hardware.</p>
    pub fn power_phase(mut self, input: crate::types::PowerPhase) -> Self {
        self.power_phase = Some(input);
        self
    }
    /// <p>The power option that you can provide for hardware.</p>
    pub fn set_power_phase(mut self, input: std::option::Option<crate::types::PowerPhase>) -> Self {
        self.power_phase = input;
        self
    }
    /// <p>The power connector for the hardware. </p>
    pub fn power_connector(mut self, input: crate::types::PowerConnector) -> Self {
        self.power_connector = Some(input);
        self
    }
    /// <p>The power connector for the hardware. </p>
    pub fn set_power_connector(
        mut self,
        input: std::option::Option<crate::types::PowerConnector>,
    ) -> Self {
        self.power_connector = input;
        self
    }
    /// <p>The position of the power feed.</p>
    pub fn power_feed_drop(mut self, input: crate::types::PowerFeedDrop) -> Self {
        self.power_feed_drop = Some(input);
        self
    }
    /// <p>The position of the power feed.</p>
    pub fn set_power_feed_drop(
        mut self,
        input: std::option::Option<crate::types::PowerFeedDrop>,
    ) -> Self {
        self.power_feed_drop = input;
        self
    }
    /// <p>The uplink speed the rack supports for the connection to the Region. </p>
    pub fn uplink_gbps(mut self, input: crate::types::UplinkGbps) -> Self {
        self.uplink_gbps = Some(input);
        self
    }
    /// <p>The uplink speed the rack supports for the connection to the Region. </p>
    pub fn set_uplink_gbps(mut self, input: std::option::Option<crate::types::UplinkGbps>) -> Self {
        self.uplink_gbps = input;
        self
    }
    /// <p>The number of uplinks each Outpost network device.</p>
    pub fn uplink_count(mut self, input: crate::types::UplinkCount) -> Self {
        self.uplink_count = Some(input);
        self
    }
    /// <p>The number of uplinks each Outpost network device.</p>
    pub fn set_uplink_count(
        mut self,
        input: std::option::Option<crate::types::UplinkCount>,
    ) -> Self {
        self.uplink_count = input;
        self
    }
    /// <p>The type of fiber used to attach the Outpost to the network. </p>
    pub fn fiber_optic_cable_type(mut self, input: crate::types::FiberOpticCableType) -> Self {
        self.fiber_optic_cable_type = Some(input);
        self
    }
    /// <p>The type of fiber used to attach the Outpost to the network. </p>
    pub fn set_fiber_optic_cable_type(
        mut self,
        input: std::option::Option<crate::types::FiberOpticCableType>,
    ) -> Self {
        self.fiber_optic_cable_type = input;
        self
    }
    /// <p>The type of optical standard used to attach the Outpost to the network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking">Network</a> in the Amazon Web Services Outposts User Guide. </p>
    pub fn optical_standard(mut self, input: crate::types::OpticalStandard) -> Self {
        self.optical_standard = Some(input);
        self
    }
    /// <p>The type of optical standard used to attach the Outpost to the network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking">Network</a> in the Amazon Web Services Outposts User Guide. </p>
    pub fn set_optical_standard(
        mut self,
        input: std::option::Option<crate::types::OpticalStandard>,
    ) -> Self {
        self.optical_standard = input;
        self
    }
    /// <p>The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000 lbs (907 kg). </p>
    pub fn maximum_supported_weight_lbs(
        mut self,
        input: crate::types::MaximumSupportedWeightLbs,
    ) -> Self {
        self.maximum_supported_weight_lbs = Some(input);
        self
    }
    /// <p>The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000 lbs (907 kg). </p>
    pub fn set_maximum_supported_weight_lbs(
        mut self,
        input: std::option::Option<crate::types::MaximumSupportedWeightLbs>,
    ) -> Self {
        self.maximum_supported_weight_lbs = input;
        self
    }
    /// Consumes the builder and constructs a [`RackPhysicalProperties`](crate::types::RackPhysicalProperties).
    pub fn build(self) -> crate::types::RackPhysicalProperties {
        crate::types::RackPhysicalProperties {
            power_draw_kva: self.power_draw_kva,
            power_phase: self.power_phase,
            power_connector: self.power_connector,
            power_feed_drop: self.power_feed_drop,
            uplink_gbps: self.uplink_gbps,
            uplink_count: self.uplink_count,
            fiber_optic_cable_type: self.fiber_optic_cable_type,
            optical_standard: self.optical_standard,
            maximum_supported_weight_lbs: self.maximum_supported_weight_lbs,
        }
    }
}
