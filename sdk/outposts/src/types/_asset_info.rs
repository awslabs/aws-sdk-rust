// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about hardware assets. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssetInfo {
    /// <p> The ID of the asset. </p>
    #[doc(hidden)]
    pub asset_id: std::option::Option<std::string::String>,
    /// <p> The rack ID of the asset. </p>
    #[doc(hidden)]
    pub rack_id: std::option::Option<std::string::String>,
    /// <p> The type of the asset. </p>
    #[doc(hidden)]
    pub asset_type: std::option::Option<crate::types::AssetType>,
    /// <p> Information about compute hardware assets. </p>
    #[doc(hidden)]
    pub compute_attributes: std::option::Option<crate::types::ComputeAttributes>,
    /// <p> The position of an asset in a rack. </p>
    #[doc(hidden)]
    pub asset_location: std::option::Option<crate::types::AssetLocation>,
}
impl AssetInfo {
    /// <p> The ID of the asset. </p>
    pub fn asset_id(&self) -> std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p> The rack ID of the asset. </p>
    pub fn rack_id(&self) -> std::option::Option<&str> {
        self.rack_id.as_deref()
    }
    /// <p> The type of the asset. </p>
    pub fn asset_type(&self) -> std::option::Option<&crate::types::AssetType> {
        self.asset_type.as_ref()
    }
    /// <p> Information about compute hardware assets. </p>
    pub fn compute_attributes(&self) -> std::option::Option<&crate::types::ComputeAttributes> {
        self.compute_attributes.as_ref()
    }
    /// <p> The position of an asset in a rack. </p>
    pub fn asset_location(&self) -> std::option::Option<&crate::types::AssetLocation> {
        self.asset_location.as_ref()
    }
}
impl AssetInfo {
    /// Creates a new builder-style object to manufacture [`AssetInfo`](crate::types::AssetInfo).
    pub fn builder() -> crate::types::builders::AssetInfoBuilder {
        crate::types::builders::AssetInfoBuilder::default()
    }
}

/// A builder for [`AssetInfo`](crate::types::AssetInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssetInfoBuilder {
    pub(crate) asset_id: std::option::Option<std::string::String>,
    pub(crate) rack_id: std::option::Option<std::string::String>,
    pub(crate) asset_type: std::option::Option<crate::types::AssetType>,
    pub(crate) compute_attributes: std::option::Option<crate::types::ComputeAttributes>,
    pub(crate) asset_location: std::option::Option<crate::types::AssetLocation>,
}
impl AssetInfoBuilder {
    /// <p> The ID of the asset. </p>
    pub fn asset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_id = Some(input.into());
        self
    }
    /// <p> The ID of the asset. </p>
    pub fn set_asset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p> The rack ID of the asset. </p>
    pub fn rack_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rack_id = Some(input.into());
        self
    }
    /// <p> The rack ID of the asset. </p>
    pub fn set_rack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rack_id = input;
        self
    }
    /// <p> The type of the asset. </p>
    pub fn asset_type(mut self, input: crate::types::AssetType) -> Self {
        self.asset_type = Some(input);
        self
    }
    /// <p> The type of the asset. </p>
    pub fn set_asset_type(mut self, input: std::option::Option<crate::types::AssetType>) -> Self {
        self.asset_type = input;
        self
    }
    /// <p> Information about compute hardware assets. </p>
    pub fn compute_attributes(mut self, input: crate::types::ComputeAttributes) -> Self {
        self.compute_attributes = Some(input);
        self
    }
    /// <p> Information about compute hardware assets. </p>
    pub fn set_compute_attributes(
        mut self,
        input: std::option::Option<crate::types::ComputeAttributes>,
    ) -> Self {
        self.compute_attributes = input;
        self
    }
    /// <p> The position of an asset in a rack. </p>
    pub fn asset_location(mut self, input: crate::types::AssetLocation) -> Self {
        self.asset_location = Some(input);
        self
    }
    /// <p> The position of an asset in a rack. </p>
    pub fn set_asset_location(
        mut self,
        input: std::option::Option<crate::types::AssetLocation>,
    ) -> Self {
        self.asset_location = input;
        self
    }
    /// Consumes the builder and constructs a [`AssetInfo`](crate::types::AssetInfo).
    pub fn build(self) -> crate::types::AssetInfo {
        crate::types::AssetInfo {
            asset_id: self.asset_id,
            rack_id: self.rack_id,
            asset_type: self.asset_type,
            compute_attributes: self.compute_attributes,
            asset_location: self.asset_location,
        }
    }
}
