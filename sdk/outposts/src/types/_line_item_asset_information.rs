// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about a line item asset. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LineItemAssetInformation {
    /// <p> The ID of the asset. </p>
    pub asset_id: ::std::option::Option<::std::string::String>,
    /// <p> The MAC addresses of the asset. </p>
    pub mac_address_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LineItemAssetInformation {
    /// <p> The ID of the asset. </p>
    pub fn asset_id(&self) -> ::std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p> The MAC addresses of the asset. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.mac_address_list.is_none()`.
    pub fn mac_address_list(&self) -> &[::std::string::String] {
        self.mac_address_list.as_deref().unwrap_or_default()
    }
}
impl LineItemAssetInformation {
    /// Creates a new builder-style object to manufacture [`LineItemAssetInformation`](crate::types::LineItemAssetInformation).
    pub fn builder() -> crate::types::builders::LineItemAssetInformationBuilder {
        crate::types::builders::LineItemAssetInformationBuilder::default()
    }
}

/// A builder for [`LineItemAssetInformation`](crate::types::LineItemAssetInformation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LineItemAssetInformationBuilder {
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) mac_address_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LineItemAssetInformationBuilder {
    /// <p> The ID of the asset. </p>
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of the asset. </p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p> The ID of the asset. </p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// Appends an item to `mac_address_list`.
    ///
    /// To override the contents of this collection use [`set_mac_address_list`](Self::set_mac_address_list).
    ///
    /// <p> The MAC addresses of the asset. </p>
    pub fn mac_address_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.mac_address_list.unwrap_or_default();
        v.push(input.into());
        self.mac_address_list = ::std::option::Option::Some(v);
        self
    }
    /// <p> The MAC addresses of the asset. </p>
    pub fn set_mac_address_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.mac_address_list = input;
        self
    }
    /// <p> The MAC addresses of the asset. </p>
    pub fn get_mac_address_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.mac_address_list
    }
    /// Consumes the builder and constructs a [`LineItemAssetInformation`](crate::types::LineItemAssetInformation).
    pub fn build(self) -> crate::types::LineItemAssetInformation {
        crate::types::LineItemAssetInformation {
            asset_id: self.asset_id,
            mac_address_list: self.mac_address_list,
        }
    }
}
