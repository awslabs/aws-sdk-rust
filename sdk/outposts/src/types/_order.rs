// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an order.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Order {
    /// <p> The ID of the Outpost in the order. </p>
    pub outpost_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the order.</p>
    pub order_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the order.</p>
    /// <ul>
    /// <li> <p> <code>PREPARING</code> - Order is received and being prepared.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Order is either being built, shipped, or installed. To get more details, see the line item status.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - Order is complete.</p> </li>
    /// <li> <p> <code>CANCELLED</code> - Order is cancelled.</p> </li>
    /// <li> <p> <code>ERROR</code> - Customer should contact support.</p> </li>
    /// </ul> <note>
    /// <p>The following status are deprecated: <code>RECEIVED</code>, <code>PENDING</code>, <code>PROCESSING</code>, <code>INSTALLING</code>, and <code>FULFILLED</code>. </p>
    /// </note>
    pub status: ::std::option::Option<crate::types::OrderStatus>,
    /// <p>The line items for the order</p>
    pub line_items: ::std::option::Option<::std::vec::Vec<crate::types::LineItem>>,
    /// <p>The payment option for the order.</p>
    pub payment_option: ::std::option::Option<crate::types::PaymentOption>,
    /// <p>The submission date for the order.</p>
    pub order_submission_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The fulfillment date of the order.</p>
    pub order_fulfilled_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The payment term.</p>
    pub payment_term: ::std::option::Option<crate::types::PaymentTerm>,
    /// <p>The type of order.</p>
    pub order_type: ::std::option::Option<crate::types::OrderType>,
}
impl Order {
    /// <p> The ID of the Outpost in the order. </p>
    pub fn outpost_id(&self) -> ::std::option::Option<&str> {
        self.outpost_id.as_deref()
    }
    /// <p>The ID of the order.</p>
    pub fn order_id(&self) -> ::std::option::Option<&str> {
        self.order_id.as_deref()
    }
    /// <p>The status of the order.</p>
    /// <ul>
    /// <li> <p> <code>PREPARING</code> - Order is received and being prepared.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Order is either being built, shipped, or installed. To get more details, see the line item status.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - Order is complete.</p> </li>
    /// <li> <p> <code>CANCELLED</code> - Order is cancelled.</p> </li>
    /// <li> <p> <code>ERROR</code> - Customer should contact support.</p> </li>
    /// </ul> <note>
    /// <p>The following status are deprecated: <code>RECEIVED</code>, <code>PENDING</code>, <code>PROCESSING</code>, <code>INSTALLING</code>, and <code>FULFILLED</code>. </p>
    /// </note>
    pub fn status(&self) -> ::std::option::Option<&crate::types::OrderStatus> {
        self.status.as_ref()
    }
    /// <p>The line items for the order</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.line_items.is_none()`.
    pub fn line_items(&self) -> &[crate::types::LineItem] {
        self.line_items.as_deref().unwrap_or_default()
    }
    /// <p>The payment option for the order.</p>
    pub fn payment_option(&self) -> ::std::option::Option<&crate::types::PaymentOption> {
        self.payment_option.as_ref()
    }
    /// <p>The submission date for the order.</p>
    pub fn order_submission_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.order_submission_date.as_ref()
    }
    /// <p>The fulfillment date of the order.</p>
    pub fn order_fulfilled_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.order_fulfilled_date.as_ref()
    }
    /// <p>The payment term.</p>
    pub fn payment_term(&self) -> ::std::option::Option<&crate::types::PaymentTerm> {
        self.payment_term.as_ref()
    }
    /// <p>The type of order.</p>
    pub fn order_type(&self) -> ::std::option::Option<&crate::types::OrderType> {
        self.order_type.as_ref()
    }
}
impl Order {
    /// Creates a new builder-style object to manufacture [`Order`](crate::types::Order).
    pub fn builder() -> crate::types::builders::OrderBuilder {
        crate::types::builders::OrderBuilder::default()
    }
}

/// A builder for [`Order`](crate::types::Order).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OrderBuilder {
    pub(crate) outpost_id: ::std::option::Option<::std::string::String>,
    pub(crate) order_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::OrderStatus>,
    pub(crate) line_items: ::std::option::Option<::std::vec::Vec<crate::types::LineItem>>,
    pub(crate) payment_option: ::std::option::Option<crate::types::PaymentOption>,
    pub(crate) order_submission_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) order_fulfilled_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) payment_term: ::std::option::Option<crate::types::PaymentTerm>,
    pub(crate) order_type: ::std::option::Option<crate::types::OrderType>,
}
impl OrderBuilder {
    /// <p> The ID of the Outpost in the order. </p>
    pub fn outpost_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of the Outpost in the order. </p>
    pub fn set_outpost_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_id = input;
        self
    }
    /// <p> The ID of the Outpost in the order. </p>
    pub fn get_outpost_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_id
    }
    /// <p>The ID of the order.</p>
    pub fn order_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.order_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the order.</p>
    pub fn set_order_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.order_id = input;
        self
    }
    /// <p>The ID of the order.</p>
    pub fn get_order_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.order_id
    }
    /// <p>The status of the order.</p>
    /// <ul>
    /// <li> <p> <code>PREPARING</code> - Order is received and being prepared.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Order is either being built, shipped, or installed. To get more details, see the line item status.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - Order is complete.</p> </li>
    /// <li> <p> <code>CANCELLED</code> - Order is cancelled.</p> </li>
    /// <li> <p> <code>ERROR</code> - Customer should contact support.</p> </li>
    /// </ul> <note>
    /// <p>The following status are deprecated: <code>RECEIVED</code>, <code>PENDING</code>, <code>PROCESSING</code>, <code>INSTALLING</code>, and <code>FULFILLED</code>. </p>
    /// </note>
    pub fn status(mut self, input: crate::types::OrderStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the order.</p>
    /// <ul>
    /// <li> <p> <code>PREPARING</code> - Order is received and being prepared.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Order is either being built, shipped, or installed. To get more details, see the line item status.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - Order is complete.</p> </li>
    /// <li> <p> <code>CANCELLED</code> - Order is cancelled.</p> </li>
    /// <li> <p> <code>ERROR</code> - Customer should contact support.</p> </li>
    /// </ul> <note>
    /// <p>The following status are deprecated: <code>RECEIVED</code>, <code>PENDING</code>, <code>PROCESSING</code>, <code>INSTALLING</code>, and <code>FULFILLED</code>. </p>
    /// </note>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::OrderStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the order.</p>
    /// <ul>
    /// <li> <p> <code>PREPARING</code> - Order is received and being prepared.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Order is either being built, shipped, or installed. To get more details, see the line item status.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - Order is complete.</p> </li>
    /// <li> <p> <code>CANCELLED</code> - Order is cancelled.</p> </li>
    /// <li> <p> <code>ERROR</code> - Customer should contact support.</p> </li>
    /// </ul> <note>
    /// <p>The following status are deprecated: <code>RECEIVED</code>, <code>PENDING</code>, <code>PROCESSING</code>, <code>INSTALLING</code>, and <code>FULFILLED</code>. </p>
    /// </note>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::OrderStatus> {
        &self.status
    }
    /// Appends an item to `line_items`.
    ///
    /// To override the contents of this collection use [`set_line_items`](Self::set_line_items).
    ///
    /// <p>The line items for the order</p>
    pub fn line_items(mut self, input: crate::types::LineItem) -> Self {
        let mut v = self.line_items.unwrap_or_default();
        v.push(input);
        self.line_items = ::std::option::Option::Some(v);
        self
    }
    /// <p>The line items for the order</p>
    pub fn set_line_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LineItem>>) -> Self {
        self.line_items = input;
        self
    }
    /// <p>The line items for the order</p>
    pub fn get_line_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LineItem>> {
        &self.line_items
    }
    /// <p>The payment option for the order.</p>
    pub fn payment_option(mut self, input: crate::types::PaymentOption) -> Self {
        self.payment_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payment option for the order.</p>
    pub fn set_payment_option(mut self, input: ::std::option::Option<crate::types::PaymentOption>) -> Self {
        self.payment_option = input;
        self
    }
    /// <p>The payment option for the order.</p>
    pub fn get_payment_option(&self) -> &::std::option::Option<crate::types::PaymentOption> {
        &self.payment_option
    }
    /// <p>The submission date for the order.</p>
    pub fn order_submission_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.order_submission_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The submission date for the order.</p>
    pub fn set_order_submission_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.order_submission_date = input;
        self
    }
    /// <p>The submission date for the order.</p>
    pub fn get_order_submission_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.order_submission_date
    }
    /// <p>The fulfillment date of the order.</p>
    pub fn order_fulfilled_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.order_fulfilled_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The fulfillment date of the order.</p>
    pub fn set_order_fulfilled_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.order_fulfilled_date = input;
        self
    }
    /// <p>The fulfillment date of the order.</p>
    pub fn get_order_fulfilled_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.order_fulfilled_date
    }
    /// <p>The payment term.</p>
    pub fn payment_term(mut self, input: crate::types::PaymentTerm) -> Self {
        self.payment_term = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payment term.</p>
    pub fn set_payment_term(mut self, input: ::std::option::Option<crate::types::PaymentTerm>) -> Self {
        self.payment_term = input;
        self
    }
    /// <p>The payment term.</p>
    pub fn get_payment_term(&self) -> &::std::option::Option<crate::types::PaymentTerm> {
        &self.payment_term
    }
    /// <p>The type of order.</p>
    pub fn order_type(mut self, input: crate::types::OrderType) -> Self {
        self.order_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of order.</p>
    pub fn set_order_type(mut self, input: ::std::option::Option<crate::types::OrderType>) -> Self {
        self.order_type = input;
        self
    }
    /// <p>The type of order.</p>
    pub fn get_order_type(&self) -> &::std::option::Option<crate::types::OrderType> {
        &self.order_type
    }
    /// Consumes the builder and constructs a [`Order`](crate::types::Order).
    pub fn build(self) -> crate::types::Order {
        crate::types::Order {
            outpost_id: self.outpost_id,
            order_id: self.order_id,
            status: self.status,
            line_items: self.line_items,
            payment_option: self.payment_option,
            order_submission_date: self.order_submission_date,
            order_fulfilled_date: self.order_fulfilled_date,
            payment_term: self.payment_term,
            order_type: self.order_type,
        }
    }
}
