// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The resource tags.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ListTagsForResourceOutput {
    /// <p>The resource tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The resource tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The resource tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListSitesOutput {
    /// <p>Information about the sites.</p>
    pub sites: std::option::Option<std::vec::Vec<crate::model::Site>>,
    /// <p>The pagination token.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListSitesOutput {
    /// <p>Information about the sites.</p>
    pub fn sites(&self) -> std::option::Option<&[crate::model::Site]> {
        self.sites.as_deref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListSitesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListSitesOutput");
        formatter.field("sites", &self.sites);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListSitesOutput`](crate::output::ListSitesOutput)
pub mod list_sites_output {
    /// A builder for [`ListSitesOutput`](crate::output::ListSitesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sites: std::option::Option<std::vec::Vec<crate::model::Site>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `sites`.
        ///
        /// To override the contents of this collection use [`set_sites`](Self::set_sites).
        ///
        /// <p>Information about the sites.</p>
        pub fn sites(mut self, input: impl Into<crate::model::Site>) -> Self {
            let mut v = self.sites.unwrap_or_default();
            v.push(input.into());
            self.sites = Some(v);
            self
        }
        /// <p>Information about the sites.</p>
        pub fn set_sites(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Site>>,
        ) -> Self {
            self.sites = input;
            self
        }
        /// <p>The pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSitesOutput`](crate::output::ListSitesOutput)
        pub fn build(self) -> crate::output::ListSitesOutput {
            crate::output::ListSitesOutput {
                sites: self.sites,
                next_token: self.next_token,
            }
        }
    }
}
impl ListSitesOutput {
    /// Creates a new builder-style object to manufacture [`ListSitesOutput`](crate::output::ListSitesOutput)
    pub fn builder() -> crate::output::list_sites_output::Builder {
        crate::output::list_sites_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListOutpostsOutput {
    /// <p>Information about the Outposts.</p>
    pub outposts: std::option::Option<std::vec::Vec<crate::model::Outpost>>,
    /// <p>The pagination token.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListOutpostsOutput {
    /// <p>Information about the Outposts.</p>
    pub fn outposts(&self) -> std::option::Option<&[crate::model::Outpost]> {
        self.outposts.as_deref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListOutpostsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListOutpostsOutput");
        formatter.field("outposts", &self.outposts);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListOutpostsOutput`](crate::output::ListOutpostsOutput)
pub mod list_outposts_output {
    /// A builder for [`ListOutpostsOutput`](crate::output::ListOutpostsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) outposts: std::option::Option<std::vec::Vec<crate::model::Outpost>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `outposts`.
        ///
        /// To override the contents of this collection use [`set_outposts`](Self::set_outposts).
        ///
        /// <p>Information about the Outposts.</p>
        pub fn outposts(mut self, input: impl Into<crate::model::Outpost>) -> Self {
            let mut v = self.outposts.unwrap_or_default();
            v.push(input.into());
            self.outposts = Some(v);
            self
        }
        /// <p>Information about the Outposts.</p>
        pub fn set_outposts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Outpost>>,
        ) -> Self {
            self.outposts = input;
            self
        }
        /// <p>The pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListOutpostsOutput`](crate::output::ListOutpostsOutput)
        pub fn build(self) -> crate::output::ListOutpostsOutput {
            crate::output::ListOutpostsOutput {
                outposts: self.outposts,
                next_token: self.next_token,
            }
        }
    }
}
impl ListOutpostsOutput {
    /// Creates a new builder-style object to manufacture [`ListOutpostsOutput`](crate::output::ListOutpostsOutput)
    pub fn builder() -> crate::output::list_outposts_output::Builder {
        crate::output::list_outposts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetOutpostInstanceTypesOutput {
    /// <p>Information about the instance types.</p>
    pub instance_types: std::option::Option<std::vec::Vec<crate::model::InstanceTypeItem>>,
    /// <p>The pagination token.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>
    /// The ID of the Outpost.
    /// </p>
    pub outpost_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub outpost_arn: std::option::Option<std::string::String>,
}
impl GetOutpostInstanceTypesOutput {
    /// <p>Information about the instance types.</p>
    pub fn instance_types(&self) -> std::option::Option<&[crate::model::InstanceTypeItem]> {
        self.instance_types.as_deref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>
    /// The ID of the Outpost.
    /// </p>
    pub fn outpost_id(&self) -> std::option::Option<&str> {
        self.outpost_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn outpost_arn(&self) -> std::option::Option<&str> {
        self.outpost_arn.as_deref()
    }
}
impl std::fmt::Debug for GetOutpostInstanceTypesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetOutpostInstanceTypesOutput");
        formatter.field("instance_types", &self.instance_types);
        formatter.field("next_token", &self.next_token);
        formatter.field("outpost_id", &self.outpost_id);
        formatter.field("outpost_arn", &self.outpost_arn);
        formatter.finish()
    }
}
/// See [`GetOutpostInstanceTypesOutput`](crate::output::GetOutpostInstanceTypesOutput)
pub mod get_outpost_instance_types_output {
    /// A builder for [`GetOutpostInstanceTypesOutput`](crate::output::GetOutpostInstanceTypesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_types:
            std::option::Option<std::vec::Vec<crate::model::InstanceTypeItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) outpost_id: std::option::Option<std::string::String>,
        pub(crate) outpost_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `instance_types`.
        ///
        /// To override the contents of this collection use [`set_instance_types`](Self::set_instance_types).
        ///
        /// <p>Information about the instance types.</p>
        pub fn instance_types(mut self, input: impl Into<crate::model::InstanceTypeItem>) -> Self {
            let mut v = self.instance_types.unwrap_or_default();
            v.push(input.into());
            self.instance_types = Some(v);
            self
        }
        /// <p>Information about the instance types.</p>
        pub fn set_instance_types(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceTypeItem>>,
        ) -> Self {
            self.instance_types = input;
            self
        }
        /// <p>The pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>
        /// The ID of the Outpost.
        /// </p>
        pub fn outpost_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.outpost_id = Some(input.into());
            self
        }
        /// <p>
        /// The ID of the Outpost.
        /// </p>
        pub fn set_outpost_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.outpost_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
        pub fn outpost_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.outpost_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
        pub fn set_outpost_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.outpost_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`GetOutpostInstanceTypesOutput`](crate::output::GetOutpostInstanceTypesOutput)
        pub fn build(self) -> crate::output::GetOutpostInstanceTypesOutput {
            crate::output::GetOutpostInstanceTypesOutput {
                instance_types: self.instance_types,
                next_token: self.next_token,
                outpost_id: self.outpost_id,
                outpost_arn: self.outpost_arn,
            }
        }
    }
}
impl GetOutpostInstanceTypesOutput {
    /// Creates a new builder-style object to manufacture [`GetOutpostInstanceTypesOutput`](crate::output::GetOutpostInstanceTypesOutput)
    pub fn builder() -> crate::output::get_outpost_instance_types_output::Builder {
        crate::output::get_outpost_instance_types_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetOutpostOutput {
    /// <p>Information about an Outpost.</p>
    pub outpost: std::option::Option<crate::model::Outpost>,
}
impl GetOutpostOutput {
    /// <p>Information about an Outpost.</p>
    pub fn outpost(&self) -> std::option::Option<&crate::model::Outpost> {
        self.outpost.as_ref()
    }
}
impl std::fmt::Debug for GetOutpostOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetOutpostOutput");
        formatter.field("outpost", &self.outpost);
        formatter.finish()
    }
}
/// See [`GetOutpostOutput`](crate::output::GetOutpostOutput)
pub mod get_outpost_output {
    /// A builder for [`GetOutpostOutput`](crate::output::GetOutpostOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) outpost: std::option::Option<crate::model::Outpost>,
    }
    impl Builder {
        /// <p>Information about an Outpost.</p>
        pub fn outpost(mut self, input: crate::model::Outpost) -> Self {
            self.outpost = Some(input);
            self
        }
        /// <p>Information about an Outpost.</p>
        pub fn set_outpost(mut self, input: std::option::Option<crate::model::Outpost>) -> Self {
            self.outpost = input;
            self
        }
        /// Consumes the builder and constructs a [`GetOutpostOutput`](crate::output::GetOutpostOutput)
        pub fn build(self) -> crate::output::GetOutpostOutput {
            crate::output::GetOutpostOutput {
                outpost: self.outpost,
            }
        }
    }
}
impl GetOutpostOutput {
    /// Creates a new builder-style object to manufacture [`GetOutpostOutput`](crate::output::GetOutpostOutput)
    pub fn builder() -> crate::output::get_outpost_output::Builder {
        crate::output::get_outpost_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSiteOutput {}
impl std::fmt::Debug for DeleteSiteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSiteOutput");
        formatter.finish()
    }
}
/// See [`DeleteSiteOutput`](crate::output::DeleteSiteOutput)
pub mod delete_site_output {
    /// A builder for [`DeleteSiteOutput`](crate::output::DeleteSiteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSiteOutput`](crate::output::DeleteSiteOutput)
        pub fn build(self) -> crate::output::DeleteSiteOutput {
            crate::output::DeleteSiteOutput {}
        }
    }
}
impl DeleteSiteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSiteOutput`](crate::output::DeleteSiteOutput)
    pub fn builder() -> crate::output::delete_site_output::Builder {
        crate::output::delete_site_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteOutpostOutput {}
impl std::fmt::Debug for DeleteOutpostOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteOutpostOutput");
        formatter.finish()
    }
}
/// See [`DeleteOutpostOutput`](crate::output::DeleteOutpostOutput)
pub mod delete_outpost_output {
    /// A builder for [`DeleteOutpostOutput`](crate::output::DeleteOutpostOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteOutpostOutput`](crate::output::DeleteOutpostOutput)
        pub fn build(self) -> crate::output::DeleteOutpostOutput {
            crate::output::DeleteOutpostOutput {}
        }
    }
}
impl DeleteOutpostOutput {
    /// Creates a new builder-style object to manufacture [`DeleteOutpostOutput`](crate::output::DeleteOutpostOutput)
    pub fn builder() -> crate::output::delete_outpost_output::Builder {
        crate::output::delete_outpost_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateOutpostOutput {
    /// <p>Information about an Outpost.</p>
    pub outpost: std::option::Option<crate::model::Outpost>,
}
impl CreateOutpostOutput {
    /// <p>Information about an Outpost.</p>
    pub fn outpost(&self) -> std::option::Option<&crate::model::Outpost> {
        self.outpost.as_ref()
    }
}
impl std::fmt::Debug for CreateOutpostOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateOutpostOutput");
        formatter.field("outpost", &self.outpost);
        formatter.finish()
    }
}
/// See [`CreateOutpostOutput`](crate::output::CreateOutpostOutput)
pub mod create_outpost_output {
    /// A builder for [`CreateOutpostOutput`](crate::output::CreateOutpostOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) outpost: std::option::Option<crate::model::Outpost>,
    }
    impl Builder {
        /// <p>Information about an Outpost.</p>
        pub fn outpost(mut self, input: crate::model::Outpost) -> Self {
            self.outpost = Some(input);
            self
        }
        /// <p>Information about an Outpost.</p>
        pub fn set_outpost(mut self, input: std::option::Option<crate::model::Outpost>) -> Self {
            self.outpost = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateOutpostOutput`](crate::output::CreateOutpostOutput)
        pub fn build(self) -> crate::output::CreateOutpostOutput {
            crate::output::CreateOutpostOutput {
                outpost: self.outpost,
            }
        }
    }
}
impl CreateOutpostOutput {
    /// Creates a new builder-style object to manufacture [`CreateOutpostOutput`](crate::output::CreateOutpostOutput)
    pub fn builder() -> crate::output::create_outpost_output::Builder {
        crate::output::create_outpost_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateOrderOutput {
    /// <p>Information about this order.</p>
    pub order: std::option::Option<crate::model::Order>,
}
impl CreateOrderOutput {
    /// <p>Information about this order.</p>
    pub fn order(&self) -> std::option::Option<&crate::model::Order> {
        self.order.as_ref()
    }
}
impl std::fmt::Debug for CreateOrderOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateOrderOutput");
        formatter.field("order", &self.order);
        formatter.finish()
    }
}
/// See [`CreateOrderOutput`](crate::output::CreateOrderOutput)
pub mod create_order_output {
    /// A builder for [`CreateOrderOutput`](crate::output::CreateOrderOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) order: std::option::Option<crate::model::Order>,
    }
    impl Builder {
        /// <p>Information about this order.</p>
        pub fn order(mut self, input: crate::model::Order) -> Self {
            self.order = Some(input);
            self
        }
        /// <p>Information about this order.</p>
        pub fn set_order(mut self, input: std::option::Option<crate::model::Order>) -> Self {
            self.order = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateOrderOutput`](crate::output::CreateOrderOutput)
        pub fn build(self) -> crate::output::CreateOrderOutput {
            crate::output::CreateOrderOutput { order: self.order }
        }
    }
}
impl CreateOrderOutput {
    /// Creates a new builder-style object to manufacture [`CreateOrderOutput`](crate::output::CreateOrderOutput)
    pub fn builder() -> crate::output::create_order_output::Builder {
        crate::output::create_order_output::Builder::default()
    }
}
