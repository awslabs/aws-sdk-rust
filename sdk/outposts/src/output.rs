// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSiteRackPhysicalPropertiesOutput {
    /// <p>Information about a site.</p>
    #[doc(hidden)]
    pub site: std::option::Option<crate::model::Site>,
    _request_id: Option<String>,
}
impl UpdateSiteRackPhysicalPropertiesOutput {
    /// <p>Information about a site.</p>
    pub fn site(&self) -> std::option::Option<&crate::model::Site> {
        self.site.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateSiteRackPhysicalPropertiesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSiteRackPhysicalPropertiesOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSiteRackPhysicalPropertiesOutput`](crate::output::UpdateSiteRackPhysicalPropertiesOutput).
    pub fn builder() -> crate::output::update_site_rack_physical_properties_output::Builder {
        crate::output::update_site_rack_physical_properties_output::Builder::default()
    }
}

/// See [`UpdateSiteRackPhysicalPropertiesOutput`](crate::output::UpdateSiteRackPhysicalPropertiesOutput).
pub mod update_site_rack_physical_properties_output {

    /// A builder for [`UpdateSiteRackPhysicalPropertiesOutput`](crate::output::UpdateSiteRackPhysicalPropertiesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) site: std::option::Option<crate::model::Site>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about a site.</p>
        pub fn site(mut self, input: crate::model::Site) -> Self {
            self.site = Some(input);
            self
        }
        /// <p>Information about a site.</p>
        pub fn set_site(mut self, input: std::option::Option<crate::model::Site>) -> Self {
            self.site = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSiteRackPhysicalPropertiesOutput`](crate::output::UpdateSiteRackPhysicalPropertiesOutput).
        pub fn build(self) -> crate::output::UpdateSiteRackPhysicalPropertiesOutput {
            crate::output::UpdateSiteRackPhysicalPropertiesOutput {
                site: self.site,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSiteAddressOutput {
    /// <p> The type of the address. </p>
    #[doc(hidden)]
    pub address_type: std::option::Option<crate::model::AddressType>,
    /// <p> Information about an address. </p>
    #[doc(hidden)]
    pub address: std::option::Option<crate::model::Address>,
    _request_id: Option<String>,
}
impl UpdateSiteAddressOutput {
    /// <p> The type of the address. </p>
    pub fn address_type(&self) -> std::option::Option<&crate::model::AddressType> {
        self.address_type.as_ref()
    }
    /// <p> Information about an address. </p>
    pub fn address(&self) -> std::option::Option<&crate::model::Address> {
        self.address.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateSiteAddressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSiteAddressOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSiteAddressOutput`](crate::output::UpdateSiteAddressOutput).
    pub fn builder() -> crate::output::update_site_address_output::Builder {
        crate::output::update_site_address_output::Builder::default()
    }
}

/// See [`UpdateSiteAddressOutput`](crate::output::UpdateSiteAddressOutput).
pub mod update_site_address_output {

    /// A builder for [`UpdateSiteAddressOutput`](crate::output::UpdateSiteAddressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) address_type: std::option::Option<crate::model::AddressType>,
        pub(crate) address: std::option::Option<crate::model::Address>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The type of the address. </p>
        pub fn address_type(mut self, input: crate::model::AddressType) -> Self {
            self.address_type = Some(input);
            self
        }
        /// <p> The type of the address. </p>
        pub fn set_address_type(
            mut self,
            input: std::option::Option<crate::model::AddressType>,
        ) -> Self {
            self.address_type = input;
            self
        }
        /// <p> Information about an address. </p>
        pub fn address(mut self, input: crate::model::Address) -> Self {
            self.address = Some(input);
            self
        }
        /// <p> Information about an address. </p>
        pub fn set_address(mut self, input: std::option::Option<crate::model::Address>) -> Self {
            self.address = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSiteAddressOutput`](crate::output::UpdateSiteAddressOutput).
        pub fn build(self) -> crate::output::UpdateSiteAddressOutput {
            crate::output::UpdateSiteAddressOutput {
                address_type: self.address_type,
                address: self.address,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSiteOutput {
    /// <p>Information about a site.</p>
    #[doc(hidden)]
    pub site: std::option::Option<crate::model::Site>,
    _request_id: Option<String>,
}
impl UpdateSiteOutput {
    /// <p>Information about a site.</p>
    pub fn site(&self) -> std::option::Option<&crate::model::Site> {
        self.site.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateSiteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSiteOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSiteOutput`](crate::output::UpdateSiteOutput).
    pub fn builder() -> crate::output::update_site_output::Builder {
        crate::output::update_site_output::Builder::default()
    }
}

/// See [`UpdateSiteOutput`](crate::output::UpdateSiteOutput).
pub mod update_site_output {

    /// A builder for [`UpdateSiteOutput`](crate::output::UpdateSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) site: std::option::Option<crate::model::Site>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about a site.</p>
        pub fn site(mut self, input: crate::model::Site) -> Self {
            self.site = Some(input);
            self
        }
        /// <p>Information about a site.</p>
        pub fn set_site(mut self, input: std::option::Option<crate::model::Site>) -> Self {
            self.site = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSiteOutput`](crate::output::UpdateSiteOutput).
        pub fn build(self) -> crate::output::UpdateSiteOutput {
            crate::output::UpdateSiteOutput {
                site: self.site,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateOutpostOutput {
    /// <p>Information about an Outpost.</p>
    #[doc(hidden)]
    pub outpost: std::option::Option<crate::model::Outpost>,
    _request_id: Option<String>,
}
impl UpdateOutpostOutput {
    /// <p>Information about an Outpost.</p>
    pub fn outpost(&self) -> std::option::Option<&crate::model::Outpost> {
        self.outpost.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateOutpostOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateOutpostOutput {
    /// Creates a new builder-style object to manufacture [`UpdateOutpostOutput`](crate::output::UpdateOutpostOutput).
    pub fn builder() -> crate::output::update_outpost_output::Builder {
        crate::output::update_outpost_output::Builder::default()
    }
}

/// See [`UpdateOutpostOutput`](crate::output::UpdateOutpostOutput).
pub mod update_outpost_output {

    /// A builder for [`UpdateOutpostOutput`](crate::output::UpdateOutpostOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) outpost: std::option::Option<crate::model::Outpost>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about an Outpost.</p>
        pub fn outpost(mut self, input: crate::model::Outpost) -> Self {
            self.outpost = Some(input);
            self
        }
        /// <p>Information about an Outpost.</p>
        pub fn set_outpost(mut self, input: std::option::Option<crate::model::Outpost>) -> Self {
            self.outpost = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateOutpostOutput`](crate::output::UpdateOutpostOutput).
        pub fn build(self) -> crate::output::UpdateOutpostOutput {
            crate::output::UpdateOutpostOutput {
                outpost: self.outpost,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartConnectionOutput {
    /// <p> The ID of the connection. </p>
    #[doc(hidden)]
    pub connection_id: std::option::Option<std::string::String>,
    /// <p> The underlay IP address. </p>
    #[doc(hidden)]
    pub underlay_ip_address: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartConnectionOutput {
    /// <p> The ID of the connection. </p>
    pub fn connection_id(&self) -> std::option::Option<&str> {
        self.connection_id.as_deref()
    }
    /// <p> The underlay IP address. </p>
    pub fn underlay_ip_address(&self) -> std::option::Option<&str> {
        self.underlay_ip_address.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartConnectionOutput {
    /// Creates a new builder-style object to manufacture [`StartConnectionOutput`](crate::output::StartConnectionOutput).
    pub fn builder() -> crate::output::start_connection_output::Builder {
        crate::output::start_connection_output::Builder::default()
    }
}

/// See [`StartConnectionOutput`](crate::output::StartConnectionOutput).
pub mod start_connection_output {

    /// A builder for [`StartConnectionOutput`](crate::output::StartConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connection_id: std::option::Option<std::string::String>,
        pub(crate) underlay_ip_address: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The ID of the connection. </p>
        pub fn connection_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.connection_id = Some(input.into());
            self
        }
        /// <p> The ID of the connection. </p>
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.connection_id = input;
            self
        }
        /// <p> The underlay IP address. </p>
        pub fn underlay_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
            self.underlay_ip_address = Some(input.into());
            self
        }
        /// <p> The underlay IP address. </p>
        pub fn set_underlay_ip_address(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.underlay_ip_address = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartConnectionOutput`](crate::output::StartConnectionOutput).
        pub fn build(self) -> crate::output::StartConnectionOutput {
            crate::output::StartConnectionOutput {
                connection_id: self.connection_id,
                underlay_ip_address: self.underlay_ip_address,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The resource tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The resource tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The resource tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The resource tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSitesOutput {
    /// <p>Information about the sites.</p>
    #[doc(hidden)]
    pub sites: std::option::Option<std::vec::Vec<crate::model::Site>>,
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSitesOutput {
    /// <p>Information about the sites.</p>
    pub fn sites(&self) -> std::option::Option<&[crate::model::Site]> {
        self.sites.as_deref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSitesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSitesOutput {
    /// Creates a new builder-style object to manufacture [`ListSitesOutput`](crate::output::ListSitesOutput).
    pub fn builder() -> crate::output::list_sites_output::Builder {
        crate::output::list_sites_output::Builder::default()
    }
}

/// See [`ListSitesOutput`](crate::output::ListSitesOutput).
pub mod list_sites_output {

    /// A builder for [`ListSitesOutput`](crate::output::ListSitesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sites: std::option::Option<std::vec::Vec<crate::model::Site>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `sites`.
        ///
        /// To override the contents of this collection use [`set_sites`](Self::set_sites).
        ///
        /// <p>Information about the sites.</p>
        pub fn sites(mut self, input: crate::model::Site) -> Self {
            let mut v = self.sites.unwrap_or_default();
            v.push(input);
            self.sites = Some(v);
            self
        }
        /// <p>Information about the sites.</p>
        pub fn set_sites(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Site>>,
        ) -> Self {
            self.sites = input;
            self
        }
        /// <p>The pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSitesOutput`](crate::output::ListSitesOutput).
        pub fn build(self) -> crate::output::ListSitesOutput {
            crate::output::ListSitesOutput {
                sites: self.sites,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListOutpostsOutput {
    /// <p>Information about the Outposts.</p>
    #[doc(hidden)]
    pub outposts: std::option::Option<std::vec::Vec<crate::model::Outpost>>,
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListOutpostsOutput {
    /// <p>Information about the Outposts.</p>
    pub fn outposts(&self) -> std::option::Option<&[crate::model::Outpost]> {
        self.outposts.as_deref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListOutpostsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListOutpostsOutput {
    /// Creates a new builder-style object to manufacture [`ListOutpostsOutput`](crate::output::ListOutpostsOutput).
    pub fn builder() -> crate::output::list_outposts_output::Builder {
        crate::output::list_outposts_output::Builder::default()
    }
}

/// See [`ListOutpostsOutput`](crate::output::ListOutpostsOutput).
pub mod list_outposts_output {

    /// A builder for [`ListOutpostsOutput`](crate::output::ListOutpostsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) outposts: std::option::Option<std::vec::Vec<crate::model::Outpost>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `outposts`.
        ///
        /// To override the contents of this collection use [`set_outposts`](Self::set_outposts).
        ///
        /// <p>Information about the Outposts.</p>
        pub fn outposts(mut self, input: crate::model::Outpost) -> Self {
            let mut v = self.outposts.unwrap_or_default();
            v.push(input);
            self.outposts = Some(v);
            self
        }
        /// <p>Information about the Outposts.</p>
        pub fn set_outposts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Outpost>>,
        ) -> Self {
            self.outposts = input;
            self
        }
        /// <p>The pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListOutpostsOutput`](crate::output::ListOutpostsOutput).
        pub fn build(self) -> crate::output::ListOutpostsOutput {
            crate::output::ListOutpostsOutput {
                outposts: self.outposts,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListOrdersOutput {
    /// <p> Information about the orders. </p>
    #[doc(hidden)]
    pub orders: std::option::Option<std::vec::Vec<crate::model::OrderSummary>>,
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListOrdersOutput {
    /// <p> Information about the orders. </p>
    pub fn orders(&self) -> std::option::Option<&[crate::model::OrderSummary]> {
        self.orders.as_deref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListOrdersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListOrdersOutput {
    /// Creates a new builder-style object to manufacture [`ListOrdersOutput`](crate::output::ListOrdersOutput).
    pub fn builder() -> crate::output::list_orders_output::Builder {
        crate::output::list_orders_output::Builder::default()
    }
}

/// See [`ListOrdersOutput`](crate::output::ListOrdersOutput).
pub mod list_orders_output {

    /// A builder for [`ListOrdersOutput`](crate::output::ListOrdersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) orders: std::option::Option<std::vec::Vec<crate::model::OrderSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `orders`.
        ///
        /// To override the contents of this collection use [`set_orders`](Self::set_orders).
        ///
        /// <p> Information about the orders. </p>
        pub fn orders(mut self, input: crate::model::OrderSummary) -> Self {
            let mut v = self.orders.unwrap_or_default();
            v.push(input);
            self.orders = Some(v);
            self
        }
        /// <p> Information about the orders. </p>
        pub fn set_orders(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::OrderSummary>>,
        ) -> Self {
            self.orders = input;
            self
        }
        /// <p>The pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListOrdersOutput`](crate::output::ListOrdersOutput).
        pub fn build(self) -> crate::output::ListOrdersOutput {
            crate::output::ListOrdersOutput {
                orders: self.orders,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCatalogItemsOutput {
    /// <p>Information about the catalog items.</p>
    #[doc(hidden)]
    pub catalog_items: std::option::Option<std::vec::Vec<crate::model::CatalogItem>>,
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListCatalogItemsOutput {
    /// <p>Information about the catalog items.</p>
    pub fn catalog_items(&self) -> std::option::Option<&[crate::model::CatalogItem]> {
        self.catalog_items.as_deref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListCatalogItemsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListCatalogItemsOutput {
    /// Creates a new builder-style object to manufacture [`ListCatalogItemsOutput`](crate::output::ListCatalogItemsOutput).
    pub fn builder() -> crate::output::list_catalog_items_output::Builder {
        crate::output::list_catalog_items_output::Builder::default()
    }
}

/// See [`ListCatalogItemsOutput`](crate::output::ListCatalogItemsOutput).
pub mod list_catalog_items_output {

    /// A builder for [`ListCatalogItemsOutput`](crate::output::ListCatalogItemsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) catalog_items: std::option::Option<std::vec::Vec<crate::model::CatalogItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `catalog_items`.
        ///
        /// To override the contents of this collection use [`set_catalog_items`](Self::set_catalog_items).
        ///
        /// <p>Information about the catalog items.</p>
        pub fn catalog_items(mut self, input: crate::model::CatalogItem) -> Self {
            let mut v = self.catalog_items.unwrap_or_default();
            v.push(input);
            self.catalog_items = Some(v);
            self
        }
        /// <p>Information about the catalog items.</p>
        pub fn set_catalog_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CatalogItem>>,
        ) -> Self {
            self.catalog_items = input;
            self
        }
        /// <p>The pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListCatalogItemsOutput`](crate::output::ListCatalogItemsOutput).
        pub fn build(self) -> crate::output::ListCatalogItemsOutput {
            crate::output::ListCatalogItemsOutput {
                catalog_items: self.catalog_items,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAssetsOutput {
    /// <p>Information about the hardware assets.</p>
    #[doc(hidden)]
    pub assets: std::option::Option<std::vec::Vec<crate::model::AssetInfo>>,
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAssetsOutput {
    /// <p>Information about the hardware assets.</p>
    pub fn assets(&self) -> std::option::Option<&[crate::model::AssetInfo]> {
        self.assets.as_deref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAssetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAssetsOutput {
    /// Creates a new builder-style object to manufacture [`ListAssetsOutput`](crate::output::ListAssetsOutput).
    pub fn builder() -> crate::output::list_assets_output::Builder {
        crate::output::list_assets_output::Builder::default()
    }
}

/// See [`ListAssetsOutput`](crate::output::ListAssetsOutput).
pub mod list_assets_output {

    /// A builder for [`ListAssetsOutput`](crate::output::ListAssetsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assets: std::option::Option<std::vec::Vec<crate::model::AssetInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `assets`.
        ///
        /// To override the contents of this collection use [`set_assets`](Self::set_assets).
        ///
        /// <p>Information about the hardware assets.</p>
        pub fn assets(mut self, input: crate::model::AssetInfo) -> Self {
            let mut v = self.assets.unwrap_or_default();
            v.push(input);
            self.assets = Some(v);
            self
        }
        /// <p>Information about the hardware assets.</p>
        pub fn set_assets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssetInfo>>,
        ) -> Self {
            self.assets = input;
            self
        }
        /// <p>The pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAssetsOutput`](crate::output::ListAssetsOutput).
        pub fn build(self) -> crate::output::ListAssetsOutput {
            crate::output::ListAssetsOutput {
                assets: self.assets,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSiteAddressOutput {
    /// <p>The ID of the site.</p>
    #[doc(hidden)]
    pub site_id: std::option::Option<std::string::String>,
    /// <p>The type of the address you receive. </p>
    #[doc(hidden)]
    pub address_type: std::option::Option<crate::model::AddressType>,
    /// <p> Information about the address. </p>
    #[doc(hidden)]
    pub address: std::option::Option<crate::model::Address>,
    _request_id: Option<String>,
}
impl GetSiteAddressOutput {
    /// <p>The ID of the site.</p>
    pub fn site_id(&self) -> std::option::Option<&str> {
        self.site_id.as_deref()
    }
    /// <p>The type of the address you receive. </p>
    pub fn address_type(&self) -> std::option::Option<&crate::model::AddressType> {
        self.address_type.as_ref()
    }
    /// <p> Information about the address. </p>
    pub fn address(&self) -> std::option::Option<&crate::model::Address> {
        self.address.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSiteAddressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSiteAddressOutput {
    /// Creates a new builder-style object to manufacture [`GetSiteAddressOutput`](crate::output::GetSiteAddressOutput).
    pub fn builder() -> crate::output::get_site_address_output::Builder {
        crate::output::get_site_address_output::Builder::default()
    }
}

/// See [`GetSiteAddressOutput`](crate::output::GetSiteAddressOutput).
pub mod get_site_address_output {

    /// A builder for [`GetSiteAddressOutput`](crate::output::GetSiteAddressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) site_id: std::option::Option<std::string::String>,
        pub(crate) address_type: std::option::Option<crate::model::AddressType>,
        pub(crate) address: std::option::Option<crate::model::Address>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the site.</p>
        pub fn site_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.site_id = Some(input.into());
            self
        }
        /// <p>The ID of the site.</p>
        pub fn set_site_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.site_id = input;
            self
        }
        /// <p>The type of the address you receive. </p>
        pub fn address_type(mut self, input: crate::model::AddressType) -> Self {
            self.address_type = Some(input);
            self
        }
        /// <p>The type of the address you receive. </p>
        pub fn set_address_type(
            mut self,
            input: std::option::Option<crate::model::AddressType>,
        ) -> Self {
            self.address_type = input;
            self
        }
        /// <p> Information about the address. </p>
        pub fn address(mut self, input: crate::model::Address) -> Self {
            self.address = Some(input);
            self
        }
        /// <p> Information about the address. </p>
        pub fn set_address(mut self, input: std::option::Option<crate::model::Address>) -> Self {
            self.address = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSiteAddressOutput`](crate::output::GetSiteAddressOutput).
        pub fn build(self) -> crate::output::GetSiteAddressOutput {
            crate::output::GetSiteAddressOutput {
                site_id: self.site_id,
                address_type: self.address_type,
                address: self.address,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSiteOutput {
    /// <p>Information about a site.</p>
    #[doc(hidden)]
    pub site: std::option::Option<crate::model::Site>,
    _request_id: Option<String>,
}
impl GetSiteOutput {
    /// <p>Information about a site.</p>
    pub fn site(&self) -> std::option::Option<&crate::model::Site> {
        self.site.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSiteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSiteOutput {
    /// Creates a new builder-style object to manufacture [`GetSiteOutput`](crate::output::GetSiteOutput).
    pub fn builder() -> crate::output::get_site_output::Builder {
        crate::output::get_site_output::Builder::default()
    }
}

/// See [`GetSiteOutput`](crate::output::GetSiteOutput).
pub mod get_site_output {

    /// A builder for [`GetSiteOutput`](crate::output::GetSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) site: std::option::Option<crate::model::Site>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about a site.</p>
        pub fn site(mut self, input: crate::model::Site) -> Self {
            self.site = Some(input);
            self
        }
        /// <p>Information about a site.</p>
        pub fn set_site(mut self, input: std::option::Option<crate::model::Site>) -> Self {
            self.site = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSiteOutput`](crate::output::GetSiteOutput).
        pub fn build(self) -> crate::output::GetSiteOutput {
            crate::output::GetSiteOutput {
                site: self.site,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetOutpostInstanceTypesOutput {
    /// <p>Information about the instance types.</p>
    #[doc(hidden)]
    pub instance_types: std::option::Option<std::vec::Vec<crate::model::InstanceTypeItem>>,
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p> The ID of the Outpost. </p>
    #[doc(hidden)]
    pub outpost_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    #[doc(hidden)]
    pub outpost_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetOutpostInstanceTypesOutput {
    /// <p>Information about the instance types.</p>
    pub fn instance_types(&self) -> std::option::Option<&[crate::model::InstanceTypeItem]> {
        self.instance_types.as_deref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> The ID of the Outpost. </p>
    pub fn outpost_id(&self) -> std::option::Option<&str> {
        self.outpost_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn outpost_arn(&self) -> std::option::Option<&str> {
        self.outpost_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetOutpostInstanceTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetOutpostInstanceTypesOutput {
    /// Creates a new builder-style object to manufacture [`GetOutpostInstanceTypesOutput`](crate::output::GetOutpostInstanceTypesOutput).
    pub fn builder() -> crate::output::get_outpost_instance_types_output::Builder {
        crate::output::get_outpost_instance_types_output::Builder::default()
    }
}

/// See [`GetOutpostInstanceTypesOutput`](crate::output::GetOutpostInstanceTypesOutput).
pub mod get_outpost_instance_types_output {

    /// A builder for [`GetOutpostInstanceTypesOutput`](crate::output::GetOutpostInstanceTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_types:
            std::option::Option<std::vec::Vec<crate::model::InstanceTypeItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) outpost_id: std::option::Option<std::string::String>,
        pub(crate) outpost_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instance_types`.
        ///
        /// To override the contents of this collection use [`set_instance_types`](Self::set_instance_types).
        ///
        /// <p>Information about the instance types.</p>
        pub fn instance_types(mut self, input: crate::model::InstanceTypeItem) -> Self {
            let mut v = self.instance_types.unwrap_or_default();
            v.push(input);
            self.instance_types = Some(v);
            self
        }
        /// <p>Information about the instance types.</p>
        pub fn set_instance_types(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceTypeItem>>,
        ) -> Self {
            self.instance_types = input;
            self
        }
        /// <p>The pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p> The ID of the Outpost. </p>
        pub fn outpost_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.outpost_id = Some(input.into());
            self
        }
        /// <p> The ID of the Outpost. </p>
        pub fn set_outpost_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.outpost_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
        pub fn outpost_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.outpost_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
        pub fn set_outpost_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.outpost_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetOutpostInstanceTypesOutput`](crate::output::GetOutpostInstanceTypesOutput).
        pub fn build(self) -> crate::output::GetOutpostInstanceTypesOutput {
            crate::output::GetOutpostInstanceTypesOutput {
                instance_types: self.instance_types,
                next_token: self.next_token,
                outpost_id: self.outpost_id,
                outpost_arn: self.outpost_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetOutpostOutput {
    /// <p>Information about an Outpost.</p>
    #[doc(hidden)]
    pub outpost: std::option::Option<crate::model::Outpost>,
    _request_id: Option<String>,
}
impl GetOutpostOutput {
    /// <p>Information about an Outpost.</p>
    pub fn outpost(&self) -> std::option::Option<&crate::model::Outpost> {
        self.outpost.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetOutpostOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetOutpostOutput {
    /// Creates a new builder-style object to manufacture [`GetOutpostOutput`](crate::output::GetOutpostOutput).
    pub fn builder() -> crate::output::get_outpost_output::Builder {
        crate::output::get_outpost_output::Builder::default()
    }
}

/// See [`GetOutpostOutput`](crate::output::GetOutpostOutput).
pub mod get_outpost_output {

    /// A builder for [`GetOutpostOutput`](crate::output::GetOutpostOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) outpost: std::option::Option<crate::model::Outpost>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about an Outpost.</p>
        pub fn outpost(mut self, input: crate::model::Outpost) -> Self {
            self.outpost = Some(input);
            self
        }
        /// <p>Information about an Outpost.</p>
        pub fn set_outpost(mut self, input: std::option::Option<crate::model::Outpost>) -> Self {
            self.outpost = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetOutpostOutput`](crate::output::GetOutpostOutput).
        pub fn build(self) -> crate::output::GetOutpostOutput {
            crate::output::GetOutpostOutput {
                outpost: self.outpost,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetOrderOutput {
    /// <p>Information about an order.</p>
    #[doc(hidden)]
    pub order: std::option::Option<crate::model::Order>,
    _request_id: Option<String>,
}
impl GetOrderOutput {
    /// <p>Information about an order.</p>
    pub fn order(&self) -> std::option::Option<&crate::model::Order> {
        self.order.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetOrderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetOrderOutput {
    /// Creates a new builder-style object to manufacture [`GetOrderOutput`](crate::output::GetOrderOutput).
    pub fn builder() -> crate::output::get_order_output::Builder {
        crate::output::get_order_output::Builder::default()
    }
}

/// See [`GetOrderOutput`](crate::output::GetOrderOutput).
pub mod get_order_output {

    /// A builder for [`GetOrderOutput`](crate::output::GetOrderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) order: std::option::Option<crate::model::Order>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about an order.</p>
        pub fn order(mut self, input: crate::model::Order) -> Self {
            self.order = Some(input);
            self
        }
        /// <p>Information about an order.</p>
        pub fn set_order(mut self, input: std::option::Option<crate::model::Order>) -> Self {
            self.order = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetOrderOutput`](crate::output::GetOrderOutput).
        pub fn build(self) -> crate::output::GetOrderOutput {
            crate::output::GetOrderOutput {
                order: self.order,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetConnectionOutput {
    /// <p> The ID of the connection. </p>
    #[doc(hidden)]
    pub connection_id: std::option::Option<std::string::String>,
    /// <p> Information about the connection. </p>
    #[doc(hidden)]
    pub connection_details: std::option::Option<crate::model::ConnectionDetails>,
    _request_id: Option<String>,
}
impl GetConnectionOutput {
    /// <p> The ID of the connection. </p>
    pub fn connection_id(&self) -> std::option::Option<&str> {
        self.connection_id.as_deref()
    }
    /// <p> Information about the connection. </p>
    pub fn connection_details(&self) -> std::option::Option<&crate::model::ConnectionDetails> {
        self.connection_details.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetConnectionOutput {
    /// Creates a new builder-style object to manufacture [`GetConnectionOutput`](crate::output::GetConnectionOutput).
    pub fn builder() -> crate::output::get_connection_output::Builder {
        crate::output::get_connection_output::Builder::default()
    }
}

/// See [`GetConnectionOutput`](crate::output::GetConnectionOutput).
pub mod get_connection_output {

    /// A builder for [`GetConnectionOutput`](crate::output::GetConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connection_id: std::option::Option<std::string::String>,
        pub(crate) connection_details: std::option::Option<crate::model::ConnectionDetails>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The ID of the connection. </p>
        pub fn connection_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.connection_id = Some(input.into());
            self
        }
        /// <p> The ID of the connection. </p>
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.connection_id = input;
            self
        }
        /// <p> Information about the connection. </p>
        pub fn connection_details(mut self, input: crate::model::ConnectionDetails) -> Self {
            self.connection_details = Some(input);
            self
        }
        /// <p> Information about the connection. </p>
        pub fn set_connection_details(
            mut self,
            input: std::option::Option<crate::model::ConnectionDetails>,
        ) -> Self {
            self.connection_details = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetConnectionOutput`](crate::output::GetConnectionOutput).
        pub fn build(self) -> crate::output::GetConnectionOutput {
            crate::output::GetConnectionOutput {
                connection_id: self.connection_id,
                connection_details: self.connection_details,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCatalogItemOutput {
    /// <p>Information about this catalog item.</p>
    #[doc(hidden)]
    pub catalog_item: std::option::Option<crate::model::CatalogItem>,
    _request_id: Option<String>,
}
impl GetCatalogItemOutput {
    /// <p>Information about this catalog item.</p>
    pub fn catalog_item(&self) -> std::option::Option<&crate::model::CatalogItem> {
        self.catalog_item.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetCatalogItemOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCatalogItemOutput {
    /// Creates a new builder-style object to manufacture [`GetCatalogItemOutput`](crate::output::GetCatalogItemOutput).
    pub fn builder() -> crate::output::get_catalog_item_output::Builder {
        crate::output::get_catalog_item_output::Builder::default()
    }
}

/// See [`GetCatalogItemOutput`](crate::output::GetCatalogItemOutput).
pub mod get_catalog_item_output {

    /// A builder for [`GetCatalogItemOutput`](crate::output::GetCatalogItemOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) catalog_item: std::option::Option<crate::model::CatalogItem>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about this catalog item.</p>
        pub fn catalog_item(mut self, input: crate::model::CatalogItem) -> Self {
            self.catalog_item = Some(input);
            self
        }
        /// <p>Information about this catalog item.</p>
        pub fn set_catalog_item(
            mut self,
            input: std::option::Option<crate::model::CatalogItem>,
        ) -> Self {
            self.catalog_item = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetCatalogItemOutput`](crate::output::GetCatalogItemOutput).
        pub fn build(self) -> crate::output::GetCatalogItemOutput {
            crate::output::GetCatalogItemOutput {
                catalog_item: self.catalog_item,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSiteOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSiteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteSiteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSiteOutput`](crate::output::DeleteSiteOutput).
    pub fn builder() -> crate::output::delete_site_output::Builder {
        crate::output::delete_site_output::Builder::default()
    }
}

/// See [`DeleteSiteOutput`](crate::output::DeleteSiteOutput).
pub mod delete_site_output {

    /// A builder for [`DeleteSiteOutput`](crate::output::DeleteSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSiteOutput`](crate::output::DeleteSiteOutput).
        pub fn build(self) -> crate::output::DeleteSiteOutput {
            crate::output::DeleteSiteOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteOutpostOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteOutpostOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteOutpostOutput {
    /// Creates a new builder-style object to manufacture [`DeleteOutpostOutput`](crate::output::DeleteOutpostOutput).
    pub fn builder() -> crate::output::delete_outpost_output::Builder {
        crate::output::delete_outpost_output::Builder::default()
    }
}

/// See [`DeleteOutpostOutput`](crate::output::DeleteOutpostOutput).
pub mod delete_outpost_output {

    /// A builder for [`DeleteOutpostOutput`](crate::output::DeleteOutpostOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteOutpostOutput`](crate::output::DeleteOutpostOutput).
        pub fn build(self) -> crate::output::DeleteOutpostOutput {
            crate::output::DeleteOutpostOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSiteOutput {
    /// <p>Information about a site.</p>
    #[doc(hidden)]
    pub site: std::option::Option<crate::model::Site>,
    _request_id: Option<String>,
}
impl CreateSiteOutput {
    /// <p>Information about a site.</p>
    pub fn site(&self) -> std::option::Option<&crate::model::Site> {
        self.site.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSiteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSiteOutput {
    /// Creates a new builder-style object to manufacture [`CreateSiteOutput`](crate::output::CreateSiteOutput).
    pub fn builder() -> crate::output::create_site_output::Builder {
        crate::output::create_site_output::Builder::default()
    }
}

/// See [`CreateSiteOutput`](crate::output::CreateSiteOutput).
pub mod create_site_output {

    /// A builder for [`CreateSiteOutput`](crate::output::CreateSiteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) site: std::option::Option<crate::model::Site>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about a site.</p>
        pub fn site(mut self, input: crate::model::Site) -> Self {
            self.site = Some(input);
            self
        }
        /// <p>Information about a site.</p>
        pub fn set_site(mut self, input: std::option::Option<crate::model::Site>) -> Self {
            self.site = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSiteOutput`](crate::output::CreateSiteOutput).
        pub fn build(self) -> crate::output::CreateSiteOutput {
            crate::output::CreateSiteOutput {
                site: self.site,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateOutpostOutput {
    /// <p>Information about an Outpost.</p>
    #[doc(hidden)]
    pub outpost: std::option::Option<crate::model::Outpost>,
    _request_id: Option<String>,
}
impl CreateOutpostOutput {
    /// <p>Information about an Outpost.</p>
    pub fn outpost(&self) -> std::option::Option<&crate::model::Outpost> {
        self.outpost.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateOutpostOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateOutpostOutput {
    /// Creates a new builder-style object to manufacture [`CreateOutpostOutput`](crate::output::CreateOutpostOutput).
    pub fn builder() -> crate::output::create_outpost_output::Builder {
        crate::output::create_outpost_output::Builder::default()
    }
}

/// See [`CreateOutpostOutput`](crate::output::CreateOutpostOutput).
pub mod create_outpost_output {

    /// A builder for [`CreateOutpostOutput`](crate::output::CreateOutpostOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) outpost: std::option::Option<crate::model::Outpost>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about an Outpost.</p>
        pub fn outpost(mut self, input: crate::model::Outpost) -> Self {
            self.outpost = Some(input);
            self
        }
        /// <p>Information about an Outpost.</p>
        pub fn set_outpost(mut self, input: std::option::Option<crate::model::Outpost>) -> Self {
            self.outpost = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateOutpostOutput`](crate::output::CreateOutpostOutput).
        pub fn build(self) -> crate::output::CreateOutpostOutput {
            crate::output::CreateOutpostOutput {
                outpost: self.outpost,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateOrderOutput {
    /// <p>Information about this order.</p>
    #[doc(hidden)]
    pub order: std::option::Option<crate::model::Order>,
    _request_id: Option<String>,
}
impl CreateOrderOutput {
    /// <p>Information about this order.</p>
    pub fn order(&self) -> std::option::Option<&crate::model::Order> {
        self.order.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateOrderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateOrderOutput {
    /// Creates a new builder-style object to manufacture [`CreateOrderOutput`](crate::output::CreateOrderOutput).
    pub fn builder() -> crate::output::create_order_output::Builder {
        crate::output::create_order_output::Builder::default()
    }
}

/// See [`CreateOrderOutput`](crate::output::CreateOrderOutput).
pub mod create_order_output {

    /// A builder for [`CreateOrderOutput`](crate::output::CreateOrderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) order: std::option::Option<crate::model::Order>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about this order.</p>
        pub fn order(mut self, input: crate::model::Order) -> Self {
            self.order = Some(input);
            self
        }
        /// <p>Information about this order.</p>
        pub fn set_order(mut self, input: std::option::Option<crate::model::Order>) -> Self {
            self.order = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateOrderOutput`](crate::output::CreateOrderOutput).
        pub fn build(self) -> crate::output::CreateOrderOutput {
            crate::output::CreateOrderOutput {
                order: self.order,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelOrderOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CancelOrderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CancelOrderOutput {
    /// Creates a new builder-style object to manufacture [`CancelOrderOutput`](crate::output::CancelOrderOutput).
    pub fn builder() -> crate::output::cancel_order_output::Builder {
        crate::output::cancel_order_output::Builder::default()
    }
}

/// See [`CancelOrderOutput`](crate::output::CancelOrderOutput).
pub mod cancel_order_output {

    /// A builder for [`CancelOrderOutput`](crate::output::CancelOrderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelOrderOutput`](crate::output::CancelOrderOutput).
        pub fn build(self) -> crate::output::CancelOrderOutput {
            crate::output::CancelOrderOutput {
                _request_id: self._request_id,
            }
        }
    }
}
