// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartConnection`](crate::client::fluent_builders::StartConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device_serial_number(impl Into<String>)`](crate::client::fluent_builders::StartConnection::device_serial_number) / [`set_device_serial_number(Option<String>)`](crate::client::fluent_builders::StartConnection::set_device_serial_number): <p> The serial number of the dongle. </p>
    ///   - [`asset_id(impl Into<String>)`](crate::client::fluent_builders::StartConnection::asset_id) / [`set_asset_id(Option<String>)`](crate::client::fluent_builders::StartConnection::set_asset_id): <p> The ID of the Outpost server. </p>
    ///   - [`client_public_key(impl Into<String>)`](crate::client::fluent_builders::StartConnection::client_public_key) / [`set_client_public_key(Option<String>)`](crate::client::fluent_builders::StartConnection::set_client_public_key): <p> The public key of the client. </p>
    ///   - [`network_interface_device_index(i32)`](crate::client::fluent_builders::StartConnection::network_interface_device_index) / [`set_network_interface_device_index(i32)`](crate::client::fluent_builders::StartConnection::set_network_interface_device_index): <p> The device index of the network interface on the Outpost server. </p>
    /// - On success, responds with [`StartConnectionOutput`](crate::output::StartConnectionOutput) with field(s):
    ///   - [`connection_id(Option<String>)`](crate::output::StartConnectionOutput::connection_id): <p> The ID of the connection. </p>
    ///   - [`underlay_ip_address(Option<String>)`](crate::output::StartConnectionOutput::underlay_ip_address): <p> The underlay IP address. </p>
    /// - On failure, responds with [`SdkError<StartConnectionError>`](crate::error::StartConnectionError)
    pub fn start_connection(&self) -> crate::client::fluent_builders::StartConnection {
        crate::client::fluent_builders::StartConnection::new(self.handle.clone())
    }
}
