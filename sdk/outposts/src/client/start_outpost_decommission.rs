// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartOutpostDecommission`](crate::operation::start_outpost_decommission::builders::StartOutpostDecommissionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`outpost_identifier(impl Into<String>)`](crate::operation::start_outpost_decommission::builders::StartOutpostDecommissionFluentBuilder::outpost_identifier) / [`set_outpost_identifier(Option<String>)`](crate::operation::start_outpost_decommission::builders::StartOutpostDecommissionFluentBuilder::set_outpost_identifier):<br>required: **true**<br><p>The ID or ARN of the Outpost that you want to decommission.</p><br>
    ///   - [`validate_only(bool)`](crate::operation::start_outpost_decommission::builders::StartOutpostDecommissionFluentBuilder::validate_only) / [`set_validate_only(Option<bool>)`](crate::operation::start_outpost_decommission::builders::StartOutpostDecommissionFluentBuilder::set_validate_only):<br>required: **false**<br><p>Validates the request without starting the decommission process.</p><br>
    /// - On success, responds with [`StartOutpostDecommissionOutput`](crate::operation::start_outpost_decommission::StartOutpostDecommissionOutput) with field(s):
    ///   - [`status(Option<DecommissionRequestStatus>)`](crate::operation::start_outpost_decommission::StartOutpostDecommissionOutput::status): <p>The status of the decommission request.</p>
    ///   - [`blocking_resource_types(Option<Vec::<BlockingResourceType>>)`](crate::operation::start_outpost_decommission::StartOutpostDecommissionOutput::blocking_resource_types): <p>The resources still associated with the Outpost that you are decommissioning.</p>
    /// - On failure, responds with [`SdkError<StartOutpostDecommissionError>`](crate::operation::start_outpost_decommission::StartOutpostDecommissionError)
    pub fn start_outpost_decommission(&self) -> crate::operation::start_outpost_decommission::builders::StartOutpostDecommissionFluentBuilder {
        crate::operation::start_outpost_decommission::builders::StartOutpostDecommissionFluentBuilder::new(self.handle.clone())
    }
}
