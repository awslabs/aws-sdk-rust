// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have permission to perform this operation.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>Updating or deleting this resource can cause an inconsistent state.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>An internal error has occurred.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The specified request is not valid.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>You have exceeded a service quota.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>A parameter is not valid.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelOrderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CancelOrderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelOrderError> for Error {
    fn from(err: crate::error::CancelOrderError) -> Self {
        match err {
            crate::error::CancelOrderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CancelOrderError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CancelOrderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CancelOrderError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CancelOrderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CancelOrderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateOrderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateOrderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateOrderError> for Error {
    fn from(err: crate::error::CreateOrderError) -> Self {
        match err {
            crate::error::CreateOrderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateOrderError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateOrderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateOrderError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateOrderError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateOrderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateOrderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateOutpostError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateOutpostError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateOutpostError> for Error {
    fn from(err: crate::error::CreateOutpostError) -> Self {
        match err {
            crate::error::CreateOutpostError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateOutpostError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateOutpostError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateOutpostError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateOutpostError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateOutpostError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateOutpostError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSiteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSiteError> for Error {
    fn from(err: crate::error::CreateSiteError) -> Self {
        match err {
            crate::error::CreateSiteError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateSiteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateSiteError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateSiteError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateSiteError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateSiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteOutpostError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteOutpostError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteOutpostError> for Error {
    fn from(err: crate::error::DeleteOutpostError) -> Self {
        match err {
            crate::error::DeleteOutpostError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteOutpostError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteOutpostError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteOutpostError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteOutpostError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteOutpostError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSiteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSiteError> for Error {
    fn from(err: crate::error::DeleteSiteError) -> Self {
        match err {
            crate::error::DeleteSiteError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteSiteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSiteError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteSiteError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteSiteError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteSiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCatalogItemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCatalogItemError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCatalogItemError> for Error {
    fn from(err: crate::error::GetCatalogItemError) -> Self {
        match err {
            crate::error::GetCatalogItemError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetCatalogItemError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetCatalogItemError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCatalogItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetConnectionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConnectionError> for Error {
    fn from(err: crate::error::GetConnectionError) -> Self {
        match err {
            crate::error::GetConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetConnectionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetConnectionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOrderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetOrderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOrderError> for Error {
    fn from(err: crate::error::GetOrderError) -> Self {
        match err {
            crate::error::GetOrderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetOrderError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetOrderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetOrderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOutpostError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetOutpostError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOutpostError> for Error {
    fn from(err: crate::error::GetOutpostError) -> Self {
        match err {
            crate::error::GetOutpostError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetOutpostError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetOutpostError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetOutpostError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetOutpostError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOutpostInstanceTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetOutpostInstanceTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOutpostInstanceTypesError> for Error {
    fn from(err: crate::error::GetOutpostInstanceTypesError) -> Self {
        match err {
            crate::error::GetOutpostInstanceTypesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetOutpostInstanceTypesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetOutpostInstanceTypesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetOutpostInstanceTypesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetOutpostInstanceTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSiteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSiteError> for Error {
    fn from(err: crate::error::GetSiteError) -> Self {
        match err {
            crate::error::GetSiteError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSiteError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetSiteError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetSiteError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetSiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSiteAddressError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSiteAddressError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSiteAddressError> for Error {
    fn from(err: crate::error::GetSiteAddressError) -> Self {
        match err {
            crate::error::GetSiteAddressError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSiteAddressError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetSiteAddressError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSiteAddressError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetSiteAddressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAssetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAssetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssetsError> for Error {
    fn from(err: crate::error::ListAssetsError) -> Self {
        match err {
            crate::error::ListAssetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAssetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListAssetsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListAssetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAssetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCatalogItemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCatalogItemsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCatalogItemsError> for Error {
    fn from(err: crate::error::ListCatalogItemsError) -> Self {
        match err {
            crate::error::ListCatalogItemsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListCatalogItemsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListCatalogItemsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListCatalogItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOrdersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListOrdersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOrdersError> for Error {
    fn from(err: crate::error::ListOrdersError) -> Self {
        match err {
            crate::error::ListOrdersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListOrdersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListOrdersError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListOrdersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListOrdersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOutpostsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListOutpostsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOutpostsError> for Error {
    fn from(err: crate::error::ListOutpostsError) -> Self {
        match err {
            crate::error::ListOutpostsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListOutpostsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListOutpostsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListOutpostsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSitesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSitesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSitesError> for Error {
    fn from(err: crate::error::ListSitesError) -> Self {
        match err {
            crate::error::ListSitesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListSitesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListSitesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListSitesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartConnectionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartConnectionError> for Error {
    fn from(err: crate::error::StartConnectionError) -> Self {
        match err {
            crate::error::StartConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartConnectionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartConnectionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StartConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateOutpostError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateOutpostError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateOutpostError> for Error {
    fn from(err: crate::error::UpdateOutpostError) -> Self {
        match err {
            crate::error::UpdateOutpostError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateOutpostError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateOutpostError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateOutpostError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateOutpostError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateOutpostError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSiteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSiteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSiteError> for Error {
    fn from(err: crate::error::UpdateSiteError) -> Self {
        match err {
            crate::error::UpdateSiteError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateSiteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateSiteError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateSiteError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSiteError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateSiteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSiteAddressError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSiteAddressError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSiteAddressError> for Error {
    fn from(err: crate::error::UpdateSiteAddressError) -> Self {
        match err {
            crate::error::UpdateSiteAddressError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateSiteAddressError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateSiteAddressError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateSiteAddressError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSiteAddressError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateSiteAddressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateSiteRackPhysicalPropertiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateSiteRackPhysicalPropertiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSiteRackPhysicalPropertiesError> for Error {
    fn from(err: crate::error::UpdateSiteRackPhysicalPropertiesError) -> Self {
        match err {
            crate::error::UpdateSiteRackPhysicalPropertiesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateSiteRackPhysicalPropertiesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateSiteRackPhysicalPropertiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateSiteRackPhysicalPropertiesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSiteRackPhysicalPropertiesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateSiteRackPhysicalPropertiesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
