// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_site_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_site::CreateSiteInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("Name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.notes {
        object.key("Notes").string(var_3.as_str());
    }
    if let Some(var_4) = &input.operating_address {
        #[allow(unused_mut)]
        let mut object_5 = object.key("OperatingAddress").start_object();
        crate::protocol_serde::shape_address::ser_address(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.rack_physical_properties {
        #[allow(unused_mut)]
        let mut object_7 = object.key("RackPhysicalProperties").start_object();
        crate::protocol_serde::shape_rack_physical_properties::ser_rack_physical_properties(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.shipping_address {
        #[allow(unused_mut)]
        let mut object_9 = object.key("ShippingAddress").start_object();
        crate::protocol_serde::shape_address::ser_address(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    Ok(())
}
