// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_rack_physical_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RackPhysicalProperties,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.power_draw_kva {
        object.key("PowerDrawKva").string(var_1.as_str());
    }
    if let Some(var_2) = &input.power_phase {
        object.key("PowerPhase").string(var_2.as_str());
    }
    if let Some(var_3) = &input.power_connector {
        object.key("PowerConnector").string(var_3.as_str());
    }
    if let Some(var_4) = &input.power_feed_drop {
        object.key("PowerFeedDrop").string(var_4.as_str());
    }
    if let Some(var_5) = &input.uplink_gbps {
        object.key("UplinkGbps").string(var_5.as_str());
    }
    if let Some(var_6) = &input.uplink_count {
        object.key("UplinkCount").string(var_6.as_str());
    }
    if let Some(var_7) = &input.fiber_optic_cable_type {
        object.key("FiberOpticCableType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.optical_standard {
        object.key("OpticalStandard").string(var_8.as_str());
    }
    if let Some(var_9) = &input.maximum_supported_weight_lbs {
        object
            .key("MaximumSupportedWeightLbs")
            .string(var_9.as_str());
    }
    Ok(())
}

pub(crate) fn de_rack_physical_properties<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::RackPhysicalProperties>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RackPhysicalPropertiesBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "PowerDrawKva" => {
                                builder = builder.set_power_draw_kva(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::PowerDrawKva::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "PowerPhase" => {
                                builder = builder.set_power_phase(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::PowerPhase::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "PowerConnector" => {
                                builder = builder.set_power_connector(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::PowerConnector::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "PowerFeedDrop" => {
                                builder = builder.set_power_feed_drop(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::PowerFeedDrop::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "UplinkGbps" => {
                                builder = builder.set_uplink_gbps(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::UplinkGbps::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "UplinkCount" => {
                                builder = builder.set_uplink_count(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::UplinkCount::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "FiberOpticCableType" => {
                                builder = builder.set_fiber_optic_cable_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::FiberOpticCableType::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "OpticalStandard" => {
                                builder = builder.set_optical_standard(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::OpticalStandard::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "MaximumSupportedWeightLbs" => {
                                builder = builder.set_maximum_supported_weight_lbs(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::MaximumSupportedWeightLbs::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
