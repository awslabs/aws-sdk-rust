// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_order_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOrderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.line_items {
        let mut array_2 = object.key("LineItems").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_crate_model_line_item_request(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.outpost_identifier {
        object.key("OutpostIdentifier").string(var_5);
    }
    if let Some(var_6) = &input.payment_option {
        object.key("PaymentOption").string(var_6.as_str());
    }
    if let Some(var_7) = &input.payment_term {
        object.key("PaymentTerm").string(var_7.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_outpost_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOutpostInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_8);
    }
    if let Some(var_9) = &input.availability_zone_id {
        object.key("AvailabilityZoneId").string(var_9);
    }
    if let Some(var_10) = &input.description {
        object.key("Description").string(var_10);
    }
    if let Some(var_11) = &input.name {
        object.key("Name").string(var_11);
    }
    if let Some(var_12) = &input.site_id {
        object.key("SiteId").string(var_12);
    }
    if let Some(var_13) = &input.supported_hardware_type {
        object.key("SupportedHardwareType").string(var_13.as_str());
    }
    if let Some(var_14) = &input.tags {
        let mut object_15 = object.key("Tags").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16).string(value_17);
            }
        }
        object_15.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_site_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSiteInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.description {
        object.key("Description").string(var_18);
    }
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19);
    }
    if let Some(var_20) = &input.notes {
        object.key("Notes").string(var_20);
    }
    if let Some(var_21) = &input.operating_address {
        let mut object_22 = object.key("OperatingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_address(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.rack_physical_properties {
        let mut object_24 = object.key("RackPhysicalProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_rack_physical_properties(
            &mut object_24,
            var_23,
        )?;
        object_24.finish();
    }
    if let Some(var_25) = &input.shipping_address {
        let mut object_26 = object.key("ShippingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_address(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.tags {
        let mut object_28 = object.key("Tags").start_object();
        for (key_29, value_30) in var_27 {
            {
                object_28.key(key_29).string(value_30);
            }
        }
        object_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.tags {
        let mut object_32 = object.key("Tags").start_object();
        for (key_33, value_34) in var_31 {
            {
                object_32.key(key_33).string(value_34);
            }
        }
        object_32.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_outpost_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOutpostInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.description {
        object.key("Description").string(var_35);
    }
    if let Some(var_36) = &input.name {
        object.key("Name").string(var_36);
    }
    if let Some(var_37) = &input.supported_hardware_type {
        object.key("SupportedHardwareType").string(var_37.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_site_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSiteInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_38) = &input.description {
        object.key("Description").string(var_38);
    }
    if let Some(var_39) = &input.name {
        object.key("Name").string(var_39);
    }
    if let Some(var_40) = &input.notes {
        object.key("Notes").string(var_40);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_site_address_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSiteAddressInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.address {
        let mut object_42 = object.key("Address").start_object();
        crate::json_ser::serialize_structure_crate_model_address(&mut object_42, var_41)?;
        object_42.finish();
    }
    if let Some(var_43) = &input.address_type {
        object.key("AddressType").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_site_rack_physical_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSiteRackPhysicalPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.fiber_optic_cable_type {
        object.key("FiberOpticCableType").string(var_44.as_str());
    }
    if let Some(var_45) = &input.maximum_supported_weight_lbs {
        object
            .key("MaximumSupportedWeightLbs")
            .string(var_45.as_str());
    }
    if let Some(var_46) = &input.optical_standard {
        object.key("OpticalStandard").string(var_46.as_str());
    }
    if let Some(var_47) = &input.power_connector {
        object.key("PowerConnector").string(var_47.as_str());
    }
    if let Some(var_48) = &input.power_draw_kva {
        object.key("PowerDrawKva").string(var_48.as_str());
    }
    if let Some(var_49) = &input.power_feed_drop {
        object.key("PowerFeedDrop").string(var_49.as_str());
    }
    if let Some(var_50) = &input.power_phase {
        object.key("PowerPhase").string(var_50.as_str());
    }
    if let Some(var_51) = &input.uplink_count {
        object.key("UplinkCount").string(var_51.as_str());
    }
    if let Some(var_52) = &input.uplink_gbps {
        object.key("UplinkGbps").string(var_52.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_line_item_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LineItemRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.catalog_item_id {
        object.key("CatalogItemId").string(var_53);
    }
    if input.quantity != 0 {
        object.key("Quantity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.quantity).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_address(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.contact_name {
        object.key("ContactName").string(var_54);
    }
    if let Some(var_55) = &input.contact_phone_number {
        object.key("ContactPhoneNumber").string(var_55);
    }
    if let Some(var_56) = &input.address_line1 {
        object.key("AddressLine1").string(var_56);
    }
    if let Some(var_57) = &input.address_line2 {
        object.key("AddressLine2").string(var_57);
    }
    if let Some(var_58) = &input.address_line3 {
        object.key("AddressLine3").string(var_58);
    }
    if let Some(var_59) = &input.city {
        object.key("City").string(var_59);
    }
    if let Some(var_60) = &input.state_or_region {
        object.key("StateOrRegion").string(var_60);
    }
    if let Some(var_61) = &input.district_or_county {
        object.key("DistrictOrCounty").string(var_61);
    }
    if let Some(var_62) = &input.postal_code {
        object.key("PostalCode").string(var_62);
    }
    if let Some(var_63) = &input.country_code {
        object.key("CountryCode").string(var_63);
    }
    if let Some(var_64) = &input.municipality {
        object.key("Municipality").string(var_64);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rack_physical_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RackPhysicalProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.power_draw_kva {
        object.key("PowerDrawKva").string(var_65.as_str());
    }
    if let Some(var_66) = &input.power_phase {
        object.key("PowerPhase").string(var_66.as_str());
    }
    if let Some(var_67) = &input.power_connector {
        object.key("PowerConnector").string(var_67.as_str());
    }
    if let Some(var_68) = &input.power_feed_drop {
        object.key("PowerFeedDrop").string(var_68.as_str());
    }
    if let Some(var_69) = &input.uplink_gbps {
        object.key("UplinkGbps").string(var_69.as_str());
    }
    if let Some(var_70) = &input.uplink_count {
        object.key("UplinkCount").string(var_70.as_str());
    }
    if let Some(var_71) = &input.fiber_optic_cable_type {
        object.key("FiberOpticCableType").string(var_71.as_str());
    }
    if let Some(var_72) = &input.optical_standard {
        object.key("OpticalStandard").string(var_72.as_str());
    }
    if let Some(var_73) = &input.maximum_supported_weight_lbs {
        object
            .key("MaximumSupportedWeightLbs")
            .string(var_73.as_str());
    }
    Ok(())
}
