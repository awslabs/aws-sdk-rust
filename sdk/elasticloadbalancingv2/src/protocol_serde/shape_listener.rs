// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_listener(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::Listener, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Listener::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ListenerArn") /* ListenerArn com.amazonaws.elasticloadbalancingv2#Listener$ListenerArn */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_listener_arn(var_1);
            }
            ,
            s if s.matches("LoadBalancerArn") /* LoadBalancerArn com.amazonaws.elasticloadbalancingv2#Listener$LoadBalancerArn */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_load_balancer_arn(var_2);
            }
            ,
            s if s.matches("Port") /* Port com.amazonaws.elasticloadbalancingv2#Listener$Port */ =>  {
                let var_3 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticloadbalancingv2#Port`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_port(var_3);
            }
            ,
            s if s.matches("Protocol") /* Protocol com.amazonaws.elasticloadbalancingv2#Listener$Protocol */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::ProtocolEnum, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ProtocolEnum::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_4);
            }
            ,
            s if s.matches("Certificates") /* Certificates com.amazonaws.elasticloadbalancingv2#Listener$Certificates */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_certificate_list::de_certificate_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_certificates(var_5);
            }
            ,
            s if s.matches("SslPolicy") /* SslPolicy com.amazonaws.elasticloadbalancingv2#Listener$SslPolicy */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ssl_policy(var_6);
            }
            ,
            s if s.matches("DefaultActions") /* DefaultActions com.amazonaws.elasticloadbalancingv2#Listener$DefaultActions */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_actions::de_actions(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_default_actions(var_7);
            }
            ,
            s if s.matches("AlpnPolicy") /* AlpnPolicy com.amazonaws.elasticloadbalancingv2#Listener$AlpnPolicy */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_alpn_policy_name::de_alpn_policy_name(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_alpn_policy(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
