// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_modify_target_group_input_input(
    input: &crate::operation::modify_target_group::ModifyTargetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTargetGroup", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("TargetGroupArn");
    if let Some(var_2) = &input.target_group_arn {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("HealthCheckProtocol");
    if let Some(var_4) = &input.health_check_protocol {
        scope_3.string(var_4.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("HealthCheckPort");
    if let Some(var_6) = &input.health_check_port {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("HealthCheckPath");
    if let Some(var_8) = &input.health_check_path {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("HealthCheckEnabled");
    if let Some(var_10) = &input.health_check_enabled {
        scope_9.boolean(*var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("HealthCheckIntervalSeconds");
    if let Some(var_12) = &input.health_check_interval_seconds {
        scope_11.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("HealthCheckTimeoutSeconds");
    if let Some(var_14) = &input.health_check_timeout_seconds {
        scope_13.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("HealthyThresholdCount");
    if let Some(var_16) = &input.healthy_threshold_count {
        scope_15.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("UnhealthyThresholdCount");
    if let Some(var_18) = &input.unhealthy_threshold_count {
        scope_17.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("Matcher");
    if let Some(var_20) = &input.matcher {
        crate::protocol_serde::shape_matcher::ser_matcher(scope_19, var_20)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
