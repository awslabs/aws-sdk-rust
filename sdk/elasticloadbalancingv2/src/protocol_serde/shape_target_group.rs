// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_target_group(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::TargetGroup, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::TargetGroup::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TargetGroupArn") /* TargetGroupArn com.amazonaws.elasticloadbalancingv2#TargetGroup$TargetGroupArn */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_group_arn(var_1);
            }
            ,
            s if s.matches("TargetGroupName") /* TargetGroupName com.amazonaws.elasticloadbalancingv2#TargetGroup$TargetGroupName */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_group_name(var_2);
            }
            ,
            s if s.matches("Protocol") /* Protocol com.amazonaws.elasticloadbalancingv2#TargetGroup$Protocol */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::types::ProtocolEnum, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ProtocolEnum::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol(var_3);
            }
            ,
            s if s.matches("Port") /* Port com.amazonaws.elasticloadbalancingv2#TargetGroup$Port */ =>  {
                let var_4 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticloadbalancingv2#Port`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_port(var_4);
            }
            ,
            s if s.matches("VpcId") /* VpcId com.amazonaws.elasticloadbalancingv2#TargetGroup$VpcId */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_vpc_id(var_5);
            }
            ,
            s if s.matches("HealthCheckProtocol") /* HealthCheckProtocol com.amazonaws.elasticloadbalancingv2#TargetGroup$HealthCheckProtocol */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::ProtocolEnum, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ProtocolEnum::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_health_check_protocol(var_6);
            }
            ,
            s if s.matches("HealthCheckPort") /* HealthCheckPort com.amazonaws.elasticloadbalancingv2#TargetGroup$HealthCheckPort */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_health_check_port(var_7);
            }
            ,
            s if s.matches("HealthCheckEnabled") /* HealthCheckEnabled com.amazonaws.elasticloadbalancingv2#TargetGroup$HealthCheckEnabled */ =>  {
                let var_8 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticloadbalancingv2#HealthCheckEnabled`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_health_check_enabled(var_8);
            }
            ,
            s if s.matches("HealthCheckIntervalSeconds") /* HealthCheckIntervalSeconds com.amazonaws.elasticloadbalancingv2#TargetGroup$HealthCheckIntervalSeconds */ =>  {
                let var_9 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticloadbalancingv2#HealthCheckIntervalSeconds`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_health_check_interval_seconds(var_9);
            }
            ,
            s if s.matches("HealthCheckTimeoutSeconds") /* HealthCheckTimeoutSeconds com.amazonaws.elasticloadbalancingv2#TargetGroup$HealthCheckTimeoutSeconds */ =>  {
                let var_10 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticloadbalancingv2#HealthCheckTimeoutSeconds`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_health_check_timeout_seconds(var_10);
            }
            ,
            s if s.matches("HealthyThresholdCount") /* HealthyThresholdCount com.amazonaws.elasticloadbalancingv2#TargetGroup$HealthyThresholdCount */ =>  {
                let var_11 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticloadbalancingv2#HealthCheckThresholdCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_healthy_threshold_count(var_11);
            }
            ,
            s if s.matches("UnhealthyThresholdCount") /* UnhealthyThresholdCount com.amazonaws.elasticloadbalancingv2#TargetGroup$UnhealthyThresholdCount */ =>  {
                let var_12 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticloadbalancingv2#HealthCheckThresholdCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_unhealthy_threshold_count(var_12);
            }
            ,
            s if s.matches("HealthCheckPath") /* HealthCheckPath com.amazonaws.elasticloadbalancingv2#TargetGroup$HealthCheckPath */ =>  {
                let var_13 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_health_check_path(var_13);
            }
            ,
            s if s.matches("Matcher") /* Matcher com.amazonaws.elasticloadbalancingv2#TargetGroup$Matcher */ =>  {
                let var_14 =
                    Some(
                        crate::protocol_serde::shape_matcher::de_matcher(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_matcher(var_14);
            }
            ,
            s if s.matches("LoadBalancerArns") /* LoadBalancerArns com.amazonaws.elasticloadbalancingv2#TargetGroup$LoadBalancerArns */ =>  {
                let var_15 =
                    Some(
                        crate::protocol_serde::shape_load_balancer_arns::de_load_balancer_arns(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_load_balancer_arns(var_15);
            }
            ,
            s if s.matches("TargetType") /* TargetType com.amazonaws.elasticloadbalancingv2#TargetGroup$TargetType */ =>  {
                let var_16 =
                    Some(
                        Result::<crate::types::TargetTypeEnum, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::TargetTypeEnum::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_target_type(var_16);
            }
            ,
            s if s.matches("ProtocolVersion") /* ProtocolVersion com.amazonaws.elasticloadbalancingv2#TargetGroup$ProtocolVersion */ =>  {
                let var_17 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_protocol_version(var_17);
            }
            ,
            s if s.matches("IpAddressType") /* IpAddressType com.amazonaws.elasticloadbalancingv2#TargetGroup$IpAddressType */ =>  {
                let var_18 =
                    Some(
                        Result::<crate::types::TargetGroupIpAddressTypeEnum, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::TargetGroupIpAddressTypeEnum::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_ip_address_type(var_18);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
