// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_create_rule_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::create_rule::CreateRuleOutput,
    crate::operation::create_rule::CreateRuleError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::create_rule::CreateRuleError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "IncompatibleProtocols" => crate::operation::create_rule::CreateRuleError::IncompatibleProtocolsException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::IncompatibleProtocolsExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_incompatible_protocols_exception::de_incompatible_protocols_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidConfigurationRequest" => crate::operation::create_rule::CreateRuleError::InvalidConfigurationRequestException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidConfigurationRequestExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_configuration_request_exception::de_invalid_configuration_request_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidLoadBalancerAction" => crate::operation::create_rule::CreateRuleError::InvalidLoadBalancerActionException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidLoadBalancerActionExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_load_balancer_action_exception::de_invalid_load_balancer_action_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "ListenerNotFound" => crate::operation::create_rule::CreateRuleError::ListenerNotFoundException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ListenerNotFoundExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_listener_not_found_exception::de_listener_not_found_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "PriorityInUse" => crate::operation::create_rule::CreateRuleError::PriorityInUseException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PriorityInUseExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_priority_in_use_exception::de_priority_in_use_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TargetGroupAssociationLimit" => crate::operation::create_rule::CreateRuleError::TargetGroupAssociationLimitException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TargetGroupAssociationLimitExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_target_group_association_limit_exception::de_target_group_association_limit_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TargetGroupNotFound" => crate::operation::create_rule::CreateRuleError::TargetGroupNotFoundException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TargetGroupNotFoundExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_target_group_not_found_exception::de_target_group_not_found_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TooManyActions" => crate::operation::create_rule::CreateRuleError::TooManyActionsException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyActionsExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_actions_exception::de_too_many_actions_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TooManyRegistrationsForTargetId" => crate::operation::create_rule::CreateRuleError::TooManyRegistrationsForTargetIdException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyRegistrationsForTargetIdExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_registrations_for_target_id_exception::de_too_many_registrations_for_target_id_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TooManyRules" => crate::operation::create_rule::CreateRuleError::TooManyRulesException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyRulesExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_rules_exception::de_too_many_rules_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TooManyTags" => crate::operation::create_rule::CreateRuleError::TooManyTagsException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyTagsExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_tags_exception::de_too_many_tags_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TooManyTargetGroups" => crate::operation::create_rule::CreateRuleError::TooManyTargetGroupsException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyTargetGroupsExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_target_groups_exception::de_too_many_target_groups_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TooManyTargets" => crate::operation::create_rule::CreateRuleError::TooManyTargetsException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyTargetsExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_targets_exception::de_too_many_targets_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TooManyUniqueTargetGroupsPerLoadBalancer" => crate::operation::create_rule::CreateRuleError::TooManyUniqueTargetGroupsPerLoadBalancerException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyUniqueTargetGroupsPerLoadBalancerExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_unique_target_groups_per_load_balancer_exception::de_too_many_unique_target_groups_per_load_balancer_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "UnsupportedProtocol" => crate::operation::create_rule::CreateRuleError::UnsupportedProtocolException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::UnsupportedProtocolExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_unsupported_protocol_exception::de_unsupported_protocol_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::create_rule::CreateRuleError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_rule_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::create_rule::CreateRuleOutput,
    crate::operation::create_rule::CreateRuleError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::create_rule::builders::CreateRuleOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_create_rule::de_create_rule(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::create_rule::CreateRuleError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_create_rule(
    inp: &[u8],
    mut builder: crate::operation::create_rule::builders::CreateRuleOutputBuilder,
) -> Result<
    crate::operation::create_rule::builders::CreateRuleOutputBuilder,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateRuleResponse")) {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected CreateRuleResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateRuleResult")) {
            return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected CreateRuleResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Rules") /* Rules com.amazonaws.elasticloadbalancingv2.synthetic#CreateRuleOutput$Rules */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_rules::de_rules(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_rules(var_1);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected CreateRuleResult tag",
        ));
    };
    Ok(builder)
}
