// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_rule_transform(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::RuleTransform,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Type");
    if let Some(var_2) = &input.r#type {
        scope_1.string(var_2.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("HostHeaderRewriteConfig");
    if let Some(var_4) = &input.host_header_rewrite_config {
        crate::protocol_serde::shape_host_header_rewrite_config::ser_host_header_rewrite_config(scope_3, var_4)?;
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("UrlRewriteConfig");
    if let Some(var_6) = &input.url_rewrite_config {
        crate::protocol_serde::shape_url_rewrite_config::ser_url_rewrite_config(scope_5, var_6)?;
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_rule_transform(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::RuleTransform, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::RuleTransform::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Type") /* Type com.amazonaws.elasticloadbalancingv2#RuleTransform$Type */ =>  {
                let var_7 =
                    Some(
                        Result::<crate::types::TransformTypeEnum, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::TransformTypeEnum::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_7);
            }
            ,
            s if s.matches("HostHeaderRewriteConfig") /* HostHeaderRewriteConfig com.amazonaws.elasticloadbalancingv2#RuleTransform$HostHeaderRewriteConfig */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_host_header_rewrite_config::de_host_header_rewrite_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_host_header_rewrite_config(var_8);
            }
            ,
            s if s.matches("UrlRewriteConfig") /* UrlRewriteConfig com.amazonaws.elasticloadbalancingv2#RuleTransform$UrlRewriteConfig */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_url_rewrite_config::de_url_rewrite_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_url_rewrite_config(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::rule_transform_correct_errors(builder).build())
}
