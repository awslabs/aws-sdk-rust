// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_matcher(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::Matcher,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("HttpCode");
    if let Some(var_2) = &input.http_code {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("GrpcCode");
    if let Some(var_4) = &input.grpc_code {
        scope_3.string(var_4);
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_matcher(decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::types::Matcher, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Matcher::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HttpCode") /* HttpCode com.amazonaws.elasticloadbalancingv2#Matcher$HttpCode */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_http_code(var_5);
            }
            ,
            s if s.matches("GrpcCode") /* GrpcCode com.amazonaws.elasticloadbalancingv2#Matcher$GrpcCode */ =>  {
                let var_6 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_grpc_code(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
