// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_target_group_input_input(
    input: &crate::operation::create_target_group::CreateTargetGroupInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CreateTargetGroup", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Name");
    if let Some(var_2) = &input.name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Protocol");
    if let Some(var_4) = &input.protocol {
        scope_3.string(var_4.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ProtocolVersion");
    if let Some(var_6) = &input.protocol_version {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Port");
    if let Some(var_8) = &input.port {
        scope_7.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("VpcId");
    if let Some(var_10) = &input.vpc_id {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("HealthCheckProtocol");
    if let Some(var_12) = &input.health_check_protocol {
        scope_11.string(var_12.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("HealthCheckPort");
    if let Some(var_14) = &input.health_check_port {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("HealthCheckEnabled");
    if let Some(var_16) = &input.health_check_enabled {
        scope_15.boolean(*var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("HealthCheckPath");
    if let Some(var_18) = &input.health_check_path {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("HealthCheckIntervalSeconds");
    if let Some(var_20) = &input.health_check_interval_seconds {
        scope_19.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("HealthCheckTimeoutSeconds");
    if let Some(var_22) = &input.health_check_timeout_seconds {
        scope_21.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("HealthyThresholdCount");
    if let Some(var_24) = &input.healthy_threshold_count {
        scope_23.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_24).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("UnhealthyThresholdCount");
    if let Some(var_26) = &input.unhealthy_threshold_count {
        scope_25.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_26).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("Matcher");
    if let Some(var_28) = &input.matcher {
        crate::protocol_serde::shape_matcher::ser_matcher(scope_27, var_28)?;
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("TargetType");
    if let Some(var_30) = &input.target_type {
        scope_29.string(var_30.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("Tags");
    if let Some(var_32) = &input.tags {
        let mut list_34 = scope_31.start_list(false, None);
        for item_33 in var_32 {
            #[allow(unused_mut)]
            let mut entry_35 = list_34.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_35, item_33)?;
        }
        list_34.finish();
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("IpAddressType");
    if let Some(var_37) = &input.ip_address_type {
        scope_36.string(var_37.as_str());
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
