// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_modify_capacity_reservation_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::modify_capacity_reservation::ModifyCapacityReservationOutput,
    crate::operation::modify_capacity_reservation::ModifyCapacityReservationError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CapacityDecreaseRequestLimitExceeded" => {
            crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::CapacityDecreaseRequestsLimitExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CapacityDecreaseRequestsLimitExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_capacity_decrease_requests_limit_exceeded_exception::de_capacity_decrease_requests_limit_exceeded_exception_xml_err(_response_body, output).map_err(crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "CapacityReservationPending" => {
            crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::CapacityReservationPendingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CapacityReservationPendingExceptionBuilder::default();
                    output = crate::protocol_serde::shape_capacity_reservation_pending_exception::de_capacity_reservation_pending_exception_xml_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "CapacityUnitsLimitExceeded" => {
            crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::CapacityUnitsLimitExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CapacityUnitsLimitExceededExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_capacity_units_limit_exceeded_exception::de_capacity_units_limit_exceeded_exception_xml_err(
                            _response_body,
                            output,
                        )
                        .map_err(crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InsufficientCapacity" => crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::InsufficientCapacityException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InsufficientCapacityExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_insufficient_capacity_exception::de_insufficient_capacity_exception_xml_err(_response_body, output)
                        .map_err(crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidConfigurationRequest" => {
            crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::InvalidConfigurationRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidConfigurationRequestExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_invalid_configuration_request_exception::de_invalid_configuration_request_exception_xml_err(
                            _response_body,
                            output,
                        )
                        .map_err(crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "LoadBalancerNotFound" => crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::LoadBalancerNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::LoadBalancerNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_load_balancer_not_found_exception::de_load_balancer_not_found_exception_xml_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationNotPermitted" => crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::OperationNotPermittedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::OperationNotPermittedExceptionBuilder::default();
                output = crate::protocol_serde::shape_operation_not_permitted_exception::de_operation_not_permitted_exception_xml_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "PriorRequestNotComplete" => {
            crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::PriorRequestNotCompleteException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PriorRequestNotCompleteExceptionBuilder::default();
                    output = crate::protocol_serde::shape_prior_request_not_complete_exception::de_prior_request_not_complete_exception_xml_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_modify_capacity_reservation_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::modify_capacity_reservation::ModifyCapacityReservationOutput,
    crate::operation::modify_capacity_reservation::ModifyCapacityReservationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::modify_capacity_reservation::builders::ModifyCapacityReservationOutputBuilder::default();
        output = crate::protocol_serde::shape_modify_capacity_reservation::de_modify_capacity_reservation(_response_body, output)
            .map_err(crate::operation::modify_capacity_reservation::ModifyCapacityReservationError::unhandled)?;
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_modify_capacity_reservation(
    inp: &[u8],
    mut builder: crate::operation::modify_capacity_reservation::builders::ModifyCapacityReservationOutputBuilder,
) -> std::result::Result<
    crate::operation::modify_capacity_reservation::builders::ModifyCapacityReservationOutputBuilder,
    ::aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("ModifyCapacityReservationResponse")) {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected ModifyCapacityReservationResponse got {start_el:?}"
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ModifyCapacityReservationResult")) {
            return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected ModifyCapacityReservationResult got {start_el:?}"
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("LastModifiedTime") /* LastModifiedTime com.amazonaws.elasticloadbalancingv2.synthetic#ModifyCapacityReservationOutput$LastModifiedTime */ =>  {
                let var_1 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.elasticloadbalancingv2#LastModifiedTime`)"))
                        ?
                    )
                ;
                builder = builder.set_last_modified_time(var_1);
            }
            ,
            s if s.matches("DecreaseRequestsRemaining") /* DecreaseRequestsRemaining com.amazonaws.elasticloadbalancingv2.synthetic#ModifyCapacityReservationOutput$DecreaseRequestsRemaining */ =>  {
                let var_2 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticloadbalancingv2#DecreaseRequestsRemaining`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_decrease_requests_remaining(var_2);
            }
            ,
            s if s.matches("MinimumLoadBalancerCapacity") /* MinimumLoadBalancerCapacity com.amazonaws.elasticloadbalancingv2.synthetic#ModifyCapacityReservationOutput$MinimumLoadBalancerCapacity */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_minimum_load_balancer_capacity::de_minimum_load_balancer_capacity(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_minimum_load_balancer_capacity(var_3);
            }
            ,
            s if s.matches("CapacityReservationState") /* CapacityReservationState com.amazonaws.elasticloadbalancingv2.synthetic#ModifyCapacityReservationOutput$CapacityReservationState */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_zonal_capacity_reservation_states::de_zonal_capacity_reservation_states(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_reservation_state(var_4);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected ModifyCapacityReservationResult tag",
        ));
    };
    Ok(builder)
}
