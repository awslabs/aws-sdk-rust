// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_path_pattern_condition_config(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::PathPatternConditionConfig,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Values");
    if let Some(var_2) = &input.values {
        let mut list_4 = scope_1.start_list(false, None);
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            entry_5.string(item_3);
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("RegexValues");
    if let Some(var_7) = &input.regex_values {
        let mut list_9 = scope_6.start_list(false, None);
        for item_8 in var_7 {
            #[allow(unused_mut)]
            let mut entry_10 = list_9.entry();
            entry_10.string(item_8);
        }
        list_9.finish();
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_path_pattern_condition_config(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::PathPatternConditionConfig, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::PathPatternConditionConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Values") /* Values com.amazonaws.elasticloadbalancingv2#PathPatternConditionConfig$Values */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_list_of_string::de_list_of_string(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_values(var_11);
            }
            ,
            s if s.matches("RegexValues") /* RegexValues com.amazonaws.elasticloadbalancingv2#PathPatternConditionConfig$RegexValues */ =>  {
                let var_12 =
                    Some(
                        crate::protocol_serde::shape_list_of_string::de_list_of_string(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_regex_values(var_12);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
