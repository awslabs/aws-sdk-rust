// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::Rule, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Rule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("RuleArn") /* RuleArn com.amazonaws.elasticloadbalancingv2#Rule$RuleArn */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_rule_arn(var_1);
            }
            ,
            s if s.matches("Priority") /* Priority com.amazonaws.elasticloadbalancingv2#Rule$Priority */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_priority(var_2);
            }
            ,
            s if s.matches("Conditions") /* Conditions com.amazonaws.elasticloadbalancingv2#Rule$Conditions */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_rule_condition_list::de_rule_condition_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_conditions(var_3);
            }
            ,
            s if s.matches("Actions") /* Actions com.amazonaws.elasticloadbalancingv2#Rule$Actions */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_actions::de_actions(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_actions(var_4);
            }
            ,
            s if s.matches("IsDefault") /* IsDefault com.amazonaws.elasticloadbalancingv2#Rule$IsDefault */ =>  {
                let var_5 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticloadbalancingv2#IsDefault`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_default(var_5);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
