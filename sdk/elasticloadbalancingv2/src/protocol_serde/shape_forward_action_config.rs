// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_forward_action_config(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::ForwardActionConfig,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("TargetGroups");
    if let Some(var_2) = &input.target_groups {
        let mut list_4 = scope_1.start_list(false, None);
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            crate::protocol_serde::shape_target_group_tuple::ser_target_group_tuple(entry_5, item_3)?;
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("TargetGroupStickinessConfig");
    if let Some(var_7) = &input.target_group_stickiness_config {
        crate::protocol_serde::shape_target_group_stickiness_config::ser_target_group_stickiness_config(scope_6, var_7)?;
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_forward_action_config(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ForwardActionConfig, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ForwardActionConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TargetGroups") /* TargetGroups com.amazonaws.elasticloadbalancingv2#ForwardActionConfig$TargetGroups */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_target_group_list::de_target_group_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target_groups(var_8);
            }
            ,
            s if s.matches("TargetGroupStickinessConfig") /* TargetGroupStickinessConfig com.amazonaws.elasticloadbalancingv2#ForwardActionConfig$TargetGroupStickinessConfig */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_target_group_stickiness_config::de_target_group_stickiness_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_target_group_stickiness_config(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
