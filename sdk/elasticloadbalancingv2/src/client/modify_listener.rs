// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ModifyListener`](crate::client::fluent_builders::ModifyListener) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`listener_arn(impl Into<String>)`](crate::client::fluent_builders::ModifyListener::listener_arn) / [`set_listener_arn(Option<String>)`](crate::client::fluent_builders::ModifyListener::set_listener_arn): <p>The Amazon Resource Name (ARN) of the listener.</p>
    ///   - [`port(i32)`](crate::client::fluent_builders::ModifyListener::port) / [`set_port(Option<i32>)`](crate::client::fluent_builders::ModifyListener::set_port): <p>The port for connections from clients to the load balancer. You cannot specify a port for a Gateway Load Balancer.</p>
    ///   - [`protocol(ProtocolEnum)`](crate::client::fluent_builders::ModifyListener::protocol) / [`set_protocol(Option<ProtocolEnum>)`](crate::client::fluent_builders::ModifyListener::set_protocol): <p>The protocol for connections from clients to the load balancer. Application Load Balancers support the HTTP and HTTPS protocols. Network Load Balancers support the TCP, TLS, UDP, and TCP_UDP protocols. You canâ€™t change the protocol to UDP or TCP_UDP if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.</p>
    ///   - [`ssl_policy(impl Into<String>)`](crate::client::fluent_builders::ModifyListener::ssl_policy) / [`set_ssl_policy(Option<String>)`](crate::client::fluent_builders::ModifyListener::set_ssl_policy): <p>[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security policies</a> in the <i>Application Load Balancers Guide</i> or <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security policies</a> in the <i>Network Load Balancers Guide</i>.</p>
    ///   - [`certificates(Vec<Certificate>)`](crate::client::fluent_builders::ModifyListener::certificates) / [`set_certificates(Option<Vec<Certificate>>)`](crate::client::fluent_builders::ModifyListener::set_certificates): <p>[HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</p>
    ///   - [`default_actions(Vec<Action>)`](crate::client::fluent_builders::ModifyListener::default_actions) / [`set_default_actions(Option<Vec<Action>>)`](crate::client::fluent_builders::ModifyListener::set_default_actions): <p>The actions for the default rule.</p>
    ///   - [`alpn_policy(Vec<String>)`](crate::client::fluent_builders::ModifyListener::alpn_policy) / [`set_alpn_policy(Option<Vec<String>>)`](crate::client::fluent_builders::ModifyListener::set_alpn_policy): <p>[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:</p>  <ul>   <li> <p> <code>HTTP1Only</code> </p> </li>   <li> <p> <code>HTTP2Only</code> </p> </li>   <li> <p> <code>HTTP2Optional</code> </p> </li>   <li> <p> <code>HTTP2Preferred</code> </p> </li>   <li> <p> <code>None</code> </p> </li>  </ul>  <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies">ALPN policies</a> in the <i>Network Load Balancers Guide</i>.</p>
    /// - On success, responds with [`ModifyListenerOutput`](crate::output::ModifyListenerOutput) with field(s):
    ///   - [`listeners(Option<Vec<Listener>>)`](crate::output::ModifyListenerOutput::listeners): <p>Information about the modified listener.</p>
    /// - On failure, responds with [`SdkError<ModifyListenerError>`](crate::error::ModifyListenerError)
    pub fn modify_listener(&self) -> crate::client::fluent_builders::ModifyListener {
        crate::client::fluent_builders::ModifyListener::new(self.handle.clone())
    }
}
