// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeListenerCertificates`](crate::client::fluent_builders::DescribeListenerCertificates) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`listener_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeListenerCertificates::listener_arn) / [`set_listener_arn(Option<String>)`](crate::client::fluent_builders::DescribeListenerCertificates::set_listener_arn): <p>The Amazon Resource Names (ARN) of the listener.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::DescribeListenerCertificates::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::DescribeListenerCertificates::set_marker): <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::DescribeListenerCertificates::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::DescribeListenerCertificates::set_page_size): <p>The maximum number of results to return with this call.</p>
    /// - On success, responds with [`DescribeListenerCertificatesOutput`](crate::output::DescribeListenerCertificatesOutput) with field(s):
    ///   - [`certificates(Option<Vec<Certificate>>)`](crate::output::DescribeListenerCertificatesOutput::certificates): <p>Information about the certificates.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::DescribeListenerCertificatesOutput::next_marker): <p>If there are additional results, this is the marker for the next set of results. Otherwise, this is null.</p>
    /// - On failure, responds with [`SdkError<DescribeListenerCertificatesError>`](crate::error::DescribeListenerCertificatesError)
    pub fn describe_listener_certificates(
        &self,
    ) -> crate::client::fluent_builders::DescribeListenerCertificates {
        crate::client::fluent_builders::DescribeListenerCertificates::new(self.handle.clone())
    }
}
