// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Elastic Load Balancing
///
/// Client for invoking operations on Elastic Load Balancing. Each operation on Elastic Load Balancing is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_elasticloadbalancingv2::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_elasticloadbalancingv2::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_elasticloadbalancingv2::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AddListenerCertificates`](crate::client::fluent_builders::AddListenerCertificates) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`listener_arn(impl Into<String>)`](crate::client::fluent_builders::AddListenerCertificates::listener_arn) / [`set_listener_arn(Option<String>)`](crate::client::fluent_builders::AddListenerCertificates::set_listener_arn): <p>The Amazon Resource Name (ARN) of the listener.</p>
    ///   - [`certificates(Vec<Certificate>)`](crate::client::fluent_builders::AddListenerCertificates::certificates) / [`set_certificates(Option<Vec<Certificate>>)`](crate::client::fluent_builders::AddListenerCertificates::set_certificates): <p>The certificate to add. You can specify one certificate per call. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</p>
    /// - On success, responds with [`AddListenerCertificatesOutput`](crate::output::AddListenerCertificatesOutput) with field(s):
    ///   - [`certificates(Option<Vec<Certificate>>)`](crate::output::AddListenerCertificatesOutput::certificates): <p>Information about the certificates in the certificate list.</p>
    /// - On failure, responds with [`SdkError<AddListenerCertificatesError>`](crate::error::AddListenerCertificatesError)
    pub fn add_listener_certificates(
        &self,
    ) -> crate::client::fluent_builders::AddListenerCertificates {
        crate::client::fluent_builders::AddListenerCertificates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AddTags`](crate::client::fluent_builders::AddTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arns(Vec<String>)`](crate::client::fluent_builders::AddTags::resource_arns) / [`set_resource_arns(Option<Vec<String>>)`](crate::client::fluent_builders::AddTags::set_resource_arns): <p>The Amazon Resource Name (ARN) of the resource.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::AddTags::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::AddTags::set_tags): <p>The tags.</p>
    /// - On success, responds with [`AddTagsOutput`](crate::output::AddTagsOutput)

    /// - On failure, responds with [`SdkError<AddTagsError>`](crate::error::AddTagsError)
    pub fn add_tags(&self) -> crate::client::fluent_builders::AddTags {
        crate::client::fluent_builders::AddTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateListener`](crate::client::fluent_builders::CreateListener) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_arn(impl Into<String>)`](crate::client::fluent_builders::CreateListener::load_balancer_arn) / [`set_load_balancer_arn(Option<String>)`](crate::client::fluent_builders::CreateListener::set_load_balancer_arn): <p>The Amazon Resource Name (ARN) of the load balancer.</p>
    ///   - [`protocol(ProtocolEnum)`](crate::client::fluent_builders::CreateListener::protocol) / [`set_protocol(Option<ProtocolEnum>)`](crate::client::fluent_builders::CreateListener::set_protocol): <p>The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You canâ€™t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.</p>
    ///   - [`port(i32)`](crate::client::fluent_builders::CreateListener::port) / [`set_port(Option<i32>)`](crate::client::fluent_builders::CreateListener::set_port): <p>The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer.</p>
    ///   - [`ssl_policy(impl Into<String>)`](crate::client::fluent_builders::CreateListener::ssl_policy) / [`set_ssl_policy(Option<String>)`](crate::client::fluent_builders::CreateListener::set_ssl_policy): <p>[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security policies</a> in the <i>Application Load Balancers Guide</i> and <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security policies</a> in the <i>Network Load Balancers Guide</i>.</p>
    ///   - [`certificates(Vec<Certificate>)`](crate::client::fluent_builders::CreateListener::certificates) / [`set_certificates(Option<Vec<Certificate>>)`](crate::client::fluent_builders::CreateListener::set_certificates): <p>[HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</p>
    ///   - [`default_actions(Vec<Action>)`](crate::client::fluent_builders::CreateListener::default_actions) / [`set_default_actions(Option<Vec<Action>>)`](crate::client::fluent_builders::CreateListener::set_default_actions): <p>The actions for the default rule.</p>
    ///   - [`alpn_policy(Vec<String>)`](crate::client::fluent_builders::CreateListener::alpn_policy) / [`set_alpn_policy(Option<Vec<String>>)`](crate::client::fluent_builders::CreateListener::set_alpn_policy): <p>[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:</p>  <ul>   <li> <p> <code>HTTP1Only</code> </p> </li>   <li> <p> <code>HTTP2Only</code> </p> </li>   <li> <p> <code>HTTP2Optional</code> </p> </li>   <li> <p> <code>HTTP2Preferred</code> </p> </li>   <li> <p> <code>None</code> </p> </li>  </ul>  <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies">ALPN policies</a> in the <i>Network Load Balancers Guide</i>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateListener::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateListener::set_tags): <p>The tags to assign to the listener.</p>
    /// - On success, responds with [`CreateListenerOutput`](crate::output::CreateListenerOutput) with field(s):
    ///   - [`listeners(Option<Vec<Listener>>)`](crate::output::CreateListenerOutput::listeners): <p>Information about the listener.</p>
    /// - On failure, responds with [`SdkError<CreateListenerError>`](crate::error::CreateListenerError)
    pub fn create_listener(&self) -> crate::client::fluent_builders::CreateListener {
        crate::client::fluent_builders::CreateListener::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLoadBalancer`](crate::client::fluent_builders::CreateLoadBalancer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateLoadBalancer::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateLoadBalancer::set_name): <p>The name of the load balancer.</p>  <p>This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-".</p>
    ///   - [`subnets(Vec<String>)`](crate::client::fluent_builders::CreateLoadBalancer::subnets) / [`set_subnets(Option<Vec<String>>)`](crate::client::fluent_builders::CreateLoadBalancer::set_subnets): <p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets.</p>  <p>[Application Load Balancers] You must specify subnets from at least two Availability Zones.</p>  <p>[Application Load Balancers on Outposts] You must specify one Outpost subnet.</p>  <p>[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.</p>  <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones.</p>  <p>[Gateway Load Balancers] You can specify subnets from one or more Availability Zones.</p>
    ///   - [`subnet_mappings(Vec<SubnetMapping>)`](crate::client::fluent_builders::CreateLoadBalancer::subnet_mappings) / [`set_subnet_mappings(Option<Vec<SubnetMapping>>)`](crate::client::fluent_builders::CreateLoadBalancer::set_subnet_mappings): <p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both.</p>  <p>[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.</p>  <p>[Application Load Balancers on Outposts] You must specify one Outpost subnet.</p>  <p>[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.</p>  <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.</p>  <p>[Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You cannot specify Elastic IP addresses for your subnets.</p>
    ///   - [`security_groups(Vec<String>)`](crate::client::fluent_builders::CreateLoadBalancer::security_groups) / [`set_security_groups(Option<Vec<String>>)`](crate::client::fluent_builders::CreateLoadBalancer::set_security_groups): <p>[Application Load Balancers] The IDs of the security groups for the load balancer.</p>
    ///   - [`scheme(LoadBalancerSchemeEnum)`](crate::client::fluent_builders::CreateLoadBalancer::scheme) / [`set_scheme(Option<LoadBalancerSchemeEnum>)`](crate::client::fluent_builders::CreateLoadBalancer::set_scheme): <p>The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet.</p>  <p>The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.</p>  <p>The default is an Internet-facing load balancer.</p>  <p>You cannot specify a scheme for a Gateway Load Balancer.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateLoadBalancer::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateLoadBalancer::set_tags): <p>The tags to assign to the load balancer.</p>
    ///   - [`r#type(LoadBalancerTypeEnum)`](crate::client::fluent_builders::CreateLoadBalancer::type) / [`set_type(Option<LoadBalancerTypeEnum>)`](crate::client::fluent_builders::CreateLoadBalancer::set_type): <p>The type of load balancer. The default is <code>application</code>.</p>
    ///   - [`ip_address_type(IpAddressType)`](crate::client::fluent_builders::CreateLoadBalancer::ip_address_type) / [`set_ip_address_type(Option<IpAddressType>)`](crate::client::fluent_builders::CreateLoadBalancer::set_ip_address_type): <p>The type of IP addresses used by the subnets for your load balancer. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses). </p>
    ///   - [`customer_owned_ipv4_pool(impl Into<String>)`](crate::client::fluent_builders::CreateLoadBalancer::customer_owned_ipv4_pool) / [`set_customer_owned_ipv4_pool(Option<String>)`](crate::client::fluent_builders::CreateLoadBalancer::set_customer_owned_ipv4_pool): <p>[Application Load Balancers on Outposts] The ID of the customer-owned address pool (CoIP pool).</p>
    /// - On success, responds with [`CreateLoadBalancerOutput`](crate::output::CreateLoadBalancerOutput) with field(s):
    ///   - [`load_balancers(Option<Vec<LoadBalancer>>)`](crate::output::CreateLoadBalancerOutput::load_balancers): <p>Information about the load balancer.</p>
    /// - On failure, responds with [`SdkError<CreateLoadBalancerError>`](crate::error::CreateLoadBalancerError)
    pub fn create_load_balancer(&self) -> crate::client::fluent_builders::CreateLoadBalancer {
        crate::client::fluent_builders::CreateLoadBalancer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateRule`](crate::client::fluent_builders::CreateRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`listener_arn(impl Into<String>)`](crate::client::fluent_builders::CreateRule::listener_arn) / [`set_listener_arn(Option<String>)`](crate::client::fluent_builders::CreateRule::set_listener_arn): <p>The Amazon Resource Name (ARN) of the listener.</p>
    ///   - [`conditions(Vec<RuleCondition>)`](crate::client::fluent_builders::CreateRule::conditions) / [`set_conditions(Option<Vec<RuleCondition>>)`](crate::client::fluent_builders::CreateRule::set_conditions): <p>The conditions.</p>
    ///   - [`priority(i32)`](crate::client::fluent_builders::CreateRule::priority) / [`set_priority(Option<i32>)`](crate::client::fluent_builders::CreateRule::set_priority): <p>The rule priority. A listener can't have multiple rules with the same priority.</p>
    ///   - [`actions(Vec<Action>)`](crate::client::fluent_builders::CreateRule::actions) / [`set_actions(Option<Vec<Action>>)`](crate::client::fluent_builders::CreateRule::set_actions): <p>The actions.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateRule::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateRule::set_tags): <p>The tags to assign to the rule.</p>
    /// - On success, responds with [`CreateRuleOutput`](crate::output::CreateRuleOutput) with field(s):
    ///   - [`rules(Option<Vec<Rule>>)`](crate::output::CreateRuleOutput::rules): <p>Information about the rule.</p>
    /// - On failure, responds with [`SdkError<CreateRuleError>`](crate::error::CreateRuleError)
    pub fn create_rule(&self) -> crate::client::fluent_builders::CreateRule {
        crate::client::fluent_builders::CreateRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateTargetGroup`](crate::client::fluent_builders::CreateTargetGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateTargetGroup::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateTargetGroup::set_name): <p>The name of the target group.</p>  <p>This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.</p>
    ///   - [`protocol(ProtocolEnum)`](crate::client::fluent_builders::CreateTargetGroup::protocol) / [`set_protocol(Option<ProtocolEnum>)`](crate::client::fluent_builders::CreateTargetGroup::set_protocol): <p>The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply.</p>
    ///   - [`protocol_version(impl Into<String>)`](crate::client::fluent_builders::CreateTargetGroup::protocol_version) / [`set_protocol_version(Option<String>)`](crate::client::fluent_builders::CreateTargetGroup::set_protocol_version): <p>[HTTP/HTTPS protocol] The protocol version. Specify <code>GRPC</code> to send requests to targets using gRPC. Specify <code>HTTP2</code> to send requests to targets using HTTP/2. The default is <code>HTTP1</code>, which sends requests to targets using HTTP/1.1.</p>
    ///   - [`port(i32)`](crate::client::fluent_builders::CreateTargetGroup::port) / [`set_port(Option<i32>)`](crate::client::fluent_builders::CreateTargetGroup::set_port): <p>The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.</p>
    ///   - [`vpc_id(impl Into<String>)`](crate::client::fluent_builders::CreateTargetGroup::vpc_id) / [`set_vpc_id(Option<String>)`](crate::client::fluent_builders::CreateTargetGroup::set_vpc_id): <p>The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required.</p>
    ///   - [`health_check_protocol(ProtocolEnum)`](crate::client::fluent_builders::CreateTargetGroup::health_check_protocol) / [`set_health_check_protocol(Option<ProtocolEnum>)`](crate::client::fluent_builders::CreateTargetGroup::set_health_check_protocol): <p>The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.</p>
    ///   - [`health_check_port(impl Into<String>)`](crate::client::fluent_builders::CreateTargetGroup::health_check_port) / [`set_health_check_port(Option<String>)`](crate::client::fluent_builders::CreateTargetGroup::set_health_check_port): <p>The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is <code>traffic-port</code>, which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80.</p>
    ///   - [`health_check_enabled(bool)`](crate::client::fluent_builders::CreateTargetGroup::health_check_enabled) / [`set_health_check_enabled(Option<bool>)`](crate::client::fluent_builders::CreateTargetGroup::set_health_check_enabled): <p>Indicates whether health checks are enabled. If the target type is <code>lambda</code>, health checks are disabled by default but can be enabled. If the target type is <code>instance</code>, <code>ip</code>, or <code>alb</code>, health checks are always enabled and cannot be disabled.</p>
    ///   - [`health_check_path(impl Into<String>)`](crate::client::fluent_builders::CreateTargetGroup::health_check_path) / [`set_health_check_path(Option<String>)`](crate::client::fluent_builders::CreateTargetGroup::set_health_check_path): <p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p>  <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p>  <p>[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.</p>
    ///   - [`health_check_interval_seconds(i32)`](crate::client::fluent_builders::CreateTargetGroup::health_check_interval_seconds) / [`set_health_check_interval_seconds(Option<i32>)`](crate::client::fluent_builders::CreateTargetGroup::set_health_check_interval_seconds): <p>The approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. If the target group protocol is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol is GENEVE, the default is 10 seconds. If the target type is <code>lambda</code>, the default is 35 seconds.</p>
    ///   - [`health_check_timeout_seconds(i32)`](crate::client::fluent_builders::CreateTargetGroup::health_check_timeout_seconds) / [`set_health_check_timeout_seconds(Option<i32>)`](crate::client::fluent_builders::CreateTargetGroup::set_health_check_timeout_seconds): <p>The amount of time, in seconds, during which no response from a target means a failed health check. The range is 2â€“120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is <code>lambda</code>, the default is 30 seconds.</p>
    ///   - [`healthy_threshold_count(i32)`](crate::client::fluent_builders::CreateTargetGroup::healthy_threshold_count) / [`set_healthy_threshold_count(Option<i32>)`](crate::client::fluent_builders::CreateTargetGroup::set_healthy_threshold_count): <p>The number of consecutive health check successes required before considering a target healthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with a protocol of GENEVE, the default is 3. If the target type is <code>lambda</code>, the default is 5.</p>
    ///   - [`unhealthy_threshold_count(i32)`](crate::client::fluent_builders::CreateTargetGroup::unhealthy_threshold_count) / [`set_unhealthy_threshold_count(Option<i32>)`](crate::client::fluent_builders::CreateTargetGroup::set_unhealthy_threshold_count): <p>The number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with a protocol of GENEVE, the default is 3. If the target type is <code>lambda</code>, the default is 5.</p>
    ///   - [`matcher(Matcher)`](crate::client::fluent_builders::CreateTargetGroup::matcher) / [`set_matcher(Option<Matcher>)`](crate::client::fluent_builders::CreateTargetGroup::set_matcher): <p>[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.</p>
    ///   - [`target_type(TargetTypeEnum)`](crate::client::fluent_builders::CreateTargetGroup::target_type) / [`set_target_type(Option<TargetTypeEnum>)`](crate::client::fluent_builders::CreateTargetGroup::set_target_type): <p>The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.</p>  <ul>   <li> <p> <code>instance</code> - Register targets by instance ID. This is the default value.</p> </li>   <li> <p> <code>ip</code> - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.</p> </li>   <li> <p> <code>lambda</code> - Register a single Lambda function as a target.</p> </li>   <li> <p> <code>alb</code> - Register a single Application Load Balancer as a target.</p> </li>  </ul>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateTargetGroup::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateTargetGroup::set_tags): <p>The tags to assign to the target group.</p>
    ///   - [`ip_address_type(TargetGroupIpAddressTypeEnum)`](crate::client::fluent_builders::CreateTargetGroup::ip_address_type) / [`set_ip_address_type(Option<TargetGroupIpAddressTypeEnum>)`](crate::client::fluent_builders::CreateTargetGroup::set_ip_address_type): <p>The type of IP address used for this target group. The possible values are <code>ipv4</code> and <code>ipv6</code>. This is an optional parameter. If not specified, the IP address type defaults to <code>ipv4</code>.</p>
    /// - On success, responds with [`CreateTargetGroupOutput`](crate::output::CreateTargetGroupOutput) with field(s):
    ///   - [`target_groups(Option<Vec<TargetGroup>>)`](crate::output::CreateTargetGroupOutput::target_groups): <p>Information about the target group.</p>
    /// - On failure, responds with [`SdkError<CreateTargetGroupError>`](crate::error::CreateTargetGroupError)
    pub fn create_target_group(&self) -> crate::client::fluent_builders::CreateTargetGroup {
        crate::client::fluent_builders::CreateTargetGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteListener`](crate::client::fluent_builders::DeleteListener) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`listener_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteListener::listener_arn) / [`set_listener_arn(Option<String>)`](crate::client::fluent_builders::DeleteListener::set_listener_arn): <p>The Amazon Resource Name (ARN) of the listener.</p>
    /// - On success, responds with [`DeleteListenerOutput`](crate::output::DeleteListenerOutput)

    /// - On failure, responds with [`SdkError<DeleteListenerError>`](crate::error::DeleteListenerError)
    pub fn delete_listener(&self) -> crate::client::fluent_builders::DeleteListener {
        crate::client::fluent_builders::DeleteListener::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLoadBalancer`](crate::client::fluent_builders::DeleteLoadBalancer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteLoadBalancer::load_balancer_arn) / [`set_load_balancer_arn(Option<String>)`](crate::client::fluent_builders::DeleteLoadBalancer::set_load_balancer_arn): <p>The Amazon Resource Name (ARN) of the load balancer.</p>
    /// - On success, responds with [`DeleteLoadBalancerOutput`](crate::output::DeleteLoadBalancerOutput)

    /// - On failure, responds with [`SdkError<DeleteLoadBalancerError>`](crate::error::DeleteLoadBalancerError)
    pub fn delete_load_balancer(&self) -> crate::client::fluent_builders::DeleteLoadBalancer {
        crate::client::fluent_builders::DeleteLoadBalancer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRule`](crate::client::fluent_builders::DeleteRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteRule::rule_arn) / [`set_rule_arn(Option<String>)`](crate::client::fluent_builders::DeleteRule::set_rule_arn): <p>The Amazon Resource Name (ARN) of the rule.</p>
    /// - On success, responds with [`DeleteRuleOutput`](crate::output::DeleteRuleOutput)

    /// - On failure, responds with [`SdkError<DeleteRuleError>`](crate::error::DeleteRuleError)
    pub fn delete_rule(&self) -> crate::client::fluent_builders::DeleteRule {
        crate::client::fluent_builders::DeleteRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteTargetGroup`](crate::client::fluent_builders::DeleteTargetGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`target_group_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteTargetGroup::target_group_arn) / [`set_target_group_arn(Option<String>)`](crate::client::fluent_builders::DeleteTargetGroup::set_target_group_arn): <p>The Amazon Resource Name (ARN) of the target group.</p>
    /// - On success, responds with [`DeleteTargetGroupOutput`](crate::output::DeleteTargetGroupOutput)

    /// - On failure, responds with [`SdkError<DeleteTargetGroupError>`](crate::error::DeleteTargetGroupError)
    pub fn delete_target_group(&self) -> crate::client::fluent_builders::DeleteTargetGroup {
        crate::client::fluent_builders::DeleteTargetGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeregisterTargets`](crate::client::fluent_builders::DeregisterTargets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`target_group_arn(impl Into<String>)`](crate::client::fluent_builders::DeregisterTargets::target_group_arn) / [`set_target_group_arn(Option<String>)`](crate::client::fluent_builders::DeregisterTargets::set_target_group_arn): <p>The Amazon Resource Name (ARN) of the target group.</p>
    ///   - [`targets(Vec<TargetDescription>)`](crate::client::fluent_builders::DeregisterTargets::targets) / [`set_targets(Option<Vec<TargetDescription>>)`](crate::client::fluent_builders::DeregisterTargets::set_targets): <p>The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it.</p>
    /// - On success, responds with [`DeregisterTargetsOutput`](crate::output::DeregisterTargetsOutput)

    /// - On failure, responds with [`SdkError<DeregisterTargetsError>`](crate::error::DeregisterTargetsError)
    pub fn deregister_targets(&self) -> crate::client::fluent_builders::DeregisterTargets {
        crate::client::fluent_builders::DeregisterTargets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeAccountLimits`](crate::client::fluent_builders::DescribeAccountLimits) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::DescribeAccountLimits::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::DescribeAccountLimits::set_marker): <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::DescribeAccountLimits::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::DescribeAccountLimits::set_page_size): <p>The maximum number of results to return with this call.</p>
    /// - On success, responds with [`DescribeAccountLimitsOutput`](crate::output::DescribeAccountLimitsOutput) with field(s):
    ///   - [`limits(Option<Vec<Limit>>)`](crate::output::DescribeAccountLimitsOutput::limits): <p>Information about the limits.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::DescribeAccountLimitsOutput::next_marker): <p>If there are additional results, this is the marker for the next set of results. Otherwise, this is null.</p>
    /// - On failure, responds with [`SdkError<DescribeAccountLimitsError>`](crate::error::DescribeAccountLimitsError)
    pub fn describe_account_limits(&self) -> crate::client::fluent_builders::DescribeAccountLimits {
        crate::client::fluent_builders::DescribeAccountLimits::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeListenerCertificates`](crate::client::fluent_builders::DescribeListenerCertificates) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`listener_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeListenerCertificates::listener_arn) / [`set_listener_arn(Option<String>)`](crate::client::fluent_builders::DescribeListenerCertificates::set_listener_arn): <p>The Amazon Resource Names (ARN) of the listener.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::DescribeListenerCertificates::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::DescribeListenerCertificates::set_marker): <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::DescribeListenerCertificates::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::DescribeListenerCertificates::set_page_size): <p>The maximum number of results to return with this call.</p>
    /// - On success, responds with [`DescribeListenerCertificatesOutput`](crate::output::DescribeListenerCertificatesOutput) with field(s):
    ///   - [`certificates(Option<Vec<Certificate>>)`](crate::output::DescribeListenerCertificatesOutput::certificates): <p>Information about the certificates.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::DescribeListenerCertificatesOutput::next_marker): <p>If there are additional results, this is the marker for the next set of results. Otherwise, this is null.</p>
    /// - On failure, responds with [`SdkError<DescribeListenerCertificatesError>`](crate::error::DescribeListenerCertificatesError)
    pub fn describe_listener_certificates(
        &self,
    ) -> crate::client::fluent_builders::DescribeListenerCertificates {
        crate::client::fluent_builders::DescribeListenerCertificates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeListeners`](crate::client::fluent_builders::DescribeListeners) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeListeners::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeListeners::load_balancer_arn) / [`set_load_balancer_arn(Option<String>)`](crate::client::fluent_builders::DescribeListeners::set_load_balancer_arn): <p>The Amazon Resource Name (ARN) of the load balancer.</p>
    ///   - [`listener_arns(Vec<String>)`](crate::client::fluent_builders::DescribeListeners::listener_arns) / [`set_listener_arns(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeListeners::set_listener_arns): <p>The Amazon Resource Names (ARN) of the listeners.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::DescribeListeners::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::DescribeListeners::set_marker): <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::DescribeListeners::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::DescribeListeners::set_page_size): <p>The maximum number of results to return with this call.</p>
    /// - On success, responds with [`DescribeListenersOutput`](crate::output::DescribeListenersOutput) with field(s):
    ///   - [`listeners(Option<Vec<Listener>>)`](crate::output::DescribeListenersOutput::listeners): <p>Information about the listeners.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::DescribeListenersOutput::next_marker): <p>If there are additional results, this is the marker for the next set of results. Otherwise, this is null.</p>
    /// - On failure, responds with [`SdkError<DescribeListenersError>`](crate::error::DescribeListenersError)
    pub fn describe_listeners(&self) -> crate::client::fluent_builders::DescribeListeners {
        crate::client::fluent_builders::DescribeListeners::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeLoadBalancerAttributes`](crate::client::fluent_builders::DescribeLoadBalancerAttributes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeLoadBalancerAttributes::load_balancer_arn) / [`set_load_balancer_arn(Option<String>)`](crate::client::fluent_builders::DescribeLoadBalancerAttributes::set_load_balancer_arn): <p>The Amazon Resource Name (ARN) of the load balancer.</p>
    /// - On success, responds with [`DescribeLoadBalancerAttributesOutput`](crate::output::DescribeLoadBalancerAttributesOutput) with field(s):
    ///   - [`attributes(Option<Vec<LoadBalancerAttribute>>)`](crate::output::DescribeLoadBalancerAttributesOutput::attributes): <p>Information about the load balancer attributes.</p>
    /// - On failure, responds with [`SdkError<DescribeLoadBalancerAttributesError>`](crate::error::DescribeLoadBalancerAttributesError)
    pub fn describe_load_balancer_attributes(
        &self,
    ) -> crate::client::fluent_builders::DescribeLoadBalancerAttributes {
        crate::client::fluent_builders::DescribeLoadBalancerAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeLoadBalancers`](crate::client::fluent_builders::DescribeLoadBalancers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeLoadBalancers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_arns(Vec<String>)`](crate::client::fluent_builders::DescribeLoadBalancers::load_balancer_arns) / [`set_load_balancer_arns(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeLoadBalancers::set_load_balancer_arns): <p>The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.</p>
    ///   - [`names(Vec<String>)`](crate::client::fluent_builders::DescribeLoadBalancers::names) / [`set_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeLoadBalancers::set_names): <p>The names of the load balancers.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::DescribeLoadBalancers::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::DescribeLoadBalancers::set_marker): <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::DescribeLoadBalancers::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::DescribeLoadBalancers::set_page_size): <p>The maximum number of results to return with this call.</p>
    /// - On success, responds with [`DescribeLoadBalancersOutput`](crate::output::DescribeLoadBalancersOutput) with field(s):
    ///   - [`load_balancers(Option<Vec<LoadBalancer>>)`](crate::output::DescribeLoadBalancersOutput::load_balancers): <p>Information about the load balancers.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::DescribeLoadBalancersOutput::next_marker): <p>If there are additional results, this is the marker for the next set of results. Otherwise, this is null.</p>
    /// - On failure, responds with [`SdkError<DescribeLoadBalancersError>`](crate::error::DescribeLoadBalancersError)
    pub fn describe_load_balancers(&self) -> crate::client::fluent_builders::DescribeLoadBalancers {
        crate::client::fluent_builders::DescribeLoadBalancers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeRules`](crate::client::fluent_builders::DescribeRules) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`listener_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeRules::listener_arn) / [`set_listener_arn(Option<String>)`](crate::client::fluent_builders::DescribeRules::set_listener_arn): <p>The Amazon Resource Name (ARN) of the listener.</p>
    ///   - [`rule_arns(Vec<String>)`](crate::client::fluent_builders::DescribeRules::rule_arns) / [`set_rule_arns(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeRules::set_rule_arns): <p>The Amazon Resource Names (ARN) of the rules.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::DescribeRules::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::DescribeRules::set_marker): <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::DescribeRules::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::DescribeRules::set_page_size): <p>The maximum number of results to return with this call.</p>
    /// - On success, responds with [`DescribeRulesOutput`](crate::output::DescribeRulesOutput) with field(s):
    ///   - [`rules(Option<Vec<Rule>>)`](crate::output::DescribeRulesOutput::rules): <p>Information about the rules.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::DescribeRulesOutput::next_marker): <p>If there are additional results, this is the marker for the next set of results. Otherwise, this is null.</p>
    /// - On failure, responds with [`SdkError<DescribeRulesError>`](crate::error::DescribeRulesError)
    pub fn describe_rules(&self) -> crate::client::fluent_builders::DescribeRules {
        crate::client::fluent_builders::DescribeRules::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeSSLPolicies`](crate::client::fluent_builders::DescribeSSLPolicies) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`names(Vec<String>)`](crate::client::fluent_builders::DescribeSSLPolicies::names) / [`set_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeSSLPolicies::set_names): <p>The names of the policies.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::DescribeSSLPolicies::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::DescribeSSLPolicies::set_marker): <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::DescribeSSLPolicies::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::DescribeSSLPolicies::set_page_size): <p>The maximum number of results to return with this call.</p>
    ///   - [`load_balancer_type(LoadBalancerTypeEnum)`](crate::client::fluent_builders::DescribeSSLPolicies::load_balancer_type) / [`set_load_balancer_type(Option<LoadBalancerTypeEnum>)`](crate::client::fluent_builders::DescribeSSLPolicies::set_load_balancer_type): <p> The type of load balancer. The default lists the SSL policies for all load balancers.</p>
    /// - On success, responds with [`DescribeSslPoliciesOutput`](crate::output::DescribeSslPoliciesOutput) with field(s):
    ///   - [`ssl_policies(Option<Vec<SslPolicy>>)`](crate::output::DescribeSslPoliciesOutput::ssl_policies): <p>Information about the security policies.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::DescribeSslPoliciesOutput::next_marker): <p>If there are additional results, this is the marker for the next set of results. Otherwise, this is null.</p>
    /// - On failure, responds with [`SdkError<DescribeSSLPoliciesError>`](crate::error::DescribeSSLPoliciesError)
    pub fn describe_ssl_policies(&self) -> crate::client::fluent_builders::DescribeSSLPolicies {
        crate::client::fluent_builders::DescribeSSLPolicies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeTags`](crate::client::fluent_builders::DescribeTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arns(Vec<String>)`](crate::client::fluent_builders::DescribeTags::resource_arns) / [`set_resource_arns(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeTags::set_resource_arns): <p>The Amazon Resource Names (ARN) of the resources. You can specify up to 20 resources in a single call.</p>
    /// - On success, responds with [`DescribeTagsOutput`](crate::output::DescribeTagsOutput) with field(s):
    ///   - [`tag_descriptions(Option<Vec<TagDescription>>)`](crate::output::DescribeTagsOutput::tag_descriptions): <p>Information about the tags.</p>
    /// - On failure, responds with [`SdkError<DescribeTagsError>`](crate::error::DescribeTagsError)
    pub fn describe_tags(&self) -> crate::client::fluent_builders::DescribeTags {
        crate::client::fluent_builders::DescribeTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeTargetGroupAttributes`](crate::client::fluent_builders::DescribeTargetGroupAttributes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`target_group_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeTargetGroupAttributes::target_group_arn) / [`set_target_group_arn(Option<String>)`](crate::client::fluent_builders::DescribeTargetGroupAttributes::set_target_group_arn): <p>The Amazon Resource Name (ARN) of the target group.</p>
    /// - On success, responds with [`DescribeTargetGroupAttributesOutput`](crate::output::DescribeTargetGroupAttributesOutput) with field(s):
    ///   - [`attributes(Option<Vec<TargetGroupAttribute>>)`](crate::output::DescribeTargetGroupAttributesOutput::attributes): <p>Information about the target group attributes</p>
    /// - On failure, responds with [`SdkError<DescribeTargetGroupAttributesError>`](crate::error::DescribeTargetGroupAttributesError)
    pub fn describe_target_group_attributes(
        &self,
    ) -> crate::client::fluent_builders::DescribeTargetGroupAttributes {
        crate::client::fluent_builders::DescribeTargetGroupAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeTargetGroups`](crate::client::fluent_builders::DescribeTargetGroups) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeTargetGroups::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeTargetGroups::load_balancer_arn) / [`set_load_balancer_arn(Option<String>)`](crate::client::fluent_builders::DescribeTargetGroups::set_load_balancer_arn): <p>The Amazon Resource Name (ARN) of the load balancer.</p>
    ///   - [`target_group_arns(Vec<String>)`](crate::client::fluent_builders::DescribeTargetGroups::target_group_arns) / [`set_target_group_arns(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeTargetGroups::set_target_group_arns): <p>The Amazon Resource Names (ARN) of the target groups.</p>
    ///   - [`names(Vec<String>)`](crate::client::fluent_builders::DescribeTargetGroups::names) / [`set_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeTargetGroups::set_names): <p>The names of the target groups.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::DescribeTargetGroups::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::DescribeTargetGroups::set_marker): <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::DescribeTargetGroups::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::DescribeTargetGroups::set_page_size): <p>The maximum number of results to return with this call.</p>
    /// - On success, responds with [`DescribeTargetGroupsOutput`](crate::output::DescribeTargetGroupsOutput) with field(s):
    ///   - [`target_groups(Option<Vec<TargetGroup>>)`](crate::output::DescribeTargetGroupsOutput::target_groups): <p>Information about the target groups.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::DescribeTargetGroupsOutput::next_marker): <p>If there are additional results, this is the marker for the next set of results. Otherwise, this is null.</p>
    /// - On failure, responds with [`SdkError<DescribeTargetGroupsError>`](crate::error::DescribeTargetGroupsError)
    pub fn describe_target_groups(&self) -> crate::client::fluent_builders::DescribeTargetGroups {
        crate::client::fluent_builders::DescribeTargetGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeTargetHealth`](crate::client::fluent_builders::DescribeTargetHealth) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`target_group_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeTargetHealth::target_group_arn) / [`set_target_group_arn(Option<String>)`](crate::client::fluent_builders::DescribeTargetHealth::set_target_group_arn): <p>The Amazon Resource Name (ARN) of the target group.</p>
    ///   - [`targets(Vec<TargetDescription>)`](crate::client::fluent_builders::DescribeTargetHealth::targets) / [`set_targets(Option<Vec<TargetDescription>>)`](crate::client::fluent_builders::DescribeTargetHealth::set_targets): <p>The targets.</p>
    /// - On success, responds with [`DescribeTargetHealthOutput`](crate::output::DescribeTargetHealthOutput) with field(s):
    ///   - [`target_health_descriptions(Option<Vec<TargetHealthDescription>>)`](crate::output::DescribeTargetHealthOutput::target_health_descriptions): <p>Information about the health of the targets.</p>
    /// - On failure, responds with [`SdkError<DescribeTargetHealthError>`](crate::error::DescribeTargetHealthError)
    pub fn describe_target_health(&self) -> crate::client::fluent_builders::DescribeTargetHealth {
        crate::client::fluent_builders::DescribeTargetHealth::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ModifyListener`](crate::client::fluent_builders::ModifyListener) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`listener_arn(impl Into<String>)`](crate::client::fluent_builders::ModifyListener::listener_arn) / [`set_listener_arn(Option<String>)`](crate::client::fluent_builders::ModifyListener::set_listener_arn): <p>The Amazon Resource Name (ARN) of the listener.</p>
    ///   - [`port(i32)`](crate::client::fluent_builders::ModifyListener::port) / [`set_port(Option<i32>)`](crate::client::fluent_builders::ModifyListener::set_port): <p>The port for connections from clients to the load balancer. You cannot specify a port for a Gateway Load Balancer.</p>
    ///   - [`protocol(ProtocolEnum)`](crate::client::fluent_builders::ModifyListener::protocol) / [`set_protocol(Option<ProtocolEnum>)`](crate::client::fluent_builders::ModifyListener::set_protocol): <p>The protocol for connections from clients to the load balancer. Application Load Balancers support the HTTP and HTTPS protocols. Network Load Balancers support the TCP, TLS, UDP, and TCP_UDP protocols. You canâ€™t change the protocol to UDP or TCP_UDP if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.</p>
    ///   - [`ssl_policy(impl Into<String>)`](crate::client::fluent_builders::ModifyListener::ssl_policy) / [`set_ssl_policy(Option<String>)`](crate::client::fluent_builders::ModifyListener::set_ssl_policy): <p>[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security policies</a> in the <i>Application Load Balancers Guide</i> or <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security policies</a> in the <i>Network Load Balancers Guide</i>.</p>
    ///   - [`certificates(Vec<Certificate>)`](crate::client::fluent_builders::ModifyListener::certificates) / [`set_certificates(Option<Vec<Certificate>>)`](crate::client::fluent_builders::ModifyListener::set_certificates): <p>[HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</p>
    ///   - [`default_actions(Vec<Action>)`](crate::client::fluent_builders::ModifyListener::default_actions) / [`set_default_actions(Option<Vec<Action>>)`](crate::client::fluent_builders::ModifyListener::set_default_actions): <p>The actions for the default rule.</p>
    ///   - [`alpn_policy(Vec<String>)`](crate::client::fluent_builders::ModifyListener::alpn_policy) / [`set_alpn_policy(Option<Vec<String>>)`](crate::client::fluent_builders::ModifyListener::set_alpn_policy): <p>[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:</p>  <ul>   <li> <p> <code>HTTP1Only</code> </p> </li>   <li> <p> <code>HTTP2Only</code> </p> </li>   <li> <p> <code>HTTP2Optional</code> </p> </li>   <li> <p> <code>HTTP2Preferred</code> </p> </li>   <li> <p> <code>None</code> </p> </li>  </ul>  <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies">ALPN policies</a> in the <i>Network Load Balancers Guide</i>.</p>
    /// - On success, responds with [`ModifyListenerOutput`](crate::output::ModifyListenerOutput) with field(s):
    ///   - [`listeners(Option<Vec<Listener>>)`](crate::output::ModifyListenerOutput::listeners): <p>Information about the modified listener.</p>
    /// - On failure, responds with [`SdkError<ModifyListenerError>`](crate::error::ModifyListenerError)
    pub fn modify_listener(&self) -> crate::client::fluent_builders::ModifyListener {
        crate::client::fluent_builders::ModifyListener::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ModifyLoadBalancerAttributes`](crate::client::fluent_builders::ModifyLoadBalancerAttributes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_arn(impl Into<String>)`](crate::client::fluent_builders::ModifyLoadBalancerAttributes::load_balancer_arn) / [`set_load_balancer_arn(Option<String>)`](crate::client::fluent_builders::ModifyLoadBalancerAttributes::set_load_balancer_arn): <p>The Amazon Resource Name (ARN) of the load balancer.</p>
    ///   - [`attributes(Vec<LoadBalancerAttribute>)`](crate::client::fluent_builders::ModifyLoadBalancerAttributes::attributes) / [`set_attributes(Option<Vec<LoadBalancerAttribute>>)`](crate::client::fluent_builders::ModifyLoadBalancerAttributes::set_attributes): <p>The load balancer attributes.</p>
    /// - On success, responds with [`ModifyLoadBalancerAttributesOutput`](crate::output::ModifyLoadBalancerAttributesOutput) with field(s):
    ///   - [`attributes(Option<Vec<LoadBalancerAttribute>>)`](crate::output::ModifyLoadBalancerAttributesOutput::attributes): <p>Information about the load balancer attributes.</p>
    /// - On failure, responds with [`SdkError<ModifyLoadBalancerAttributesError>`](crate::error::ModifyLoadBalancerAttributesError)
    pub fn modify_load_balancer_attributes(
        &self,
    ) -> crate::client::fluent_builders::ModifyLoadBalancerAttributes {
        crate::client::fluent_builders::ModifyLoadBalancerAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ModifyRule`](crate::client::fluent_builders::ModifyRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_arn(impl Into<String>)`](crate::client::fluent_builders::ModifyRule::rule_arn) / [`set_rule_arn(Option<String>)`](crate::client::fluent_builders::ModifyRule::set_rule_arn): <p>The Amazon Resource Name (ARN) of the rule.</p>
    ///   - [`conditions(Vec<RuleCondition>)`](crate::client::fluent_builders::ModifyRule::conditions) / [`set_conditions(Option<Vec<RuleCondition>>)`](crate::client::fluent_builders::ModifyRule::set_conditions): <p>The conditions.</p>
    ///   - [`actions(Vec<Action>)`](crate::client::fluent_builders::ModifyRule::actions) / [`set_actions(Option<Vec<Action>>)`](crate::client::fluent_builders::ModifyRule::set_actions): <p>The actions.</p>
    /// - On success, responds with [`ModifyRuleOutput`](crate::output::ModifyRuleOutput) with field(s):
    ///   - [`rules(Option<Vec<Rule>>)`](crate::output::ModifyRuleOutput::rules): <p>Information about the modified rule.</p>
    /// - On failure, responds with [`SdkError<ModifyRuleError>`](crate::error::ModifyRuleError)
    pub fn modify_rule(&self) -> crate::client::fluent_builders::ModifyRule {
        crate::client::fluent_builders::ModifyRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ModifyTargetGroup`](crate::client::fluent_builders::ModifyTargetGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`target_group_arn(impl Into<String>)`](crate::client::fluent_builders::ModifyTargetGroup::target_group_arn) / [`set_target_group_arn(Option<String>)`](crate::client::fluent_builders::ModifyTargetGroup::set_target_group_arn): <p>The Amazon Resource Name (ARN) of the target group.</p>
    ///   - [`health_check_protocol(ProtocolEnum)`](crate::client::fluent_builders::ModifyTargetGroup::health_check_protocol) / [`set_health_check_protocol(Option<ProtocolEnum>)`](crate::client::fluent_builders::ModifyTargetGroup::set_health_check_protocol): <p>The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.</p>
    ///   - [`health_check_port(impl Into<String>)`](crate::client::fluent_builders::ModifyTargetGroup::health_check_port) / [`set_health_check_port(Option<String>)`](crate::client::fluent_builders::ModifyTargetGroup::set_health_check_port): <p>The port the load balancer uses when performing health checks on targets.</p>
    ///   - [`health_check_path(impl Into<String>)`](crate::client::fluent_builders::ModifyTargetGroup::health_check_path) / [`set_health_check_path(Option<String>)`](crate::client::fluent_builders::ModifyTargetGroup::set_health_check_path): <p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p>  <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p>  <p>[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.</p>
    ///   - [`health_check_enabled(bool)`](crate::client::fluent_builders::ModifyTargetGroup::health_check_enabled) / [`set_health_check_enabled(Option<bool>)`](crate::client::fluent_builders::ModifyTargetGroup::set_health_check_enabled): <p>Indicates whether health checks are enabled.</p>
    ///   - [`health_check_interval_seconds(i32)`](crate::client::fluent_builders::ModifyTargetGroup::health_check_interval_seconds) / [`set_health_check_interval_seconds(Option<i32>)`](crate::client::fluent_builders::ModifyTargetGroup::set_health_check_interval_seconds): <p>The approximate amount of time, in seconds, between health checks of an individual target.</p>
    ///   - [`health_check_timeout_seconds(i32)`](crate::client::fluent_builders::ModifyTargetGroup::health_check_timeout_seconds) / [`set_health_check_timeout_seconds(Option<i32>)`](crate::client::fluent_builders::ModifyTargetGroup::set_health_check_timeout_seconds): <p>[HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.</p>
    ///   - [`healthy_threshold_count(i32)`](crate::client::fluent_builders::ModifyTargetGroup::healthy_threshold_count) / [`set_healthy_threshold_count(Option<i32>)`](crate::client::fluent_builders::ModifyTargetGroup::set_healthy_threshold_count): <p>The number of consecutive health checks successes required before considering an unhealthy target healthy.</p>
    ///   - [`unhealthy_threshold_count(i32)`](crate::client::fluent_builders::ModifyTargetGroup::unhealthy_threshold_count) / [`set_unhealthy_threshold_count(Option<i32>)`](crate::client::fluent_builders::ModifyTargetGroup::set_unhealthy_threshold_count): <p>The number of consecutive health check failures required before considering the target unhealthy.</p>
    ///   - [`matcher(Matcher)`](crate::client::fluent_builders::ModifyTargetGroup::matcher) / [`set_matcher(Option<Matcher>)`](crate::client::fluent_builders::ModifyTargetGroup::set_matcher): <p>[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.</p>
    /// - On success, responds with [`ModifyTargetGroupOutput`](crate::output::ModifyTargetGroupOutput) with field(s):
    ///   - [`target_groups(Option<Vec<TargetGroup>>)`](crate::output::ModifyTargetGroupOutput::target_groups): <p>Information about the modified target group.</p>
    /// - On failure, responds with [`SdkError<ModifyTargetGroupError>`](crate::error::ModifyTargetGroupError)
    pub fn modify_target_group(&self) -> crate::client::fluent_builders::ModifyTargetGroup {
        crate::client::fluent_builders::ModifyTargetGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ModifyTargetGroupAttributes`](crate::client::fluent_builders::ModifyTargetGroupAttributes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`target_group_arn(impl Into<String>)`](crate::client::fluent_builders::ModifyTargetGroupAttributes::target_group_arn) / [`set_target_group_arn(Option<String>)`](crate::client::fluent_builders::ModifyTargetGroupAttributes::set_target_group_arn): <p>The Amazon Resource Name (ARN) of the target group.</p>
    ///   - [`attributes(Vec<TargetGroupAttribute>)`](crate::client::fluent_builders::ModifyTargetGroupAttributes::attributes) / [`set_attributes(Option<Vec<TargetGroupAttribute>>)`](crate::client::fluent_builders::ModifyTargetGroupAttributes::set_attributes): <p>The attributes.</p>
    /// - On success, responds with [`ModifyTargetGroupAttributesOutput`](crate::output::ModifyTargetGroupAttributesOutput) with field(s):
    ///   - [`attributes(Option<Vec<TargetGroupAttribute>>)`](crate::output::ModifyTargetGroupAttributesOutput::attributes): <p>Information about the attributes.</p>
    /// - On failure, responds with [`SdkError<ModifyTargetGroupAttributesError>`](crate::error::ModifyTargetGroupAttributesError)
    pub fn modify_target_group_attributes(
        &self,
    ) -> crate::client::fluent_builders::ModifyTargetGroupAttributes {
        crate::client::fluent_builders::ModifyTargetGroupAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RegisterTargets`](crate::client::fluent_builders::RegisterTargets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`target_group_arn(impl Into<String>)`](crate::client::fluent_builders::RegisterTargets::target_group_arn) / [`set_target_group_arn(Option<String>)`](crate::client::fluent_builders::RegisterTargets::set_target_group_arn): <p>The Amazon Resource Name (ARN) of the target group.</p>
    ///   - [`targets(Vec<TargetDescription>)`](crate::client::fluent_builders::RegisterTargets::targets) / [`set_targets(Option<Vec<TargetDescription>>)`](crate::client::fluent_builders::RegisterTargets::set_targets): <p>The targets.</p>
    /// - On success, responds with [`RegisterTargetsOutput`](crate::output::RegisterTargetsOutput)

    /// - On failure, responds with [`SdkError<RegisterTargetsError>`](crate::error::RegisterTargetsError)
    pub fn register_targets(&self) -> crate::client::fluent_builders::RegisterTargets {
        crate::client::fluent_builders::RegisterTargets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RemoveListenerCertificates`](crate::client::fluent_builders::RemoveListenerCertificates) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`listener_arn(impl Into<String>)`](crate::client::fluent_builders::RemoveListenerCertificates::listener_arn) / [`set_listener_arn(Option<String>)`](crate::client::fluent_builders::RemoveListenerCertificates::set_listener_arn): <p>The Amazon Resource Name (ARN) of the listener.</p>
    ///   - [`certificates(Vec<Certificate>)`](crate::client::fluent_builders::RemoveListenerCertificates::certificates) / [`set_certificates(Option<Vec<Certificate>>)`](crate::client::fluent_builders::RemoveListenerCertificates::set_certificates): <p>The certificate to remove. You can specify one certificate per call. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</p>
    /// - On success, responds with [`RemoveListenerCertificatesOutput`](crate::output::RemoveListenerCertificatesOutput)

    /// - On failure, responds with [`SdkError<RemoveListenerCertificatesError>`](crate::error::RemoveListenerCertificatesError)
    pub fn remove_listener_certificates(
        &self,
    ) -> crate::client::fluent_builders::RemoveListenerCertificates {
        crate::client::fluent_builders::RemoveListenerCertificates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RemoveTags`](crate::client::fluent_builders::RemoveTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arns(Vec<String>)`](crate::client::fluent_builders::RemoveTags::resource_arns) / [`set_resource_arns(Option<Vec<String>>)`](crate::client::fluent_builders::RemoveTags::set_resource_arns): <p>The Amazon Resource Name (ARN) of the resource.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::RemoveTags::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::RemoveTags::set_tag_keys): <p>The tag keys for the tags to remove.</p>
    /// - On success, responds with [`RemoveTagsOutput`](crate::output::RemoveTagsOutput)

    /// - On failure, responds with [`SdkError<RemoveTagsError>`](crate::error::RemoveTagsError)
    pub fn remove_tags(&self) -> crate::client::fluent_builders::RemoveTags {
        crate::client::fluent_builders::RemoveTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SetIpAddressType`](crate::client::fluent_builders::SetIpAddressType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_arn(impl Into<String>)`](crate::client::fluent_builders::SetIpAddressType::load_balancer_arn) / [`set_load_balancer_arn(Option<String>)`](crate::client::fluent_builders::SetIpAddressType::set_load_balancer_arn): <p>The Amazon Resource Name (ARN) of the load balancer.</p>
    ///   - [`ip_address_type(IpAddressType)`](crate::client::fluent_builders::SetIpAddressType::ip_address_type) / [`set_ip_address_type(Option<IpAddressType>)`](crate::client::fluent_builders::SetIpAddressType::set_ip_address_type): <p>The IP address type. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses). You canâ€™t specify <code>dualstack</code> for a load balancer with a UDP or TCP_UDP listener.</p>
    /// - On success, responds with [`SetIpAddressTypeOutput`](crate::output::SetIpAddressTypeOutput) with field(s):
    ///   - [`ip_address_type(Option<IpAddressType>)`](crate::output::SetIpAddressTypeOutput::ip_address_type): <p>The IP address type.</p>
    /// - On failure, responds with [`SdkError<SetIpAddressTypeError>`](crate::error::SetIpAddressTypeError)
    pub fn set_ip_address_type(&self) -> crate::client::fluent_builders::SetIpAddressType {
        crate::client::fluent_builders::SetIpAddressType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SetRulePriorities`](crate::client::fluent_builders::SetRulePriorities) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_priorities(Vec<RulePriorityPair>)`](crate::client::fluent_builders::SetRulePriorities::rule_priorities) / [`set_rule_priorities(Option<Vec<RulePriorityPair>>)`](crate::client::fluent_builders::SetRulePriorities::set_rule_priorities): <p>The rule priorities.</p>
    /// - On success, responds with [`SetRulePrioritiesOutput`](crate::output::SetRulePrioritiesOutput) with field(s):
    ///   - [`rules(Option<Vec<Rule>>)`](crate::output::SetRulePrioritiesOutput::rules): <p>Information about the rules.</p>
    /// - On failure, responds with [`SdkError<SetRulePrioritiesError>`](crate::error::SetRulePrioritiesError)
    pub fn set_rule_priorities(&self) -> crate::client::fluent_builders::SetRulePriorities {
        crate::client::fluent_builders::SetRulePriorities::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SetSecurityGroups`](crate::client::fluent_builders::SetSecurityGroups) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_arn(impl Into<String>)`](crate::client::fluent_builders::SetSecurityGroups::load_balancer_arn) / [`set_load_balancer_arn(Option<String>)`](crate::client::fluent_builders::SetSecurityGroups::set_load_balancer_arn): <p>The Amazon Resource Name (ARN) of the load balancer.</p>
    ///   - [`security_groups(Vec<String>)`](crate::client::fluent_builders::SetSecurityGroups::security_groups) / [`set_security_groups(Option<Vec<String>>)`](crate::client::fluent_builders::SetSecurityGroups::set_security_groups): <p>The IDs of the security groups.</p>
    /// - On success, responds with [`SetSecurityGroupsOutput`](crate::output::SetSecurityGroupsOutput) with field(s):
    ///   - [`security_group_ids(Option<Vec<String>>)`](crate::output::SetSecurityGroupsOutput::security_group_ids): <p>The IDs of the security groups associated with the load balancer.</p>
    /// - On failure, responds with [`SdkError<SetSecurityGroupsError>`](crate::error::SetSecurityGroupsError)
    pub fn set_security_groups(&self) -> crate::client::fluent_builders::SetSecurityGroups {
        crate::client::fluent_builders::SetSecurityGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SetSubnets`](crate::client::fluent_builders::SetSubnets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_arn(impl Into<String>)`](crate::client::fluent_builders::SetSubnets::load_balancer_arn) / [`set_load_balancer_arn(Option<String>)`](crate::client::fluent_builders::SetSubnets::set_load_balancer_arn): <p>The Amazon Resource Name (ARN) of the load balancer.</p>
    ///   - [`subnets(Vec<String>)`](crate::client::fluent_builders::SetSubnets::subnets) / [`set_subnets(Option<Vec<String>>)`](crate::client::fluent_builders::SetSubnets::set_subnets): <p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.</p>  <p>[Application Load Balancers] You must specify subnets from at least two Availability Zones.</p>  <p>[Application Load Balancers on Outposts] You must specify one Outpost subnet.</p>  <p>[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.</p>  <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones.</p>
    ///   - [`subnet_mappings(Vec<SubnetMapping>)`](crate::client::fluent_builders::SetSubnets::subnet_mappings) / [`set_subnet_mappings(Option<Vec<SubnetMapping>>)`](crate::client::fluent_builders::SetSubnets::set_subnet_mappings): <p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.</p>  <p>[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.</p>  <p>[Application Load Balancers on Outposts] You must specify one Outpost subnet.</p>  <p>[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.</p>  <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.</p>
    ///   - [`ip_address_type(IpAddressType)`](crate::client::fluent_builders::SetSubnets::ip_address_type) / [`set_ip_address_type(Option<IpAddressType>)`](crate::client::fluent_builders::SetSubnets::set_ip_address_type): <p>[Network Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses). You canâ€™t specify <code>dualstack</code> for a load balancer with a UDP or TCP_UDP listener. .</p>
    /// - On success, responds with [`SetSubnetsOutput`](crate::output::SetSubnetsOutput) with field(s):
    ///   - [`availability_zones(Option<Vec<AvailabilityZone>>)`](crate::output::SetSubnetsOutput::availability_zones): <p>Information about the subnets.</p>
    ///   - [`ip_address_type(Option<IpAddressType>)`](crate::output::SetSubnetsOutput::ip_address_type): <p>[Network Load Balancers] The IP address type.</p>
    /// - On failure, responds with [`SdkError<SetSubnetsError>`](crate::error::SetSubnetsError)
    pub fn set_subnets(&self) -> crate::client::fluent_builders::SetSubnets {
        crate::client::fluent_builders::SetSubnets::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
