// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_target_group::_modify_target_group_output::ModifyTargetGroupOutputBuilder;

pub use crate::operation::modify_target_group::_modify_target_group_input::ModifyTargetGroupInputBuilder;

/// Fluent builder constructing a request to `ModifyTargetGroup`.
///
/// <p>Modifies the health checks used when evaluating the health state of the targets in the specified target group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ModifyTargetGroupFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_target_group::builders::ModifyTargetGroupInputBuilder,
}
impl ModifyTargetGroupFluentBuilder {
    /// Creates a new `ModifyTargetGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::modify_target_group::ModifyTargetGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::modify_target_group::ModifyTargetGroupError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::modify_target_group::ModifyTargetGroupOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::modify_target_group::ModifyTargetGroupError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the target group.</p>
    pub fn target_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_group_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target group.</p>
    pub fn set_target_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_target_group_arn(input);
        self
    }
    /// <p>The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.</p>
    pub fn health_check_protocol(mut self, input: crate::types::ProtocolEnum) -> Self {
        self.inner = self.inner.health_check_protocol(input);
        self
    }
    /// <p>The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.</p>
    pub fn set_health_check_protocol(
        mut self,
        input: std::option::Option<crate::types::ProtocolEnum>,
    ) -> Self {
        self.inner = self.inner.set_health_check_protocol(input);
        self
    }
    /// <p>The port the load balancer uses when performing health checks on targets.</p>
    pub fn health_check_port(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.health_check_port(input.into());
        self
    }
    /// <p>The port the load balancer uses when performing health checks on targets.</p>
    pub fn set_health_check_port(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_health_check_port(input);
        self
    }
    /// <p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p>
    /// <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p>
    /// <p>[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.</p>
    pub fn health_check_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.health_check_path(input.into());
        self
    }
    /// <p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p>
    /// <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p>
    /// <p>[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.</p>
    pub fn set_health_check_path(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_health_check_path(input);
        self
    }
    /// <p>Indicates whether health checks are enabled.</p>
    pub fn health_check_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.health_check_enabled(input);
        self
    }
    /// <p>Indicates whether health checks are enabled.</p>
    pub fn set_health_check_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_health_check_enabled(input);
        self
    }
    /// <p>The approximate amount of time, in seconds, between health checks of an individual target.</p>
    pub fn health_check_interval_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.health_check_interval_seconds(input);
        self
    }
    /// <p>The approximate amount of time, in seconds, between health checks of an individual target.</p>
    pub fn set_health_check_interval_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_health_check_interval_seconds(input);
        self
    }
    /// <p>[HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.</p>
    pub fn health_check_timeout_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.health_check_timeout_seconds(input);
        self
    }
    /// <p>[HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.</p>
    pub fn set_health_check_timeout_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_health_check_timeout_seconds(input);
        self
    }
    /// <p>The number of consecutive health checks successes required before considering an unhealthy target healthy.</p>
    pub fn healthy_threshold_count(mut self, input: i32) -> Self {
        self.inner = self.inner.healthy_threshold_count(input);
        self
    }
    /// <p>The number of consecutive health checks successes required before considering an unhealthy target healthy.</p>
    pub fn set_healthy_threshold_count(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_healthy_threshold_count(input);
        self
    }
    /// <p>The number of consecutive health check failures required before considering the target unhealthy.</p>
    pub fn unhealthy_threshold_count(mut self, input: i32) -> Self {
        self.inner = self.inner.unhealthy_threshold_count(input);
        self
    }
    /// <p>The number of consecutive health check failures required before considering the target unhealthy.</p>
    pub fn set_unhealthy_threshold_count(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_unhealthy_threshold_count(input);
        self
    }
    /// <p>[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.</p>
    pub fn matcher(mut self, input: crate::types::Matcher) -> Self {
        self.inner = self.inner.matcher(input);
        self
    }
    /// <p>[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.</p>
    pub fn set_matcher(mut self, input: std::option::Option<crate::types::Matcher>) -> Self {
        self.inner = self.inner.set_matcher(input);
        self
    }
}
