// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_target_group::_modify_target_group_output::ModifyTargetGroupOutputBuilder;

pub use crate::operation::modify_target_group::_modify_target_group_input::ModifyTargetGroupInputBuilder;

impl crate::operation::modify_target_group::builders::ModifyTargetGroupInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_target_group::ModifyTargetGroupOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_target_group::ModifyTargetGroupError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_target_group();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyTargetGroup`.
///
/// <p>Modifies the health checks used when evaluating the health state of the targets in the specified target group.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyTargetGroupFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_target_group::builders::ModifyTargetGroupInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_target_group::ModifyTargetGroupOutput,
        crate::operation::modify_target_group::ModifyTargetGroupError,
    > for ModifyTargetGroupFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_target_group::ModifyTargetGroupOutput,
            crate::operation::modify_target_group::ModifyTargetGroupError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyTargetGroupFluentBuilder {
    /// Creates a new `ModifyTargetGroup`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyTargetGroup as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_target_group::builders::ModifyTargetGroupInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_target_group::ModifyTargetGroupOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_target_group::ModifyTargetGroupError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_target_group::ModifyTargetGroup::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_target_group::ModifyTargetGroup::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_target_group::ModifyTargetGroupOutput,
        crate::operation::modify_target_group::ModifyTargetGroupError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target group.</p>
    pub fn target_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.target_group_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target group.</p>
    pub fn set_target_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_target_group_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target group.</p>
    pub fn get_target_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_target_group_arn()
    }
    /// <p>The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.</p>
    pub fn health_check_protocol(mut self, input: crate::types::ProtocolEnum) -> Self {
        self.inner = self.inner.health_check_protocol(input);
        self
    }
    /// <p>The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.</p>
    pub fn set_health_check_protocol(mut self, input: ::std::option::Option<crate::types::ProtocolEnum>) -> Self {
        self.inner = self.inner.set_health_check_protocol(input);
        self
    }
    /// <p>The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.</p>
    pub fn get_health_check_protocol(&self) -> &::std::option::Option<crate::types::ProtocolEnum> {
        self.inner.get_health_check_protocol()
    }
    /// <p>The port the load balancer uses when performing health checks on targets.</p>
    pub fn health_check_port(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.health_check_port(input.into());
        self
    }
    /// <p>The port the load balancer uses when performing health checks on targets.</p>
    pub fn set_health_check_port(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_health_check_port(input);
        self
    }
    /// <p>The port the load balancer uses when performing health checks on targets.</p>
    pub fn get_health_check_port(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_health_check_port()
    }
    /// <p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p>
    /// <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p>
    /// <p>[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.</p>
    pub fn health_check_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.health_check_path(input.into());
        self
    }
    /// <p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p>
    /// <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p>
    /// <p>[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.</p>
    pub fn set_health_check_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_health_check_path(input);
        self
    }
    /// <p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p>
    /// <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p>
    /// <p>[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.</p>
    pub fn get_health_check_path(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_health_check_path()
    }
    /// <p>Indicates whether health checks are enabled.</p>
    pub fn health_check_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.health_check_enabled(input);
        self
    }
    /// <p>Indicates whether health checks are enabled.</p>
    pub fn set_health_check_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_health_check_enabled(input);
        self
    }
    /// <p>Indicates whether health checks are enabled.</p>
    pub fn get_health_check_enabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_health_check_enabled()
    }
    /// <p>The approximate amount of time, in seconds, between health checks of an individual target.</p>
    pub fn health_check_interval_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.health_check_interval_seconds(input);
        self
    }
    /// <p>The approximate amount of time, in seconds, between health checks of an individual target.</p>
    pub fn set_health_check_interval_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_health_check_interval_seconds(input);
        self
    }
    /// <p>The approximate amount of time, in seconds, between health checks of an individual target.</p>
    pub fn get_health_check_interval_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_health_check_interval_seconds()
    }
    /// <p>[HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.</p>
    pub fn health_check_timeout_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.health_check_timeout_seconds(input);
        self
    }
    /// <p>[HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.</p>
    pub fn set_health_check_timeout_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_health_check_timeout_seconds(input);
        self
    }
    /// <p>[HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.</p>
    pub fn get_health_check_timeout_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_health_check_timeout_seconds()
    }
    /// <p>The number of consecutive health checks successes required before considering an unhealthy target healthy.</p>
    pub fn healthy_threshold_count(mut self, input: i32) -> Self {
        self.inner = self.inner.healthy_threshold_count(input);
        self
    }
    /// <p>The number of consecutive health checks successes required before considering an unhealthy target healthy.</p>
    pub fn set_healthy_threshold_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_healthy_threshold_count(input);
        self
    }
    /// <p>The number of consecutive health checks successes required before considering an unhealthy target healthy.</p>
    pub fn get_healthy_threshold_count(&self) -> &::std::option::Option<i32> {
        self.inner.get_healthy_threshold_count()
    }
    /// <p>The number of consecutive health check failures required before considering the target unhealthy.</p>
    pub fn unhealthy_threshold_count(mut self, input: i32) -> Self {
        self.inner = self.inner.unhealthy_threshold_count(input);
        self
    }
    /// <p>The number of consecutive health check failures required before considering the target unhealthy.</p>
    pub fn set_unhealthy_threshold_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_unhealthy_threshold_count(input);
        self
    }
    /// <p>The number of consecutive health check failures required before considering the target unhealthy.</p>
    pub fn get_unhealthy_threshold_count(&self) -> &::std::option::Option<i32> {
        self.inner.get_unhealthy_threshold_count()
    }
    /// <p>[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.</p>
    pub fn matcher(mut self, input: crate::types::Matcher) -> Self {
        self.inner = self.inner.matcher(input);
        self
    }
    /// <p>[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.</p>
    pub fn set_matcher(mut self, input: ::std::option::Option<crate::types::Matcher>) -> Self {
        self.inner = self.inner.set_matcher(input);
        self
    }
    /// <p>[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.</p>
    pub fn get_matcher(&self) -> &::std::option::Option<crate::types::Matcher> {
        self.inner.get_matcher()
    }
}
