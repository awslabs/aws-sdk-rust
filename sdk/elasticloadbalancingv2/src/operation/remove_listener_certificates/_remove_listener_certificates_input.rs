// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RemoveListenerCertificatesInput {
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    pub listener_arn: ::std::option::Option<::std::string::String>,
    /// <p>The certificate to remove. You can specify one certificate per call. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</p>
    pub certificates: ::std::option::Option<::std::vec::Vec<crate::types::Certificate>>,
}
impl RemoveListenerCertificatesInput {
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    pub fn listener_arn(&self) -> ::std::option::Option<&str> {
        self.listener_arn.as_deref()
    }
    /// <p>The certificate to remove. You can specify one certificate per call. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.certificates.is_none()`.
    pub fn certificates(&self) -> &[crate::types::Certificate] {
        self.certificates.as_deref().unwrap_or_default()
    }
}
impl RemoveListenerCertificatesInput {
    /// Creates a new builder-style object to manufacture [`RemoveListenerCertificatesInput`](crate::operation::remove_listener_certificates::RemoveListenerCertificatesInput).
    pub fn builder() -> crate::operation::remove_listener_certificates::builders::RemoveListenerCertificatesInputBuilder {
        crate::operation::remove_listener_certificates::builders::RemoveListenerCertificatesInputBuilder::default()
    }
}

/// A builder for [`RemoveListenerCertificatesInput`](crate::operation::remove_listener_certificates::RemoveListenerCertificatesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RemoveListenerCertificatesInputBuilder {
    pub(crate) listener_arn: ::std::option::Option<::std::string::String>,
    pub(crate) certificates: ::std::option::Option<::std::vec::Vec<crate::types::Certificate>>,
}
impl RemoveListenerCertificatesInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    /// This field is required.
    pub fn listener_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listener_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    pub fn set_listener_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listener_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    pub fn get_listener_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.listener_arn
    }
    /// Appends an item to `certificates`.
    ///
    /// To override the contents of this collection use [`set_certificates`](Self::set_certificates).
    ///
    /// <p>The certificate to remove. You can specify one certificate per call. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</p>
    pub fn certificates(mut self, input: crate::types::Certificate) -> Self {
        let mut v = self.certificates.unwrap_or_default();
        v.push(input);
        self.certificates = ::std::option::Option::Some(v);
        self
    }
    /// <p>The certificate to remove. You can specify one certificate per call. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</p>
    pub fn set_certificates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Certificate>>) -> Self {
        self.certificates = input;
        self
    }
    /// <p>The certificate to remove. You can specify one certificate per call. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</p>
    pub fn get_certificates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Certificate>> {
        &self.certificates
    }
    /// Consumes the builder and constructs a [`RemoveListenerCertificatesInput`](crate::operation::remove_listener_certificates::RemoveListenerCertificatesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::remove_listener_certificates::RemoveListenerCertificatesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::remove_listener_certificates::RemoveListenerCertificatesInput {
            listener_arn: self.listener_arn,
            certificates: self.certificates,
        })
    }
}
