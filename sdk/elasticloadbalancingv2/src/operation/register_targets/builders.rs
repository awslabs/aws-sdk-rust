// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_targets::_register_targets_output::RegisterTargetsOutputBuilder;

pub use crate::operation::register_targets::_register_targets_input::RegisterTargetsInputBuilder;

/// Fluent builder constructing a request to `RegisterTargets`.
///
/// <p>Registers the specified targets with the specified target group.</p>
/// <p>If the target is an EC2 instance, it must be in the <code>running</code> state when you register it.</p>
/// <p>By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports.</p>
/// <p>With a Network Load Balancer, you cannot register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RegisterTargetsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::register_targets::builders::RegisterTargetsInputBuilder,
}
impl RegisterTargetsFluentBuilder {
    /// Creates a new `RegisterTargets`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::register_targets::RegisterTargets,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::register_targets::RegisterTargetsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::register_targets::RegisterTargetsOutput,
        aws_smithy_http::result::SdkError<crate::operation::register_targets::RegisterTargetsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the target group.</p>
    pub fn target_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_group_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target group.</p>
    pub fn set_target_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_target_group_arn(input);
        self
    }
    /// Appends an item to `Targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>The targets.</p>
    pub fn targets(mut self, input: crate::types::TargetDescription) -> Self {
        self.inner = self.inner.targets(input);
        self
    }
    /// <p>The targets.</p>
    pub fn set_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TargetDescription>>,
    ) -> Self {
        self.inner = self.inner.set_targets(input);
        self
    }
}
