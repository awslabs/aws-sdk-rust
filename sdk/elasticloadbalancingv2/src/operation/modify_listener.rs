// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Orchestration and serialization glue logic for `ModifyListener`.
#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModifyListener;
impl ModifyListener {
    /// Creates a new `ModifyListener`
    pub fn new() -> Self {
        Self
    }
    pub(crate) async fn orchestrate(
        runtime_plugins: &::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
        input: crate::operation::modify_listener::ModifyListenerInput,
    ) -> ::std::result::Result<
        crate::operation::modify_listener::ModifyListenerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_listener::ModifyListenerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let map_err = |err: ::aws_smithy_runtime_api::client::result::SdkError<
            ::aws_smithy_runtime_api::client::interceptors::context::Error,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >| {
            err.map_service_error(|err| {
                err.downcast::<crate::operation::modify_listener::ModifyListenerError>()
                    .expect("correct error type")
            })
        };
        let context = Self::orchestrate_with_stop_point(runtime_plugins, input, ::aws_smithy_runtime::client::orchestrator::StopPoint::None)
            .await
            .map_err(map_err)?;
        let output = context.finalize().map_err(map_err)?;
        ::std::result::Result::Ok(
            output
                .downcast::<crate::operation::modify_listener::ModifyListenerOutput>()
                .expect("correct output type"),
        )
    }

    pub(crate) async fn orchestrate_with_stop_point(
        runtime_plugins: &::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
        input: crate::operation::modify_listener::ModifyListenerInput,
        stop_point: ::aws_smithy_runtime::client::orchestrator::StopPoint,
    ) -> ::std::result::Result<
        ::aws_smithy_runtime_api::client::interceptors::context::InterceptorContext,
        ::aws_smithy_runtime_api::client::result::SdkError<
            ::aws_smithy_runtime_api::client::interceptors::context::Error,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = ::aws_smithy_runtime_api::client::interceptors::context::Input::erase(input);
        use ::tracing::Instrument;
        ::aws_smithy_runtime::client::orchestrator::invoke_with_stop_point(
            "Elastic Load Balancing v2",
            "ModifyListener",
            input,
            runtime_plugins,
            stop_point,
        )
        // Create a parent span for the entire operation. Includes a random, internal-only,
        // seven-digit ID for the operation orchestration so that it can be correlated in the logs.
        .instrument(::tracing::debug_span!(
            "Elastic Load Balancing v2.ModifyListener",
            "rpc.service" = "Elastic Load Balancing v2",
            "rpc.method" = "ModifyListener",
            "sdk_invocation_id" = ::fastrand::u32(1_000_000..10_000_000),
            "rpc.system" = "aws-api",
        ))
        .await
    }

    pub(crate) fn operation_runtime_plugins(
        client_runtime_plugins: ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
        client_config: &crate::config::Config,
        config_override: ::std::option::Option<crate::config::Builder>,
    ) -> ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins {
        let mut runtime_plugins = client_runtime_plugins.with_operation_plugin(Self::new());

        if let ::std::option::Option::Some(config_override) = config_override {
            for plugin in config_override.runtime_plugins.iter().cloned() {
                runtime_plugins = runtime_plugins.with_operation_plugin(plugin);
            }
            runtime_plugins = runtime_plugins.with_operation_plugin(crate::config::ConfigOverrideRuntimePlugin::new(
                config_override,
                client_config.config.clone(),
                &client_config.runtime_components,
            ));
        }
        runtime_plugins
    }
}
impl ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugin for ModifyListener {
    fn config(&self) -> ::std::option::Option<::aws_smithy_types::config_bag::FrozenLayer> {
        let mut cfg = ::aws_smithy_types::config_bag::Layer::new("ModifyListener");

        cfg.store_put(::aws_smithy_runtime_api::client::ser_de::SharedRequestSerializer::new(
            ModifyListenerRequestSerializer,
        ));
        cfg.store_put(::aws_smithy_runtime_api::client::ser_de::SharedResponseDeserializer::new(
            ModifyListenerResponseDeserializer,
        ));

        cfg.store_put(::aws_smithy_runtime_api::client::auth::AuthSchemeOptionResolverParams::new(
            crate::config::auth::Params::builder()
                .operation_name("ModifyListener")
                .build()
                .expect("required fields set"),
        ));

        cfg.store_put(::aws_smithy_runtime_api::client::orchestrator::Metadata::new(
            "ModifyListener",
            "Elastic Load Balancing v2",
        ));
        let mut signing_options = ::aws_runtime::auth::SigningOptions::default();
        signing_options.double_uri_encode = true;
        signing_options.content_sha256_header = false;
        signing_options.normalize_uri_path = true;
        signing_options.payload_override = None;

        cfg.store_put(::aws_runtime::auth::SigV4OperationSigningConfig {
            signing_options,
            ..::std::default::Default::default()
        });

        ::std::option::Option::Some(cfg.freeze())
    }

    fn runtime_components(
        &self,
        _: &::aws_smithy_runtime_api::client::runtime_components::RuntimeComponentsBuilder,
    ) -> ::std::borrow::Cow<'_, ::aws_smithy_runtime_api::client::runtime_components::RuntimeComponentsBuilder> {
        #[allow(unused_mut)]
        let mut rcb = ::aws_smithy_runtime_api::client::runtime_components::RuntimeComponentsBuilder::new("ModifyListener")
            .with_interceptor(::aws_smithy_runtime::client::stalled_stream_protection::StalledStreamProtectionInterceptor::default())
            .with_interceptor(ModifyListenerEndpointParamsInterceptor)
            .with_retry_classifier(::aws_smithy_runtime::client::retries::classifiers::TransientErrorClassifier::<
                crate::operation::modify_listener::ModifyListenerError,
            >::new())
            .with_retry_classifier(::aws_smithy_runtime::client::retries::classifiers::ModeledAsRetryableClassifier::<
                crate::operation::modify_listener::ModifyListenerError,
            >::new())
            .with_retry_classifier(::aws_runtime::retries::classifiers::AwsErrorCodeClassifier::<
                crate::operation::modify_listener::ModifyListenerError,
            >::new());

        ::std::borrow::Cow::Owned(rcb)
    }
}

#[derive(Debug)]
struct ModifyListenerResponseDeserializer;
impl ::aws_smithy_runtime_api::client::ser_de::DeserializeResponse for ModifyListenerResponseDeserializer {
    fn deserialize_nonstreaming(
        &self,
        response: &::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
    ) -> ::aws_smithy_runtime_api::client::interceptors::context::OutputOrError {
        let (success, status) = (response.status().is_success(), response.status().as_u16());
        let headers = response.headers();
        let body = response.body().bytes().expect("body loaded");
        #[allow(unused_mut)]
        let mut force_error = false;
        ::tracing::debug!(request_id = ?::aws_types::request_id::RequestId::request_id(response));
        let parse_result = if !success && status != 200 || force_error {
            crate::protocol_serde::shape_modify_listener::de_modify_listener_http_error(status, headers, body)
        } else {
            crate::protocol_serde::shape_modify_listener::de_modify_listener_http_response(status, headers, body)
        };
        crate::protocol_serde::type_erase_result(parse_result)
    }
}
#[derive(Debug)]
struct ModifyListenerRequestSerializer;
impl ::aws_smithy_runtime_api::client::ser_de::SerializeRequest for ModifyListenerRequestSerializer {
    #[allow(unused_mut, clippy::let_and_return, clippy::needless_borrow, clippy::useless_conversion)]
    fn serialize_input(
        &self,
        input: ::aws_smithy_runtime_api::client::interceptors::context::Input,
        _cfg: &mut ::aws_smithy_types::config_bag::ConfigBag,
    ) -> ::std::result::Result<::aws_smithy_runtime_api::client::orchestrator::HttpRequest, ::aws_smithy_runtime_api::box_error::BoxError> {
        let input = input
            .downcast::<crate::operation::modify_listener::ModifyListenerInput>()
            .expect("correct type");
        let _header_serialization_settings = _cfg
            .load::<crate::serialization_settings::HeaderSerializationSettings>()
            .cloned()
            .unwrap_or_default();
        let mut request_builder = {
            #[allow(clippy::uninlined_format_args)]
            fn uri_base(
                _input: &crate::operation::modify_listener::ModifyListenerInput,
                output: &mut ::std::string::String,
            ) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::BuildError> {
                use ::std::fmt::Write as _;
                ::std::write!(output, "/").expect("formatting should succeed");
                ::std::result::Result::Ok(())
            }
            #[allow(clippy::unnecessary_wraps)]
            fn update_http_builder(
                input: &crate::operation::modify_listener::ModifyListenerInput,
                builder: ::http::request::Builder,
            ) -> ::std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
                let mut uri = ::std::string::String::new();
                uri_base(input, &mut uri)?;
                ::std::result::Result::Ok(builder.method("POST").uri(uri))
            }
            let mut builder = update_http_builder(&input, ::http::request::Builder::new())?;
            builder = _header_serialization_settings.set_default_header(builder, ::http::header::CONTENT_TYPE, "application/x-www-form-urlencoded");
            builder
        };
        let body = ::aws_smithy_types::body::SdkBody::from(
            crate::protocol_serde::shape_modify_listener_input::ser_modify_listener_input_input_input(&input)?,
        );
        if let Some(content_length) = body.content_length() {
            let content_length = content_length.to_string();
            request_builder = _header_serialization_settings.set_default_header(request_builder, ::http::header::CONTENT_LENGTH, &content_length);
        }
        ::std::result::Result::Ok(request_builder.body(body).expect("valid request").try_into().unwrap())
    }
}
#[derive(Debug)]
struct ModifyListenerEndpointParamsInterceptor;

impl ::aws_smithy_runtime_api::client::interceptors::Intercept for ModifyListenerEndpointParamsInterceptor {
    fn name(&self) -> &'static str {
        "ModifyListenerEndpointParamsInterceptor"
    }

    fn read_before_execution(
        &self,
        context: &::aws_smithy_runtime_api::client::interceptors::context::BeforeSerializationInterceptorContextRef<
            '_,
            ::aws_smithy_runtime_api::client::interceptors::context::Input,
            ::aws_smithy_runtime_api::client::interceptors::context::Output,
            ::aws_smithy_runtime_api::client::interceptors::context::Error,
        >,
        cfg: &mut ::aws_smithy_types::config_bag::ConfigBag,
    ) -> ::std::result::Result<(), ::aws_smithy_runtime_api::box_error::BoxError> {
        let _input = context
            .input()
            .downcast_ref::<ModifyListenerInput>()
            .ok_or("failed to downcast to ModifyListenerInput")?;

        let params = crate::config::endpoint::Params::builder()
            .set_region(cfg.load::<::aws_types::region::Region>().map(|r| r.as_ref().to_owned()))
            .set_use_dual_stack(cfg.load::<::aws_types::endpoint_config::UseDualStack>().map(|ty| ty.0))
            .set_use_fips(cfg.load::<::aws_types::endpoint_config::UseFips>().map(|ty| ty.0))
            .set_endpoint(cfg.load::<::aws_types::endpoint_config::EndpointUrl>().map(|ty| ty.0.clone()))
            .build()
            .map_err(|err| {
                ::aws_smithy_runtime_api::client::interceptors::error::ContextAttachedError::new("endpoint params could not be built", err)
            })?;
        cfg.interceptor_state()
            .store_put(::aws_smithy_runtime_api::client::endpoint::EndpointResolverParams::new(params));
        ::std::result::Result::Ok(())
    }
}

// The get_* functions below are generated from JMESPath expressions in the
// operationContextParams trait. They target the operation's input shape.

/// Error type for the `ModifyListenerError` operation.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum ModifyListenerError {
    /// <p>The specified ALPN policy is not supported.</p>
    AlpnPolicyNotSupportedException(crate::types::error::AlpnPolicyNotSupportedException),
    /// <p>The specified certificate does not exist.</p>
    CertificateNotFoundException(crate::types::error::CertificateNotFoundException),
    /// <p>A listener with the specified port already exists.</p>
    DuplicateListenerException(crate::types::error::DuplicateListenerException),
    /// <p>The specified configuration is not valid with this protocol.</p>
    IncompatibleProtocolsException(crate::types::error::IncompatibleProtocolsException),
    /// <p>The requested configuration is not valid.</p>
    InvalidConfigurationRequestException(crate::types::error::InvalidConfigurationRequestException),
    /// <p>The requested action is not valid.</p>
    InvalidLoadBalancerActionException(crate::types::error::InvalidLoadBalancerActionException),
    /// <p>The specified listener does not exist.</p>
    ListenerNotFoundException(crate::types::error::ListenerNotFoundException),
    /// <p>The specified SSL policy does not exist.</p>
    SslPolicyNotFoundException(crate::types::error::SslPolicyNotFoundException),
    /// <p>You've reached the limit on the number of load balancers per target group.</p>
    TargetGroupAssociationLimitException(crate::types::error::TargetGroupAssociationLimitException),
    /// <p>The specified target group does not exist.</p>
    TargetGroupNotFoundException(crate::types::error::TargetGroupNotFoundException),
    /// <p>You've reached the limit on the number of actions per rule.</p>
    TooManyActionsException(crate::types::error::TooManyActionsException),
    /// <p>You've reached the limit on the number of certificates per load balancer.</p>
    TooManyCertificatesException(crate::types::error::TooManyCertificatesException),
    /// <p>You've reached the limit on the number of listeners per load balancer.</p>
    TooManyListenersException(crate::types::error::TooManyListenersException),
    /// <p>You've reached the limit on the number of times a target can be registered with a load balancer.</p>
    TooManyRegistrationsForTargetIdException(crate::types::error::TooManyRegistrationsForTargetIdException),
    /// <p>You've reached the limit on the number of targets.</p>
    TooManyTargetsException(crate::types::error::TooManyTargetsException),
    /// <p>You've reached the limit on the number of unique target groups per load balancer across all listeners. If a target group is used by multiple actions for a load balancer, it is counted as only one use.</p>
    TooManyUniqueTargetGroupsPerLoadBalancerException(crate::types::error::TooManyUniqueTargetGroupsPerLoadBalancerException),
    /// <p>The specified trust store does not exist.</p>
    TrustStoreNotFoundException(crate::types::error::TrustStoreNotFoundException),
    /// <p>The specified trust store is not active.</p>
    TrustStoreNotReadyException(crate::types::error::TrustStoreNotReadyException),
    /// <p>The specified protocol is not supported.</p>
    UnsupportedProtocolException(crate::types::error::UnsupportedProtocolException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-ModifyListenerError) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ModifyListenerError {
    /// Creates the `ModifyListenerError::Unhandled` variant from any error type.
    pub fn unhandled(
        err: impl ::std::convert::Into<::std::boxed::Box<dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static>>,
    ) -> Self {
        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: err.into(),
            meta: ::std::default::Default::default(),
        })
    }

    /// Creates the `ModifyListenerError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: err.clone().into(),
            meta: err,
        })
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::AlpnPolicyNotSupportedException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::CertificateNotFoundException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::DuplicateListenerException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::IncompatibleProtocolsException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::InvalidConfigurationRequestException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::InvalidLoadBalancerActionException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::ListenerNotFoundException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::SslPolicyNotFoundException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::TargetGroupAssociationLimitException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::TargetGroupNotFoundException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::TooManyActionsException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::TooManyCertificatesException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::TooManyListenersException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::TooManyRegistrationsForTargetIdException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::TooManyTargetsException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::TooManyUniqueTargetGroupsPerLoadBalancerException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::TrustStoreNotFoundException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::TrustStoreNotReadyException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::UnsupportedProtocolException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::Unhandled(e) => &e.meta,
        }
    }
    /// Returns `true` if the error kind is `ModifyListenerError::AlpnPolicyNotSupportedException`.
    pub fn is_alpn_policy_not_supported_exception(&self) -> bool {
        matches!(self, Self::AlpnPolicyNotSupportedException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::CertificateNotFoundException`.
    pub fn is_certificate_not_found_exception(&self) -> bool {
        matches!(self, Self::CertificateNotFoundException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::DuplicateListenerException`.
    pub fn is_duplicate_listener_exception(&self) -> bool {
        matches!(self, Self::DuplicateListenerException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::IncompatibleProtocolsException`.
    pub fn is_incompatible_protocols_exception(&self) -> bool {
        matches!(self, Self::IncompatibleProtocolsException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::InvalidConfigurationRequestException`.
    pub fn is_invalid_configuration_request_exception(&self) -> bool {
        matches!(self, Self::InvalidConfigurationRequestException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::InvalidLoadBalancerActionException`.
    pub fn is_invalid_load_balancer_action_exception(&self) -> bool {
        matches!(self, Self::InvalidLoadBalancerActionException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::ListenerNotFoundException`.
    pub fn is_listener_not_found_exception(&self) -> bool {
        matches!(self, Self::ListenerNotFoundException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::SslPolicyNotFoundException`.
    pub fn is_ssl_policy_not_found_exception(&self) -> bool {
        matches!(self, Self::SslPolicyNotFoundException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::TargetGroupAssociationLimitException`.
    pub fn is_target_group_association_limit_exception(&self) -> bool {
        matches!(self, Self::TargetGroupAssociationLimitException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::TargetGroupNotFoundException`.
    pub fn is_target_group_not_found_exception(&self) -> bool {
        matches!(self, Self::TargetGroupNotFoundException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::TooManyActionsException`.
    pub fn is_too_many_actions_exception(&self) -> bool {
        matches!(self, Self::TooManyActionsException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::TooManyCertificatesException`.
    pub fn is_too_many_certificates_exception(&self) -> bool {
        matches!(self, Self::TooManyCertificatesException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::TooManyListenersException`.
    pub fn is_too_many_listeners_exception(&self) -> bool {
        matches!(self, Self::TooManyListenersException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::TooManyRegistrationsForTargetIdException`.
    pub fn is_too_many_registrations_for_target_id_exception(&self) -> bool {
        matches!(self, Self::TooManyRegistrationsForTargetIdException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::TooManyTargetsException`.
    pub fn is_too_many_targets_exception(&self) -> bool {
        matches!(self, Self::TooManyTargetsException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::TooManyUniqueTargetGroupsPerLoadBalancerException`.
    pub fn is_too_many_unique_target_groups_per_load_balancer_exception(&self) -> bool {
        matches!(self, Self::TooManyUniqueTargetGroupsPerLoadBalancerException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::TrustStoreNotFoundException`.
    pub fn is_trust_store_not_found_exception(&self) -> bool {
        matches!(self, Self::TrustStoreNotFoundException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::TrustStoreNotReadyException`.
    pub fn is_trust_store_not_ready_exception(&self) -> bool {
        matches!(self, Self::TrustStoreNotReadyException(_))
    }
    /// Returns `true` if the error kind is `ModifyListenerError::UnsupportedProtocolException`.
    pub fn is_unsupported_protocol_exception(&self) -> bool {
        matches!(self, Self::UnsupportedProtocolException(_))
    }
}
impl ::std::error::Error for ModifyListenerError {
    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Self::AlpnPolicyNotSupportedException(_inner) => ::std::option::Option::Some(_inner),
            Self::CertificateNotFoundException(_inner) => ::std::option::Option::Some(_inner),
            Self::DuplicateListenerException(_inner) => ::std::option::Option::Some(_inner),
            Self::IncompatibleProtocolsException(_inner) => ::std::option::Option::Some(_inner),
            Self::InvalidConfigurationRequestException(_inner) => ::std::option::Option::Some(_inner),
            Self::InvalidLoadBalancerActionException(_inner) => ::std::option::Option::Some(_inner),
            Self::ListenerNotFoundException(_inner) => ::std::option::Option::Some(_inner),
            Self::SslPolicyNotFoundException(_inner) => ::std::option::Option::Some(_inner),
            Self::TargetGroupAssociationLimitException(_inner) => ::std::option::Option::Some(_inner),
            Self::TargetGroupNotFoundException(_inner) => ::std::option::Option::Some(_inner),
            Self::TooManyActionsException(_inner) => ::std::option::Option::Some(_inner),
            Self::TooManyCertificatesException(_inner) => ::std::option::Option::Some(_inner),
            Self::TooManyListenersException(_inner) => ::std::option::Option::Some(_inner),
            Self::TooManyRegistrationsForTargetIdException(_inner) => ::std::option::Option::Some(_inner),
            Self::TooManyTargetsException(_inner) => ::std::option::Option::Some(_inner),
            Self::TooManyUniqueTargetGroupsPerLoadBalancerException(_inner) => ::std::option::Option::Some(_inner),
            Self::TrustStoreNotFoundException(_inner) => ::std::option::Option::Some(_inner),
            Self::TrustStoreNotReadyException(_inner) => ::std::option::Option::Some(_inner),
            Self::UnsupportedProtocolException(_inner) => ::std::option::Option::Some(_inner),
            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
        }
    }
}
impl ::std::fmt::Display for ModifyListenerError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::AlpnPolicyNotSupportedException(_inner) => _inner.fmt(f),
            Self::CertificateNotFoundException(_inner) => _inner.fmt(f),
            Self::DuplicateListenerException(_inner) => _inner.fmt(f),
            Self::IncompatibleProtocolsException(_inner) => _inner.fmt(f),
            Self::InvalidConfigurationRequestException(_inner) => _inner.fmt(f),
            Self::InvalidLoadBalancerActionException(_inner) => _inner.fmt(f),
            Self::ListenerNotFoundException(_inner) => _inner.fmt(f),
            Self::SslPolicyNotFoundException(_inner) => _inner.fmt(f),
            Self::TargetGroupAssociationLimitException(_inner) => _inner.fmt(f),
            Self::TargetGroupNotFoundException(_inner) => _inner.fmt(f),
            Self::TooManyActionsException(_inner) => _inner.fmt(f),
            Self::TooManyCertificatesException(_inner) => _inner.fmt(f),
            Self::TooManyListenersException(_inner) => _inner.fmt(f),
            Self::TooManyRegistrationsForTargetIdException(_inner) => _inner.fmt(f),
            Self::TooManyTargetsException(_inner) => _inner.fmt(f),
            Self::TooManyUniqueTargetGroupsPerLoadBalancerException(_inner) => _inner.fmt(f),
            Self::TrustStoreNotFoundException(_inner) => _inner.fmt(f),
            Self::TrustStoreNotReadyException(_inner) => _inner.fmt(f),
            Self::UnsupportedProtocolException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl ::aws_smithy_types::retry::ProvideErrorKind for ModifyListenerError {
    fn code(&self) -> ::std::option::Option<&str> {
        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
        ::std::option::Option::None
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for ModifyListenerError {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::AlpnPolicyNotSupportedException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::CertificateNotFoundException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::DuplicateListenerException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::IncompatibleProtocolsException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::InvalidConfigurationRequestException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::InvalidLoadBalancerActionException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::ListenerNotFoundException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::SslPolicyNotFoundException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::TargetGroupAssociationLimitException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::TargetGroupNotFoundException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::TooManyActionsException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::TooManyCertificatesException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::TooManyListenersException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::TooManyRegistrationsForTargetIdException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::TooManyTargetsException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::TooManyUniqueTargetGroupsPerLoadBalancerException(_inner) => {
                ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TrustStoreNotFoundException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::TrustStoreNotReadyException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::UnsupportedProtocolException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::Unhandled(_inner) => &_inner.meta,
        }
    }
}
impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for ModifyListenerError {
    fn create_unhandled_error(
        source: ::std::boxed::Box<dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static>,
        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source,
            meta: meta.unwrap_or_default(),
        })
    }
}
impl ::aws_types::request_id::RequestId for crate::operation::modify_listener::ModifyListenerError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}

pub use crate::operation::modify_listener::_modify_listener_output::ModifyListenerOutput;

pub use crate::operation::modify_listener::_modify_listener_input::ModifyListenerInput;

mod _modify_listener_input;

mod _modify_listener_output;

/// Builders
pub mod builders;
