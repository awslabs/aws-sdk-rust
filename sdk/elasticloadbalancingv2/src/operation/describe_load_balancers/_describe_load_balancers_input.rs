// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLoadBalancersInput {
    /// <p>The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.</p>
    #[doc(hidden)]
    pub load_balancer_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The names of the load balancers.</p>
    #[doc(hidden)]
    pub names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return with this call.</p>
    #[doc(hidden)]
    pub page_size: std::option::Option<i32>,
}
impl DescribeLoadBalancersInput {
    /// <p>The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.</p>
    pub fn load_balancer_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.load_balancer_arns.as_deref()
    }
    /// <p>The names of the load balancers.</p>
    pub fn names(&self) -> std::option::Option<&[std::string::String]> {
        self.names.as_deref()
    }
    /// <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>The maximum number of results to return with this call.</p>
    pub fn page_size(&self) -> std::option::Option<i32> {
        self.page_size
    }
}
impl DescribeLoadBalancersInput {
    /// Creates a new builder-style object to manufacture [`DescribeLoadBalancersInput`](crate::operation::describe_load_balancers::DescribeLoadBalancersInput).
    pub fn builder(
    ) -> crate::operation::describe_load_balancers::builders::DescribeLoadBalancersInputBuilder
    {
        crate::operation::describe_load_balancers::builders::DescribeLoadBalancersInputBuilder::default()
    }
}

/// A builder for [`DescribeLoadBalancersInput`](crate::operation::describe_load_balancers::DescribeLoadBalancersInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeLoadBalancersInputBuilder {
    pub(crate) load_balancer_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) page_size: std::option::Option<i32>,
}
impl DescribeLoadBalancersInputBuilder {
    /// Appends an item to `load_balancer_arns`.
    ///
    /// To override the contents of this collection use [`set_load_balancer_arns`](Self::set_load_balancer_arns).
    ///
    /// <p>The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.</p>
    pub fn load_balancer_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.load_balancer_arns.unwrap_or_default();
        v.push(input.into());
        self.load_balancer_arns = Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.</p>
    pub fn set_load_balancer_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.load_balancer_arns = input;
        self
    }
    /// Appends an item to `names`.
    ///
    /// To override the contents of this collection use [`set_names`](Self::set_names).
    ///
    /// <p>The names of the load balancers.</p>
    pub fn names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.names.unwrap_or_default();
        v.push(input.into());
        self.names = Some(v);
        self
    }
    /// <p>The names of the load balancers.</p>
    pub fn set_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.names = input;
        self
    }
    /// <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>The maximum number of results to return with this call.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = Some(input);
        self
    }
    /// <p>The maximum number of results to return with this call.</p>
    pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeLoadBalancersInput`](crate::operation::describe_load_balancers::DescribeLoadBalancersInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_load_balancers::DescribeLoadBalancersInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_load_balancers::DescribeLoadBalancersInput {
                load_balancer_arns: self.load_balancer_arns,
                names: self.names,
                marker: self.marker,
                page_size: self.page_size,
            },
        )
    }
}
