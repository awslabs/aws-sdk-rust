// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"LoadBalancers[].State.Code","expected":"active","comparator":"allStringEquals"}}
pub(crate) fn match_describe_load_balancers_c74fe109e496dabfe(
    _result: ::std::result::Result<
        &crate::operation::describe_load_balancers::DescribeLoadBalancersOutput,
        &crate::operation::describe_load_balancers::DescribeLoadBalancersError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_load_balancers::DescribeLoadBalancersOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::LoadBalancerStateEnum>> {
        let _fld_1 = _output.load_balancers.as_ref()?;
        let _prj_4 = _fld_1
            .iter()
            .flat_map(|v| {
                fn map(v: &crate::types::LoadBalancer) -> ::std::option::Option<&crate::types::LoadBalancerStateEnum> {
                    let _fld_2 = v.state.as_ref()?;
                    let _fld_3 = _fld_2.code.as_ref()?;
                    ::std::option::Option::Some(_fld_3)
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_4)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "active";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"LoadBalancers[].State.Code","expected":"provisioning","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_load_balancers_6a8c1dde616c542f3(
    _result: ::std::result::Result<
        &crate::operation::describe_load_balancers::DescribeLoadBalancersOutput,
        &crate::operation::describe_load_balancers::DescribeLoadBalancersError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_load_balancers::DescribeLoadBalancersOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::LoadBalancerStateEnum>> {
        let _fld_1 = _output.load_balancers.as_ref()?;
        let _prj_4 = _fld_1
            .iter()
            .flat_map(|v| {
                fn map(v: &crate::types::LoadBalancer) -> ::std::option::Option<&crate::types::LoadBalancerStateEnum> {
                    let _fld_2 = v.state.as_ref()?;
                    let _fld_3 = _fld_2.code.as_ref()?;
                    ::std::option::Option::Some(_fld_3)
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_4)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "provisioning";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"LoadBalancerNotFound"}
pub(crate) fn match_describe_load_balancers_5d8e90ea6f1c3cb8d(
    _result: ::std::result::Result<
        &crate::operation::describe_load_balancers::DescribeLoadBalancersOutput,
        &crate::operation::describe_load_balancers::DescribeLoadBalancersError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "LoadBalancerNotFound";
        }
    }
    false
}

/// Matcher union: {"success":true}
pub(crate) fn match_describe_load_balancers_c955e57777ec0d736(
    _result: ::std::result::Result<
        &crate::operation::describe_load_balancers::DescribeLoadBalancersOutput,
        &crate::operation::describe_load_balancers::DescribeLoadBalancersError,
    >,
) -> bool {
    _result.is_ok()
}

/// Matcher union: {"errorType":"InvalidTarget"}
pub(crate) fn match_describe_target_health_9cbab81003bdedc13(
    _result: ::std::result::Result<
        &crate::operation::describe_target_health::DescribeTargetHealthOutput,
        &crate::operation::describe_target_health::DescribeTargetHealthError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "InvalidTarget";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"TargetHealthDescriptions[].TargetHealth.State","expected":"unused","comparator":"allStringEquals"}}
pub(crate) fn match_describe_target_health_d0e4fe503cd5fcfff(
    _result: ::std::result::Result<
        &crate::operation::describe_target_health::DescribeTargetHealthOutput,
        &crate::operation::describe_target_health::DescribeTargetHealthError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_target_health::DescribeTargetHealthOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::TargetHealthStateEnum>> {
        let _fld_1 = _output.target_health_descriptions.as_ref()?;
        let _prj_4 = _fld_1
            .iter()
            .flat_map(|v| {
                fn map(v: &crate::types::TargetHealthDescription) -> ::std::option::Option<&crate::types::TargetHealthStateEnum> {
                    let _fld_2 = v.target_health.as_ref()?;
                    let _fld_3 = _fld_2.state.as_ref()?;
                    ::std::option::Option::Some(_fld_3)
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_4)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "unused";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"TargetHealthDescriptions[].TargetHealth.State","expected":"healthy","comparator":"allStringEquals"}}
pub(crate) fn match_describe_target_health_f8f2fa471982b9aa9(
    _result: ::std::result::Result<
        &crate::operation::describe_target_health::DescribeTargetHealthOutput,
        &crate::operation::describe_target_health::DescribeTargetHealthError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_target_health::DescribeTargetHealthOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::TargetHealthStateEnum>> {
        let _fld_1 = _output.target_health_descriptions.as_ref()?;
        let _prj_4 = _fld_1
            .iter()
            .flat_map(|v| {
                fn map(v: &crate::types::TargetHealthDescription) -> ::std::option::Option<&crate::types::TargetHealthStateEnum> {
                    let _fld_2 = v.target_health.as_ref()?;
                    let _fld_3 = _fld_2.state.as_ref()?;
                    ::std::option::Option::Some(_fld_3)
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_4)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "healthy";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"InvalidInstance"}
pub(crate) fn match_describe_target_health_de1bc5e5e6dbcfa7e(
    _result: ::std::result::Result<
        &crate::operation::describe_target_health::DescribeTargetHealthOutput,
        &crate::operation::describe_target_health::DescribeTargetHealthError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "InvalidInstance";
        }
    }
    false
}
