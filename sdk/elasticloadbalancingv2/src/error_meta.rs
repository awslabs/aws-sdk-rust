// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The specified ALPN policy is not supported.</p>
    AlpnPolicyNotSupportedException(crate::error::AlpnPolicyNotSupportedException),
    /// <p>The specified allocation ID does not exist.</p>
    AllocationIdNotFoundException(crate::error::AllocationIdNotFoundException),
    /// <p>The specified Availability Zone is not supported.</p>
    AvailabilityZoneNotSupportedException(crate::error::AvailabilityZoneNotSupportedException),
    /// <p>The specified certificate does not exist.</p>
    CertificateNotFoundException(crate::error::CertificateNotFoundException),
    /// <p>A listener with the specified port already exists.</p>
    DuplicateListenerException(crate::error::DuplicateListenerException),
    /// <p>A load balancer with the specified name already exists.</p>
    DuplicateLoadBalancerNameException(crate::error::DuplicateLoadBalancerNameException),
    /// <p>A tag key was specified more than once.</p>
    DuplicateTagKeysException(crate::error::DuplicateTagKeysException),
    /// <p>A target group with the specified name already exists.</p>
    DuplicateTargetGroupNameException(crate::error::DuplicateTargetGroupNameException),
    /// <p>The health of the specified targets could not be retrieved due to an internal error.</p>
    HealthUnavailableException(crate::error::HealthUnavailableException),
    /// <p>The specified configuration is not valid with this protocol.</p>
    IncompatibleProtocolsException(crate::error::IncompatibleProtocolsException),
    /// <p>The requested configuration is not valid.</p>
    InvalidConfigurationRequestException(crate::error::InvalidConfigurationRequestException),
    /// <p>The requested action is not valid.</p>
    InvalidLoadBalancerActionException(crate::error::InvalidLoadBalancerActionException),
    /// <p>The requested scheme is not valid.</p>
    InvalidSchemeException(crate::error::InvalidSchemeException),
    /// <p>The specified security group does not exist.</p>
    InvalidSecurityGroupException(crate::error::InvalidSecurityGroupException),
    /// <p>The specified subnet is out of available addresses.</p>
    InvalidSubnetException(crate::error::InvalidSubnetException),
    /// <p>The specified target does not exist, is not in the same VPC as the target group, or has an unsupported instance type.</p>
    InvalidTargetException(crate::error::InvalidTargetException),
    /// <p>The specified listener does not exist.</p>
    ListenerNotFoundException(crate::error::ListenerNotFoundException),
    /// <p>The specified load balancer does not exist.</p>
    LoadBalancerNotFoundException(crate::error::LoadBalancerNotFoundException),
    /// <p>This operation is not allowed.</p>
    OperationNotPermittedException(crate::error::OperationNotPermittedException),
    /// <p>The specified priority is in use.</p>
    PriorityInUseException(crate::error::PriorityInUseException),
    /// <p>A specified resource is in use.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>The specified rule does not exist.</p>
    RuleNotFoundException(crate::error::RuleNotFoundException),
    /// <p>The specified SSL policy does not exist.</p>
    SslPolicyNotFoundException(crate::error::SslPolicyNotFoundException),
    /// <p>The specified subnet does not exist.</p>
    SubnetNotFoundException(crate::error::SubnetNotFoundException),
    /// <p>You've reached the limit on the number of load balancers per target group.</p>
    TargetGroupAssociationLimitException(crate::error::TargetGroupAssociationLimitException),
    /// <p>The specified target group does not exist.</p>
    TargetGroupNotFoundException(crate::error::TargetGroupNotFoundException),
    /// <p>You've reached the limit on the number of actions per rule.</p>
    TooManyActionsException(crate::error::TooManyActionsException),
    /// <p>You've reached the limit on the number of certificates per load balancer.</p>
    TooManyCertificatesException(crate::error::TooManyCertificatesException),
    /// <p>You've reached the limit on the number of listeners per load balancer.</p>
    TooManyListenersException(crate::error::TooManyListenersException),
    /// <p>You've reached the limit on the number of load balancers for your Amazon Web Services account.</p>
    TooManyLoadBalancersException(crate::error::TooManyLoadBalancersException),
    /// <p>You've reached the limit on the number of times a target can be registered with a load balancer.</p>
    TooManyRegistrationsForTargetIdException(
        crate::error::TooManyRegistrationsForTargetIdException,
    ),
    /// <p>You've reached the limit on the number of rules per load balancer.</p>
    TooManyRulesException(crate::error::TooManyRulesException),
    /// <p>You've reached the limit on the number of tags per load balancer.</p>
    TooManyTagsException(crate::error::TooManyTagsException),
    /// <p>You've reached the limit on the number of target groups for your Amazon Web Services account.</p>
    TooManyTargetGroupsException(crate::error::TooManyTargetGroupsException),
    /// <p>You've reached the limit on the number of targets.</p>
    TooManyTargetsException(crate::error::TooManyTargetsException),
    /// <p>You've reached the limit on the number of unique target groups per load balancer across all listeners. If a target group is used by multiple actions for a load balancer, it is counted as only one use.</p>
    TooManyUniqueTargetGroupsPerLoadBalancerException(
        crate::error::TooManyUniqueTargetGroupsPerLoadBalancerException,
    ),
    /// <p>The specified protocol is not supported.</p>
    UnsupportedProtocolException(crate::error::UnsupportedProtocolException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AlpnPolicyNotSupportedException(inner) => inner.fmt(f),
            Error::AllocationIdNotFoundException(inner) => inner.fmt(f),
            Error::AvailabilityZoneNotSupportedException(inner) => inner.fmt(f),
            Error::CertificateNotFoundException(inner) => inner.fmt(f),
            Error::DuplicateListenerException(inner) => inner.fmt(f),
            Error::DuplicateLoadBalancerNameException(inner) => inner.fmt(f),
            Error::DuplicateTagKeysException(inner) => inner.fmt(f),
            Error::DuplicateTargetGroupNameException(inner) => inner.fmt(f),
            Error::HealthUnavailableException(inner) => inner.fmt(f),
            Error::IncompatibleProtocolsException(inner) => inner.fmt(f),
            Error::InvalidConfigurationRequestException(inner) => inner.fmt(f),
            Error::InvalidLoadBalancerActionException(inner) => inner.fmt(f),
            Error::InvalidSchemeException(inner) => inner.fmt(f),
            Error::InvalidSecurityGroupException(inner) => inner.fmt(f),
            Error::InvalidSubnetException(inner) => inner.fmt(f),
            Error::InvalidTargetException(inner) => inner.fmt(f),
            Error::ListenerNotFoundException(inner) => inner.fmt(f),
            Error::LoadBalancerNotFoundException(inner) => inner.fmt(f),
            Error::OperationNotPermittedException(inner) => inner.fmt(f),
            Error::PriorityInUseException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::RuleNotFoundException(inner) => inner.fmt(f),
            Error::SslPolicyNotFoundException(inner) => inner.fmt(f),
            Error::SubnetNotFoundException(inner) => inner.fmt(f),
            Error::TargetGroupAssociationLimitException(inner) => inner.fmt(f),
            Error::TargetGroupNotFoundException(inner) => inner.fmt(f),
            Error::TooManyActionsException(inner) => inner.fmt(f),
            Error::TooManyCertificatesException(inner) => inner.fmt(f),
            Error::TooManyListenersException(inner) => inner.fmt(f),
            Error::TooManyLoadBalancersException(inner) => inner.fmt(f),
            Error::TooManyRegistrationsForTargetIdException(inner) => inner.fmt(f),
            Error::TooManyRulesException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::TooManyTargetGroupsException(inner) => inner.fmt(f),
            Error::TooManyTargetsException(inner) => inner.fmt(f),
            Error::TooManyUniqueTargetGroupsPerLoadBalancerException(inner) => inner.fmt(f),
            Error::UnsupportedProtocolException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddListenerCertificatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddListenerCertificatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddListenerCertificatesError> for Error {
    fn from(err: crate::error::AddListenerCertificatesError) -> Self {
        match err {
            crate::error::AddListenerCertificatesError::CertificateNotFoundException(inner) => {
                Error::CertificateNotFoundException(inner)
            }
            crate::error::AddListenerCertificatesError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::AddListenerCertificatesError::TooManyCertificatesException(inner) => {
                Error::TooManyCertificatesException(inner)
            }
            crate::error::AddListenerCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsError> for Error {
    fn from(err: crate::error::AddTagsError) -> Self {
        match err {
            crate::error::AddTagsError::DuplicateTagKeysException(inner) => {
                Error::DuplicateTagKeysException(inner)
            }
            crate::error::AddTagsError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::AddTagsError::LoadBalancerNotFoundException(inner) => {
                Error::LoadBalancerNotFoundException(inner)
            }
            crate::error::AddTagsError::RuleNotFoundException(inner) => {
                Error::RuleNotFoundException(inner)
            }
            crate::error::AddTagsError::TargetGroupNotFoundException(inner) => {
                Error::TargetGroupNotFoundException(inner)
            }
            crate::error::AddTagsError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::AddTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateListenerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateListenerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateListenerError> for Error {
    fn from(err: crate::error::CreateListenerError) -> Self {
        match err {
            crate::error::CreateListenerError::AlpnPolicyNotSupportedException(inner) => Error::AlpnPolicyNotSupportedException(inner),
            crate::error::CreateListenerError::CertificateNotFoundException(inner) => Error::CertificateNotFoundException(inner),
            crate::error::CreateListenerError::DuplicateListenerException(inner) => Error::DuplicateListenerException(inner),
            crate::error::CreateListenerError::IncompatibleProtocolsException(inner) => Error::IncompatibleProtocolsException(inner),
            crate::error::CreateListenerError::InvalidConfigurationRequestException(inner) => Error::InvalidConfigurationRequestException(inner),
            crate::error::CreateListenerError::InvalidLoadBalancerActionException(inner) => Error::InvalidLoadBalancerActionException(inner),
            crate::error::CreateListenerError::LoadBalancerNotFoundException(inner) => Error::LoadBalancerNotFoundException(inner),
            crate::error::CreateListenerError::SslPolicyNotFoundException(inner) => Error::SslPolicyNotFoundException(inner),
            crate::error::CreateListenerError::TargetGroupAssociationLimitException(inner) => Error::TargetGroupAssociationLimitException(inner),
            crate::error::CreateListenerError::TargetGroupNotFoundException(inner) => Error::TargetGroupNotFoundException(inner),
            crate::error::CreateListenerError::TooManyActionsException(inner) => Error::TooManyActionsException(inner),
            crate::error::CreateListenerError::TooManyCertificatesException(inner) => Error::TooManyCertificatesException(inner),
            crate::error::CreateListenerError::TooManyListenersException(inner) => Error::TooManyListenersException(inner),
            crate::error::CreateListenerError::TooManyRegistrationsForTargetIdException(inner) => Error::TooManyRegistrationsForTargetIdException(inner),
            crate::error::CreateListenerError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::error::CreateListenerError::TooManyTargetsException(inner) => Error::TooManyTargetsException(inner),
            crate::error::CreateListenerError::TooManyUniqueTargetGroupsPerLoadBalancerException(inner) => Error::TooManyUniqueTargetGroupsPerLoadBalancerException(inner),
            crate::error::CreateListenerError::UnsupportedProtocolException(inner) => Error::UnsupportedProtocolException(inner),
            crate::error::CreateListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLoadBalancerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateLoadBalancerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLoadBalancerError> for Error {
    fn from(err: crate::error::CreateLoadBalancerError) -> Self {
        match err {
            crate::error::CreateLoadBalancerError::AllocationIdNotFoundException(inner) => {
                Error::AllocationIdNotFoundException(inner)
            }
            crate::error::CreateLoadBalancerError::AvailabilityZoneNotSupportedException(inner) => {
                Error::AvailabilityZoneNotSupportedException(inner)
            }
            crate::error::CreateLoadBalancerError::DuplicateLoadBalancerNameException(inner) => {
                Error::DuplicateLoadBalancerNameException(inner)
            }
            crate::error::CreateLoadBalancerError::DuplicateTagKeysException(inner) => {
                Error::DuplicateTagKeysException(inner)
            }
            crate::error::CreateLoadBalancerError::InvalidConfigurationRequestException(inner) => {
                Error::InvalidConfigurationRequestException(inner)
            }
            crate::error::CreateLoadBalancerError::InvalidSchemeException(inner) => {
                Error::InvalidSchemeException(inner)
            }
            crate::error::CreateLoadBalancerError::InvalidSecurityGroupException(inner) => {
                Error::InvalidSecurityGroupException(inner)
            }
            crate::error::CreateLoadBalancerError::InvalidSubnetException(inner) => {
                Error::InvalidSubnetException(inner)
            }
            crate::error::CreateLoadBalancerError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::CreateLoadBalancerError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::CreateLoadBalancerError::SubnetNotFoundException(inner) => {
                Error::SubnetNotFoundException(inner)
            }
            crate::error::CreateLoadBalancerError::TooManyLoadBalancersException(inner) => {
                Error::TooManyLoadBalancersException(inner)
            }
            crate::error::CreateLoadBalancerError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateLoadBalancerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRuleError> for Error {
    fn from(err: crate::error::CreateRuleError) -> Self {
        match err {
            crate::error::CreateRuleError::IncompatibleProtocolsException(inner) => {
                Error::IncompatibleProtocolsException(inner)
            }
            crate::error::CreateRuleError::InvalidConfigurationRequestException(inner) => {
                Error::InvalidConfigurationRequestException(inner)
            }
            crate::error::CreateRuleError::InvalidLoadBalancerActionException(inner) => {
                Error::InvalidLoadBalancerActionException(inner)
            }
            crate::error::CreateRuleError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::CreateRuleError::PriorityInUseException(inner) => {
                Error::PriorityInUseException(inner)
            }
            crate::error::CreateRuleError::TargetGroupAssociationLimitException(inner) => {
                Error::TargetGroupAssociationLimitException(inner)
            }
            crate::error::CreateRuleError::TargetGroupNotFoundException(inner) => {
                Error::TargetGroupNotFoundException(inner)
            }
            crate::error::CreateRuleError::TooManyActionsException(inner) => {
                Error::TooManyActionsException(inner)
            }
            crate::error::CreateRuleError::TooManyRegistrationsForTargetIdException(inner) => {
                Error::TooManyRegistrationsForTargetIdException(inner)
            }
            crate::error::CreateRuleError::TooManyRulesException(inner) => {
                Error::TooManyRulesException(inner)
            }
            crate::error::CreateRuleError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateRuleError::TooManyTargetGroupsException(inner) => {
                Error::TooManyTargetGroupsException(inner)
            }
            crate::error::CreateRuleError::TooManyTargetsException(inner) => {
                Error::TooManyTargetsException(inner)
            }
            crate::error::CreateRuleError::TooManyUniqueTargetGroupsPerLoadBalancerException(
                inner,
            ) => Error::TooManyUniqueTargetGroupsPerLoadBalancerException(inner),
            crate::error::CreateRuleError::UnsupportedProtocolException(inner) => {
                Error::UnsupportedProtocolException(inner)
            }
            crate::error::CreateRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTargetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateTargetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTargetGroupError> for Error {
    fn from(err: crate::error::CreateTargetGroupError) -> Self {
        match err {
            crate::error::CreateTargetGroupError::DuplicateTargetGroupNameException(inner) => {
                Error::DuplicateTargetGroupNameException(inner)
            }
            crate::error::CreateTargetGroupError::InvalidConfigurationRequestException(inner) => {
                Error::InvalidConfigurationRequestException(inner)
            }
            crate::error::CreateTargetGroupError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateTargetGroupError::TooManyTargetGroupsException(inner) => {
                Error::TooManyTargetGroupsException(inner)
            }
            crate::error::CreateTargetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteListenerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteListenerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteListenerError> for Error {
    fn from(err: crate::error::DeleteListenerError) -> Self {
        match err {
            crate::error::DeleteListenerError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::DeleteListenerError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLoadBalancerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteLoadBalancerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLoadBalancerError> for Error {
    fn from(err: crate::error::DeleteLoadBalancerError) -> Self {
        match err {
            crate::error::DeleteLoadBalancerError::LoadBalancerNotFoundException(inner) => {
                Error::LoadBalancerNotFoundException(inner)
            }
            crate::error::DeleteLoadBalancerError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::DeleteLoadBalancerError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteLoadBalancerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRuleError> for Error {
    fn from(err: crate::error::DeleteRuleError) -> Self {
        match err {
            crate::error::DeleteRuleError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::DeleteRuleError::RuleNotFoundException(inner) => {
                Error::RuleNotFoundException(inner)
            }
            crate::error::DeleteRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTargetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteTargetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTargetGroupError> for Error {
    fn from(err: crate::error::DeleteTargetGroupError) -> Self {
        match err {
            crate::error::DeleteTargetGroupError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteTargetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterTargetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterTargetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterTargetsError> for Error {
    fn from(err: crate::error::DeregisterTargetsError) -> Self {
        match err {
            crate::error::DeregisterTargetsError::InvalidTargetException(inner) => {
                Error::InvalidTargetException(inner)
            }
            crate::error::DeregisterTargetsError::TargetGroupNotFoundException(inner) => {
                Error::TargetGroupNotFoundException(inner)
            }
            crate::error::DeregisterTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAccountLimitsError> for Error {
    fn from(err: crate::error::DescribeAccountLimitsError) -> Self {
        match err {
            crate::error::DescribeAccountLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeListenerCertificatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeListenerCertificatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeListenerCertificatesError> for Error {
    fn from(err: crate::error::DescribeListenerCertificatesError) -> Self {
        match err {
            crate::error::DescribeListenerCertificatesError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::DescribeListenerCertificatesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeListenersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeListenersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeListenersError> for Error {
    fn from(err: crate::error::DescribeListenersError) -> Self {
        match err {
            crate::error::DescribeListenersError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::DescribeListenersError::LoadBalancerNotFoundException(inner) => {
                Error::LoadBalancerNotFoundException(inner)
            }
            crate::error::DescribeListenersError::UnsupportedProtocolException(inner) => {
                Error::UnsupportedProtocolException(inner)
            }
            crate::error::DescribeListenersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeLoadBalancerAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeLoadBalancerAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeLoadBalancerAttributesError> for Error {
    fn from(err: crate::error::DescribeLoadBalancerAttributesError) -> Self {
        match err {
            crate::error::DescribeLoadBalancerAttributesError::LoadBalancerNotFoundException(
                inner,
            ) => Error::LoadBalancerNotFoundException(inner),
            crate::error::DescribeLoadBalancerAttributesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeLoadBalancersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeLoadBalancersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeLoadBalancersError> for Error {
    fn from(err: crate::error::DescribeLoadBalancersError) -> Self {
        match err {
            crate::error::DescribeLoadBalancersError::LoadBalancerNotFoundException(inner) => {
                Error::LoadBalancerNotFoundException(inner)
            }
            crate::error::DescribeLoadBalancersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeRulesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRulesError> for Error {
    fn from(err: crate::error::DescribeRulesError) -> Self {
        match err {
            crate::error::DescribeRulesError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::DescribeRulesError::RuleNotFoundException(inner) => {
                Error::RuleNotFoundException(inner)
            }
            crate::error::DescribeRulesError::UnsupportedProtocolException(inner) => {
                Error::UnsupportedProtocolException(inner)
            }
            crate::error::DescribeRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSSLPoliciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSSLPoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSSLPoliciesError> for Error {
    fn from(err: crate::error::DescribeSSLPoliciesError) -> Self {
        match err {
            crate::error::DescribeSSLPoliciesError::SslPolicyNotFoundException(inner) => {
                Error::SslPolicyNotFoundException(inner)
            }
            crate::error::DescribeSSLPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTagsError> for Error {
    fn from(err: crate::error::DescribeTagsError) -> Self {
        match err {
            crate::error::DescribeTagsError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::DescribeTagsError::LoadBalancerNotFoundException(inner) => {
                Error::LoadBalancerNotFoundException(inner)
            }
            crate::error::DescribeTagsError::RuleNotFoundException(inner) => {
                Error::RuleNotFoundException(inner)
            }
            crate::error::DescribeTagsError::TargetGroupNotFoundException(inner) => {
                Error::TargetGroupNotFoundException(inner)
            }
            crate::error::DescribeTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTargetGroupAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTargetGroupAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTargetGroupAttributesError> for Error {
    fn from(err: crate::error::DescribeTargetGroupAttributesError) -> Self {
        match err {
            crate::error::DescribeTargetGroupAttributesError::TargetGroupNotFoundException(
                inner,
            ) => Error::TargetGroupNotFoundException(inner),
            crate::error::DescribeTargetGroupAttributesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTargetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTargetGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTargetGroupsError> for Error {
    fn from(err: crate::error::DescribeTargetGroupsError) -> Self {
        match err {
            crate::error::DescribeTargetGroupsError::LoadBalancerNotFoundException(inner) => {
                Error::LoadBalancerNotFoundException(inner)
            }
            crate::error::DescribeTargetGroupsError::TargetGroupNotFoundException(inner) => {
                Error::TargetGroupNotFoundException(inner)
            }
            crate::error::DescribeTargetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTargetHealthError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTargetHealthError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTargetHealthError> for Error {
    fn from(err: crate::error::DescribeTargetHealthError) -> Self {
        match err {
            crate::error::DescribeTargetHealthError::HealthUnavailableException(inner) => {
                Error::HealthUnavailableException(inner)
            }
            crate::error::DescribeTargetHealthError::InvalidTargetException(inner) => {
                Error::InvalidTargetException(inner)
            }
            crate::error::DescribeTargetHealthError::TargetGroupNotFoundException(inner) => {
                Error::TargetGroupNotFoundException(inner)
            }
            crate::error::DescribeTargetHealthError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyListenerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyListenerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyListenerError> for Error {
    fn from(err: crate::error::ModifyListenerError) -> Self {
        match err {
            crate::error::ModifyListenerError::AlpnPolicyNotSupportedException(inner) => Error::AlpnPolicyNotSupportedException(inner),
            crate::error::ModifyListenerError::CertificateNotFoundException(inner) => Error::CertificateNotFoundException(inner),
            crate::error::ModifyListenerError::DuplicateListenerException(inner) => Error::DuplicateListenerException(inner),
            crate::error::ModifyListenerError::IncompatibleProtocolsException(inner) => Error::IncompatibleProtocolsException(inner),
            crate::error::ModifyListenerError::InvalidConfigurationRequestException(inner) => Error::InvalidConfigurationRequestException(inner),
            crate::error::ModifyListenerError::InvalidLoadBalancerActionException(inner) => Error::InvalidLoadBalancerActionException(inner),
            crate::error::ModifyListenerError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::error::ModifyListenerError::SslPolicyNotFoundException(inner) => Error::SslPolicyNotFoundException(inner),
            crate::error::ModifyListenerError::TargetGroupAssociationLimitException(inner) => Error::TargetGroupAssociationLimitException(inner),
            crate::error::ModifyListenerError::TargetGroupNotFoundException(inner) => Error::TargetGroupNotFoundException(inner),
            crate::error::ModifyListenerError::TooManyActionsException(inner) => Error::TooManyActionsException(inner),
            crate::error::ModifyListenerError::TooManyCertificatesException(inner) => Error::TooManyCertificatesException(inner),
            crate::error::ModifyListenerError::TooManyListenersException(inner) => Error::TooManyListenersException(inner),
            crate::error::ModifyListenerError::TooManyRegistrationsForTargetIdException(inner) => Error::TooManyRegistrationsForTargetIdException(inner),
            crate::error::ModifyListenerError::TooManyTargetsException(inner) => Error::TooManyTargetsException(inner),
            crate::error::ModifyListenerError::TooManyUniqueTargetGroupsPerLoadBalancerException(inner) => Error::TooManyUniqueTargetGroupsPerLoadBalancerException(inner),
            crate::error::ModifyListenerError::UnsupportedProtocolException(inner) => Error::UnsupportedProtocolException(inner),
            crate::error::ModifyListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyLoadBalancerAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyLoadBalancerAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyLoadBalancerAttributesError> for Error {
    fn from(err: crate::error::ModifyLoadBalancerAttributesError) -> Self {
        match err {
            crate::error::ModifyLoadBalancerAttributesError::InvalidConfigurationRequestException(inner) => Error::InvalidConfigurationRequestException(inner),
            crate::error::ModifyLoadBalancerAttributesError::LoadBalancerNotFoundException(inner) => Error::LoadBalancerNotFoundException(inner),
            crate::error::ModifyLoadBalancerAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyRuleError> for Error {
    fn from(err: crate::error::ModifyRuleError) -> Self {
        match err {
            crate::error::ModifyRuleError::IncompatibleProtocolsException(inner) => {
                Error::IncompatibleProtocolsException(inner)
            }
            crate::error::ModifyRuleError::InvalidLoadBalancerActionException(inner) => {
                Error::InvalidLoadBalancerActionException(inner)
            }
            crate::error::ModifyRuleError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ModifyRuleError::RuleNotFoundException(inner) => {
                Error::RuleNotFoundException(inner)
            }
            crate::error::ModifyRuleError::TargetGroupAssociationLimitException(inner) => {
                Error::TargetGroupAssociationLimitException(inner)
            }
            crate::error::ModifyRuleError::TargetGroupNotFoundException(inner) => {
                Error::TargetGroupNotFoundException(inner)
            }
            crate::error::ModifyRuleError::TooManyActionsException(inner) => {
                Error::TooManyActionsException(inner)
            }
            crate::error::ModifyRuleError::TooManyRegistrationsForTargetIdException(inner) => {
                Error::TooManyRegistrationsForTargetIdException(inner)
            }
            crate::error::ModifyRuleError::TooManyTargetsException(inner) => {
                Error::TooManyTargetsException(inner)
            }
            crate::error::ModifyRuleError::TooManyUniqueTargetGroupsPerLoadBalancerException(
                inner,
            ) => Error::TooManyUniqueTargetGroupsPerLoadBalancerException(inner),
            crate::error::ModifyRuleError::UnsupportedProtocolException(inner) => {
                Error::UnsupportedProtocolException(inner)
            }
            crate::error::ModifyRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyTargetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyTargetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyTargetGroupError> for Error {
    fn from(err: crate::error::ModifyTargetGroupError) -> Self {
        match err {
            crate::error::ModifyTargetGroupError::InvalidConfigurationRequestException(inner) => {
                Error::InvalidConfigurationRequestException(inner)
            }
            crate::error::ModifyTargetGroupError::TargetGroupNotFoundException(inner) => {
                Error::TargetGroupNotFoundException(inner)
            }
            crate::error::ModifyTargetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyTargetGroupAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyTargetGroupAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyTargetGroupAttributesError> for Error {
    fn from(err: crate::error::ModifyTargetGroupAttributesError) -> Self {
        match err {
            crate::error::ModifyTargetGroupAttributesError::InvalidConfigurationRequestException(inner) => Error::InvalidConfigurationRequestException(inner),
            crate::error::ModifyTargetGroupAttributesError::TargetGroupNotFoundException(inner) => Error::TargetGroupNotFoundException(inner),
            crate::error::ModifyTargetGroupAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterTargetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RegisterTargetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterTargetsError> for Error {
    fn from(err: crate::error::RegisterTargetsError) -> Self {
        match err {
            crate::error::RegisterTargetsError::InvalidTargetException(inner) => {
                Error::InvalidTargetException(inner)
            }
            crate::error::RegisterTargetsError::TargetGroupNotFoundException(inner) => {
                Error::TargetGroupNotFoundException(inner)
            }
            crate::error::RegisterTargetsError::TooManyRegistrationsForTargetIdException(inner) => {
                Error::TooManyRegistrationsForTargetIdException(inner)
            }
            crate::error::RegisterTargetsError::TooManyTargetsException(inner) => {
                Error::TooManyTargetsException(inner)
            }
            crate::error::RegisterTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveListenerCertificatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveListenerCertificatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveListenerCertificatesError> for Error {
    fn from(err: crate::error::RemoveListenerCertificatesError) -> Self {
        match err {
            crate::error::RemoveListenerCertificatesError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::RemoveListenerCertificatesError::OperationNotPermittedException(
                inner,
            ) => Error::OperationNotPermittedException(inner),
            crate::error::RemoveListenerCertificatesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsError> for Error {
    fn from(err: crate::error::RemoveTagsError) -> Self {
        match err {
            crate::error::RemoveTagsError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::RemoveTagsError::LoadBalancerNotFoundException(inner) => {
                Error::LoadBalancerNotFoundException(inner)
            }
            crate::error::RemoveTagsError::RuleNotFoundException(inner) => {
                Error::RuleNotFoundException(inner)
            }
            crate::error::RemoveTagsError::TargetGroupNotFoundException(inner) => {
                Error::TargetGroupNotFoundException(inner)
            }
            crate::error::RemoveTagsError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::RemoveTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetIpAddressTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetIpAddressTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetIpAddressTypeError> for Error {
    fn from(err: crate::error::SetIpAddressTypeError) -> Self {
        match err {
            crate::error::SetIpAddressTypeError::InvalidConfigurationRequestException(inner) => {
                Error::InvalidConfigurationRequestException(inner)
            }
            crate::error::SetIpAddressTypeError::InvalidSubnetException(inner) => {
                Error::InvalidSubnetException(inner)
            }
            crate::error::SetIpAddressTypeError::LoadBalancerNotFoundException(inner) => {
                Error::LoadBalancerNotFoundException(inner)
            }
            crate::error::SetIpAddressTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetRulePrioritiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetRulePrioritiesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetRulePrioritiesError> for Error {
    fn from(err: crate::error::SetRulePrioritiesError) -> Self {
        match err {
            crate::error::SetRulePrioritiesError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::SetRulePrioritiesError::PriorityInUseException(inner) => {
                Error::PriorityInUseException(inner)
            }
            crate::error::SetRulePrioritiesError::RuleNotFoundException(inner) => {
                Error::RuleNotFoundException(inner)
            }
            crate::error::SetRulePrioritiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetSecurityGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetSecurityGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetSecurityGroupsError> for Error {
    fn from(err: crate::error::SetSecurityGroupsError) -> Self {
        match err {
            crate::error::SetSecurityGroupsError::InvalidConfigurationRequestException(inner) => {
                Error::InvalidConfigurationRequestException(inner)
            }
            crate::error::SetSecurityGroupsError::InvalidSecurityGroupException(inner) => {
                Error::InvalidSecurityGroupException(inner)
            }
            crate::error::SetSecurityGroupsError::LoadBalancerNotFoundException(inner) => {
                Error::LoadBalancerNotFoundException(inner)
            }
            crate::error::SetSecurityGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetSubnetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SetSubnetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetSubnetsError> for Error {
    fn from(err: crate::error::SetSubnetsError) -> Self {
        match err {
            crate::error::SetSubnetsError::AllocationIdNotFoundException(inner) => {
                Error::AllocationIdNotFoundException(inner)
            }
            crate::error::SetSubnetsError::AvailabilityZoneNotSupportedException(inner) => {
                Error::AvailabilityZoneNotSupportedException(inner)
            }
            crate::error::SetSubnetsError::InvalidConfigurationRequestException(inner) => {
                Error::InvalidConfigurationRequestException(inner)
            }
            crate::error::SetSubnetsError::InvalidSubnetException(inner) => {
                Error::InvalidSubnetException(inner)
            }
            crate::error::SetSubnetsError::LoadBalancerNotFoundException(inner) => {
                Error::LoadBalancerNotFoundException(inner)
            }
            crate::error::SetSubnetsError::SubnetNotFoundException(inner) => {
                Error::SubnetNotFoundException(inner)
            }
            crate::error::SetSubnetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AlpnPolicyNotSupportedException(e) => e.request_id(),
            Self::AllocationIdNotFoundException(e) => e.request_id(),
            Self::AvailabilityZoneNotSupportedException(e) => e.request_id(),
            Self::CertificateNotFoundException(e) => e.request_id(),
            Self::DuplicateListenerException(e) => e.request_id(),
            Self::DuplicateLoadBalancerNameException(e) => e.request_id(),
            Self::DuplicateTagKeysException(e) => e.request_id(),
            Self::DuplicateTargetGroupNameException(e) => e.request_id(),
            Self::HealthUnavailableException(e) => e.request_id(),
            Self::IncompatibleProtocolsException(e) => e.request_id(),
            Self::InvalidConfigurationRequestException(e) => e.request_id(),
            Self::InvalidLoadBalancerActionException(e) => e.request_id(),
            Self::InvalidSchemeException(e) => e.request_id(),
            Self::InvalidSecurityGroupException(e) => e.request_id(),
            Self::InvalidSubnetException(e) => e.request_id(),
            Self::InvalidTargetException(e) => e.request_id(),
            Self::ListenerNotFoundException(e) => e.request_id(),
            Self::LoadBalancerNotFoundException(e) => e.request_id(),
            Self::OperationNotPermittedException(e) => e.request_id(),
            Self::PriorityInUseException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::RuleNotFoundException(e) => e.request_id(),
            Self::SslPolicyNotFoundException(e) => e.request_id(),
            Self::SubnetNotFoundException(e) => e.request_id(),
            Self::TargetGroupAssociationLimitException(e) => e.request_id(),
            Self::TargetGroupNotFoundException(e) => e.request_id(),
            Self::TooManyActionsException(e) => e.request_id(),
            Self::TooManyCertificatesException(e) => e.request_id(),
            Self::TooManyListenersException(e) => e.request_id(),
            Self::TooManyLoadBalancersException(e) => e.request_id(),
            Self::TooManyRegistrationsForTargetIdException(e) => e.request_id(),
            Self::TooManyRulesException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::TooManyTargetGroupsException(e) => e.request_id(),
            Self::TooManyTargetsException(e) => e.request_id(),
            Self::TooManyUniqueTargetGroupsPerLoadBalancerException(e) => e.request_id(),
            Self::UnsupportedProtocolException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
