// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The codes to use when checking for a successful response from a target. If the protocol version is gRPC, these are gRPC codes. Otherwise, these are HTTP codes. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Matcher {
    /// <p>For Application Load Balancers, you can specify values between 200 and 499, with the default value being 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").</p>
    /// <p>For Network Load Balancers, you can specify values between 200 and 599, with the default value being 200-399. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").</p>
    /// <p>For Gateway Load Balancers, this must be "200–399".</p>
    /// <p>Note that when using shorthand syntax, some values such as commas need to be escaped.</p>
    #[doc(hidden)]
    pub http_code: std::option::Option<std::string::String>,
    /// <p>You can specify values between 0 and 99. You can specify multiple values (for example, "0,1") or a range of values (for example, "0-5"). The default value is 12.</p>
    #[doc(hidden)]
    pub grpc_code: std::option::Option<std::string::String>,
}
impl Matcher {
    /// <p>For Application Load Balancers, you can specify values between 200 and 499, with the default value being 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").</p>
    /// <p>For Network Load Balancers, you can specify values between 200 and 599, with the default value being 200-399. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").</p>
    /// <p>For Gateway Load Balancers, this must be "200–399".</p>
    /// <p>Note that when using shorthand syntax, some values such as commas need to be escaped.</p>
    pub fn http_code(&self) -> std::option::Option<&str> {
        self.http_code.as_deref()
    }
    /// <p>You can specify values between 0 and 99. You can specify multiple values (for example, "0,1") or a range of values (for example, "0-5"). The default value is 12.</p>
    pub fn grpc_code(&self) -> std::option::Option<&str> {
        self.grpc_code.as_deref()
    }
}
impl Matcher {
    /// Creates a new builder-style object to manufacture [`Matcher`](crate::types::Matcher).
    pub fn builder() -> crate::types::builders::MatcherBuilder {
        crate::types::builders::MatcherBuilder::default()
    }
}

/// A builder for [`Matcher`](crate::types::Matcher).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MatcherBuilder {
    pub(crate) http_code: std::option::Option<std::string::String>,
    pub(crate) grpc_code: std::option::Option<std::string::String>,
}
impl MatcherBuilder {
    /// <p>For Application Load Balancers, you can specify values between 200 and 499, with the default value being 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").</p>
    /// <p>For Network Load Balancers, you can specify values between 200 and 599, with the default value being 200-399. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").</p>
    /// <p>For Gateway Load Balancers, this must be "200–399".</p>
    /// <p>Note that when using shorthand syntax, some values such as commas need to be escaped.</p>
    pub fn http_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.http_code = Some(input.into());
        self
    }
    /// <p>For Application Load Balancers, you can specify values between 200 and 499, with the default value being 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").</p>
    /// <p>For Network Load Balancers, you can specify values between 200 and 599, with the default value being 200-399. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").</p>
    /// <p>For Gateway Load Balancers, this must be "200–399".</p>
    /// <p>Note that when using shorthand syntax, some values such as commas need to be escaped.</p>
    pub fn set_http_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.http_code = input;
        self
    }
    /// <p>You can specify values between 0 and 99. You can specify multiple values (for example, "0,1") or a range of values (for example, "0-5"). The default value is 12.</p>
    pub fn grpc_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.grpc_code = Some(input.into());
        self
    }
    /// <p>You can specify values between 0 and 99. You can specify multiple values (for example, "0,1") or a range of values (for example, "0-5"). The default value is 12.</p>
    pub fn set_grpc_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.grpc_code = input;
        self
    }
    /// Consumes the builder and constructs a [`Matcher`](crate::types::Matcher).
    pub fn build(self) -> crate::types::Matcher {
        crate::types::Matcher {
            http_code: self.http_code,
            grpc_code: self.grpc_code,
        }
    }
}
