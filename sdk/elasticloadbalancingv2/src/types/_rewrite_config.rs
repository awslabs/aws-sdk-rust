// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a rewrite transform. This transform matches a pattern and replaces it with the specified string.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RewriteConfig {
    /// <p>The regular expression to match in the input string. The maximum length of the string is 1,024 characters.</p>
    pub regex: ::std::option::Option<::std::string::String>,
    /// <p>The replacement string to use when rewriting the matched input. The maximum length of the string is 1,024 characters. You can specify capture groups in the regular expression (for example, $1 and $2).</p>
    pub replace: ::std::option::Option<::std::string::String>,
}
impl RewriteConfig {
    /// <p>The regular expression to match in the input string. The maximum length of the string is 1,024 characters.</p>
    pub fn regex(&self) -> ::std::option::Option<&str> {
        self.regex.as_deref()
    }
    /// <p>The replacement string to use when rewriting the matched input. The maximum length of the string is 1,024 characters. You can specify capture groups in the regular expression (for example, $1 and $2).</p>
    pub fn replace(&self) -> ::std::option::Option<&str> {
        self.replace.as_deref()
    }
}
impl RewriteConfig {
    /// Creates a new builder-style object to manufacture [`RewriteConfig`](crate::types::RewriteConfig).
    pub fn builder() -> crate::types::builders::RewriteConfigBuilder {
        crate::types::builders::RewriteConfigBuilder::default()
    }
}

/// A builder for [`RewriteConfig`](crate::types::RewriteConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RewriteConfigBuilder {
    pub(crate) regex: ::std::option::Option<::std::string::String>,
    pub(crate) replace: ::std::option::Option<::std::string::String>,
}
impl RewriteConfigBuilder {
    /// <p>The regular expression to match in the input string. The maximum length of the string is 1,024 characters.</p>
    /// This field is required.
    pub fn regex(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.regex = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The regular expression to match in the input string. The maximum length of the string is 1,024 characters.</p>
    pub fn set_regex(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.regex = input;
        self
    }
    /// <p>The regular expression to match in the input string. The maximum length of the string is 1,024 characters.</p>
    pub fn get_regex(&self) -> &::std::option::Option<::std::string::String> {
        &self.regex
    }
    /// <p>The replacement string to use when rewriting the matched input. The maximum length of the string is 1,024 characters. You can specify capture groups in the regular expression (for example, $1 and $2).</p>
    /// This field is required.
    pub fn replace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The replacement string to use when rewriting the matched input. The maximum length of the string is 1,024 characters. You can specify capture groups in the regular expression (for example, $1 and $2).</p>
    pub fn set_replace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replace = input;
        self
    }
    /// <p>The replacement string to use when rewriting the matched input. The maximum length of the string is 1,024 characters. You can specify capture groups in the regular expression (for example, $1 and $2).</p>
    pub fn get_replace(&self) -> &::std::option::Option<::std::string::String> {
        &self.replace
    }
    /// Consumes the builder and constructs a [`RewriteConfig`](crate::types::RewriteConfig).
    pub fn build(self) -> crate::types::RewriteConfig {
        crate::types::RewriteConfig {
            regex: self.regex,
            replace: self.replace,
        }
    }
}
