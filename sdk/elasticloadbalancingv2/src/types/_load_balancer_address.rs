// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a static IP address for a load balancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoadBalancerAddress {
    /// <p>The static IP address.</p>
    #[doc(hidden)]
    pub ip_address: std::option::Option<std::string::String>,
    /// <p>[Network Load Balancers] The allocation ID of the Elastic IP address for an internal-facing load balancer.</p>
    #[doc(hidden)]
    pub allocation_id: std::option::Option<std::string::String>,
    /// <p>[Network Load Balancers] The private IPv4 address for an internal load balancer.</p>
    #[doc(hidden)]
    pub private_i_pv4_address: std::option::Option<std::string::String>,
    /// <p>[Network Load Balancers] The IPv6 address.</p>
    #[doc(hidden)]
    pub i_pv6_address: std::option::Option<std::string::String>,
}
impl LoadBalancerAddress {
    /// <p>The static IP address.</p>
    pub fn ip_address(&self) -> std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>[Network Load Balancers] The allocation ID of the Elastic IP address for an internal-facing load balancer.</p>
    pub fn allocation_id(&self) -> std::option::Option<&str> {
        self.allocation_id.as_deref()
    }
    /// <p>[Network Load Balancers] The private IPv4 address for an internal load balancer.</p>
    pub fn private_i_pv4_address(&self) -> std::option::Option<&str> {
        self.private_i_pv4_address.as_deref()
    }
    /// <p>[Network Load Balancers] The IPv6 address.</p>
    pub fn i_pv6_address(&self) -> std::option::Option<&str> {
        self.i_pv6_address.as_deref()
    }
}
impl LoadBalancerAddress {
    /// Creates a new builder-style object to manufacture [`LoadBalancerAddress`](crate::types::LoadBalancerAddress).
    pub fn builder() -> crate::types::builders::LoadBalancerAddressBuilder {
        crate::types::builders::LoadBalancerAddressBuilder::default()
    }
}

/// A builder for [`LoadBalancerAddress`](crate::types::LoadBalancerAddress).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoadBalancerAddressBuilder {
    pub(crate) ip_address: std::option::Option<std::string::String>,
    pub(crate) allocation_id: std::option::Option<std::string::String>,
    pub(crate) private_i_pv4_address: std::option::Option<std::string::String>,
    pub(crate) i_pv6_address: std::option::Option<std::string::String>,
}
impl LoadBalancerAddressBuilder {
    /// <p>The static IP address.</p>
    pub fn ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip_address = Some(input.into());
        self
    }
    /// <p>The static IP address.</p>
    pub fn set_ip_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>[Network Load Balancers] The allocation ID of the Elastic IP address for an internal-facing load balancer.</p>
    pub fn allocation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.allocation_id = Some(input.into());
        self
    }
    /// <p>[Network Load Balancers] The allocation ID of the Elastic IP address for an internal-facing load balancer.</p>
    pub fn set_allocation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.allocation_id = input;
        self
    }
    /// <p>[Network Load Balancers] The private IPv4 address for an internal load balancer.</p>
    pub fn private_i_pv4_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_i_pv4_address = Some(input.into());
        self
    }
    /// <p>[Network Load Balancers] The private IPv4 address for an internal load balancer.</p>
    pub fn set_private_i_pv4_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.private_i_pv4_address = input;
        self
    }
    /// <p>[Network Load Balancers] The IPv6 address.</p>
    pub fn i_pv6_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.i_pv6_address = Some(input.into());
        self
    }
    /// <p>[Network Load Balancers] The IPv6 address.</p>
    pub fn set_i_pv6_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.i_pv6_address = input;
        self
    }
    /// Consumes the builder and constructs a [`LoadBalancerAddress`](crate::types::LoadBalancerAddress).
    pub fn build(self) -> crate::types::LoadBalancerAddress {
        crate::types::LoadBalancerAddress {
            ip_address: self.ip_address,
            allocation_id: self.allocation_id,
            private_i_pv4_address: self.private_i_pv4_address,
            i_pv6_address: self.i_pv6_address,
        }
    }
}
