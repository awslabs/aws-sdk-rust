// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `TargetHealthReasonEnum`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let targethealthreasonenum = unimplemented!();
/// match targethealthreasonenum {
///     TargetHealthReasonEnum::InitialHealthChecking => { /* ... */ },
///     TargetHealthReasonEnum::InternalError => { /* ... */ },
///     TargetHealthReasonEnum::RegistrationInProgress => { /* ... */ },
///     TargetHealthReasonEnum::DeregistrationInProgress => { /* ... */ },
///     TargetHealthReasonEnum::FailedHealthChecks => { /* ... */ },
///     TargetHealthReasonEnum::HealthCheckDisabled => { /* ... */ },
///     TargetHealthReasonEnum::InvalidState => { /* ... */ },
///     TargetHealthReasonEnum::IpUnusable => { /* ... */ },
///     TargetHealthReasonEnum::NotInUse => { /* ... */ },
///     TargetHealthReasonEnum::NotRegistered => { /* ... */ },
///     TargetHealthReasonEnum::ResponseCodeMismatch => { /* ... */ },
///     TargetHealthReasonEnum::Timeout => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `targethealthreasonenum` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `TargetHealthReasonEnum::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `TargetHealthReasonEnum::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `TargetHealthReasonEnum::NewFeature` is defined.
/// Specifically, when `targethealthreasonenum` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `TargetHealthReasonEnum::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum TargetHealthReasonEnum {
    #[allow(missing_docs)] // documentation missing in model
    InitialHealthChecking,
    #[allow(missing_docs)] // documentation missing in model
    InternalError,
    #[allow(missing_docs)] // documentation missing in model
    RegistrationInProgress,
    #[allow(missing_docs)] // documentation missing in model
    DeregistrationInProgress,
    #[allow(missing_docs)] // documentation missing in model
    FailedHealthChecks,
    #[allow(missing_docs)] // documentation missing in model
    HealthCheckDisabled,
    #[allow(missing_docs)] // documentation missing in model
    InvalidState,
    #[allow(missing_docs)] // documentation missing in model
    IpUnusable,
    #[allow(missing_docs)] // documentation missing in model
    NotInUse,
    #[allow(missing_docs)] // documentation missing in model
    NotRegistered,
    #[allow(missing_docs)] // documentation missing in model
    ResponseCodeMismatch,
    #[allow(missing_docs)] // documentation missing in model
    Timeout,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for TargetHealthReasonEnum {
    fn from(s: &str) -> Self {
        match s {
            "Elb.InitialHealthChecking" => TargetHealthReasonEnum::InitialHealthChecking,
            "Elb.InternalError" => TargetHealthReasonEnum::InternalError,
            "Elb.RegistrationInProgress" => TargetHealthReasonEnum::RegistrationInProgress,
            "Target.DeregistrationInProgress" => TargetHealthReasonEnum::DeregistrationInProgress,
            "Target.FailedHealthChecks" => TargetHealthReasonEnum::FailedHealthChecks,
            "Target.HealthCheckDisabled" => TargetHealthReasonEnum::HealthCheckDisabled,
            "Target.InvalidState" => TargetHealthReasonEnum::InvalidState,
            "Target.IpUnusable" => TargetHealthReasonEnum::IpUnusable,
            "Target.NotInUse" => TargetHealthReasonEnum::NotInUse,
            "Target.NotRegistered" => TargetHealthReasonEnum::NotRegistered,
            "Target.ResponseCodeMismatch" => TargetHealthReasonEnum::ResponseCodeMismatch,
            "Target.Timeout" => TargetHealthReasonEnum::Timeout,
            other => TargetHealthReasonEnum::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for TargetHealthReasonEnum {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(TargetHealthReasonEnum::from(s))
    }
}
impl TargetHealthReasonEnum {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            TargetHealthReasonEnum::InitialHealthChecking => "Elb.InitialHealthChecking",
            TargetHealthReasonEnum::InternalError => "Elb.InternalError",
            TargetHealthReasonEnum::RegistrationInProgress => "Elb.RegistrationInProgress",
            TargetHealthReasonEnum::DeregistrationInProgress => "Target.DeregistrationInProgress",
            TargetHealthReasonEnum::FailedHealthChecks => "Target.FailedHealthChecks",
            TargetHealthReasonEnum::HealthCheckDisabled => "Target.HealthCheckDisabled",
            TargetHealthReasonEnum::InvalidState => "Target.InvalidState",
            TargetHealthReasonEnum::IpUnusable => "Target.IpUnusable",
            TargetHealthReasonEnum::NotInUse => "Target.NotInUse",
            TargetHealthReasonEnum::NotRegistered => "Target.NotRegistered",
            TargetHealthReasonEnum::ResponseCodeMismatch => "Target.ResponseCodeMismatch",
            TargetHealthReasonEnum::Timeout => "Target.Timeout",
            TargetHealthReasonEnum::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Elb.InitialHealthChecking",
            "Elb.InternalError",
            "Elb.RegistrationInProgress",
            "Target.DeregistrationInProgress",
            "Target.FailedHealthChecks",
            "Target.HealthCheckDisabled",
            "Target.InvalidState",
            "Target.IpUnusable",
            "Target.NotInUse",
            "Target.NotRegistered",
            "Target.ResponseCodeMismatch",
            "Target.Timeout",
        ]
    }
}
impl AsRef<str> for TargetHealthReasonEnum {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
