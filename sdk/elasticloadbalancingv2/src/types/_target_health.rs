// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the current health of a target.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TargetHealth {
    /// <p>The state of the target.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::TargetHealthStateEnum>,
    /// <p>The reason code.</p>
    /// <p>If the target state is <code>healthy</code>, a reason code is not provided.</p>
    /// <p>If the target state is <code>initial</code>, the reason code can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>Elb.RegistrationInProgress</code> - The target is in the process of being registered with the load balancer.</p> </li>
    /// <li> <p> <code>Elb.InitialHealthChecking</code> - The load balancer is still sending the target the minimum number of health checks required to determine its health status.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>unhealthy</code>, the reason code can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>Target.ResponseCodeMismatch</code> - The health checks did not return an expected HTTP code. Applies only to Application Load Balancers and Gateway Load Balancers.</p> </li>
    /// <li> <p> <code>Target.Timeout</code> - The health check requests timed out. Applies only to Application Load Balancers and Gateway Load Balancers.</p> </li>
    /// <li> <p> <code>Target.FailedHealthChecks</code> - The load balancer received an error while establishing a connection to the target or the target response was malformed.</p> </li>
    /// <li> <p> <code>Elb.InternalError</code> - The health checks failed due to an internal error. Applies only to Application Load Balancers.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>unused</code>, the reason code can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>Target.NotRegistered</code> - The target is not registered with the target group.</p> </li>
    /// <li> <p> <code>Target.NotInUse</code> - The target group is not used by any load balancer or the target is in an Availability Zone that is not enabled for its load balancer.</p> </li>
    /// <li> <p> <code>Target.InvalidState</code> - The target is in the stopped or terminated state.</p> </li>
    /// <li> <p> <code>Target.IpUnusable</code> - The target IP address is reserved for use by a load balancer.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>draining</code>, the reason code can be the following value:</p>
    /// <ul>
    /// <li> <p> <code>Target.DeregistrationInProgress</code> - The target is in the process of being deregistered and the deregistration delay period has not expired.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>unavailable</code>, the reason code can be the following value:</p>
    /// <ul>
    /// <li> <p> <code>Target.HealthCheckDisabled</code> - Health checks are disabled for the target group. Applies only to Application Load Balancers.</p> </li>
    /// <li> <p> <code>Elb.InternalError</code> - Target health is unavailable due to an internal error. Applies only to Network Load Balancers.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub reason: std::option::Option<crate::types::TargetHealthReasonEnum>,
    /// <p>A description of the target health that provides additional details. If the state is <code>healthy</code>, a description is not provided.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl TargetHealth {
    /// <p>The state of the target.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::TargetHealthStateEnum> {
        self.state.as_ref()
    }
    /// <p>The reason code.</p>
    /// <p>If the target state is <code>healthy</code>, a reason code is not provided.</p>
    /// <p>If the target state is <code>initial</code>, the reason code can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>Elb.RegistrationInProgress</code> - The target is in the process of being registered with the load balancer.</p> </li>
    /// <li> <p> <code>Elb.InitialHealthChecking</code> - The load balancer is still sending the target the minimum number of health checks required to determine its health status.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>unhealthy</code>, the reason code can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>Target.ResponseCodeMismatch</code> - The health checks did not return an expected HTTP code. Applies only to Application Load Balancers and Gateway Load Balancers.</p> </li>
    /// <li> <p> <code>Target.Timeout</code> - The health check requests timed out. Applies only to Application Load Balancers and Gateway Load Balancers.</p> </li>
    /// <li> <p> <code>Target.FailedHealthChecks</code> - The load balancer received an error while establishing a connection to the target or the target response was malformed.</p> </li>
    /// <li> <p> <code>Elb.InternalError</code> - The health checks failed due to an internal error. Applies only to Application Load Balancers.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>unused</code>, the reason code can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>Target.NotRegistered</code> - The target is not registered with the target group.</p> </li>
    /// <li> <p> <code>Target.NotInUse</code> - The target group is not used by any load balancer or the target is in an Availability Zone that is not enabled for its load balancer.</p> </li>
    /// <li> <p> <code>Target.InvalidState</code> - The target is in the stopped or terminated state.</p> </li>
    /// <li> <p> <code>Target.IpUnusable</code> - The target IP address is reserved for use by a load balancer.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>draining</code>, the reason code can be the following value:</p>
    /// <ul>
    /// <li> <p> <code>Target.DeregistrationInProgress</code> - The target is in the process of being deregistered and the deregistration delay period has not expired.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>unavailable</code>, the reason code can be the following value:</p>
    /// <ul>
    /// <li> <p> <code>Target.HealthCheckDisabled</code> - Health checks are disabled for the target group. Applies only to Application Load Balancers.</p> </li>
    /// <li> <p> <code>Elb.InternalError</code> - Target health is unavailable due to an internal error. Applies only to Network Load Balancers.</p> </li>
    /// </ul>
    pub fn reason(&self) -> std::option::Option<&crate::types::TargetHealthReasonEnum> {
        self.reason.as_ref()
    }
    /// <p>A description of the target health that provides additional details. If the state is <code>healthy</code>, a description is not provided.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl TargetHealth {
    /// Creates a new builder-style object to manufacture [`TargetHealth`](crate::types::TargetHealth).
    pub fn builder() -> crate::types::builders::TargetHealthBuilder {
        crate::types::builders::TargetHealthBuilder::default()
    }
}

/// A builder for [`TargetHealth`](crate::types::TargetHealth).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TargetHealthBuilder {
    pub(crate) state: std::option::Option<crate::types::TargetHealthStateEnum>,
    pub(crate) reason: std::option::Option<crate::types::TargetHealthReasonEnum>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl TargetHealthBuilder {
    /// <p>The state of the target.</p>
    pub fn state(mut self, input: crate::types::TargetHealthStateEnum) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the target.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::TargetHealthStateEnum>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>The reason code.</p>
    /// <p>If the target state is <code>healthy</code>, a reason code is not provided.</p>
    /// <p>If the target state is <code>initial</code>, the reason code can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>Elb.RegistrationInProgress</code> - The target is in the process of being registered with the load balancer.</p> </li>
    /// <li> <p> <code>Elb.InitialHealthChecking</code> - The load balancer is still sending the target the minimum number of health checks required to determine its health status.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>unhealthy</code>, the reason code can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>Target.ResponseCodeMismatch</code> - The health checks did not return an expected HTTP code. Applies only to Application Load Balancers and Gateway Load Balancers.</p> </li>
    /// <li> <p> <code>Target.Timeout</code> - The health check requests timed out. Applies only to Application Load Balancers and Gateway Load Balancers.</p> </li>
    /// <li> <p> <code>Target.FailedHealthChecks</code> - The load balancer received an error while establishing a connection to the target or the target response was malformed.</p> </li>
    /// <li> <p> <code>Elb.InternalError</code> - The health checks failed due to an internal error. Applies only to Application Load Balancers.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>unused</code>, the reason code can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>Target.NotRegistered</code> - The target is not registered with the target group.</p> </li>
    /// <li> <p> <code>Target.NotInUse</code> - The target group is not used by any load balancer or the target is in an Availability Zone that is not enabled for its load balancer.</p> </li>
    /// <li> <p> <code>Target.InvalidState</code> - The target is in the stopped or terminated state.</p> </li>
    /// <li> <p> <code>Target.IpUnusable</code> - The target IP address is reserved for use by a load balancer.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>draining</code>, the reason code can be the following value:</p>
    /// <ul>
    /// <li> <p> <code>Target.DeregistrationInProgress</code> - The target is in the process of being deregistered and the deregistration delay period has not expired.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>unavailable</code>, the reason code can be the following value:</p>
    /// <ul>
    /// <li> <p> <code>Target.HealthCheckDisabled</code> - Health checks are disabled for the target group. Applies only to Application Load Balancers.</p> </li>
    /// <li> <p> <code>Elb.InternalError</code> - Target health is unavailable due to an internal error. Applies only to Network Load Balancers.</p> </li>
    /// </ul>
    pub fn reason(mut self, input: crate::types::TargetHealthReasonEnum) -> Self {
        self.reason = Some(input);
        self
    }
    /// <p>The reason code.</p>
    /// <p>If the target state is <code>healthy</code>, a reason code is not provided.</p>
    /// <p>If the target state is <code>initial</code>, the reason code can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>Elb.RegistrationInProgress</code> - The target is in the process of being registered with the load balancer.</p> </li>
    /// <li> <p> <code>Elb.InitialHealthChecking</code> - The load balancer is still sending the target the minimum number of health checks required to determine its health status.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>unhealthy</code>, the reason code can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>Target.ResponseCodeMismatch</code> - The health checks did not return an expected HTTP code. Applies only to Application Load Balancers and Gateway Load Balancers.</p> </li>
    /// <li> <p> <code>Target.Timeout</code> - The health check requests timed out. Applies only to Application Load Balancers and Gateway Load Balancers.</p> </li>
    /// <li> <p> <code>Target.FailedHealthChecks</code> - The load balancer received an error while establishing a connection to the target or the target response was malformed.</p> </li>
    /// <li> <p> <code>Elb.InternalError</code> - The health checks failed due to an internal error. Applies only to Application Load Balancers.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>unused</code>, the reason code can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>Target.NotRegistered</code> - The target is not registered with the target group.</p> </li>
    /// <li> <p> <code>Target.NotInUse</code> - The target group is not used by any load balancer or the target is in an Availability Zone that is not enabled for its load balancer.</p> </li>
    /// <li> <p> <code>Target.InvalidState</code> - The target is in the stopped or terminated state.</p> </li>
    /// <li> <p> <code>Target.IpUnusable</code> - The target IP address is reserved for use by a load balancer.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>draining</code>, the reason code can be the following value:</p>
    /// <ul>
    /// <li> <p> <code>Target.DeregistrationInProgress</code> - The target is in the process of being deregistered and the deregistration delay period has not expired.</p> </li>
    /// </ul>
    /// <p>If the target state is <code>unavailable</code>, the reason code can be the following value:</p>
    /// <ul>
    /// <li> <p> <code>Target.HealthCheckDisabled</code> - Health checks are disabled for the target group. Applies only to Application Load Balancers.</p> </li>
    /// <li> <p> <code>Elb.InternalError</code> - Target health is unavailable due to an internal error. Applies only to Network Load Balancers.</p> </li>
    /// </ul>
    pub fn set_reason(
        mut self,
        input: std::option::Option<crate::types::TargetHealthReasonEnum>,
    ) -> Self {
        self.reason = input;
        self
    }
    /// <p>A description of the target health that provides additional details. If the state is <code>healthy</code>, a description is not provided.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the target health that provides additional details. If the state is <code>healthy</code>, a description is not provided.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`TargetHealth`](crate::types::TargetHealth).
    pub fn build(self) -> crate::types::TargetHealth {
        crate::types::TargetHealth {
            state: self.state,
            reason: self.reason,
            description: self.description,
        }
    }
}
