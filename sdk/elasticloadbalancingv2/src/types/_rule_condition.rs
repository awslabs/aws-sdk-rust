// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a condition for a rule.</p>
/// <p>Each rule can optionally include up to one of each of the following conditions: <code>http-request-method</code>, <code>host-header</code>, <code>path-pattern</code>, and <code>source-ip</code>. Each rule can also optionally include one or more of each of the following conditions: <code>http-header</code> and <code>query-string</code>. Note that the value for a condition cannot be empty.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RuleCondition {
    /// <p>The field in the HTTP request. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>http-header</code> </p> </li>
    /// <li> <p> <code>http-request-method</code> </p> </li>
    /// <li> <p> <code>host-header</code> </p> </li>
    /// <li> <p> <code>path-pattern</code> </p> </li>
    /// <li> <p> <code>query-string</code> </p> </li>
    /// <li> <p> <code>source-ip</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub field: std::option::Option<std::string::String>,
    /// <p>The condition value. Specify only when <code>Field</code> is <code>host-header</code> or <code>path-pattern</code>. Alternatively, to specify multiple host names or multiple path patterns, use <code>HostHeaderConfig</code> or <code>PathPatternConfig</code>.</p>
    /// <p>If <code>Field</code> is <code>host-header</code> and you are not using <code>HostHeaderConfig</code>, you can specify a single host name (for example, my.example.com) in <code>Values</code>. A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters.</p>
    /// <ul>
    /// <li> <p>A-Z, a-z, 0-9</p> </li>
    /// <li> <p>- .</p> </li>
    /// <li> <p>* (matches 0 or more characters)</p> </li>
    /// <li> <p>? (matches exactly 1 character)</p> </li>
    /// </ul>
    /// <p>If <code>Field</code> is <code>path-pattern</code> and you are not using <code>PathPatternConfig</code>, you can specify a single path pattern (for example, /img/*) in <code>Values</code>. A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters.</p>
    /// <ul>
    /// <li> <p>A-Z, a-z, 0-9</p> </li>
    /// <li> <p>_ - . $ / ~ " ' @ : +</p> </li>
    /// <li> <p>&amp; (using &amp;)</p> </li>
    /// <li> <p>* (matches 0 or more characters)</p> </li>
    /// <li> <p>? (matches exactly 1 character)</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Information for a host header condition. Specify only when <code>Field</code> is <code>host-header</code>.</p>
    #[doc(hidden)]
    pub host_header_config: std::option::Option<crate::types::HostHeaderConditionConfig>,
    /// <p>Information for a path pattern condition. Specify only when <code>Field</code> is <code>path-pattern</code>.</p>
    #[doc(hidden)]
    pub path_pattern_config: std::option::Option<crate::types::PathPatternConditionConfig>,
    /// <p>Information for an HTTP header condition. Specify only when <code>Field</code> is <code>http-header</code>.</p>
    #[doc(hidden)]
    pub http_header_config: std::option::Option<crate::types::HttpHeaderConditionConfig>,
    /// <p>Information for a query string condition. Specify only when <code>Field</code> is <code>query-string</code>.</p>
    #[doc(hidden)]
    pub query_string_config: std::option::Option<crate::types::QueryStringConditionConfig>,
    /// <p>Information for an HTTP method condition. Specify only when <code>Field</code> is <code>http-request-method</code>.</p>
    #[doc(hidden)]
    pub http_request_method_config:
        std::option::Option<crate::types::HttpRequestMethodConditionConfig>,
    /// <p>Information for a source IP condition. Specify only when <code>Field</code> is <code>source-ip</code>.</p>
    #[doc(hidden)]
    pub source_ip_config: std::option::Option<crate::types::SourceIpConditionConfig>,
}
impl RuleCondition {
    /// <p>The field in the HTTP request. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>http-header</code> </p> </li>
    /// <li> <p> <code>http-request-method</code> </p> </li>
    /// <li> <p> <code>host-header</code> </p> </li>
    /// <li> <p> <code>path-pattern</code> </p> </li>
    /// <li> <p> <code>query-string</code> </p> </li>
    /// <li> <p> <code>source-ip</code> </p> </li>
    /// </ul>
    pub fn field(&self) -> std::option::Option<&str> {
        self.field.as_deref()
    }
    /// <p>The condition value. Specify only when <code>Field</code> is <code>host-header</code> or <code>path-pattern</code>. Alternatively, to specify multiple host names or multiple path patterns, use <code>HostHeaderConfig</code> or <code>PathPatternConfig</code>.</p>
    /// <p>If <code>Field</code> is <code>host-header</code> and you are not using <code>HostHeaderConfig</code>, you can specify a single host name (for example, my.example.com) in <code>Values</code>. A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters.</p>
    /// <ul>
    /// <li> <p>A-Z, a-z, 0-9</p> </li>
    /// <li> <p>- .</p> </li>
    /// <li> <p>* (matches 0 or more characters)</p> </li>
    /// <li> <p>? (matches exactly 1 character)</p> </li>
    /// </ul>
    /// <p>If <code>Field</code> is <code>path-pattern</code> and you are not using <code>PathPatternConfig</code>, you can specify a single path pattern (for example, /img/*) in <code>Values</code>. A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters.</p>
    /// <ul>
    /// <li> <p>A-Z, a-z, 0-9</p> </li>
    /// <li> <p>_ - . $ / ~ " ' @ : +</p> </li>
    /// <li> <p>&amp; (using &amp;)</p> </li>
    /// <li> <p>* (matches 0 or more characters)</p> </li>
    /// <li> <p>? (matches exactly 1 character)</p> </li>
    /// </ul>
    pub fn values(&self) -> std::option::Option<&[std::string::String]> {
        self.values.as_deref()
    }
    /// <p>Information for a host header condition. Specify only when <code>Field</code> is <code>host-header</code>.</p>
    pub fn host_header_config(
        &self,
    ) -> std::option::Option<&crate::types::HostHeaderConditionConfig> {
        self.host_header_config.as_ref()
    }
    /// <p>Information for a path pattern condition. Specify only when <code>Field</code> is <code>path-pattern</code>.</p>
    pub fn path_pattern_config(
        &self,
    ) -> std::option::Option<&crate::types::PathPatternConditionConfig> {
        self.path_pattern_config.as_ref()
    }
    /// <p>Information for an HTTP header condition. Specify only when <code>Field</code> is <code>http-header</code>.</p>
    pub fn http_header_config(
        &self,
    ) -> std::option::Option<&crate::types::HttpHeaderConditionConfig> {
        self.http_header_config.as_ref()
    }
    /// <p>Information for a query string condition. Specify only when <code>Field</code> is <code>query-string</code>.</p>
    pub fn query_string_config(
        &self,
    ) -> std::option::Option<&crate::types::QueryStringConditionConfig> {
        self.query_string_config.as_ref()
    }
    /// <p>Information for an HTTP method condition. Specify only when <code>Field</code> is <code>http-request-method</code>.</p>
    pub fn http_request_method_config(
        &self,
    ) -> std::option::Option<&crate::types::HttpRequestMethodConditionConfig> {
        self.http_request_method_config.as_ref()
    }
    /// <p>Information for a source IP condition. Specify only when <code>Field</code> is <code>source-ip</code>.</p>
    pub fn source_ip_config(&self) -> std::option::Option<&crate::types::SourceIpConditionConfig> {
        self.source_ip_config.as_ref()
    }
}
impl RuleCondition {
    /// Creates a new builder-style object to manufacture [`RuleCondition`](crate::types::RuleCondition).
    pub fn builder() -> crate::types::builders::RuleConditionBuilder {
        crate::types::builders::RuleConditionBuilder::default()
    }
}

/// A builder for [`RuleCondition`](crate::types::RuleCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RuleConditionBuilder {
    pub(crate) field: std::option::Option<std::string::String>,
    pub(crate) values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) host_header_config: std::option::Option<crate::types::HostHeaderConditionConfig>,
    pub(crate) path_pattern_config: std::option::Option<crate::types::PathPatternConditionConfig>,
    pub(crate) http_header_config: std::option::Option<crate::types::HttpHeaderConditionConfig>,
    pub(crate) query_string_config: std::option::Option<crate::types::QueryStringConditionConfig>,
    pub(crate) http_request_method_config:
        std::option::Option<crate::types::HttpRequestMethodConditionConfig>,
    pub(crate) source_ip_config: std::option::Option<crate::types::SourceIpConditionConfig>,
}
impl RuleConditionBuilder {
    /// <p>The field in the HTTP request. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>http-header</code> </p> </li>
    /// <li> <p> <code>http-request-method</code> </p> </li>
    /// <li> <p> <code>host-header</code> </p> </li>
    /// <li> <p> <code>path-pattern</code> </p> </li>
    /// <li> <p> <code>query-string</code> </p> </li>
    /// <li> <p> <code>source-ip</code> </p> </li>
    /// </ul>
    pub fn field(mut self, input: impl Into<std::string::String>) -> Self {
        self.field = Some(input.into());
        self
    }
    /// <p>The field in the HTTP request. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>http-header</code> </p> </li>
    /// <li> <p> <code>http-request-method</code> </p> </li>
    /// <li> <p> <code>host-header</code> </p> </li>
    /// <li> <p> <code>path-pattern</code> </p> </li>
    /// <li> <p> <code>query-string</code> </p> </li>
    /// <li> <p> <code>source-ip</code> </p> </li>
    /// </ul>
    pub fn set_field(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The condition value. Specify only when <code>Field</code> is <code>host-header</code> or <code>path-pattern</code>. Alternatively, to specify multiple host names or multiple path patterns, use <code>HostHeaderConfig</code> or <code>PathPatternConfig</code>.</p>
    /// <p>If <code>Field</code> is <code>host-header</code> and you are not using <code>HostHeaderConfig</code>, you can specify a single host name (for example, my.example.com) in <code>Values</code>. A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters.</p>
    /// <ul>
    /// <li> <p>A-Z, a-z, 0-9</p> </li>
    /// <li> <p>- .</p> </li>
    /// <li> <p>* (matches 0 or more characters)</p> </li>
    /// <li> <p>? (matches exactly 1 character)</p> </li>
    /// </ul>
    /// <p>If <code>Field</code> is <code>path-pattern</code> and you are not using <code>PathPatternConfig</code>, you can specify a single path pattern (for example, /img/*) in <code>Values</code>. A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters.</p>
    /// <ul>
    /// <li> <p>A-Z, a-z, 0-9</p> </li>
    /// <li> <p>_ - . $ / ~ " ' @ : +</p> </li>
    /// <li> <p>&amp; (using &amp;)</p> </li>
    /// <li> <p>* (matches 0 or more characters)</p> </li>
    /// <li> <p>? (matches exactly 1 character)</p> </li>
    /// </ul>
    pub fn values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = Some(v);
        self
    }
    /// <p>The condition value. Specify only when <code>Field</code> is <code>host-header</code> or <code>path-pattern</code>. Alternatively, to specify multiple host names or multiple path patterns, use <code>HostHeaderConfig</code> or <code>PathPatternConfig</code>.</p>
    /// <p>If <code>Field</code> is <code>host-header</code> and you are not using <code>HostHeaderConfig</code>, you can specify a single host name (for example, my.example.com) in <code>Values</code>. A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters.</p>
    /// <ul>
    /// <li> <p>A-Z, a-z, 0-9</p> </li>
    /// <li> <p>- .</p> </li>
    /// <li> <p>* (matches 0 or more characters)</p> </li>
    /// <li> <p>? (matches exactly 1 character)</p> </li>
    /// </ul>
    /// <p>If <code>Field</code> is <code>path-pattern</code> and you are not using <code>PathPatternConfig</code>, you can specify a single path pattern (for example, /img/*) in <code>Values</code>. A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters.</p>
    /// <ul>
    /// <li> <p>A-Z, a-z, 0-9</p> </li>
    /// <li> <p>_ - . $ / ~ " ' @ : +</p> </li>
    /// <li> <p>&amp; (using &amp;)</p> </li>
    /// <li> <p>* (matches 0 or more characters)</p> </li>
    /// <li> <p>? (matches exactly 1 character)</p> </li>
    /// </ul>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// <p>Information for a host header condition. Specify only when <code>Field</code> is <code>host-header</code>.</p>
    pub fn host_header_config(mut self, input: crate::types::HostHeaderConditionConfig) -> Self {
        self.host_header_config = Some(input);
        self
    }
    /// <p>Information for a host header condition. Specify only when <code>Field</code> is <code>host-header</code>.</p>
    pub fn set_host_header_config(
        mut self,
        input: std::option::Option<crate::types::HostHeaderConditionConfig>,
    ) -> Self {
        self.host_header_config = input;
        self
    }
    /// <p>Information for a path pattern condition. Specify only when <code>Field</code> is <code>path-pattern</code>.</p>
    pub fn path_pattern_config(mut self, input: crate::types::PathPatternConditionConfig) -> Self {
        self.path_pattern_config = Some(input);
        self
    }
    /// <p>Information for a path pattern condition. Specify only when <code>Field</code> is <code>path-pattern</code>.</p>
    pub fn set_path_pattern_config(
        mut self,
        input: std::option::Option<crate::types::PathPatternConditionConfig>,
    ) -> Self {
        self.path_pattern_config = input;
        self
    }
    /// <p>Information for an HTTP header condition. Specify only when <code>Field</code> is <code>http-header</code>.</p>
    pub fn http_header_config(mut self, input: crate::types::HttpHeaderConditionConfig) -> Self {
        self.http_header_config = Some(input);
        self
    }
    /// <p>Information for an HTTP header condition. Specify only when <code>Field</code> is <code>http-header</code>.</p>
    pub fn set_http_header_config(
        mut self,
        input: std::option::Option<crate::types::HttpHeaderConditionConfig>,
    ) -> Self {
        self.http_header_config = input;
        self
    }
    /// <p>Information for a query string condition. Specify only when <code>Field</code> is <code>query-string</code>.</p>
    pub fn query_string_config(mut self, input: crate::types::QueryStringConditionConfig) -> Self {
        self.query_string_config = Some(input);
        self
    }
    /// <p>Information for a query string condition. Specify only when <code>Field</code> is <code>query-string</code>.</p>
    pub fn set_query_string_config(
        mut self,
        input: std::option::Option<crate::types::QueryStringConditionConfig>,
    ) -> Self {
        self.query_string_config = input;
        self
    }
    /// <p>Information for an HTTP method condition. Specify only when <code>Field</code> is <code>http-request-method</code>.</p>
    pub fn http_request_method_config(
        mut self,
        input: crate::types::HttpRequestMethodConditionConfig,
    ) -> Self {
        self.http_request_method_config = Some(input);
        self
    }
    /// <p>Information for an HTTP method condition. Specify only when <code>Field</code> is <code>http-request-method</code>.</p>
    pub fn set_http_request_method_config(
        mut self,
        input: std::option::Option<crate::types::HttpRequestMethodConditionConfig>,
    ) -> Self {
        self.http_request_method_config = input;
        self
    }
    /// <p>Information for a source IP condition. Specify only when <code>Field</code> is <code>source-ip</code>.</p>
    pub fn source_ip_config(mut self, input: crate::types::SourceIpConditionConfig) -> Self {
        self.source_ip_config = Some(input);
        self
    }
    /// <p>Information for a source IP condition. Specify only when <code>Field</code> is <code>source-ip</code>.</p>
    pub fn set_source_ip_config(
        mut self,
        input: std::option::Option<crate::types::SourceIpConditionConfig>,
    ) -> Self {
        self.source_ip_config = input;
        self
    }
    /// Consumes the builder and constructs a [`RuleCondition`](crate::types::RuleCondition).
    pub fn build(self) -> crate::types::RuleCondition {
        crate::types::RuleCondition {
            field: self.field,
            values: self.values,
            host_header_config: self.host_header_config,
            path_pattern_config: self.path_pattern_config,
            http_header_config: self.http_header_config,
            query_string_config: self.query_string_config,
            http_request_method_config: self.http_request_method_config,
            source_ip_config: self.source_ip_config,
        }
    }
}
