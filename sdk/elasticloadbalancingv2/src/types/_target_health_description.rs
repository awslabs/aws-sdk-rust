// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the health of a target.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TargetHealthDescription {
    /// <p>The description of the target.</p>
    #[doc(hidden)]
    pub target: std::option::Option<crate::types::TargetDescription>,
    /// <p>The port to use to connect with the target.</p>
    #[doc(hidden)]
    pub health_check_port: std::option::Option<std::string::String>,
    /// <p>The health information for the target.</p>
    #[doc(hidden)]
    pub target_health: std::option::Option<crate::types::TargetHealth>,
}
impl TargetHealthDescription {
    /// <p>The description of the target.</p>
    pub fn target(&self) -> std::option::Option<&crate::types::TargetDescription> {
        self.target.as_ref()
    }
    /// <p>The port to use to connect with the target.</p>
    pub fn health_check_port(&self) -> std::option::Option<&str> {
        self.health_check_port.as_deref()
    }
    /// <p>The health information for the target.</p>
    pub fn target_health(&self) -> std::option::Option<&crate::types::TargetHealth> {
        self.target_health.as_ref()
    }
}
impl TargetHealthDescription {
    /// Creates a new builder-style object to manufacture [`TargetHealthDescription`](crate::types::TargetHealthDescription).
    pub fn builder() -> crate::types::builders::TargetHealthDescriptionBuilder {
        crate::types::builders::TargetHealthDescriptionBuilder::default()
    }
}

/// A builder for [`TargetHealthDescription`](crate::types::TargetHealthDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TargetHealthDescriptionBuilder {
    pub(crate) target: std::option::Option<crate::types::TargetDescription>,
    pub(crate) health_check_port: std::option::Option<std::string::String>,
    pub(crate) target_health: std::option::Option<crate::types::TargetHealth>,
}
impl TargetHealthDescriptionBuilder {
    /// <p>The description of the target.</p>
    pub fn target(mut self, input: crate::types::TargetDescription) -> Self {
        self.target = Some(input);
        self
    }
    /// <p>The description of the target.</p>
    pub fn set_target(
        mut self,
        input: std::option::Option<crate::types::TargetDescription>,
    ) -> Self {
        self.target = input;
        self
    }
    /// <p>The port to use to connect with the target.</p>
    pub fn health_check_port(mut self, input: impl Into<std::string::String>) -> Self {
        self.health_check_port = Some(input.into());
        self
    }
    /// <p>The port to use to connect with the target.</p>
    pub fn set_health_check_port(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.health_check_port = input;
        self
    }
    /// <p>The health information for the target.</p>
    pub fn target_health(mut self, input: crate::types::TargetHealth) -> Self {
        self.target_health = Some(input);
        self
    }
    /// <p>The health information for the target.</p>
    pub fn set_target_health(
        mut self,
        input: std::option::Option<crate::types::TargetHealth>,
    ) -> Self {
        self.target_health = input;
        self
    }
    /// Consumes the builder and constructs a [`TargetHealthDescription`](crate::types::TargetHealthDescription).
    pub fn build(self) -> crate::types::TargetHealthDescription {
        crate::types::TargetHealthDescription {
            target: self.target,
            health_check_port: self.health_check_port,
            target_health: self.target_health,
        }
    }
}
