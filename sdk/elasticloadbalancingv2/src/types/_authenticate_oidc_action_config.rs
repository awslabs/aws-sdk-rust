// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request parameters when using an identity provider (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthenticateOidcActionConfig {
    /// <p>The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub issuer: ::std::option::Option<::std::string::String>,
    /// <p>The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub authorization_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub token_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub user_info_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The OAuth 2.0 client identifier.</p>
    pub client_id: ::std::option::Option<::std::string::String>,
    /// <p>The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set <code>UseExistingClientSecret</code> to true.</p>
    pub client_secret: ::std::option::Option<::std::string::String>,
    /// <p>The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.</p>
    pub session_cookie_name: ::std::option::Option<::std::string::String>,
    /// <p>The set of user claims to be requested from the IdP. The default is <code>openid</code>.</p>
    /// <p>To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.</p>
    pub scope: ::std::option::Option<::std::string::String>,
    /// <p>The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).</p>
    pub session_timeout: ::std::option::Option<i64>,
    /// <p>The query parameters (up to 10) to include in the redirect request to the authorization endpoint.</p>
    pub authentication_request_extra_params: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The behavior if the user is not authenticated. The following are possible values:</p>
    /// <ul>
    /// <li> <p>deny<code></code> - Return an HTTP 401 Unauthorized error.</p> </li>
    /// <li> <p>allow<code></code> - Allow the request to be forwarded to the target.</p> </li>
    /// <li> <p>authenticate<code></code> - Redirect the request to the IdP authorization endpoint. This is the default value.</p> </li>
    /// </ul>
    pub on_unauthenticated_request: ::std::option::Option<crate::types::AuthenticateOidcActionConditionalBehaviorEnum>,
    /// <p>Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.</p>
    pub use_existing_client_secret: ::std::option::Option<bool>,
}
impl AuthenticateOidcActionConfig {
    /// <p>The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub fn issuer(&self) -> ::std::option::Option<&str> {
        self.issuer.as_deref()
    }
    /// <p>The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub fn authorization_endpoint(&self) -> ::std::option::Option<&str> {
        self.authorization_endpoint.as_deref()
    }
    /// <p>The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub fn token_endpoint(&self) -> ::std::option::Option<&str> {
        self.token_endpoint.as_deref()
    }
    /// <p>The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub fn user_info_endpoint(&self) -> ::std::option::Option<&str> {
        self.user_info_endpoint.as_deref()
    }
    /// <p>The OAuth 2.0 client identifier.</p>
    pub fn client_id(&self) -> ::std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set <code>UseExistingClientSecret</code> to true.</p>
    pub fn client_secret(&self) -> ::std::option::Option<&str> {
        self.client_secret.as_deref()
    }
    /// <p>The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.</p>
    pub fn session_cookie_name(&self) -> ::std::option::Option<&str> {
        self.session_cookie_name.as_deref()
    }
    /// <p>The set of user claims to be requested from the IdP. The default is <code>openid</code>.</p>
    /// <p>To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.</p>
    pub fn scope(&self) -> ::std::option::Option<&str> {
        self.scope.as_deref()
    }
    /// <p>The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).</p>
    pub fn session_timeout(&self) -> ::std::option::Option<i64> {
        self.session_timeout
    }
    /// <p>The query parameters (up to 10) to include in the redirect request to the authorization endpoint.</p>
    pub fn authentication_request_extra_params(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.authentication_request_extra_params.as_ref()
    }
    /// <p>The behavior if the user is not authenticated. The following are possible values:</p>
    /// <ul>
    /// <li> <p>deny<code></code> - Return an HTTP 401 Unauthorized error.</p> </li>
    /// <li> <p>allow<code></code> - Allow the request to be forwarded to the target.</p> </li>
    /// <li> <p>authenticate<code></code> - Redirect the request to the IdP authorization endpoint. This is the default value.</p> </li>
    /// </ul>
    pub fn on_unauthenticated_request(&self) -> ::std::option::Option<&crate::types::AuthenticateOidcActionConditionalBehaviorEnum> {
        self.on_unauthenticated_request.as_ref()
    }
    /// <p>Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.</p>
    pub fn use_existing_client_secret(&self) -> ::std::option::Option<bool> {
        self.use_existing_client_secret
    }
}
impl AuthenticateOidcActionConfig {
    /// Creates a new builder-style object to manufacture [`AuthenticateOidcActionConfig`](crate::types::AuthenticateOidcActionConfig).
    pub fn builder() -> crate::types::builders::AuthenticateOidcActionConfigBuilder {
        crate::types::builders::AuthenticateOidcActionConfigBuilder::default()
    }
}

/// A builder for [`AuthenticateOidcActionConfig`](crate::types::AuthenticateOidcActionConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AuthenticateOidcActionConfigBuilder {
    pub(crate) issuer: ::std::option::Option<::std::string::String>,
    pub(crate) authorization_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) token_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) user_info_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_secret: ::std::option::Option<::std::string::String>,
    pub(crate) session_cookie_name: ::std::option::Option<::std::string::String>,
    pub(crate) scope: ::std::option::Option<::std::string::String>,
    pub(crate) session_timeout: ::std::option::Option<i64>,
    pub(crate) authentication_request_extra_params: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) on_unauthenticated_request: ::std::option::Option<crate::types::AuthenticateOidcActionConditionalBehaviorEnum>,
    pub(crate) use_existing_client_secret: ::std::option::Option<bool>,
}
impl AuthenticateOidcActionConfigBuilder {
    /// <p>The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    /// This field is required.
    pub fn issuer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issuer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub fn set_issuer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// <p>The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub fn get_issuer(&self) -> &::std::option::Option<::std::string::String> {
        &self.issuer
    }
    /// <p>The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    /// This field is required.
    pub fn authorization_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub fn set_authorization_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_endpoint = input;
        self
    }
    /// <p>The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub fn get_authorization_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_endpoint
    }
    /// <p>The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    /// This field is required.
    pub fn token_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub fn set_token_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token_endpoint = input;
        self
    }
    /// <p>The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub fn get_token_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.token_endpoint
    }
    /// <p>The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    /// This field is required.
    pub fn user_info_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_info_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub fn set_user_info_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_info_endpoint = input;
        self
    }
    /// <p>The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.</p>
    pub fn get_user_info_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_info_endpoint
    }
    /// <p>The OAuth 2.0 client identifier.</p>
    /// This field is required.
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OAuth 2.0 client identifier.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The OAuth 2.0 client identifier.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// <p>The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set <code>UseExistingClientSecret</code> to true.</p>
    pub fn client_secret(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_secret = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set <code>UseExistingClientSecret</code> to true.</p>
    pub fn set_client_secret(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_secret = input;
        self
    }
    /// <p>The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set <code>UseExistingClientSecret</code> to true.</p>
    pub fn get_client_secret(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_secret
    }
    /// <p>The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.</p>
    pub fn session_cookie_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_cookie_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.</p>
    pub fn set_session_cookie_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_cookie_name = input;
        self
    }
    /// <p>The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.</p>
    pub fn get_session_cookie_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_cookie_name
    }
    /// <p>The set of user claims to be requested from the IdP. The default is <code>openid</code>.</p>
    /// <p>To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.</p>
    pub fn scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The set of user claims to be requested from the IdP. The default is <code>openid</code>.</p>
    /// <p>To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The set of user claims to be requested from the IdP. The default is <code>openid</code>.</p>
    /// <p>To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.</p>
    pub fn get_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope
    }
    /// <p>The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).</p>
    pub fn session_timeout(mut self, input: i64) -> Self {
        self.session_timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).</p>
    pub fn set_session_timeout(mut self, input: ::std::option::Option<i64>) -> Self {
        self.session_timeout = input;
        self
    }
    /// <p>The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).</p>
    pub fn get_session_timeout(&self) -> &::std::option::Option<i64> {
        &self.session_timeout
    }
    /// Adds a key-value pair to `authentication_request_extra_params`.
    ///
    /// To override the contents of this collection use [`set_authentication_request_extra_params`](Self::set_authentication_request_extra_params).
    ///
    /// <p>The query parameters (up to 10) to include in the redirect request to the authorization endpoint.</p>
    pub fn authentication_request_extra_params(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.authentication_request_extra_params.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.authentication_request_extra_params = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The query parameters (up to 10) to include in the redirect request to the authorization endpoint.</p>
    pub fn set_authentication_request_extra_params(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.authentication_request_extra_params = input;
        self
    }
    /// <p>The query parameters (up to 10) to include in the redirect request to the authorization endpoint.</p>
    pub fn get_authentication_request_extra_params(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.authentication_request_extra_params
    }
    /// <p>The behavior if the user is not authenticated. The following are possible values:</p>
    /// <ul>
    /// <li> <p>deny<code></code> - Return an HTTP 401 Unauthorized error.</p> </li>
    /// <li> <p>allow<code></code> - Allow the request to be forwarded to the target.</p> </li>
    /// <li> <p>authenticate<code></code> - Redirect the request to the IdP authorization endpoint. This is the default value.</p> </li>
    /// </ul>
    pub fn on_unauthenticated_request(mut self, input: crate::types::AuthenticateOidcActionConditionalBehaviorEnum) -> Self {
        self.on_unauthenticated_request = ::std::option::Option::Some(input);
        self
    }
    /// <p>The behavior if the user is not authenticated. The following are possible values:</p>
    /// <ul>
    /// <li> <p>deny<code></code> - Return an HTTP 401 Unauthorized error.</p> </li>
    /// <li> <p>allow<code></code> - Allow the request to be forwarded to the target.</p> </li>
    /// <li> <p>authenticate<code></code> - Redirect the request to the IdP authorization endpoint. This is the default value.</p> </li>
    /// </ul>
    pub fn set_on_unauthenticated_request(
        mut self,
        input: ::std::option::Option<crate::types::AuthenticateOidcActionConditionalBehaviorEnum>,
    ) -> Self {
        self.on_unauthenticated_request = input;
        self
    }
    /// <p>The behavior if the user is not authenticated. The following are possible values:</p>
    /// <ul>
    /// <li> <p>deny<code></code> - Return an HTTP 401 Unauthorized error.</p> </li>
    /// <li> <p>allow<code></code> - Allow the request to be forwarded to the target.</p> </li>
    /// <li> <p>authenticate<code></code> - Redirect the request to the IdP authorization endpoint. This is the default value.</p> </li>
    /// </ul>
    pub fn get_on_unauthenticated_request(&self) -> &::std::option::Option<crate::types::AuthenticateOidcActionConditionalBehaviorEnum> {
        &self.on_unauthenticated_request
    }
    /// <p>Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.</p>
    pub fn use_existing_client_secret(mut self, input: bool) -> Self {
        self.use_existing_client_secret = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.</p>
    pub fn set_use_existing_client_secret(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_existing_client_secret = input;
        self
    }
    /// <p>Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.</p>
    pub fn get_use_existing_client_secret(&self) -> &::std::option::Option<bool> {
        &self.use_existing_client_secret
    }
    /// Consumes the builder and constructs a [`AuthenticateOidcActionConfig`](crate::types::AuthenticateOidcActionConfig).
    pub fn build(self) -> crate::types::AuthenticateOidcActionConfig {
        crate::types::AuthenticateOidcActionConfig {
            issuer: self.issuer,
            authorization_endpoint: self.authorization_endpoint,
            token_endpoint: self.token_endpoint,
            user_info_endpoint: self.user_info_endpoint,
            client_id: self.client_id,
            client_secret: self.client_secret,
            session_cookie_name: self.session_cookie_name,
            scope: self.scope,
            session_timeout: self.session_timeout,
            authentication_request_extra_params: self.authentication_request_extra_params,
            on_unauthenticated_request: self.on_unauthenticated_request,
            use_existing_client_secret: self.use_existing_client_secret,
        }
    }
}
