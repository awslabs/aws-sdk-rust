// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a query string condition.</p>
/// <p>The query string component of a URI starts after the first '?' character and is terminated by either a '#' character or the end of the URI. A typical query string contains key/value pairs separated by '&amp;' characters. The allowed characters are specified by RFC 3986. Any character can be percentage encoded.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueryStringConditionConfig {
    /// <p>The key/value pairs or values to find in the query string. The maximum size of each string is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). To search for a literal '*' or '?' character in a query string, you must escape these characters in <code>Values</code> using a '\' character.</p>
    /// <p>If you specify multiple key/value pairs or values, the condition is satisfied if one of them is found in the query string.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<crate::types::QueryStringKeyValuePair>>,
}
impl QueryStringConditionConfig {
    /// <p>The key/value pairs or values to find in the query string. The maximum size of each string is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). To search for a literal '*' or '?' character in a query string, you must escape these characters in <code>Values</code> using a '\' character.</p>
    /// <p>If you specify multiple key/value pairs or values, the condition is satisfied if one of them is found in the query string.</p>
    pub fn values(&self) -> std::option::Option<&[crate::types::QueryStringKeyValuePair]> {
        self.values.as_deref()
    }
}
impl QueryStringConditionConfig {
    /// Creates a new builder-style object to manufacture [`QueryStringConditionConfig`](crate::types::QueryStringConditionConfig).
    pub fn builder() -> crate::types::builders::QueryStringConditionConfigBuilder {
        crate::types::builders::QueryStringConditionConfigBuilder::default()
    }
}

/// A builder for [`QueryStringConditionConfig`](crate::types::QueryStringConditionConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QueryStringConditionConfigBuilder {
    pub(crate) values: std::option::Option<std::vec::Vec<crate::types::QueryStringKeyValuePair>>,
}
impl QueryStringConditionConfigBuilder {
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The key/value pairs or values to find in the query string. The maximum size of each string is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). To search for a literal '*' or '?' character in a query string, you must escape these characters in <code>Values</code> using a '\' character.</p>
    /// <p>If you specify multiple key/value pairs or values, the condition is satisfied if one of them is found in the query string.</p>
    pub fn values(mut self, input: crate::types::QueryStringKeyValuePair) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = Some(v);
        self
    }
    /// <p>The key/value pairs or values to find in the query string. The maximum size of each string is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). To search for a literal '*' or '?' character in a query string, you must escape these characters in <code>Values</code> using a '\' character.</p>
    /// <p>If you specify multiple key/value pairs or values, the condition is satisfied if one of them is found in the query string.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::QueryStringKeyValuePair>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// Consumes the builder and constructs a [`QueryStringConditionConfig`](crate::types::QueryStringConditionConfig).
    pub fn build(self) -> crate::types::QueryStringConditionConfig {
        crate::types::QueryStringConditionConfig {
            values: self.values,
        }
    }
}
