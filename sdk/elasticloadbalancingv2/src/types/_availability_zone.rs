// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an Availability Zone.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AvailabilityZone {
    /// <p>The name of the Availability Zone.</p>
    pub zone_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the subnet. You can specify one subnet per Availability Zone.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>[Application Load Balancers on Outposts] The ID of the Outpost.</p>
    pub outpost_id: ::std::option::Option<::std::string::String>,
    /// <p>[Network Load Balancers] If you need static IP addresses for your load balancer, you can specify one Elastic IP address per Availability Zone when you create an internal-facing load balancer. For internal load balancers, you can specify a private IP address from the IPv4 range of the subnet.</p>
    pub load_balancer_addresses: ::std::option::Option<::std::vec::Vec<crate::types::LoadBalancerAddress>>,
}
impl AvailabilityZone {
    /// <p>The name of the Availability Zone.</p>
    pub fn zone_name(&self) -> ::std::option::Option<&str> {
        self.zone_name.as_deref()
    }
    /// <p>The ID of the subnet. You can specify one subnet per Availability Zone.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>[Application Load Balancers on Outposts] The ID of the Outpost.</p>
    pub fn outpost_id(&self) -> ::std::option::Option<&str> {
        self.outpost_id.as_deref()
    }
    /// <p>[Network Load Balancers] If you need static IP addresses for your load balancer, you can specify one Elastic IP address per Availability Zone when you create an internal-facing load balancer. For internal load balancers, you can specify a private IP address from the IPv4 range of the subnet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.load_balancer_addresses.is_none()`.
    pub fn load_balancer_addresses(&self) -> &[crate::types::LoadBalancerAddress] {
        self.load_balancer_addresses.as_deref().unwrap_or_default()
    }
}
impl AvailabilityZone {
    /// Creates a new builder-style object to manufacture [`AvailabilityZone`](crate::types::AvailabilityZone).
    pub fn builder() -> crate::types::builders::AvailabilityZoneBuilder {
        crate::types::builders::AvailabilityZoneBuilder::default()
    }
}

/// A builder for [`AvailabilityZone`](crate::types::AvailabilityZone).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AvailabilityZoneBuilder {
    pub(crate) zone_name: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) outpost_id: ::std::option::Option<::std::string::String>,
    pub(crate) load_balancer_addresses: ::std::option::Option<::std::vec::Vec<crate::types::LoadBalancerAddress>>,
}
impl AvailabilityZoneBuilder {
    /// <p>The name of the Availability Zone.</p>
    pub fn zone_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.zone_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Availability Zone.</p>
    pub fn set_zone_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.zone_name = input;
        self
    }
    /// <p>The name of the Availability Zone.</p>
    pub fn get_zone_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.zone_name
    }
    /// <p>The ID of the subnet. You can specify one subnet per Availability Zone.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the subnet. You can specify one subnet per Availability Zone.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The ID of the subnet. You can specify one subnet per Availability Zone.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>[Application Load Balancers on Outposts] The ID of the Outpost.</p>
    pub fn outpost_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>[Application Load Balancers on Outposts] The ID of the Outpost.</p>
    pub fn set_outpost_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_id = input;
        self
    }
    /// <p>[Application Load Balancers on Outposts] The ID of the Outpost.</p>
    pub fn get_outpost_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_id
    }
    /// Appends an item to `load_balancer_addresses`.
    ///
    /// To override the contents of this collection use [`set_load_balancer_addresses`](Self::set_load_balancer_addresses).
    ///
    /// <p>[Network Load Balancers] If you need static IP addresses for your load balancer, you can specify one Elastic IP address per Availability Zone when you create an internal-facing load balancer. For internal load balancers, you can specify a private IP address from the IPv4 range of the subnet.</p>
    pub fn load_balancer_addresses(mut self, input: crate::types::LoadBalancerAddress) -> Self {
        let mut v = self.load_balancer_addresses.unwrap_or_default();
        v.push(input);
        self.load_balancer_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>[Network Load Balancers] If you need static IP addresses for your load balancer, you can specify one Elastic IP address per Availability Zone when you create an internal-facing load balancer. For internal load balancers, you can specify a private IP address from the IPv4 range of the subnet.</p>
    pub fn set_load_balancer_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LoadBalancerAddress>>) -> Self {
        self.load_balancer_addresses = input;
        self
    }
    /// <p>[Network Load Balancers] If you need static IP addresses for your load balancer, you can specify one Elastic IP address per Availability Zone when you create an internal-facing load balancer. For internal load balancers, you can specify a private IP address from the IPv4 range of the subnet.</p>
    pub fn get_load_balancer_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LoadBalancerAddress>> {
        &self.load_balancer_addresses
    }
    /// Consumes the builder and constructs a [`AvailabilityZone`](crate::types::AvailabilityZone).
    pub fn build(self) -> crate::types::AvailabilityZone {
        crate::types::AvailabilityZone {
            zone_name: self.zone_name,
            subnet_id: self.subnet_id,
            outpost_id: self.outpost_id,
            load_balancer_addresses: self.load_balancer_addresses,
        }
    }
}
