// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a redirect action.</p>
/// <p>A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values.</p>
/// <p>You can reuse URI components using the following reserved keywords:</p>
/// <ul>
/// <li> <p>#{protocol}</p> </li>
/// <li> <p>#{host}</p> </li>
/// <li> <p>#{port}</p> </li>
/// <li> <p>#{path} (the leading "/" is removed)</p> </li>
/// <li> <p>#{query}</p> </li>
/// </ul>
/// <p>For example, you can change the path to "/new/#{path}", the hostname to "example.#{host}", or the query to "#{query}&amp;value=xyz".</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RedirectActionConfig {
    /// <p>The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.</p>
    pub protocol: ::std::option::Option<::std::string::String>,
    /// <p>The port. You can specify a value from 1 to 65535 or #{port}.</p>
    pub port: ::std::option::Option<::std::string::String>,
    /// <p>The hostname. This component is not percent-encoded. The hostname can contain #{host}.</p>
    pub host: ::std::option::Option<::std::string::String>,
    /// <p>The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.</p>
    pub path: ::std::option::Option<::std::string::String>,
    /// <p>The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.</p>
    pub query: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).</p>
    pub status_code: ::std::option::Option<crate::types::RedirectActionStatusCodeEnum>,
}
impl RedirectActionConfig {
    /// <p>The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.</p>
    pub fn protocol(&self) -> ::std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>The port. You can specify a value from 1 to 65535 or #{port}.</p>
    pub fn port(&self) -> ::std::option::Option<&str> {
        self.port.as_deref()
    }
    /// <p>The hostname. This component is not percent-encoded. The hostname can contain #{host}.</p>
    pub fn host(&self) -> ::std::option::Option<&str> {
        self.host.as_deref()
    }
    /// <p>The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.</p>
    pub fn path(&self) -> ::std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.</p>
    pub fn query(&self) -> ::std::option::Option<&str> {
        self.query.as_deref()
    }
    /// <p>The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).</p>
    pub fn status_code(&self) -> ::std::option::Option<&crate::types::RedirectActionStatusCodeEnum> {
        self.status_code.as_ref()
    }
}
impl RedirectActionConfig {
    /// Creates a new builder-style object to manufacture [`RedirectActionConfig`](crate::types::RedirectActionConfig).
    pub fn builder() -> crate::types::builders::RedirectActionConfigBuilder {
        crate::types::builders::RedirectActionConfigBuilder::default()
    }
}

/// A builder for [`RedirectActionConfig`](crate::types::RedirectActionConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RedirectActionConfigBuilder {
    pub(crate) protocol: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<::std::string::String>,
    pub(crate) host: ::std::option::Option<::std::string::String>,
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) query: ::std::option::Option<::std::string::String>,
    pub(crate) status_code: ::std::option::Option<crate::types::RedirectActionStatusCodeEnum>,
}
impl RedirectActionConfigBuilder {
    /// <p>The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.</p>
    pub fn protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.protocol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<::std::string::String> {
        &self.protocol
    }
    /// <p>The port. You can specify a value from 1 to 65535 or #{port}.</p>
    pub fn port(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.port = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The port. You can specify a value from 1 to 65535 or #{port}.</p>
    pub fn set_port(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port. You can specify a value from 1 to 65535 or #{port}.</p>
    pub fn get_port(&self) -> &::std::option::Option<::std::string::String> {
        &self.port
    }
    /// <p>The hostname. This component is not percent-encoded. The hostname can contain #{host}.</p>
    pub fn host(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hostname. This component is not percent-encoded. The hostname can contain #{host}.</p>
    pub fn set_host(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host = input;
        self
    }
    /// <p>The hostname. This component is not percent-encoded. The hostname can contain #{host}.</p>
    pub fn get_host(&self) -> &::std::option::Option<::std::string::String> {
        &self.host
    }
    /// <p>The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.</p>
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.</p>
    pub fn query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.</p>
    pub fn set_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query = input;
        self
    }
    /// <p>The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.</p>
    pub fn get_query(&self) -> &::std::option::Option<::std::string::String> {
        &self.query
    }
    /// <p>The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).</p>
    /// This field is required.
    pub fn status_code(mut self, input: crate::types::RedirectActionStatusCodeEnum) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<crate::types::RedirectActionStatusCodeEnum>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).</p>
    pub fn get_status_code(&self) -> &::std::option::Option<crate::types::RedirectActionStatusCodeEnum> {
        &self.status_code
    }
    /// Consumes the builder and constructs a [`RedirectActionConfig`](crate::types::RedirectActionConfig).
    pub fn build(self) -> crate::types::RedirectActionConfig {
        crate::types::RedirectActionConfig {
            protocol: self.protocol,
            port: self.port,
            host: self.host,
            path: self.path,
            query: self.query,
            status_code: self.status_code,
        }
    }
}
