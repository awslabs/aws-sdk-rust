// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the priorities for the rules for a listener.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RulePriorityPair {
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    #[doc(hidden)]
    pub rule_arn: std::option::Option<std::string::String>,
    /// <p>The rule priority.</p>
    #[doc(hidden)]
    pub priority: std::option::Option<i32>,
}
impl RulePriorityPair {
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub fn rule_arn(&self) -> std::option::Option<&str> {
        self.rule_arn.as_deref()
    }
    /// <p>The rule priority.</p>
    pub fn priority(&self) -> std::option::Option<i32> {
        self.priority
    }
}
impl RulePriorityPair {
    /// Creates a new builder-style object to manufacture [`RulePriorityPair`](crate::types::RulePriorityPair).
    pub fn builder() -> crate::types::builders::RulePriorityPairBuilder {
        crate::types::builders::RulePriorityPairBuilder::default()
    }
}

/// A builder for [`RulePriorityPair`](crate::types::RulePriorityPair).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RulePriorityPairBuilder {
    pub(crate) rule_arn: std::option::Option<std::string::String>,
    pub(crate) priority: std::option::Option<i32>,
}
impl RulePriorityPairBuilder {
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub fn rule_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    pub fn set_rule_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_arn = input;
        self
    }
    /// <p>The rule priority.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = Some(input);
        self
    }
    /// <p>The rule priority.</p>
    pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// Consumes the builder and constructs a [`RulePriorityPair`](crate::types::RulePriorityPair).
    pub fn build(self) -> crate::types::RulePriorityPair {
        crate::types::RulePriorityPair {
            rule_arn: self.rule_arn,
            priority: self.priority,
        }
    }
}
