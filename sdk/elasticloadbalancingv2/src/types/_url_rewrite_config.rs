// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a URL rewrite transform. This transform matches a pattern in the request URL and replaces it with the specified string.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UrlRewriteConfig {
    /// <p>The URL rewrite transform to apply to the request. The transform consists of a regular expression to match and a replacement string.</p>
    pub rewrites: ::std::option::Option<::std::vec::Vec<crate::types::RewriteConfig>>,
}
impl UrlRewriteConfig {
    /// <p>The URL rewrite transform to apply to the request. The transform consists of a regular expression to match and a replacement string.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rewrites.is_none()`.
    pub fn rewrites(&self) -> &[crate::types::RewriteConfig] {
        self.rewrites.as_deref().unwrap_or_default()
    }
}
impl UrlRewriteConfig {
    /// Creates a new builder-style object to manufacture [`UrlRewriteConfig`](crate::types::UrlRewriteConfig).
    pub fn builder() -> crate::types::builders::UrlRewriteConfigBuilder {
        crate::types::builders::UrlRewriteConfigBuilder::default()
    }
}

/// A builder for [`UrlRewriteConfig`](crate::types::UrlRewriteConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UrlRewriteConfigBuilder {
    pub(crate) rewrites: ::std::option::Option<::std::vec::Vec<crate::types::RewriteConfig>>,
}
impl UrlRewriteConfigBuilder {
    /// Appends an item to `rewrites`.
    ///
    /// To override the contents of this collection use [`set_rewrites`](Self::set_rewrites).
    ///
    /// <p>The URL rewrite transform to apply to the request. The transform consists of a regular expression to match and a replacement string.</p>
    pub fn rewrites(mut self, input: crate::types::RewriteConfig) -> Self {
        let mut v = self.rewrites.unwrap_or_default();
        v.push(input);
        self.rewrites = ::std::option::Option::Some(v);
        self
    }
    /// <p>The URL rewrite transform to apply to the request. The transform consists of a regular expression to match and a replacement string.</p>
    pub fn set_rewrites(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RewriteConfig>>) -> Self {
        self.rewrites = input;
        self
    }
    /// <p>The URL rewrite transform to apply to the request. The transform consists of a regular expression to match and a replacement string.</p>
    pub fn get_rewrites(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RewriteConfig>> {
        &self.rewrites
    }
    /// Consumes the builder and constructs a [`UrlRewriteConfig`](crate::types::UrlRewriteConfig).
    pub fn build(self) -> crate::types::UrlRewriteConfig {
        crate::types::UrlRewriteConfig { rewrites: self.rewrites }
    }
}
