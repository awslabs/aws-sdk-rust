// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a policy used for SSL negotiation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SslPolicy {
    /// <p>The protocols.</p>
    #[doc(hidden)]
    pub ssl_protocols: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The ciphers.</p>
    #[doc(hidden)]
    pub ciphers: std::option::Option<std::vec::Vec<crate::types::Cipher>>,
    /// <p>The name of the policy.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The supported load balancers. </p>
    #[doc(hidden)]
    pub supported_load_balancer_types: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl SslPolicy {
    /// <p>The protocols.</p>
    pub fn ssl_protocols(&self) -> std::option::Option<&[std::string::String]> {
        self.ssl_protocols.as_deref()
    }
    /// <p>The ciphers.</p>
    pub fn ciphers(&self) -> std::option::Option<&[crate::types::Cipher]> {
        self.ciphers.as_deref()
    }
    /// <p>The name of the policy.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The supported load balancers. </p>
    pub fn supported_load_balancer_types(&self) -> std::option::Option<&[std::string::String]> {
        self.supported_load_balancer_types.as_deref()
    }
}
impl SslPolicy {
    /// Creates a new builder-style object to manufacture [`SslPolicy`](crate::types::SslPolicy).
    pub fn builder() -> crate::types::builders::SslPolicyBuilder {
        crate::types::builders::SslPolicyBuilder::default()
    }
}

/// A builder for [`SslPolicy`](crate::types::SslPolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SslPolicyBuilder {
    pub(crate) ssl_protocols: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) ciphers: std::option::Option<std::vec::Vec<crate::types::Cipher>>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) supported_load_balancer_types:
        std::option::Option<std::vec::Vec<std::string::String>>,
}
impl SslPolicyBuilder {
    /// Appends an item to `ssl_protocols`.
    ///
    /// To override the contents of this collection use [`set_ssl_protocols`](Self::set_ssl_protocols).
    ///
    /// <p>The protocols.</p>
    pub fn ssl_protocols(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.ssl_protocols.unwrap_or_default();
        v.push(input.into());
        self.ssl_protocols = Some(v);
        self
    }
    /// <p>The protocols.</p>
    pub fn set_ssl_protocols(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.ssl_protocols = input;
        self
    }
    /// Appends an item to `ciphers`.
    ///
    /// To override the contents of this collection use [`set_ciphers`](Self::set_ciphers).
    ///
    /// <p>The ciphers.</p>
    pub fn ciphers(mut self, input: crate::types::Cipher) -> Self {
        let mut v = self.ciphers.unwrap_or_default();
        v.push(input);
        self.ciphers = Some(v);
        self
    }
    /// <p>The ciphers.</p>
    pub fn set_ciphers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Cipher>>,
    ) -> Self {
        self.ciphers = input;
        self
    }
    /// <p>The name of the policy.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the policy.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `supported_load_balancer_types`.
    ///
    /// To override the contents of this collection use [`set_supported_load_balancer_types`](Self::set_supported_load_balancer_types).
    ///
    /// <p> The supported load balancers. </p>
    pub fn supported_load_balancer_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.supported_load_balancer_types.unwrap_or_default();
        v.push(input.into());
        self.supported_load_balancer_types = Some(v);
        self
    }
    /// <p> The supported load balancers. </p>
    pub fn set_supported_load_balancer_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.supported_load_balancer_types = input;
        self
    }
    /// Consumes the builder and constructs a [`SslPolicy`](crate::types::SslPolicy).
    pub fn build(self) -> crate::types::SslPolicy {
        crate::types::SslPolicy {
            ssl_protocols: self.ssl_protocols,
            ciphers: self.ciphers,
            name: self.name,
            supported_load_balancer_types: self.supported_load_balancer_types,
        }
    }
}
