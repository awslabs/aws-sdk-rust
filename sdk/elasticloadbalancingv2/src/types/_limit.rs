// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an Elastic Load Balancing resource limit for your Amazon Web Services account.</p>
/// <p>For more information, see the following:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html">Quotas for your Application Load Balancers</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html">Quotas for your Network Load Balancers</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html">Quotas for your Gateway Load Balancers</a></p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Limit {
    /// <p>The name of the limit.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The maximum value of the limit.</p>
    pub max: ::std::option::Option<::std::string::String>,
}
impl Limit {
    /// <p>The name of the limit.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The maximum value of the limit.</p>
    pub fn max(&self) -> ::std::option::Option<&str> {
        self.max.as_deref()
    }
}
impl Limit {
    /// Creates a new builder-style object to manufacture [`Limit`](crate::types::Limit).
    pub fn builder() -> crate::types::builders::LimitBuilder {
        crate::types::builders::LimitBuilder::default()
    }
}

/// A builder for [`Limit`](crate::types::Limit).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LimitBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) max: ::std::option::Option<::std::string::String>,
}
impl LimitBuilder {
    /// <p>The name of the limit.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the limit.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the limit.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The maximum value of the limit.</p>
    pub fn max(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maximum value of the limit.</p>
    pub fn set_max(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max = input;
        self
    }
    /// <p>The maximum value of the limit.</p>
    pub fn get_max(&self) -> &::std::option::Option<::std::string::String> {
        &self.max
    }
    /// Consumes the builder and constructs a [`Limit`](crate::types::Limit).
    pub fn build(self) -> crate::types::Limit {
        crate::types::Limit {
            name: self.name,
            max: self.max,
        }
    }
}
