// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an Elastic Load Balancing resource limit for your Amazon Web Services account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Limit {
    /// <p>The name of the limit. The possible values are:</p>
    /// <ul>
    /// <li> <p>application-load-balancers</p> </li>
    /// <li> <p>condition-values-per-alb-rule</p> </li>
    /// <li> <p>condition-wildcards-per-alb-rule</p> </li>
    /// <li> <p>gateway-load-balancers</p> </li>
    /// <li> <p>gateway-load-balancers-per-vpc</p> </li>
    /// <li> <p>geneve-target-groups</p> </li>
    /// <li> <p>listeners-per-application-load-balancer</p> </li>
    /// <li> <p>listeners-per-network-load-balancer</p> </li>
    /// <li> <p>network-load-balancers</p> </li>
    /// <li> <p>rules-per-application-load-balancer</p> </li>
    /// <li> <p>target-groups</p> </li>
    /// <li> <p>target-groups-per-action-on-application-load-balancer</p> </li>
    /// <li> <p>target-groups-per-action-on-network-load-balancer</p> </li>
    /// <li> <p>target-groups-per-application-load-balancer</p> </li>
    /// <li> <p>targets-per-application-load-balancer</p> </li>
    /// <li> <p>targets-per-availability-zone-per-gateway-load-balancer</p> </li>
    /// <li> <p>targets-per-availability-zone-per-network-load-balancer</p> </li>
    /// <li> <p>targets-per-network-load-balancer</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The maximum value of the limit.</p>
    #[doc(hidden)]
    pub max: std::option::Option<std::string::String>,
}
impl Limit {
    /// <p>The name of the limit. The possible values are:</p>
    /// <ul>
    /// <li> <p>application-load-balancers</p> </li>
    /// <li> <p>condition-values-per-alb-rule</p> </li>
    /// <li> <p>condition-wildcards-per-alb-rule</p> </li>
    /// <li> <p>gateway-load-balancers</p> </li>
    /// <li> <p>gateway-load-balancers-per-vpc</p> </li>
    /// <li> <p>geneve-target-groups</p> </li>
    /// <li> <p>listeners-per-application-load-balancer</p> </li>
    /// <li> <p>listeners-per-network-load-balancer</p> </li>
    /// <li> <p>network-load-balancers</p> </li>
    /// <li> <p>rules-per-application-load-balancer</p> </li>
    /// <li> <p>target-groups</p> </li>
    /// <li> <p>target-groups-per-action-on-application-load-balancer</p> </li>
    /// <li> <p>target-groups-per-action-on-network-load-balancer</p> </li>
    /// <li> <p>target-groups-per-application-load-balancer</p> </li>
    /// <li> <p>targets-per-application-load-balancer</p> </li>
    /// <li> <p>targets-per-availability-zone-per-gateway-load-balancer</p> </li>
    /// <li> <p>targets-per-availability-zone-per-network-load-balancer</p> </li>
    /// <li> <p>targets-per-network-load-balancer</p> </li>
    /// </ul>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The maximum value of the limit.</p>
    pub fn max(&self) -> std::option::Option<&str> {
        self.max.as_deref()
    }
}
impl Limit {
    /// Creates a new builder-style object to manufacture [`Limit`](crate::types::Limit).
    pub fn builder() -> crate::types::builders::LimitBuilder {
        crate::types::builders::LimitBuilder::default()
    }
}

/// A builder for [`Limit`](crate::types::Limit).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LimitBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) max: std::option::Option<std::string::String>,
}
impl LimitBuilder {
    /// <p>The name of the limit. The possible values are:</p>
    /// <ul>
    /// <li> <p>application-load-balancers</p> </li>
    /// <li> <p>condition-values-per-alb-rule</p> </li>
    /// <li> <p>condition-wildcards-per-alb-rule</p> </li>
    /// <li> <p>gateway-load-balancers</p> </li>
    /// <li> <p>gateway-load-balancers-per-vpc</p> </li>
    /// <li> <p>geneve-target-groups</p> </li>
    /// <li> <p>listeners-per-application-load-balancer</p> </li>
    /// <li> <p>listeners-per-network-load-balancer</p> </li>
    /// <li> <p>network-load-balancers</p> </li>
    /// <li> <p>rules-per-application-load-balancer</p> </li>
    /// <li> <p>target-groups</p> </li>
    /// <li> <p>target-groups-per-action-on-application-load-balancer</p> </li>
    /// <li> <p>target-groups-per-action-on-network-load-balancer</p> </li>
    /// <li> <p>target-groups-per-application-load-balancer</p> </li>
    /// <li> <p>targets-per-application-load-balancer</p> </li>
    /// <li> <p>targets-per-availability-zone-per-gateway-load-balancer</p> </li>
    /// <li> <p>targets-per-availability-zone-per-network-load-balancer</p> </li>
    /// <li> <p>targets-per-network-load-balancer</p> </li>
    /// </ul>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the limit. The possible values are:</p>
    /// <ul>
    /// <li> <p>application-load-balancers</p> </li>
    /// <li> <p>condition-values-per-alb-rule</p> </li>
    /// <li> <p>condition-wildcards-per-alb-rule</p> </li>
    /// <li> <p>gateway-load-balancers</p> </li>
    /// <li> <p>gateway-load-balancers-per-vpc</p> </li>
    /// <li> <p>geneve-target-groups</p> </li>
    /// <li> <p>listeners-per-application-load-balancer</p> </li>
    /// <li> <p>listeners-per-network-load-balancer</p> </li>
    /// <li> <p>network-load-balancers</p> </li>
    /// <li> <p>rules-per-application-load-balancer</p> </li>
    /// <li> <p>target-groups</p> </li>
    /// <li> <p>target-groups-per-action-on-application-load-balancer</p> </li>
    /// <li> <p>target-groups-per-action-on-network-load-balancer</p> </li>
    /// <li> <p>target-groups-per-application-load-balancer</p> </li>
    /// <li> <p>targets-per-application-load-balancer</p> </li>
    /// <li> <p>targets-per-availability-zone-per-gateway-load-balancer</p> </li>
    /// <li> <p>targets-per-availability-zone-per-network-load-balancer</p> </li>
    /// <li> <p>targets-per-network-load-balancer</p> </li>
    /// </ul>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The maximum value of the limit.</p>
    pub fn max(mut self, input: impl Into<std::string::String>) -> Self {
        self.max = Some(input.into());
        self
    }
    /// <p>The maximum value of the limit.</p>
    pub fn set_max(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.max = input;
        self
    }
    /// Consumes the builder and constructs a [`Limit`](crate::types::Limit).
    pub fn build(self) -> crate::types::Limit {
        crate::types::Limit {
            name: self.name,
            max: self.max,
        }
    }
}
