// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a transform to apply to requests that match a rule. Transforms are applied to requests before they are sent to targets.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleTransform {
    /// <p>The type of transform.</p>
    /// <ul>
    /// <li>
    /// <p><code>host-header-rewrite</code> - Rewrite the host header.</p></li>
    /// <li>
    /// <p><code>url-rewrite</code> - Rewrite the request URL.</p></li>
    /// </ul>
    pub r#type: ::std::option::Option<crate::types::TransformTypeEnum>,
    /// <p>Information about a host header rewrite transform. This transform modifies the host header in an HTTP request. Specify only when <code>Type</code> is <code>host-header-rewrite</code>.</p>
    pub host_header_rewrite_config: ::std::option::Option<crate::types::HostHeaderRewriteConfig>,
    /// <p>Information about a URL rewrite transform. This transform modifies the request URL. Specify only when <code>Type</code> is <code>url-rewrite</code>.</p>
    pub url_rewrite_config: ::std::option::Option<crate::types::UrlRewriteConfig>,
}
impl RuleTransform {
    /// <p>The type of transform.</p>
    /// <ul>
    /// <li>
    /// <p><code>host-header-rewrite</code> - Rewrite the host header.</p></li>
    /// <li>
    /// <p><code>url-rewrite</code> - Rewrite the request URL.</p></li>
    /// </ul>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::TransformTypeEnum> {
        self.r#type.as_ref()
    }
    /// <p>Information about a host header rewrite transform. This transform modifies the host header in an HTTP request. Specify only when <code>Type</code> is <code>host-header-rewrite</code>.</p>
    pub fn host_header_rewrite_config(&self) -> ::std::option::Option<&crate::types::HostHeaderRewriteConfig> {
        self.host_header_rewrite_config.as_ref()
    }
    /// <p>Information about a URL rewrite transform. This transform modifies the request URL. Specify only when <code>Type</code> is <code>url-rewrite</code>.</p>
    pub fn url_rewrite_config(&self) -> ::std::option::Option<&crate::types::UrlRewriteConfig> {
        self.url_rewrite_config.as_ref()
    }
}
impl RuleTransform {
    /// Creates a new builder-style object to manufacture [`RuleTransform`](crate::types::RuleTransform).
    pub fn builder() -> crate::types::builders::RuleTransformBuilder {
        crate::types::builders::RuleTransformBuilder::default()
    }
}

/// A builder for [`RuleTransform`](crate::types::RuleTransform).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleTransformBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::TransformTypeEnum>,
    pub(crate) host_header_rewrite_config: ::std::option::Option<crate::types::HostHeaderRewriteConfig>,
    pub(crate) url_rewrite_config: ::std::option::Option<crate::types::UrlRewriteConfig>,
}
impl RuleTransformBuilder {
    /// <p>The type of transform.</p>
    /// <ul>
    /// <li>
    /// <p><code>host-header-rewrite</code> - Rewrite the host header.</p></li>
    /// <li>
    /// <p><code>url-rewrite</code> - Rewrite the request URL.</p></li>
    /// </ul>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::TransformTypeEnum) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of transform.</p>
    /// <ul>
    /// <li>
    /// <p><code>host-header-rewrite</code> - Rewrite the host header.</p></li>
    /// <li>
    /// <p><code>url-rewrite</code> - Rewrite the request URL.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TransformTypeEnum>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of transform.</p>
    /// <ul>
    /// <li>
    /// <p><code>host-header-rewrite</code> - Rewrite the host header.</p></li>
    /// <li>
    /// <p><code>url-rewrite</code> - Rewrite the request URL.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TransformTypeEnum> {
        &self.r#type
    }
    /// <p>Information about a host header rewrite transform. This transform modifies the host header in an HTTP request. Specify only when <code>Type</code> is <code>host-header-rewrite</code>.</p>
    pub fn host_header_rewrite_config(mut self, input: crate::types::HostHeaderRewriteConfig) -> Self {
        self.host_header_rewrite_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about a host header rewrite transform. This transform modifies the host header in an HTTP request. Specify only when <code>Type</code> is <code>host-header-rewrite</code>.</p>
    pub fn set_host_header_rewrite_config(mut self, input: ::std::option::Option<crate::types::HostHeaderRewriteConfig>) -> Self {
        self.host_header_rewrite_config = input;
        self
    }
    /// <p>Information about a host header rewrite transform. This transform modifies the host header in an HTTP request. Specify only when <code>Type</code> is <code>host-header-rewrite</code>.</p>
    pub fn get_host_header_rewrite_config(&self) -> &::std::option::Option<crate::types::HostHeaderRewriteConfig> {
        &self.host_header_rewrite_config
    }
    /// <p>Information about a URL rewrite transform. This transform modifies the request URL. Specify only when <code>Type</code> is <code>url-rewrite</code>.</p>
    pub fn url_rewrite_config(mut self, input: crate::types::UrlRewriteConfig) -> Self {
        self.url_rewrite_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about a URL rewrite transform. This transform modifies the request URL. Specify only when <code>Type</code> is <code>url-rewrite</code>.</p>
    pub fn set_url_rewrite_config(mut self, input: ::std::option::Option<crate::types::UrlRewriteConfig>) -> Self {
        self.url_rewrite_config = input;
        self
    }
    /// <p>Information about a URL rewrite transform. This transform modifies the request URL. Specify only when <code>Type</code> is <code>url-rewrite</code>.</p>
    pub fn get_url_rewrite_config(&self) -> &::std::option::Option<crate::types::UrlRewriteConfig> {
        &self.url_rewrite_config
    }
    /// Consumes the builder and constructs a [`RuleTransform`](crate::types::RuleTransform).
    pub fn build(self) -> crate::types::RuleTransform {
        crate::types::RuleTransform {
            r#type: self.r#type,
            host_header_rewrite_config: self.host_header_rewrite_config,
            url_rewrite_config: self.url_rewrite_config,
        }
    }
}
