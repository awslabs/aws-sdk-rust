// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an action.</p>
/// <p>Each rule must include exactly one of the following types of actions: <code>forward</code>, <code>fixed-response</code>, or <code>redirect</code>, and it must be the last action to be performed.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Action {
    /// <p>The type of action.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ActionTypeEnum>,
    /// <p>The Amazon Resource Name (ARN) of the target group. Specify only when <code>Type</code> is <code>forward</code> and you want to route to a single target group. To route to one or more target groups, use <code>ForwardConfig</code> instead.</p>
    #[doc(hidden)]
    pub target_group_arn: std::option::Option<std::string::String>,
    /// <p>[HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when <code>Type</code> is <code>authenticate-oidc</code>.</p>
    #[doc(hidden)]
    pub authenticate_oidc_config: std::option::Option<crate::types::AuthenticateOidcActionConfig>,
    /// <p>[HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when <code>Type</code> is <code>authenticate-cognito</code>.</p>
    #[doc(hidden)]
    pub authenticate_cognito_config:
        std::option::Option<crate::types::AuthenticateCognitoActionConfig>,
    /// <p>The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.</p>
    #[doc(hidden)]
    pub order: std::option::Option<i32>,
    /// <p>[Application Load Balancer] Information for creating a redirect action. Specify only when <code>Type</code> is <code>redirect</code>.</p>
    #[doc(hidden)]
    pub redirect_config: std::option::Option<crate::types::RedirectActionConfig>,
    /// <p>[Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when <code>Type</code> is <code>fixed-response</code>.</p>
    #[doc(hidden)]
    pub fixed_response_config: std::option::Option<crate::types::FixedResponseActionConfig>,
    /// <p>Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when <code>Type</code> is <code>forward</code>. If you specify both <code>ForwardConfig</code> and <code>TargetGroupArn</code>, you can specify only one target group using <code>ForwardConfig</code> and it must be the same target group specified in <code>TargetGroupArn</code>.</p>
    #[doc(hidden)]
    pub forward_config: std::option::Option<crate::types::ForwardActionConfig>,
}
impl Action {
    /// <p>The type of action.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ActionTypeEnum> {
        self.r#type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the target group. Specify only when <code>Type</code> is <code>forward</code> and you want to route to a single target group. To route to one or more target groups, use <code>ForwardConfig</code> instead.</p>
    pub fn target_group_arn(&self) -> std::option::Option<&str> {
        self.target_group_arn.as_deref()
    }
    /// <p>[HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when <code>Type</code> is <code>authenticate-oidc</code>.</p>
    pub fn authenticate_oidc_config(
        &self,
    ) -> std::option::Option<&crate::types::AuthenticateOidcActionConfig> {
        self.authenticate_oidc_config.as_ref()
    }
    /// <p>[HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when <code>Type</code> is <code>authenticate-cognito</code>.</p>
    pub fn authenticate_cognito_config(
        &self,
    ) -> std::option::Option<&crate::types::AuthenticateCognitoActionConfig> {
        self.authenticate_cognito_config.as_ref()
    }
    /// <p>The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.</p>
    pub fn order(&self) -> std::option::Option<i32> {
        self.order
    }
    /// <p>[Application Load Balancer] Information for creating a redirect action. Specify only when <code>Type</code> is <code>redirect</code>.</p>
    pub fn redirect_config(&self) -> std::option::Option<&crate::types::RedirectActionConfig> {
        self.redirect_config.as_ref()
    }
    /// <p>[Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when <code>Type</code> is <code>fixed-response</code>.</p>
    pub fn fixed_response_config(
        &self,
    ) -> std::option::Option<&crate::types::FixedResponseActionConfig> {
        self.fixed_response_config.as_ref()
    }
    /// <p>Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when <code>Type</code> is <code>forward</code>. If you specify both <code>ForwardConfig</code> and <code>TargetGroupArn</code>, you can specify only one target group using <code>ForwardConfig</code> and it must be the same target group specified in <code>TargetGroupArn</code>.</p>
    pub fn forward_config(&self) -> std::option::Option<&crate::types::ForwardActionConfig> {
        self.forward_config.as_ref()
    }
}
impl Action {
    /// Creates a new builder-style object to manufacture [`Action`](crate::types::Action).
    pub fn builder() -> crate::types::builders::ActionBuilder {
        crate::types::builders::ActionBuilder::default()
    }
}

/// A builder for [`Action`](crate::types::Action).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionBuilder {
    pub(crate) r#type: std::option::Option<crate::types::ActionTypeEnum>,
    pub(crate) target_group_arn: std::option::Option<std::string::String>,
    pub(crate) authenticate_oidc_config:
        std::option::Option<crate::types::AuthenticateOidcActionConfig>,
    pub(crate) authenticate_cognito_config:
        std::option::Option<crate::types::AuthenticateCognitoActionConfig>,
    pub(crate) order: std::option::Option<i32>,
    pub(crate) redirect_config: std::option::Option<crate::types::RedirectActionConfig>,
    pub(crate) fixed_response_config: std::option::Option<crate::types::FixedResponseActionConfig>,
    pub(crate) forward_config: std::option::Option<crate::types::ForwardActionConfig>,
}
impl ActionBuilder {
    /// <p>The type of action.</p>
    pub fn r#type(mut self, input: crate::types::ActionTypeEnum) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of action.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ActionTypeEnum>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target group. Specify only when <code>Type</code> is <code>forward</code> and you want to route to a single target group. To route to one or more target groups, use <code>ForwardConfig</code> instead.</p>
    pub fn target_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_group_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target group. Specify only when <code>Type</code> is <code>forward</code> and you want to route to a single target group. To route to one or more target groups, use <code>ForwardConfig</code> instead.</p>
    pub fn set_target_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_group_arn = input;
        self
    }
    /// <p>[HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when <code>Type</code> is <code>authenticate-oidc</code>.</p>
    pub fn authenticate_oidc_config(
        mut self,
        input: crate::types::AuthenticateOidcActionConfig,
    ) -> Self {
        self.authenticate_oidc_config = Some(input);
        self
    }
    /// <p>[HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when <code>Type</code> is <code>authenticate-oidc</code>.</p>
    pub fn set_authenticate_oidc_config(
        mut self,
        input: std::option::Option<crate::types::AuthenticateOidcActionConfig>,
    ) -> Self {
        self.authenticate_oidc_config = input;
        self
    }
    /// <p>[HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when <code>Type</code> is <code>authenticate-cognito</code>.</p>
    pub fn authenticate_cognito_config(
        mut self,
        input: crate::types::AuthenticateCognitoActionConfig,
    ) -> Self {
        self.authenticate_cognito_config = Some(input);
        self
    }
    /// <p>[HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when <code>Type</code> is <code>authenticate-cognito</code>.</p>
    pub fn set_authenticate_cognito_config(
        mut self,
        input: std::option::Option<crate::types::AuthenticateCognitoActionConfig>,
    ) -> Self {
        self.authenticate_cognito_config = input;
        self
    }
    /// <p>The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.</p>
    pub fn order(mut self, input: i32) -> Self {
        self.order = Some(input);
        self
    }
    /// <p>The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.</p>
    pub fn set_order(mut self, input: std::option::Option<i32>) -> Self {
        self.order = input;
        self
    }
    /// <p>[Application Load Balancer] Information for creating a redirect action. Specify only when <code>Type</code> is <code>redirect</code>.</p>
    pub fn redirect_config(mut self, input: crate::types::RedirectActionConfig) -> Self {
        self.redirect_config = Some(input);
        self
    }
    /// <p>[Application Load Balancer] Information for creating a redirect action. Specify only when <code>Type</code> is <code>redirect</code>.</p>
    pub fn set_redirect_config(
        mut self,
        input: std::option::Option<crate::types::RedirectActionConfig>,
    ) -> Self {
        self.redirect_config = input;
        self
    }
    /// <p>[Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when <code>Type</code> is <code>fixed-response</code>.</p>
    pub fn fixed_response_config(mut self, input: crate::types::FixedResponseActionConfig) -> Self {
        self.fixed_response_config = Some(input);
        self
    }
    /// <p>[Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when <code>Type</code> is <code>fixed-response</code>.</p>
    pub fn set_fixed_response_config(
        mut self,
        input: std::option::Option<crate::types::FixedResponseActionConfig>,
    ) -> Self {
        self.fixed_response_config = input;
        self
    }
    /// <p>Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when <code>Type</code> is <code>forward</code>. If you specify both <code>ForwardConfig</code> and <code>TargetGroupArn</code>, you can specify only one target group using <code>ForwardConfig</code> and it must be the same target group specified in <code>TargetGroupArn</code>.</p>
    pub fn forward_config(mut self, input: crate::types::ForwardActionConfig) -> Self {
        self.forward_config = Some(input);
        self
    }
    /// <p>Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when <code>Type</code> is <code>forward</code>. If you specify both <code>ForwardConfig</code> and <code>TargetGroupArn</code>, you can specify only one target group using <code>ForwardConfig</code> and it must be the same target group specified in <code>TargetGroupArn</code>.</p>
    pub fn set_forward_config(
        mut self,
        input: std::option::Option<crate::types::ForwardActionConfig>,
    ) -> Self {
        self.forward_config = input;
        self
    }
    /// Consumes the builder and constructs a [`Action`](crate::types::Action).
    pub fn build(self) -> crate::types::Action {
        crate::types::Action {
            r#type: self.r#type,
            target_group_arn: self.target_group_arn,
            authenticate_oidc_config: self.authenticate_oidc_config,
            authenticate_cognito_config: self.authenticate_cognito_config,
            order: self.order,
            redirect_config: self.redirect_config,
            fixed_response_config: self.fixed_response_config,
            forward_config: self.forward_config,
        }
    }
}
