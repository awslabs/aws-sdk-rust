#![allow(clippy::module_inception)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::wrong_self_convention)]
#![allow(clippy::should_implement_trait)]
#![allow(clippy::blacklisted_name)]
#![allow(clippy::vec_init_then_push)]
//! <p>IoT Analytics allows you to collect large amounts of device data, process messages, and store them.
//! You can then query the data and run sophisticated analytics on it.  IoT Analytics enables advanced
//! data exploration through integration with Jupyter Notebooks and data visualization through integration
//! with Amazon QuickSight.</p>
//! <p>Traditional analytics and business intelligence tools are designed to process structured data. IoT data
//! often comes from devices that record noisy processes (such as temperature, motion, or sound). As a result
//! the data from these devices can have significant gaps, corrupted messages, and false readings that must be
//! cleaned up before analysis can occur. Also, IoT data is often only meaningful in the context of other data
//! from external sources. </p>
//! <p>IoT Analytics automates the steps required to analyze data from IoT devices. IoT Analytics
//! filters, transforms, and enriches IoT data before storing it in a time-series data store for analysis. You
//! can set up the service to collect only the data you need from your devices, apply mathematical transforms
//! to process the data, and enrich the data with device-specific metadata such as device type and location
//! before storing it. Then, you can analyze your data by running queries using the built-in SQL query engine,
//! or perform more complex analytics and machine learning inference. IoT Analytics includes pre-built models
//! for common IoT use cases so you can answer questions like which devices are about to fail or which customers
//! are at risk of abandoning their wearable devices.</p>

// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use error_meta::Error;

pub use config::Config;

mod aws_endpoint;
#[cfg(feature = "client")]
pub mod client;
pub mod config;
pub mod error;
mod error_meta;
pub mod input;
mod json_deser;
mod json_errors;
mod json_ser;
pub mod model;
mod no_credentials;
pub mod operation;
mod operation_deser;
mod operation_ser;
pub mod output;
pub static PKG_VERSION: &str = env!("CARGO_PKG_VERSION");
pub use smithy_http::byte_stream::ByteStream;
pub use smithy_http::result::SdkError;
pub use smithy_types::Blob;
static API_METADATA: aws_http::user_agent::ApiMetadata =
    aws_http::user_agent::ApiMetadata::new("iotanalytics", PKG_VERSION);
pub use aws_types::region::Region;
pub use aws_types::Credentials;
#[cfg(feature = "client")]
pub use client::Client;
pub use smithy_http::endpoint::Endpoint;
