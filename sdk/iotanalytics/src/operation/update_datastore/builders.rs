// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_datastore::_update_datastore_output::UpdateDatastoreOutputBuilder;

pub use crate::operation::update_datastore::_update_datastore_input::UpdateDatastoreInputBuilder;

/// Fluent builder constructing a request to `UpdateDatastore`.
///
/// <p>Used to update the settings of a data store.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDatastoreFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_datastore::builders::UpdateDatastoreInputBuilder,
}
impl UpdateDatastoreFluentBuilder {
    /// Creates a new `UpdateDatastore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_datastore::UpdateDatastore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_datastore::UpdateDatastoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_datastore::UpdateDatastoreOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_datastore::UpdateDatastoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the data store to be updated.</p>
    pub fn datastore_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.datastore_name(input.into());
        self
    }
    /// <p>The name of the data store to be updated.</p>
    pub fn set_datastore_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_datastore_name(input);
        self
    }
    /// <p>How long, in days, message data is kept for the data store. The retention period can't be updated if the data store's Amazon S3 storage is customer-managed.</p>
    pub fn retention_period(mut self, input: crate::types::RetentionPeriod) -> Self {
        self.inner = self.inner.retention_period(input);
        self
    }
    /// <p>How long, in days, message data is kept for the data store. The retention period can't be updated if the data store's Amazon S3 storage is customer-managed.</p>
    pub fn set_retention_period(
        mut self,
        input: std::option::Option<crate::types::RetentionPeriod>,
    ) -> Self {
        self.inner = self.inner.set_retention_period(input);
        self
    }
    /// <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    pub fn datastore_storage(mut self, input: crate::types::DatastoreStorage) -> Self {
        self.inner = self.inner.datastore_storage(input);
        self
    }
    /// <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    pub fn set_datastore_storage(
        mut self,
        input: std::option::Option<crate::types::DatastoreStorage>,
    ) -> Self {
        self.inner = self.inner.set_datastore_storage(input);
        self
    }
    /// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
    /// <p>The default file format is JSON. You can specify only one format.</p>
    /// <p>You can't change the file format after you create the data store.</p>
    pub fn file_format_configuration(
        mut self,
        input: crate::types::FileFormatConfiguration,
    ) -> Self {
        self.inner = self.inner.file_format_configuration(input);
        self
    }
    /// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
    /// <p>The default file format is JSON. You can specify only one format.</p>
    /// <p>You can't change the file format after you create the data store.</p>
    pub fn set_file_format_configuration(
        mut self,
        input: std::option::Option<crate::types::FileFormatConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_file_format_configuration(input);
        self
    }
}
