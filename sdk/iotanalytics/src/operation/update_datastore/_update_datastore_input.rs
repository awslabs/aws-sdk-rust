// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDatastoreInput {
    /// <p>The name of the data store to be updated.</p>
    #[doc(hidden)]
    pub datastore_name: std::option::Option<std::string::String>,
    /// <p>How long, in days, message data is kept for the data store. The retention period can't be updated if the data store's Amazon S3 storage is customer-managed.</p>
    #[doc(hidden)]
    pub retention_period: std::option::Option<crate::types::RetentionPeriod>,
    /// <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    #[doc(hidden)]
    pub datastore_storage: std::option::Option<crate::types::DatastoreStorage>,
    /// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
    /// <p>The default file format is JSON. You can specify only one format.</p>
    /// <p>You can't change the file format after you create the data store.</p>
    #[doc(hidden)]
    pub file_format_configuration: std::option::Option<crate::types::FileFormatConfiguration>,
}
impl UpdateDatastoreInput {
    /// <p>The name of the data store to be updated.</p>
    pub fn datastore_name(&self) -> std::option::Option<&str> {
        self.datastore_name.as_deref()
    }
    /// <p>How long, in days, message data is kept for the data store. The retention period can't be updated if the data store's Amazon S3 storage is customer-managed.</p>
    pub fn retention_period(&self) -> std::option::Option<&crate::types::RetentionPeriod> {
        self.retention_period.as_ref()
    }
    /// <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    pub fn datastore_storage(&self) -> std::option::Option<&crate::types::DatastoreStorage> {
        self.datastore_storage.as_ref()
    }
    /// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
    /// <p>The default file format is JSON. You can specify only one format.</p>
    /// <p>You can't change the file format after you create the data store.</p>
    pub fn file_format_configuration(
        &self,
    ) -> std::option::Option<&crate::types::FileFormatConfiguration> {
        self.file_format_configuration.as_ref()
    }
}
impl UpdateDatastoreInput {
    /// Creates a new builder-style object to manufacture [`UpdateDatastoreInput`](crate::operation::update_datastore::UpdateDatastoreInput).
    pub fn builder() -> crate::operation::update_datastore::builders::UpdateDatastoreInputBuilder {
        crate::operation::update_datastore::builders::UpdateDatastoreInputBuilder::default()
    }
}

/// A builder for [`UpdateDatastoreInput`](crate::operation::update_datastore::UpdateDatastoreInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateDatastoreInputBuilder {
    pub(crate) datastore_name: std::option::Option<std::string::String>,
    pub(crate) retention_period: std::option::Option<crate::types::RetentionPeriod>,
    pub(crate) datastore_storage: std::option::Option<crate::types::DatastoreStorage>,
    pub(crate) file_format_configuration:
        std::option::Option<crate::types::FileFormatConfiguration>,
}
impl UpdateDatastoreInputBuilder {
    /// <p>The name of the data store to be updated.</p>
    pub fn datastore_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.datastore_name = Some(input.into());
        self
    }
    /// <p>The name of the data store to be updated.</p>
    pub fn set_datastore_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.datastore_name = input;
        self
    }
    /// <p>How long, in days, message data is kept for the data store. The retention period can't be updated if the data store's Amazon S3 storage is customer-managed.</p>
    pub fn retention_period(mut self, input: crate::types::RetentionPeriod) -> Self {
        self.retention_period = Some(input);
        self
    }
    /// <p>How long, in days, message data is kept for the data store. The retention period can't be updated if the data store's Amazon S3 storage is customer-managed.</p>
    pub fn set_retention_period(
        mut self,
        input: std::option::Option<crate::types::RetentionPeriod>,
    ) -> Self {
        self.retention_period = input;
        self
    }
    /// <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    pub fn datastore_storage(mut self, input: crate::types::DatastoreStorage) -> Self {
        self.datastore_storage = Some(input);
        self
    }
    /// <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    pub fn set_datastore_storage(
        mut self,
        input: std::option::Option<crate::types::DatastoreStorage>,
    ) -> Self {
        self.datastore_storage = input;
        self
    }
    /// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
    /// <p>The default file format is JSON. You can specify only one format.</p>
    /// <p>You can't change the file format after you create the data store.</p>
    pub fn file_format_configuration(
        mut self,
        input: crate::types::FileFormatConfiguration,
    ) -> Self {
        self.file_format_configuration = Some(input);
        self
    }
    /// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
    /// <p>The default file format is JSON. You can specify only one format.</p>
    /// <p>You can't change the file format after you create the data store.</p>
    pub fn set_file_format_configuration(
        mut self,
        input: std::option::Option<crate::types::FileFormatConfiguration>,
    ) -> Self {
        self.file_format_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDatastoreInput`](crate::operation::update_datastore::UpdateDatastoreInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_datastore::UpdateDatastoreInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_datastore::UpdateDatastoreInput {
            datastore_name: self.datastore_name,
            retention_period: self.retention_period,
            datastore_storage: self.datastore_storage,
            file_format_configuration: self.file_format_configuration,
        })
    }
}
