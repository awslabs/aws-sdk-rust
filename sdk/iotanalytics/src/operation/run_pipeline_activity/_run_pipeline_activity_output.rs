// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RunPipelineActivityOutput {
    /// <p>The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)</p>
    #[doc(hidden)]
    pub payloads: std::option::Option<std::vec::Vec<aws_smithy_types::Blob>>,
    /// <p>In case the pipeline activity fails, the log message that is generated.</p>
    #[doc(hidden)]
    pub log_result: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RunPipelineActivityOutput {
    /// <p>The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)</p>
    pub fn payloads(&self) -> std::option::Option<&[aws_smithy_types::Blob]> {
        self.payloads.as_deref()
    }
    /// <p>In case the pipeline activity fails, the log message that is generated.</p>
    pub fn log_result(&self) -> std::option::Option<&str> {
        self.log_result.as_deref()
    }
}
impl aws_http::request_id::RequestId for RunPipelineActivityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RunPipelineActivityOutput {
    /// Creates a new builder-style object to manufacture [`RunPipelineActivityOutput`](crate::operation::run_pipeline_activity::RunPipelineActivityOutput).
    pub fn builder(
    ) -> crate::operation::run_pipeline_activity::builders::RunPipelineActivityOutputBuilder {
        crate::operation::run_pipeline_activity::builders::RunPipelineActivityOutputBuilder::default(
        )
    }
}

/// A builder for [`RunPipelineActivityOutput`](crate::operation::run_pipeline_activity::RunPipelineActivityOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RunPipelineActivityOutputBuilder {
    pub(crate) payloads: std::option::Option<std::vec::Vec<aws_smithy_types::Blob>>,
    pub(crate) log_result: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RunPipelineActivityOutputBuilder {
    /// Appends an item to `payloads`.
    ///
    /// To override the contents of this collection use [`set_payloads`](Self::set_payloads).
    ///
    /// <p>The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)</p>
    pub fn payloads(mut self, input: aws_smithy_types::Blob) -> Self {
        let mut v = self.payloads.unwrap_or_default();
        v.push(input);
        self.payloads = Some(v);
        self
    }
    /// <p>The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)</p>
    pub fn set_payloads(
        mut self,
        input: std::option::Option<std::vec::Vec<aws_smithy_types::Blob>>,
    ) -> Self {
        self.payloads = input;
        self
    }
    /// <p>In case the pipeline activity fails, the log message that is generated.</p>
    pub fn log_result(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_result = Some(input.into());
        self
    }
    /// <p>In case the pipeline activity fails, the log message that is generated.</p>
    pub fn set_log_result(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_result = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RunPipelineActivityOutput`](crate::operation::run_pipeline_activity::RunPipelineActivityOutput).
    pub fn build(self) -> crate::operation::run_pipeline_activity::RunPipelineActivityOutput {
        crate::operation::run_pipeline_activity::RunPipelineActivityOutput {
            payloads: self.payloads,
            log_result: self.log_result,
            _request_id: self._request_id,
        }
    }
}
