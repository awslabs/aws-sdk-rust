// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::run_pipeline_activity::_run_pipeline_activity_output::RunPipelineActivityOutputBuilder;

pub use crate::operation::run_pipeline_activity::_run_pipeline_activity_input::RunPipelineActivityInputBuilder;

/// Fluent builder constructing a request to `RunPipelineActivity`.
///
/// <p>Simulates the results of running a pipeline activity on a message payload.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RunPipelineActivityFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::run_pipeline_activity::builders::RunPipelineActivityInputBuilder,
}
impl RunPipelineActivityFluentBuilder {
    /// Creates a new `RunPipelineActivity`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::run_pipeline_activity::RunPipelineActivity,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::run_pipeline_activity::RunPipelineActivityError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::run_pipeline_activity::RunPipelineActivityOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::run_pipeline_activity::RunPipelineActivityError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The pipeline activity that is run. This must not be a channel activity or a data store activity because these activities are used in a pipeline only to load the original message and to store the (possibly) transformed message. If a Lambda activity is specified, only short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be used.</p>
    pub fn pipeline_activity(mut self, input: crate::types::PipelineActivity) -> Self {
        self.inner = self.inner.pipeline_activity(input);
        self
    }
    /// <p>The pipeline activity that is run. This must not be a channel activity or a data store activity because these activities are used in a pipeline only to load the original message and to store the (possibly) transformed message. If a Lambda activity is specified, only short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be used.</p>
    pub fn set_pipeline_activity(
        mut self,
        input: std::option::Option<crate::types::PipelineActivity>,
    ) -> Self {
        self.inner = self.inner.set_pipeline_activity(input);
        self
    }
    /// Appends an item to `payloads`.
    ///
    /// To override the contents of this collection use [`set_payloads`](Self::set_payloads).
    ///
    /// <p>The sample message payloads on which the pipeline activity is run.</p>
    pub fn payloads(mut self, input: aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.payloads(input);
        self
    }
    /// <p>The sample message payloads on which the pipeline activity is run.</p>
    pub fn set_payloads(
        mut self,
        input: std::option::Option<std::vec::Vec<aws_smithy_types::Blob>>,
    ) -> Self {
        self.inner = self.inner.set_payloads(input);
        self
    }
}
