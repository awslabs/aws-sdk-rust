// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDatasetContentsInput {
    /// <p>The name of the dataset whose contents information you want to list.</p>
    pub dataset_name: ::std::option::Option<::std::string::String>,
    /// <p>The token for the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return in this request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A filter to limit results to those dataset contents whose creation is scheduled on or after the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>
    pub scheduled_on_or_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A filter to limit results to those dataset contents whose creation is scheduled before the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>
    pub scheduled_before: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ListDatasetContentsInput {
    /// <p>The name of the dataset whose contents information you want to list.</p>
    pub fn dataset_name(&self) -> ::std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return in this request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A filter to limit results to those dataset contents whose creation is scheduled on or after the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>
    pub fn scheduled_on_or_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.scheduled_on_or_after.as_ref()
    }
    /// <p>A filter to limit results to those dataset contents whose creation is scheduled before the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>
    pub fn scheduled_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.scheduled_before.as_ref()
    }
}
impl ListDatasetContentsInput {
    /// Creates a new builder-style object to manufacture [`ListDatasetContentsInput`](crate::operation::list_dataset_contents::ListDatasetContentsInput).
    pub fn builder() -> crate::operation::list_dataset_contents::builders::ListDatasetContentsInputBuilder {
        crate::operation::list_dataset_contents::builders::ListDatasetContentsInputBuilder::default()
    }
}

/// A builder for [`ListDatasetContentsInput`](crate::operation::list_dataset_contents::ListDatasetContentsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListDatasetContentsInputBuilder {
    pub(crate) dataset_name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) scheduled_on_or_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) scheduled_before: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ListDatasetContentsInputBuilder {
    /// <p>The name of the dataset whose contents information you want to list.</p>
    /// This field is required.
    pub fn dataset_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dataset whose contents information you want to list.</p>
    pub fn set_dataset_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_name = input;
        self
    }
    /// <p>The name of the dataset whose contents information you want to list.</p>
    pub fn get_dataset_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_name
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return in this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in this request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in this request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A filter to limit results to those dataset contents whose creation is scheduled on or after the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>
    pub fn scheduled_on_or_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.scheduled_on_or_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter to limit results to those dataset contents whose creation is scheduled on or after the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>
    pub fn set_scheduled_on_or_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.scheduled_on_or_after = input;
        self
    }
    /// <p>A filter to limit results to those dataset contents whose creation is scheduled on or after the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>
    pub fn get_scheduled_on_or_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.scheduled_on_or_after
    }
    /// <p>A filter to limit results to those dataset contents whose creation is scheduled before the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>
    pub fn scheduled_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.scheduled_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter to limit results to those dataset contents whose creation is scheduled before the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>
    pub fn set_scheduled_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.scheduled_before = input;
        self
    }
    /// <p>A filter to limit results to those dataset contents whose creation is scheduled before the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>
    pub fn get_scheduled_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.scheduled_before
    }
    /// Consumes the builder and constructs a [`ListDatasetContentsInput`](crate::operation::list_dataset_contents::ListDatasetContentsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_dataset_contents::ListDatasetContentsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_dataset_contents::ListDatasetContentsInput {
            dataset_name: self.dataset_name,
            next_token: self.next_token,
            max_results: self.max_results,
            scheduled_on_or_after: self.scheduled_on_or_after,
            scheduled_before: self.scheduled_before,
        })
    }
}
