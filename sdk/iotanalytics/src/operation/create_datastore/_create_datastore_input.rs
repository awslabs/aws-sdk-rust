// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDatastoreInput {
    /// <p>The name of the data store.</p>
    pub datastore_name: ::std::option::Option<::std::string::String>,
    /// <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    pub datastore_storage: ::std::option::Option<crate::types::DatastoreStorage>,
    /// <p>How long, in days, message data is kept for the data store. When <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>
    pub retention_period: ::std::option::Option<crate::types::RetentionPeriod>,
    /// <p>Metadata which can be used to manage the data store.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
    /// <p>The default file format is JSON. You can specify only one format.</p>
    /// <p>You can't change the file format after you create the data store.</p>
    pub file_format_configuration: ::std::option::Option<crate::types::FileFormatConfiguration>,
    /// <p> Contains information about the partition dimensions in a data store. </p>
    pub datastore_partitions: ::std::option::Option<crate::types::DatastorePartitions>,
}
impl CreateDatastoreInput {
    /// <p>The name of the data store.</p>
    pub fn datastore_name(&self) -> ::std::option::Option<&str> {
        self.datastore_name.as_deref()
    }
    /// <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    pub fn datastore_storage(&self) -> ::std::option::Option<&crate::types::DatastoreStorage> {
        self.datastore_storage.as_ref()
    }
    /// <p>How long, in days, message data is kept for the data store. When <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>
    pub fn retention_period(&self) -> ::std::option::Option<&crate::types::RetentionPeriod> {
        self.retention_period.as_ref()
    }
    /// <p>Metadata which can be used to manage the data store.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
    /// <p>The default file format is JSON. You can specify only one format.</p>
    /// <p>You can't change the file format after you create the data store.</p>
    pub fn file_format_configuration(&self) -> ::std::option::Option<&crate::types::FileFormatConfiguration> {
        self.file_format_configuration.as_ref()
    }
    /// <p> Contains information about the partition dimensions in a data store. </p>
    pub fn datastore_partitions(&self) -> ::std::option::Option<&crate::types::DatastorePartitions> {
        self.datastore_partitions.as_ref()
    }
}
impl CreateDatastoreInput {
    /// Creates a new builder-style object to manufacture [`CreateDatastoreInput`](crate::operation::create_datastore::CreateDatastoreInput).
    pub fn builder() -> crate::operation::create_datastore::builders::CreateDatastoreInputBuilder {
        crate::operation::create_datastore::builders::CreateDatastoreInputBuilder::default()
    }
}

/// A builder for [`CreateDatastoreInput`](crate::operation::create_datastore::CreateDatastoreInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDatastoreInputBuilder {
    pub(crate) datastore_name: ::std::option::Option<::std::string::String>,
    pub(crate) datastore_storage: ::std::option::Option<crate::types::DatastoreStorage>,
    pub(crate) retention_period: ::std::option::Option<crate::types::RetentionPeriod>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) file_format_configuration: ::std::option::Option<crate::types::FileFormatConfiguration>,
    pub(crate) datastore_partitions: ::std::option::Option<crate::types::DatastorePartitions>,
}
impl CreateDatastoreInputBuilder {
    /// <p>The name of the data store.</p>
    /// This field is required.
    pub fn datastore_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data store.</p>
    pub fn set_datastore_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_name = input;
        self
    }
    /// <p>The name of the data store.</p>
    pub fn get_datastore_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_name
    }
    /// <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    pub fn datastore_storage(mut self, input: crate::types::DatastoreStorage) -> Self {
        self.datastore_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    pub fn set_datastore_storage(mut self, input: ::std::option::Option<crate::types::DatastoreStorage>) -> Self {
        self.datastore_storage = input;
        self
    }
    /// <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    pub fn get_datastore_storage(&self) -> &::std::option::Option<crate::types::DatastoreStorage> {
        &self.datastore_storage
    }
    /// <p>How long, in days, message data is kept for the data store. When <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>
    pub fn retention_period(mut self, input: crate::types::RetentionPeriod) -> Self {
        self.retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>How long, in days, message data is kept for the data store. When <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>
    pub fn set_retention_period(mut self, input: ::std::option::Option<crate::types::RetentionPeriod>) -> Self {
        self.retention_period = input;
        self
    }
    /// <p>How long, in days, message data is kept for the data store. When <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>
    pub fn get_retention_period(&self) -> &::std::option::Option<crate::types::RetentionPeriod> {
        &self.retention_period
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata which can be used to manage the data store.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Metadata which can be used to manage the data store.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Metadata which can be used to manage the data store.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
    /// <p>The default file format is JSON. You can specify only one format.</p>
    /// <p>You can't change the file format after you create the data store.</p>
    pub fn file_format_configuration(mut self, input: crate::types::FileFormatConfiguration) -> Self {
        self.file_format_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
    /// <p>The default file format is JSON. You can specify only one format.</p>
    /// <p>You can't change the file format after you create the data store.</p>
    pub fn set_file_format_configuration(mut self, input: ::std::option::Option<crate::types::FileFormatConfiguration>) -> Self {
        self.file_format_configuration = input;
        self
    }
    /// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
    /// <p>The default file format is JSON. You can specify only one format.</p>
    /// <p>You can't change the file format after you create the data store.</p>
    pub fn get_file_format_configuration(&self) -> &::std::option::Option<crate::types::FileFormatConfiguration> {
        &self.file_format_configuration
    }
    /// <p> Contains information about the partition dimensions in a data store. </p>
    pub fn datastore_partitions(mut self, input: crate::types::DatastorePartitions) -> Self {
        self.datastore_partitions = ::std::option::Option::Some(input);
        self
    }
    /// <p> Contains information about the partition dimensions in a data store. </p>
    pub fn set_datastore_partitions(mut self, input: ::std::option::Option<crate::types::DatastorePartitions>) -> Self {
        self.datastore_partitions = input;
        self
    }
    /// <p> Contains information about the partition dimensions in a data store. </p>
    pub fn get_datastore_partitions(&self) -> &::std::option::Option<crate::types::DatastorePartitions> {
        &self.datastore_partitions
    }
    /// Consumes the builder and constructs a [`CreateDatastoreInput`](crate::operation::create_datastore::CreateDatastoreInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_datastore::CreateDatastoreInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_datastore::CreateDatastoreInput {
            datastore_name: self.datastore_name,
            datastore_storage: self.datastore_storage,
            retention_period: self.retention_period,
            tags: self.tags,
            file_format_configuration: self.file_format_configuration,
            datastore_partitions: self.datastore_partitions,
        })
    }
}
