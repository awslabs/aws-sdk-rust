// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_pipeline_activity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PipelineActivity,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.channel {
        #[allow(unused_mut)]
        let mut object_2 = object.key("channel").start_object();
        crate::protocol_serde::shape_channel_activity::ser_channel_activity(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.lambda {
        #[allow(unused_mut)]
        let mut object_4 = object.key("lambda").start_object();
        crate::protocol_serde::shape_lambda_activity::ser_lambda_activity(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.datastore {
        #[allow(unused_mut)]
        let mut object_6 = object.key("datastore").start_object();
        crate::protocol_serde::shape_datastore_activity::ser_datastore_activity(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.add_attributes {
        #[allow(unused_mut)]
        let mut object_8 = object.key("addAttributes").start_object();
        crate::protocol_serde::shape_add_attributes_activity::ser_add_attributes_activity(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.remove_attributes {
        #[allow(unused_mut)]
        let mut object_10 = object.key("removeAttributes").start_object();
        crate::protocol_serde::shape_remove_attributes_activity::ser_remove_attributes_activity(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.select_attributes {
        #[allow(unused_mut)]
        let mut object_12 = object.key("selectAttributes").start_object();
        crate::protocol_serde::shape_select_attributes_activity::ser_select_attributes_activity(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.filter {
        #[allow(unused_mut)]
        let mut object_14 = object.key("filter").start_object();
        crate::protocol_serde::shape_filter_activity::ser_filter_activity(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.math {
        #[allow(unused_mut)]
        let mut object_16 = object.key("math").start_object();
        crate::protocol_serde::shape_math_activity::ser_math_activity(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.device_registry_enrich {
        #[allow(unused_mut)]
        let mut object_18 = object.key("deviceRegistryEnrich").start_object();
        crate::protocol_serde::shape_device_registry_enrich_activity::ser_device_registry_enrich_activity(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.device_shadow_enrich {
        #[allow(unused_mut)]
        let mut object_20 = object.key("deviceShadowEnrich").start_object();
        crate::protocol_serde::shape_device_shadow_enrich_activity::ser_device_shadow_enrich_activity(&mut object_20, var_19)?;
        object_20.finish();
    }
    Ok(())
}

pub(crate) fn de_pipeline_activity<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::PipelineActivity>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PipelineActivityBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "channel" => {
                                builder = builder.set_channel(
                                    crate::protocol_serde::shape_channel_activity::de_channel_activity(tokens)?
                                );
                            }
                            "lambda" => {
                                builder = builder.set_lambda(
                                    crate::protocol_serde::shape_lambda_activity::de_lambda_activity(tokens)?
                                );
                            }
                            "datastore" => {
                                builder = builder.set_datastore(
                                    crate::protocol_serde::shape_datastore_activity::de_datastore_activity(tokens)?
                                );
                            }
                            "addAttributes" => {
                                builder = builder.set_add_attributes(
                                    crate::protocol_serde::shape_add_attributes_activity::de_add_attributes_activity(tokens)?
                                );
                            }
                            "removeAttributes" => {
                                builder = builder.set_remove_attributes(
                                    crate::protocol_serde::shape_remove_attributes_activity::de_remove_attributes_activity(tokens)?
                                );
                            }
                            "selectAttributes" => {
                                builder = builder.set_select_attributes(
                                    crate::protocol_serde::shape_select_attributes_activity::de_select_attributes_activity(tokens)?
                                );
                            }
                            "filter" => {
                                builder = builder.set_filter(
                                    crate::protocol_serde::shape_filter_activity::de_filter_activity(tokens)?
                                );
                            }
                            "math" => {
                                builder = builder.set_math(
                                    crate::protocol_serde::shape_math_activity::de_math_activity(
                                        tokens,
                                    )?,
                                );
                            }
                            "deviceRegistryEnrich" => {
                                builder = builder.set_device_registry_enrich(
                                    crate::protocol_serde::shape_device_registry_enrich_activity::de_device_registry_enrich_activity(tokens)?
                                );
                            }
                            "deviceShadowEnrich" => {
                                builder = builder.set_device_shadow_enrich(
                                    crate::protocol_serde::shape_device_shadow_enrich_activity::de_device_shadow_enrich_activity(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
