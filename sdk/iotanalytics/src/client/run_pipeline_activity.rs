// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RunPipelineActivity`](crate::operation::run_pipeline_activity::builders::RunPipelineActivityFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_activity(PipelineActivity)`](crate::operation::run_pipeline_activity::builders::RunPipelineActivityFluentBuilder::pipeline_activity) / [`set_pipeline_activity(Option<PipelineActivity>)`](crate::operation::run_pipeline_activity::builders::RunPipelineActivityFluentBuilder::set_pipeline_activity): <p>The pipeline activity that is run. This must not be a channel activity or a data store activity because these activities are used in a pipeline only to load the original message and to store the (possibly) transformed message. If a Lambda activity is specified, only short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be used.</p>
    ///   - [`payloads(Vec<Blob>)`](crate::operation::run_pipeline_activity::builders::RunPipelineActivityFluentBuilder::payloads) / [`set_payloads(Option<Vec<Blob>>)`](crate::operation::run_pipeline_activity::builders::RunPipelineActivityFluentBuilder::set_payloads): <p>The sample message payloads on which the pipeline activity is run.</p>
    /// - On success, responds with [`RunPipelineActivityOutput`](crate::operation::run_pipeline_activity::RunPipelineActivityOutput) with field(s):
    ///   - [`payloads(Option<Vec<Blob>>)`](crate::operation::run_pipeline_activity::RunPipelineActivityOutput::payloads): <p>The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)</p>
    ///   - [`log_result(Option<String>)`](crate::operation::run_pipeline_activity::RunPipelineActivityOutput::log_result): <p>In case the pipeline activity fails, the log message that is generated.</p>
    /// - On failure, responds with [`SdkError<RunPipelineActivityError>`](crate::operation::run_pipeline_activity::RunPipelineActivityError)
    pub fn run_pipeline_activity(
        &self,
    ) -> crate::operation::run_pipeline_activity::builders::RunPipelineActivityFluentBuilder {
        crate::operation::run_pipeline_activity::builders::RunPipelineActivityFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
