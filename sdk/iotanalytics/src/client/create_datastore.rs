// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDatastore`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`datastore_name(impl Into<String>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::datastore_name) / [`set_datastore_name(Option<String>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::set_datastore_name): <p>The name of the data store.</p>
    ///   - [`datastore_storage(DatastoreStorage)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::datastore_storage) / [`set_datastore_storage(Option<DatastoreStorage>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::set_datastore_storage): <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    ///   - [`retention_period(RetentionPeriod)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::retention_period) / [`set_retention_period(Option<RetentionPeriod>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::set_retention_period): <p>How long, in days, message data is kept for the data store. When <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::set_tags): <p>Metadata which can be used to manage the data store.</p>
    ///   - [`file_format_configuration(FileFormatConfiguration)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::file_format_configuration) / [`set_file_format_configuration(Option<FileFormatConfiguration>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::set_file_format_configuration): <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>  <p>The default file format is JSON. You can specify only one format.</p>  <p>You can't change the file format after you create the data store.</p>
    ///   - [`datastore_partitions(DatastorePartitions)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::datastore_partitions) / [`set_datastore_partitions(Option<DatastorePartitions>)`](crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::set_datastore_partitions): <p> Contains information about the partition dimensions in a data store. </p>
    /// - On success, responds with [`CreateDatastoreOutput`](crate::operation::create_datastore::CreateDatastoreOutput) with field(s):
    ///   - [`datastore_name(Option<String>)`](crate::operation::create_datastore::CreateDatastoreOutput::datastore_name): <p>The name of the data store.</p>
    ///   - [`datastore_arn(Option<String>)`](crate::operation::create_datastore::CreateDatastoreOutput::datastore_arn): <p>The ARN of the data store.</p>
    ///   - [`retention_period(Option<RetentionPeriod>)`](crate::operation::create_datastore::CreateDatastoreOutput::retention_period): <p>How long, in days, message data is kept for the data store.</p>
    /// - On failure, responds with [`SdkError<CreateDatastoreError>`](crate::operation::create_datastore::CreateDatastoreError)
    pub fn create_datastore(
        &self,
    ) -> crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder {
        crate::operation::create_datastore::builders::CreateDatastoreFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
