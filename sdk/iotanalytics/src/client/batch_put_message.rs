// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchPutMessage`](crate::operation::batch_put_message::builders::BatchPutMessageFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`channel_name(impl Into<String>)`](crate::operation::batch_put_message::builders::BatchPutMessageFluentBuilder::channel_name) / [`set_channel_name(Option<String>)`](crate::operation::batch_put_message::builders::BatchPutMessageFluentBuilder::set_channel_name):<br>required: **true**<br><p>The name of the channel where the messages are sent.</p><br>
    ///   - [`messages(Message)`](crate::operation::batch_put_message::builders::BatchPutMessageFluentBuilder::messages) / [`set_messages(Option<Vec::<Message>>)`](crate::operation::batch_put_message::builders::BatchPutMessageFluentBuilder::set_messages):<br>required: **true**<br><p>The list of messages to be sent. Each message has the format: { "messageId": "string", "payload": "string"}.</p>  <p>The field names of message payloads (data) that you send to IoT Analytics:</p>  <ul>   <li> <p>Must contain only alphanumeric characters and undescores (_). No other special characters are allowed.</p> </li>   <li> <p>Must begin with an alphabetic character or single underscore (_).</p> </li>   <li> <p>Cannot contain hyphens (-).</p> </li>   <li> <p>In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$". </p> </li>   <li> <p>Cannot be more than 255 characters.</p> </li>   <li> <p>Are case insensitive. (Fields named foo and FOO in the same payload are considered duplicates.)</p> </li>  </ul>  <p>For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29}, {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads. </p><br>
    /// - On success, responds with [`BatchPutMessageOutput`](crate::operation::batch_put_message::BatchPutMessageOutput) with field(s):
    ///   - [`batch_put_message_error_entries(Option<Vec::<BatchPutMessageErrorEntry>>)`](crate::operation::batch_put_message::BatchPutMessageOutput::batch_put_message_error_entries): <p>A list of any errors encountered when sending the messages to the channel.</p>
    /// - On failure, responds with [`SdkError<BatchPutMessageError>`](crate::operation::batch_put_message::BatchPutMessageError)
    pub fn batch_put_message(&self) -> crate::operation::batch_put_message::builders::BatchPutMessageFluentBuilder {
        crate::operation::batch_put_message::builders::BatchPutMessageFluentBuilder::new(self.handle.clone())
    }
}
