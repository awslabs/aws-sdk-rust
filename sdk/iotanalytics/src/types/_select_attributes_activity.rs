// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to create a new message using only the specified attributes from the original message.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SelectAttributesActivity {
    /// <p>The name of the <code>selectAttributes</code> activity.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A list of the attributes to select from the message.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The next activity in the pipeline.</p>
    #[doc(hidden)]
    pub next: std::option::Option<std::string::String>,
}
impl SelectAttributesActivity {
    /// <p>The name of the <code>selectAttributes</code> activity.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A list of the attributes to select from the message.</p>
    pub fn attributes(&self) -> std::option::Option<&[std::string::String]> {
        self.attributes.as_deref()
    }
    /// <p>The next activity in the pipeline.</p>
    pub fn next(&self) -> std::option::Option<&str> {
        self.next.as_deref()
    }
}
impl SelectAttributesActivity {
    /// Creates a new builder-style object to manufacture [`SelectAttributesActivity`](crate::types::SelectAttributesActivity).
    pub fn builder() -> crate::types::builders::SelectAttributesActivityBuilder {
        crate::types::builders::SelectAttributesActivityBuilder::default()
    }
}

/// A builder for [`SelectAttributesActivity`](crate::types::SelectAttributesActivity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SelectAttributesActivityBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) attributes: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next: std::option::Option<std::string::String>,
}
impl SelectAttributesActivityBuilder {
    /// <p>The name of the <code>selectAttributes</code> activity.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the <code>selectAttributes</code> activity.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A list of the attributes to select from the message.</p>
    pub fn attributes(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input.into());
        self.attributes = Some(v);
        self
    }
    /// <p>A list of the attributes to select from the message.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The next activity in the pipeline.</p>
    pub fn next(mut self, input: impl Into<std::string::String>) -> Self {
        self.next = Some(input.into());
        self
    }
    /// <p>The next activity in the pipeline.</p>
    pub fn set_next(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next = input;
        self
    }
    /// Consumes the builder and constructs a [`SelectAttributesActivity`](crate::types::SelectAttributesActivity).
    pub fn build(self) -> crate::types::SelectAttributesActivity {
        crate::types::SelectAttributesActivity {
            name: self.name,
            attributes: self.attributes,
            next: self.next,
        }
    }
}
