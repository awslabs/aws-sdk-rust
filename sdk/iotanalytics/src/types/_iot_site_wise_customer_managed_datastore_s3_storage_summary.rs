// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Contains information about the data store that you manage, which stores data used by IoT SiteWise. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IotSiteWiseCustomerManagedDatastoreS3StorageSummary {
    /// <p> The name of the Amazon S3 bucket where your data is stored. </p>
    #[doc(hidden)]
    pub bucket: std::option::Option<std::string::String>,
    /// <p> (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/). </p>
    #[doc(hidden)]
    pub key_prefix: std::option::Option<std::string::String>,
}
impl IotSiteWiseCustomerManagedDatastoreS3StorageSummary {
    /// <p> The name of the Amazon S3 bucket where your data is stored. </p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p> (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/). </p>
    pub fn key_prefix(&self) -> std::option::Option<&str> {
        self.key_prefix.as_deref()
    }
}
impl IotSiteWiseCustomerManagedDatastoreS3StorageSummary {
    /// Creates a new builder-style object to manufacture [`IotSiteWiseCustomerManagedDatastoreS3StorageSummary`](crate::types::IotSiteWiseCustomerManagedDatastoreS3StorageSummary).
    pub fn builder(
    ) -> crate::types::builders::IotSiteWiseCustomerManagedDatastoreS3StorageSummaryBuilder {
        crate::types::builders::IotSiteWiseCustomerManagedDatastoreS3StorageSummaryBuilder::default(
        )
    }
}

/// A builder for [`IotSiteWiseCustomerManagedDatastoreS3StorageSummary`](crate::types::IotSiteWiseCustomerManagedDatastoreS3StorageSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IotSiteWiseCustomerManagedDatastoreS3StorageSummaryBuilder {
    pub(crate) bucket: std::option::Option<std::string::String>,
    pub(crate) key_prefix: std::option::Option<std::string::String>,
}
impl IotSiteWiseCustomerManagedDatastoreS3StorageSummaryBuilder {
    /// <p> The name of the Amazon S3 bucket where your data is stored. </p>
    pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket = Some(input.into());
        self
    }
    /// <p> The name of the Amazon S3 bucket where your data is stored. </p>
    pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p> (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/). </p>
    pub fn key_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_prefix = Some(input.into());
        self
    }
    /// <p> (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/). </p>
    pub fn set_key_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_prefix = input;
        self
    }
    /// Consumes the builder and constructs a [`IotSiteWiseCustomerManagedDatastoreS3StorageSummary`](crate::types::IotSiteWiseCustomerManagedDatastoreS3StorageSummary).
    pub fn build(self) -> crate::types::IotSiteWiseCustomerManagedDatastoreS3StorageSummary {
        crate::types::IotSiteWiseCustomerManagedDatastoreS3StorageSummary {
            bucket: self.bucket,
            key_prefix: self.key_prefix,
        }
    }
}
