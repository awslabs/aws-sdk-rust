// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum DatastoreStorage {
    /// <p>S3-customer-managed; When you choose customer-managed storage, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    CustomerManagedS3(crate::types::CustomerManagedDatastoreS3Storage),
    /// <p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    IotSiteWiseMultiLayerStorage(crate::types::DatastoreIotSiteWiseMultiLayerStorage),
    /// <p>Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    ServiceManagedS3(crate::types::ServiceManagedDatastoreS3Storage),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl DatastoreStorage {
    /// Tries to convert the enum instance into [`CustomerManagedS3`](crate::types::DatastoreStorage::CustomerManagedS3), extracting the inner [`CustomerManagedDatastoreS3Storage`](crate::types::CustomerManagedDatastoreS3Storage).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_customer_managed_s3(
        &self,
    ) -> std::result::Result<&crate::types::CustomerManagedDatastoreS3Storage, &Self> {
        if let DatastoreStorage::CustomerManagedS3(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`CustomerManagedS3`](crate::types::DatastoreStorage::CustomerManagedS3).
    pub fn is_customer_managed_s3(&self) -> bool {
        self.as_customer_managed_s3().is_ok()
    }
    /// Tries to convert the enum instance into [`IotSiteWiseMultiLayerStorage`](crate::types::DatastoreStorage::IotSiteWiseMultiLayerStorage), extracting the inner [`DatastoreIotSiteWiseMultiLayerStorage`](crate::types::DatastoreIotSiteWiseMultiLayerStorage).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_iot_site_wise_multi_layer_storage(
        &self,
    ) -> std::result::Result<&crate::types::DatastoreIotSiteWiseMultiLayerStorage, &Self> {
        if let DatastoreStorage::IotSiteWiseMultiLayerStorage(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`IotSiteWiseMultiLayerStorage`](crate::types::DatastoreStorage::IotSiteWiseMultiLayerStorage).
    pub fn is_iot_site_wise_multi_layer_storage(&self) -> bool {
        self.as_iot_site_wise_multi_layer_storage().is_ok()
    }
    /// Tries to convert the enum instance into [`ServiceManagedS3`](crate::types::DatastoreStorage::ServiceManagedS3), extracting the inner [`ServiceManagedDatastoreS3Storage`](crate::types::ServiceManagedDatastoreS3Storage).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_service_managed_s3(
        &self,
    ) -> std::result::Result<&crate::types::ServiceManagedDatastoreS3Storage, &Self> {
        if let DatastoreStorage::ServiceManagedS3(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ServiceManagedS3`](crate::types::DatastoreStorage::ServiceManagedS3).
    pub fn is_service_managed_s3(&self) -> bool {
        self.as_service_managed_s3().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
