// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>
/// <p>The default file format is JSON. You can specify only one format.</p>
/// <p>You can't change the file format after you create the data store.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FileFormatConfiguration {
    /// <p>Contains the configuration information of the JSON format.</p>
    #[doc(hidden)]
    pub json_configuration: std::option::Option<crate::types::JsonConfiguration>,
    /// <p>Contains the configuration information of the Parquet format.</p>
    #[doc(hidden)]
    pub parquet_configuration: std::option::Option<crate::types::ParquetConfiguration>,
}
impl FileFormatConfiguration {
    /// <p>Contains the configuration information of the JSON format.</p>
    pub fn json_configuration(&self) -> std::option::Option<&crate::types::JsonConfiguration> {
        self.json_configuration.as_ref()
    }
    /// <p>Contains the configuration information of the Parquet format.</p>
    pub fn parquet_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ParquetConfiguration> {
        self.parquet_configuration.as_ref()
    }
}
impl FileFormatConfiguration {
    /// Creates a new builder-style object to manufacture [`FileFormatConfiguration`](crate::types::FileFormatConfiguration).
    pub fn builder() -> crate::types::builders::FileFormatConfigurationBuilder {
        crate::types::builders::FileFormatConfigurationBuilder::default()
    }
}

/// A builder for [`FileFormatConfiguration`](crate::types::FileFormatConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FileFormatConfigurationBuilder {
    pub(crate) json_configuration: std::option::Option<crate::types::JsonConfiguration>,
    pub(crate) parquet_configuration: std::option::Option<crate::types::ParquetConfiguration>,
}
impl FileFormatConfigurationBuilder {
    /// <p>Contains the configuration information of the JSON format.</p>
    pub fn json_configuration(mut self, input: crate::types::JsonConfiguration) -> Self {
        self.json_configuration = Some(input);
        self
    }
    /// <p>Contains the configuration information of the JSON format.</p>
    pub fn set_json_configuration(
        mut self,
        input: std::option::Option<crate::types::JsonConfiguration>,
    ) -> Self {
        self.json_configuration = input;
        self
    }
    /// <p>Contains the configuration information of the Parquet format.</p>
    pub fn parquet_configuration(mut self, input: crate::types::ParquetConfiguration) -> Self {
        self.parquet_configuration = Some(input);
        self
    }
    /// <p>Contains the configuration information of the Parquet format.</p>
    pub fn set_parquet_configuration(
        mut self,
        input: std::option::Option<crate::types::ParquetConfiguration>,
    ) -> Self {
        self.parquet_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`FileFormatConfiguration`](crate::types::FileFormatConfiguration).
    pub fn build(self) -> crate::types::FileFormatConfiguration {
        crate::types::FileFormatConfiguration {
            json_configuration: self.json_configuration,
            parquet_configuration: self.parquet_configuration,
        }
    }
}
