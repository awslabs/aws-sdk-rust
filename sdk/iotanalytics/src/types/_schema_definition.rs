// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information needed to define a schema.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SchemaDefinition {
    /// <p>Specifies one or more columns that store your data.</p>
    /// <p>Each schema can have up to 100 columns. Each column can have up to 100 nested types.</p>
    pub columns: ::std::option::Option<::std::vec::Vec<crate::types::Column>>,
}
impl SchemaDefinition {
    /// <p>Specifies one or more columns that store your data.</p>
    /// <p>Each schema can have up to 100 columns. Each column can have up to 100 nested types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.columns.is_none()`.
    pub fn columns(&self) -> &[crate::types::Column] {
        self.columns.as_deref().unwrap_or_default()
    }
}
impl SchemaDefinition {
    /// Creates a new builder-style object to manufacture [`SchemaDefinition`](crate::types::SchemaDefinition).
    pub fn builder() -> crate::types::builders::SchemaDefinitionBuilder {
        crate::types::builders::SchemaDefinitionBuilder::default()
    }
}

/// A builder for [`SchemaDefinition`](crate::types::SchemaDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SchemaDefinitionBuilder {
    pub(crate) columns: ::std::option::Option<::std::vec::Vec<crate::types::Column>>,
}
impl SchemaDefinitionBuilder {
    /// Appends an item to `columns`.
    ///
    /// To override the contents of this collection use [`set_columns`](Self::set_columns).
    ///
    /// <p>Specifies one or more columns that store your data.</p>
    /// <p>Each schema can have up to 100 columns. Each column can have up to 100 nested types.</p>
    pub fn columns(mut self, input: crate::types::Column) -> Self {
        let mut v = self.columns.unwrap_or_default();
        v.push(input);
        self.columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies one or more columns that store your data.</p>
    /// <p>Each schema can have up to 100 columns. Each column can have up to 100 nested types.</p>
    pub fn set_columns(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Column>>) -> Self {
        self.columns = input;
        self
    }
    /// <p>Specifies one or more columns that store your data.</p>
    /// <p>Each schema can have up to 100 columns. Each column can have up to 100 nested types.</p>
    pub fn get_columns(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Column>> {
        &self.columns
    }
    /// Consumes the builder and constructs a [`SchemaDefinition`](crate::types::SchemaDefinition).
    pub fn build(self) -> crate::types::SchemaDefinition {
        crate::types::SchemaDefinition { columns: self.columns }
    }
}
