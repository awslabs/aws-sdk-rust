// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An activity that filters a message based on its attributes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FilterActivity {
    /// <p>The name of the filter activity.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>An expression that looks like a SQL WHERE clause that must return a Boolean value. Messages that satisfy the condition are passed to the next activity. </p>
    #[doc(hidden)]
    pub filter: std::option::Option<std::string::String>,
    /// <p>The next activity in the pipeline.</p>
    #[doc(hidden)]
    pub next: std::option::Option<std::string::String>,
}
impl FilterActivity {
    /// <p>The name of the filter activity.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>An expression that looks like a SQL WHERE clause that must return a Boolean value. Messages that satisfy the condition are passed to the next activity. </p>
    pub fn filter(&self) -> std::option::Option<&str> {
        self.filter.as_deref()
    }
    /// <p>The next activity in the pipeline.</p>
    pub fn next(&self) -> std::option::Option<&str> {
        self.next.as_deref()
    }
}
impl FilterActivity {
    /// Creates a new builder-style object to manufacture [`FilterActivity`](crate::types::FilterActivity).
    pub fn builder() -> crate::types::builders::FilterActivityBuilder {
        crate::types::builders::FilterActivityBuilder::default()
    }
}

/// A builder for [`FilterActivity`](crate::types::FilterActivity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FilterActivityBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) filter: std::option::Option<std::string::String>,
    pub(crate) next: std::option::Option<std::string::String>,
}
impl FilterActivityBuilder {
    /// <p>The name of the filter activity.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the filter activity.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>An expression that looks like a SQL WHERE clause that must return a Boolean value. Messages that satisfy the condition are passed to the next activity. </p>
    pub fn filter(mut self, input: impl Into<std::string::String>) -> Self {
        self.filter = Some(input.into());
        self
    }
    /// <p>An expression that looks like a SQL WHERE clause that must return a Boolean value. Messages that satisfy the condition are passed to the next activity. </p>
    pub fn set_filter(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.filter = input;
        self
    }
    /// <p>The next activity in the pipeline.</p>
    pub fn next(mut self, input: impl Into<std::string::String>) -> Self {
        self.next = Some(input.into());
        self
    }
    /// <p>The next activity in the pipeline.</p>
    pub fn set_next(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next = input;
        self
    }
    /// Consumes the builder and constructs a [`FilterActivity`](crate::types::FilterActivity).
    pub fn build(self) -> crate::types::FilterActivity {
        crate::types::FilterActivity {
            name: self.name,
            filter: self.filter,
            next: self.next,
        }
    }
}
