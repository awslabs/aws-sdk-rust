// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of information about a data store.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatastoreSummary {
    /// <p>The name of the data store.</p>
    #[doc(hidden)]
    pub datastore_name: std::option::Option<std::string::String>,
    /// <p>Where data in a data store is stored.</p>
    #[doc(hidden)]
    pub datastore_storage: std::option::Option<crate::types::DatastoreStorageSummary>,
    /// <p>The status of the data store.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::DatastoreStatus>,
    /// <p>When the data store was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last time the data store was updated.</p>
    #[doc(hidden)]
    pub last_update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last time when a new message arrived in the data store.</p>
    /// <p>IoT Analytics updates this value at most once per minute for Amazon Simple Storage Service one data store. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    #[doc(hidden)]
    pub last_message_arrival_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The file format of the data in the data store.</p>
    #[doc(hidden)]
    pub file_format_type: std::option::Option<crate::types::FileFormatType>,
    /// <p> Contains information about the partition dimensions in a data store. </p>
    #[doc(hidden)]
    pub datastore_partitions: std::option::Option<crate::types::DatastorePartitions>,
}
impl DatastoreSummary {
    /// <p>The name of the data store.</p>
    pub fn datastore_name(&self) -> std::option::Option<&str> {
        self.datastore_name.as_deref()
    }
    /// <p>Where data in a data store is stored.</p>
    pub fn datastore_storage(&self) -> std::option::Option<&crate::types::DatastoreStorageSummary> {
        self.datastore_storage.as_ref()
    }
    /// <p>The status of the data store.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::DatastoreStatus> {
        self.status.as_ref()
    }
    /// <p>When the data store was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the data store was updated.</p>
    pub fn last_update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>The last time when a new message arrived in the data store.</p>
    /// <p>IoT Analytics updates this value at most once per minute for Amazon Simple Storage Service one data store. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub fn last_message_arrival_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_message_arrival_time.as_ref()
    }
    /// <p>The file format of the data in the data store.</p>
    pub fn file_format_type(&self) -> std::option::Option<&crate::types::FileFormatType> {
        self.file_format_type.as_ref()
    }
    /// <p> Contains information about the partition dimensions in a data store. </p>
    pub fn datastore_partitions(&self) -> std::option::Option<&crate::types::DatastorePartitions> {
        self.datastore_partitions.as_ref()
    }
}
impl DatastoreSummary {
    /// Creates a new builder-style object to manufacture [`DatastoreSummary`](crate::types::DatastoreSummary).
    pub fn builder() -> crate::types::builders::DatastoreSummaryBuilder {
        crate::types::builders::DatastoreSummaryBuilder::default()
    }
}

/// A builder for [`DatastoreSummary`](crate::types::DatastoreSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatastoreSummaryBuilder {
    pub(crate) datastore_name: std::option::Option<std::string::String>,
    pub(crate) datastore_storage: std::option::Option<crate::types::DatastoreStorageSummary>,
    pub(crate) status: std::option::Option<crate::types::DatastoreStatus>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_update_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_message_arrival_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) file_format_type: std::option::Option<crate::types::FileFormatType>,
    pub(crate) datastore_partitions: std::option::Option<crate::types::DatastorePartitions>,
}
impl DatastoreSummaryBuilder {
    /// <p>The name of the data store.</p>
    pub fn datastore_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.datastore_name = Some(input.into());
        self
    }
    /// <p>The name of the data store.</p>
    pub fn set_datastore_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.datastore_name = input;
        self
    }
    /// <p>Where data in a data store is stored.</p>
    pub fn datastore_storage(mut self, input: crate::types::DatastoreStorageSummary) -> Self {
        self.datastore_storage = Some(input);
        self
    }
    /// <p>Where data in a data store is stored.</p>
    pub fn set_datastore_storage(
        mut self,
        input: std::option::Option<crate::types::DatastoreStorageSummary>,
    ) -> Self {
        self.datastore_storage = input;
        self
    }
    /// <p>The status of the data store.</p>
    pub fn status(mut self, input: crate::types::DatastoreStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the data store.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::DatastoreStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>When the data store was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>When the data store was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The last time the data store was updated.</p>
    pub fn last_update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_update_time = Some(input);
        self
    }
    /// <p>The last time the data store was updated.</p>
    pub fn set_last_update_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The last time when a new message arrived in the data store.</p>
    /// <p>IoT Analytics updates this value at most once per minute for Amazon Simple Storage Service one data store. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub fn last_message_arrival_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_message_arrival_time = Some(input);
        self
    }
    /// <p>The last time when a new message arrived in the data store.</p>
    /// <p>IoT Analytics updates this value at most once per minute for Amazon Simple Storage Service one data store. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub fn set_last_message_arrival_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_message_arrival_time = input;
        self
    }
    /// <p>The file format of the data in the data store.</p>
    pub fn file_format_type(mut self, input: crate::types::FileFormatType) -> Self {
        self.file_format_type = Some(input);
        self
    }
    /// <p>The file format of the data in the data store.</p>
    pub fn set_file_format_type(
        mut self,
        input: std::option::Option<crate::types::FileFormatType>,
    ) -> Self {
        self.file_format_type = input;
        self
    }
    /// <p> Contains information about the partition dimensions in a data store. </p>
    pub fn datastore_partitions(mut self, input: crate::types::DatastorePartitions) -> Self {
        self.datastore_partitions = Some(input);
        self
    }
    /// <p> Contains information about the partition dimensions in a data store. </p>
    pub fn set_datastore_partitions(
        mut self,
        input: std::option::Option<crate::types::DatastorePartitions>,
    ) -> Self {
        self.datastore_partitions = input;
        self
    }
    /// Consumes the builder and constructs a [`DatastoreSummary`](crate::types::DatastoreSummary).
    pub fn build(self) -> crate::types::DatastoreSummary {
        crate::types::DatastoreSummary {
            datastore_name: self.datastore_name,
            datastore_storage: self.datastore_storage,
            status: self.status,
            creation_time: self.creation_time,
            last_update_time: self.last_update_time,
            last_message_arrival_time: self.last_message_arrival_time,
            file_format_type: self.file_format_type,
            datastore_partitions: self.datastore_partitions,
        }
    }
}
