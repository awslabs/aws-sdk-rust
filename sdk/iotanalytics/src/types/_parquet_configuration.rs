// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration information of the Parquet format.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ParquetConfiguration {
    /// <p>Information needed to define a schema.</p>
    #[doc(hidden)]
    pub schema_definition: std::option::Option<crate::types::SchemaDefinition>,
}
impl ParquetConfiguration {
    /// <p>Information needed to define a schema.</p>
    pub fn schema_definition(&self) -> std::option::Option<&crate::types::SchemaDefinition> {
        self.schema_definition.as_ref()
    }
}
impl ParquetConfiguration {
    /// Creates a new builder-style object to manufacture [`ParquetConfiguration`](crate::types::ParquetConfiguration).
    pub fn builder() -> crate::types::builders::ParquetConfigurationBuilder {
        crate::types::builders::ParquetConfigurationBuilder::default()
    }
}

/// A builder for [`ParquetConfiguration`](crate::types::ParquetConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ParquetConfigurationBuilder {
    pub(crate) schema_definition: std::option::Option<crate::types::SchemaDefinition>,
}
impl ParquetConfigurationBuilder {
    /// <p>Information needed to define a schema.</p>
    pub fn schema_definition(mut self, input: crate::types::SchemaDefinition) -> Self {
        self.schema_definition = Some(input);
        self
    }
    /// <p>Information needed to define a schema.</p>
    pub fn set_schema_definition(
        mut self,
        input: std::option::Option<crate::types::SchemaDefinition>,
    ) -> Self {
        self.schema_definition = input;
        self
    }
    /// Consumes the builder and constructs a [`ParquetConfiguration`](crate::types::ParquetConfiguration).
    pub fn build(self) -> crate::types::ParquetConfiguration {
        crate::types::ParquetConfiguration {
            schema_definition: self.schema_definition,
        }
    }
}
