// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The datastore activity that specifies where to store the processed data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatastoreActivity {
    /// <p>The name of the datastore activity.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the data store where processed messages are stored.</p>
    #[doc(hidden)]
    pub datastore_name: std::option::Option<std::string::String>,
}
impl DatastoreActivity {
    /// <p>The name of the datastore activity.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the data store where processed messages are stored.</p>
    pub fn datastore_name(&self) -> std::option::Option<&str> {
        self.datastore_name.as_deref()
    }
}
impl DatastoreActivity {
    /// Creates a new builder-style object to manufacture [`DatastoreActivity`](crate::types::DatastoreActivity).
    pub fn builder() -> crate::types::builders::DatastoreActivityBuilder {
        crate::types::builders::DatastoreActivityBuilder::default()
    }
}

/// A builder for [`DatastoreActivity`](crate::types::DatastoreActivity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatastoreActivityBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) datastore_name: std::option::Option<std::string::String>,
}
impl DatastoreActivityBuilder {
    /// <p>The name of the datastore activity.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the datastore activity.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data store where processed messages are stored.</p>
    pub fn datastore_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.datastore_name = Some(input.into());
        self
    }
    /// <p>The name of the data store where processed messages are stored.</p>
    pub fn set_datastore_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.datastore_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DatastoreActivity`](crate::types::DatastoreActivity).
    pub fn build(self) -> crate::types::DatastoreActivity {
        crate::types::DatastoreActivity {
            name: self.name,
            datastore_name: self.datastore_name,
        }
    }
}
