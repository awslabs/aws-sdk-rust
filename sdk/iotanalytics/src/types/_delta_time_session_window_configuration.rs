// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the configuration information of a delta time session window.</p>
/// <p> <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html"> <code>DeltaTime</code> </a> specifies a time interval. You can use <code>DeltaTime</code> to create dataset contents with data that has arrived in the data store since the last execution. For an example of <code>DeltaTime</code>, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/automate-create-dataset.html#automate-example6"> Creating a SQL dataset with a delta window (CLI)</a> in the <i>IoT Analytics User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeltaTimeSessionWindowConfiguration {
    /// <p>A time interval. You can use <code>timeoutInMinutes</code> so that IoT Analytics can batch up late data notifications that have been generated since the last execution. IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time.</p>
    /// <p>For more information about how to write a timestamp expression, see <a href="https://prestodb.io/docs/0.172/functions/datetime.html">Date and Time Functions and Operators</a>, in the <i>Presto 0.172 Documentation</i>.</p>
    pub timeout_in_minutes: i32,
}
impl DeltaTimeSessionWindowConfiguration {
    /// <p>A time interval. You can use <code>timeoutInMinutes</code> so that IoT Analytics can batch up late data notifications that have been generated since the last execution. IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time.</p>
    /// <p>For more information about how to write a timestamp expression, see <a href="https://prestodb.io/docs/0.172/functions/datetime.html">Date and Time Functions and Operators</a>, in the <i>Presto 0.172 Documentation</i>.</p>
    pub fn timeout_in_minutes(&self) -> i32 {
        self.timeout_in_minutes
    }
}
impl DeltaTimeSessionWindowConfiguration {
    /// Creates a new builder-style object to manufacture [`DeltaTimeSessionWindowConfiguration`](crate::types::DeltaTimeSessionWindowConfiguration).
    pub fn builder() -> crate::types::builders::DeltaTimeSessionWindowConfigurationBuilder {
        crate::types::builders::DeltaTimeSessionWindowConfigurationBuilder::default()
    }
}

/// A builder for [`DeltaTimeSessionWindowConfiguration`](crate::types::DeltaTimeSessionWindowConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeltaTimeSessionWindowConfigurationBuilder {
    pub(crate) timeout_in_minutes: ::std::option::Option<i32>,
}
impl DeltaTimeSessionWindowConfigurationBuilder {
    /// <p>A time interval. You can use <code>timeoutInMinutes</code> so that IoT Analytics can batch up late data notifications that have been generated since the last execution. IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time.</p>
    /// <p>For more information about how to write a timestamp expression, see <a href="https://prestodb.io/docs/0.172/functions/datetime.html">Date and Time Functions and Operators</a>, in the <i>Presto 0.172 Documentation</i>.</p>
    /// This field is required.
    pub fn timeout_in_minutes(mut self, input: i32) -> Self {
        self.timeout_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>A time interval. You can use <code>timeoutInMinutes</code> so that IoT Analytics can batch up late data notifications that have been generated since the last execution. IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time.</p>
    /// <p>For more information about how to write a timestamp expression, see <a href="https://prestodb.io/docs/0.172/functions/datetime.html">Date and Time Functions and Operators</a>, in the <i>Presto 0.172 Documentation</i>.</p>
    pub fn set_timeout_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_in_minutes = input;
        self
    }
    /// <p>A time interval. You can use <code>timeoutInMinutes</code> so that IoT Analytics can batch up late data notifications that have been generated since the last execution. IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time.</p>
    /// <p>For more information about how to write a timestamp expression, see <a href="https://prestodb.io/docs/0.172/functions/datetime.html">Date and Time Functions and Operators</a>, in the <i>Presto 0.172 Documentation</i>.</p>
    pub fn get_timeout_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.timeout_in_minutes
    }
    /// Consumes the builder and constructs a [`DeltaTimeSessionWindowConfiguration`](crate::types::DeltaTimeSessionWindowConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`timeout_in_minutes`](crate::types::builders::DeltaTimeSessionWindowConfigurationBuilder::timeout_in_minutes)
    pub fn build(self) -> ::std::result::Result<crate::types::DeltaTimeSessionWindowConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DeltaTimeSessionWindowConfiguration {
            timeout_in_minutes: self.timeout_in_minutes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timeout_in_minutes",
                    "timeout_in_minutes was not specified but it is required when building DeltaTimeSessionWindowConfiguration",
                )
            })?,
        })
    }
}
