// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An activity that adds data from the IoT device registry to your message.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeviceRegistryEnrichActivity {
    /// <p>The name of the <code>deviceRegistryEnrich</code> activity.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the attribute that is added to the message.</p>
    #[doc(hidden)]
    pub attribute: std::option::Option<std::string::String>,
    /// <p>The name of the IoT device whose registry information is added to the message.</p>
    #[doc(hidden)]
    pub thing_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the role that allows access to the device's registry information.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The next activity in the pipeline.</p>
    #[doc(hidden)]
    pub next: std::option::Option<std::string::String>,
}
impl DeviceRegistryEnrichActivity {
    /// <p>The name of the <code>deviceRegistryEnrich</code> activity.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the attribute that is added to the message.</p>
    pub fn attribute(&self) -> std::option::Option<&str> {
        self.attribute.as_deref()
    }
    /// <p>The name of the IoT device whose registry information is added to the message.</p>
    pub fn thing_name(&self) -> std::option::Option<&str> {
        self.thing_name.as_deref()
    }
    /// <p>The ARN of the role that allows access to the device's registry information.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The next activity in the pipeline.</p>
    pub fn next(&self) -> std::option::Option<&str> {
        self.next.as_deref()
    }
}
impl DeviceRegistryEnrichActivity {
    /// Creates a new builder-style object to manufacture [`DeviceRegistryEnrichActivity`](crate::types::DeviceRegistryEnrichActivity).
    pub fn builder() -> crate::types::builders::DeviceRegistryEnrichActivityBuilder {
        crate::types::builders::DeviceRegistryEnrichActivityBuilder::default()
    }
}

/// A builder for [`DeviceRegistryEnrichActivity`](crate::types::DeviceRegistryEnrichActivity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceRegistryEnrichActivityBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) attribute: std::option::Option<std::string::String>,
    pub(crate) thing_name: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) next: std::option::Option<std::string::String>,
}
impl DeviceRegistryEnrichActivityBuilder {
    /// <p>The name of the <code>deviceRegistryEnrich</code> activity.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the <code>deviceRegistryEnrich</code> activity.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the attribute that is added to the message.</p>
    pub fn attribute(mut self, input: impl Into<std::string::String>) -> Self {
        self.attribute = Some(input.into());
        self
    }
    /// <p>The name of the attribute that is added to the message.</p>
    pub fn set_attribute(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attribute = input;
        self
    }
    /// <p>The name of the IoT device whose registry information is added to the message.</p>
    pub fn thing_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.thing_name = Some(input.into());
        self
    }
    /// <p>The name of the IoT device whose registry information is added to the message.</p>
    pub fn set_thing_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thing_name = input;
        self
    }
    /// <p>The ARN of the role that allows access to the device's registry information.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the role that allows access to the device's registry information.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The next activity in the pipeline.</p>
    pub fn next(mut self, input: impl Into<std::string::String>) -> Self {
        self.next = Some(input.into());
        self
    }
    /// <p>The next activity in the pipeline.</p>
    pub fn set_next(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next = input;
        self
    }
    /// Consumes the builder and constructs a [`DeviceRegistryEnrichActivity`](crate::types::DeviceRegistryEnrichActivity).
    pub fn build(self) -> crate::types::DeviceRegistryEnrichActivity {
        crate::types::DeviceRegistryEnrichActivity {
            name: self.name,
            attribute: self.attribute,
            thing_name: self.thing_name,
            role_arn: self.role_arn,
            next: self.next,
        }
    }
}
