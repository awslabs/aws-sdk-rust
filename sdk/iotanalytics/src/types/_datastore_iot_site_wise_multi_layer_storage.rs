// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatastoreIotSiteWiseMultiLayerStorage {
    /// <p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. </p>
    pub customer_managed_s3_storage: ::std::option::Option<crate::types::IotSiteWiseCustomerManagedDatastoreS3Storage>,
}
impl DatastoreIotSiteWiseMultiLayerStorage {
    /// <p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. </p>
    pub fn customer_managed_s3_storage(&self) -> ::std::option::Option<&crate::types::IotSiteWiseCustomerManagedDatastoreS3Storage> {
        self.customer_managed_s3_storage.as_ref()
    }
}
impl DatastoreIotSiteWiseMultiLayerStorage {
    /// Creates a new builder-style object to manufacture [`DatastoreIotSiteWiseMultiLayerStorage`](crate::types::DatastoreIotSiteWiseMultiLayerStorage).
    pub fn builder() -> crate::types::builders::DatastoreIotSiteWiseMultiLayerStorageBuilder {
        crate::types::builders::DatastoreIotSiteWiseMultiLayerStorageBuilder::default()
    }
}

/// A builder for [`DatastoreIotSiteWiseMultiLayerStorage`](crate::types::DatastoreIotSiteWiseMultiLayerStorage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatastoreIotSiteWiseMultiLayerStorageBuilder {
    pub(crate) customer_managed_s3_storage: ::std::option::Option<crate::types::IotSiteWiseCustomerManagedDatastoreS3Storage>,
}
impl DatastoreIotSiteWiseMultiLayerStorageBuilder {
    /// <p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. </p>
    /// This field is required.
    pub fn customer_managed_s3_storage(mut self, input: crate::types::IotSiteWiseCustomerManagedDatastoreS3Storage) -> Self {
        self.customer_managed_s3_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. </p>
    pub fn set_customer_managed_s3_storage(
        mut self,
        input: ::std::option::Option<crate::types::IotSiteWiseCustomerManagedDatastoreS3Storage>,
    ) -> Self {
        self.customer_managed_s3_storage = input;
        self
    }
    /// <p> Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. </p>
    pub fn get_customer_managed_s3_storage(&self) -> &::std::option::Option<crate::types::IotSiteWiseCustomerManagedDatastoreS3Storage> {
        &self.customer_managed_s3_storage
    }
    /// Consumes the builder and constructs a [`DatastoreIotSiteWiseMultiLayerStorage`](crate::types::DatastoreIotSiteWiseMultiLayerStorage).
    pub fn build(self) -> crate::types::DatastoreIotSiteWiseMultiLayerStorage {
        crate::types::DatastoreIotSiteWiseMultiLayerStorage {
            customer_managed_s3_storage: self.customer_managed_s3_storage,
        }
    }
}
