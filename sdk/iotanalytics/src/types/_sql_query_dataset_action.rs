// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SQL query to modify the message.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SqlQueryDatasetAction {
    /// <p>A SQL query string.</p>
    #[doc(hidden)]
    pub sql_query: std::option::Option<std::string::String>,
    /// <p>Prefilters applied to message data.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::QueryFilter>>,
}
impl SqlQueryDatasetAction {
    /// <p>A SQL query string.</p>
    pub fn sql_query(&self) -> std::option::Option<&str> {
        self.sql_query.as_deref()
    }
    /// <p>Prefilters applied to message data.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::QueryFilter]> {
        self.filters.as_deref()
    }
}
impl SqlQueryDatasetAction {
    /// Creates a new builder-style object to manufacture [`SqlQueryDatasetAction`](crate::types::SqlQueryDatasetAction).
    pub fn builder() -> crate::types::builders::SqlQueryDatasetActionBuilder {
        crate::types::builders::SqlQueryDatasetActionBuilder::default()
    }
}

/// A builder for [`SqlQueryDatasetAction`](crate::types::SqlQueryDatasetAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SqlQueryDatasetActionBuilder {
    pub(crate) sql_query: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::QueryFilter>>,
}
impl SqlQueryDatasetActionBuilder {
    /// <p>A SQL query string.</p>
    pub fn sql_query(mut self, input: impl Into<std::string::String>) -> Self {
        self.sql_query = Some(input.into());
        self
    }
    /// <p>A SQL query string.</p>
    pub fn set_sql_query(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sql_query = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Prefilters applied to message data.</p>
    pub fn filters(mut self, input: crate::types::QueryFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>Prefilters applied to message data.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::QueryFilter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// Consumes the builder and constructs a [`SqlQueryDatasetAction`](crate::types::SqlQueryDatasetAction).
    pub fn build(self) -> crate::types::SqlQueryDatasetAction {
        crate::types::SqlQueryDatasetAction {
            sql_query: self.sql_query,
            filters: self.filters,
        }
    }
}
