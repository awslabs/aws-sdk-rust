// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SQL query to modify the message.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SqlQueryDatasetAction {
    /// <p>A SQL query string.</p>
    pub sql_query: ::std::string::String,
    /// <p>Prefilters applied to message data.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::QueryFilter>>,
}
impl SqlQueryDatasetAction {
    /// <p>A SQL query string.</p>
    pub fn sql_query(&self) -> &str {
        use std::ops::Deref;
        self.sql_query.deref()
    }
    /// <p>Prefilters applied to message data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::QueryFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
}
impl SqlQueryDatasetAction {
    /// Creates a new builder-style object to manufacture [`SqlQueryDatasetAction`](crate::types::SqlQueryDatasetAction).
    pub fn builder() -> crate::types::builders::SqlQueryDatasetActionBuilder {
        crate::types::builders::SqlQueryDatasetActionBuilder::default()
    }
}

/// A builder for [`SqlQueryDatasetAction`](crate::types::SqlQueryDatasetAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SqlQueryDatasetActionBuilder {
    pub(crate) sql_query: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::QueryFilter>>,
}
impl SqlQueryDatasetActionBuilder {
    /// <p>A SQL query string.</p>
    /// This field is required.
    pub fn sql_query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sql_query = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A SQL query string.</p>
    pub fn set_sql_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sql_query = input;
        self
    }
    /// <p>A SQL query string.</p>
    pub fn get_sql_query(&self) -> &::std::option::Option<::std::string::String> {
        &self.sql_query
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Prefilters applied to message data.</p>
    pub fn filters(mut self, input: crate::types::QueryFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Prefilters applied to message data.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::QueryFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>Prefilters applied to message data.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::QueryFilter>> {
        &self.filters
    }
    /// Consumes the builder and constructs a [`SqlQueryDatasetAction`](crate::types::SqlQueryDatasetAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`sql_query`](crate::types::builders::SqlQueryDatasetActionBuilder::sql_query)
    pub fn build(self) -> ::std::result::Result<crate::types::SqlQueryDatasetAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SqlQueryDatasetAction {
            sql_query: self.sql_query.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sql_query",
                    "sql_query was not specified but it is required when building SqlQueryDatasetAction",
                )
            })?,
            filters: self.filters,
        })
    }
}
