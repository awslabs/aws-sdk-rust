// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information required to run the <code>containerAction</code> to produce dataset contents.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContainerDatasetAction {
    /// <p>The ARN of the Docker container stored in your account. The Docker container contains an application and required support libraries and is used to generate dataset contents.</p>
    #[doc(hidden)]
    pub image: std::option::Option<std::string::String>,
    /// <p>The ARN of the role that gives permission to the system to access required resources to run the <code>containerAction</code>. This includes, at minimum, permission to retrieve the dataset contents that are the input to the containerized application.</p>
    #[doc(hidden)]
    pub execution_role_arn: std::option::Option<std::string::String>,
    /// <p>Configuration of the resource that executes the <code>containerAction</code>.</p>
    #[doc(hidden)]
    pub resource_configuration: std::option::Option<crate::types::ResourceConfiguration>,
    /// <p>The values of variables used in the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of <code>stringValue</code>, <code>datasetContentVersionValue</code>, or <code>outputFileUriValue</code>.</p>
    #[doc(hidden)]
    pub variables: std::option::Option<std::vec::Vec<crate::types::Variable>>,
}
impl ContainerDatasetAction {
    /// <p>The ARN of the Docker container stored in your account. The Docker container contains an application and required support libraries and is used to generate dataset contents.</p>
    pub fn image(&self) -> std::option::Option<&str> {
        self.image.as_deref()
    }
    /// <p>The ARN of the role that gives permission to the system to access required resources to run the <code>containerAction</code>. This includes, at minimum, permission to retrieve the dataset contents that are the input to the containerized application.</p>
    pub fn execution_role_arn(&self) -> std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>Configuration of the resource that executes the <code>containerAction</code>.</p>
    pub fn resource_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ResourceConfiguration> {
        self.resource_configuration.as_ref()
    }
    /// <p>The values of variables used in the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of <code>stringValue</code>, <code>datasetContentVersionValue</code>, or <code>outputFileUriValue</code>.</p>
    pub fn variables(&self) -> std::option::Option<&[crate::types::Variable]> {
        self.variables.as_deref()
    }
}
impl ContainerDatasetAction {
    /// Creates a new builder-style object to manufacture [`ContainerDatasetAction`](crate::types::ContainerDatasetAction).
    pub fn builder() -> crate::types::builders::ContainerDatasetActionBuilder {
        crate::types::builders::ContainerDatasetActionBuilder::default()
    }
}

/// A builder for [`ContainerDatasetAction`](crate::types::ContainerDatasetAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContainerDatasetActionBuilder {
    pub(crate) image: std::option::Option<std::string::String>,
    pub(crate) execution_role_arn: std::option::Option<std::string::String>,
    pub(crate) resource_configuration: std::option::Option<crate::types::ResourceConfiguration>,
    pub(crate) variables: std::option::Option<std::vec::Vec<crate::types::Variable>>,
}
impl ContainerDatasetActionBuilder {
    /// <p>The ARN of the Docker container stored in your account. The Docker container contains an application and required support libraries and is used to generate dataset contents.</p>
    pub fn image(mut self, input: impl Into<std::string::String>) -> Self {
        self.image = Some(input.into());
        self
    }
    /// <p>The ARN of the Docker container stored in your account. The Docker container contains an application and required support libraries and is used to generate dataset contents.</p>
    pub fn set_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image = input;
        self
    }
    /// <p>The ARN of the role that gives permission to the system to access required resources to run the <code>containerAction</code>. This includes, at minimum, permission to retrieve the dataset contents that are the input to the containerized application.</p>
    pub fn execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the role that gives permission to the system to access required resources to run the <code>containerAction</code>. This includes, at minimum, permission to retrieve the dataset contents that are the input to the containerized application.</p>
    pub fn set_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>Configuration of the resource that executes the <code>containerAction</code>.</p>
    pub fn resource_configuration(mut self, input: crate::types::ResourceConfiguration) -> Self {
        self.resource_configuration = Some(input);
        self
    }
    /// <p>Configuration of the resource that executes the <code>containerAction</code>.</p>
    pub fn set_resource_configuration(
        mut self,
        input: std::option::Option<crate::types::ResourceConfiguration>,
    ) -> Self {
        self.resource_configuration = input;
        self
    }
    /// Appends an item to `variables`.
    ///
    /// To override the contents of this collection use [`set_variables`](Self::set_variables).
    ///
    /// <p>The values of variables used in the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of <code>stringValue</code>, <code>datasetContentVersionValue</code>, or <code>outputFileUriValue</code>.</p>
    pub fn variables(mut self, input: crate::types::Variable) -> Self {
        let mut v = self.variables.unwrap_or_default();
        v.push(input);
        self.variables = Some(v);
        self
    }
    /// <p>The values of variables used in the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of <code>stringValue</code>, <code>datasetContentVersionValue</code>, or <code>outputFileUriValue</code>.</p>
    pub fn set_variables(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Variable>>,
    ) -> Self {
        self.variables = input;
        self
    }
    /// Consumes the builder and constructs a [`ContainerDatasetAction`](crate::types::ContainerDatasetAction).
    pub fn build(self) -> crate::types::ContainerDatasetAction {
        crate::types::ContainerDatasetAction {
            image: self.image,
            execution_role_arn: self.execution_role_arn,
            resource_configuration: self.resource_configuration,
            variables: self.variables,
        }
    }
}
