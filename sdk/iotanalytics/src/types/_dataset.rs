// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a dataset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Dataset {
    /// <p>The name of the dataset.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the dataset.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The <code>DatasetAction</code> objects that automatically create the dataset contents.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::DatasetAction>>,
    /// <p>The <code>DatasetTrigger</code> objects that specify when the dataset is automatically updated.</p>
    pub triggers: ::std::option::Option<::std::vec::Vec<crate::types::DatasetTrigger>>,
    /// <p>When dataset contents are created they are delivered to destinations specified here.</p>
    pub content_delivery_rules: ::std::option::Option<::std::vec::Vec<crate::types::DatasetContentDeliveryRule>>,
    /// <p>The status of the dataset.</p>
    pub status: ::std::option::Option<crate::types::DatasetStatus>,
    /// <p>When the dataset was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time the dataset was updated.</p>
    pub last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Optional. How long, in days, message data is kept for the dataset.</p>
    pub retention_period: ::std::option::Option<crate::types::RetentionPeriod>,
    /// <p>Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the <code>retentionPeriod</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions"> Keeping Multiple Versions of IoT Analytics datasets</a> in the <i>IoT Analytics User Guide</i>.</p>
    pub versioning_configuration: ::std::option::Option<crate::types::VersioningConfiguration>,
    /// <p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.</p>
    pub late_data_rules: ::std::option::Option<::std::vec::Vec<crate::types::LateDataRule>>,
}
impl Dataset {
    /// <p>The name of the dataset.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of the dataset.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The <code>DatasetAction</code> objects that automatically create the dataset contents.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::DatasetAction] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>The <code>DatasetTrigger</code> objects that specify when the dataset is automatically updated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.triggers.is_none()`.
    pub fn triggers(&self) -> &[crate::types::DatasetTrigger] {
        self.triggers.as_deref().unwrap_or_default()
    }
    /// <p>When dataset contents are created they are delivered to destinations specified here.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.content_delivery_rules.is_none()`.
    pub fn content_delivery_rules(&self) -> &[crate::types::DatasetContentDeliveryRule] {
        self.content_delivery_rules.as_deref().unwrap_or_default()
    }
    /// <p>The status of the dataset.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DatasetStatus> {
        self.status.as_ref()
    }
    /// <p>When the dataset was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the dataset was updated.</p>
    pub fn last_update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>Optional. How long, in days, message data is kept for the dataset.</p>
    pub fn retention_period(&self) -> ::std::option::Option<&crate::types::RetentionPeriod> {
        self.retention_period.as_ref()
    }
    /// <p>Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the <code>retentionPeriod</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions"> Keeping Multiple Versions of IoT Analytics datasets</a> in the <i>IoT Analytics User Guide</i>.</p>
    pub fn versioning_configuration(&self) -> ::std::option::Option<&crate::types::VersioningConfiguration> {
        self.versioning_configuration.as_ref()
    }
    /// <p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.late_data_rules.is_none()`.
    pub fn late_data_rules(&self) -> &[crate::types::LateDataRule] {
        self.late_data_rules.as_deref().unwrap_or_default()
    }
}
impl Dataset {
    /// Creates a new builder-style object to manufacture [`Dataset`](crate::types::Dataset).
    pub fn builder() -> crate::types::builders::DatasetBuilder {
        crate::types::builders::DatasetBuilder::default()
    }
}

/// A builder for [`Dataset`](crate::types::Dataset).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatasetBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::DatasetAction>>,
    pub(crate) triggers: ::std::option::Option<::std::vec::Vec<crate::types::DatasetTrigger>>,
    pub(crate) content_delivery_rules: ::std::option::Option<::std::vec::Vec<crate::types::DatasetContentDeliveryRule>>,
    pub(crate) status: ::std::option::Option<crate::types::DatasetStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) retention_period: ::std::option::Option<crate::types::RetentionPeriod>,
    pub(crate) versioning_configuration: ::std::option::Option<crate::types::VersioningConfiguration>,
    pub(crate) late_data_rules: ::std::option::Option<::std::vec::Vec<crate::types::LateDataRule>>,
}
impl DatasetBuilder {
    /// <p>The name of the dataset.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ARN of the dataset.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the dataset.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the dataset.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The <code>DatasetAction</code> objects that automatically create the dataset contents.</p>
    pub fn actions(mut self, input: crate::types::DatasetAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The <code>DatasetAction</code> objects that automatically create the dataset contents.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DatasetAction>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The <code>DatasetAction</code> objects that automatically create the dataset contents.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DatasetAction>> {
        &self.actions
    }
    /// Appends an item to `triggers`.
    ///
    /// To override the contents of this collection use [`set_triggers`](Self::set_triggers).
    ///
    /// <p>The <code>DatasetTrigger</code> objects that specify when the dataset is automatically updated.</p>
    pub fn triggers(mut self, input: crate::types::DatasetTrigger) -> Self {
        let mut v = self.triggers.unwrap_or_default();
        v.push(input);
        self.triggers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The <code>DatasetTrigger</code> objects that specify when the dataset is automatically updated.</p>
    pub fn set_triggers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DatasetTrigger>>) -> Self {
        self.triggers = input;
        self
    }
    /// <p>The <code>DatasetTrigger</code> objects that specify when the dataset is automatically updated.</p>
    pub fn get_triggers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DatasetTrigger>> {
        &self.triggers
    }
    /// Appends an item to `content_delivery_rules`.
    ///
    /// To override the contents of this collection use [`set_content_delivery_rules`](Self::set_content_delivery_rules).
    ///
    /// <p>When dataset contents are created they are delivered to destinations specified here.</p>
    pub fn content_delivery_rules(mut self, input: crate::types::DatasetContentDeliveryRule) -> Self {
        let mut v = self.content_delivery_rules.unwrap_or_default();
        v.push(input);
        self.content_delivery_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>When dataset contents are created they are delivered to destinations specified here.</p>
    pub fn set_content_delivery_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DatasetContentDeliveryRule>>) -> Self {
        self.content_delivery_rules = input;
        self
    }
    /// <p>When dataset contents are created they are delivered to destinations specified here.</p>
    pub fn get_content_delivery_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DatasetContentDeliveryRule>> {
        &self.content_delivery_rules
    }
    /// <p>The status of the dataset.</p>
    pub fn status(mut self, input: crate::types::DatasetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the dataset.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DatasetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the dataset.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DatasetStatus> {
        &self.status
    }
    /// <p>When the dataset was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the dataset was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the dataset was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The last time the dataset was updated.</p>
    pub fn last_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time the dataset was updated.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The last time the dataset was updated.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_time
    }
    /// <p>Optional. How long, in days, message data is kept for the dataset.</p>
    pub fn retention_period(mut self, input: crate::types::RetentionPeriod) -> Self {
        self.retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optional. How long, in days, message data is kept for the dataset.</p>
    pub fn set_retention_period(mut self, input: ::std::option::Option<crate::types::RetentionPeriod>) -> Self {
        self.retention_period = input;
        self
    }
    /// <p>Optional. How long, in days, message data is kept for the dataset.</p>
    pub fn get_retention_period(&self) -> &::std::option::Option<crate::types::RetentionPeriod> {
        &self.retention_period
    }
    /// <p>Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the <code>retentionPeriod</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions"> Keeping Multiple Versions of IoT Analytics datasets</a> in the <i>IoT Analytics User Guide</i>.</p>
    pub fn versioning_configuration(mut self, input: crate::types::VersioningConfiguration) -> Self {
        self.versioning_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the <code>retentionPeriod</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions"> Keeping Multiple Versions of IoT Analytics datasets</a> in the <i>IoT Analytics User Guide</i>.</p>
    pub fn set_versioning_configuration(mut self, input: ::std::option::Option<crate::types::VersioningConfiguration>) -> Self {
        self.versioning_configuration = input;
        self
    }
    /// <p>Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the <code>retentionPeriod</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions"> Keeping Multiple Versions of IoT Analytics datasets</a> in the <i>IoT Analytics User Guide</i>.</p>
    pub fn get_versioning_configuration(&self) -> &::std::option::Option<crate::types::VersioningConfiguration> {
        &self.versioning_configuration
    }
    /// Appends an item to `late_data_rules`.
    ///
    /// To override the contents of this collection use [`set_late_data_rules`](Self::set_late_data_rules).
    ///
    /// <p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.</p>
    pub fn late_data_rules(mut self, input: crate::types::LateDataRule) -> Self {
        let mut v = self.late_data_rules.unwrap_or_default();
        v.push(input);
        self.late_data_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.</p>
    pub fn set_late_data_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LateDataRule>>) -> Self {
        self.late_data_rules = input;
        self
    }
    /// <p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.</p>
    pub fn get_late_data_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LateDataRule>> {
        &self.late_data_rules
    }
    /// Consumes the builder and constructs a [`Dataset`](crate::types::Dataset).
    pub fn build(self) -> crate::types::Dataset {
        crate::types::Dataset {
            name: self.name,
            arn: self.arn,
            actions: self.actions,
            triggers: self.triggers,
            content_delivery_rules: self.content_delivery_rules,
            status: self.status,
            creation_time: self.creation_time,
            last_update_time: self.last_update_time,
            retention_period: self.retention_period,
            versioning_configuration: self.versioning_configuration,
            late_data_rules: self.late_data_rules,
        }
    }
}
