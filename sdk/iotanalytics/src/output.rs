// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePipelineOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdatePipelineOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdatePipelineOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePipelineOutput`](crate::output::UpdatePipelineOutput).
    pub fn builder() -> crate::output::update_pipeline_output::Builder {
        crate::output::update_pipeline_output::Builder::default()
    }
}

/// See [`UpdatePipelineOutput`](crate::output::UpdatePipelineOutput).
pub mod update_pipeline_output {

    /// A builder for [`UpdatePipelineOutput`](crate::output::UpdatePipelineOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdatePipelineOutput`](crate::output::UpdatePipelineOutput).
        pub fn build(self) -> crate::output::UpdatePipelineOutput {
            crate::output::UpdatePipelineOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDatastoreOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateDatastoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateDatastoreOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDatastoreOutput`](crate::output::UpdateDatastoreOutput).
    pub fn builder() -> crate::output::update_datastore_output::Builder {
        crate::output::update_datastore_output::Builder::default()
    }
}

/// See [`UpdateDatastoreOutput`](crate::output::UpdateDatastoreOutput).
pub mod update_datastore_output {

    /// A builder for [`UpdateDatastoreOutput`](crate::output::UpdateDatastoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateDatastoreOutput`](crate::output::UpdateDatastoreOutput).
        pub fn build(self) -> crate::output::UpdateDatastoreOutput {
            crate::output::UpdateDatastoreOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDatasetOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateDatasetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateDatasetOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDatasetOutput`](crate::output::UpdateDatasetOutput).
    pub fn builder() -> crate::output::update_dataset_output::Builder {
        crate::output::update_dataset_output::Builder::default()
    }
}

/// See [`UpdateDatasetOutput`](crate::output::UpdateDatasetOutput).
pub mod update_dataset_output {

    /// A builder for [`UpdateDatasetOutput`](crate::output::UpdateDatasetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateDatasetOutput`](crate::output::UpdateDatasetOutput).
        pub fn build(self) -> crate::output::UpdateDatasetOutput {
            crate::output::UpdateDatasetOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateChannelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateChannelOutput`](crate::output::UpdateChannelOutput).
    pub fn builder() -> crate::output::update_channel_output::Builder {
        crate::output::update_channel_output::Builder::default()
    }
}

/// See [`UpdateChannelOutput`](crate::output::UpdateChannelOutput).
pub mod update_channel_output {

    /// A builder for [`UpdateChannelOutput`](crate::output::UpdateChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateChannelOutput`](crate::output::UpdateChannelOutput).
        pub fn build(self) -> crate::output::UpdateChannelOutput {
            crate::output::UpdateChannelOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartPipelineReprocessingOutput {
    /// <p>The ID of the pipeline reprocessing activity that was started.</p>
    #[doc(hidden)]
    pub reprocessing_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartPipelineReprocessingOutput {
    /// <p>The ID of the pipeline reprocessing activity that was started.</p>
    pub fn reprocessing_id(&self) -> std::option::Option<&str> {
        self.reprocessing_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartPipelineReprocessingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartPipelineReprocessingOutput {
    /// Creates a new builder-style object to manufacture [`StartPipelineReprocessingOutput`](crate::output::StartPipelineReprocessingOutput).
    pub fn builder() -> crate::output::start_pipeline_reprocessing_output::Builder {
        crate::output::start_pipeline_reprocessing_output::Builder::default()
    }
}

/// See [`StartPipelineReprocessingOutput`](crate::output::StartPipelineReprocessingOutput).
pub mod start_pipeline_reprocessing_output {

    /// A builder for [`StartPipelineReprocessingOutput`](crate::output::StartPipelineReprocessingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reprocessing_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the pipeline reprocessing activity that was started.</p>
        pub fn reprocessing_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.reprocessing_id = Some(input.into());
            self
        }
        /// <p>The ID of the pipeline reprocessing activity that was started.</p>
        pub fn set_reprocessing_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reprocessing_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartPipelineReprocessingOutput`](crate::output::StartPipelineReprocessingOutput).
        pub fn build(self) -> crate::output::StartPipelineReprocessingOutput {
            crate::output::StartPipelineReprocessingOutput {
                reprocessing_id: self.reprocessing_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SampleChannelDataOutput {
    /// <p>The list of message samples. Each sample message is returned as a base64-encoded string.</p>
    #[doc(hidden)]
    pub payloads: std::option::Option<std::vec::Vec<aws_smithy_types::Blob>>,
    _request_id: Option<String>,
}
impl SampleChannelDataOutput {
    /// <p>The list of message samples. Each sample message is returned as a base64-encoded string.</p>
    pub fn payloads(&self) -> std::option::Option<&[aws_smithy_types::Blob]> {
        self.payloads.as_deref()
    }
}
impl aws_http::request_id::RequestId for SampleChannelDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SampleChannelDataOutput {
    /// Creates a new builder-style object to manufacture [`SampleChannelDataOutput`](crate::output::SampleChannelDataOutput).
    pub fn builder() -> crate::output::sample_channel_data_output::Builder {
        crate::output::sample_channel_data_output::Builder::default()
    }
}

/// See [`SampleChannelDataOutput`](crate::output::SampleChannelDataOutput).
pub mod sample_channel_data_output {

    /// A builder for [`SampleChannelDataOutput`](crate::output::SampleChannelDataOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) payloads: std::option::Option<std::vec::Vec<aws_smithy_types::Blob>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `payloads`.
        ///
        /// To override the contents of this collection use [`set_payloads`](Self::set_payloads).
        ///
        /// <p>The list of message samples. Each sample message is returned as a base64-encoded string.</p>
        pub fn payloads(mut self, input: aws_smithy_types::Blob) -> Self {
            let mut v = self.payloads.unwrap_or_default();
            v.push(input);
            self.payloads = Some(v);
            self
        }
        /// <p>The list of message samples. Each sample message is returned as a base64-encoded string.</p>
        pub fn set_payloads(
            mut self,
            input: std::option::Option<std::vec::Vec<aws_smithy_types::Blob>>,
        ) -> Self {
            self.payloads = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SampleChannelDataOutput`](crate::output::SampleChannelDataOutput).
        pub fn build(self) -> crate::output::SampleChannelDataOutput {
            crate::output::SampleChannelDataOutput {
                payloads: self.payloads,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RunPipelineActivityOutput {
    /// <p>The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)</p>
    #[doc(hidden)]
    pub payloads: std::option::Option<std::vec::Vec<aws_smithy_types::Blob>>,
    /// <p>In case the pipeline activity fails, the log message that is generated.</p>
    #[doc(hidden)]
    pub log_result: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RunPipelineActivityOutput {
    /// <p>The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)</p>
    pub fn payloads(&self) -> std::option::Option<&[aws_smithy_types::Blob]> {
        self.payloads.as_deref()
    }
    /// <p>In case the pipeline activity fails, the log message that is generated.</p>
    pub fn log_result(&self) -> std::option::Option<&str> {
        self.log_result.as_deref()
    }
}
impl aws_http::request_id::RequestId for RunPipelineActivityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RunPipelineActivityOutput {
    /// Creates a new builder-style object to manufacture [`RunPipelineActivityOutput`](crate::output::RunPipelineActivityOutput).
    pub fn builder() -> crate::output::run_pipeline_activity_output::Builder {
        crate::output::run_pipeline_activity_output::Builder::default()
    }
}

/// See [`RunPipelineActivityOutput`](crate::output::RunPipelineActivityOutput).
pub mod run_pipeline_activity_output {

    /// A builder for [`RunPipelineActivityOutput`](crate::output::RunPipelineActivityOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) payloads: std::option::Option<std::vec::Vec<aws_smithy_types::Blob>>,
        pub(crate) log_result: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `payloads`.
        ///
        /// To override the contents of this collection use [`set_payloads`](Self::set_payloads).
        ///
        /// <p>The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)</p>
        pub fn payloads(mut self, input: aws_smithy_types::Blob) -> Self {
            let mut v = self.payloads.unwrap_or_default();
            v.push(input);
            self.payloads = Some(v);
            self
        }
        /// <p>The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)</p>
        pub fn set_payloads(
            mut self,
            input: std::option::Option<std::vec::Vec<aws_smithy_types::Blob>>,
        ) -> Self {
            self.payloads = input;
            self
        }
        /// <p>In case the pipeline activity fails, the log message that is generated.</p>
        pub fn log_result(mut self, input: impl Into<std::string::String>) -> Self {
            self.log_result = Some(input.into());
            self
        }
        /// <p>In case the pipeline activity fails, the log message that is generated.</p>
        pub fn set_log_result(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.log_result = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RunPipelineActivityOutput`](crate::output::RunPipelineActivityOutput).
        pub fn build(self) -> crate::output::RunPipelineActivityOutput {
            crate::output::RunPipelineActivityOutput {
                payloads: self.payloads,
                log_result: self.log_result,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutLoggingOptionsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutLoggingOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutLoggingOptionsOutput {
    /// Creates a new builder-style object to manufacture [`PutLoggingOptionsOutput`](crate::output::PutLoggingOptionsOutput).
    pub fn builder() -> crate::output::put_logging_options_output::Builder {
        crate::output::put_logging_options_output::Builder::default()
    }
}

/// See [`PutLoggingOptionsOutput`](crate::output::PutLoggingOptionsOutput).
pub mod put_logging_options_output {

    /// A builder for [`PutLoggingOptionsOutput`](crate::output::PutLoggingOptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutLoggingOptionsOutput`](crate::output::PutLoggingOptionsOutput).
        pub fn build(self) -> crate::output::PutLoggingOptionsOutput {
            crate::output::PutLoggingOptionsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags (metadata) that you have assigned to the resource.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags (metadata) that you have assigned to the resource.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags (metadata) that you have assigned to the resource.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The tags (metadata) that you have assigned to the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPipelinesOutput {
    /// <p>A list of <code>PipelineSummary</code> objects.</p>
    #[doc(hidden)]
    pub pipeline_summaries: std::option::Option<std::vec::Vec<crate::model::PipelineSummary>>,
    /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPipelinesOutput {
    /// <p>A list of <code>PipelineSummary</code> objects.</p>
    pub fn pipeline_summaries(&self) -> std::option::Option<&[crate::model::PipelineSummary]> {
        self.pipeline_summaries.as_deref()
    }
    /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListPipelinesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPipelinesOutput {
    /// Creates a new builder-style object to manufacture [`ListPipelinesOutput`](crate::output::ListPipelinesOutput).
    pub fn builder() -> crate::output::list_pipelines_output::Builder {
        crate::output::list_pipelines_output::Builder::default()
    }
}

/// See [`ListPipelinesOutput`](crate::output::ListPipelinesOutput).
pub mod list_pipelines_output {

    /// A builder for [`ListPipelinesOutput`](crate::output::ListPipelinesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) pipeline_summaries:
            std::option::Option<std::vec::Vec<crate::model::PipelineSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `pipeline_summaries`.
        ///
        /// To override the contents of this collection use [`set_pipeline_summaries`](Self::set_pipeline_summaries).
        ///
        /// <p>A list of <code>PipelineSummary</code> objects.</p>
        pub fn pipeline_summaries(mut self, input: crate::model::PipelineSummary) -> Self {
            let mut v = self.pipeline_summaries.unwrap_or_default();
            v.push(input);
            self.pipeline_summaries = Some(v);
            self
        }
        /// <p>A list of <code>PipelineSummary</code> objects.</p>
        pub fn set_pipeline_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PipelineSummary>>,
        ) -> Self {
            self.pipeline_summaries = input;
            self
        }
        /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListPipelinesOutput`](crate::output::ListPipelinesOutput).
        pub fn build(self) -> crate::output::ListPipelinesOutput {
            crate::output::ListPipelinesOutput {
                pipeline_summaries: self.pipeline_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDatastoresOutput {
    /// <p>A list of <code>DatastoreSummary</code> objects.</p>
    #[doc(hidden)]
    pub datastore_summaries: std::option::Option<std::vec::Vec<crate::model::DatastoreSummary>>,
    /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListDatastoresOutput {
    /// <p>A list of <code>DatastoreSummary</code> objects.</p>
    pub fn datastore_summaries(&self) -> std::option::Option<&[crate::model::DatastoreSummary]> {
        self.datastore_summaries.as_deref()
    }
    /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListDatastoresOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListDatastoresOutput {
    /// Creates a new builder-style object to manufacture [`ListDatastoresOutput`](crate::output::ListDatastoresOutput).
    pub fn builder() -> crate::output::list_datastores_output::Builder {
        crate::output::list_datastores_output::Builder::default()
    }
}

/// See [`ListDatastoresOutput`](crate::output::ListDatastoresOutput).
pub mod list_datastores_output {

    /// A builder for [`ListDatastoresOutput`](crate::output::ListDatastoresOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) datastore_summaries:
            std::option::Option<std::vec::Vec<crate::model::DatastoreSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `datastore_summaries`.
        ///
        /// To override the contents of this collection use [`set_datastore_summaries`](Self::set_datastore_summaries).
        ///
        /// <p>A list of <code>DatastoreSummary</code> objects.</p>
        pub fn datastore_summaries(mut self, input: crate::model::DatastoreSummary) -> Self {
            let mut v = self.datastore_summaries.unwrap_or_default();
            v.push(input);
            self.datastore_summaries = Some(v);
            self
        }
        /// <p>A list of <code>DatastoreSummary</code> objects.</p>
        pub fn set_datastore_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DatastoreSummary>>,
        ) -> Self {
            self.datastore_summaries = input;
            self
        }
        /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListDatastoresOutput`](crate::output::ListDatastoresOutput).
        pub fn build(self) -> crate::output::ListDatastoresOutput {
            crate::output::ListDatastoresOutput {
                datastore_summaries: self.datastore_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDatasetsOutput {
    /// <p>A list of <code>DatasetSummary</code> objects.</p>
    #[doc(hidden)]
    pub dataset_summaries: std::option::Option<std::vec::Vec<crate::model::DatasetSummary>>,
    /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListDatasetsOutput {
    /// <p>A list of <code>DatasetSummary</code> objects.</p>
    pub fn dataset_summaries(&self) -> std::option::Option<&[crate::model::DatasetSummary]> {
        self.dataset_summaries.as_deref()
    }
    /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListDatasetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListDatasetsOutput {
    /// Creates a new builder-style object to manufacture [`ListDatasetsOutput`](crate::output::ListDatasetsOutput).
    pub fn builder() -> crate::output::list_datasets_output::Builder {
        crate::output::list_datasets_output::Builder::default()
    }
}

/// See [`ListDatasetsOutput`](crate::output::ListDatasetsOutput).
pub mod list_datasets_output {

    /// A builder for [`ListDatasetsOutput`](crate::output::ListDatasetsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dataset_summaries:
            std::option::Option<std::vec::Vec<crate::model::DatasetSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `dataset_summaries`.
        ///
        /// To override the contents of this collection use [`set_dataset_summaries`](Self::set_dataset_summaries).
        ///
        /// <p>A list of <code>DatasetSummary</code> objects.</p>
        pub fn dataset_summaries(mut self, input: crate::model::DatasetSummary) -> Self {
            let mut v = self.dataset_summaries.unwrap_or_default();
            v.push(input);
            self.dataset_summaries = Some(v);
            self
        }
        /// <p>A list of <code>DatasetSummary</code> objects.</p>
        pub fn set_dataset_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DatasetSummary>>,
        ) -> Self {
            self.dataset_summaries = input;
            self
        }
        /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListDatasetsOutput`](crate::output::ListDatasetsOutput).
        pub fn build(self) -> crate::output::ListDatasetsOutput {
            crate::output::ListDatasetsOutput {
                dataset_summaries: self.dataset_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDatasetContentsOutput {
    /// <p>Summary information about dataset contents that have been created.</p>
    #[doc(hidden)]
    pub dataset_content_summaries:
        std::option::Option<std::vec::Vec<crate::model::DatasetContentSummary>>,
    /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListDatasetContentsOutput {
    /// <p>Summary information about dataset contents that have been created.</p>
    pub fn dataset_content_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::DatasetContentSummary]> {
        self.dataset_content_summaries.as_deref()
    }
    /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListDatasetContentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListDatasetContentsOutput {
    /// Creates a new builder-style object to manufacture [`ListDatasetContentsOutput`](crate::output::ListDatasetContentsOutput).
    pub fn builder() -> crate::output::list_dataset_contents_output::Builder {
        crate::output::list_dataset_contents_output::Builder::default()
    }
}

/// See [`ListDatasetContentsOutput`](crate::output::ListDatasetContentsOutput).
pub mod list_dataset_contents_output {

    /// A builder for [`ListDatasetContentsOutput`](crate::output::ListDatasetContentsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dataset_content_summaries:
            std::option::Option<std::vec::Vec<crate::model::DatasetContentSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `dataset_content_summaries`.
        ///
        /// To override the contents of this collection use [`set_dataset_content_summaries`](Self::set_dataset_content_summaries).
        ///
        /// <p>Summary information about dataset contents that have been created.</p>
        pub fn dataset_content_summaries(
            mut self,
            input: crate::model::DatasetContentSummary,
        ) -> Self {
            let mut v = self.dataset_content_summaries.unwrap_or_default();
            v.push(input);
            self.dataset_content_summaries = Some(v);
            self
        }
        /// <p>Summary information about dataset contents that have been created.</p>
        pub fn set_dataset_content_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DatasetContentSummary>>,
        ) -> Self {
            self.dataset_content_summaries = input;
            self
        }
        /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListDatasetContentsOutput`](crate::output::ListDatasetContentsOutput).
        pub fn build(self) -> crate::output::ListDatasetContentsOutput {
            crate::output::ListDatasetContentsOutput {
                dataset_content_summaries: self.dataset_content_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListChannelsOutput {
    /// <p>A list of <code>ChannelSummary</code> objects.</p>
    #[doc(hidden)]
    pub channel_summaries: std::option::Option<std::vec::Vec<crate::model::ChannelSummary>>,
    /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListChannelsOutput {
    /// <p>A list of <code>ChannelSummary</code> objects.</p>
    pub fn channel_summaries(&self) -> std::option::Option<&[crate::model::ChannelSummary]> {
        self.channel_summaries.as_deref()
    }
    /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListChannelsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListChannelsOutput {
    /// Creates a new builder-style object to manufacture [`ListChannelsOutput`](crate::output::ListChannelsOutput).
    pub fn builder() -> crate::output::list_channels_output::Builder {
        crate::output::list_channels_output::Builder::default()
    }
}

/// See [`ListChannelsOutput`](crate::output::ListChannelsOutput).
pub mod list_channels_output {

    /// A builder for [`ListChannelsOutput`](crate::output::ListChannelsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_summaries:
            std::option::Option<std::vec::Vec<crate::model::ChannelSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `channel_summaries`.
        ///
        /// To override the contents of this collection use [`set_channel_summaries`](Self::set_channel_summaries).
        ///
        /// <p>A list of <code>ChannelSummary</code> objects.</p>
        pub fn channel_summaries(mut self, input: crate::model::ChannelSummary) -> Self {
            let mut v = self.channel_summaries.unwrap_or_default();
            v.push(input);
            self.channel_summaries = Some(v);
            self
        }
        /// <p>A list of <code>ChannelSummary</code> objects.</p>
        pub fn set_channel_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ChannelSummary>>,
        ) -> Self {
            self.channel_summaries = input;
            self
        }
        /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListChannelsOutput`](crate::output::ListChannelsOutput).
        pub fn build(self) -> crate::output::ListChannelsOutput {
            crate::output::ListChannelsOutput {
                channel_summaries: self.channel_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDatasetContentOutput {
    /// <p>A list of <code>DatasetEntry</code> objects.</p>
    #[doc(hidden)]
    pub entries: std::option::Option<std::vec::Vec<crate::model::DatasetEntry>>,
    /// <p>The time when the request was made.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the dataset content.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::DatasetContentStatus>,
    _request_id: Option<String>,
}
impl GetDatasetContentOutput {
    /// <p>A list of <code>DatasetEntry</code> objects.</p>
    pub fn entries(&self) -> std::option::Option<&[crate::model::DatasetEntry]> {
        self.entries.as_deref()
    }
    /// <p>The time when the request was made.</p>
    pub fn timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>The status of the dataset content.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::DatasetContentStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetDatasetContentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDatasetContentOutput {
    /// Creates a new builder-style object to manufacture [`GetDatasetContentOutput`](crate::output::GetDatasetContentOutput).
    pub fn builder() -> crate::output::get_dataset_content_output::Builder {
        crate::output::get_dataset_content_output::Builder::default()
    }
}

/// See [`GetDatasetContentOutput`](crate::output::GetDatasetContentOutput).
pub mod get_dataset_content_output {

    /// A builder for [`GetDatasetContentOutput`](crate::output::GetDatasetContentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entries: std::option::Option<std::vec::Vec<crate::model::DatasetEntry>>,
        pub(crate) timestamp: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) status: std::option::Option<crate::model::DatasetContentStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `entries`.
        ///
        /// To override the contents of this collection use [`set_entries`](Self::set_entries).
        ///
        /// <p>A list of <code>DatasetEntry</code> objects.</p>
        pub fn entries(mut self, input: crate::model::DatasetEntry) -> Self {
            let mut v = self.entries.unwrap_or_default();
            v.push(input);
            self.entries = Some(v);
            self
        }
        /// <p>A list of <code>DatasetEntry</code> objects.</p>
        pub fn set_entries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DatasetEntry>>,
        ) -> Self {
            self.entries = input;
            self
        }
        /// <p>The time when the request was made.</p>
        pub fn timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.timestamp = Some(input);
            self
        }
        /// <p>The time when the request was made.</p>
        pub fn set_timestamp(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.timestamp = input;
            self
        }
        /// <p>The status of the dataset content.</p>
        pub fn status(mut self, input: crate::model::DatasetContentStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the dataset content.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::DatasetContentStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetDatasetContentOutput`](crate::output::GetDatasetContentOutput).
        pub fn build(self) -> crate::output::GetDatasetContentOutput {
            crate::output::GetDatasetContentOutput {
                entries: self.entries,
                timestamp: self.timestamp,
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribePipelineOutput {
    /// <p>A <code>Pipeline</code> object that contains information about the pipeline.</p>
    #[doc(hidden)]
    pub pipeline: std::option::Option<crate::model::Pipeline>,
    _request_id: Option<String>,
}
impl DescribePipelineOutput {
    /// <p>A <code>Pipeline</code> object that contains information about the pipeline.</p>
    pub fn pipeline(&self) -> std::option::Option<&crate::model::Pipeline> {
        self.pipeline.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribePipelineOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribePipelineOutput {
    /// Creates a new builder-style object to manufacture [`DescribePipelineOutput`](crate::output::DescribePipelineOutput).
    pub fn builder() -> crate::output::describe_pipeline_output::Builder {
        crate::output::describe_pipeline_output::Builder::default()
    }
}

/// See [`DescribePipelineOutput`](crate::output::DescribePipelineOutput).
pub mod describe_pipeline_output {

    /// A builder for [`DescribePipelineOutput`](crate::output::DescribePipelineOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) pipeline: std::option::Option<crate::model::Pipeline>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A <code>Pipeline</code> object that contains information about the pipeline.</p>
        pub fn pipeline(mut self, input: crate::model::Pipeline) -> Self {
            self.pipeline = Some(input);
            self
        }
        /// <p>A <code>Pipeline</code> object that contains information about the pipeline.</p>
        pub fn set_pipeline(mut self, input: std::option::Option<crate::model::Pipeline>) -> Self {
            self.pipeline = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribePipelineOutput`](crate::output::DescribePipelineOutput).
        pub fn build(self) -> crate::output::DescribePipelineOutput {
            crate::output::DescribePipelineOutput {
                pipeline: self.pipeline,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLoggingOptionsOutput {
    /// <p>The current settings of the IoT Analytics logging options.</p>
    #[doc(hidden)]
    pub logging_options: std::option::Option<crate::model::LoggingOptions>,
    _request_id: Option<String>,
}
impl DescribeLoggingOptionsOutput {
    /// <p>The current settings of the IoT Analytics logging options.</p>
    pub fn logging_options(&self) -> std::option::Option<&crate::model::LoggingOptions> {
        self.logging_options.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeLoggingOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeLoggingOptionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLoggingOptionsOutput`](crate::output::DescribeLoggingOptionsOutput).
    pub fn builder() -> crate::output::describe_logging_options_output::Builder {
        crate::output::describe_logging_options_output::Builder::default()
    }
}

/// See [`DescribeLoggingOptionsOutput`](crate::output::DescribeLoggingOptionsOutput).
pub mod describe_logging_options_output {

    /// A builder for [`DescribeLoggingOptionsOutput`](crate::output::DescribeLoggingOptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) logging_options: std::option::Option<crate::model::LoggingOptions>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The current settings of the IoT Analytics logging options.</p>
        pub fn logging_options(mut self, input: crate::model::LoggingOptions) -> Self {
            self.logging_options = Some(input);
            self
        }
        /// <p>The current settings of the IoT Analytics logging options.</p>
        pub fn set_logging_options(
            mut self,
            input: std::option::Option<crate::model::LoggingOptions>,
        ) -> Self {
            self.logging_options = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLoggingOptionsOutput`](crate::output::DescribeLoggingOptionsOutput).
        pub fn build(self) -> crate::output::DescribeLoggingOptionsOutput {
            crate::output::DescribeLoggingOptionsOutput {
                logging_options: self.logging_options,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDatastoreOutput {
    /// <p>Information about the data store.</p>
    #[doc(hidden)]
    pub datastore: std::option::Option<crate::model::Datastore>,
    /// <p>Additional statistical information about the data store. Included if the <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>
    #[doc(hidden)]
    pub statistics: std::option::Option<crate::model::DatastoreStatistics>,
    _request_id: Option<String>,
}
impl DescribeDatastoreOutput {
    /// <p>Information about the data store.</p>
    pub fn datastore(&self) -> std::option::Option<&crate::model::Datastore> {
        self.datastore.as_ref()
    }
    /// <p>Additional statistical information about the data store. Included if the <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>
    pub fn statistics(&self) -> std::option::Option<&crate::model::DatastoreStatistics> {
        self.statistics.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeDatastoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDatastoreOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDatastoreOutput`](crate::output::DescribeDatastoreOutput).
    pub fn builder() -> crate::output::describe_datastore_output::Builder {
        crate::output::describe_datastore_output::Builder::default()
    }
}

/// See [`DescribeDatastoreOutput`](crate::output::DescribeDatastoreOutput).
pub mod describe_datastore_output {

    /// A builder for [`DescribeDatastoreOutput`](crate::output::DescribeDatastoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) datastore: std::option::Option<crate::model::Datastore>,
        pub(crate) statistics: std::option::Option<crate::model::DatastoreStatistics>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the data store.</p>
        pub fn datastore(mut self, input: crate::model::Datastore) -> Self {
            self.datastore = Some(input);
            self
        }
        /// <p>Information about the data store.</p>
        pub fn set_datastore(
            mut self,
            input: std::option::Option<crate::model::Datastore>,
        ) -> Self {
            self.datastore = input;
            self
        }
        /// <p>Additional statistical information about the data store. Included if the <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>
        pub fn statistics(mut self, input: crate::model::DatastoreStatistics) -> Self {
            self.statistics = Some(input);
            self
        }
        /// <p>Additional statistical information about the data store. Included if the <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>
        pub fn set_statistics(
            mut self,
            input: std::option::Option<crate::model::DatastoreStatistics>,
        ) -> Self {
            self.statistics = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDatastoreOutput`](crate::output::DescribeDatastoreOutput).
        pub fn build(self) -> crate::output::DescribeDatastoreOutput {
            crate::output::DescribeDatastoreOutput {
                datastore: self.datastore,
                statistics: self.statistics,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDatasetOutput {
    /// <p>An object that contains information about the dataset.</p>
    #[doc(hidden)]
    pub dataset: std::option::Option<crate::model::Dataset>,
    _request_id: Option<String>,
}
impl DescribeDatasetOutput {
    /// <p>An object that contains information about the dataset.</p>
    pub fn dataset(&self) -> std::option::Option<&crate::model::Dataset> {
        self.dataset.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeDatasetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDatasetOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDatasetOutput`](crate::output::DescribeDatasetOutput).
    pub fn builder() -> crate::output::describe_dataset_output::Builder {
        crate::output::describe_dataset_output::Builder::default()
    }
}

/// See [`DescribeDatasetOutput`](crate::output::DescribeDatasetOutput).
pub mod describe_dataset_output {

    /// A builder for [`DescribeDatasetOutput`](crate::output::DescribeDatasetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dataset: std::option::Option<crate::model::Dataset>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An object that contains information about the dataset.</p>
        pub fn dataset(mut self, input: crate::model::Dataset) -> Self {
            self.dataset = Some(input);
            self
        }
        /// <p>An object that contains information about the dataset.</p>
        pub fn set_dataset(mut self, input: std::option::Option<crate::model::Dataset>) -> Self {
            self.dataset = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDatasetOutput`](crate::output::DescribeDatasetOutput).
        pub fn build(self) -> crate::output::DescribeDatasetOutput {
            crate::output::DescribeDatasetOutput {
                dataset: self.dataset,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeChannelOutput {
    /// <p>An object that contains information about the channel.</p>
    #[doc(hidden)]
    pub channel: std::option::Option<crate::model::Channel>,
    /// <p>Statistics about the channel. Included if the <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>
    #[doc(hidden)]
    pub statistics: std::option::Option<crate::model::ChannelStatistics>,
    _request_id: Option<String>,
}
impl DescribeChannelOutput {
    /// <p>An object that contains information about the channel.</p>
    pub fn channel(&self) -> std::option::Option<&crate::model::Channel> {
        self.channel.as_ref()
    }
    /// <p>Statistics about the channel. Included if the <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>
    pub fn statistics(&self) -> std::option::Option<&crate::model::ChannelStatistics> {
        self.statistics.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeChannelOutput {
    /// Creates a new builder-style object to manufacture [`DescribeChannelOutput`](crate::output::DescribeChannelOutput).
    pub fn builder() -> crate::output::describe_channel_output::Builder {
        crate::output::describe_channel_output::Builder::default()
    }
}

/// See [`DescribeChannelOutput`](crate::output::DescribeChannelOutput).
pub mod describe_channel_output {

    /// A builder for [`DescribeChannelOutput`](crate::output::DescribeChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel: std::option::Option<crate::model::Channel>,
        pub(crate) statistics: std::option::Option<crate::model::ChannelStatistics>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An object that contains information about the channel.</p>
        pub fn channel(mut self, input: crate::model::Channel) -> Self {
            self.channel = Some(input);
            self
        }
        /// <p>An object that contains information about the channel.</p>
        pub fn set_channel(mut self, input: std::option::Option<crate::model::Channel>) -> Self {
            self.channel = input;
            self
        }
        /// <p>Statistics about the channel. Included if the <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>
        pub fn statistics(mut self, input: crate::model::ChannelStatistics) -> Self {
            self.statistics = Some(input);
            self
        }
        /// <p>Statistics about the channel. Included if the <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>
        pub fn set_statistics(
            mut self,
            input: std::option::Option<crate::model::ChannelStatistics>,
        ) -> Self {
            self.statistics = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeChannelOutput`](crate::output::DescribeChannelOutput).
        pub fn build(self) -> crate::output::DescribeChannelOutput {
            crate::output::DescribeChannelOutput {
                channel: self.channel,
                statistics: self.statistics,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePipelineOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeletePipelineOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeletePipelineOutput {
    /// Creates a new builder-style object to manufacture [`DeletePipelineOutput`](crate::output::DeletePipelineOutput).
    pub fn builder() -> crate::output::delete_pipeline_output::Builder {
        crate::output::delete_pipeline_output::Builder::default()
    }
}

/// See [`DeletePipelineOutput`](crate::output::DeletePipelineOutput).
pub mod delete_pipeline_output {

    /// A builder for [`DeletePipelineOutput`](crate::output::DeletePipelineOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeletePipelineOutput`](crate::output::DeletePipelineOutput).
        pub fn build(self) -> crate::output::DeletePipelineOutput {
            crate::output::DeletePipelineOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteDatastoreOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteDatastoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteDatastoreOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDatastoreOutput`](crate::output::DeleteDatastoreOutput).
    pub fn builder() -> crate::output::delete_datastore_output::Builder {
        crate::output::delete_datastore_output::Builder::default()
    }
}

/// See [`DeleteDatastoreOutput`](crate::output::DeleteDatastoreOutput).
pub mod delete_datastore_output {

    /// A builder for [`DeleteDatastoreOutput`](crate::output::DeleteDatastoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDatastoreOutput`](crate::output::DeleteDatastoreOutput).
        pub fn build(self) -> crate::output::DeleteDatastoreOutput {
            crate::output::DeleteDatastoreOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteDatasetContentOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteDatasetContentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteDatasetContentOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDatasetContentOutput`](crate::output::DeleteDatasetContentOutput).
    pub fn builder() -> crate::output::delete_dataset_content_output::Builder {
        crate::output::delete_dataset_content_output::Builder::default()
    }
}

/// See [`DeleteDatasetContentOutput`](crate::output::DeleteDatasetContentOutput).
pub mod delete_dataset_content_output {

    /// A builder for [`DeleteDatasetContentOutput`](crate::output::DeleteDatasetContentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDatasetContentOutput`](crate::output::DeleteDatasetContentOutput).
        pub fn build(self) -> crate::output::DeleteDatasetContentOutput {
            crate::output::DeleteDatasetContentOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteDatasetOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteDatasetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteDatasetOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDatasetOutput`](crate::output::DeleteDatasetOutput).
    pub fn builder() -> crate::output::delete_dataset_output::Builder {
        crate::output::delete_dataset_output::Builder::default()
    }
}

/// See [`DeleteDatasetOutput`](crate::output::DeleteDatasetOutput).
pub mod delete_dataset_output {

    /// A builder for [`DeleteDatasetOutput`](crate::output::DeleteDatasetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDatasetOutput`](crate::output::DeleteDatasetOutput).
        pub fn build(self) -> crate::output::DeleteDatasetOutput {
            crate::output::DeleteDatasetOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteChannelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteChannelOutput`](crate::output::DeleteChannelOutput).
    pub fn builder() -> crate::output::delete_channel_output::Builder {
        crate::output::delete_channel_output::Builder::default()
    }
}

/// See [`DeleteChannelOutput`](crate::output::DeleteChannelOutput).
pub mod delete_channel_output {

    /// A builder for [`DeleteChannelOutput`](crate::output::DeleteChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteChannelOutput`](crate::output::DeleteChannelOutput).
        pub fn build(self) -> crate::output::DeleteChannelOutput {
            crate::output::DeleteChannelOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePipelineOutput {
    /// <p>The name of the pipeline.</p>
    #[doc(hidden)]
    pub pipeline_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the pipeline.</p>
    #[doc(hidden)]
    pub pipeline_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreatePipelineOutput {
    /// <p>The name of the pipeline.</p>
    pub fn pipeline_name(&self) -> std::option::Option<&str> {
        self.pipeline_name.as_deref()
    }
    /// <p>The ARN of the pipeline.</p>
    pub fn pipeline_arn(&self) -> std::option::Option<&str> {
        self.pipeline_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreatePipelineOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreatePipelineOutput {
    /// Creates a new builder-style object to manufacture [`CreatePipelineOutput`](crate::output::CreatePipelineOutput).
    pub fn builder() -> crate::output::create_pipeline_output::Builder {
        crate::output::create_pipeline_output::Builder::default()
    }
}

/// See [`CreatePipelineOutput`](crate::output::CreatePipelineOutput).
pub mod create_pipeline_output {

    /// A builder for [`CreatePipelineOutput`](crate::output::CreatePipelineOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) pipeline_name: std::option::Option<std::string::String>,
        pub(crate) pipeline_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the pipeline.</p>
        pub fn pipeline_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.pipeline_name = Some(input.into());
            self
        }
        /// <p>The name of the pipeline.</p>
        pub fn set_pipeline_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.pipeline_name = input;
            self
        }
        /// <p>The ARN of the pipeline.</p>
        pub fn pipeline_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.pipeline_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the pipeline.</p>
        pub fn set_pipeline_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.pipeline_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreatePipelineOutput`](crate::output::CreatePipelineOutput).
        pub fn build(self) -> crate::output::CreatePipelineOutput {
            crate::output::CreatePipelineOutput {
                pipeline_name: self.pipeline_name,
                pipeline_arn: self.pipeline_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDatastoreOutput {
    /// <p>The name of the data store.</p>
    #[doc(hidden)]
    pub datastore_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the data store.</p>
    #[doc(hidden)]
    pub datastore_arn: std::option::Option<std::string::String>,
    /// <p>How long, in days, message data is kept for the data store.</p>
    #[doc(hidden)]
    pub retention_period: std::option::Option<crate::model::RetentionPeriod>,
    _request_id: Option<String>,
}
impl CreateDatastoreOutput {
    /// <p>The name of the data store.</p>
    pub fn datastore_name(&self) -> std::option::Option<&str> {
        self.datastore_name.as_deref()
    }
    /// <p>The ARN of the data store.</p>
    pub fn datastore_arn(&self) -> std::option::Option<&str> {
        self.datastore_arn.as_deref()
    }
    /// <p>How long, in days, message data is kept for the data store.</p>
    pub fn retention_period(&self) -> std::option::Option<&crate::model::RetentionPeriod> {
        self.retention_period.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateDatastoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateDatastoreOutput {
    /// Creates a new builder-style object to manufacture [`CreateDatastoreOutput`](crate::output::CreateDatastoreOutput).
    pub fn builder() -> crate::output::create_datastore_output::Builder {
        crate::output::create_datastore_output::Builder::default()
    }
}

/// See [`CreateDatastoreOutput`](crate::output::CreateDatastoreOutput).
pub mod create_datastore_output {

    /// A builder for [`CreateDatastoreOutput`](crate::output::CreateDatastoreOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) datastore_name: std::option::Option<std::string::String>,
        pub(crate) datastore_arn: std::option::Option<std::string::String>,
        pub(crate) retention_period: std::option::Option<crate::model::RetentionPeriod>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the data store.</p>
        pub fn datastore_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.datastore_name = Some(input.into());
            self
        }
        /// <p>The name of the data store.</p>
        pub fn set_datastore_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.datastore_name = input;
            self
        }
        /// <p>The ARN of the data store.</p>
        pub fn datastore_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.datastore_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the data store.</p>
        pub fn set_datastore_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.datastore_arn = input;
            self
        }
        /// <p>How long, in days, message data is kept for the data store.</p>
        pub fn retention_period(mut self, input: crate::model::RetentionPeriod) -> Self {
            self.retention_period = Some(input);
            self
        }
        /// <p>How long, in days, message data is kept for the data store.</p>
        pub fn set_retention_period(
            mut self,
            input: std::option::Option<crate::model::RetentionPeriod>,
        ) -> Self {
            self.retention_period = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateDatastoreOutput`](crate::output::CreateDatastoreOutput).
        pub fn build(self) -> crate::output::CreateDatastoreOutput {
            crate::output::CreateDatastoreOutput {
                datastore_name: self.datastore_name,
                datastore_arn: self.datastore_arn,
                retention_period: self.retention_period,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDatasetContentOutput {
    /// <p>The version ID of the dataset contents that are being created.</p>
    #[doc(hidden)]
    pub version_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateDatasetContentOutput {
    /// <p>The version ID of the dataset contents that are being created.</p>
    pub fn version_id(&self) -> std::option::Option<&str> {
        self.version_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateDatasetContentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateDatasetContentOutput {
    /// Creates a new builder-style object to manufacture [`CreateDatasetContentOutput`](crate::output::CreateDatasetContentOutput).
    pub fn builder() -> crate::output::create_dataset_content_output::Builder {
        crate::output::create_dataset_content_output::Builder::default()
    }
}

/// See [`CreateDatasetContentOutput`](crate::output::CreateDatasetContentOutput).
pub mod create_dataset_content_output {

    /// A builder for [`CreateDatasetContentOutput`](crate::output::CreateDatasetContentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) version_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The version ID of the dataset contents that are being created.</p>
        pub fn version_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.version_id = Some(input.into());
            self
        }
        /// <p>The version ID of the dataset contents that are being created.</p>
        pub fn set_version_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateDatasetContentOutput`](crate::output::CreateDatasetContentOutput).
        pub fn build(self) -> crate::output::CreateDatasetContentOutput {
            crate::output::CreateDatasetContentOutput {
                version_id: self.version_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDatasetOutput {
    /// <p>The name of the dataset.</p>
    #[doc(hidden)]
    pub dataset_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the dataset.</p>
    #[doc(hidden)]
    pub dataset_arn: std::option::Option<std::string::String>,
    /// <p>How long, in days, dataset contents are kept for the dataset.</p>
    #[doc(hidden)]
    pub retention_period: std::option::Option<crate::model::RetentionPeriod>,
    _request_id: Option<String>,
}
impl CreateDatasetOutput {
    /// <p>The name of the dataset.</p>
    pub fn dataset_name(&self) -> std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p>The ARN of the dataset.</p>
    pub fn dataset_arn(&self) -> std::option::Option<&str> {
        self.dataset_arn.as_deref()
    }
    /// <p>How long, in days, dataset contents are kept for the dataset.</p>
    pub fn retention_period(&self) -> std::option::Option<&crate::model::RetentionPeriod> {
        self.retention_period.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateDatasetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateDatasetOutput {
    /// Creates a new builder-style object to manufacture [`CreateDatasetOutput`](crate::output::CreateDatasetOutput).
    pub fn builder() -> crate::output::create_dataset_output::Builder {
        crate::output::create_dataset_output::Builder::default()
    }
}

/// See [`CreateDatasetOutput`](crate::output::CreateDatasetOutput).
pub mod create_dataset_output {

    /// A builder for [`CreateDatasetOutput`](crate::output::CreateDatasetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dataset_name: std::option::Option<std::string::String>,
        pub(crate) dataset_arn: std::option::Option<std::string::String>,
        pub(crate) retention_period: std::option::Option<crate::model::RetentionPeriod>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the dataset.</p>
        pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.dataset_name = Some(input.into());
            self
        }
        /// <p>The name of the dataset.</p>
        pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dataset_name = input;
            self
        }
        /// <p>The ARN of the dataset.</p>
        pub fn dataset_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.dataset_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the dataset.</p>
        pub fn set_dataset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dataset_arn = input;
            self
        }
        /// <p>How long, in days, dataset contents are kept for the dataset.</p>
        pub fn retention_period(mut self, input: crate::model::RetentionPeriod) -> Self {
            self.retention_period = Some(input);
            self
        }
        /// <p>How long, in days, dataset contents are kept for the dataset.</p>
        pub fn set_retention_period(
            mut self,
            input: std::option::Option<crate::model::RetentionPeriod>,
        ) -> Self {
            self.retention_period = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateDatasetOutput`](crate::output::CreateDatasetOutput).
        pub fn build(self) -> crate::output::CreateDatasetOutput {
            crate::output::CreateDatasetOutput {
                dataset_name: self.dataset_name,
                dataset_arn: self.dataset_arn,
                retention_period: self.retention_period,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateChannelOutput {
    /// <p>The name of the channel.</p>
    #[doc(hidden)]
    pub channel_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>How long, in days, message data is kept for the channel.</p>
    #[doc(hidden)]
    pub retention_period: std::option::Option<crate::model::RetentionPeriod>,
    _request_id: Option<String>,
}
impl CreateChannelOutput {
    /// <p>The name of the channel.</p>
    pub fn channel_name(&self) -> std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>How long, in days, message data is kept for the channel.</p>
    pub fn retention_period(&self) -> std::option::Option<&crate::model::RetentionPeriod> {
        self.retention_period.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateChannelOutput {
    /// Creates a new builder-style object to manufacture [`CreateChannelOutput`](crate::output::CreateChannelOutput).
    pub fn builder() -> crate::output::create_channel_output::Builder {
        crate::output::create_channel_output::Builder::default()
    }
}

/// See [`CreateChannelOutput`](crate::output::CreateChannelOutput).
pub mod create_channel_output {

    /// A builder for [`CreateChannelOutput`](crate::output::CreateChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_name: std::option::Option<std::string::String>,
        pub(crate) channel_arn: std::option::Option<std::string::String>,
        pub(crate) retention_period: std::option::Option<crate::model::RetentionPeriod>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the channel.</p>
        pub fn channel_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_name = Some(input.into());
            self
        }
        /// <p>The name of the channel.</p>
        pub fn set_channel_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_name = input;
            self
        }
        /// <p>The ARN of the channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// <p>How long, in days, message data is kept for the channel.</p>
        pub fn retention_period(mut self, input: crate::model::RetentionPeriod) -> Self {
            self.retention_period = Some(input);
            self
        }
        /// <p>How long, in days, message data is kept for the channel.</p>
        pub fn set_retention_period(
            mut self,
            input: std::option::Option<crate::model::RetentionPeriod>,
        ) -> Self {
            self.retention_period = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateChannelOutput`](crate::output::CreateChannelOutput).
        pub fn build(self) -> crate::output::CreateChannelOutput {
            crate::output::CreateChannelOutput {
                channel_name: self.channel_name,
                channel_arn: self.channel_arn,
                retention_period: self.retention_period,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelPipelineReprocessingOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CancelPipelineReprocessingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CancelPipelineReprocessingOutput {
    /// Creates a new builder-style object to manufacture [`CancelPipelineReprocessingOutput`](crate::output::CancelPipelineReprocessingOutput).
    pub fn builder() -> crate::output::cancel_pipeline_reprocessing_output::Builder {
        crate::output::cancel_pipeline_reprocessing_output::Builder::default()
    }
}

/// See [`CancelPipelineReprocessingOutput`](crate::output::CancelPipelineReprocessingOutput).
pub mod cancel_pipeline_reprocessing_output {

    /// A builder for [`CancelPipelineReprocessingOutput`](crate::output::CancelPipelineReprocessingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelPipelineReprocessingOutput`](crate::output::CancelPipelineReprocessingOutput).
        pub fn build(self) -> crate::output::CancelPipelineReprocessingOutput {
            crate::output::CancelPipelineReprocessingOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchPutMessageOutput {
    /// <p>A list of any errors encountered when sending the messages to the channel.</p>
    #[doc(hidden)]
    pub batch_put_message_error_entries:
        std::option::Option<std::vec::Vec<crate::model::BatchPutMessageErrorEntry>>,
    _request_id: Option<String>,
}
impl BatchPutMessageOutput {
    /// <p>A list of any errors encountered when sending the messages to the channel.</p>
    pub fn batch_put_message_error_entries(
        &self,
    ) -> std::option::Option<&[crate::model::BatchPutMessageErrorEntry]> {
        self.batch_put_message_error_entries.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchPutMessageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchPutMessageOutput {
    /// Creates a new builder-style object to manufacture [`BatchPutMessageOutput`](crate::output::BatchPutMessageOutput).
    pub fn builder() -> crate::output::batch_put_message_output::Builder {
        crate::output::batch_put_message_output::Builder::default()
    }
}

/// See [`BatchPutMessageOutput`](crate::output::BatchPutMessageOutput).
pub mod batch_put_message_output {

    /// A builder for [`BatchPutMessageOutput`](crate::output::BatchPutMessageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) batch_put_message_error_entries:
            std::option::Option<std::vec::Vec<crate::model::BatchPutMessageErrorEntry>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `batch_put_message_error_entries`.
        ///
        /// To override the contents of this collection use [`set_batch_put_message_error_entries`](Self::set_batch_put_message_error_entries).
        ///
        /// <p>A list of any errors encountered when sending the messages to the channel.</p>
        pub fn batch_put_message_error_entries(
            mut self,
            input: crate::model::BatchPutMessageErrorEntry,
        ) -> Self {
            let mut v = self.batch_put_message_error_entries.unwrap_or_default();
            v.push(input);
            self.batch_put_message_error_entries = Some(v);
            self
        }
        /// <p>A list of any errors encountered when sending the messages to the channel.</p>
        pub fn set_batch_put_message_error_entries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BatchPutMessageErrorEntry>>,
        ) -> Self {
            self.batch_put_message_error_entries = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchPutMessageOutput`](crate::output::BatchPutMessageOutput).
        pub fn build(self) -> crate::output::BatchPutMessageOutput {
            crate::output::BatchPutMessageOutput {
                batch_put_message_error_entries: self.batch_put_message_error_entries,
                _request_id: self._request_id,
            }
        }
    }
}
