// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn logging_options_correct_errors(
    mut builder: crate::types::builders::LoggingOptionsBuilder,
) -> crate::types::builders::LoggingOptionsBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.level.is_none() {
        builder.level = "no value was set".parse::<crate::types::LoggingLevel>().ok()
    }
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn customer_managed_channel_s3_storage_correct_errors(
    mut builder: crate::types::builders::CustomerManagedChannelS3StorageBuilder,
) -> crate::types::builders::CustomerManagedChannelS3StorageBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn customer_managed_datastore_s3_storage_correct_errors(
    mut builder: crate::types::builders::CustomerManagedDatastoreS3StorageBuilder,
) -> crate::types::builders::CustomerManagedDatastoreS3StorageBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn dataset_content_delivery_rule_correct_errors(
    mut builder: crate::types::builders::DatasetContentDeliveryRuleBuilder,
) -> crate::types::builders::DatasetContentDeliveryRuleBuilder {
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::DatasetContentDeliveryDestinationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn datastore_iot_site_wise_multi_layer_storage_correct_errors(
    mut builder: crate::types::builders::DatastoreIotSiteWiseMultiLayerStorageBuilder,
) -> crate::types::builders::DatastoreIotSiteWiseMultiLayerStorageBuilder {
    if builder.customer_managed_s3_storage.is_none() {
        builder.customer_managed_s3_storage = {
            let builder = crate::types::builders::IotSiteWiseCustomerManagedDatastoreS3StorageBuilder::default();
            crate::serde_util::iot_site_wise_customer_managed_datastore_s3_storage_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn late_data_rule_correct_errors(mut builder: crate::types::builders::LateDataRuleBuilder) -> crate::types::builders::LateDataRuleBuilder {
    if builder.rule_configuration.is_none() {
        builder.rule_configuration = {
            let builder = crate::types::builders::LateDataRuleConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn add_attributes_activity_correct_errors(
    mut builder: crate::types::builders::AddAttributesActivityBuilder,
) -> crate::types::builders::AddAttributesActivityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.attributes.is_none() {
        builder.attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn channel_activity_correct_errors(
    mut builder: crate::types::builders::ChannelActivityBuilder,
) -> crate::types::builders::ChannelActivityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    builder
}

pub(crate) fn container_dataset_action_correct_errors(
    mut builder: crate::types::builders::ContainerDatasetActionBuilder,
) -> crate::types::builders::ContainerDatasetActionBuilder {
    if builder.image.is_none() {
        builder.image = Some(Default::default())
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    if builder.resource_configuration.is_none() {
        builder.resource_configuration = {
            let builder = crate::types::builders::ResourceConfigurationBuilder::default();
            crate::serde_util::resource_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn datastore_activity_correct_errors(
    mut builder: crate::types::builders::DatastoreActivityBuilder,
) -> crate::types::builders::DatastoreActivityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.datastore_name.is_none() {
        builder.datastore_name = Some(Default::default())
    }
    builder
}

pub(crate) fn device_registry_enrich_activity_correct_errors(
    mut builder: crate::types::builders::DeviceRegistryEnrichActivityBuilder,
) -> crate::types::builders::DeviceRegistryEnrichActivityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.attribute.is_none() {
        builder.attribute = Some(Default::default())
    }
    if builder.thing_name.is_none() {
        builder.thing_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn device_shadow_enrich_activity_correct_errors(
    mut builder: crate::types::builders::DeviceShadowEnrichActivityBuilder,
) -> crate::types::builders::DeviceShadowEnrichActivityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.attribute.is_none() {
        builder.attribute = Some(Default::default())
    }
    if builder.thing_name.is_none() {
        builder.thing_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_activity_correct_errors(
    mut builder: crate::types::builders::FilterActivityBuilder,
) -> crate::types::builders::FilterActivityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.filter.is_none() {
        builder.filter = Some(Default::default())
    }
    builder
}

pub(crate) fn iot_site_wise_customer_managed_datastore_s3_storage_correct_errors(
    mut builder: crate::types::builders::IotSiteWiseCustomerManagedDatastoreS3StorageBuilder,
) -> crate::types::builders::IotSiteWiseCustomerManagedDatastoreS3StorageBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_activity_correct_errors(
    mut builder: crate::types::builders::LambdaActivityBuilder,
) -> crate::types::builders::LambdaActivityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.lambda_name.is_none() {
        builder.lambda_name = Some(Default::default())
    }
    if builder.batch_size.is_none() {
        builder.batch_size = Some(Default::default())
    }
    builder
}

pub(crate) fn math_activity_correct_errors(mut builder: crate::types::builders::MathActivityBuilder) -> crate::types::builders::MathActivityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.attribute.is_none() {
        builder.attribute = Some(Default::default())
    }
    if builder.math.is_none() {
        builder.math = Some(Default::default())
    }
    builder
}

pub(crate) fn remove_attributes_activity_correct_errors(
    mut builder: crate::types::builders::RemoveAttributesActivityBuilder,
) -> crate::types::builders::RemoveAttributesActivityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.attributes.is_none() {
        builder.attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn select_attributes_activity_correct_errors(
    mut builder: crate::types::builders::SelectAttributesActivityBuilder,
) -> crate::types::builders::SelectAttributesActivityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.attributes.is_none() {
        builder.attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn sql_query_dataset_action_correct_errors(
    mut builder: crate::types::builders::SqlQueryDatasetActionBuilder,
) -> crate::types::builders::SqlQueryDatasetActionBuilder {
    if builder.sql_query.is_none() {
        builder.sql_query = Some(Default::default())
    }
    builder
}

pub(crate) fn triggering_dataset_correct_errors(
    mut builder: crate::types::builders::TriggeringDatasetBuilder,
) -> crate::types::builders::TriggeringDatasetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn delta_time_session_window_configuration_correct_errors(
    mut builder: crate::types::builders::DeltaTimeSessionWindowConfigurationBuilder,
) -> crate::types::builders::DeltaTimeSessionWindowConfigurationBuilder {
    if builder.timeout_in_minutes.is_none() {
        builder.timeout_in_minutes = Some(Default::default())
    }
    builder
}

pub(crate) fn iot_events_destination_configuration_correct_errors(
    mut builder: crate::types::builders::IotEventsDestinationConfigurationBuilder,
) -> crate::types::builders::IotEventsDestinationConfigurationBuilder {
    if builder.input_name.is_none() {
        builder.input_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn partition_correct_errors(mut builder: crate::types::builders::PartitionBuilder) -> crate::types::builders::PartitionBuilder {
    if builder.attribute_name.is_none() {
        builder.attribute_name = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_configuration_correct_errors(
    mut builder: crate::types::builders::ResourceConfigurationBuilder,
) -> crate::types::builders::ResourceConfigurationBuilder {
    if builder.compute_type.is_none() {
        builder.compute_type = "no value was set".parse::<crate::types::ComputeType>().ok()
    }
    if builder.volume_size_in_gb.is_none() {
        builder.volume_size_in_gb = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_destination_configuration_correct_errors(
    mut builder: crate::types::builders::S3DestinationConfigurationBuilder,
) -> crate::types::builders::S3DestinationConfigurationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn timestamp_partition_correct_errors(
    mut builder: crate::types::builders::TimestampPartitionBuilder,
) -> crate::types::builders::TimestampPartitionBuilder {
    if builder.attribute_name.is_none() {
        builder.attribute_name = Some(Default::default())
    }
    builder
}

pub(crate) fn column_correct_errors(mut builder: crate::types::builders::ColumnBuilder) -> crate::types::builders::ColumnBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn glue_configuration_correct_errors(
    mut builder: crate::types::builders::GlueConfigurationBuilder,
) -> crate::types::builders::GlueConfigurationBuilder {
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    builder
}

pub(crate) fn variable_correct_errors(mut builder: crate::types::builders::VariableBuilder) -> crate::types::builders::VariableBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn dataset_content_version_value_correct_errors(
    mut builder: crate::types::builders::DatasetContentVersionValueBuilder,
) -> crate::types::builders::DatasetContentVersionValueBuilder {
    if builder.dataset_name.is_none() {
        builder.dataset_name = Some(Default::default())
    }
    builder
}

pub(crate) fn delta_time_correct_errors(mut builder: crate::types::builders::DeltaTimeBuilder) -> crate::types::builders::DeltaTimeBuilder {
    if builder.offset_seconds.is_none() {
        builder.offset_seconds = Some(Default::default())
    }
    if builder.time_expression.is_none() {
        builder.time_expression = Some(Default::default())
    }
    builder
}

pub(crate) fn output_file_uri_value_correct_errors(
    mut builder: crate::types::builders::OutputFileUriValueBuilder,
) -> crate::types::builders::OutputFileUriValueBuilder {
    if builder.file_name.is_none() {
        builder.file_name = Some(Default::default())
    }
    builder
}
