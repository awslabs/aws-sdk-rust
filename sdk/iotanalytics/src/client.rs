// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS IoT Analytics
///
/// Client for invoking operations on AWS IoT Analytics. Each operation on AWS IoT Analytics is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_iotanalytics::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_iotanalytics::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_iotanalytics::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`BatchPutMessage`](crate::client::fluent_builders::BatchPutMessage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`channel_name(impl Into<String>)`](crate::client::fluent_builders::BatchPutMessage::channel_name) / [`set_channel_name(Option<String>)`](crate::client::fluent_builders::BatchPutMessage::set_channel_name): <p>The name of the channel where the messages are sent.</p>
    ///   - [`messages(Vec<Message>)`](crate::client::fluent_builders::BatchPutMessage::messages) / [`set_messages(Option<Vec<Message>>)`](crate::client::fluent_builders::BatchPutMessage::set_messages): <p>The list of messages to be sent. Each message has the format: { "messageId": "string", "payload": "string"}.</p>  <p>The field names of message payloads (data) that you send to IoT Analytics:</p>  <ul>   <li> <p>Must contain only alphanumeric characters and undescores (_). No other special characters are allowed.</p> </li>   <li> <p>Must begin with an alphabetic character or single underscore (_).</p> </li>   <li> <p>Cannot contain hyphens (-).</p> </li>   <li> <p>In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$". </p> </li>   <li> <p>Cannot be more than 255 characters.</p> </li>   <li> <p>Are case insensitive. (Fields named foo and FOO in the same payload are considered duplicates.)</p> </li>  </ul>  <p>For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29}, {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads. </p>
    /// - On success, responds with [`BatchPutMessageOutput`](crate::output::BatchPutMessageOutput) with field(s):
    ///   - [`batch_put_message_error_entries(Option<Vec<BatchPutMessageErrorEntry>>)`](crate::output::BatchPutMessageOutput::batch_put_message_error_entries): <p>A list of any errors encountered when sending the messages to the channel.</p>
    /// - On failure, responds with [`SdkError<BatchPutMessageError>`](crate::error::BatchPutMessageError)
    pub fn batch_put_message(&self) -> crate::client::fluent_builders::BatchPutMessage {
        crate::client::fluent_builders::BatchPutMessage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CancelPipelineReprocessing`](crate::client::fluent_builders::CancelPipelineReprocessing) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::CancelPipelineReprocessing::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::CancelPipelineReprocessing::set_pipeline_name): <p>The name of pipeline for which data reprocessing is canceled.</p>
    ///   - [`reprocessing_id(impl Into<String>)`](crate::client::fluent_builders::CancelPipelineReprocessing::reprocessing_id) / [`set_reprocessing_id(Option<String>)`](crate::client::fluent_builders::CancelPipelineReprocessing::set_reprocessing_id): <p>The ID of the reprocessing task (returned by <code>StartPipelineReprocessing</code>).</p>
    /// - On success, responds with [`CancelPipelineReprocessingOutput`](crate::output::CancelPipelineReprocessingOutput)

    /// - On failure, responds with [`SdkError<CancelPipelineReprocessingError>`](crate::error::CancelPipelineReprocessingError)
    pub fn cancel_pipeline_reprocessing(
        &self,
    ) -> crate::client::fluent_builders::CancelPipelineReprocessing {
        crate::client::fluent_builders::CancelPipelineReprocessing::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateChannel`](crate::client::fluent_builders::CreateChannel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`channel_name(impl Into<String>)`](crate::client::fluent_builders::CreateChannel::channel_name) / [`set_channel_name(Option<String>)`](crate::client::fluent_builders::CreateChannel::set_channel_name): <p>The name of the channel.</p>
    ///   - [`channel_storage(ChannelStorage)`](crate::client::fluent_builders::CreateChannel::channel_storage) / [`set_channel_storage(Option<ChannelStorage>)`](crate::client::fluent_builders::CreateChannel::set_channel_storage): <p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. You can't change this storage option after the channel is created.</p>
    ///   - [`retention_period(RetentionPeriod)`](crate::client::fluent_builders::CreateChannel::retention_period) / [`set_retention_period(Option<RetentionPeriod>)`](crate::client::fluent_builders::CreateChannel::set_retention_period): <p>How long, in days, message data is kept for the channel. When <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateChannel::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateChannel::set_tags): <p>Metadata which can be used to manage the channel.</p>
    /// - On success, responds with [`CreateChannelOutput`](crate::output::CreateChannelOutput) with field(s):
    ///   - [`channel_name(Option<String>)`](crate::output::CreateChannelOutput::channel_name): <p>The name of the channel.</p>
    ///   - [`channel_arn(Option<String>)`](crate::output::CreateChannelOutput::channel_arn): <p>The ARN of the channel.</p>
    ///   - [`retention_period(Option<RetentionPeriod>)`](crate::output::CreateChannelOutput::retention_period): <p>How long, in days, message data is kept for the channel.</p>
    /// - On failure, responds with [`SdkError<CreateChannelError>`](crate::error::CreateChannelError)
    pub fn create_channel(&self) -> crate::client::fluent_builders::CreateChannel {
        crate::client::fluent_builders::CreateChannel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDataset`](crate::client::fluent_builders::CreateDataset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_name(impl Into<String>)`](crate::client::fluent_builders::CreateDataset::dataset_name) / [`set_dataset_name(Option<String>)`](crate::client::fluent_builders::CreateDataset::set_dataset_name): <p>The name of the dataset.</p>
    ///   - [`actions(Vec<DatasetAction>)`](crate::client::fluent_builders::CreateDataset::actions) / [`set_actions(Option<Vec<DatasetAction>>)`](crate::client::fluent_builders::CreateDataset::set_actions): <p>A list of actions that create the dataset contents.</p>
    ///   - [`triggers(Vec<DatasetTrigger>)`](crate::client::fluent_builders::CreateDataset::triggers) / [`set_triggers(Option<Vec<DatasetTrigger>>)`](crate::client::fluent_builders::CreateDataset::set_triggers): <p>A list of triggers. A trigger causes dataset contents to be populated at a specified time interval or when another dataset's contents are created. The list of triggers can be empty or contain up to five <code>DataSetTrigger</code> objects.</p>
    ///   - [`content_delivery_rules(Vec<DatasetContentDeliveryRule>)`](crate::client::fluent_builders::CreateDataset::content_delivery_rules) / [`set_content_delivery_rules(Option<Vec<DatasetContentDeliveryRule>>)`](crate::client::fluent_builders::CreateDataset::set_content_delivery_rules): <p>When dataset contents are created, they are delivered to destinations specified here.</p>
    ///   - [`retention_period(RetentionPeriod)`](crate::client::fluent_builders::CreateDataset::retention_period) / [`set_retention_period(Option<RetentionPeriod>)`](crate::client::fluent_builders::CreateDataset::set_retention_period): <p>Optional. How long, in days, versions of dataset contents are kept for the dataset. If not specified or set to <code>null</code>, versions of dataset contents are retained for at most 90 days. The number of versions of dataset contents retained is determined by the <code>versioningConfiguration</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions"> Keeping Multiple Versions of IoT Analytics datasets</a> in the <i>IoT Analytics User Guide</i>.</p>
    ///   - [`versioning_configuration(VersioningConfiguration)`](crate::client::fluent_builders::CreateDataset::versioning_configuration) / [`set_versioning_configuration(Option<VersioningConfiguration>)`](crate::client::fluent_builders::CreateDataset::set_versioning_configuration): <p>Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the <code>retentionPeriod</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions">Keeping Multiple Versions of IoT Analytics datasets</a> in the <i>IoT Analytics User Guide</i>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateDataset::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateDataset::set_tags): <p>Metadata which can be used to manage the dataset.</p>
    ///   - [`late_data_rules(Vec<LateDataRule>)`](crate::client::fluent_builders::CreateDataset::late_data_rules) / [`set_late_data_rules(Option<Vec<LateDataRule>>)`](crate::client::fluent_builders::CreateDataset::set_late_data_rules): <p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.</p>
    /// - On success, responds with [`CreateDatasetOutput`](crate::output::CreateDatasetOutput) with field(s):
    ///   - [`dataset_name(Option<String>)`](crate::output::CreateDatasetOutput::dataset_name): <p>The name of the dataset.</p>
    ///   - [`dataset_arn(Option<String>)`](crate::output::CreateDatasetOutput::dataset_arn): <p>The ARN of the dataset.</p>
    ///   - [`retention_period(Option<RetentionPeriod>)`](crate::output::CreateDatasetOutput::retention_period): <p>How long, in days, dataset contents are kept for the dataset.</p>
    /// - On failure, responds with [`SdkError<CreateDatasetError>`](crate::error::CreateDatasetError)
    pub fn create_dataset(&self) -> crate::client::fluent_builders::CreateDataset {
        crate::client::fluent_builders::CreateDataset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDatasetContent`](crate::client::fluent_builders::CreateDatasetContent) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_name(impl Into<String>)`](crate::client::fluent_builders::CreateDatasetContent::dataset_name) / [`set_dataset_name(Option<String>)`](crate::client::fluent_builders::CreateDatasetContent::set_dataset_name): <p>The name of the dataset.</p>
    ///   - [`version_id(impl Into<String>)`](crate::client::fluent_builders::CreateDatasetContent::version_id) / [`set_version_id(Option<String>)`](crate::client::fluent_builders::CreateDatasetContent::set_version_id): <p>The version ID of the dataset content. To specify <code>versionId</code> for a dataset content, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.</p>
    /// - On success, responds with [`CreateDatasetContentOutput`](crate::output::CreateDatasetContentOutput) with field(s):
    ///   - [`version_id(Option<String>)`](crate::output::CreateDatasetContentOutput::version_id): <p>The version ID of the dataset contents that are being created.</p>
    /// - On failure, responds with [`SdkError<CreateDatasetContentError>`](crate::error::CreateDatasetContentError)
    pub fn create_dataset_content(&self) -> crate::client::fluent_builders::CreateDatasetContent {
        crate::client::fluent_builders::CreateDatasetContent::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDatastore`](crate::client::fluent_builders::CreateDatastore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`datastore_name(impl Into<String>)`](crate::client::fluent_builders::CreateDatastore::datastore_name) / [`set_datastore_name(Option<String>)`](crate::client::fluent_builders::CreateDatastore::set_datastore_name): <p>The name of the data store.</p>
    ///   - [`datastore_storage(DatastoreStorage)`](crate::client::fluent_builders::CreateDatastore::datastore_storage) / [`set_datastore_storage(Option<DatastoreStorage>)`](crate::client::fluent_builders::CreateDatastore::set_datastore_storage): <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    ///   - [`retention_period(RetentionPeriod)`](crate::client::fluent_builders::CreateDatastore::retention_period) / [`set_retention_period(Option<RetentionPeriod>)`](crate::client::fluent_builders::CreateDatastore::set_retention_period): <p>How long, in days, message data is kept for the data store. When <code>customerManagedS3</code> storage is selected, this parameter is ignored.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateDatastore::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateDatastore::set_tags): <p>Metadata which can be used to manage the data store.</p>
    ///   - [`file_format_configuration(FileFormatConfiguration)`](crate::client::fluent_builders::CreateDatastore::file_format_configuration) / [`set_file_format_configuration(Option<FileFormatConfiguration>)`](crate::client::fluent_builders::CreateDatastore::set_file_format_configuration): <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>  <p>The default file format is JSON. You can specify only one format.</p>  <p>You can't change the file format after you create the data store.</p>
    ///   - [`datastore_partitions(DatastorePartitions)`](crate::client::fluent_builders::CreateDatastore::datastore_partitions) / [`set_datastore_partitions(Option<DatastorePartitions>)`](crate::client::fluent_builders::CreateDatastore::set_datastore_partitions): <p> Contains information about the partition dimensions in a data store. </p>
    /// - On success, responds with [`CreateDatastoreOutput`](crate::output::CreateDatastoreOutput) with field(s):
    ///   - [`datastore_name(Option<String>)`](crate::output::CreateDatastoreOutput::datastore_name): <p>The name of the data store.</p>
    ///   - [`datastore_arn(Option<String>)`](crate::output::CreateDatastoreOutput::datastore_arn): <p>The ARN of the data store.</p>
    ///   - [`retention_period(Option<RetentionPeriod>)`](crate::output::CreateDatastoreOutput::retention_period): <p>How long, in days, message data is kept for the data store.</p>
    /// - On failure, responds with [`SdkError<CreateDatastoreError>`](crate::error::CreateDatastoreError)
    pub fn create_datastore(&self) -> crate::client::fluent_builders::CreateDatastore {
        crate::client::fluent_builders::CreateDatastore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreatePipeline`](crate::client::fluent_builders::CreatePipeline) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::CreatePipeline::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::CreatePipeline::set_pipeline_name): <p>The name of the pipeline.</p>
    ///   - [`pipeline_activities(Vec<PipelineActivity>)`](crate::client::fluent_builders::CreatePipeline::pipeline_activities) / [`set_pipeline_activities(Option<Vec<PipelineActivity>>)`](crate::client::fluent_builders::CreatePipeline::set_pipeline_activities): <p>A list of <code>PipelineActivity</code> objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda unctions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p>  <p>The list can be 2-25 <code>PipelineActivity</code> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity. For example:</p>  <p> <code>pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]</code> </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreatePipeline::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreatePipeline::set_tags): <p>Metadata which can be used to manage the pipeline.</p>
    /// - On success, responds with [`CreatePipelineOutput`](crate::output::CreatePipelineOutput) with field(s):
    ///   - [`pipeline_name(Option<String>)`](crate::output::CreatePipelineOutput::pipeline_name): <p>The name of the pipeline.</p>
    ///   - [`pipeline_arn(Option<String>)`](crate::output::CreatePipelineOutput::pipeline_arn): <p>The ARN of the pipeline.</p>
    /// - On failure, responds with [`SdkError<CreatePipelineError>`](crate::error::CreatePipelineError)
    pub fn create_pipeline(&self) -> crate::client::fluent_builders::CreatePipeline {
        crate::client::fluent_builders::CreatePipeline::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteChannel`](crate::client::fluent_builders::DeleteChannel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`channel_name(impl Into<String>)`](crate::client::fluent_builders::DeleteChannel::channel_name) / [`set_channel_name(Option<String>)`](crate::client::fluent_builders::DeleteChannel::set_channel_name): <p>The name of the channel to delete.</p>
    /// - On success, responds with [`DeleteChannelOutput`](crate::output::DeleteChannelOutput)

    /// - On failure, responds with [`SdkError<DeleteChannelError>`](crate::error::DeleteChannelError)
    pub fn delete_channel(&self) -> crate::client::fluent_builders::DeleteChannel {
        crate::client::fluent_builders::DeleteChannel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDataset`](crate::client::fluent_builders::DeleteDataset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_name(impl Into<String>)`](crate::client::fluent_builders::DeleteDataset::dataset_name) / [`set_dataset_name(Option<String>)`](crate::client::fluent_builders::DeleteDataset::set_dataset_name): <p>The name of the dataset to delete.</p>
    /// - On success, responds with [`DeleteDatasetOutput`](crate::output::DeleteDatasetOutput)

    /// - On failure, responds with [`SdkError<DeleteDatasetError>`](crate::error::DeleteDatasetError)
    pub fn delete_dataset(&self) -> crate::client::fluent_builders::DeleteDataset {
        crate::client::fluent_builders::DeleteDataset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDatasetContent`](crate::client::fluent_builders::DeleteDatasetContent) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_name(impl Into<String>)`](crate::client::fluent_builders::DeleteDatasetContent::dataset_name) / [`set_dataset_name(Option<String>)`](crate::client::fluent_builders::DeleteDatasetContent::set_dataset_name): <p>The name of the dataset whose content is deleted.</p>
    ///   - [`version_id(impl Into<String>)`](crate::client::fluent_builders::DeleteDatasetContent::version_id) / [`set_version_id(Option<String>)`](crate::client::fluent_builders::DeleteDatasetContent::set_version_id): <p>The version of the dataset whose content is deleted. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to delete the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.</p>
    /// - On success, responds with [`DeleteDatasetContentOutput`](crate::output::DeleteDatasetContentOutput)

    /// - On failure, responds with [`SdkError<DeleteDatasetContentError>`](crate::error::DeleteDatasetContentError)
    pub fn delete_dataset_content(&self) -> crate::client::fluent_builders::DeleteDatasetContent {
        crate::client::fluent_builders::DeleteDatasetContent::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDatastore`](crate::client::fluent_builders::DeleteDatastore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`datastore_name(impl Into<String>)`](crate::client::fluent_builders::DeleteDatastore::datastore_name) / [`set_datastore_name(Option<String>)`](crate::client::fluent_builders::DeleteDatastore::set_datastore_name): <p>The name of the data store to delete.</p>
    /// - On success, responds with [`DeleteDatastoreOutput`](crate::output::DeleteDatastoreOutput)

    /// - On failure, responds with [`SdkError<DeleteDatastoreError>`](crate::error::DeleteDatastoreError)
    pub fn delete_datastore(&self) -> crate::client::fluent_builders::DeleteDatastore {
        crate::client::fluent_builders::DeleteDatastore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePipeline`](crate::client::fluent_builders::DeletePipeline) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::DeletePipeline::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::DeletePipeline::set_pipeline_name): <p>The name of the pipeline to delete.</p>
    /// - On success, responds with [`DeletePipelineOutput`](crate::output::DeletePipelineOutput)

    /// - On failure, responds with [`SdkError<DeletePipelineError>`](crate::error::DeletePipelineError)
    pub fn delete_pipeline(&self) -> crate::client::fluent_builders::DeletePipeline {
        crate::client::fluent_builders::DeletePipeline::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeChannel`](crate::client::fluent_builders::DescribeChannel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`channel_name(impl Into<String>)`](crate::client::fluent_builders::DescribeChannel::channel_name) / [`set_channel_name(Option<String>)`](crate::client::fluent_builders::DescribeChannel::set_channel_name): <p>The name of the channel whose information is retrieved.</p>
    ///   - [`include_statistics(bool)`](crate::client::fluent_builders::DescribeChannel::include_statistics) / [`set_include_statistics(bool)`](crate::client::fluent_builders::DescribeChannel::set_include_statistics): <p>If true, additional statistical information about the channel is included in the response. This feature can't be used with a channel whose S3 storage is customer-managed.</p>
    /// - On success, responds with [`DescribeChannelOutput`](crate::output::DescribeChannelOutput) with field(s):
    ///   - [`channel(Option<Channel>)`](crate::output::DescribeChannelOutput::channel): <p>An object that contains information about the channel.</p>
    ///   - [`statistics(Option<ChannelStatistics>)`](crate::output::DescribeChannelOutput::statistics): <p>Statistics about the channel. Included if the <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>
    /// - On failure, responds with [`SdkError<DescribeChannelError>`](crate::error::DescribeChannelError)
    pub fn describe_channel(&self) -> crate::client::fluent_builders::DescribeChannel {
        crate::client::fluent_builders::DescribeChannel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeDataset`](crate::client::fluent_builders::DescribeDataset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_name(impl Into<String>)`](crate::client::fluent_builders::DescribeDataset::dataset_name) / [`set_dataset_name(Option<String>)`](crate::client::fluent_builders::DescribeDataset::set_dataset_name): <p>The name of the dataset whose information is retrieved.</p>
    /// - On success, responds with [`DescribeDatasetOutput`](crate::output::DescribeDatasetOutput) with field(s):
    ///   - [`dataset(Option<Dataset>)`](crate::output::DescribeDatasetOutput::dataset): <p>An object that contains information about the dataset.</p>
    /// - On failure, responds with [`SdkError<DescribeDatasetError>`](crate::error::DescribeDatasetError)
    pub fn describe_dataset(&self) -> crate::client::fluent_builders::DescribeDataset {
        crate::client::fluent_builders::DescribeDataset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeDatastore`](crate::client::fluent_builders::DescribeDatastore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`datastore_name(impl Into<String>)`](crate::client::fluent_builders::DescribeDatastore::datastore_name) / [`set_datastore_name(Option<String>)`](crate::client::fluent_builders::DescribeDatastore::set_datastore_name): <p>The name of the data store</p>
    ///   - [`include_statistics(bool)`](crate::client::fluent_builders::DescribeDatastore::include_statistics) / [`set_include_statistics(bool)`](crate::client::fluent_builders::DescribeDatastore::set_include_statistics): <p>If true, additional statistical information about the data store is included in the response. This feature can't be used with a data store whose S3 storage is customer-managed.</p>
    /// - On success, responds with [`DescribeDatastoreOutput`](crate::output::DescribeDatastoreOutput) with field(s):
    ///   - [`datastore(Option<Datastore>)`](crate::output::DescribeDatastoreOutput::datastore): <p>Information about the data store.</p>
    ///   - [`statistics(Option<DatastoreStatistics>)`](crate::output::DescribeDatastoreOutput::statistics): <p>Additional statistical information about the data store. Included if the <code>includeStatistics</code> parameter is set to <code>true</code> in the request.</p>
    /// - On failure, responds with [`SdkError<DescribeDatastoreError>`](crate::error::DescribeDatastoreError)
    pub fn describe_datastore(&self) -> crate::client::fluent_builders::DescribeDatastore {
        crate::client::fluent_builders::DescribeDatastore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeLoggingOptions`](crate::client::fluent_builders::DescribeLoggingOptions) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DescribeLoggingOptions::send) it.

    /// - On success, responds with [`DescribeLoggingOptionsOutput`](crate::output::DescribeLoggingOptionsOutput) with field(s):
    ///   - [`logging_options(Option<LoggingOptions>)`](crate::output::DescribeLoggingOptionsOutput::logging_options): <p>The current settings of the IoT Analytics logging options.</p>
    /// - On failure, responds with [`SdkError<DescribeLoggingOptionsError>`](crate::error::DescribeLoggingOptionsError)
    pub fn describe_logging_options(
        &self,
    ) -> crate::client::fluent_builders::DescribeLoggingOptions {
        crate::client::fluent_builders::DescribeLoggingOptions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribePipeline`](crate::client::fluent_builders::DescribePipeline) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::DescribePipeline::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::DescribePipeline::set_pipeline_name): <p>The name of the pipeline whose information is retrieved.</p>
    /// - On success, responds with [`DescribePipelineOutput`](crate::output::DescribePipelineOutput) with field(s):
    ///   - [`pipeline(Option<Pipeline>)`](crate::output::DescribePipelineOutput::pipeline): <p>A <code>Pipeline</code> object that contains information about the pipeline.</p>
    /// - On failure, responds with [`SdkError<DescribePipelineError>`](crate::error::DescribePipelineError)
    pub fn describe_pipeline(&self) -> crate::client::fluent_builders::DescribePipeline {
        crate::client::fluent_builders::DescribePipeline::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDatasetContent`](crate::client::fluent_builders::GetDatasetContent) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_name(impl Into<String>)`](crate::client::fluent_builders::GetDatasetContent::dataset_name) / [`set_dataset_name(Option<String>)`](crate::client::fluent_builders::GetDatasetContent::set_dataset_name): <p>The name of the dataset whose contents are retrieved.</p>
    ///   - [`version_id(impl Into<String>)`](crate::client::fluent_builders::GetDatasetContent::version_id) / [`set_version_id(Option<String>)`](crate::client::fluent_builders::GetDatasetContent::set_version_id): <p>The version of the dataset whose contents are retrieved. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to retrieve the contents of the latest or latest successfully completed dataset. If not specified, "$LATEST_SUCCEEDED" is the default.</p>
    /// - On success, responds with [`GetDatasetContentOutput`](crate::output::GetDatasetContentOutput) with field(s):
    ///   - [`entries(Option<Vec<DatasetEntry>>)`](crate::output::GetDatasetContentOutput::entries): <p>A list of <code>DatasetEntry</code> objects.</p>
    ///   - [`timestamp(Option<DateTime>)`](crate::output::GetDatasetContentOutput::timestamp): <p>The time when the request was made.</p>
    ///   - [`status(Option<DatasetContentStatus>)`](crate::output::GetDatasetContentOutput::status): <p>The status of the dataset content.</p>
    /// - On failure, responds with [`SdkError<GetDatasetContentError>`](crate::error::GetDatasetContentError)
    pub fn get_dataset_content(&self) -> crate::client::fluent_builders::GetDatasetContent {
        crate::client::fluent_builders::GetDatasetContent::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListChannels`](crate::client::fluent_builders::ListChannels) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListChannels::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListChannels::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListChannels::set_next_token): <p>The token for the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListChannels::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListChannels::set_max_results): <p>The maximum number of results to return in this request.</p>  <p>The default value is 100.</p>
    /// - On success, responds with [`ListChannelsOutput`](crate::output::ListChannelsOutput) with field(s):
    ///   - [`channel_summaries(Option<Vec<ChannelSummary>>)`](crate::output::ListChannelsOutput::channel_summaries): <p>A list of <code>ChannelSummary</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListChannelsOutput::next_token): <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    /// - On failure, responds with [`SdkError<ListChannelsError>`](crate::error::ListChannelsError)
    pub fn list_channels(&self) -> crate::client::fluent_builders::ListChannels {
        crate::client::fluent_builders::ListChannels::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDatasetContents`](crate::client::fluent_builders::ListDatasetContents) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDatasetContents::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_name(impl Into<String>)`](crate::client::fluent_builders::ListDatasetContents::dataset_name) / [`set_dataset_name(Option<String>)`](crate::client::fluent_builders::ListDatasetContents::set_dataset_name): <p>The name of the dataset whose contents information you want to list.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDatasetContents::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDatasetContents::set_next_token): <p>The token for the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDatasetContents::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDatasetContents::set_max_results): <p>The maximum number of results to return in this request.</p>
    ///   - [`scheduled_on_or_after(DateTime)`](crate::client::fluent_builders::ListDatasetContents::scheduled_on_or_after) / [`set_scheduled_on_or_after(Option<DateTime>)`](crate::client::fluent_builders::ListDatasetContents::set_scheduled_on_or_after): <p>A filter to limit results to those dataset contents whose creation is scheduled on or after the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>
    ///   - [`scheduled_before(DateTime)`](crate::client::fluent_builders::ListDatasetContents::scheduled_before) / [`set_scheduled_before(Option<DateTime>)`](crate::client::fluent_builders::ListDatasetContents::set_scheduled_before): <p>A filter to limit results to those dataset contents whose creation is scheduled before the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</p>
    /// - On success, responds with [`ListDatasetContentsOutput`](crate::output::ListDatasetContentsOutput) with field(s):
    ///   - [`dataset_content_summaries(Option<Vec<DatasetContentSummary>>)`](crate::output::ListDatasetContentsOutput::dataset_content_summaries): <p>Summary information about dataset contents that have been created.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDatasetContentsOutput::next_token): <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    /// - On failure, responds with [`SdkError<ListDatasetContentsError>`](crate::error::ListDatasetContentsError)
    pub fn list_dataset_contents(&self) -> crate::client::fluent_builders::ListDatasetContents {
        crate::client::fluent_builders::ListDatasetContents::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDatasets`](crate::client::fluent_builders::ListDatasets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDatasets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDatasets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDatasets::set_next_token): <p>The token for the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDatasets::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDatasets::set_max_results): <p>The maximum number of results to return in this request.</p>  <p>The default value is 100.</p>
    /// - On success, responds with [`ListDatasetsOutput`](crate::output::ListDatasetsOutput) with field(s):
    ///   - [`dataset_summaries(Option<Vec<DatasetSummary>>)`](crate::output::ListDatasetsOutput::dataset_summaries): <p>A list of <code>DatasetSummary</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDatasetsOutput::next_token): <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    /// - On failure, responds with [`SdkError<ListDatasetsError>`](crate::error::ListDatasetsError)
    pub fn list_datasets(&self) -> crate::client::fluent_builders::ListDatasets {
        crate::client::fluent_builders::ListDatasets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDatastores`](crate::client::fluent_builders::ListDatastores) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDatastores::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDatastores::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDatastores::set_next_token): <p>The token for the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDatastores::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDatastores::set_max_results): <p>The maximum number of results to return in this request.</p>  <p>The default value is 100.</p>
    /// - On success, responds with [`ListDatastoresOutput`](crate::output::ListDatastoresOutput) with field(s):
    ///   - [`datastore_summaries(Option<Vec<DatastoreSummary>>)`](crate::output::ListDatastoresOutput::datastore_summaries): <p>A list of <code>DatastoreSummary</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDatastoresOutput::next_token): <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    /// - On failure, responds with [`SdkError<ListDatastoresError>`](crate::error::ListDatastoresError)
    pub fn list_datastores(&self) -> crate::client::fluent_builders::ListDatastores {
        crate::client::fluent_builders::ListDatastores::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPipelines`](crate::client::fluent_builders::ListPipelines) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPipelines::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPipelines::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPipelines::set_next_token): <p>The token for the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPipelines::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPipelines::set_max_results): <p>The maximum number of results to return in this request.</p>  <p>The default value is 100.</p>
    /// - On success, responds with [`ListPipelinesOutput`](crate::output::ListPipelinesOutput) with field(s):
    ///   - [`pipeline_summaries(Option<Vec<PipelineSummary>>)`](crate::output::ListPipelinesOutput::pipeline_summaries): <p>A list of <code>PipelineSummary</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPipelinesOutput::next_token): <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    /// - On failure, responds with [`SdkError<ListPipelinesError>`](crate::error::ListPipelinesError)
    pub fn list_pipelines(&self) -> crate::client::fluent_builders::ListPipelines {
        crate::client::fluent_builders::ListPipelines::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN of the resource whose tags you want to list.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The tags (metadata) that you have assigned to the resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutLoggingOptions`](crate::client::fluent_builders::PutLoggingOptions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`logging_options(LoggingOptions)`](crate::client::fluent_builders::PutLoggingOptions::logging_options) / [`set_logging_options(Option<LoggingOptions>)`](crate::client::fluent_builders::PutLoggingOptions::set_logging_options): <p>The new values of the IoT Analytics logging options.</p>
    /// - On success, responds with [`PutLoggingOptionsOutput`](crate::output::PutLoggingOptionsOutput)

    /// - On failure, responds with [`SdkError<PutLoggingOptionsError>`](crate::error::PutLoggingOptionsError)
    pub fn put_logging_options(&self) -> crate::client::fluent_builders::PutLoggingOptions {
        crate::client::fluent_builders::PutLoggingOptions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RunPipelineActivity`](crate::client::fluent_builders::RunPipelineActivity) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_activity(PipelineActivity)`](crate::client::fluent_builders::RunPipelineActivity::pipeline_activity) / [`set_pipeline_activity(Option<PipelineActivity>)`](crate::client::fluent_builders::RunPipelineActivity::set_pipeline_activity): <p>The pipeline activity that is run. This must not be a channel activity or a data store activity because these activities are used in a pipeline only to load the original message and to store the (possibly) transformed message. If a Lambda activity is specified, only short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be used.</p>
    ///   - [`payloads(Vec<Blob>)`](crate::client::fluent_builders::RunPipelineActivity::payloads) / [`set_payloads(Option<Vec<Blob>>)`](crate::client::fluent_builders::RunPipelineActivity::set_payloads): <p>The sample message payloads on which the pipeline activity is run.</p>
    /// - On success, responds with [`RunPipelineActivityOutput`](crate::output::RunPipelineActivityOutput) with field(s):
    ///   - [`payloads(Option<Vec<Blob>>)`](crate::output::RunPipelineActivityOutput::payloads): <p>The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)</p>
    ///   - [`log_result(Option<String>)`](crate::output::RunPipelineActivityOutput::log_result): <p>In case the pipeline activity fails, the log message that is generated.</p>
    /// - On failure, responds with [`SdkError<RunPipelineActivityError>`](crate::error::RunPipelineActivityError)
    pub fn run_pipeline_activity(&self) -> crate::client::fluent_builders::RunPipelineActivity {
        crate::client::fluent_builders::RunPipelineActivity::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SampleChannelData`](crate::client::fluent_builders::SampleChannelData) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`channel_name(impl Into<String>)`](crate::client::fluent_builders::SampleChannelData::channel_name) / [`set_channel_name(Option<String>)`](crate::client::fluent_builders::SampleChannelData::set_channel_name): <p>The name of the channel whose message samples are retrieved.</p>
    ///   - [`max_messages(i32)`](crate::client::fluent_builders::SampleChannelData::max_messages) / [`set_max_messages(Option<i32>)`](crate::client::fluent_builders::SampleChannelData::set_max_messages): <p>The number of sample messages to be retrieved. The limit is 10. The default is also 10.</p>
    ///   - [`start_time(DateTime)`](crate::client::fluent_builders::SampleChannelData::start_time) / [`set_start_time(Option<DateTime>)`](crate::client::fluent_builders::SampleChannelData::set_start_time): <p>The start of the time window from which sample messages are retrieved.</p>
    ///   - [`end_time(DateTime)`](crate::client::fluent_builders::SampleChannelData::end_time) / [`set_end_time(Option<DateTime>)`](crate::client::fluent_builders::SampleChannelData::set_end_time): <p>The end of the time window from which sample messages are retrieved.</p>
    /// - On success, responds with [`SampleChannelDataOutput`](crate::output::SampleChannelDataOutput) with field(s):
    ///   - [`payloads(Option<Vec<Blob>>)`](crate::output::SampleChannelDataOutput::payloads): <p>The list of message samples. Each sample message is returned as a base64-encoded string.</p>
    /// - On failure, responds with [`SdkError<SampleChannelDataError>`](crate::error::SampleChannelDataError)
    pub fn sample_channel_data(&self) -> crate::client::fluent_builders::SampleChannelData {
        crate::client::fluent_builders::SampleChannelData::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartPipelineReprocessing`](crate::client::fluent_builders::StartPipelineReprocessing) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::StartPipelineReprocessing::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::StartPipelineReprocessing::set_pipeline_name): <p>The name of the pipeline on which to start reprocessing.</p>
    ///   - [`start_time(DateTime)`](crate::client::fluent_builders::StartPipelineReprocessing::start_time) / [`set_start_time(Option<DateTime>)`](crate::client::fluent_builders::StartPipelineReprocessing::set_start_time): <p>The start time (inclusive) of raw message data that is reprocessed.</p>  <p>If you specify a value for the <code>startTime</code> parameter, you must not use the <code>channelMessages</code> object.</p>
    ///   - [`end_time(DateTime)`](crate::client::fluent_builders::StartPipelineReprocessing::end_time) / [`set_end_time(Option<DateTime>)`](crate::client::fluent_builders::StartPipelineReprocessing::set_end_time): <p>The end time (exclusive) of raw message data that is reprocessed.</p>  <p>If you specify a value for the <code>endTime</code> parameter, you must not use the <code>channelMessages</code> object.</p>
    ///   - [`channel_messages(ChannelMessages)`](crate::client::fluent_builders::StartPipelineReprocessing::channel_messages) / [`set_channel_messages(Option<ChannelMessages>)`](crate::client::fluent_builders::StartPipelineReprocessing::set_channel_messages): <p>Specifies one or more sets of channel messages that you want to reprocess.</p>  <p>If you use the <code>channelMessages</code> object, you must not specify a value for <code>startTime</code> and <code>endTime</code>.</p>
    /// - On success, responds with [`StartPipelineReprocessingOutput`](crate::output::StartPipelineReprocessingOutput) with field(s):
    ///   - [`reprocessing_id(Option<String>)`](crate::output::StartPipelineReprocessingOutput::reprocessing_id): <p>The ID of the pipeline reprocessing activity that was started.</p>
    /// - On failure, responds with [`SdkError<StartPipelineReprocessingError>`](crate::error::StartPipelineReprocessingError)
    pub fn start_pipeline_reprocessing(
        &self,
    ) -> crate::client::fluent_builders::StartPipelineReprocessing {
        crate::client::fluent_builders::StartPipelineReprocessing::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of the resource whose tags you want to modify.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The new or modified tags for the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the resource whose tags you want to remove.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The keys of those tags which you want to remove.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateChannel`](crate::client::fluent_builders::UpdateChannel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`channel_name(impl Into<String>)`](crate::client::fluent_builders::UpdateChannel::channel_name) / [`set_channel_name(Option<String>)`](crate::client::fluent_builders::UpdateChannel::set_channel_name): <p>The name of the channel to be updated.</p>
    ///   - [`channel_storage(ChannelStorage)`](crate::client::fluent_builders::UpdateChannel::channel_storage) / [`set_channel_storage(Option<ChannelStorage>)`](crate::client::fluent_builders::UpdateChannel::set_channel_storage): <p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. You can't change this storage option after the channel is created.</p>
    ///   - [`retention_period(RetentionPeriod)`](crate::client::fluent_builders::UpdateChannel::retention_period) / [`set_retention_period(Option<RetentionPeriod>)`](crate::client::fluent_builders::UpdateChannel::set_retention_period): <p>How long, in days, message data is kept for the channel. The retention period can't be updated if the channel's Amazon S3 storage is customer-managed.</p>
    /// - On success, responds with [`UpdateChannelOutput`](crate::output::UpdateChannelOutput)

    /// - On failure, responds with [`SdkError<UpdateChannelError>`](crate::error::UpdateChannelError)
    pub fn update_channel(&self) -> crate::client::fluent_builders::UpdateChannel {
        crate::client::fluent_builders::UpdateChannel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDataset`](crate::client::fluent_builders::UpdateDataset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dataset_name(impl Into<String>)`](crate::client::fluent_builders::UpdateDataset::dataset_name) / [`set_dataset_name(Option<String>)`](crate::client::fluent_builders::UpdateDataset::set_dataset_name): <p>The name of the dataset to update.</p>
    ///   - [`actions(Vec<DatasetAction>)`](crate::client::fluent_builders::UpdateDataset::actions) / [`set_actions(Option<Vec<DatasetAction>>)`](crate::client::fluent_builders::UpdateDataset::set_actions): <p>A list of <code>DatasetAction</code> objects.</p>
    ///   - [`triggers(Vec<DatasetTrigger>)`](crate::client::fluent_builders::UpdateDataset::triggers) / [`set_triggers(Option<Vec<DatasetTrigger>>)`](crate::client::fluent_builders::UpdateDataset::set_triggers): <p>A list of <code>DatasetTrigger</code> objects. The list can be empty or can contain up to five <code>DatasetTrigger</code> objects.</p>
    ///   - [`content_delivery_rules(Vec<DatasetContentDeliveryRule>)`](crate::client::fluent_builders::UpdateDataset::content_delivery_rules) / [`set_content_delivery_rules(Option<Vec<DatasetContentDeliveryRule>>)`](crate::client::fluent_builders::UpdateDataset::set_content_delivery_rules): <p>When dataset contents are created, they are delivered to destinations specified here.</p>
    ///   - [`retention_period(RetentionPeriod)`](crate::client::fluent_builders::UpdateDataset::retention_period) / [`set_retention_period(Option<RetentionPeriod>)`](crate::client::fluent_builders::UpdateDataset::set_retention_period): <p>How long, in days, dataset contents are kept for the dataset.</p>
    ///   - [`versioning_configuration(VersioningConfiguration)`](crate::client::fluent_builders::UpdateDataset::versioning_configuration) / [`set_versioning_configuration(Option<VersioningConfiguration>)`](crate::client::fluent_builders::UpdateDataset::set_versioning_configuration): <p>Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the <code>retentionPeriod</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions">Keeping Multiple Versions of IoT Analytics datasets</a> in the <i>IoT Analytics User Guide</i>.</p>
    ///   - [`late_data_rules(Vec<LateDataRule>)`](crate::client::fluent_builders::UpdateDataset::late_data_rules) / [`set_late_data_rules(Option<Vec<LateDataRule>>)`](crate::client::fluent_builders::UpdateDataset::set_late_data_rules): <p>A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.</p>
    /// - On success, responds with [`UpdateDatasetOutput`](crate::output::UpdateDatasetOutput)

    /// - On failure, responds with [`SdkError<UpdateDatasetError>`](crate::error::UpdateDatasetError)
    pub fn update_dataset(&self) -> crate::client::fluent_builders::UpdateDataset {
        crate::client::fluent_builders::UpdateDataset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDatastore`](crate::client::fluent_builders::UpdateDatastore) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`datastore_name(impl Into<String>)`](crate::client::fluent_builders::UpdateDatastore::datastore_name) / [`set_datastore_name(Option<String>)`](crate::client::fluent_builders::UpdateDatastore::set_datastore_name): <p>The name of the data store to be updated.</p>
    ///   - [`retention_period(RetentionPeriod)`](crate::client::fluent_builders::UpdateDatastore::retention_period) / [`set_retention_period(Option<RetentionPeriod>)`](crate::client::fluent_builders::UpdateDatastore::set_retention_period): <p>How long, in days, message data is kept for the data store. The retention period can't be updated if the data store's Amazon S3 storage is customer-managed.</p>
    ///   - [`datastore_storage(DatastoreStorage)`](crate::client::fluent_builders::UpdateDatastore::datastore_storage) / [`set_datastore_storage(Option<DatastoreStorage>)`](crate::client::fluent_builders::UpdateDatastore::set_datastore_storage): <p>Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. </p>
    ///   - [`file_format_configuration(FileFormatConfiguration)`](crate::client::fluent_builders::UpdateDatastore::file_format_configuration) / [`set_file_format_configuration(Option<FileFormatConfiguration>)`](crate::client::fluent_builders::UpdateDatastore::set_file_format_configuration): <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p>  <p>The default file format is JSON. You can specify only one format.</p>  <p>You can't change the file format after you create the data store.</p>
    /// - On success, responds with [`UpdateDatastoreOutput`](crate::output::UpdateDatastoreOutput)

    /// - On failure, responds with [`SdkError<UpdateDatastoreError>`](crate::error::UpdateDatastoreError)
    pub fn update_datastore(&self) -> crate::client::fluent_builders::UpdateDatastore {
        crate::client::fluent_builders::UpdateDatastore::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdatePipeline`](crate::client::fluent_builders::UpdatePipeline) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl Into<String>)`](crate::client::fluent_builders::UpdatePipeline::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::client::fluent_builders::UpdatePipeline::set_pipeline_name): <p>The name of the pipeline to update.</p>
    ///   - [`pipeline_activities(Vec<PipelineActivity>)`](crate::client::fluent_builders::UpdatePipeline::pipeline_activities) / [`set_pipeline_activities(Option<Vec<PipelineActivity>>)`](crate::client::fluent_builders::UpdatePipeline::set_pipeline_activities): <p>A list of <code>PipelineActivity</code> objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p>  <p>The list can be 2-25 <code>PipelineActivity</code> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity. For example:</p>  <p> <code>pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]</code> </p>
    /// - On success, responds with [`UpdatePipelineOutput`](crate::output::UpdatePipelineOutput)

    /// - On failure, responds with [`SdkError<UpdatePipelineError>`](crate::error::UpdatePipelineError)
    pub fn update_pipeline(&self) -> crate::client::fluent_builders::UpdatePipeline {
        crate::client::fluent_builders::UpdatePipeline::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
