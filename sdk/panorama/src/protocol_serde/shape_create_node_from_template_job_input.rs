// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_node_from_template_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_node_from_template_job::CreateNodeFromTemplateJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.job_tags {
        let mut array_2 = object.key("JobTags").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_job_resource_tags::ser_job_resource_tags(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.node_description {
        object.key("NodeDescription").string(var_5.as_str());
    }
    if let Some(var_6) = &input.node_name {
        object.key("NodeName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.output_package_name {
        object.key("OutputPackageName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.output_package_version {
        object.key("OutputPackageVersion").string(var_8.as_str());
    }
    if let Some(var_9) = &input.template_parameters {
        #[allow(unused_mut)]
        let mut object_10 = object.key("TemplateParameters").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.template_type {
        object.key("TemplateType").string(var_13.as_str());
    }
    Ok(())
}
