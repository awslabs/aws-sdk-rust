// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_application_instance_output_correct_errors(
    mut builder: crate::operation::create_application_instance::builders::CreateApplicationInstanceOutputBuilder,
) -> crate::operation::create_application_instance::builders::CreateApplicationInstanceOutputBuilder {
    if builder.application_instance_id.is_none() {
        builder.application_instance_id = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn create_job_for_devices_output_correct_errors(
    mut builder: crate::operation::create_job_for_devices::builders::CreateJobForDevicesOutputBuilder,
) -> crate::operation::create_job_for_devices::builders::CreateJobForDevicesOutputBuilder {
    if builder.jobs.is_none() {
        builder.jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn create_node_from_template_job_output_correct_errors(
    mut builder: crate::operation::create_node_from_template_job::builders::CreateNodeFromTemplateJobOutputBuilder,
) -> crate::operation::create_node_from_template_job::builders::CreateNodeFromTemplateJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_package_output_correct_errors(
    mut builder: crate::operation::create_package::builders::CreatePackageOutputBuilder,
) -> crate::operation::create_package::builders::CreatePackageOutputBuilder {
    if builder.storage_location.is_none() {
        builder.storage_location = {
            let builder = crate::types::builders::StorageLocationBuilder::default();
            crate::serde_util::storage_location_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_package_import_job_output_correct_errors(
    mut builder: crate::operation::create_package_import_job::builders::CreatePackageImportJobOutputBuilder,
) -> crate::operation::create_package_import_job::builders::CreatePackageImportJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_node_output_correct_errors(
    mut builder: crate::operation::describe_node::builders::DescribeNodeOutputBuilder,
) -> crate::operation::describe_node::builders::DescribeNodeOutputBuilder {
    if builder.node_id.is_none() {
        builder.node_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.category.is_none() {
        builder.category = "no value was set".parse::<crate::types::NodeCategory>().ok()
    }
    if builder.owner_account.is_none() {
        builder.owner_account = Some(Default::default())
    }
    if builder.package_name.is_none() {
        builder.package_name = Some(Default::default())
    }
    if builder.package_id.is_none() {
        builder.package_id = Some(Default::default())
    }
    if builder.package_version.is_none() {
        builder.package_version = Some(Default::default())
    }
    if builder.patch_version.is_none() {
        builder.patch_version = Some(Default::default())
    }
    if builder.node_interface.is_none() {
        builder.node_interface = {
            let builder = crate::types::builders::NodeInterfaceBuilder::default();
            crate::serde_util::node_interface_correct_errors(builder).build().ok()
        }
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_node_from_template_job_output_correct_errors(
    mut builder: crate::operation::describe_node_from_template_job::builders::DescribeNodeFromTemplateJobOutputBuilder,
) -> crate::operation::describe_node_from_template_job::builders::DescribeNodeFromTemplateJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::NodeFromTemplateJobStatus>().ok()
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.output_package_name.is_none() {
        builder.output_package_name = Some(Default::default())
    }
    if builder.output_package_version.is_none() {
        builder.output_package_version = Some(Default::default())
    }
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::TemplateType>().ok()
    }
    if builder.template_parameters.is_none() {
        builder.template_parameters = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_package_output_correct_errors(
    mut builder: crate::operation::describe_package::builders::DescribePackageOutputBuilder,
) -> crate::operation::describe_package::builders::DescribePackageOutputBuilder {
    if builder.package_id.is_none() {
        builder.package_id = Some(Default::default())
    }
    if builder.package_name.is_none() {
        builder.package_name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.storage_location.is_none() {
        builder.storage_location = {
            let builder = crate::types::builders::StorageLocationBuilder::default();
            crate::serde_util::storage_location_correct_errors(builder).build().ok()
        }
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_package_import_job_output_correct_errors(
    mut builder: crate::operation::describe_package_import_job::builders::DescribePackageImportJobOutputBuilder,
) -> crate::operation::describe_package_import_job::builders::DescribePackageImportJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.job_type.is_none() {
        builder.job_type = "no value was set".parse::<crate::types::PackageImportJobType>().ok()
    }
    if builder.input_config.is_none() {
        builder.input_config = {
            let builder = crate::types::builders::PackageImportJobInputConfigBuilder::default();
            Some(builder.build())
        }
    }
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::PackageImportJobOutputConfigBuilder::default();
            Some(builder.build())
        }
    }
    if builder.output.is_none() {
        builder.output = {
            let builder = crate::types::builders::PackageImportJobOutputBuilder::default();
            crate::serde_util::package_import_job_output_correct_errors(builder).build().ok()
        }
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PackageImportJobStatus>().ok()
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_package_version_output_correct_errors(
    mut builder: crate::operation::describe_package_version::builders::DescribePackageVersionOutputBuilder,
) -> crate::operation::describe_package_version::builders::DescribePackageVersionOutputBuilder {
    if builder.package_id.is_none() {
        builder.package_id = Some(Default::default())
    }
    if builder.package_name.is_none() {
        builder.package_name = Some(Default::default())
    }
    if builder.package_version.is_none() {
        builder.package_version = Some(Default::default())
    }
    if builder.patch_version.is_none() {
        builder.patch_version = Some(Default::default())
    }
    if builder.is_latest_patch.is_none() {
        builder.is_latest_patch = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PackageVersionStatus>().ok()
    }
    builder
}

pub(crate) fn list_devices_output_correct_errors(
    mut builder: crate::operation::list_devices::builders::ListDevicesOutputBuilder,
) -> crate::operation::list_devices::builders::ListDevicesOutputBuilder {
    if builder.devices.is_none() {
        builder.devices = Some(Default::default())
    }
    builder
}

pub(crate) fn list_node_from_template_jobs_output_correct_errors(
    mut builder: crate::operation::list_node_from_template_jobs::builders::ListNodeFromTemplateJobsOutputBuilder,
) -> crate::operation::list_node_from_template_jobs::builders::ListNodeFromTemplateJobsOutputBuilder {
    if builder.node_from_template_jobs.is_none() {
        builder.node_from_template_jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_package_import_jobs_output_correct_errors(
    mut builder: crate::operation::list_package_import_jobs::builders::ListPackageImportJobsOutputBuilder,
) -> crate::operation::list_package_import_jobs::builders::ListPackageImportJobsOutputBuilder {
    if builder.package_import_jobs.is_none() {
        builder.package_import_jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn provision_device_output_correct_errors(
    mut builder: crate::operation::provision_device::builders::ProvisionDeviceOutputBuilder,
) -> crate::operation::provision_device::builders::ProvisionDeviceOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DeviceStatus>().ok()
    }
    builder
}

pub(crate) fn signal_application_instance_node_instances_output_correct_errors(
    mut builder: crate::operation::signal_application_instance_node_instances::builders::SignalApplicationInstanceNodeInstancesOutputBuilder,
) -> crate::operation::signal_application_instance_node_instances::builders::SignalApplicationInstanceNodeInstancesOutputBuilder {
    if builder.application_instance_id.is_none() {
        builder.application_instance_id = Some(Default::default())
    }
    builder
}

pub(crate) fn storage_location_correct_errors(
    mut builder: crate::types::builders::StorageLocationBuilder,
) -> crate::types::builders::StorageLocationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.repo_prefix_location.is_none() {
        builder.repo_prefix_location = Some(Default::default())
    }
    if builder.generated_prefix_location.is_none() {
        builder.generated_prefix_location = Some(Default::default())
    }
    if builder.binary_prefix_location.is_none() {
        builder.binary_prefix_location = Some(Default::default())
    }
    if builder.manifest_prefix_location.is_none() {
        builder.manifest_prefix_location = Some(Default::default())
    }
    builder
}

pub(crate) fn node_interface_correct_errors(
    mut builder: crate::types::builders::NodeInterfaceBuilder,
) -> crate::types::builders::NodeInterfaceBuilder {
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.outputs.is_none() {
        builder.outputs = Some(Default::default())
    }
    builder
}

pub(crate) fn package_import_job_output_correct_errors(
    mut builder: crate::types::builders::PackageImportJobOutputBuilder,
) -> crate::types::builders::PackageImportJobOutputBuilder {
    if builder.package_id.is_none() {
        builder.package_id = Some(Default::default())
    }
    if builder.package_version.is_none() {
        builder.package_version = Some(Default::default())
    }
    if builder.patch_version.is_none() {
        builder.patch_version = Some(Default::default())
    }
    if builder.output_s3_location.is_none() {
        builder.output_s3_location = {
            let builder = crate::types::builders::OutPutS3LocationBuilder::default();
            crate::serde_util::out_put_s3_location_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn out_put_s3_location_correct_errors(
    mut builder: crate::types::builders::OutPutS3LocationBuilder,
) -> crate::types::builders::OutPutS3LocationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.object_key.is_none() {
        builder.object_key = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_error_argument_correct_errors(
    mut builder: crate::types::builders::ConflictExceptionErrorArgumentBuilder,
) -> crate::types::builders::ConflictExceptionErrorArgumentBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn ethernet_payload_correct_errors(
    mut builder: crate::types::builders::EthernetPayloadBuilder,
) -> crate::types::builders::EthernetPayloadBuilder {
    if builder.connection_type.is_none() {
        builder.connection_type = "no value was set".parse::<crate::types::ConnectionType>().ok()
    }
    builder
}

pub(crate) fn job_resource_tags_correct_errors(
    mut builder: crate::types::builders::JobResourceTagsBuilder,
) -> crate::types::builders::JobResourceTagsBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::JobResourceType>().ok()
    }
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn node_correct_errors(mut builder: crate::types::builders::NodeBuilder) -> crate::types::builders::NodeBuilder {
    if builder.node_id.is_none() {
        builder.node_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.category.is_none() {
        builder.category = "no value was set".parse::<crate::types::NodeCategory>().ok()
    }
    if builder.package_name.is_none() {
        builder.package_name = Some(Default::default())
    }
    if builder.package_id.is_none() {
        builder.package_id = Some(Default::default())
    }
    if builder.package_version.is_none() {
        builder.package_version = Some(Default::default())
    }
    if builder.patch_version.is_none() {
        builder.patch_version = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn node_instance_correct_errors(mut builder: crate::types::builders::NodeInstanceBuilder) -> crate::types::builders::NodeInstanceBuilder {
    if builder.node_instance_id.is_none() {
        builder.node_instance_id = Some(Default::default())
    }
    if builder.current_status.is_none() {
        builder.current_status = "no value was set".parse::<crate::types::NodeInstanceStatus>().ok()
    }
    builder
}

pub(crate) fn ntp_payload_correct_errors(mut builder: crate::types::builders::NtpPayloadBuilder) -> crate::types::builders::NtpPayloadBuilder {
    if builder.ntp_servers.is_none() {
        builder.ntp_servers = Some(Default::default())
    }
    builder
}

pub(crate) fn package_object_correct_errors(
    mut builder: crate::types::builders::PackageObjectBuilder,
) -> crate::types::builders::PackageObjectBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.package_version.is_none() {
        builder.package_version = Some(Default::default())
    }
    if builder.patch_version.is_none() {
        builder.patch_version = Some(Default::default())
    }
    builder
}

pub(crate) fn package_version_input_config_correct_errors(
    mut builder: crate::types::builders::PackageVersionInputConfigBuilder,
) -> crate::types::builders::PackageVersionInputConfigBuilder {
    if builder.s3_location.is_none() {
        builder.s3_location = {
            let builder = crate::types::builders::S3LocationBuilder::default();
            crate::serde_util::s3_location_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn package_version_output_config_correct_errors(
    mut builder: crate::types::builders::PackageVersionOutputConfigBuilder,
) -> crate::types::builders::PackageVersionOutputConfigBuilder {
    if builder.package_name.is_none() {
        builder.package_name = Some(Default::default())
    }
    if builder.package_version.is_none() {
        builder.package_version = Some(Default::default())
    }
    builder
}

pub(crate) fn reported_runtime_context_state_correct_errors(
    mut builder: crate::types::builders::ReportedRuntimeContextStateBuilder,
) -> crate::types::builders::ReportedRuntimeContextStateBuilder {
    if builder.desired_state.is_none() {
        builder.desired_state = "no value was set".parse::<crate::types::DesiredState>().ok()
    }
    if builder.runtime_context_name.is_none() {
        builder.runtime_context_name = Some(Default::default())
    }
    if builder.device_reported_status.is_none() {
        builder.device_reported_status = "no value was set".parse::<crate::types::DeviceReportedStatus>().ok()
    }
    if builder.device_reported_time.is_none() {
        builder.device_reported_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_exception_error_argument_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionErrorArgumentBuilder,
) -> crate::types::builders::ValidationExceptionErrorArgumentBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_location_correct_errors(mut builder: crate::types::builders::S3LocationBuilder) -> crate::types::builders::S3LocationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.object_key.is_none() {
        builder.object_key = Some(Default::default())
    }
    builder
}

pub(crate) fn static_ip_connection_info_correct_errors(
    mut builder: crate::types::builders::StaticIpConnectionInfoBuilder,
) -> crate::types::builders::StaticIpConnectionInfoBuilder {
    if builder.ip_address.is_none() {
        builder.ip_address = Some(Default::default())
    }
    if builder.mask.is_none() {
        builder.mask = Some(Default::default())
    }
    if builder.dns.is_none() {
        builder.dns = Some(Default::default())
    }
    if builder.default_gateway.is_none() {
        builder.default_gateway = Some(Default::default())
    }
    builder
}
