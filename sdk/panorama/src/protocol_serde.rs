// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_create_application_instance;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_create_job_for_devices;

pub(crate) mod shape_create_node_from_template_job;

pub(crate) mod shape_create_package;

pub(crate) mod shape_create_package_import_job;

pub(crate) mod shape_delete_device;

pub(crate) mod shape_delete_package;

pub(crate) mod shape_deregister_package_version;

pub(crate) mod shape_describe_application_instance;

pub(crate) mod shape_describe_application_instance_details;

pub(crate) mod shape_describe_device;

pub(crate) mod shape_describe_device_job;

pub(crate) mod shape_describe_node;

pub(crate) mod shape_describe_node_from_template_job;

pub(crate) mod shape_describe_package;

pub(crate) mod shape_describe_package_import_job;

pub(crate) mod shape_describe_package_version;

pub(crate) mod shape_list_application_instance_dependencies;

pub(crate) mod shape_list_application_instance_node_instances;

pub(crate) mod shape_list_application_instances;

pub(crate) mod shape_list_devices;

pub(crate) mod shape_list_devices_jobs;

pub(crate) mod shape_list_node_from_template_jobs;

pub(crate) mod shape_list_nodes;

pub(crate) mod shape_list_package_import_jobs;

pub(crate) mod shape_list_packages;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_provision_device;

pub(crate) mod shape_register_package_version;

pub(crate) mod shape_remove_application_instance;

pub(crate) mod shape_signal_application_instance_node_instances;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_device_metadata;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_application_instance_input;

pub(crate) mod shape_create_job_for_devices_input;

pub(crate) mod shape_create_node_from_template_job_input;

pub(crate) mod shape_create_package_import_job_input;

pub(crate) mod shape_create_package_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_provision_device_input;

pub(crate) mod shape_register_package_version_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_signal_application_instance_node_instances_input;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_update_device_metadata_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_alternate_softwares;

pub(crate) mod shape_application_instances;

pub(crate) mod shape_conflict_exception_error_argument_list;

pub(crate) mod shape_device_job_config;

pub(crate) mod shape_device_job_list;

pub(crate) mod shape_device_list;

pub(crate) mod shape_job_list;

pub(crate) mod shape_job_resource_tags;

pub(crate) mod shape_job_tags_list;

pub(crate) mod shape_latest_device_job;

pub(crate) mod shape_manifest_overrides_payload;

pub(crate) mod shape_manifest_payload;

pub(crate) mod shape_network_payload;

pub(crate) mod shape_network_status;

pub(crate) mod shape_node_from_template_job_list;

pub(crate) mod shape_node_instances;

pub(crate) mod shape_node_interface;

pub(crate) mod shape_node_signal;

pub(crate) mod shape_nodes_list;

pub(crate) mod shape_package_import_job_input_config;

pub(crate) mod shape_package_import_job_list;

pub(crate) mod shape_package_import_job_output;

pub(crate) mod shape_package_import_job_output_config;

pub(crate) mod shape_package_list;

pub(crate) mod shape_package_objects;

pub(crate) mod shape_principal_arns_list;

pub(crate) mod shape_reported_runtime_context_states;

pub(crate) mod shape_storage_location;

pub(crate) mod shape_tag_map;

pub(crate) mod shape_template_parameters_map;

pub(crate) mod shape_validation_exception_error_argument_list;

pub(crate) mod shape_validation_exception_field_list;

pub(crate) mod shape_alternate_software_metadata;

pub(crate) mod shape_application_instance;

pub(crate) mod shape_conflict_exception_error_argument;

pub(crate) mod shape_device;

pub(crate) mod shape_device_job;

pub(crate) mod shape_ethernet_payload;

pub(crate) mod shape_ethernet_status;

pub(crate) mod shape_input_port_list;

pub(crate) mod shape_job;

pub(crate) mod shape_node;

pub(crate) mod shape_node_from_template_job;

pub(crate) mod shape_node_instance;

pub(crate) mod shape_ntp_payload;

pub(crate) mod shape_ntp_status;

pub(crate) mod shape_ota_job_config;

pub(crate) mod shape_out_put_s3_location;

pub(crate) mod shape_output_port_list;

pub(crate) mod shape_package_import_job;

pub(crate) mod shape_package_list_item;

pub(crate) mod shape_package_object;

pub(crate) mod shape_package_version_input_config;

pub(crate) mod shape_package_version_output_config;

pub(crate) mod shape_reported_runtime_context_state;

pub(crate) mod shape_validation_exception_error_argument;

pub(crate) mod shape_validation_exception_field;

pub(crate) mod shape_node_input_port;

pub(crate) mod shape_node_output_port;

pub(crate) mod shape_ntp_server_list;

pub(crate) mod shape_s3_location;

pub(crate) mod shape_static_ip_connection_info;

pub(crate) mod shape_dns_list;
