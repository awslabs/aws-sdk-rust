// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The requestor does not have permission to access the target action or resource.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The target resource is in use.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>An internal error occurred.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The target resource was not found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The request would cause a limit to be exceeded.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request contains an invalid parameter value.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateApplicationInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateApplicationInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateApplicationInstanceError> for Error {
    fn from(err: crate::error::CreateApplicationInstanceError) -> Self {
        match err {
            crate::error::CreateApplicationInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateApplicationInstanceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateApplicationInstanceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateApplicationInstanceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateApplicationInstanceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateJobForDevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateJobForDevicesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateJobForDevicesError> for Error {
    fn from(err: crate::error::CreateJobForDevicesError) -> Self {
        match err {
            crate::error::CreateJobForDevicesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateJobForDevicesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateJobForDevicesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateJobForDevicesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateJobForDevicesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateJobForDevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateNodeFromTemplateJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateNodeFromTemplateJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateNodeFromTemplateJobError> for Error {
    fn from(err: crate::error::CreateNodeFromTemplateJobError) -> Self {
        match err {
            crate::error::CreateNodeFromTemplateJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateNodeFromTemplateJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateNodeFromTemplateJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateNodeFromTemplateJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateNodeFromTemplateJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePackageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePackageError> for Error {
    fn from(err: crate::error::CreatePackageError) -> Self {
        match err {
            crate::error::CreatePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreatePackageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreatePackageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreatePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreatePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePackageImportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePackageImportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePackageImportJobError> for Error {
    fn from(err: crate::error::CreatePackageImportJobError) -> Self {
        match err {
            crate::error::CreatePackageImportJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreatePackageImportJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreatePackageImportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreatePackageImportJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreatePackageImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDeviceError> for Error {
    fn from(err: crate::error::DeleteDeviceError) -> Self {
        match err {
            crate::error::DeleteDeviceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDeviceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDeviceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePackageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePackageError> for Error {
    fn from(err: crate::error::DeletePackageError) -> Self {
        match err {
            crate::error::DeletePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeletePackageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeletePackageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeletePackageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeletePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeletePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterPackageVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterPackageVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterPackageVersionError> for Error {
    fn from(err: crate::error::DeregisterPackageVersionError) -> Self {
        match err {
            crate::error::DeregisterPackageVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeregisterPackageVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeregisterPackageVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeregisterPackageVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeregisterPackageVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeregisterPackageVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeApplicationInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeApplicationInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeApplicationInstanceError> for Error {
    fn from(err: crate::error::DescribeApplicationInstanceError) -> Self {
        match err {
            crate::error::DescribeApplicationInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeApplicationInstanceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeApplicationInstanceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeApplicationInstanceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeApplicationInstanceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeApplicationInstanceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeApplicationInstanceDetailsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeApplicationInstanceDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeApplicationInstanceDetailsError> for Error {
    fn from(err: crate::error::DescribeApplicationInstanceDetailsError) -> Self {
        match err {
            crate::error::DescribeApplicationInstanceDetailsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeApplicationInstanceDetailsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeApplicationInstanceDetailsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DescribeApplicationInstanceDetailsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeApplicationInstanceDetailsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeApplicationInstanceDetailsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDeviceError> for Error {
    fn from(err: crate::error::DescribeDeviceError) -> Self {
        match err {
            crate::error::DescribeDeviceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDeviceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDeviceJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDeviceJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDeviceJobError> for Error {
    fn from(err: crate::error::DescribeDeviceJobError) -> Self {
        match err {
            crate::error::DescribeDeviceJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeDeviceJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeDeviceJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeDeviceJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDeviceJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeDeviceJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeNodeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeNodeError> for Error {
    fn from(err: crate::error::DescribeNodeError) -> Self {
        match err {
            crate::error::DescribeNodeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeNodeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeNodeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeNodeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeNodeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeNodeFromTemplateJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeNodeFromTemplateJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeNodeFromTemplateJobError> for Error {
    fn from(err: crate::error::DescribeNodeFromTemplateJobError) -> Self {
        match err {
            crate::error::DescribeNodeFromTemplateJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeNodeFromTemplateJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeNodeFromTemplateJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeNodeFromTemplateJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeNodeFromTemplateJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribePackageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePackageError> for Error {
    fn from(err: crate::error::DescribePackageError) -> Self {
        match err {
            crate::error::DescribePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribePackageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribePackageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribePackageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePackageImportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePackageImportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePackageImportJobError> for Error {
    fn from(err: crate::error::DescribePackageImportJobError) -> Self {
        match err {
            crate::error::DescribePackageImportJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribePackageImportJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribePackageImportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribePackageImportJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribePackageImportJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePackageVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePackageVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePackageVersionError> for Error {
    fn from(err: crate::error::DescribePackageVersionError) -> Self {
        match err {
            crate::error::DescribePackageVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribePackageVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribePackageVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribePackageVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribePackageVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribePackageVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListApplicationInstanceDependenciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListApplicationInstanceDependenciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListApplicationInstanceDependenciesError> for Error {
    fn from(err: crate::error::ListApplicationInstanceDependenciesError) -> Self {
        match err {
            crate::error::ListApplicationInstanceDependenciesError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::ListApplicationInstanceDependenciesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListApplicationInstanceDependenciesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListApplicationInstanceNodeInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListApplicationInstanceNodeInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListApplicationInstanceNodeInstancesError> for Error {
    fn from(err: crate::error::ListApplicationInstanceNodeInstancesError) -> Self {
        match err {
            crate::error::ListApplicationInstanceNodeInstancesError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::ListApplicationInstanceNodeInstancesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListApplicationInstanceNodeInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListApplicationInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListApplicationInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListApplicationInstancesError> for Error {
    fn from(err: crate::error::ListApplicationInstancesError) -> Self {
        match err {
            crate::error::ListApplicationInstancesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListApplicationInstancesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListApplicationInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDevicesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDevicesError> for Error {
    fn from(err: crate::error::ListDevicesError) -> Self {
        match err {
            crate::error::ListDevicesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDevicesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListDevicesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListDevicesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDevicesJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDevicesJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDevicesJobsError> for Error {
    fn from(err: crate::error::ListDevicesJobsError) -> Self {
        match err {
            crate::error::ListDevicesJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDevicesJobsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListDevicesJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListDevicesJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListDevicesJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDevicesJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListNodeFromTemplateJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListNodeFromTemplateJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListNodeFromTemplateJobsError> for Error {
    fn from(err: crate::error::ListNodeFromTemplateJobsError) -> Self {
        match err {
            crate::error::ListNodeFromTemplateJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListNodeFromTemplateJobsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListNodeFromTemplateJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListNodeFromTemplateJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListNodeFromTemplateJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListNodesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListNodesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListNodesError> for Error {
    fn from(err: crate::error::ListNodesError) -> Self {
        match err {
            crate::error::ListNodesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListNodesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListNodesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListNodesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPackageImportJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPackageImportJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPackageImportJobsError> for Error {
    fn from(err: crate::error::ListPackageImportJobsError) -> Self {
        match err {
            crate::error::ListPackageImportJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPackageImportJobsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListPackageImportJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListPackageImportJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPackageImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPackagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPackagesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPackagesError> for Error {
    fn from(err: crate::error::ListPackagesError) -> Self {
        match err {
            crate::error::ListPackagesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPackagesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListPackagesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListPackagesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListPackagesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPackagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ProvisionDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ProvisionDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ProvisionDeviceError> for Error {
    fn from(err: crate::error::ProvisionDeviceError) -> Self {
        match err {
            crate::error::ProvisionDeviceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ProvisionDeviceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ProvisionDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ProvisionDeviceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ProvisionDeviceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ProvisionDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterPackageVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterPackageVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterPackageVersionError> for Error {
    fn from(err: crate::error::RegisterPackageVersionError) -> Self {
        match err {
            crate::error::RegisterPackageVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RegisterPackageVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RegisterPackageVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RegisterPackageVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RegisterPackageVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveApplicationInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveApplicationInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveApplicationInstanceError> for Error {
    fn from(err: crate::error::RemoveApplicationInstanceError) -> Self {
        match err {
            crate::error::RemoveApplicationInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RemoveApplicationInstanceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RemoveApplicationInstanceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RemoveApplicationInstanceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RemoveApplicationInstanceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RemoveApplicationInstanceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::SignalApplicationInstanceNodeInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::SignalApplicationInstanceNodeInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SignalApplicationInstanceNodeInstancesError> for Error {
    fn from(err: crate::error::SignalApplicationInstanceNodeInstancesError) -> Self {
        match err {
            crate::error::SignalApplicationInstanceNodeInstancesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::SignalApplicationInstanceNodeInstancesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::SignalApplicationInstanceNodeInstancesError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::SignalApplicationInstanceNodeInstancesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::SignalApplicationInstanceNodeInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDeviceMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDeviceMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDeviceMetadataError> for Error {
    fn from(err: crate::error::UpdateDeviceMetadataError) -> Self {
        match err {
            crate::error::UpdateDeviceMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDeviceMetadataError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDeviceMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateDeviceMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDeviceMetadataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateDeviceMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
