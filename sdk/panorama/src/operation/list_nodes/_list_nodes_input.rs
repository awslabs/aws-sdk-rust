// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListNodesInput {
    /// <p>Search for nodes by category.</p>
    pub category: ::std::option::Option<crate::types::NodeCategory>,
    /// <p>Search for nodes by the account ID of the nodes' owner.</p>
    pub owner_account: ::std::option::Option<::std::string::String>,
    /// <p>Search for nodes by name.</p>
    pub package_name: ::std::option::Option<::std::string::String>,
    /// <p>Search for nodes by version.</p>
    pub package_version: ::std::option::Option<::std::string::String>,
    /// <p>Search for nodes by patch version.</p>
    pub patch_version: ::std::option::Option<::std::string::String>,
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of nodes to return in one page of results.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListNodesInput {
    /// <p>Search for nodes by category.</p>
    pub fn category(&self) -> ::std::option::Option<&crate::types::NodeCategory> {
        self.category.as_ref()
    }
    /// <p>Search for nodes by the account ID of the nodes' owner.</p>
    pub fn owner_account(&self) -> ::std::option::Option<&str> {
        self.owner_account.as_deref()
    }
    /// <p>Search for nodes by name.</p>
    pub fn package_name(&self) -> ::std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>Search for nodes by version.</p>
    pub fn package_version(&self) -> ::std::option::Option<&str> {
        self.package_version.as_deref()
    }
    /// <p>Search for nodes by patch version.</p>
    pub fn patch_version(&self) -> ::std::option::Option<&str> {
        self.patch_version.as_deref()
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of nodes to return in one page of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListNodesInput {
    /// Creates a new builder-style object to manufacture [`ListNodesInput`](crate::operation::list_nodes::ListNodesInput).
    pub fn builder() -> crate::operation::list_nodes::builders::ListNodesInputBuilder {
        crate::operation::list_nodes::builders::ListNodesInputBuilder::default()
    }
}

/// A builder for [`ListNodesInput`](crate::operation::list_nodes::ListNodesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListNodesInputBuilder {
    pub(crate) category: ::std::option::Option<crate::types::NodeCategory>,
    pub(crate) owner_account: ::std::option::Option<::std::string::String>,
    pub(crate) package_name: ::std::option::Option<::std::string::String>,
    pub(crate) package_version: ::std::option::Option<::std::string::String>,
    pub(crate) patch_version: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListNodesInputBuilder {
    /// <p>Search for nodes by category.</p>
    pub fn category(mut self, input: crate::types::NodeCategory) -> Self {
        self.category = ::std::option::Option::Some(input);
        self
    }
    /// <p>Search for nodes by category.</p>
    pub fn set_category(mut self, input: ::std::option::Option<crate::types::NodeCategory>) -> Self {
        self.category = input;
        self
    }
    /// <p>Search for nodes by category.</p>
    pub fn get_category(&self) -> &::std::option::Option<crate::types::NodeCategory> {
        &self.category
    }
    /// <p>Search for nodes by the account ID of the nodes' owner.</p>
    pub fn owner_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Search for nodes by the account ID of the nodes' owner.</p>
    pub fn set_owner_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_account = input;
        self
    }
    /// <p>Search for nodes by the account ID of the nodes' owner.</p>
    pub fn get_owner_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_account
    }
    /// <p>Search for nodes by name.</p>
    pub fn package_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Search for nodes by name.</p>
    pub fn set_package_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>Search for nodes by name.</p>
    pub fn get_package_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_name
    }
    /// <p>Search for nodes by version.</p>
    pub fn package_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Search for nodes by version.</p>
    pub fn set_package_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_version = input;
        self
    }
    /// <p>Search for nodes by version.</p>
    pub fn get_package_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_version
    }
    /// <p>Search for nodes by patch version.</p>
    pub fn patch_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.patch_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Search for nodes by patch version.</p>
    pub fn set_patch_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.patch_version = input;
        self
    }
    /// <p>Search for nodes by patch version.</p>
    pub fn get_patch_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.patch_version
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of nodes to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of nodes to return in one page of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of nodes to return in one page of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListNodesInput`](crate::operation::list_nodes::ListNodesInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_nodes::ListNodesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_nodes::ListNodesInput {
            category: self.category,
            owner_account: self.owner_account,
            package_name: self.package_name,
            package_version: self.package_version,
            patch_version: self.patch_version,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
