// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateJobForDevicesOutput {
    /// <p>A list of jobs.</p>
    pub jobs: ::std::vec::Vec<crate::types::Job>,
    _request_id: Option<String>,
}
impl CreateJobForDevicesOutput {
    /// <p>A list of jobs.</p>
    pub fn jobs(&self) -> &[crate::types::Job] {
        use std::ops::Deref;
        self.jobs.deref()
    }
}
impl ::aws_http::request_id::RequestId for CreateJobForDevicesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateJobForDevicesOutput {
    /// Creates a new builder-style object to manufacture [`CreateJobForDevicesOutput`](crate::operation::create_job_for_devices::CreateJobForDevicesOutput).
    pub fn builder() -> crate::operation::create_job_for_devices::builders::CreateJobForDevicesOutputBuilder {
        crate::operation::create_job_for_devices::builders::CreateJobForDevicesOutputBuilder::default()
    }
}

/// A builder for [`CreateJobForDevicesOutput`](crate::operation::create_job_for_devices::CreateJobForDevicesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateJobForDevicesOutputBuilder {
    pub(crate) jobs: ::std::option::Option<::std::vec::Vec<crate::types::Job>>,
    _request_id: Option<String>,
}
impl CreateJobForDevicesOutputBuilder {
    /// Appends an item to `jobs`.
    ///
    /// To override the contents of this collection use [`set_jobs`](Self::set_jobs).
    ///
    /// <p>A list of jobs.</p>
    pub fn jobs(mut self, input: crate::types::Job) -> Self {
        let mut v = self.jobs.unwrap_or_default();
        v.push(input);
        self.jobs = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of jobs.</p>
    pub fn set_jobs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Job>>) -> Self {
        self.jobs = input;
        self
    }
    /// <p>A list of jobs.</p>
    pub fn get_jobs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Job>> {
        &self.jobs
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateJobForDevicesOutput`](crate::operation::create_job_for_devices::CreateJobForDevicesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`jobs`](crate::operation::create_job_for_devices::builders::CreateJobForDevicesOutputBuilder::jobs)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_job_for_devices::CreateJobForDevicesOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_job_for_devices::CreateJobForDevicesOutput {
            jobs: self.jobs.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "jobs",
                    "jobs was not specified but it is required when building CreateJobForDevicesOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
