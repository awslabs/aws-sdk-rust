// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SignalApplicationInstanceNodeInstancesInput {
    /// <p>An application instance ID.</p>
    #[doc(hidden)]
    pub application_instance_id: std::option::Option<std::string::String>,
    /// <p>A list of signals.</p>
    #[doc(hidden)]
    pub node_signals: std::option::Option<std::vec::Vec<crate::types::NodeSignal>>,
}
impl SignalApplicationInstanceNodeInstancesInput {
    /// <p>An application instance ID.</p>
    pub fn application_instance_id(&self) -> std::option::Option<&str> {
        self.application_instance_id.as_deref()
    }
    /// <p>A list of signals.</p>
    pub fn node_signals(&self) -> std::option::Option<&[crate::types::NodeSignal]> {
        self.node_signals.as_deref()
    }
}
impl SignalApplicationInstanceNodeInstancesInput {
    /// Creates a new builder-style object to manufacture [`SignalApplicationInstanceNodeInstancesInput`](crate::operation::signal_application_instance_node_instances::SignalApplicationInstanceNodeInstancesInput).
    pub fn builder() -> crate::operation::signal_application_instance_node_instances::builders::SignalApplicationInstanceNodeInstancesInputBuilder{
        crate::operation::signal_application_instance_node_instances::builders::SignalApplicationInstanceNodeInstancesInputBuilder::default()
    }
}

/// A builder for [`SignalApplicationInstanceNodeInstancesInput`](crate::operation::signal_application_instance_node_instances::SignalApplicationInstanceNodeInstancesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SignalApplicationInstanceNodeInstancesInputBuilder {
    pub(crate) application_instance_id: std::option::Option<std::string::String>,
    pub(crate) node_signals: std::option::Option<std::vec::Vec<crate::types::NodeSignal>>,
}
impl SignalApplicationInstanceNodeInstancesInputBuilder {
    /// <p>An application instance ID.</p>
    pub fn application_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_instance_id = Some(input.into());
        self
    }
    /// <p>An application instance ID.</p>
    pub fn set_application_instance_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.application_instance_id = input;
        self
    }
    /// Appends an item to `node_signals`.
    ///
    /// To override the contents of this collection use [`set_node_signals`](Self::set_node_signals).
    ///
    /// <p>A list of signals.</p>
    pub fn node_signals(mut self, input: crate::types::NodeSignal) -> Self {
        let mut v = self.node_signals.unwrap_or_default();
        v.push(input);
        self.node_signals = Some(v);
        self
    }
    /// <p>A list of signals.</p>
    pub fn set_node_signals(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NodeSignal>>,
    ) -> Self {
        self.node_signals = input;
        self
    }
    /// Consumes the builder and constructs a [`SignalApplicationInstanceNodeInstancesInput`](crate::operation::signal_application_instance_node_instances::SignalApplicationInstanceNodeInstancesInput).
    pub fn build(self) -> Result<crate::operation::signal_application_instance_node_instances::SignalApplicationInstanceNodeInstancesInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::signal_application_instance_node_instances::SignalApplicationInstanceNodeInstancesInput {
                application_instance_id: self.application_instance_id
                ,
                node_signals: self.node_signals
                ,
            }
        )
    }
}
