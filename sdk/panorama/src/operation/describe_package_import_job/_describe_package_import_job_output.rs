// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribePackageImportJobOutput {
    /// <p>The job's ID.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The job's client token.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The job's type.</p>
    #[doc(hidden)]
    pub job_type: std::option::Option<crate::types::PackageImportJobType>,
    /// <p>The job's input config.</p>
    #[doc(hidden)]
    pub input_config: std::option::Option<crate::types::PackageImportJobInputConfig>,
    /// <p>The job's output config.</p>
    #[doc(hidden)]
    pub output_config: std::option::Option<crate::types::PackageImportJobOutputConfig>,
    /// <p>The job's output.</p>
    #[doc(hidden)]
    pub output: std::option::Option<crate::types::PackageImportJobOutput>,
    /// <p>When the job was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>When the job was updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The job's status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::PackageImportJobStatus>,
    /// <p>The job's status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The job's tags.</p>
    #[doc(hidden)]
    pub job_tags: std::option::Option<std::vec::Vec<crate::types::JobResourceTags>>,
    _request_id: Option<String>,
}
impl DescribePackageImportJobOutput {
    /// <p>The job's ID.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The job's client token.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The job's type.</p>
    pub fn job_type(&self) -> std::option::Option<&crate::types::PackageImportJobType> {
        self.job_type.as_ref()
    }
    /// <p>The job's input config.</p>
    pub fn input_config(&self) -> std::option::Option<&crate::types::PackageImportJobInputConfig> {
        self.input_config.as_ref()
    }
    /// <p>The job's output config.</p>
    pub fn output_config(
        &self,
    ) -> std::option::Option<&crate::types::PackageImportJobOutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>The job's output.</p>
    pub fn output(&self) -> std::option::Option<&crate::types::PackageImportJobOutput> {
        self.output.as_ref()
    }
    /// <p>When the job was created.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>When the job was updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::PackageImportJobStatus> {
        self.status.as_ref()
    }
    /// <p>The job's status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The job's tags.</p>
    pub fn job_tags(&self) -> std::option::Option<&[crate::types::JobResourceTags]> {
        self.job_tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribePackageImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribePackageImportJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribePackageImportJobOutput`](crate::operation::describe_package_import_job::DescribePackageImportJobOutput).
    pub fn builder() -> crate::operation::describe_package_import_job::builders::DescribePackageImportJobOutputBuilder{
        crate::operation::describe_package_import_job::builders::DescribePackageImportJobOutputBuilder::default()
    }
}

/// A builder for [`DescribePackageImportJobOutput`](crate::operation::describe_package_import_job::DescribePackageImportJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribePackageImportJobOutputBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) job_type: std::option::Option<crate::types::PackageImportJobType>,
    pub(crate) input_config: std::option::Option<crate::types::PackageImportJobInputConfig>,
    pub(crate) output_config: std::option::Option<crate::types::PackageImportJobOutputConfig>,
    pub(crate) output: std::option::Option<crate::types::PackageImportJobOutput>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::PackageImportJobStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) job_tags: std::option::Option<std::vec::Vec<crate::types::JobResourceTags>>,
    _request_id: Option<String>,
}
impl DescribePackageImportJobOutputBuilder {
    /// <p>The job's ID.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The job's client token.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>The job's client token.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The job's type.</p>
    pub fn job_type(mut self, input: crate::types::PackageImportJobType) -> Self {
        self.job_type = Some(input);
        self
    }
    /// <p>The job's type.</p>
    pub fn set_job_type(
        mut self,
        input: std::option::Option<crate::types::PackageImportJobType>,
    ) -> Self {
        self.job_type = input;
        self
    }
    /// <p>The job's input config.</p>
    pub fn input_config(mut self, input: crate::types::PackageImportJobInputConfig) -> Self {
        self.input_config = Some(input);
        self
    }
    /// <p>The job's input config.</p>
    pub fn set_input_config(
        mut self,
        input: std::option::Option<crate::types::PackageImportJobInputConfig>,
    ) -> Self {
        self.input_config = input;
        self
    }
    /// <p>The job's output config.</p>
    pub fn output_config(mut self, input: crate::types::PackageImportJobOutputConfig) -> Self {
        self.output_config = Some(input);
        self
    }
    /// <p>The job's output config.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::types::PackageImportJobOutputConfig>,
    ) -> Self {
        self.output_config = input;
        self
    }
    /// <p>The job's output.</p>
    pub fn output(mut self, input: crate::types::PackageImportJobOutput) -> Self {
        self.output = Some(input);
        self
    }
    /// <p>The job's output.</p>
    pub fn set_output(
        mut self,
        input: std::option::Option<crate::types::PackageImportJobOutput>,
    ) -> Self {
        self.output = input;
        self
    }
    /// <p>When the job was created.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>When the job was created.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>When the job was updated.</p>
    pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = Some(input);
        self
    }
    /// <p>When the job was updated.</p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The job's status.</p>
    pub fn status(mut self, input: crate::types::PackageImportJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The job's status.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::PackageImportJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The job's status message.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>The job's status message.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// Appends an item to `job_tags`.
    ///
    /// To override the contents of this collection use [`set_job_tags`](Self::set_job_tags).
    ///
    /// <p>The job's tags.</p>
    pub fn job_tags(mut self, input: crate::types::JobResourceTags) -> Self {
        let mut v = self.job_tags.unwrap_or_default();
        v.push(input);
        self.job_tags = Some(v);
        self
    }
    /// <p>The job's tags.</p>
    pub fn set_job_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::JobResourceTags>>,
    ) -> Self {
        self.job_tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribePackageImportJobOutput`](crate::operation::describe_package_import_job::DescribePackageImportJobOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_package_import_job::DescribePackageImportJobOutput {
        crate::operation::describe_package_import_job::DescribePackageImportJobOutput {
            job_id: self.job_id,
            client_token: self.client_token,
            job_type: self.job_type,
            input_config: self.input_config,
            output_config: self.output_config,
            output: self.output,
            created_time: self.created_time,
            last_updated_time: self.last_updated_time,
            status: self.status,
            status_message: self.status_message,
            job_tags: self.job_tags,
            _request_id: self._request_id,
        }
    }
}
