// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribePackageVersionInput {
    /// <p>The version's owner account.</p>
    #[doc(hidden)]
    pub owner_account: std::option::Option<std::string::String>,
    /// <p>The version's ID.</p>
    #[doc(hidden)]
    pub package_id: std::option::Option<std::string::String>,
    /// <p>The version's version.</p>
    #[doc(hidden)]
    pub package_version: std::option::Option<std::string::String>,
    /// <p>The version's patch version.</p>
    #[doc(hidden)]
    pub patch_version: std::option::Option<std::string::String>,
}
impl DescribePackageVersionInput {
    /// <p>The version's owner account.</p>
    pub fn owner_account(&self) -> std::option::Option<&str> {
        self.owner_account.as_deref()
    }
    /// <p>The version's ID.</p>
    pub fn package_id(&self) -> std::option::Option<&str> {
        self.package_id.as_deref()
    }
    /// <p>The version's version.</p>
    pub fn package_version(&self) -> std::option::Option<&str> {
        self.package_version.as_deref()
    }
    /// <p>The version's patch version.</p>
    pub fn patch_version(&self) -> std::option::Option<&str> {
        self.patch_version.as_deref()
    }
}
impl DescribePackageVersionInput {
    /// Creates a new builder-style object to manufacture [`DescribePackageVersionInput`](crate::operation::describe_package_version::DescribePackageVersionInput).
    pub fn builder(
    ) -> crate::operation::describe_package_version::builders::DescribePackageVersionInputBuilder
    {
        crate::operation::describe_package_version::builders::DescribePackageVersionInputBuilder::default()
    }
}

/// A builder for [`DescribePackageVersionInput`](crate::operation::describe_package_version::DescribePackageVersionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribePackageVersionInputBuilder {
    pub(crate) owner_account: std::option::Option<std::string::String>,
    pub(crate) package_id: std::option::Option<std::string::String>,
    pub(crate) package_version: std::option::Option<std::string::String>,
    pub(crate) patch_version: std::option::Option<std::string::String>,
}
impl DescribePackageVersionInputBuilder {
    /// <p>The version's owner account.</p>
    pub fn owner_account(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_account = Some(input.into());
        self
    }
    /// <p>The version's owner account.</p>
    pub fn set_owner_account(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_account = input;
        self
    }
    /// <p>The version's ID.</p>
    pub fn package_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.package_id = Some(input.into());
        self
    }
    /// <p>The version's ID.</p>
    pub fn set_package_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package_id = input;
        self
    }
    /// <p>The version's version.</p>
    pub fn package_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.package_version = Some(input.into());
        self
    }
    /// <p>The version's version.</p>
    pub fn set_package_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package_version = input;
        self
    }
    /// <p>The version's patch version.</p>
    pub fn patch_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.patch_version = Some(input.into());
        self
    }
    /// <p>The version's patch version.</p>
    pub fn set_patch_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.patch_version = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribePackageVersionInput`](crate::operation::describe_package_version::DescribePackageVersionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_package_version::DescribePackageVersionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_package_version::DescribePackageVersionInput {
                owner_account: self.owner_account,
                package_id: self.package_id,
                package_version: self.package_version,
                patch_version: self.patch_version,
            },
        )
    }
}
