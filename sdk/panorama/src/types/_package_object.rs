// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A package object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PackageObject {
    /// <p>The object's name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The object's package version.</p>
    #[doc(hidden)]
    pub package_version: std::option::Option<std::string::String>,
    /// <p>The object's patch version.</p>
    #[doc(hidden)]
    pub patch_version: std::option::Option<std::string::String>,
}
impl PackageObject {
    /// <p>The object's name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The object's package version.</p>
    pub fn package_version(&self) -> std::option::Option<&str> {
        self.package_version.as_deref()
    }
    /// <p>The object's patch version.</p>
    pub fn patch_version(&self) -> std::option::Option<&str> {
        self.patch_version.as_deref()
    }
}
impl PackageObject {
    /// Creates a new builder-style object to manufacture [`PackageObject`](crate::types::PackageObject).
    pub fn builder() -> crate::types::builders::PackageObjectBuilder {
        crate::types::builders::PackageObjectBuilder::default()
    }
}

/// A builder for [`PackageObject`](crate::types::PackageObject).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PackageObjectBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) package_version: std::option::Option<std::string::String>,
    pub(crate) patch_version: std::option::Option<std::string::String>,
}
impl PackageObjectBuilder {
    /// <p>The object's name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The object's name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The object's package version.</p>
    pub fn package_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.package_version = Some(input.into());
        self
    }
    /// <p>The object's package version.</p>
    pub fn set_package_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package_version = input;
        self
    }
    /// <p>The object's patch version.</p>
    pub fn patch_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.patch_version = Some(input.into());
        self
    }
    /// <p>The object's patch version.</p>
    pub fn set_patch_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.patch_version = input;
        self
    }
    /// Consumes the builder and constructs a [`PackageObject`](crate::types::PackageObject).
    pub fn build(self) -> crate::types::PackageObject {
        crate::types::PackageObject {
            name: self.name,
            package_version: self.package_version,
            patch_version: self.patch_version,
        }
    }
}
