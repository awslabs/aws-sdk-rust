// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A node instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NodeInstance {
    /// <p>The instance's ID.</p>
    #[doc(hidden)]
    pub node_instance_id: std::option::Option<std::string::String>,
    /// <p>The node's ID.</p>
    #[doc(hidden)]
    pub node_id: std::option::Option<std::string::String>,
    /// <p>The instance's package name.</p>
    #[doc(hidden)]
    pub package_name: std::option::Option<std::string::String>,
    /// <p>The instance's package version.</p>
    #[doc(hidden)]
    pub package_version: std::option::Option<std::string::String>,
    /// <p>The instance's package patch version.</p>
    #[doc(hidden)]
    pub package_patch_version: std::option::Option<std::string::String>,
    /// <p>The instance's name.</p>
    #[doc(hidden)]
    pub node_name: std::option::Option<std::string::String>,
    /// <p>The instance's current status.</p>
    #[doc(hidden)]
    pub current_status: std::option::Option<crate::types::NodeInstanceStatus>,
}
impl NodeInstance {
    /// <p>The instance's ID.</p>
    pub fn node_instance_id(&self) -> std::option::Option<&str> {
        self.node_instance_id.as_deref()
    }
    /// <p>The node's ID.</p>
    pub fn node_id(&self) -> std::option::Option<&str> {
        self.node_id.as_deref()
    }
    /// <p>The instance's package name.</p>
    pub fn package_name(&self) -> std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>The instance's package version.</p>
    pub fn package_version(&self) -> std::option::Option<&str> {
        self.package_version.as_deref()
    }
    /// <p>The instance's package patch version.</p>
    pub fn package_patch_version(&self) -> std::option::Option<&str> {
        self.package_patch_version.as_deref()
    }
    /// <p>The instance's name.</p>
    pub fn node_name(&self) -> std::option::Option<&str> {
        self.node_name.as_deref()
    }
    /// <p>The instance's current status.</p>
    pub fn current_status(&self) -> std::option::Option<&crate::types::NodeInstanceStatus> {
        self.current_status.as_ref()
    }
}
impl NodeInstance {
    /// Creates a new builder-style object to manufacture [`NodeInstance`](crate::types::NodeInstance).
    pub fn builder() -> crate::types::builders::NodeInstanceBuilder {
        crate::types::builders::NodeInstanceBuilder::default()
    }
}

/// A builder for [`NodeInstance`](crate::types::NodeInstance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NodeInstanceBuilder {
    pub(crate) node_instance_id: std::option::Option<std::string::String>,
    pub(crate) node_id: std::option::Option<std::string::String>,
    pub(crate) package_name: std::option::Option<std::string::String>,
    pub(crate) package_version: std::option::Option<std::string::String>,
    pub(crate) package_patch_version: std::option::Option<std::string::String>,
    pub(crate) node_name: std::option::Option<std::string::String>,
    pub(crate) current_status: std::option::Option<crate::types::NodeInstanceStatus>,
}
impl NodeInstanceBuilder {
    /// <p>The instance's ID.</p>
    pub fn node_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.node_instance_id = Some(input.into());
        self
    }
    /// <p>The instance's ID.</p>
    pub fn set_node_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.node_instance_id = input;
        self
    }
    /// <p>The node's ID.</p>
    pub fn node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.node_id = Some(input.into());
        self
    }
    /// <p>The node's ID.</p>
    pub fn set_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// <p>The instance's package name.</p>
    pub fn package_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.package_name = Some(input.into());
        self
    }
    /// <p>The instance's package name.</p>
    pub fn set_package_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>The instance's package version.</p>
    pub fn package_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.package_version = Some(input.into());
        self
    }
    /// <p>The instance's package version.</p>
    pub fn set_package_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package_version = input;
        self
    }
    /// <p>The instance's package patch version.</p>
    pub fn package_patch_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.package_patch_version = Some(input.into());
        self
    }
    /// <p>The instance's package patch version.</p>
    pub fn set_package_patch_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.package_patch_version = input;
        self
    }
    /// <p>The instance's name.</p>
    pub fn node_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.node_name = Some(input.into());
        self
    }
    /// <p>The instance's name.</p>
    pub fn set_node_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.node_name = input;
        self
    }
    /// <p>The instance's current status.</p>
    pub fn current_status(mut self, input: crate::types::NodeInstanceStatus) -> Self {
        self.current_status = Some(input);
        self
    }
    /// <p>The instance's current status.</p>
    pub fn set_current_status(
        mut self,
        input: std::option::Option<crate::types::NodeInstanceStatus>,
    ) -> Self {
        self.current_status = input;
        self
    }
    /// Consumes the builder and constructs a [`NodeInstance`](crate::types::NodeInstance).
    pub fn build(self) -> crate::types::NodeInstance {
        crate::types::NodeInstance {
            node_instance_id: self.node_instance_id,
            node_id: self.node_id,
            package_name: self.package_name,
            package_version: self.package_version,
            package_patch_version: self.package_patch_version,
            node_name: self.node_name,
            current_status: self.current_status,
        }
    }
}
