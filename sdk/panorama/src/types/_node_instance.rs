// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A node instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeInstance {
    /// <p>The instance's ID.</p>
    pub node_instance_id: ::std::string::String,
    /// <p>The node's ID.</p>
    pub node_id: ::std::option::Option<::std::string::String>,
    /// <p>The instance's package name.</p>
    pub package_name: ::std::option::Option<::std::string::String>,
    /// <p>The instance's package version.</p>
    pub package_version: ::std::option::Option<::std::string::String>,
    /// <p>The instance's package patch version.</p>
    pub package_patch_version: ::std::option::Option<::std::string::String>,
    /// <p>The instance's name.</p>
    pub node_name: ::std::option::Option<::std::string::String>,
    /// <p>The instance's current status.</p>
    pub current_status: crate::types::NodeInstanceStatus,
}
impl NodeInstance {
    /// <p>The instance's ID.</p>
    pub fn node_instance_id(&self) -> &str {
        use std::ops::Deref;
        self.node_instance_id.deref()
    }
    /// <p>The node's ID.</p>
    pub fn node_id(&self) -> ::std::option::Option<&str> {
        self.node_id.as_deref()
    }
    /// <p>The instance's package name.</p>
    pub fn package_name(&self) -> ::std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>The instance's package version.</p>
    pub fn package_version(&self) -> ::std::option::Option<&str> {
        self.package_version.as_deref()
    }
    /// <p>The instance's package patch version.</p>
    pub fn package_patch_version(&self) -> ::std::option::Option<&str> {
        self.package_patch_version.as_deref()
    }
    /// <p>The instance's name.</p>
    pub fn node_name(&self) -> ::std::option::Option<&str> {
        self.node_name.as_deref()
    }
    /// <p>The instance's current status.</p>
    pub fn current_status(&self) -> &crate::types::NodeInstanceStatus {
        &self.current_status
    }
}
impl NodeInstance {
    /// Creates a new builder-style object to manufacture [`NodeInstance`](crate::types::NodeInstance).
    pub fn builder() -> crate::types::builders::NodeInstanceBuilder {
        crate::types::builders::NodeInstanceBuilder::default()
    }
}

/// A builder for [`NodeInstance`](crate::types::NodeInstance).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NodeInstanceBuilder {
    pub(crate) node_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) node_id: ::std::option::Option<::std::string::String>,
    pub(crate) package_name: ::std::option::Option<::std::string::String>,
    pub(crate) package_version: ::std::option::Option<::std::string::String>,
    pub(crate) package_patch_version: ::std::option::Option<::std::string::String>,
    pub(crate) node_name: ::std::option::Option<::std::string::String>,
    pub(crate) current_status: ::std::option::Option<crate::types::NodeInstanceStatus>,
}
impl NodeInstanceBuilder {
    /// <p>The instance's ID.</p>
    /// This field is required.
    pub fn node_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance's ID.</p>
    pub fn set_node_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_instance_id = input;
        self
    }
    /// <p>The instance's ID.</p>
    pub fn get_node_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_instance_id
    }
    /// <p>The node's ID.</p>
    pub fn node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The node's ID.</p>
    pub fn set_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// <p>The node's ID.</p>
    pub fn get_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_id
    }
    /// <p>The instance's package name.</p>
    pub fn package_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance's package name.</p>
    pub fn set_package_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>The instance's package name.</p>
    pub fn get_package_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_name
    }
    /// <p>The instance's package version.</p>
    pub fn package_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance's package version.</p>
    pub fn set_package_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_version = input;
        self
    }
    /// <p>The instance's package version.</p>
    pub fn get_package_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_version
    }
    /// <p>The instance's package patch version.</p>
    pub fn package_patch_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_patch_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance's package patch version.</p>
    pub fn set_package_patch_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_patch_version = input;
        self
    }
    /// <p>The instance's package patch version.</p>
    pub fn get_package_patch_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_patch_version
    }
    /// <p>The instance's name.</p>
    pub fn node_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance's name.</p>
    pub fn set_node_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_name = input;
        self
    }
    /// <p>The instance's name.</p>
    pub fn get_node_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_name
    }
    /// <p>The instance's current status.</p>
    /// This field is required.
    pub fn current_status(mut self, input: crate::types::NodeInstanceStatus) -> Self {
        self.current_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The instance's current status.</p>
    pub fn set_current_status(mut self, input: ::std::option::Option<crate::types::NodeInstanceStatus>) -> Self {
        self.current_status = input;
        self
    }
    /// <p>The instance's current status.</p>
    pub fn get_current_status(&self) -> &::std::option::Option<crate::types::NodeInstanceStatus> {
        &self.current_status
    }
    /// Consumes the builder and constructs a [`NodeInstance`](crate::types::NodeInstance).
    /// This method will fail if any of the following fields are not set:
    /// - [`node_instance_id`](crate::types::builders::NodeInstanceBuilder::node_instance_id)
    /// - [`current_status`](crate::types::builders::NodeInstanceBuilder::current_status)
    pub fn build(self) -> ::std::result::Result<crate::types::NodeInstance, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NodeInstance {
            node_instance_id: self.node_instance_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "node_instance_id",
                    "node_instance_id was not specified but it is required when building NodeInstance",
                )
            })?,
            node_id: self.node_id,
            package_name: self.package_name,
            package_version: self.package_version,
            package_patch_version: self.package_patch_version,
            node_name: self.node_name,
            current_status: self.current_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "current_status",
                    "current_status was not specified but it is required when building NodeInstance",
                )
            })?,
        })
    }
}
