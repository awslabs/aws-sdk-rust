// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an NTP server connection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NtpStatus {
    /// <p>The connection's status.</p>
    #[doc(hidden)]
    pub connection_status: std::option::Option<crate::types::NetworkConnectionStatus>,
    /// <p>The IP address of the server.</p>
    #[doc(hidden)]
    pub ip_address: std::option::Option<std::string::String>,
    /// <p>The domain name of the server.</p>
    #[doc(hidden)]
    pub ntp_server_name: std::option::Option<std::string::String>,
}
impl NtpStatus {
    /// <p>The connection's status.</p>
    pub fn connection_status(&self) -> std::option::Option<&crate::types::NetworkConnectionStatus> {
        self.connection_status.as_ref()
    }
    /// <p>The IP address of the server.</p>
    pub fn ip_address(&self) -> std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>The domain name of the server.</p>
    pub fn ntp_server_name(&self) -> std::option::Option<&str> {
        self.ntp_server_name.as_deref()
    }
}
impl NtpStatus {
    /// Creates a new builder-style object to manufacture [`NtpStatus`](crate::types::NtpStatus).
    pub fn builder() -> crate::types::builders::NtpStatusBuilder {
        crate::types::builders::NtpStatusBuilder::default()
    }
}

/// A builder for [`NtpStatus`](crate::types::NtpStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NtpStatusBuilder {
    pub(crate) connection_status: std::option::Option<crate::types::NetworkConnectionStatus>,
    pub(crate) ip_address: std::option::Option<std::string::String>,
    pub(crate) ntp_server_name: std::option::Option<std::string::String>,
}
impl NtpStatusBuilder {
    /// <p>The connection's status.</p>
    pub fn connection_status(mut self, input: crate::types::NetworkConnectionStatus) -> Self {
        self.connection_status = Some(input);
        self
    }
    /// <p>The connection's status.</p>
    pub fn set_connection_status(
        mut self,
        input: std::option::Option<crate::types::NetworkConnectionStatus>,
    ) -> Self {
        self.connection_status = input;
        self
    }
    /// <p>The IP address of the server.</p>
    pub fn ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip_address = Some(input.into());
        self
    }
    /// <p>The IP address of the server.</p>
    pub fn set_ip_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The domain name of the server.</p>
    pub fn ntp_server_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.ntp_server_name = Some(input.into());
        self
    }
    /// <p>The domain name of the server.</p>
    pub fn set_ntp_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ntp_server_name = input;
        self
    }
    /// Consumes the builder and constructs a [`NtpStatus`](crate::types::NtpStatus).
    pub fn build(self) -> crate::types::NtpStatus {
        crate::types::NtpStatus {
            connection_status: self.connection_status,
            ip_address: self.ip_address,
            ntp_server_name: self.ntp_server_name,
        }
    }
}
