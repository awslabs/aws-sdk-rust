// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Tags for a job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobResourceTags {
    /// <p>The job's type.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::JobResourceType>,
    /// <p>The job's tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl JobResourceTags {
    /// <p>The job's type.</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::JobResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The job's tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl JobResourceTags {
    /// Creates a new builder-style object to manufacture [`JobResourceTags`](crate::types::JobResourceTags).
    pub fn builder() -> crate::types::builders::JobResourceTagsBuilder {
        crate::types::builders::JobResourceTagsBuilder::default()
    }
}

/// A builder for [`JobResourceTags`](crate::types::JobResourceTags).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobResourceTagsBuilder {
    pub(crate) resource_type: std::option::Option<crate::types::JobResourceType>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl JobResourceTagsBuilder {
    /// <p>The job's type.</p>
    pub fn resource_type(mut self, input: crate::types::JobResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>The job's type.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::JobResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The job's tags.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The job's tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`JobResourceTags`](crate::types::JobResourceTags).
    pub fn build(self) -> crate::types::JobResourceTags {
        crate::types::JobResourceTags {
            resource_type: self.resource_type,
            tags: self.tags,
        }
    }
}
