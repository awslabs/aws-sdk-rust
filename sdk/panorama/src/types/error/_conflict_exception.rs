// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The target resource is in use.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConflictException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The resource's ID.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The resource's type.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>A unique ID for the error.</p>
    #[doc(hidden)]
    pub error_id: std::option::Option<std::string::String>,
    /// <p>A list of attributes that led to the exception and their values.</p>
    #[doc(hidden)]
    pub error_arguments:
        std::option::Option<std::vec::Vec<crate::types::ConflictExceptionErrorArgument>>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl ConflictException {
    /// <p>The resource's ID.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The resource's type.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>A unique ID for the error.</p>
    pub fn error_id(&self) -> std::option::Option<&str> {
        self.error_id.as_deref()
    }
    /// <p>A list of attributes that led to the exception and their values.</p>
    pub fn error_arguments(
        &self,
    ) -> std::option::Option<&[crate::types::ConflictExceptionErrorArgument]> {
        self.error_arguments.as_deref()
    }
}
impl ConflictException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ConflictException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ConflictException")?;
        if let Some(inner_1) = &self.message {
            {
                write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for ConflictException {}
impl aws_http::request_id::RequestId for crate::types::error::ConflictException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for ConflictException {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl ConflictException {
    /// Creates a new builder-style object to manufacture [`ConflictException`](crate::types::error::ConflictException).
    pub fn builder() -> crate::types::error::builders::ConflictExceptionBuilder {
        crate::types::error::builders::ConflictExceptionBuilder::default()
    }
}

/// A builder for [`ConflictException`](crate::types::error::ConflictException).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConflictExceptionBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<std::string::String>,
    pub(crate) error_id: std::option::Option<std::string::String>,
    pub(crate) error_arguments:
        std::option::Option<std::vec::Vec<crate::types::ConflictExceptionErrorArgument>>,
    meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
}
impl ConflictExceptionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The resource's ID.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The resource's ID.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The resource's type.</p>
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// <p>The resource's type.</p>
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>A unique ID for the error.</p>
    pub fn error_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_id = Some(input.into());
        self
    }
    /// <p>A unique ID for the error.</p>
    pub fn set_error_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_id = input;
        self
    }
    /// Appends an item to `error_arguments`.
    ///
    /// To override the contents of this collection use [`set_error_arguments`](Self::set_error_arguments).
    ///
    /// <p>A list of attributes that led to the exception and their values.</p>
    pub fn error_arguments(mut self, input: crate::types::ConflictExceptionErrorArgument) -> Self {
        let mut v = self.error_arguments.unwrap_or_default();
        v.push(input);
        self.error_arguments = Some(v);
        self
    }
    /// <p>A list of attributes that led to the exception and their values.</p>
    pub fn set_error_arguments(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConflictExceptionErrorArgument>>,
    ) -> Self {
        self.error_arguments = input;
        self
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(
        &mut self,
        meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`ConflictException`](crate::types::error::ConflictException).
    pub fn build(self) -> crate::types::error::ConflictException {
        crate::types::error::ConflictException {
            message: self.message,
            resource_id: self.resource_id,
            resource_type: self.resource_type,
            error_id: self.error_id,
            error_arguments: self.error_arguments,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
