// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A package summary.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PackageListItem {
    /// <p>The package's ID.</p>
    #[doc(hidden)]
    pub package_id: std::option::Option<std::string::String>,
    /// <p>The package's name.</p>
    #[doc(hidden)]
    pub package_name: std::option::Option<std::string::String>,
    /// <p>The package's ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>When the package was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The package's tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl PackageListItem {
    /// <p>The package's ID.</p>
    pub fn package_id(&self) -> std::option::Option<&str> {
        self.package_id.as_deref()
    }
    /// <p>The package's name.</p>
    pub fn package_name(&self) -> std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>The package's ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>When the package was created.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The package's tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl PackageListItem {
    /// Creates a new builder-style object to manufacture [`PackageListItem`](crate::types::PackageListItem).
    pub fn builder() -> crate::types::builders::PackageListItemBuilder {
        crate::types::builders::PackageListItemBuilder::default()
    }
}

/// A builder for [`PackageListItem`](crate::types::PackageListItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PackageListItemBuilder {
    pub(crate) package_id: std::option::Option<std::string::String>,
    pub(crate) package_name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl PackageListItemBuilder {
    /// <p>The package's ID.</p>
    pub fn package_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.package_id = Some(input.into());
        self
    }
    /// <p>The package's ID.</p>
    pub fn set_package_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package_id = input;
        self
    }
    /// <p>The package's name.</p>
    pub fn package_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.package_name = Some(input.into());
        self
    }
    /// <p>The package's name.</p>
    pub fn set_package_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>The package's ARN.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The package's ARN.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>When the package was created.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>When the package was created.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The package's tags.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The package's tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`PackageListItem`](crate::types::PackageListItem).
    pub fn build(self) -> crate::types::PackageListItem {
        crate::types::PackageListItem {
            package_id: self.package_id,
            package_name: self.package_name,
            arn: self.arn,
            created_time: self.created_time,
            tags: self.tags,
        }
    }
}
