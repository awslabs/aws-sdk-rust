// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An over-the-air update (OTA) job configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OtaJobConfig {
    /// <p>The target version of the device software.</p>
    pub image_version: ::std::string::String,
    /// <p>Whether to apply the update if it is a major version change.</p>
    pub allow_major_version_update: bool,
}
impl OtaJobConfig {
    /// <p>The target version of the device software.</p>
    pub fn image_version(&self) -> &str {
        use std::ops::Deref;
        self.image_version.deref()
    }
    /// <p>Whether to apply the update if it is a major version change.</p>
    pub fn allow_major_version_update(&self) -> bool {
        self.allow_major_version_update
    }
}
impl OtaJobConfig {
    /// Creates a new builder-style object to manufacture [`OtaJobConfig`](crate::types::OtaJobConfig).
    pub fn builder() -> crate::types::builders::OtaJobConfigBuilder {
        crate::types::builders::OtaJobConfigBuilder::default()
    }
}

/// A builder for [`OtaJobConfig`](crate::types::OtaJobConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OtaJobConfigBuilder {
    pub(crate) image_version: ::std::option::Option<::std::string::String>,
    pub(crate) allow_major_version_update: ::std::option::Option<bool>,
}
impl OtaJobConfigBuilder {
    /// <p>The target version of the device software.</p>
    /// This field is required.
    pub fn image_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The target version of the device software.</p>
    pub fn set_image_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_version = input;
        self
    }
    /// <p>The target version of the device software.</p>
    pub fn get_image_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_version
    }
    /// <p>Whether to apply the update if it is a major version change.</p>
    pub fn allow_major_version_update(mut self, input: bool) -> Self {
        self.allow_major_version_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to apply the update if it is a major version change.</p>
    pub fn set_allow_major_version_update(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_major_version_update = input;
        self
    }
    /// <p>Whether to apply the update if it is a major version change.</p>
    pub fn get_allow_major_version_update(&self) -> &::std::option::Option<bool> {
        &self.allow_major_version_update
    }
    /// Consumes the builder and constructs a [`OtaJobConfig`](crate::types::OtaJobConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`image_version`](crate::types::builders::OtaJobConfigBuilder::image_version)
    pub fn build(self) -> ::std::result::Result<crate::types::OtaJobConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OtaJobConfig {
            image_version: self.image_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "image_version",
                    "image_version was not specified but it is required when building OtaJobConfig",
                )
            })?,
            allow_major_version_update: self.allow_major_version_update.unwrap_or_default(),
        })
    }
}
