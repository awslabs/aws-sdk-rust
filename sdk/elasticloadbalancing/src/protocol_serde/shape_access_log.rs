// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_access_log(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::AccessLog,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Enabled");
    {
        scope_1.boolean(input.enabled);
    }
    #[allow(unused_mut)]
    let mut scope_2 = writer.prefix("S3BucketName");
    if let Some(var_3) = &input.s3_bucket_name {
        scope_2.string(var_3);
    }
    #[allow(unused_mut)]
    let mut scope_4 = writer.prefix("EmitInterval");
    if let Some(var_5) = &input.emit_interval {
        scope_4.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("S3BucketPrefix");
    if let Some(var_7) = &input.s3_bucket_prefix {
        scope_6.string(var_7);
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_access_log(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::AccessLog, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::AccessLog::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Enabled") /* Enabled com.amazonaws.elasticloadbalancing#AccessLog$Enabled */ =>  {
                let var_8 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticloadbalancing#AccessLogEnabled`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_8);
            }
            ,
            s if s.matches("S3BucketName") /* S3BucketName com.amazonaws.elasticloadbalancing#AccessLog$S3BucketName */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_s3_bucket_name(var_9);
            }
            ,
            s if s.matches("EmitInterval") /* EmitInterval com.amazonaws.elasticloadbalancing#AccessLog$EmitInterval */ =>  {
                let var_10 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticloadbalancing#AccessLogInterval`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_emit_interval(var_10);
            }
            ,
            s if s.matches("S3BucketPrefix") /* S3BucketPrefix com.amazonaws.elasticloadbalancing#AccessLog$S3BucketPrefix */ =>  {
                let var_11 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_s3_bucket_prefix(var_11);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::access_log_correct_errors(builder).build())
}
