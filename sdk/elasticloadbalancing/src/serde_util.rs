// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn health_check_correct_errors(mut builder: crate::types::builders::HealthCheckBuilder) -> crate::types::builders::HealthCheckBuilder {
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    if builder.interval.is_none() {
        builder.interval = Some(Default::default())
    }
    if builder.timeout.is_none() {
        builder.timeout = Some(Default::default())
    }
    if builder.unhealthy_threshold.is_none() {
        builder.unhealthy_threshold = Some(Default::default())
    }
    if builder.healthy_threshold.is_none() {
        builder.healthy_threshold = Some(Default::default())
    }
    builder
}

pub(crate) fn access_log_correct_errors(mut builder: crate::types::builders::AccessLogBuilder) -> crate::types::builders::AccessLogBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn connection_draining_correct_errors(
    mut builder: crate::types::builders::ConnectionDrainingBuilder,
) -> crate::types::builders::ConnectionDrainingBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn connection_settings_correct_errors(
    mut builder: crate::types::builders::ConnectionSettingsBuilder,
) -> crate::types::builders::ConnectionSettingsBuilder {
    if builder.idle_timeout.is_none() {
        builder.idle_timeout = Some(Default::default())
    }
    builder
}

pub(crate) fn cross_zone_load_balancing_correct_errors(
    mut builder: crate::types::builders::CrossZoneLoadBalancingBuilder,
) -> crate::types::builders::CrossZoneLoadBalancingBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn listener_correct_errors(mut builder: crate::types::builders::ListenerBuilder) -> crate::types::builders::ListenerBuilder {
    if builder.protocol.is_none() {
        builder.protocol = Some(Default::default())
    }
    if builder.load_balancer_port.is_none() {
        builder.load_balancer_port = Some(Default::default())
    }
    if builder.instance_port.is_none() {
        builder.instance_port = Some(Default::default())
    }
    builder
}
