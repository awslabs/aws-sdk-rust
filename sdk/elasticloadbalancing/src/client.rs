// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Elastic Load Balancing
///
/// Client for invoking operations on Elastic Load Balancing. Each operation on Elastic Load Balancing is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_elasticloadbalancing::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_elasticloadbalancing::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_elasticloadbalancing::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AddTags`](crate::client::fluent_builders::AddTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_names(Vec<String>)`](crate::client::fluent_builders::AddTags::load_balancer_names) / [`set_load_balancer_names(Option<Vec<String>>)`](crate::client::fluent_builders::AddTags::set_load_balancer_names): <p>The name of the load balancer. You can specify one load balancer only.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::AddTags::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::AddTags::set_tags): <p>The tags.</p>
    /// - On success, responds with [`AddTagsOutput`](crate::output::AddTagsOutput)

    /// - On failure, responds with [`SdkError<AddTagsError>`](crate::error::AddTagsError)
    pub fn add_tags(&self) -> crate::client::fluent_builders::AddTags {
        crate::client::fluent_builders::AddTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ApplySecurityGroupsToLoadBalancer`](crate::client::fluent_builders::ApplySecurityGroupsToLoadBalancer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::ApplySecurityGroupsToLoadBalancer::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::ApplySecurityGroupsToLoadBalancer::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`security_groups(Vec<String>)`](crate::client::fluent_builders::ApplySecurityGroupsToLoadBalancer::security_groups) / [`set_security_groups(Option<Vec<String>>)`](crate::client::fluent_builders::ApplySecurityGroupsToLoadBalancer::set_security_groups): <p>The IDs of the security groups to associate with the load balancer. Note that you cannot specify the name of the security group.</p>
    /// - On success, responds with [`ApplySecurityGroupsToLoadBalancerOutput`](crate::output::ApplySecurityGroupsToLoadBalancerOutput) with field(s):
    ///   - [`security_groups(Option<Vec<String>>)`](crate::output::ApplySecurityGroupsToLoadBalancerOutput::security_groups): <p>The IDs of the security groups associated with the load balancer.</p>
    /// - On failure, responds with [`SdkError<ApplySecurityGroupsToLoadBalancerError>`](crate::error::ApplySecurityGroupsToLoadBalancerError)
    pub fn apply_security_groups_to_load_balancer(
        &self,
    ) -> crate::client::fluent_builders::ApplySecurityGroupsToLoadBalancer {
        crate::client::fluent_builders::ApplySecurityGroupsToLoadBalancer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AttachLoadBalancerToSubnets`](crate::client::fluent_builders::AttachLoadBalancerToSubnets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::AttachLoadBalancerToSubnets::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::AttachLoadBalancerToSubnets::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`subnets(Vec<String>)`](crate::client::fluent_builders::AttachLoadBalancerToSubnets::subnets) / [`set_subnets(Option<Vec<String>>)`](crate::client::fluent_builders::AttachLoadBalancerToSubnets::set_subnets): <p>The IDs of the subnets to add. You can add only one subnet per Availability Zone.</p>
    /// - On success, responds with [`AttachLoadBalancerToSubnetsOutput`](crate::output::AttachLoadBalancerToSubnetsOutput) with field(s):
    ///   - [`subnets(Option<Vec<String>>)`](crate::output::AttachLoadBalancerToSubnetsOutput::subnets): <p>The IDs of the subnets attached to the load balancer.</p>
    /// - On failure, responds with [`SdkError<AttachLoadBalancerToSubnetsError>`](crate::error::AttachLoadBalancerToSubnetsError)
    pub fn attach_load_balancer_to_subnets(
        &self,
    ) -> crate::client::fluent_builders::AttachLoadBalancerToSubnets {
        crate::client::fluent_builders::AttachLoadBalancerToSubnets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ConfigureHealthCheck`](crate::client::fluent_builders::ConfigureHealthCheck) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::ConfigureHealthCheck::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::ConfigureHealthCheck::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`health_check(HealthCheck)`](crate::client::fluent_builders::ConfigureHealthCheck::health_check) / [`set_health_check(Option<HealthCheck>)`](crate::client::fluent_builders::ConfigureHealthCheck::set_health_check): <p>The configuration information.</p>
    /// - On success, responds with [`ConfigureHealthCheckOutput`](crate::output::ConfigureHealthCheckOutput) with field(s):
    ///   - [`health_check(Option<HealthCheck>)`](crate::output::ConfigureHealthCheckOutput::health_check): <p>The updated health check.</p>
    /// - On failure, responds with [`SdkError<ConfigureHealthCheckError>`](crate::error::ConfigureHealthCheckError)
    pub fn configure_health_check(&self) -> crate::client::fluent_builders::ConfigureHealthCheck {
        crate::client::fluent_builders::ConfigureHealthCheck::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateAppCookieStickinessPolicy`](crate::client::fluent_builders::CreateAppCookieStickinessPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::CreateAppCookieStickinessPolicy::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::CreateAppCookieStickinessPolicy::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`policy_name(impl Into<String>)`](crate::client::fluent_builders::CreateAppCookieStickinessPolicy::policy_name) / [`set_policy_name(Option<String>)`](crate::client::fluent_builders::CreateAppCookieStickinessPolicy::set_policy_name): <p>The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer.</p>
    ///   - [`cookie_name(impl Into<String>)`](crate::client::fluent_builders::CreateAppCookieStickinessPolicy::cookie_name) / [`set_cookie_name(Option<String>)`](crate::client::fluent_builders::CreateAppCookieStickinessPolicy::set_cookie_name): <p>The name of the application cookie used for stickiness.</p>
    /// - On success, responds with [`CreateAppCookieStickinessPolicyOutput`](crate::output::CreateAppCookieStickinessPolicyOutput)

    /// - On failure, responds with [`SdkError<CreateAppCookieStickinessPolicyError>`](crate::error::CreateAppCookieStickinessPolicyError)
    pub fn create_app_cookie_stickiness_policy(
        &self,
    ) -> crate::client::fluent_builders::CreateAppCookieStickinessPolicy {
        crate::client::fluent_builders::CreateAppCookieStickinessPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLBCookieStickinessPolicy`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`policy_name(impl Into<String>)`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy::policy_name) / [`set_policy_name(Option<String>)`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy::set_policy_name): <p>The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer.</p>
    ///   - [`cookie_expiration_period(i64)`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy::cookie_expiration_period) / [`set_cookie_expiration_period(Option<i64>)`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy::set_cookie_expiration_period): <p>The time period, in seconds, after which the cookie should be considered stale. If you do not specify this parameter, the default value is 0, which indicates that the sticky session should last for the duration of the browser session.</p>
    /// - On success, responds with [`CreateLbCookieStickinessPolicyOutput`](crate::output::CreateLbCookieStickinessPolicyOutput)

    /// - On failure, responds with [`SdkError<CreateLBCookieStickinessPolicyError>`](crate::error::CreateLBCookieStickinessPolicyError)
    pub fn create_lb_cookie_stickiness_policy(
        &self,
    ) -> crate::client::fluent_builders::CreateLBCookieStickinessPolicy {
        crate::client::fluent_builders::CreateLBCookieStickinessPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLoadBalancer`](crate::client::fluent_builders::CreateLoadBalancer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::CreateLoadBalancer::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::CreateLoadBalancer::set_load_balancer_name): <p>The name of the load balancer.</p>  <p>This name must be unique within your set of load balancers for the region, must have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen.</p>
    ///   - [`listeners(Vec<Listener>)`](crate::client::fluent_builders::CreateLoadBalancer::listeners) / [`set_listeners(Option<Vec<Listener>>)`](crate::client::fluent_builders::CreateLoadBalancer::set_listeners): <p>The listeners.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html">Listeners for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
    ///   - [`availability_zones(Vec<String>)`](crate::client::fluent_builders::CreateLoadBalancer::availability_zones) / [`set_availability_zones(Option<Vec<String>>)`](crate::client::fluent_builders::CreateLoadBalancer::set_availability_zones): <p>One or more Availability Zones from the same region as the load balancer.</p>  <p>You must specify at least one Availability Zone.</p>  <p>You can add more Availability Zones after you create the load balancer using <code>EnableAvailabilityZonesForLoadBalancer</code>.</p>
    ///   - [`subnets(Vec<String>)`](crate::client::fluent_builders::CreateLoadBalancer::subnets) / [`set_subnets(Option<Vec<String>>)`](crate::client::fluent_builders::CreateLoadBalancer::set_subnets): <p>The IDs of the subnets in your VPC to attach to the load balancer. Specify one subnet per Availability Zone specified in <code>AvailabilityZones</code>.</p>
    ///   - [`security_groups(Vec<String>)`](crate::client::fluent_builders::CreateLoadBalancer::security_groups) / [`set_security_groups(Option<Vec<String>>)`](crate::client::fluent_builders::CreateLoadBalancer::set_security_groups): <p>The IDs of the security groups to assign to the load balancer.</p>
    ///   - [`scheme(impl Into<String>)`](crate::client::fluent_builders::CreateLoadBalancer::scheme) / [`set_scheme(Option<String>)`](crate::client::fluent_builders::CreateLoadBalancer::set_scheme): <p>The type of a load balancer. Valid only for load balancers in a VPC.</p>  <p>By default, Elastic Load Balancing creates an Internet-facing load balancer with a DNS name that resolves to public IP addresses. For more information about Internet-facing and Internal load balancers, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html#load-balancer-scheme">Load Balancer Scheme</a> in the <i>Elastic Load Balancing User Guide</i>.</p>  <p>Specify <code>internal</code> to create a load balancer with a DNS name that resolves to private IP addresses.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateLoadBalancer::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateLoadBalancer::set_tags): <p>A list of tags to assign to the load balancer.</p>  <p>For more information about tagging your load balancer, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html">Tag Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
    /// - On success, responds with [`CreateLoadBalancerOutput`](crate::output::CreateLoadBalancerOutput) with field(s):
    ///   - [`dns_name(Option<String>)`](crate::output::CreateLoadBalancerOutput::dns_name): <p>The DNS name of the load balancer.</p>
    /// - On failure, responds with [`SdkError<CreateLoadBalancerError>`](crate::error::CreateLoadBalancerError)
    pub fn create_load_balancer(&self) -> crate::client::fluent_builders::CreateLoadBalancer {
        crate::client::fluent_builders::CreateLoadBalancer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLoadBalancerListeners`](crate::client::fluent_builders::CreateLoadBalancerListeners) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::CreateLoadBalancerListeners::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::CreateLoadBalancerListeners::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`listeners(Vec<Listener>)`](crate::client::fluent_builders::CreateLoadBalancerListeners::listeners) / [`set_listeners(Option<Vec<Listener>>)`](crate::client::fluent_builders::CreateLoadBalancerListeners::set_listeners): <p>The listeners.</p>
    /// - On success, responds with [`CreateLoadBalancerListenersOutput`](crate::output::CreateLoadBalancerListenersOutput)

    /// - On failure, responds with [`SdkError<CreateLoadBalancerListenersError>`](crate::error::CreateLoadBalancerListenersError)
    pub fn create_load_balancer_listeners(
        &self,
    ) -> crate::client::fluent_builders::CreateLoadBalancerListeners {
        crate::client::fluent_builders::CreateLoadBalancerListeners::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLoadBalancerPolicy`](crate::client::fluent_builders::CreateLoadBalancerPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`policy_name(impl Into<String>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::policy_name) / [`set_policy_name(Option<String>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::set_policy_name): <p>The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer.</p>
    ///   - [`policy_type_name(impl Into<String>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::policy_type_name) / [`set_policy_type_name(Option<String>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::set_policy_type_name): <p>The name of the base policy type. To get the list of policy types, use <code>DescribeLoadBalancerPolicyTypes</code>.</p>
    ///   - [`policy_attributes(Vec<PolicyAttribute>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::policy_attributes) / [`set_policy_attributes(Option<Vec<PolicyAttribute>>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::set_policy_attributes): <p>The policy attributes.</p>
    /// - On success, responds with [`CreateLoadBalancerPolicyOutput`](crate::output::CreateLoadBalancerPolicyOutput)

    /// - On failure, responds with [`SdkError<CreateLoadBalancerPolicyError>`](crate::error::CreateLoadBalancerPolicyError)
    pub fn create_load_balancer_policy(
        &self,
    ) -> crate::client::fluent_builders::CreateLoadBalancerPolicy {
        crate::client::fluent_builders::CreateLoadBalancerPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLoadBalancer`](crate::client::fluent_builders::DeleteLoadBalancer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::DeleteLoadBalancer::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::DeleteLoadBalancer::set_load_balancer_name): <p>The name of the load balancer.</p>
    /// - On success, responds with [`DeleteLoadBalancerOutput`](crate::output::DeleteLoadBalancerOutput)

    /// - On failure, responds with [`SdkError<DeleteLoadBalancerError>`](crate::error::DeleteLoadBalancerError)
    pub fn delete_load_balancer(&self) -> crate::client::fluent_builders::DeleteLoadBalancer {
        crate::client::fluent_builders::DeleteLoadBalancer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLoadBalancerListeners`](crate::client::fluent_builders::DeleteLoadBalancerListeners) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::DeleteLoadBalancerListeners::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::DeleteLoadBalancerListeners::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`load_balancer_ports(Vec<i32>)`](crate::client::fluent_builders::DeleteLoadBalancerListeners::load_balancer_ports) / [`set_load_balancer_ports(Option<Vec<i32>>)`](crate::client::fluent_builders::DeleteLoadBalancerListeners::set_load_balancer_ports): <p>The client port numbers of the listeners.</p>
    /// - On success, responds with [`DeleteLoadBalancerListenersOutput`](crate::output::DeleteLoadBalancerListenersOutput)

    /// - On failure, responds with [`SdkError<DeleteLoadBalancerListenersError>`](crate::error::DeleteLoadBalancerListenersError)
    pub fn delete_load_balancer_listeners(
        &self,
    ) -> crate::client::fluent_builders::DeleteLoadBalancerListeners {
        crate::client::fluent_builders::DeleteLoadBalancerListeners::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLoadBalancerPolicy`](crate::client::fluent_builders::DeleteLoadBalancerPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::DeleteLoadBalancerPolicy::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::DeleteLoadBalancerPolicy::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`policy_name(impl Into<String>)`](crate::client::fluent_builders::DeleteLoadBalancerPolicy::policy_name) / [`set_policy_name(Option<String>)`](crate::client::fluent_builders::DeleteLoadBalancerPolicy::set_policy_name): <p>The name of the policy.</p>
    /// - On success, responds with [`DeleteLoadBalancerPolicyOutput`](crate::output::DeleteLoadBalancerPolicyOutput)

    /// - On failure, responds with [`SdkError<DeleteLoadBalancerPolicyError>`](crate::error::DeleteLoadBalancerPolicyError)
    pub fn delete_load_balancer_policy(
        &self,
    ) -> crate::client::fluent_builders::DeleteLoadBalancerPolicy {
        crate::client::fluent_builders::DeleteLoadBalancerPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeregisterInstancesFromLoadBalancer`](crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`instances(Vec<Instance>)`](crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer::instances) / [`set_instances(Option<Vec<Instance>>)`](crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer::set_instances): <p>The IDs of the instances.</p>
    /// - On success, responds with [`DeregisterInstancesFromLoadBalancerOutput`](crate::output::DeregisterInstancesFromLoadBalancerOutput) with field(s):
    ///   - [`instances(Option<Vec<Instance>>)`](crate::output::DeregisterInstancesFromLoadBalancerOutput::instances): <p>The remaining instances registered with the load balancer.</p>
    /// - On failure, responds with [`SdkError<DeregisterInstancesFromLoadBalancerError>`](crate::error::DeregisterInstancesFromLoadBalancerError)
    pub fn deregister_instances_from_load_balancer(
        &self,
    ) -> crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer {
        crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DescribeAccountLimits`](crate::client::fluent_builders::DescribeAccountLimits) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::DescribeAccountLimits::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::DescribeAccountLimits::set_marker): <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::DescribeAccountLimits::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::DescribeAccountLimits::set_page_size): <p>The maximum number of results to return with this call.</p>
    /// - On success, responds with [`DescribeAccountLimitsOutput`](crate::output::DescribeAccountLimitsOutput) with field(s):
    ///   - [`limits(Option<Vec<Limit>>)`](crate::output::DescribeAccountLimitsOutput::limits): <p>Information about the limits.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::DescribeAccountLimitsOutput::next_marker): <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    /// - On failure, responds with [`SdkError<DescribeAccountLimitsError>`](crate::error::DescribeAccountLimitsError)
    pub fn describe_account_limits(&self) -> crate::client::fluent_builders::DescribeAccountLimits {
        crate::client::fluent_builders::DescribeAccountLimits::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeInstanceHealth`](crate::client::fluent_builders::DescribeInstanceHealth) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::DescribeInstanceHealth::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::DescribeInstanceHealth::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`instances(Vec<Instance>)`](crate::client::fluent_builders::DescribeInstanceHealth::instances) / [`set_instances(Option<Vec<Instance>>)`](crate::client::fluent_builders::DescribeInstanceHealth::set_instances): <p>The IDs of the instances.</p>
    /// - On success, responds with [`DescribeInstanceHealthOutput`](crate::output::DescribeInstanceHealthOutput) with field(s):
    ///   - [`instance_states(Option<Vec<InstanceState>>)`](crate::output::DescribeInstanceHealthOutput::instance_states): <p>Information about the health of the instances.</p>
    /// - On failure, responds with [`SdkError<DescribeInstanceHealthError>`](crate::error::DescribeInstanceHealthError)
    pub fn describe_instance_health(
        &self,
    ) -> crate::client::fluent_builders::DescribeInstanceHealth {
        crate::client::fluent_builders::DescribeInstanceHealth::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeLoadBalancerAttributes`](crate::client::fluent_builders::DescribeLoadBalancerAttributes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::DescribeLoadBalancerAttributes::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::DescribeLoadBalancerAttributes::set_load_balancer_name): <p>The name of the load balancer.</p>
    /// - On success, responds with [`DescribeLoadBalancerAttributesOutput`](crate::output::DescribeLoadBalancerAttributesOutput) with field(s):
    ///   - [`load_balancer_attributes(Option<LoadBalancerAttributes>)`](crate::output::DescribeLoadBalancerAttributesOutput::load_balancer_attributes): <p>Information about the load balancer attributes.</p>
    /// - On failure, responds with [`SdkError<DescribeLoadBalancerAttributesError>`](crate::error::DescribeLoadBalancerAttributesError)
    pub fn describe_load_balancer_attributes(
        &self,
    ) -> crate::client::fluent_builders::DescribeLoadBalancerAttributes {
        crate::client::fluent_builders::DescribeLoadBalancerAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeLoadBalancerPolicies`](crate::client::fluent_builders::DescribeLoadBalancerPolicies) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::DescribeLoadBalancerPolicies::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::DescribeLoadBalancerPolicies::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`policy_names(Vec<String>)`](crate::client::fluent_builders::DescribeLoadBalancerPolicies::policy_names) / [`set_policy_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeLoadBalancerPolicies::set_policy_names): <p>The names of the policies.</p>
    /// - On success, responds with [`DescribeLoadBalancerPoliciesOutput`](crate::output::DescribeLoadBalancerPoliciesOutput) with field(s):
    ///   - [`policy_descriptions(Option<Vec<PolicyDescription>>)`](crate::output::DescribeLoadBalancerPoliciesOutput::policy_descriptions): <p>Information about the policies.</p>
    /// - On failure, responds with [`SdkError<DescribeLoadBalancerPoliciesError>`](crate::error::DescribeLoadBalancerPoliciesError)
    pub fn describe_load_balancer_policies(
        &self,
    ) -> crate::client::fluent_builders::DescribeLoadBalancerPolicies {
        crate::client::fluent_builders::DescribeLoadBalancerPolicies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeLoadBalancerPolicyTypes`](crate::client::fluent_builders::DescribeLoadBalancerPolicyTypes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`policy_type_names(Vec<String>)`](crate::client::fluent_builders::DescribeLoadBalancerPolicyTypes::policy_type_names) / [`set_policy_type_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeLoadBalancerPolicyTypes::set_policy_type_names): <p>The names of the policy types. If no names are specified, describes all policy types defined by Elastic Load Balancing.</p>
    /// - On success, responds with [`DescribeLoadBalancerPolicyTypesOutput`](crate::output::DescribeLoadBalancerPolicyTypesOutput) with field(s):
    ///   - [`policy_type_descriptions(Option<Vec<PolicyTypeDescription>>)`](crate::output::DescribeLoadBalancerPolicyTypesOutput::policy_type_descriptions): <p>Information about the policy types.</p>
    /// - On failure, responds with [`SdkError<DescribeLoadBalancerPolicyTypesError>`](crate::error::DescribeLoadBalancerPolicyTypesError)
    pub fn describe_load_balancer_policy_types(
        &self,
    ) -> crate::client::fluent_builders::DescribeLoadBalancerPolicyTypes {
        crate::client::fluent_builders::DescribeLoadBalancerPolicyTypes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeLoadBalancers`](crate::client::fluent_builders::DescribeLoadBalancers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeLoadBalancers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_names(Vec<String>)`](crate::client::fluent_builders::DescribeLoadBalancers::load_balancer_names) / [`set_load_balancer_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeLoadBalancers::set_load_balancer_names): <p>The names of the load balancers.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::DescribeLoadBalancers::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::DescribeLoadBalancers::set_marker): <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::DescribeLoadBalancers::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::DescribeLoadBalancers::set_page_size): <p>The maximum number of results to return with this call (a number from 1 to 400). The default is 400.</p>
    /// - On success, responds with [`DescribeLoadBalancersOutput`](crate::output::DescribeLoadBalancersOutput) with field(s):
    ///   - [`load_balancer_descriptions(Option<Vec<LoadBalancerDescription>>)`](crate::output::DescribeLoadBalancersOutput::load_balancer_descriptions): <p>Information about the load balancers.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::DescribeLoadBalancersOutput::next_marker): <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    /// - On failure, responds with [`SdkError<DescribeLoadBalancersError>`](crate::error::DescribeLoadBalancersError)
    pub fn describe_load_balancers(&self) -> crate::client::fluent_builders::DescribeLoadBalancers {
        crate::client::fluent_builders::DescribeLoadBalancers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeTags`](crate::client::fluent_builders::DescribeTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_names(Vec<String>)`](crate::client::fluent_builders::DescribeTags::load_balancer_names) / [`set_load_balancer_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeTags::set_load_balancer_names): <p>The names of the load balancers.</p>
    /// - On success, responds with [`DescribeTagsOutput`](crate::output::DescribeTagsOutput) with field(s):
    ///   - [`tag_descriptions(Option<Vec<TagDescription>>)`](crate::output::DescribeTagsOutput::tag_descriptions): <p>Information about the tags.</p>
    /// - On failure, responds with [`SdkError<DescribeTagsError>`](crate::error::DescribeTagsError)
    pub fn describe_tags(&self) -> crate::client::fluent_builders::DescribeTags {
        crate::client::fluent_builders::DescribeTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DetachLoadBalancerFromSubnets`](crate::client::fluent_builders::DetachLoadBalancerFromSubnets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::DetachLoadBalancerFromSubnets::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::DetachLoadBalancerFromSubnets::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`subnets(Vec<String>)`](crate::client::fluent_builders::DetachLoadBalancerFromSubnets::subnets) / [`set_subnets(Option<Vec<String>>)`](crate::client::fluent_builders::DetachLoadBalancerFromSubnets::set_subnets): <p>The IDs of the subnets.</p>
    /// - On success, responds with [`DetachLoadBalancerFromSubnetsOutput`](crate::output::DetachLoadBalancerFromSubnetsOutput) with field(s):
    ///   - [`subnets(Option<Vec<String>>)`](crate::output::DetachLoadBalancerFromSubnetsOutput::subnets): <p>The IDs of the remaining subnets for the load balancer.</p>
    /// - On failure, responds with [`SdkError<DetachLoadBalancerFromSubnetsError>`](crate::error::DetachLoadBalancerFromSubnetsError)
    pub fn detach_load_balancer_from_subnets(
        &self,
    ) -> crate::client::fluent_builders::DetachLoadBalancerFromSubnets {
        crate::client::fluent_builders::DetachLoadBalancerFromSubnets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisableAvailabilityZonesForLoadBalancer`](crate::client::fluent_builders::DisableAvailabilityZonesForLoadBalancer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::DisableAvailabilityZonesForLoadBalancer::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::DisableAvailabilityZonesForLoadBalancer::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`availability_zones(Vec<String>)`](crate::client::fluent_builders::DisableAvailabilityZonesForLoadBalancer::availability_zones) / [`set_availability_zones(Option<Vec<String>>)`](crate::client::fluent_builders::DisableAvailabilityZonesForLoadBalancer::set_availability_zones): <p>The Availability Zones.</p>
    /// - On success, responds with [`DisableAvailabilityZonesForLoadBalancerOutput`](crate::output::DisableAvailabilityZonesForLoadBalancerOutput) with field(s):
    ///   - [`availability_zones(Option<Vec<String>>)`](crate::output::DisableAvailabilityZonesForLoadBalancerOutput::availability_zones): <p>The remaining Availability Zones for the load balancer.</p>
    /// - On failure, responds with [`SdkError<DisableAvailabilityZonesForLoadBalancerError>`](crate::error::DisableAvailabilityZonesForLoadBalancerError)
    pub fn disable_availability_zones_for_load_balancer(
        &self,
    ) -> crate::client::fluent_builders::DisableAvailabilityZonesForLoadBalancer {
        crate::client::fluent_builders::DisableAvailabilityZonesForLoadBalancer::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`EnableAvailabilityZonesForLoadBalancer`](crate::client::fluent_builders::EnableAvailabilityZonesForLoadBalancer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::EnableAvailabilityZonesForLoadBalancer::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::EnableAvailabilityZonesForLoadBalancer::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`availability_zones(Vec<String>)`](crate::client::fluent_builders::EnableAvailabilityZonesForLoadBalancer::availability_zones) / [`set_availability_zones(Option<Vec<String>>)`](crate::client::fluent_builders::EnableAvailabilityZonesForLoadBalancer::set_availability_zones): <p>The Availability Zones. These must be in the same region as the load balancer.</p>
    /// - On success, responds with [`EnableAvailabilityZonesForLoadBalancerOutput`](crate::output::EnableAvailabilityZonesForLoadBalancerOutput) with field(s):
    ///   - [`availability_zones(Option<Vec<String>>)`](crate::output::EnableAvailabilityZonesForLoadBalancerOutput::availability_zones): <p>The updated list of Availability Zones for the load balancer.</p>
    /// - On failure, responds with [`SdkError<EnableAvailabilityZonesForLoadBalancerError>`](crate::error::EnableAvailabilityZonesForLoadBalancerError)
    pub fn enable_availability_zones_for_load_balancer(
        &self,
    ) -> crate::client::fluent_builders::EnableAvailabilityZonesForLoadBalancer {
        crate::client::fluent_builders::EnableAvailabilityZonesForLoadBalancer::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`ModifyLoadBalancerAttributes`](crate::client::fluent_builders::ModifyLoadBalancerAttributes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::ModifyLoadBalancerAttributes::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::ModifyLoadBalancerAttributes::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`load_balancer_attributes(LoadBalancerAttributes)`](crate::client::fluent_builders::ModifyLoadBalancerAttributes::load_balancer_attributes) / [`set_load_balancer_attributes(Option<LoadBalancerAttributes>)`](crate::client::fluent_builders::ModifyLoadBalancerAttributes::set_load_balancer_attributes): <p>The attributes for the load balancer.</p>
    /// - On success, responds with [`ModifyLoadBalancerAttributesOutput`](crate::output::ModifyLoadBalancerAttributesOutput) with field(s):
    ///   - [`load_balancer_name(Option<String>)`](crate::output::ModifyLoadBalancerAttributesOutput::load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`load_balancer_attributes(Option<LoadBalancerAttributes>)`](crate::output::ModifyLoadBalancerAttributesOutput::load_balancer_attributes): <p>Information about the load balancer attributes.</p>
    /// - On failure, responds with [`SdkError<ModifyLoadBalancerAttributesError>`](crate::error::ModifyLoadBalancerAttributesError)
    pub fn modify_load_balancer_attributes(
        &self,
    ) -> crate::client::fluent_builders::ModifyLoadBalancerAttributes {
        crate::client::fluent_builders::ModifyLoadBalancerAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RegisterInstancesWithLoadBalancer`](crate::client::fluent_builders::RegisterInstancesWithLoadBalancer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::RegisterInstancesWithLoadBalancer::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::RegisterInstancesWithLoadBalancer::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`instances(Vec<Instance>)`](crate::client::fluent_builders::RegisterInstancesWithLoadBalancer::instances) / [`set_instances(Option<Vec<Instance>>)`](crate::client::fluent_builders::RegisterInstancesWithLoadBalancer::set_instances): <p>The IDs of the instances.</p>
    /// - On success, responds with [`RegisterInstancesWithLoadBalancerOutput`](crate::output::RegisterInstancesWithLoadBalancerOutput) with field(s):
    ///   - [`instances(Option<Vec<Instance>>)`](crate::output::RegisterInstancesWithLoadBalancerOutput::instances): <p>The updated list of instances for the load balancer.</p>
    /// - On failure, responds with [`SdkError<RegisterInstancesWithLoadBalancerError>`](crate::error::RegisterInstancesWithLoadBalancerError)
    pub fn register_instances_with_load_balancer(
        &self,
    ) -> crate::client::fluent_builders::RegisterInstancesWithLoadBalancer {
        crate::client::fluent_builders::RegisterInstancesWithLoadBalancer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RemoveTags`](crate::client::fluent_builders::RemoveTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_names(Vec<String>)`](crate::client::fluent_builders::RemoveTags::load_balancer_names) / [`set_load_balancer_names(Option<Vec<String>>)`](crate::client::fluent_builders::RemoveTags::set_load_balancer_names): <p>The name of the load balancer. You can specify a maximum of one load balancer name.</p>
    ///   - [`tags(Vec<TagKeyOnly>)`](crate::client::fluent_builders::RemoveTags::tags) / [`set_tags(Option<Vec<TagKeyOnly>>)`](crate::client::fluent_builders::RemoveTags::set_tags): <p>The list of tag keys to remove.</p>
    /// - On success, responds with [`RemoveTagsOutput`](crate::output::RemoveTagsOutput)

    /// - On failure, responds with [`SdkError<RemoveTagsError>`](crate::error::RemoveTagsError)
    pub fn remove_tags(&self) -> crate::client::fluent_builders::RemoveTags {
        crate::client::fluent_builders::RemoveTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SetLoadBalancerListenerSSLCertificate`](crate::client::fluent_builders::SetLoadBalancerListenerSSLCertificate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::SetLoadBalancerListenerSSLCertificate::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::SetLoadBalancerListenerSSLCertificate::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`load_balancer_port(i32)`](crate::client::fluent_builders::SetLoadBalancerListenerSSLCertificate::load_balancer_port) / [`set_load_balancer_port(i32)`](crate::client::fluent_builders::SetLoadBalancerListenerSSLCertificate::set_load_balancer_port): <p>The port that uses the specified SSL certificate.</p>
    ///   - [`ssl_certificate_id(impl Into<String>)`](crate::client::fluent_builders::SetLoadBalancerListenerSSLCertificate::ssl_certificate_id) / [`set_ssl_certificate_id(Option<String>)`](crate::client::fluent_builders::SetLoadBalancerListenerSSLCertificate::set_ssl_certificate_id): <p>The Amazon Resource Name (ARN) of the SSL certificate.</p>
    /// - On success, responds with [`SetLoadBalancerListenerSslCertificateOutput`](crate::output::SetLoadBalancerListenerSslCertificateOutput)

    /// - On failure, responds with [`SdkError<SetLoadBalancerListenerSSLCertificateError>`](crate::error::SetLoadBalancerListenerSSLCertificateError)
    pub fn set_load_balancer_listener_ssl_certificate(
        &self,
    ) -> crate::client::fluent_builders::SetLoadBalancerListenerSSLCertificate {
        crate::client::fluent_builders::SetLoadBalancerListenerSSLCertificate::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`SetLoadBalancerPoliciesForBackendServer`](crate::client::fluent_builders::SetLoadBalancerPoliciesForBackendServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesForBackendServer::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesForBackendServer::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`instance_port(i32)`](crate::client::fluent_builders::SetLoadBalancerPoliciesForBackendServer::instance_port) / [`set_instance_port(Option<i32>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesForBackendServer::set_instance_port): <p>The port number associated with the EC2 instance.</p>
    ///   - [`policy_names(Vec<String>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesForBackendServer::policy_names) / [`set_policy_names(Option<Vec<String>>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesForBackendServer::set_policy_names): <p>The names of the policies. If the list is empty, then all current polices are removed from the EC2 instance.</p>
    /// - On success, responds with [`SetLoadBalancerPoliciesForBackendServerOutput`](crate::output::SetLoadBalancerPoliciesForBackendServerOutput)

    /// - On failure, responds with [`SdkError<SetLoadBalancerPoliciesForBackendServerError>`](crate::error::SetLoadBalancerPoliciesForBackendServerError)
    pub fn set_load_balancer_policies_for_backend_server(
        &self,
    ) -> crate::client::fluent_builders::SetLoadBalancerPoliciesForBackendServer {
        crate::client::fluent_builders::SetLoadBalancerPoliciesForBackendServer::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`SetLoadBalancerPoliciesOfListener`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`load_balancer_port(i32)`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::load_balancer_port) / [`set_load_balancer_port(i32)`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::set_load_balancer_port): <p>The external port of the load balancer.</p>
    ///   - [`policy_names(Vec<String>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::policy_names) / [`set_policy_names(Option<Vec<String>>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::set_policy_names): <p>The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled.</p>
    /// - On success, responds with [`SetLoadBalancerPoliciesOfListenerOutput`](crate::output::SetLoadBalancerPoliciesOfListenerOutput)

    /// - On failure, responds with [`SdkError<SetLoadBalancerPoliciesOfListenerError>`](crate::error::SetLoadBalancerPoliciesOfListenerError)
    pub fn set_load_balancer_policies_of_listener(
        &self,
    ) -> crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener {
        crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
