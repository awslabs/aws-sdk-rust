// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the <code>ConnectionDraining</code> attribute.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectionDraining {
    /// <p>Specifies whether connection draining is enabled for the load balancer.</p>
    pub enabled: bool,
    /// <p>The maximum time, in seconds, to keep the existing connections open before deregistering the instances.</p>
    pub timeout: ::std::option::Option<i32>,
}
impl ConnectionDraining {
    /// <p>Specifies whether connection draining is enabled for the load balancer.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The maximum time, in seconds, to keep the existing connections open before deregistering the instances.</p>
    pub fn timeout(&self) -> ::std::option::Option<i32> {
        self.timeout
    }
}
impl ConnectionDraining {
    /// Creates a new builder-style object to manufacture [`ConnectionDraining`](crate::types::ConnectionDraining).
    pub fn builder() -> crate::types::builders::ConnectionDrainingBuilder {
        crate::types::builders::ConnectionDrainingBuilder::default()
    }
}

/// A builder for [`ConnectionDraining`](crate::types::ConnectionDraining).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConnectionDrainingBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) timeout: ::std::option::Option<i32>,
}
impl ConnectionDrainingBuilder {
    /// <p>Specifies whether connection draining is enabled for the load balancer.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether connection draining is enabled for the load balancer.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether connection draining is enabled for the load balancer.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The maximum time, in seconds, to keep the existing connections open before deregistering the instances.</p>
    pub fn timeout(mut self, input: i32) -> Self {
        self.timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum time, in seconds, to keep the existing connections open before deregistering the instances.</p>
    pub fn set_timeout(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout = input;
        self
    }
    /// <p>The maximum time, in seconds, to keep the existing connections open before deregistering the instances.</p>
    pub fn get_timeout(&self) -> &::std::option::Option<i32> {
        &self.timeout
    }
    /// Consumes the builder and constructs a [`ConnectionDraining`](crate::types::ConnectionDraining).
    pub fn build(self) -> crate::types::ConnectionDraining {
        crate::types::ConnectionDraining {
            enabled: self.enabled.unwrap_or_default(),
            timeout: self.timeout,
        }
    }
}
