// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a load balancer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoadBalancerDescription {
    /// <p>The name of the load balancer.</p>
    pub load_balancer_name: ::std::option::Option<::std::string::String>,
    /// <p>The DNS name of the load balancer.</p>
    pub dns_name: ::std::option::Option<::std::string::String>,
    /// <p>The DNS name of the load balancer.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/using-domain-names-with-elb.html">Configure a Custom Domain Name</a> in the <i>Classic Load Balancers Guide</i>.</p>
    pub canonical_hosted_zone_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Route 53 hosted zone for the load balancer.</p>
    pub canonical_hosted_zone_name_id: ::std::option::Option<::std::string::String>,
    /// <p>The listeners for the load balancer.</p>
    pub listener_descriptions: ::std::option::Option<::std::vec::Vec<crate::types::ListenerDescription>>,
    /// <p>The policies defined for the load balancer.</p>
    pub policies: ::std::option::Option<crate::types::Policies>,
    /// <p>Information about your EC2 instances.</p>
    pub backend_server_descriptions: ::std::option::Option<::std::vec::Vec<crate::types::BackendServerDescription>>,
    /// <p>The Availability Zones for the load balancer.</p>
    pub availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The IDs of the subnets for the load balancer.</p>
    pub subnets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The ID of the VPC for the load balancer.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The IDs of the instances for the load balancer.</p>
    pub instances: ::std::option::Option<::std::vec::Vec<crate::types::Instance>>,
    /// <p>Information about the health checks conducted on the load balancer.</p>
    pub health_check: ::std::option::Option<crate::types::HealthCheck>,
    /// <p>The security group for the load balancer, which you can use as part of your inbound rules for your registered instances. To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.</p>
    pub source_security_group: ::std::option::Option<crate::types::SourceSecurityGroup>,
    /// <p>The security groups for the load balancer. Valid only for load balancers in a VPC.</p>
    pub security_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The date and time the load balancer was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of load balancer. Valid only for load balancers in a VPC.</p>
    /// <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public DNS name that resolves to a public IP address.</p>
    /// <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name that resolves to a private IP address.</p>
    pub scheme: ::std::option::Option<::std::string::String>,
}
impl LoadBalancerDescription {
    /// <p>The name of the load balancer.</p>
    pub fn load_balancer_name(&self) -> ::std::option::Option<&str> {
        self.load_balancer_name.as_deref()
    }
    /// <p>The DNS name of the load balancer.</p>
    pub fn dns_name(&self) -> ::std::option::Option<&str> {
        self.dns_name.as_deref()
    }
    /// <p>The DNS name of the load balancer.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/using-domain-names-with-elb.html">Configure a Custom Domain Name</a> in the <i>Classic Load Balancers Guide</i>.</p>
    pub fn canonical_hosted_zone_name(&self) -> ::std::option::Option<&str> {
        self.canonical_hosted_zone_name.as_deref()
    }
    /// <p>The ID of the Amazon Route 53 hosted zone for the load balancer.</p>
    pub fn canonical_hosted_zone_name_id(&self) -> ::std::option::Option<&str> {
        self.canonical_hosted_zone_name_id.as_deref()
    }
    /// <p>The listeners for the load balancer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.listener_descriptions.is_none()`.
    pub fn listener_descriptions(&self) -> &[crate::types::ListenerDescription] {
        self.listener_descriptions.as_deref().unwrap_or_default()
    }
    /// <p>The policies defined for the load balancer.</p>
    pub fn policies(&self) -> ::std::option::Option<&crate::types::Policies> {
        self.policies.as_ref()
    }
    /// <p>Information about your EC2 instances.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.backend_server_descriptions.is_none()`.
    pub fn backend_server_descriptions(&self) -> &[crate::types::BackendServerDescription] {
        self.backend_server_descriptions.as_deref().unwrap_or_default()
    }
    /// <p>The Availability Zones for the load balancer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.availability_zones.is_none()`.
    pub fn availability_zones(&self) -> &[::std::string::String] {
        self.availability_zones.as_deref().unwrap_or_default()
    }
    /// <p>The IDs of the subnets for the load balancer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnets.is_none()`.
    pub fn subnets(&self) -> &[::std::string::String] {
        self.subnets.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the VPC for the load balancer.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The IDs of the instances for the load balancer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instances.is_none()`.
    pub fn instances(&self) -> &[crate::types::Instance] {
        self.instances.as_deref().unwrap_or_default()
    }
    /// <p>Information about the health checks conducted on the load balancer.</p>
    pub fn health_check(&self) -> ::std::option::Option<&crate::types::HealthCheck> {
        self.health_check.as_ref()
    }
    /// <p>The security group for the load balancer, which you can use as part of your inbound rules for your registered instances. To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.</p>
    pub fn source_security_group(&self) -> ::std::option::Option<&crate::types::SourceSecurityGroup> {
        self.source_security_group.as_ref()
    }
    /// <p>The security groups for the load balancer. Valid only for load balancers in a VPC.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_groups.is_none()`.
    pub fn security_groups(&self) -> &[::std::string::String] {
        self.security_groups.as_deref().unwrap_or_default()
    }
    /// <p>The date and time the load balancer was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The type of load balancer. Valid only for load balancers in a VPC.</p>
    /// <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public DNS name that resolves to a public IP address.</p>
    /// <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name that resolves to a private IP address.</p>
    pub fn scheme(&self) -> ::std::option::Option<&str> {
        self.scheme.as_deref()
    }
}
impl LoadBalancerDescription {
    /// Creates a new builder-style object to manufacture [`LoadBalancerDescription`](crate::types::LoadBalancerDescription).
    pub fn builder() -> crate::types::builders::LoadBalancerDescriptionBuilder {
        crate::types::builders::LoadBalancerDescriptionBuilder::default()
    }
}

/// A builder for [`LoadBalancerDescription`](crate::types::LoadBalancerDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LoadBalancerDescriptionBuilder {
    pub(crate) load_balancer_name: ::std::option::Option<::std::string::String>,
    pub(crate) dns_name: ::std::option::Option<::std::string::String>,
    pub(crate) canonical_hosted_zone_name: ::std::option::Option<::std::string::String>,
    pub(crate) canonical_hosted_zone_name_id: ::std::option::Option<::std::string::String>,
    pub(crate) listener_descriptions: ::std::option::Option<::std::vec::Vec<crate::types::ListenerDescription>>,
    pub(crate) policies: ::std::option::Option<crate::types::Policies>,
    pub(crate) backend_server_descriptions: ::std::option::Option<::std::vec::Vec<crate::types::BackendServerDescription>>,
    pub(crate) availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) subnets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) instances: ::std::option::Option<::std::vec::Vec<crate::types::Instance>>,
    pub(crate) health_check: ::std::option::Option<crate::types::HealthCheck>,
    pub(crate) source_security_group: ::std::option::Option<crate::types::SourceSecurityGroup>,
    pub(crate) security_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) scheme: ::std::option::Option<::std::string::String>,
}
impl LoadBalancerDescriptionBuilder {
    /// <p>The name of the load balancer.</p>
    pub fn load_balancer_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.load_balancer_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the load balancer.</p>
    pub fn set_load_balancer_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.load_balancer_name = input;
        self
    }
    /// <p>The name of the load balancer.</p>
    pub fn get_load_balancer_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.load_balancer_name
    }
    /// <p>The DNS name of the load balancer.</p>
    pub fn dns_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dns_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS name of the load balancer.</p>
    pub fn set_dns_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dns_name = input;
        self
    }
    /// <p>The DNS name of the load balancer.</p>
    pub fn get_dns_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dns_name
    }
    /// <p>The DNS name of the load balancer.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/using-domain-names-with-elb.html">Configure a Custom Domain Name</a> in the <i>Classic Load Balancers Guide</i>.</p>
    pub fn canonical_hosted_zone_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.canonical_hosted_zone_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS name of the load balancer.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/using-domain-names-with-elb.html">Configure a Custom Domain Name</a> in the <i>Classic Load Balancers Guide</i>.</p>
    pub fn set_canonical_hosted_zone_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.canonical_hosted_zone_name = input;
        self
    }
    /// <p>The DNS name of the load balancer.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/using-domain-names-with-elb.html">Configure a Custom Domain Name</a> in the <i>Classic Load Balancers Guide</i>.</p>
    pub fn get_canonical_hosted_zone_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.canonical_hosted_zone_name
    }
    /// <p>The ID of the Amazon Route 53 hosted zone for the load balancer.</p>
    pub fn canonical_hosted_zone_name_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.canonical_hosted_zone_name_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Route 53 hosted zone for the load balancer.</p>
    pub fn set_canonical_hosted_zone_name_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.canonical_hosted_zone_name_id = input;
        self
    }
    /// <p>The ID of the Amazon Route 53 hosted zone for the load balancer.</p>
    pub fn get_canonical_hosted_zone_name_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.canonical_hosted_zone_name_id
    }
    /// Appends an item to `listener_descriptions`.
    ///
    /// To override the contents of this collection use [`set_listener_descriptions`](Self::set_listener_descriptions).
    ///
    /// <p>The listeners for the load balancer.</p>
    pub fn listener_descriptions(mut self, input: crate::types::ListenerDescription) -> Self {
        let mut v = self.listener_descriptions.unwrap_or_default();
        v.push(input);
        self.listener_descriptions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The listeners for the load balancer.</p>
    pub fn set_listener_descriptions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ListenerDescription>>) -> Self {
        self.listener_descriptions = input;
        self
    }
    /// <p>The listeners for the load balancer.</p>
    pub fn get_listener_descriptions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ListenerDescription>> {
        &self.listener_descriptions
    }
    /// <p>The policies defined for the load balancer.</p>
    pub fn policies(mut self, input: crate::types::Policies) -> Self {
        self.policies = ::std::option::Option::Some(input);
        self
    }
    /// <p>The policies defined for the load balancer.</p>
    pub fn set_policies(mut self, input: ::std::option::Option<crate::types::Policies>) -> Self {
        self.policies = input;
        self
    }
    /// <p>The policies defined for the load balancer.</p>
    pub fn get_policies(&self) -> &::std::option::Option<crate::types::Policies> {
        &self.policies
    }
    /// Appends an item to `backend_server_descriptions`.
    ///
    /// To override the contents of this collection use [`set_backend_server_descriptions`](Self::set_backend_server_descriptions).
    ///
    /// <p>Information about your EC2 instances.</p>
    pub fn backend_server_descriptions(mut self, input: crate::types::BackendServerDescription) -> Self {
        let mut v = self.backend_server_descriptions.unwrap_or_default();
        v.push(input);
        self.backend_server_descriptions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about your EC2 instances.</p>
    pub fn set_backend_server_descriptions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BackendServerDescription>>) -> Self {
        self.backend_server_descriptions = input;
        self
    }
    /// <p>Information about your EC2 instances.</p>
    pub fn get_backend_server_descriptions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BackendServerDescription>> {
        &self.backend_server_descriptions
    }
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>The Availability Zones for the load balancer.</p>
    pub fn availability_zones(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input.into());
        self.availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Availability Zones for the load balancer.</p>
    pub fn set_availability_zones(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.availability_zones = input;
        self
    }
    /// <p>The Availability Zones for the load balancer.</p>
    pub fn get_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.availability_zones
    }
    /// Appends an item to `subnets`.
    ///
    /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
    ///
    /// <p>The IDs of the subnets for the load balancer.</p>
    pub fn subnets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnets.unwrap_or_default();
        v.push(input.into());
        self.subnets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the subnets for the load balancer.</p>
    pub fn set_subnets(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnets = input;
        self
    }
    /// <p>The IDs of the subnets for the load balancer.</p>
    pub fn get_subnets(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnets
    }
    /// <p>The ID of the VPC for the load balancer.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC for the load balancer.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC for the load balancer.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Appends an item to `instances`.
    ///
    /// To override the contents of this collection use [`set_instances`](Self::set_instances).
    ///
    /// <p>The IDs of the instances for the load balancer.</p>
    pub fn instances(mut self, input: crate::types::Instance) -> Self {
        let mut v = self.instances.unwrap_or_default();
        v.push(input);
        self.instances = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the instances for the load balancer.</p>
    pub fn set_instances(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Instance>>) -> Self {
        self.instances = input;
        self
    }
    /// <p>The IDs of the instances for the load balancer.</p>
    pub fn get_instances(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Instance>> {
        &self.instances
    }
    /// <p>Information about the health checks conducted on the load balancer.</p>
    pub fn health_check(mut self, input: crate::types::HealthCheck) -> Self {
        self.health_check = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the health checks conducted on the load balancer.</p>
    pub fn set_health_check(mut self, input: ::std::option::Option<crate::types::HealthCheck>) -> Self {
        self.health_check = input;
        self
    }
    /// <p>Information about the health checks conducted on the load balancer.</p>
    pub fn get_health_check(&self) -> &::std::option::Option<crate::types::HealthCheck> {
        &self.health_check
    }
    /// <p>The security group for the load balancer, which you can use as part of your inbound rules for your registered instances. To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.</p>
    pub fn source_security_group(mut self, input: crate::types::SourceSecurityGroup) -> Self {
        self.source_security_group = ::std::option::Option::Some(input);
        self
    }
    /// <p>The security group for the load balancer, which you can use as part of your inbound rules for your registered instances. To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.</p>
    pub fn set_source_security_group(mut self, input: ::std::option::Option<crate::types::SourceSecurityGroup>) -> Self {
        self.source_security_group = input;
        self
    }
    /// <p>The security group for the load balancer, which you can use as part of your inbound rules for your registered instances. To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.</p>
    pub fn get_source_security_group(&self) -> &::std::option::Option<crate::types::SourceSecurityGroup> {
        &self.source_security_group
    }
    /// Appends an item to `security_groups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>The security groups for the load balancer. Valid only for load balancers in a VPC.</p>
    pub fn security_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_groups.unwrap_or_default();
        v.push(input.into());
        self.security_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The security groups for the load balancer. Valid only for load balancers in a VPC.</p>
    pub fn set_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_groups = input;
        self
    }
    /// <p>The security groups for the load balancer. Valid only for load balancers in a VPC.</p>
    pub fn get_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_groups
    }
    /// <p>The date and time the load balancer was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the load balancer was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time the load balancer was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The type of load balancer. Valid only for load balancers in a VPC.</p>
    /// <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public DNS name that resolves to a public IP address.</p>
    /// <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name that resolves to a private IP address.</p>
    pub fn scheme(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scheme = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of load balancer. Valid only for load balancers in a VPC.</p>
    /// <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public DNS name that resolves to a public IP address.</p>
    /// <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name that resolves to a private IP address.</p>
    pub fn set_scheme(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scheme = input;
        self
    }
    /// <p>The type of load balancer. Valid only for load balancers in a VPC.</p>
    /// <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public DNS name that resolves to a public IP address.</p>
    /// <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name that resolves to a private IP address.</p>
    pub fn get_scheme(&self) -> &::std::option::Option<::std::string::String> {
        &self.scheme
    }
    /// Consumes the builder and constructs a [`LoadBalancerDescription`](crate::types::LoadBalancerDescription).
    pub fn build(self) -> crate::types::LoadBalancerDescription {
        crate::types::LoadBalancerDescription {
            load_balancer_name: self.load_balancer_name,
            dns_name: self.dns_name,
            canonical_hosted_zone_name: self.canonical_hosted_zone_name,
            canonical_hosted_zone_name_id: self.canonical_hosted_zone_name_id,
            listener_descriptions: self.listener_descriptions,
            policies: self.policies,
            backend_server_descriptions: self.backend_server_descriptions,
            availability_zones: self.availability_zones,
            subnets: self.subnets,
            vpc_id: self.vpc_id,
            instances: self.instances,
            health_check: self.health_check,
            source_security_group: self.source_security_group,
            security_groups: self.security_groups,
            created_time: self.created_time,
            scheme: self.scheme,
        }
    }
}
