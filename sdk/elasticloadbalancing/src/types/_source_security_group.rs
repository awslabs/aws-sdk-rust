// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a source security group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SourceSecurityGroup {
    /// <p>The owner of the security group.</p>
    #[doc(hidden)]
    pub owner_alias: std::option::Option<std::string::String>,
    /// <p>The name of the security group.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
}
impl SourceSecurityGroup {
    /// <p>The owner of the security group.</p>
    pub fn owner_alias(&self) -> std::option::Option<&str> {
        self.owner_alias.as_deref()
    }
    /// <p>The name of the security group.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
}
impl SourceSecurityGroup {
    /// Creates a new builder-style object to manufacture [`SourceSecurityGroup`](crate::types::SourceSecurityGroup).
    pub fn builder() -> crate::types::builders::SourceSecurityGroupBuilder {
        crate::types::builders::SourceSecurityGroupBuilder::default()
    }
}

/// A builder for [`SourceSecurityGroup`](crate::types::SourceSecurityGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SourceSecurityGroupBuilder {
    pub(crate) owner_alias: std::option::Option<std::string::String>,
    pub(crate) group_name: std::option::Option<std::string::String>,
}
impl SourceSecurityGroupBuilder {
    /// <p>The owner of the security group.</p>
    pub fn owner_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_alias = Some(input.into());
        self
    }
    /// <p>The owner of the security group.</p>
    pub fn set_owner_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_alias = input;
        self
    }
    /// <p>The name of the security group.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>The name of the security group.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// Consumes the builder and constructs a [`SourceSecurityGroup`](crate::types::SourceSecurityGroup).
    pub fn build(self) -> crate::types::SourceSecurityGroup {
        crate::types::SourceSecurityGroup {
            owner_alias: self.owner_alias,
            group_name: self.group_name,
        }
    }
}
