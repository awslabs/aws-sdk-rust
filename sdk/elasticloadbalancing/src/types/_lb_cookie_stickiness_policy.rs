// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a policy for duration-based session stickiness.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LbCookieStickinessPolicy {
    /// <p>The name of the policy. This name must be unique within the set of policies for this load balancer.</p>
    #[doc(hidden)]
    pub policy_name: std::option::Option<std::string::String>,
    /// <p>The time period, in seconds, after which the cookie should be considered stale. If this parameter is not specified, the stickiness session lasts for the duration of the browser session.</p>
    #[doc(hidden)]
    pub cookie_expiration_period: std::option::Option<i64>,
}
impl LbCookieStickinessPolicy {
    /// <p>The name of the policy. This name must be unique within the set of policies for this load balancer.</p>
    pub fn policy_name(&self) -> std::option::Option<&str> {
        self.policy_name.as_deref()
    }
    /// <p>The time period, in seconds, after which the cookie should be considered stale. If this parameter is not specified, the stickiness session lasts for the duration of the browser session.</p>
    pub fn cookie_expiration_period(&self) -> std::option::Option<i64> {
        self.cookie_expiration_period
    }
}
impl LbCookieStickinessPolicy {
    /// Creates a new builder-style object to manufacture [`LbCookieStickinessPolicy`](crate::types::LbCookieStickinessPolicy).
    pub fn builder() -> crate::types::builders::LbCookieStickinessPolicyBuilder {
        crate::types::builders::LbCookieStickinessPolicyBuilder::default()
    }
}

/// A builder for [`LbCookieStickinessPolicy`](crate::types::LbCookieStickinessPolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LbCookieStickinessPolicyBuilder {
    pub(crate) policy_name: std::option::Option<std::string::String>,
    pub(crate) cookie_expiration_period: std::option::Option<i64>,
}
impl LbCookieStickinessPolicyBuilder {
    /// <p>The name of the policy. This name must be unique within the set of policies for this load balancer.</p>
    pub fn policy_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy_name = Some(input.into());
        self
    }
    /// <p>The name of the policy. This name must be unique within the set of policies for this load balancer.</p>
    pub fn set_policy_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>The time period, in seconds, after which the cookie should be considered stale. If this parameter is not specified, the stickiness session lasts for the duration of the browser session.</p>
    pub fn cookie_expiration_period(mut self, input: i64) -> Self {
        self.cookie_expiration_period = Some(input);
        self
    }
    /// <p>The time period, in seconds, after which the cookie should be considered stale. If this parameter is not specified, the stickiness session lasts for the duration of the browser session.</p>
    pub fn set_cookie_expiration_period(mut self, input: std::option::Option<i64>) -> Self {
        self.cookie_expiration_period = input;
        self
    }
    /// Consumes the builder and constructs a [`LbCookieStickinessPolicy`](crate::types::LbCookieStickinessPolicy).
    pub fn build(self) -> crate::types::LbCookieStickinessPolicy {
        crate::types::LbCookieStickinessPolicy {
            policy_name: self.policy_name,
            cookie_expiration_period: self.cookie_expiration_period,
        }
    }
}
