// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a policy attribute type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PolicyAttributeTypeDescription {
    /// <p>The name of the attribute.</p>
    #[doc(hidden)]
    pub attribute_name: std::option::Option<std::string::String>,
    /// <p>The type of the attribute. For example, <code>Boolean</code> or <code>Integer</code>.</p>
    #[doc(hidden)]
    pub attribute_type: std::option::Option<std::string::String>,
    /// <p>A description of the attribute.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The default value of the attribute, if applicable.</p>
    #[doc(hidden)]
    pub default_value: std::option::Option<std::string::String>,
    /// <p>The cardinality of the attribute.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p>ONE(1) : Single value required</p> </li>
    /// <li> <p>ZERO_OR_ONE(0..1) : Up to one value is allowed</p> </li>
    /// <li> <p>ZERO_OR_MORE(0..*) : Optional. Multiple values are allowed</p> </li>
    /// <li> <p>ONE_OR_MORE(1..*0) : Required. Multiple values are allowed</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub cardinality: std::option::Option<std::string::String>,
}
impl PolicyAttributeTypeDescription {
    /// <p>The name of the attribute.</p>
    pub fn attribute_name(&self) -> std::option::Option<&str> {
        self.attribute_name.as_deref()
    }
    /// <p>The type of the attribute. For example, <code>Boolean</code> or <code>Integer</code>.</p>
    pub fn attribute_type(&self) -> std::option::Option<&str> {
        self.attribute_type.as_deref()
    }
    /// <p>A description of the attribute.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The default value of the attribute, if applicable.</p>
    pub fn default_value(&self) -> std::option::Option<&str> {
        self.default_value.as_deref()
    }
    /// <p>The cardinality of the attribute.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p>ONE(1) : Single value required</p> </li>
    /// <li> <p>ZERO_OR_ONE(0..1) : Up to one value is allowed</p> </li>
    /// <li> <p>ZERO_OR_MORE(0..*) : Optional. Multiple values are allowed</p> </li>
    /// <li> <p>ONE_OR_MORE(1..*0) : Required. Multiple values are allowed</p> </li>
    /// </ul>
    pub fn cardinality(&self) -> std::option::Option<&str> {
        self.cardinality.as_deref()
    }
}
impl PolicyAttributeTypeDescription {
    /// Creates a new builder-style object to manufacture [`PolicyAttributeTypeDescription`](crate::types::PolicyAttributeTypeDescription).
    pub fn builder() -> crate::types::builders::PolicyAttributeTypeDescriptionBuilder {
        crate::types::builders::PolicyAttributeTypeDescriptionBuilder::default()
    }
}

/// A builder for [`PolicyAttributeTypeDescription`](crate::types::PolicyAttributeTypeDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PolicyAttributeTypeDescriptionBuilder {
    pub(crate) attribute_name: std::option::Option<std::string::String>,
    pub(crate) attribute_type: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) default_value: std::option::Option<std::string::String>,
    pub(crate) cardinality: std::option::Option<std::string::String>,
}
impl PolicyAttributeTypeDescriptionBuilder {
    /// <p>The name of the attribute.</p>
    pub fn attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.attribute_name = Some(input.into());
        self
    }
    /// <p>The name of the attribute.</p>
    pub fn set_attribute_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The type of the attribute. For example, <code>Boolean</code> or <code>Integer</code>.</p>
    pub fn attribute_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.attribute_type = Some(input.into());
        self
    }
    /// <p>The type of the attribute. For example, <code>Boolean</code> or <code>Integer</code>.</p>
    pub fn set_attribute_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attribute_type = input;
        self
    }
    /// <p>A description of the attribute.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the attribute.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The default value of the attribute, if applicable.</p>
    pub fn default_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_value = Some(input.into());
        self
    }
    /// <p>The default value of the attribute, if applicable.</p>
    pub fn set_default_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The cardinality of the attribute.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p>ONE(1) : Single value required</p> </li>
    /// <li> <p>ZERO_OR_ONE(0..1) : Up to one value is allowed</p> </li>
    /// <li> <p>ZERO_OR_MORE(0..*) : Optional. Multiple values are allowed</p> </li>
    /// <li> <p>ONE_OR_MORE(1..*0) : Required. Multiple values are allowed</p> </li>
    /// </ul>
    pub fn cardinality(mut self, input: impl Into<std::string::String>) -> Self {
        self.cardinality = Some(input.into());
        self
    }
    /// <p>The cardinality of the attribute.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p>ONE(1) : Single value required</p> </li>
    /// <li> <p>ZERO_OR_ONE(0..1) : Up to one value is allowed</p> </li>
    /// <li> <p>ZERO_OR_MORE(0..*) : Optional. Multiple values are allowed</p> </li>
    /// <li> <p>ONE_OR_MORE(1..*0) : Required. Multiple values are allowed</p> </li>
    /// </ul>
    pub fn set_cardinality(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cardinality = input;
        self
    }
    /// Consumes the builder and constructs a [`PolicyAttributeTypeDescription`](crate::types::PolicyAttributeTypeDescription).
    pub fn build(self) -> crate::types::PolicyAttributeTypeDescription {
        crate::types::PolicyAttributeTypeDescription {
            attribute_name: self.attribute_name,
            attribute_type: self.attribute_type,
            description: self.description,
            default_value: self.default_value,
            cardinality: self.cardinality,
        }
    }
}
