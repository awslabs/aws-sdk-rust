// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the state of an EC2 instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceState {
    /// <p>The ID of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The current state of the instance.</p>
    /// <p>Valid values: <code>InService</code> | <code>OutOfService</code> | <code>Unknown</code> </p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
    /// <p>Information about the cause of <code>OutOfService</code> instances. Specifically, whether the cause is Elastic Load Balancing or the instance.</p>
    /// <p>Valid values: <code>ELB</code> | <code>Instance</code> | <code>N/A</code> </p>
    #[doc(hidden)]
    pub reason_code: std::option::Option<std::string::String>,
    /// <p>A description of the instance state. This string can contain one or more of the following messages.</p>
    /// <ul>
    /// <li> <p> <code>N/A</code> </p> </li>
    /// <li> <p> <code>A transient error occurred. Please try again later.</code> </p> </li>
    /// <li> <p> <code>Instance has failed at least the UnhealthyThreshold number of health checks consecutively.</code> </p> </li>
    /// <li> <p> <code>Instance has not passed the configured HealthyThreshold number of health checks consecutively.</code> </p> </li>
    /// <li> <p> <code>Instance registration is still in progress.</code> </p> </li>
    /// <li> <p> <code>Instance is in the EC2 Availability Zone for which LoadBalancer is not configured to route traffic to.</code> </p> </li>
    /// <li> <p> <code>Instance is not currently registered with the LoadBalancer.</code> </p> </li>
    /// <li> <p> <code>Instance deregistration currently in progress.</code> </p> </li>
    /// <li> <p> <code>Disable Availability Zone is currently in progress.</code> </p> </li>
    /// <li> <p> <code>Instance is in pending state.</code> </p> </li>
    /// <li> <p> <code>Instance is in stopped state.</code> </p> </li>
    /// <li> <p> <code>Instance is in terminated state.</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl InstanceState {
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The current state of the instance.</p>
    /// <p>Valid values: <code>InService</code> | <code>OutOfService</code> | <code>Unknown</code> </p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>Information about the cause of <code>OutOfService</code> instances. Specifically, whether the cause is Elastic Load Balancing or the instance.</p>
    /// <p>Valid values: <code>ELB</code> | <code>Instance</code> | <code>N/A</code> </p>
    pub fn reason_code(&self) -> std::option::Option<&str> {
        self.reason_code.as_deref()
    }
    /// <p>A description of the instance state. This string can contain one or more of the following messages.</p>
    /// <ul>
    /// <li> <p> <code>N/A</code> </p> </li>
    /// <li> <p> <code>A transient error occurred. Please try again later.</code> </p> </li>
    /// <li> <p> <code>Instance has failed at least the UnhealthyThreshold number of health checks consecutively.</code> </p> </li>
    /// <li> <p> <code>Instance has not passed the configured HealthyThreshold number of health checks consecutively.</code> </p> </li>
    /// <li> <p> <code>Instance registration is still in progress.</code> </p> </li>
    /// <li> <p> <code>Instance is in the EC2 Availability Zone for which LoadBalancer is not configured to route traffic to.</code> </p> </li>
    /// <li> <p> <code>Instance is not currently registered with the LoadBalancer.</code> </p> </li>
    /// <li> <p> <code>Instance deregistration currently in progress.</code> </p> </li>
    /// <li> <p> <code>Disable Availability Zone is currently in progress.</code> </p> </li>
    /// <li> <p> <code>Instance is in pending state.</code> </p> </li>
    /// <li> <p> <code>Instance is in stopped state.</code> </p> </li>
    /// <li> <p> <code>Instance is in terminated state.</code> </p> </li>
    /// </ul>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl InstanceState {
    /// Creates a new builder-style object to manufacture [`InstanceState`](crate::types::InstanceState).
    pub fn builder() -> crate::types::builders::InstanceStateBuilder {
        crate::types::builders::InstanceStateBuilder::default()
    }
}

/// A builder for [`InstanceState`](crate::types::InstanceState).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceStateBuilder {
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<std::string::String>,
    pub(crate) reason_code: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl InstanceStateBuilder {
    /// <p>The ID of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The current state of the instance.</p>
    /// <p>Valid values: <code>InService</code> | <code>OutOfService</code> | <code>Unknown</code> </p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The current state of the instance.</p>
    /// <p>Valid values: <code>InService</code> | <code>OutOfService</code> | <code>Unknown</code> </p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>Information about the cause of <code>OutOfService</code> instances. Specifically, whether the cause is Elastic Load Balancing or the instance.</p>
    /// <p>Valid values: <code>ELB</code> | <code>Instance</code> | <code>N/A</code> </p>
    pub fn reason_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason_code = Some(input.into());
        self
    }
    /// <p>Information about the cause of <code>OutOfService</code> instances. Specifically, whether the cause is Elastic Load Balancing or the instance.</p>
    /// <p>Valid values: <code>ELB</code> | <code>Instance</code> | <code>N/A</code> </p>
    pub fn set_reason_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reason_code = input;
        self
    }
    /// <p>A description of the instance state. This string can contain one or more of the following messages.</p>
    /// <ul>
    /// <li> <p> <code>N/A</code> </p> </li>
    /// <li> <p> <code>A transient error occurred. Please try again later.</code> </p> </li>
    /// <li> <p> <code>Instance has failed at least the UnhealthyThreshold number of health checks consecutively.</code> </p> </li>
    /// <li> <p> <code>Instance has not passed the configured HealthyThreshold number of health checks consecutively.</code> </p> </li>
    /// <li> <p> <code>Instance registration is still in progress.</code> </p> </li>
    /// <li> <p> <code>Instance is in the EC2 Availability Zone for which LoadBalancer is not configured to route traffic to.</code> </p> </li>
    /// <li> <p> <code>Instance is not currently registered with the LoadBalancer.</code> </p> </li>
    /// <li> <p> <code>Instance deregistration currently in progress.</code> </p> </li>
    /// <li> <p> <code>Disable Availability Zone is currently in progress.</code> </p> </li>
    /// <li> <p> <code>Instance is in pending state.</code> </p> </li>
    /// <li> <p> <code>Instance is in stopped state.</code> </p> </li>
    /// <li> <p> <code>Instance is in terminated state.</code> </p> </li>
    /// </ul>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the instance state. This string can contain one or more of the following messages.</p>
    /// <ul>
    /// <li> <p> <code>N/A</code> </p> </li>
    /// <li> <p> <code>A transient error occurred. Please try again later.</code> </p> </li>
    /// <li> <p> <code>Instance has failed at least the UnhealthyThreshold number of health checks consecutively.</code> </p> </li>
    /// <li> <p> <code>Instance has not passed the configured HealthyThreshold number of health checks consecutively.</code> </p> </li>
    /// <li> <p> <code>Instance registration is still in progress.</code> </p> </li>
    /// <li> <p> <code>Instance is in the EC2 Availability Zone for which LoadBalancer is not configured to route traffic to.</code> </p> </li>
    /// <li> <p> <code>Instance is not currently registered with the LoadBalancer.</code> </p> </li>
    /// <li> <p> <code>Instance deregistration currently in progress.</code> </p> </li>
    /// <li> <p> <code>Disable Availability Zone is currently in progress.</code> </p> </li>
    /// <li> <p> <code>Instance is in pending state.</code> </p> </li>
    /// <li> <p> <code>Instance is in stopped state.</code> </p> </li>
    /// <li> <p> <code>Instance is in terminated state.</code> </p> </li>
    /// </ul>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceState`](crate::types::InstanceState).
    pub fn build(self) -> crate::types::InstanceState {
        crate::types::InstanceState {
            instance_id: self.instance_id,
            state: self.state,
            reason_code: self.reason_code,
            description: self.description,
        }
    }
}
