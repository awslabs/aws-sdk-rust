// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The policies enabled for a listener.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListenerDescription {
    /// <p>The listener.</p>
    pub listener: ::std::option::Option<crate::types::Listener>,
    /// <p>The policies. If there are no policies enabled, the list is empty.</p>
    pub policy_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListenerDescription {
    /// <p>The listener.</p>
    pub fn listener(&self) -> ::std::option::Option<&crate::types::Listener> {
        self.listener.as_ref()
    }
    /// <p>The policies. If there are no policies enabled, the list is empty.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.policy_names.is_none()`.
    pub fn policy_names(&self) -> &[::std::string::String] {
        self.policy_names.as_deref().unwrap_or_default()
    }
}
impl ListenerDescription {
    /// Creates a new builder-style object to manufacture [`ListenerDescription`](crate::types::ListenerDescription).
    pub fn builder() -> crate::types::builders::ListenerDescriptionBuilder {
        crate::types::builders::ListenerDescriptionBuilder::default()
    }
}

/// A builder for [`ListenerDescription`](crate::types::ListenerDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListenerDescriptionBuilder {
    pub(crate) listener: ::std::option::Option<crate::types::Listener>,
    pub(crate) policy_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListenerDescriptionBuilder {
    /// <p>The listener.</p>
    pub fn listener(mut self, input: crate::types::Listener) -> Self {
        self.listener = ::std::option::Option::Some(input);
        self
    }
    /// <p>The listener.</p>
    pub fn set_listener(mut self, input: ::std::option::Option<crate::types::Listener>) -> Self {
        self.listener = input;
        self
    }
    /// <p>The listener.</p>
    pub fn get_listener(&self) -> &::std::option::Option<crate::types::Listener> {
        &self.listener
    }
    /// Appends an item to `policy_names`.
    ///
    /// To override the contents of this collection use [`set_policy_names`](Self::set_policy_names).
    ///
    /// <p>The policies. If there are no policies enabled, the list is empty.</p>
    pub fn policy_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.policy_names.unwrap_or_default();
        v.push(input.into());
        self.policy_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The policies. If there are no policies enabled, the list is empty.</p>
    pub fn set_policy_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.policy_names = input;
        self
    }
    /// <p>The policies. If there are no policies enabled, the list is empty.</p>
    pub fn get_policy_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.policy_names
    }
    /// Consumes the builder and constructs a [`ListenerDescription`](crate::types::ListenerDescription).
    pub fn build(self) -> crate::types::ListenerDescription {
        crate::types::ListenerDescription {
            listener: self.listener,
            policy_names: self.policy_names,
        }
    }
}
