// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a policy for application-controlled session stickiness.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AppCookieStickinessPolicy {
    /// <p>The mnemonic name for the policy being created. The name must be unique within a set of policies for this load balancer.</p>
    #[doc(hidden)]
    pub policy_name: std::option::Option<std::string::String>,
    /// <p>The name of the application cookie used for stickiness.</p>
    #[doc(hidden)]
    pub cookie_name: std::option::Option<std::string::String>,
}
impl AppCookieStickinessPolicy {
    /// <p>The mnemonic name for the policy being created. The name must be unique within a set of policies for this load balancer.</p>
    pub fn policy_name(&self) -> std::option::Option<&str> {
        self.policy_name.as_deref()
    }
    /// <p>The name of the application cookie used for stickiness.</p>
    pub fn cookie_name(&self) -> std::option::Option<&str> {
        self.cookie_name.as_deref()
    }
}
impl AppCookieStickinessPolicy {
    /// Creates a new builder-style object to manufacture [`AppCookieStickinessPolicy`](crate::types::AppCookieStickinessPolicy).
    pub fn builder() -> crate::types::builders::AppCookieStickinessPolicyBuilder {
        crate::types::builders::AppCookieStickinessPolicyBuilder::default()
    }
}

/// A builder for [`AppCookieStickinessPolicy`](crate::types::AppCookieStickinessPolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AppCookieStickinessPolicyBuilder {
    pub(crate) policy_name: std::option::Option<std::string::String>,
    pub(crate) cookie_name: std::option::Option<std::string::String>,
}
impl AppCookieStickinessPolicyBuilder {
    /// <p>The mnemonic name for the policy being created. The name must be unique within a set of policies for this load balancer.</p>
    pub fn policy_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy_name = Some(input.into());
        self
    }
    /// <p>The mnemonic name for the policy being created. The name must be unique within a set of policies for this load balancer.</p>
    pub fn set_policy_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>The name of the application cookie used for stickiness.</p>
    pub fn cookie_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.cookie_name = Some(input.into());
        self
    }
    /// <p>The name of the application cookie used for stickiness.</p>
    pub fn set_cookie_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cookie_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AppCookieStickinessPolicy`](crate::types::AppCookieStickinessPolicy).
    pub fn build(self) -> crate::types::AppCookieStickinessPolicy {
        crate::types::AppCookieStickinessPolicy {
            policy_name: self.policy_name,
            cookie_name: self.cookie_name,
        }
    }
}
