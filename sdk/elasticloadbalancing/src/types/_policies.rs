// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The policies for a load balancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Policies {
    /// <p>The stickiness policies created using <code>CreateAppCookieStickinessPolicy</code>.</p>
    #[doc(hidden)]
    pub app_cookie_stickiness_policies:
        std::option::Option<std::vec::Vec<crate::types::AppCookieStickinessPolicy>>,
    /// <p>The stickiness policies created using <code>CreateLBCookieStickinessPolicy</code>.</p>
    #[doc(hidden)]
    pub lb_cookie_stickiness_policies:
        std::option::Option<std::vec::Vec<crate::types::LbCookieStickinessPolicy>>,
    /// <p>The policies other than the stickiness policies.</p>
    #[doc(hidden)]
    pub other_policies: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl Policies {
    /// <p>The stickiness policies created using <code>CreateAppCookieStickinessPolicy</code>.</p>
    pub fn app_cookie_stickiness_policies(
        &self,
    ) -> std::option::Option<&[crate::types::AppCookieStickinessPolicy]> {
        self.app_cookie_stickiness_policies.as_deref()
    }
    /// <p>The stickiness policies created using <code>CreateLBCookieStickinessPolicy</code>.</p>
    pub fn lb_cookie_stickiness_policies(
        &self,
    ) -> std::option::Option<&[crate::types::LbCookieStickinessPolicy]> {
        self.lb_cookie_stickiness_policies.as_deref()
    }
    /// <p>The policies other than the stickiness policies.</p>
    pub fn other_policies(&self) -> std::option::Option<&[std::string::String]> {
        self.other_policies.as_deref()
    }
}
impl Policies {
    /// Creates a new builder-style object to manufacture [`Policies`](crate::types::Policies).
    pub fn builder() -> crate::types::builders::PoliciesBuilder {
        crate::types::builders::PoliciesBuilder::default()
    }
}

/// A builder for [`Policies`](crate::types::Policies).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PoliciesBuilder {
    pub(crate) app_cookie_stickiness_policies:
        std::option::Option<std::vec::Vec<crate::types::AppCookieStickinessPolicy>>,
    pub(crate) lb_cookie_stickiness_policies:
        std::option::Option<std::vec::Vec<crate::types::LbCookieStickinessPolicy>>,
    pub(crate) other_policies: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PoliciesBuilder {
    /// Appends an item to `app_cookie_stickiness_policies`.
    ///
    /// To override the contents of this collection use [`set_app_cookie_stickiness_policies`](Self::set_app_cookie_stickiness_policies).
    ///
    /// <p>The stickiness policies created using <code>CreateAppCookieStickinessPolicy</code>.</p>
    pub fn app_cookie_stickiness_policies(
        mut self,
        input: crate::types::AppCookieStickinessPolicy,
    ) -> Self {
        let mut v = self.app_cookie_stickiness_policies.unwrap_or_default();
        v.push(input);
        self.app_cookie_stickiness_policies = Some(v);
        self
    }
    /// <p>The stickiness policies created using <code>CreateAppCookieStickinessPolicy</code>.</p>
    pub fn set_app_cookie_stickiness_policies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AppCookieStickinessPolicy>>,
    ) -> Self {
        self.app_cookie_stickiness_policies = input;
        self
    }
    /// Appends an item to `lb_cookie_stickiness_policies`.
    ///
    /// To override the contents of this collection use [`set_lb_cookie_stickiness_policies`](Self::set_lb_cookie_stickiness_policies).
    ///
    /// <p>The stickiness policies created using <code>CreateLBCookieStickinessPolicy</code>.</p>
    pub fn lb_cookie_stickiness_policies(
        mut self,
        input: crate::types::LbCookieStickinessPolicy,
    ) -> Self {
        let mut v = self.lb_cookie_stickiness_policies.unwrap_or_default();
        v.push(input);
        self.lb_cookie_stickiness_policies = Some(v);
        self
    }
    /// <p>The stickiness policies created using <code>CreateLBCookieStickinessPolicy</code>.</p>
    pub fn set_lb_cookie_stickiness_policies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LbCookieStickinessPolicy>>,
    ) -> Self {
        self.lb_cookie_stickiness_policies = input;
        self
    }
    /// Appends an item to `other_policies`.
    ///
    /// To override the contents of this collection use [`set_other_policies`](Self::set_other_policies).
    ///
    /// <p>The policies other than the stickiness policies.</p>
    pub fn other_policies(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.other_policies.unwrap_or_default();
        v.push(input.into());
        self.other_policies = Some(v);
        self
    }
    /// <p>The policies other than the stickiness policies.</p>
    pub fn set_other_policies(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.other_policies = input;
        self
    }
    /// Consumes the builder and constructs a [`Policies`](crate::types::Policies).
    pub fn build(self) -> crate::types::Policies {
        crate::types::Policies {
            app_cookie_stickiness_policies: self.app_cookie_stickiness_policies,
            lb_cookie_stickiness_policies: self.lb_cookie_stickiness_policies,
            other_policies: self.other_policies,
        }
    }
}
