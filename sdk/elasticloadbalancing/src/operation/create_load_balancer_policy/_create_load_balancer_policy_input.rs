// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for CreateLoadBalancerPolicy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateLoadBalancerPolicyInput {
    /// <p>The name of the load balancer.</p>
    pub load_balancer_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer.</p>
    pub policy_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the base policy type. To get the list of policy types, use <code>DescribeLoadBalancerPolicyTypes</code>.</p>
    pub policy_type_name: ::std::option::Option<::std::string::String>,
    /// <p>The policy attributes.</p>
    pub policy_attributes: ::std::option::Option<::std::vec::Vec<crate::types::PolicyAttribute>>,
}
impl CreateLoadBalancerPolicyInput {
    /// <p>The name of the load balancer.</p>
    pub fn load_balancer_name(&self) -> ::std::option::Option<&str> {
        self.load_balancer_name.as_deref()
    }
    /// <p>The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer.</p>
    pub fn policy_name(&self) -> ::std::option::Option<&str> {
        self.policy_name.as_deref()
    }
    /// <p>The name of the base policy type. To get the list of policy types, use <code>DescribeLoadBalancerPolicyTypes</code>.</p>
    pub fn policy_type_name(&self) -> ::std::option::Option<&str> {
        self.policy_type_name.as_deref()
    }
    /// <p>The policy attributes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.policy_attributes.is_none()`.
    pub fn policy_attributes(&self) -> &[crate::types::PolicyAttribute] {
        self.policy_attributes.as_deref().unwrap_or_default()
    }
}
impl CreateLoadBalancerPolicyInput {
    /// Creates a new builder-style object to manufacture [`CreateLoadBalancerPolicyInput`](crate::operation::create_load_balancer_policy::CreateLoadBalancerPolicyInput).
    pub fn builder() -> crate::operation::create_load_balancer_policy::builders::CreateLoadBalancerPolicyInputBuilder {
        crate::operation::create_load_balancer_policy::builders::CreateLoadBalancerPolicyInputBuilder::default()
    }
}

/// A builder for [`CreateLoadBalancerPolicyInput`](crate::operation::create_load_balancer_policy::CreateLoadBalancerPolicyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateLoadBalancerPolicyInputBuilder {
    pub(crate) load_balancer_name: ::std::option::Option<::std::string::String>,
    pub(crate) policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) policy_type_name: ::std::option::Option<::std::string::String>,
    pub(crate) policy_attributes: ::std::option::Option<::std::vec::Vec<crate::types::PolicyAttribute>>,
}
impl CreateLoadBalancerPolicyInputBuilder {
    /// <p>The name of the load balancer.</p>
    /// This field is required.
    pub fn load_balancer_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.load_balancer_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the load balancer.</p>
    pub fn set_load_balancer_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.load_balancer_name = input;
        self
    }
    /// <p>The name of the load balancer.</p>
    pub fn get_load_balancer_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.load_balancer_name
    }
    /// <p>The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer.</p>
    /// This field is required.
    pub fn policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer.</p>
    pub fn set_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer.</p>
    pub fn get_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_name
    }
    /// <p>The name of the base policy type. To get the list of policy types, use <code>DescribeLoadBalancerPolicyTypes</code>.</p>
    /// This field is required.
    pub fn policy_type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the base policy type. To get the list of policy types, use <code>DescribeLoadBalancerPolicyTypes</code>.</p>
    pub fn set_policy_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_type_name = input;
        self
    }
    /// <p>The name of the base policy type. To get the list of policy types, use <code>DescribeLoadBalancerPolicyTypes</code>.</p>
    pub fn get_policy_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_type_name
    }
    /// Appends an item to `policy_attributes`.
    ///
    /// To override the contents of this collection use [`set_policy_attributes`](Self::set_policy_attributes).
    ///
    /// <p>The policy attributes.</p>
    pub fn policy_attributes(mut self, input: crate::types::PolicyAttribute) -> Self {
        let mut v = self.policy_attributes.unwrap_or_default();
        v.push(input);
        self.policy_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The policy attributes.</p>
    pub fn set_policy_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PolicyAttribute>>) -> Self {
        self.policy_attributes = input;
        self
    }
    /// <p>The policy attributes.</p>
    pub fn get_policy_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PolicyAttribute>> {
        &self.policy_attributes
    }
    /// Consumes the builder and constructs a [`CreateLoadBalancerPolicyInput`](crate::operation::create_load_balancer_policy::CreateLoadBalancerPolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_load_balancer_policy::CreateLoadBalancerPolicyInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_load_balancer_policy::CreateLoadBalancerPolicyInput {
            load_balancer_name: self.load_balancer_name,
            policy_name: self.policy_name,
            policy_type_name: self.policy_type_name,
            policy_attributes: self.policy_attributes,
        })
    }
}
