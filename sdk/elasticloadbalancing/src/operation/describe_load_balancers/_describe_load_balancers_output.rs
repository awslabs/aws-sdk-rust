// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for DescribeLoadBalancers.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeLoadBalancersOutput {
    /// <p>Information about the load balancers.</p>
    pub load_balancer_descriptions: ::std::option::Option<::std::vec::Vec<crate::types::LoadBalancerDescription>>,
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    pub next_marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLoadBalancersOutput {
    /// <p>Information about the load balancers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.load_balancer_descriptions.is_none()`.
    pub fn load_balancer_descriptions(&self) -> &[crate::types::LoadBalancerDescription] {
        self.load_balancer_descriptions.as_deref().unwrap_or_default()
    }
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    pub fn next_marker(&self) -> ::std::option::Option<&str> {
        self.next_marker.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeLoadBalancersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeLoadBalancersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLoadBalancersOutput`](crate::operation::describe_load_balancers::DescribeLoadBalancersOutput).
    pub fn builder() -> crate::operation::describe_load_balancers::builders::DescribeLoadBalancersOutputBuilder {
        crate::operation::describe_load_balancers::builders::DescribeLoadBalancersOutputBuilder::default()
    }
}

/// A builder for [`DescribeLoadBalancersOutput`](crate::operation::describe_load_balancers::DescribeLoadBalancersOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeLoadBalancersOutputBuilder {
    pub(crate) load_balancer_descriptions: ::std::option::Option<::std::vec::Vec<crate::types::LoadBalancerDescription>>,
    pub(crate) next_marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLoadBalancersOutputBuilder {
    /// Appends an item to `load_balancer_descriptions`.
    ///
    /// To override the contents of this collection use [`set_load_balancer_descriptions`](Self::set_load_balancer_descriptions).
    ///
    /// <p>Information about the load balancers.</p>
    pub fn load_balancer_descriptions(mut self, input: crate::types::LoadBalancerDescription) -> Self {
        let mut v = self.load_balancer_descriptions.unwrap_or_default();
        v.push(input);
        self.load_balancer_descriptions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the load balancers.</p>
    pub fn set_load_balancer_descriptions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LoadBalancerDescription>>) -> Self {
        self.load_balancer_descriptions = input;
        self
    }
    /// <p>Information about the load balancers.</p>
    pub fn get_load_balancer_descriptions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LoadBalancerDescription>> {
        &self.load_balancer_descriptions
    }
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    pub fn next_marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    pub fn set_next_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_marker = input;
        self
    }
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    pub fn get_next_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_marker
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeLoadBalancersOutput`](crate::operation::describe_load_balancers::DescribeLoadBalancersOutput).
    pub fn build(self) -> crate::operation::describe_load_balancers::DescribeLoadBalancersOutput {
        crate::operation::describe_load_balancers::DescribeLoadBalancersOutput {
            load_balancer_descriptions: self.load_balancer_descriptions,
            next_marker: self.next_marker,
            _request_id: self._request_id,
        }
    }
}
