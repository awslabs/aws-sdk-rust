// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_instances_with_load_balancer::_register_instances_with_load_balancer_output::RegisterInstancesWithLoadBalancerOutputBuilder;

pub use crate::operation::register_instances_with_load_balancer::_register_instances_with_load_balancer_input::RegisterInstancesWithLoadBalancerInputBuilder;

impl crate::operation::register_instances_with_load_balancer::builders::RegisterInstancesWithLoadBalancerInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.register_instances_with_load_balancer();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RegisterInstancesWithLoadBalancer`.
///
/// <p>Adds the specified instances to the specified load balancer.</p>
/// <p>The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.</p>
/// <p>Note that <code>RegisterInstanceWithLoadBalancer</code> completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use <code>DescribeLoadBalancers</code> or <code>DescribeInstanceHealth</code>.</p>
/// <p>After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the <code>OutOfService</code> state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the <code>InService</code> state.</p>
/// <p>To deregister instances from a load balancer, use <code>DeregisterInstancesFromLoadBalancer</code>.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html">Register or De-Register EC2 Instances</a> in the <i>Classic Load Balancers Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RegisterInstancesWithLoadBalancerFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::register_instances_with_load_balancer::builders::RegisterInstancesWithLoadBalancerInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerOutput,
        crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerError,
    > for RegisterInstancesWithLoadBalancerFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerOutput,
            crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RegisterInstancesWithLoadBalancerFluentBuilder {
    /// Creates a new `RegisterInstancesWithLoadBalancer`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RegisterInstancesWithLoadBalancer as a reference.
    pub fn as_input(&self) -> &crate::operation::register_instances_with_load_balancer::builders::RegisterInstancesWithLoadBalancerInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancer::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancer::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerOutput,
        crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the load balancer.</p>
    pub fn load_balancer_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.load_balancer_name(input.into());
        self
    }
    /// <p>The name of the load balancer.</p>
    pub fn set_load_balancer_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_load_balancer_name(input);
        self
    }
    /// <p>The name of the load balancer.</p>
    pub fn get_load_balancer_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_load_balancer_name()
    }
    ///
    /// Appends an item to `Instances`.
    ///
    /// To override the contents of this collection use [`set_instances`](Self::set_instances).
    ///
    /// <p>The IDs of the instances.</p>
    pub fn instances(mut self, input: crate::types::Instance) -> Self {
        self.inner = self.inner.instances(input);
        self
    }
    /// <p>The IDs of the instances.</p>
    pub fn set_instances(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Instance>>) -> Self {
        self.inner = self.inner.set_instances(input);
        self
    }
    /// <p>The IDs of the instances.</p>
    pub fn get_instances(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Instance>> {
        self.inner.get_instances()
    }
}
