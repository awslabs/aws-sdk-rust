// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for RemoveTags.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RemoveTagsInput {
    /// <p>The name of the load balancer. You can specify a maximum of one load balancer name.</p>
    pub load_balancer_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of tag keys to remove.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::TagKeyOnly>>,
}
impl RemoveTagsInput {
    /// <p>The name of the load balancer. You can specify a maximum of one load balancer name.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.load_balancer_names.is_none()`.
    pub fn load_balancer_names(&self) -> &[::std::string::String] {
        self.load_balancer_names.as_deref().unwrap_or_default()
    }
    /// <p>The list of tag keys to remove.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::TagKeyOnly] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl RemoveTagsInput {
    /// Creates a new builder-style object to manufacture [`RemoveTagsInput`](crate::operation::remove_tags::RemoveTagsInput).
    pub fn builder() -> crate::operation::remove_tags::builders::RemoveTagsInputBuilder {
        crate::operation::remove_tags::builders::RemoveTagsInputBuilder::default()
    }
}

/// A builder for [`RemoveTagsInput`](crate::operation::remove_tags::RemoveTagsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RemoveTagsInputBuilder {
    pub(crate) load_balancer_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::TagKeyOnly>>,
}
impl RemoveTagsInputBuilder {
    /// Appends an item to `load_balancer_names`.
    ///
    /// To override the contents of this collection use [`set_load_balancer_names`](Self::set_load_balancer_names).
    ///
    /// <p>The name of the load balancer. You can specify a maximum of one load balancer name.</p>
    pub fn load_balancer_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.load_balancer_names.unwrap_or_default();
        v.push(input.into());
        self.load_balancer_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the load balancer. You can specify a maximum of one load balancer name.</p>
    pub fn set_load_balancer_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.load_balancer_names = input;
        self
    }
    /// <p>The name of the load balancer. You can specify a maximum of one load balancer name.</p>
    pub fn get_load_balancer_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.load_balancer_names
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tag keys to remove.</p>
    pub fn tags(mut self, input: crate::types::TagKeyOnly) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of tag keys to remove.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagKeyOnly>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of tag keys to remove.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagKeyOnly>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`RemoveTagsInput`](crate::operation::remove_tags::RemoveTagsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::remove_tags::RemoveTagsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::remove_tags::RemoveTagsInput {
            load_balancer_names: self.load_balancer_names,
            tags: self.tags,
        })
    }
}
