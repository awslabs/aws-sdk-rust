// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for SetLoadBalancePoliciesOfListener.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SetLoadBalancerPoliciesOfListenerInput {
    /// <p>The name of the load balancer.</p>
    pub load_balancer_name: ::std::option::Option<::std::string::String>,
    /// <p>The external port of the load balancer.</p>
    pub load_balancer_port: ::std::option::Option<i32>,
    /// <p>The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled.</p>
    pub policy_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SetLoadBalancerPoliciesOfListenerInput {
    /// <p>The name of the load balancer.</p>
    pub fn load_balancer_name(&self) -> ::std::option::Option<&str> {
        self.load_balancer_name.as_deref()
    }
    /// <p>The external port of the load balancer.</p>
    pub fn load_balancer_port(&self) -> ::std::option::Option<i32> {
        self.load_balancer_port
    }
    /// <p>The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.policy_names.is_none()`.
    pub fn policy_names(&self) -> &[::std::string::String] {
        self.policy_names.as_deref().unwrap_or_default()
    }
}
impl SetLoadBalancerPoliciesOfListenerInput {
    /// Creates a new builder-style object to manufacture [`SetLoadBalancerPoliciesOfListenerInput`](crate::operation::set_load_balancer_policies_of_listener::SetLoadBalancerPoliciesOfListenerInput).
    pub fn builder() -> crate::operation::set_load_balancer_policies_of_listener::builders::SetLoadBalancerPoliciesOfListenerInputBuilder {
        crate::operation::set_load_balancer_policies_of_listener::builders::SetLoadBalancerPoliciesOfListenerInputBuilder::default()
    }
}

/// A builder for [`SetLoadBalancerPoliciesOfListenerInput`](crate::operation::set_load_balancer_policies_of_listener::SetLoadBalancerPoliciesOfListenerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SetLoadBalancerPoliciesOfListenerInputBuilder {
    pub(crate) load_balancer_name: ::std::option::Option<::std::string::String>,
    pub(crate) load_balancer_port: ::std::option::Option<i32>,
    pub(crate) policy_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SetLoadBalancerPoliciesOfListenerInputBuilder {
    /// <p>The name of the load balancer.</p>
    /// This field is required.
    pub fn load_balancer_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.load_balancer_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the load balancer.</p>
    pub fn set_load_balancer_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.load_balancer_name = input;
        self
    }
    /// <p>The name of the load balancer.</p>
    pub fn get_load_balancer_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.load_balancer_name
    }
    /// <p>The external port of the load balancer.</p>
    /// This field is required.
    pub fn load_balancer_port(mut self, input: i32) -> Self {
        self.load_balancer_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The external port of the load balancer.</p>
    pub fn set_load_balancer_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.load_balancer_port = input;
        self
    }
    /// <p>The external port of the load balancer.</p>
    pub fn get_load_balancer_port(&self) -> &::std::option::Option<i32> {
        &self.load_balancer_port
    }
    /// Appends an item to `policy_names`.
    ///
    /// To override the contents of this collection use [`set_policy_names`](Self::set_policy_names).
    ///
    /// <p>The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled.</p>
    pub fn policy_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.policy_names.unwrap_or_default();
        v.push(input.into());
        self.policy_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled.</p>
    pub fn set_policy_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.policy_names = input;
        self
    }
    /// <p>The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled.</p>
    pub fn get_policy_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.policy_names
    }
    /// Consumes the builder and constructs a [`SetLoadBalancerPoliciesOfListenerInput`](crate::operation::set_load_balancer_policies_of_listener::SetLoadBalancerPoliciesOfListenerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::set_load_balancer_policies_of_listener::SetLoadBalancerPoliciesOfListenerInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::set_load_balancer_policies_of_listener::SetLoadBalancerPoliciesOfListenerInput {
                load_balancer_name: self.load_balancer_name,
                load_balancer_port: self.load_balancer_port,
                policy_names: self.policy_names,
            },
        )
    }
}
