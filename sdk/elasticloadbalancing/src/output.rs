// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Contains the output of SetLoadBalancePoliciesOfListener.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetLoadBalancerPoliciesOfListenerOutput {}
impl std::fmt::Debug for SetLoadBalancerPoliciesOfListenerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetLoadBalancerPoliciesOfListenerOutput");
        formatter.finish()
    }
}
/// See [`SetLoadBalancerPoliciesOfListenerOutput`](crate::output::SetLoadBalancerPoliciesOfListenerOutput)
pub mod set_load_balancer_policies_of_listener_output {
    /// A builder for [`SetLoadBalancerPoliciesOfListenerOutput`](crate::output::SetLoadBalancerPoliciesOfListenerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SetLoadBalancerPoliciesOfListenerOutput`](crate::output::SetLoadBalancerPoliciesOfListenerOutput)
        pub fn build(self) -> crate::output::SetLoadBalancerPoliciesOfListenerOutput {
            crate::output::SetLoadBalancerPoliciesOfListenerOutput {}
        }
    }
}
impl SetLoadBalancerPoliciesOfListenerOutput {
    /// Creates a new builder-style object to manufacture [`SetLoadBalancerPoliciesOfListenerOutput`](crate::output::SetLoadBalancerPoliciesOfListenerOutput)
    pub fn builder() -> crate::output::set_load_balancer_policies_of_listener_output::Builder {
        crate::output::set_load_balancer_policies_of_listener_output::Builder::default()
    }
}

/// <p>Contains the output of SetLoadBalancerPoliciesForBackendServer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetLoadBalancerPoliciesForBackendServerOutput {}
impl std::fmt::Debug for SetLoadBalancerPoliciesForBackendServerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetLoadBalancerPoliciesForBackendServerOutput");
        formatter.finish()
    }
}
/// See [`SetLoadBalancerPoliciesForBackendServerOutput`](crate::output::SetLoadBalancerPoliciesForBackendServerOutput)
pub mod set_load_balancer_policies_for_backend_server_output {
    /// A builder for [`SetLoadBalancerPoliciesForBackendServerOutput`](crate::output::SetLoadBalancerPoliciesForBackendServerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SetLoadBalancerPoliciesForBackendServerOutput`](crate::output::SetLoadBalancerPoliciesForBackendServerOutput)
        pub fn build(self) -> crate::output::SetLoadBalancerPoliciesForBackendServerOutput {
            crate::output::SetLoadBalancerPoliciesForBackendServerOutput {}
        }
    }
}
impl SetLoadBalancerPoliciesForBackendServerOutput {
    /// Creates a new builder-style object to manufacture [`SetLoadBalancerPoliciesForBackendServerOutput`](crate::output::SetLoadBalancerPoliciesForBackendServerOutput)
    pub fn builder() -> crate::output::set_load_balancer_policies_for_backend_server_output::Builder
    {
        crate::output::set_load_balancer_policies_for_backend_server_output::Builder::default()
    }
}

/// <p>Contains the output of SetLoadBalancerListenerSSLCertificate.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetLoadBalancerListenerSslCertificateOutput {}
impl std::fmt::Debug for SetLoadBalancerListenerSslCertificateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetLoadBalancerListenerSslCertificateOutput");
        formatter.finish()
    }
}
/// See [`SetLoadBalancerListenerSslCertificateOutput`](crate::output::SetLoadBalancerListenerSslCertificateOutput)
pub mod set_load_balancer_listener_ssl_certificate_output {
    /// A builder for [`SetLoadBalancerListenerSslCertificateOutput`](crate::output::SetLoadBalancerListenerSslCertificateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SetLoadBalancerListenerSslCertificateOutput`](crate::output::SetLoadBalancerListenerSslCertificateOutput)
        pub fn build(self) -> crate::output::SetLoadBalancerListenerSslCertificateOutput {
            crate::output::SetLoadBalancerListenerSslCertificateOutput {}
        }
    }
}
impl SetLoadBalancerListenerSslCertificateOutput {
    /// Creates a new builder-style object to manufacture [`SetLoadBalancerListenerSslCertificateOutput`](crate::output::SetLoadBalancerListenerSslCertificateOutput)
    pub fn builder() -> crate::output::set_load_balancer_listener_ssl_certificate_output::Builder {
        crate::output::set_load_balancer_listener_ssl_certificate_output::Builder::default()
    }
}

/// <p>Contains the output of RemoveTags.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveTagsOutput {}
impl std::fmt::Debug for RemoveTagsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveTagsOutput");
        formatter.finish()
    }
}
/// See [`RemoveTagsOutput`](crate::output::RemoveTagsOutput)
pub mod remove_tags_output {
    /// A builder for [`RemoveTagsOutput`](crate::output::RemoveTagsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RemoveTagsOutput`](crate::output::RemoveTagsOutput)
        pub fn build(self) -> crate::output::RemoveTagsOutput {
            crate::output::RemoveTagsOutput {}
        }
    }
}
impl RemoveTagsOutput {
    /// Creates a new builder-style object to manufacture [`RemoveTagsOutput`](crate::output::RemoveTagsOutput)
    pub fn builder() -> crate::output::remove_tags_output::Builder {
        crate::output::remove_tags_output::Builder::default()
    }
}

/// <p>Contains the output of RegisterInstancesWithLoadBalancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterInstancesWithLoadBalancerOutput {
    /// <p>The updated list of instances for the load balancer.</p>
    pub instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
}
impl RegisterInstancesWithLoadBalancerOutput {
    /// <p>The updated list of instances for the load balancer.</p>
    pub fn instances(&self) -> std::option::Option<&[crate::model::Instance]> {
        self.instances.as_deref()
    }
}
impl std::fmt::Debug for RegisterInstancesWithLoadBalancerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterInstancesWithLoadBalancerOutput");
        formatter.field("instances", &self.instances);
        formatter.finish()
    }
}
/// See [`RegisterInstancesWithLoadBalancerOutput`](crate::output::RegisterInstancesWithLoadBalancerOutput)
pub mod register_instances_with_load_balancer_output {
    /// A builder for [`RegisterInstancesWithLoadBalancerOutput`](crate::output::RegisterInstancesWithLoadBalancerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
    }
    impl Builder {
        /// Appends an item to `instances`.
        ///
        /// To override the contents of this collection use [`set_instances`](Self::set_instances).
        ///
        /// <p>The updated list of instances for the load balancer.</p>
        pub fn instances(mut self, input: crate::model::Instance) -> Self {
            let mut v = self.instances.unwrap_or_default();
            v.push(input);
            self.instances = Some(v);
            self
        }
        /// <p>The updated list of instances for the load balancer.</p>
        pub fn set_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Instance>>,
        ) -> Self {
            self.instances = input;
            self
        }
        /// Consumes the builder and constructs a [`RegisterInstancesWithLoadBalancerOutput`](crate::output::RegisterInstancesWithLoadBalancerOutput)
        pub fn build(self) -> crate::output::RegisterInstancesWithLoadBalancerOutput {
            crate::output::RegisterInstancesWithLoadBalancerOutput {
                instances: self.instances,
            }
        }
    }
}
impl RegisterInstancesWithLoadBalancerOutput {
    /// Creates a new builder-style object to manufacture [`RegisterInstancesWithLoadBalancerOutput`](crate::output::RegisterInstancesWithLoadBalancerOutput)
    pub fn builder() -> crate::output::register_instances_with_load_balancer_output::Builder {
        crate::output::register_instances_with_load_balancer_output::Builder::default()
    }
}

/// <p>Contains the output of ModifyLoadBalancerAttributes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyLoadBalancerAttributesOutput {
    /// <p>The name of the load balancer.</p>
    pub load_balancer_name: std::option::Option<std::string::String>,
    /// <p>Information about the load balancer attributes.</p>
    pub load_balancer_attributes: std::option::Option<crate::model::LoadBalancerAttributes>,
}
impl ModifyLoadBalancerAttributesOutput {
    /// <p>The name of the load balancer.</p>
    pub fn load_balancer_name(&self) -> std::option::Option<&str> {
        self.load_balancer_name.as_deref()
    }
    /// <p>Information about the load balancer attributes.</p>
    pub fn load_balancer_attributes(
        &self,
    ) -> std::option::Option<&crate::model::LoadBalancerAttributes> {
        self.load_balancer_attributes.as_ref()
    }
}
impl std::fmt::Debug for ModifyLoadBalancerAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyLoadBalancerAttributesOutput");
        formatter.field("load_balancer_name", &self.load_balancer_name);
        formatter.field("load_balancer_attributes", &self.load_balancer_attributes);
        formatter.finish()
    }
}
/// See [`ModifyLoadBalancerAttributesOutput`](crate::output::ModifyLoadBalancerAttributesOutput)
pub mod modify_load_balancer_attributes_output {
    /// A builder for [`ModifyLoadBalancerAttributesOutput`](crate::output::ModifyLoadBalancerAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) load_balancer_name: std::option::Option<std::string::String>,
        pub(crate) load_balancer_attributes:
            std::option::Option<crate::model::LoadBalancerAttributes>,
    }
    impl Builder {
        /// <p>The name of the load balancer.</p>
        pub fn load_balancer_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.load_balancer_name = Some(input.into());
            self
        }
        /// <p>The name of the load balancer.</p>
        pub fn set_load_balancer_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.load_balancer_name = input;
            self
        }
        /// <p>Information about the load balancer attributes.</p>
        pub fn load_balancer_attributes(
            mut self,
            input: crate::model::LoadBalancerAttributes,
        ) -> Self {
            self.load_balancer_attributes = Some(input);
            self
        }
        /// <p>Information about the load balancer attributes.</p>
        pub fn set_load_balancer_attributes(
            mut self,
            input: std::option::Option<crate::model::LoadBalancerAttributes>,
        ) -> Self {
            self.load_balancer_attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyLoadBalancerAttributesOutput`](crate::output::ModifyLoadBalancerAttributesOutput)
        pub fn build(self) -> crate::output::ModifyLoadBalancerAttributesOutput {
            crate::output::ModifyLoadBalancerAttributesOutput {
                load_balancer_name: self.load_balancer_name,
                load_balancer_attributes: self.load_balancer_attributes,
            }
        }
    }
}
impl ModifyLoadBalancerAttributesOutput {
    /// Creates a new builder-style object to manufacture [`ModifyLoadBalancerAttributesOutput`](crate::output::ModifyLoadBalancerAttributesOutput)
    pub fn builder() -> crate::output::modify_load_balancer_attributes_output::Builder {
        crate::output::modify_load_balancer_attributes_output::Builder::default()
    }
}

/// <p>Contains the output of EnableAvailabilityZonesForLoadBalancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableAvailabilityZonesForLoadBalancerOutput {
    /// <p>The updated list of Availability Zones for the load balancer.</p>
    pub availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl EnableAvailabilityZonesForLoadBalancerOutput {
    /// <p>The updated list of Availability Zones for the load balancer.</p>
    pub fn availability_zones(&self) -> std::option::Option<&[std::string::String]> {
        self.availability_zones.as_deref()
    }
}
impl std::fmt::Debug for EnableAvailabilityZonesForLoadBalancerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableAvailabilityZonesForLoadBalancerOutput");
        formatter.field("availability_zones", &self.availability_zones);
        formatter.finish()
    }
}
/// See [`EnableAvailabilityZonesForLoadBalancerOutput`](crate::output::EnableAvailabilityZonesForLoadBalancerOutput)
pub mod enable_availability_zones_for_load_balancer_output {
    /// A builder for [`EnableAvailabilityZonesForLoadBalancerOutput`](crate::output::EnableAvailabilityZonesForLoadBalancerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// Appends an item to `availability_zones`.
        ///
        /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
        ///
        /// <p>The updated list of Availability Zones for the load balancer.</p>
        pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.availability_zones.unwrap_or_default();
            v.push(input.into());
            self.availability_zones = Some(v);
            self
        }
        /// <p>The updated list of Availability Zones for the load balancer.</p>
        pub fn set_availability_zones(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.availability_zones = input;
            self
        }
        /// Consumes the builder and constructs a [`EnableAvailabilityZonesForLoadBalancerOutput`](crate::output::EnableAvailabilityZonesForLoadBalancerOutput)
        pub fn build(self) -> crate::output::EnableAvailabilityZonesForLoadBalancerOutput {
            crate::output::EnableAvailabilityZonesForLoadBalancerOutput {
                availability_zones: self.availability_zones,
            }
        }
    }
}
impl EnableAvailabilityZonesForLoadBalancerOutput {
    /// Creates a new builder-style object to manufacture [`EnableAvailabilityZonesForLoadBalancerOutput`](crate::output::EnableAvailabilityZonesForLoadBalancerOutput)
    pub fn builder() -> crate::output::enable_availability_zones_for_load_balancer_output::Builder {
        crate::output::enable_availability_zones_for_load_balancer_output::Builder::default()
    }
}

/// <p>Contains the output for DisableAvailabilityZonesForLoadBalancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableAvailabilityZonesForLoadBalancerOutput {
    /// <p>The remaining Availability Zones for the load balancer.</p>
    pub availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DisableAvailabilityZonesForLoadBalancerOutput {
    /// <p>The remaining Availability Zones for the load balancer.</p>
    pub fn availability_zones(&self) -> std::option::Option<&[std::string::String]> {
        self.availability_zones.as_deref()
    }
}
impl std::fmt::Debug for DisableAvailabilityZonesForLoadBalancerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableAvailabilityZonesForLoadBalancerOutput");
        formatter.field("availability_zones", &self.availability_zones);
        formatter.finish()
    }
}
/// See [`DisableAvailabilityZonesForLoadBalancerOutput`](crate::output::DisableAvailabilityZonesForLoadBalancerOutput)
pub mod disable_availability_zones_for_load_balancer_output {
    /// A builder for [`DisableAvailabilityZonesForLoadBalancerOutput`](crate::output::DisableAvailabilityZonesForLoadBalancerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// Appends an item to `availability_zones`.
        ///
        /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
        ///
        /// <p>The remaining Availability Zones for the load balancer.</p>
        pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.availability_zones.unwrap_or_default();
            v.push(input.into());
            self.availability_zones = Some(v);
            self
        }
        /// <p>The remaining Availability Zones for the load balancer.</p>
        pub fn set_availability_zones(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.availability_zones = input;
            self
        }
        /// Consumes the builder and constructs a [`DisableAvailabilityZonesForLoadBalancerOutput`](crate::output::DisableAvailabilityZonesForLoadBalancerOutput)
        pub fn build(self) -> crate::output::DisableAvailabilityZonesForLoadBalancerOutput {
            crate::output::DisableAvailabilityZonesForLoadBalancerOutput {
                availability_zones: self.availability_zones,
            }
        }
    }
}
impl DisableAvailabilityZonesForLoadBalancerOutput {
    /// Creates a new builder-style object to manufacture [`DisableAvailabilityZonesForLoadBalancerOutput`](crate::output::DisableAvailabilityZonesForLoadBalancerOutput)
    pub fn builder() -> crate::output::disable_availability_zones_for_load_balancer_output::Builder
    {
        crate::output::disable_availability_zones_for_load_balancer_output::Builder::default()
    }
}

/// <p>Contains the output of DetachLoadBalancerFromSubnets.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DetachLoadBalancerFromSubnetsOutput {
    /// <p>The IDs of the remaining subnets for the load balancer.</p>
    pub subnets: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DetachLoadBalancerFromSubnetsOutput {
    /// <p>The IDs of the remaining subnets for the load balancer.</p>
    pub fn subnets(&self) -> std::option::Option<&[std::string::String]> {
        self.subnets.as_deref()
    }
}
impl std::fmt::Debug for DetachLoadBalancerFromSubnetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DetachLoadBalancerFromSubnetsOutput");
        formatter.field("subnets", &self.subnets);
        formatter.finish()
    }
}
/// See [`DetachLoadBalancerFromSubnetsOutput`](crate::output::DetachLoadBalancerFromSubnetsOutput)
pub mod detach_load_balancer_from_subnets_output {
    /// A builder for [`DetachLoadBalancerFromSubnetsOutput`](crate::output::DetachLoadBalancerFromSubnetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subnets: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// Appends an item to `subnets`.
        ///
        /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
        ///
        /// <p>The IDs of the remaining subnets for the load balancer.</p>
        pub fn subnets(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.subnets.unwrap_or_default();
            v.push(input.into());
            self.subnets = Some(v);
            self
        }
        /// <p>The IDs of the remaining subnets for the load balancer.</p>
        pub fn set_subnets(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.subnets = input;
            self
        }
        /// Consumes the builder and constructs a [`DetachLoadBalancerFromSubnetsOutput`](crate::output::DetachLoadBalancerFromSubnetsOutput)
        pub fn build(self) -> crate::output::DetachLoadBalancerFromSubnetsOutput {
            crate::output::DetachLoadBalancerFromSubnetsOutput {
                subnets: self.subnets,
            }
        }
    }
}
impl DetachLoadBalancerFromSubnetsOutput {
    /// Creates a new builder-style object to manufacture [`DetachLoadBalancerFromSubnetsOutput`](crate::output::DetachLoadBalancerFromSubnetsOutput)
    pub fn builder() -> crate::output::detach_load_balancer_from_subnets_output::Builder {
        crate::output::detach_load_balancer_from_subnets_output::Builder::default()
    }
}

/// <p>Contains the output for DescribeTags.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTagsOutput {
    /// <p>Information about the tags.</p>
    pub tag_descriptions: std::option::Option<std::vec::Vec<crate::model::TagDescription>>,
}
impl DescribeTagsOutput {
    /// <p>Information about the tags.</p>
    pub fn tag_descriptions(&self) -> std::option::Option<&[crate::model::TagDescription]> {
        self.tag_descriptions.as_deref()
    }
}
impl std::fmt::Debug for DescribeTagsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTagsOutput");
        formatter.field("tag_descriptions", &self.tag_descriptions);
        formatter.finish()
    }
}
/// See [`DescribeTagsOutput`](crate::output::DescribeTagsOutput)
pub mod describe_tags_output {
    /// A builder for [`DescribeTagsOutput`](crate::output::DescribeTagsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tag_descriptions:
            std::option::Option<std::vec::Vec<crate::model::TagDescription>>,
    }
    impl Builder {
        /// Appends an item to `tag_descriptions`.
        ///
        /// To override the contents of this collection use [`set_tag_descriptions`](Self::set_tag_descriptions).
        ///
        /// <p>Information about the tags.</p>
        pub fn tag_descriptions(mut self, input: crate::model::TagDescription) -> Self {
            let mut v = self.tag_descriptions.unwrap_or_default();
            v.push(input);
            self.tag_descriptions = Some(v);
            self
        }
        /// <p>Information about the tags.</p>
        pub fn set_tag_descriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagDescription>>,
        ) -> Self {
            self.tag_descriptions = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTagsOutput`](crate::output::DescribeTagsOutput)
        pub fn build(self) -> crate::output::DescribeTagsOutput {
            crate::output::DescribeTagsOutput {
                tag_descriptions: self.tag_descriptions,
            }
        }
    }
}
impl DescribeTagsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTagsOutput`](crate::output::DescribeTagsOutput)
    pub fn builder() -> crate::output::describe_tags_output::Builder {
        crate::output::describe_tags_output::Builder::default()
    }
}

/// <p>Contains the parameters for DescribeLoadBalancers.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLoadBalancersOutput {
    /// <p>Information about the load balancers.</p>
    pub load_balancer_descriptions:
        std::option::Option<std::vec::Vec<crate::model::LoadBalancerDescription>>,
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    pub next_marker: std::option::Option<std::string::String>,
}
impl DescribeLoadBalancersOutput {
    /// <p>Information about the load balancers.</p>
    pub fn load_balancer_descriptions(
        &self,
    ) -> std::option::Option<&[crate::model::LoadBalancerDescription]> {
        self.load_balancer_descriptions.as_deref()
    }
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    pub fn next_marker(&self) -> std::option::Option<&str> {
        self.next_marker.as_deref()
    }
}
impl std::fmt::Debug for DescribeLoadBalancersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeLoadBalancersOutput");
        formatter.field(
            "load_balancer_descriptions",
            &self.load_balancer_descriptions,
        );
        formatter.field("next_marker", &self.next_marker);
        formatter.finish()
    }
}
/// See [`DescribeLoadBalancersOutput`](crate::output::DescribeLoadBalancersOutput)
pub mod describe_load_balancers_output {
    /// A builder for [`DescribeLoadBalancersOutput`](crate::output::DescribeLoadBalancersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) load_balancer_descriptions:
            std::option::Option<std::vec::Vec<crate::model::LoadBalancerDescription>>,
        pub(crate) next_marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `load_balancer_descriptions`.
        ///
        /// To override the contents of this collection use [`set_load_balancer_descriptions`](Self::set_load_balancer_descriptions).
        ///
        /// <p>Information about the load balancers.</p>
        pub fn load_balancer_descriptions(
            mut self,
            input: crate::model::LoadBalancerDescription,
        ) -> Self {
            let mut v = self.load_balancer_descriptions.unwrap_or_default();
            v.push(input);
            self.load_balancer_descriptions = Some(v);
            self
        }
        /// <p>Information about the load balancers.</p>
        pub fn set_load_balancer_descriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LoadBalancerDescription>>,
        ) -> Self {
            self.load_balancer_descriptions = input;
            self
        }
        /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
        pub fn next_marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_marker = Some(input.into());
            self
        }
        /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLoadBalancersOutput`](crate::output::DescribeLoadBalancersOutput)
        pub fn build(self) -> crate::output::DescribeLoadBalancersOutput {
            crate::output::DescribeLoadBalancersOutput {
                load_balancer_descriptions: self.load_balancer_descriptions,
                next_marker: self.next_marker,
            }
        }
    }
}
impl DescribeLoadBalancersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLoadBalancersOutput`](crate::output::DescribeLoadBalancersOutput)
    pub fn builder() -> crate::output::describe_load_balancers_output::Builder {
        crate::output::describe_load_balancers_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeLoadBalancerPolicyTypes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLoadBalancerPolicyTypesOutput {
    /// <p>Information about the policy types.</p>
    pub policy_type_descriptions:
        std::option::Option<std::vec::Vec<crate::model::PolicyTypeDescription>>,
}
impl DescribeLoadBalancerPolicyTypesOutput {
    /// <p>Information about the policy types.</p>
    pub fn policy_type_descriptions(
        &self,
    ) -> std::option::Option<&[crate::model::PolicyTypeDescription]> {
        self.policy_type_descriptions.as_deref()
    }
}
impl std::fmt::Debug for DescribeLoadBalancerPolicyTypesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeLoadBalancerPolicyTypesOutput");
        formatter.field("policy_type_descriptions", &self.policy_type_descriptions);
        formatter.finish()
    }
}
/// See [`DescribeLoadBalancerPolicyTypesOutput`](crate::output::DescribeLoadBalancerPolicyTypesOutput)
pub mod describe_load_balancer_policy_types_output {
    /// A builder for [`DescribeLoadBalancerPolicyTypesOutput`](crate::output::DescribeLoadBalancerPolicyTypesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_type_descriptions:
            std::option::Option<std::vec::Vec<crate::model::PolicyTypeDescription>>,
    }
    impl Builder {
        /// Appends an item to `policy_type_descriptions`.
        ///
        /// To override the contents of this collection use [`set_policy_type_descriptions`](Self::set_policy_type_descriptions).
        ///
        /// <p>Information about the policy types.</p>
        pub fn policy_type_descriptions(
            mut self,
            input: crate::model::PolicyTypeDescription,
        ) -> Self {
            let mut v = self.policy_type_descriptions.unwrap_or_default();
            v.push(input);
            self.policy_type_descriptions = Some(v);
            self
        }
        /// <p>Information about the policy types.</p>
        pub fn set_policy_type_descriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PolicyTypeDescription>>,
        ) -> Self {
            self.policy_type_descriptions = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLoadBalancerPolicyTypesOutput`](crate::output::DescribeLoadBalancerPolicyTypesOutput)
        pub fn build(self) -> crate::output::DescribeLoadBalancerPolicyTypesOutput {
            crate::output::DescribeLoadBalancerPolicyTypesOutput {
                policy_type_descriptions: self.policy_type_descriptions,
            }
        }
    }
}
impl DescribeLoadBalancerPolicyTypesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLoadBalancerPolicyTypesOutput`](crate::output::DescribeLoadBalancerPolicyTypesOutput)
    pub fn builder() -> crate::output::describe_load_balancer_policy_types_output::Builder {
        crate::output::describe_load_balancer_policy_types_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeLoadBalancerPolicies.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLoadBalancerPoliciesOutput {
    /// <p>Information about the policies.</p>
    pub policy_descriptions: std::option::Option<std::vec::Vec<crate::model::PolicyDescription>>,
}
impl DescribeLoadBalancerPoliciesOutput {
    /// <p>Information about the policies.</p>
    pub fn policy_descriptions(&self) -> std::option::Option<&[crate::model::PolicyDescription]> {
        self.policy_descriptions.as_deref()
    }
}
impl std::fmt::Debug for DescribeLoadBalancerPoliciesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeLoadBalancerPoliciesOutput");
        formatter.field("policy_descriptions", &self.policy_descriptions);
        formatter.finish()
    }
}
/// See [`DescribeLoadBalancerPoliciesOutput`](crate::output::DescribeLoadBalancerPoliciesOutput)
pub mod describe_load_balancer_policies_output {
    /// A builder for [`DescribeLoadBalancerPoliciesOutput`](crate::output::DescribeLoadBalancerPoliciesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_descriptions:
            std::option::Option<std::vec::Vec<crate::model::PolicyDescription>>,
    }
    impl Builder {
        /// Appends an item to `policy_descriptions`.
        ///
        /// To override the contents of this collection use [`set_policy_descriptions`](Self::set_policy_descriptions).
        ///
        /// <p>Information about the policies.</p>
        pub fn policy_descriptions(mut self, input: crate::model::PolicyDescription) -> Self {
            let mut v = self.policy_descriptions.unwrap_or_default();
            v.push(input);
            self.policy_descriptions = Some(v);
            self
        }
        /// <p>Information about the policies.</p>
        pub fn set_policy_descriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PolicyDescription>>,
        ) -> Self {
            self.policy_descriptions = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLoadBalancerPoliciesOutput`](crate::output::DescribeLoadBalancerPoliciesOutput)
        pub fn build(self) -> crate::output::DescribeLoadBalancerPoliciesOutput {
            crate::output::DescribeLoadBalancerPoliciesOutput {
                policy_descriptions: self.policy_descriptions,
            }
        }
    }
}
impl DescribeLoadBalancerPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLoadBalancerPoliciesOutput`](crate::output::DescribeLoadBalancerPoliciesOutput)
    pub fn builder() -> crate::output::describe_load_balancer_policies_output::Builder {
        crate::output::describe_load_balancer_policies_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeLoadBalancerAttributes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLoadBalancerAttributesOutput {
    /// <p>Information about the load balancer attributes.</p>
    pub load_balancer_attributes: std::option::Option<crate::model::LoadBalancerAttributes>,
}
impl DescribeLoadBalancerAttributesOutput {
    /// <p>Information about the load balancer attributes.</p>
    pub fn load_balancer_attributes(
        &self,
    ) -> std::option::Option<&crate::model::LoadBalancerAttributes> {
        self.load_balancer_attributes.as_ref()
    }
}
impl std::fmt::Debug for DescribeLoadBalancerAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeLoadBalancerAttributesOutput");
        formatter.field("load_balancer_attributes", &self.load_balancer_attributes);
        formatter.finish()
    }
}
/// See [`DescribeLoadBalancerAttributesOutput`](crate::output::DescribeLoadBalancerAttributesOutput)
pub mod describe_load_balancer_attributes_output {
    /// A builder for [`DescribeLoadBalancerAttributesOutput`](crate::output::DescribeLoadBalancerAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) load_balancer_attributes:
            std::option::Option<crate::model::LoadBalancerAttributes>,
    }
    impl Builder {
        /// <p>Information about the load balancer attributes.</p>
        pub fn load_balancer_attributes(
            mut self,
            input: crate::model::LoadBalancerAttributes,
        ) -> Self {
            self.load_balancer_attributes = Some(input);
            self
        }
        /// <p>Information about the load balancer attributes.</p>
        pub fn set_load_balancer_attributes(
            mut self,
            input: std::option::Option<crate::model::LoadBalancerAttributes>,
        ) -> Self {
            self.load_balancer_attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLoadBalancerAttributesOutput`](crate::output::DescribeLoadBalancerAttributesOutput)
        pub fn build(self) -> crate::output::DescribeLoadBalancerAttributesOutput {
            crate::output::DescribeLoadBalancerAttributesOutput {
                load_balancer_attributes: self.load_balancer_attributes,
            }
        }
    }
}
impl DescribeLoadBalancerAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLoadBalancerAttributesOutput`](crate::output::DescribeLoadBalancerAttributesOutput)
    pub fn builder() -> crate::output::describe_load_balancer_attributes_output::Builder {
        crate::output::describe_load_balancer_attributes_output::Builder::default()
    }
}

/// <p>Contains the output for DescribeInstanceHealth.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstanceHealthOutput {
    /// <p>Information about the health of the instances.</p>
    pub instance_states: std::option::Option<std::vec::Vec<crate::model::InstanceState>>,
}
impl DescribeInstanceHealthOutput {
    /// <p>Information about the health of the instances.</p>
    pub fn instance_states(&self) -> std::option::Option<&[crate::model::InstanceState]> {
        self.instance_states.as_deref()
    }
}
impl std::fmt::Debug for DescribeInstanceHealthOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstanceHealthOutput");
        formatter.field("instance_states", &self.instance_states);
        formatter.finish()
    }
}
/// See [`DescribeInstanceHealthOutput`](crate::output::DescribeInstanceHealthOutput)
pub mod describe_instance_health_output {
    /// A builder for [`DescribeInstanceHealthOutput`](crate::output::DescribeInstanceHealthOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_states: std::option::Option<std::vec::Vec<crate::model::InstanceState>>,
    }
    impl Builder {
        /// Appends an item to `instance_states`.
        ///
        /// To override the contents of this collection use [`set_instance_states`](Self::set_instance_states).
        ///
        /// <p>Information about the health of the instances.</p>
        pub fn instance_states(mut self, input: crate::model::InstanceState) -> Self {
            let mut v = self.instance_states.unwrap_or_default();
            v.push(input);
            self.instance_states = Some(v);
            self
        }
        /// <p>Information about the health of the instances.</p>
        pub fn set_instance_states(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceState>>,
        ) -> Self {
            self.instance_states = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceHealthOutput`](crate::output::DescribeInstanceHealthOutput)
        pub fn build(self) -> crate::output::DescribeInstanceHealthOutput {
            crate::output::DescribeInstanceHealthOutput {
                instance_states: self.instance_states,
            }
        }
    }
}
impl DescribeInstanceHealthOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceHealthOutput`](crate::output::DescribeInstanceHealthOutput)
    pub fn builder() -> crate::output::describe_instance_health_output::Builder {
        crate::output::describe_instance_health_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAccountLimitsOutput {
    /// <p>Information about the limits.</p>
    pub limits: std::option::Option<std::vec::Vec<crate::model::Limit>>,
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    pub next_marker: std::option::Option<std::string::String>,
}
impl DescribeAccountLimitsOutput {
    /// <p>Information about the limits.</p>
    pub fn limits(&self) -> std::option::Option<&[crate::model::Limit]> {
        self.limits.as_deref()
    }
    /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    pub fn next_marker(&self) -> std::option::Option<&str> {
        self.next_marker.as_deref()
    }
}
impl std::fmt::Debug for DescribeAccountLimitsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAccountLimitsOutput");
        formatter.field("limits", &self.limits);
        formatter.field("next_marker", &self.next_marker);
        formatter.finish()
    }
}
/// See [`DescribeAccountLimitsOutput`](crate::output::DescribeAccountLimitsOutput)
pub mod describe_account_limits_output {
    /// A builder for [`DescribeAccountLimitsOutput`](crate::output::DescribeAccountLimitsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) limits: std::option::Option<std::vec::Vec<crate::model::Limit>>,
        pub(crate) next_marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `limits`.
        ///
        /// To override the contents of this collection use [`set_limits`](Self::set_limits).
        ///
        /// <p>Information about the limits.</p>
        pub fn limits(mut self, input: crate::model::Limit) -> Self {
            let mut v = self.limits.unwrap_or_default();
            v.push(input);
            self.limits = Some(v);
            self
        }
        /// <p>Information about the limits.</p>
        pub fn set_limits(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Limit>>,
        ) -> Self {
            self.limits = input;
            self
        }
        /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
        pub fn next_marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_marker = Some(input.into());
            self
        }
        /// <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAccountLimitsOutput`](crate::output::DescribeAccountLimitsOutput)
        pub fn build(self) -> crate::output::DescribeAccountLimitsOutput {
            crate::output::DescribeAccountLimitsOutput {
                limits: self.limits,
                next_marker: self.next_marker,
            }
        }
    }
}
impl DescribeAccountLimitsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountLimitsOutput`](crate::output::DescribeAccountLimitsOutput)
    pub fn builder() -> crate::output::describe_account_limits_output::Builder {
        crate::output::describe_account_limits_output::Builder::default()
    }
}

/// <p>Contains the output of DeregisterInstancesFromLoadBalancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeregisterInstancesFromLoadBalancerOutput {
    /// <p>The remaining instances registered with the load balancer.</p>
    pub instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
}
impl DeregisterInstancesFromLoadBalancerOutput {
    /// <p>The remaining instances registered with the load balancer.</p>
    pub fn instances(&self) -> std::option::Option<&[crate::model::Instance]> {
        self.instances.as_deref()
    }
}
impl std::fmt::Debug for DeregisterInstancesFromLoadBalancerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeregisterInstancesFromLoadBalancerOutput");
        formatter.field("instances", &self.instances);
        formatter.finish()
    }
}
/// See [`DeregisterInstancesFromLoadBalancerOutput`](crate::output::DeregisterInstancesFromLoadBalancerOutput)
pub mod deregister_instances_from_load_balancer_output {
    /// A builder for [`DeregisterInstancesFromLoadBalancerOutput`](crate::output::DeregisterInstancesFromLoadBalancerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
    }
    impl Builder {
        /// Appends an item to `instances`.
        ///
        /// To override the contents of this collection use [`set_instances`](Self::set_instances).
        ///
        /// <p>The remaining instances registered with the load balancer.</p>
        pub fn instances(mut self, input: crate::model::Instance) -> Self {
            let mut v = self.instances.unwrap_or_default();
            v.push(input);
            self.instances = Some(v);
            self
        }
        /// <p>The remaining instances registered with the load balancer.</p>
        pub fn set_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Instance>>,
        ) -> Self {
            self.instances = input;
            self
        }
        /// Consumes the builder and constructs a [`DeregisterInstancesFromLoadBalancerOutput`](crate::output::DeregisterInstancesFromLoadBalancerOutput)
        pub fn build(self) -> crate::output::DeregisterInstancesFromLoadBalancerOutput {
            crate::output::DeregisterInstancesFromLoadBalancerOutput {
                instances: self.instances,
            }
        }
    }
}
impl DeregisterInstancesFromLoadBalancerOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterInstancesFromLoadBalancerOutput`](crate::output::DeregisterInstancesFromLoadBalancerOutput)
    pub fn builder() -> crate::output::deregister_instances_from_load_balancer_output::Builder {
        crate::output::deregister_instances_from_load_balancer_output::Builder::default()
    }
}

/// <p>Contains the output of DeleteLoadBalancerPolicy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteLoadBalancerPolicyOutput {}
impl std::fmt::Debug for DeleteLoadBalancerPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteLoadBalancerPolicyOutput");
        formatter.finish()
    }
}
/// See [`DeleteLoadBalancerPolicyOutput`](crate::output::DeleteLoadBalancerPolicyOutput)
pub mod delete_load_balancer_policy_output {
    /// A builder for [`DeleteLoadBalancerPolicyOutput`](crate::output::DeleteLoadBalancerPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteLoadBalancerPolicyOutput`](crate::output::DeleteLoadBalancerPolicyOutput)
        pub fn build(self) -> crate::output::DeleteLoadBalancerPolicyOutput {
            crate::output::DeleteLoadBalancerPolicyOutput {}
        }
    }
}
impl DeleteLoadBalancerPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLoadBalancerPolicyOutput`](crate::output::DeleteLoadBalancerPolicyOutput)
    pub fn builder() -> crate::output::delete_load_balancer_policy_output::Builder {
        crate::output::delete_load_balancer_policy_output::Builder::default()
    }
}

/// <p>Contains the output of DeleteLoadBalancerListeners.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteLoadBalancerListenersOutput {}
impl std::fmt::Debug for DeleteLoadBalancerListenersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteLoadBalancerListenersOutput");
        formatter.finish()
    }
}
/// See [`DeleteLoadBalancerListenersOutput`](crate::output::DeleteLoadBalancerListenersOutput)
pub mod delete_load_balancer_listeners_output {
    /// A builder for [`DeleteLoadBalancerListenersOutput`](crate::output::DeleteLoadBalancerListenersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteLoadBalancerListenersOutput`](crate::output::DeleteLoadBalancerListenersOutput)
        pub fn build(self) -> crate::output::DeleteLoadBalancerListenersOutput {
            crate::output::DeleteLoadBalancerListenersOutput {}
        }
    }
}
impl DeleteLoadBalancerListenersOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLoadBalancerListenersOutput`](crate::output::DeleteLoadBalancerListenersOutput)
    pub fn builder() -> crate::output::delete_load_balancer_listeners_output::Builder {
        crate::output::delete_load_balancer_listeners_output::Builder::default()
    }
}

/// <p>Contains the output of DeleteLoadBalancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteLoadBalancerOutput {}
impl std::fmt::Debug for DeleteLoadBalancerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteLoadBalancerOutput");
        formatter.finish()
    }
}
/// See [`DeleteLoadBalancerOutput`](crate::output::DeleteLoadBalancerOutput)
pub mod delete_load_balancer_output {
    /// A builder for [`DeleteLoadBalancerOutput`](crate::output::DeleteLoadBalancerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteLoadBalancerOutput`](crate::output::DeleteLoadBalancerOutput)
        pub fn build(self) -> crate::output::DeleteLoadBalancerOutput {
            crate::output::DeleteLoadBalancerOutput {}
        }
    }
}
impl DeleteLoadBalancerOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLoadBalancerOutput`](crate::output::DeleteLoadBalancerOutput)
    pub fn builder() -> crate::output::delete_load_balancer_output::Builder {
        crate::output::delete_load_balancer_output::Builder::default()
    }
}

/// <p>Contains the output of CreateLoadBalancerPolicy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLoadBalancerPolicyOutput {}
impl std::fmt::Debug for CreateLoadBalancerPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLoadBalancerPolicyOutput");
        formatter.finish()
    }
}
/// See [`CreateLoadBalancerPolicyOutput`](crate::output::CreateLoadBalancerPolicyOutput)
pub mod create_load_balancer_policy_output {
    /// A builder for [`CreateLoadBalancerPolicyOutput`](crate::output::CreateLoadBalancerPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateLoadBalancerPolicyOutput`](crate::output::CreateLoadBalancerPolicyOutput)
        pub fn build(self) -> crate::output::CreateLoadBalancerPolicyOutput {
            crate::output::CreateLoadBalancerPolicyOutput {}
        }
    }
}
impl CreateLoadBalancerPolicyOutput {
    /// Creates a new builder-style object to manufacture [`CreateLoadBalancerPolicyOutput`](crate::output::CreateLoadBalancerPolicyOutput)
    pub fn builder() -> crate::output::create_load_balancer_policy_output::Builder {
        crate::output::create_load_balancer_policy_output::Builder::default()
    }
}

/// <p>Contains the parameters for CreateLoadBalancerListener.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLoadBalancerListenersOutput {}
impl std::fmt::Debug for CreateLoadBalancerListenersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLoadBalancerListenersOutput");
        formatter.finish()
    }
}
/// See [`CreateLoadBalancerListenersOutput`](crate::output::CreateLoadBalancerListenersOutput)
pub mod create_load_balancer_listeners_output {
    /// A builder for [`CreateLoadBalancerListenersOutput`](crate::output::CreateLoadBalancerListenersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateLoadBalancerListenersOutput`](crate::output::CreateLoadBalancerListenersOutput)
        pub fn build(self) -> crate::output::CreateLoadBalancerListenersOutput {
            crate::output::CreateLoadBalancerListenersOutput {}
        }
    }
}
impl CreateLoadBalancerListenersOutput {
    /// Creates a new builder-style object to manufacture [`CreateLoadBalancerListenersOutput`](crate::output::CreateLoadBalancerListenersOutput)
    pub fn builder() -> crate::output::create_load_balancer_listeners_output::Builder {
        crate::output::create_load_balancer_listeners_output::Builder::default()
    }
}

/// <p>Contains the output for CreateLoadBalancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLoadBalancerOutput {
    /// <p>The DNS name of the load balancer.</p>
    pub dns_name: std::option::Option<std::string::String>,
}
impl CreateLoadBalancerOutput {
    /// <p>The DNS name of the load balancer.</p>
    pub fn dns_name(&self) -> std::option::Option<&str> {
        self.dns_name.as_deref()
    }
}
impl std::fmt::Debug for CreateLoadBalancerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLoadBalancerOutput");
        formatter.field("dns_name", &self.dns_name);
        formatter.finish()
    }
}
/// See [`CreateLoadBalancerOutput`](crate::output::CreateLoadBalancerOutput)
pub mod create_load_balancer_output {
    /// A builder for [`CreateLoadBalancerOutput`](crate::output::CreateLoadBalancerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dns_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The DNS name of the load balancer.</p>
        pub fn dns_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.dns_name = Some(input.into());
            self
        }
        /// <p>The DNS name of the load balancer.</p>
        pub fn set_dns_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dns_name = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateLoadBalancerOutput`](crate::output::CreateLoadBalancerOutput)
        pub fn build(self) -> crate::output::CreateLoadBalancerOutput {
            crate::output::CreateLoadBalancerOutput {
                dns_name: self.dns_name,
            }
        }
    }
}
impl CreateLoadBalancerOutput {
    /// Creates a new builder-style object to manufacture [`CreateLoadBalancerOutput`](crate::output::CreateLoadBalancerOutput)
    pub fn builder() -> crate::output::create_load_balancer_output::Builder {
        crate::output::create_load_balancer_output::Builder::default()
    }
}

/// <p>Contains the output for CreateLBCookieStickinessPolicy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLbCookieStickinessPolicyOutput {}
impl std::fmt::Debug for CreateLbCookieStickinessPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLbCookieStickinessPolicyOutput");
        formatter.finish()
    }
}
/// See [`CreateLbCookieStickinessPolicyOutput`](crate::output::CreateLbCookieStickinessPolicyOutput)
pub mod create_lb_cookie_stickiness_policy_output {
    /// A builder for [`CreateLbCookieStickinessPolicyOutput`](crate::output::CreateLbCookieStickinessPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateLbCookieStickinessPolicyOutput`](crate::output::CreateLbCookieStickinessPolicyOutput)
        pub fn build(self) -> crate::output::CreateLbCookieStickinessPolicyOutput {
            crate::output::CreateLbCookieStickinessPolicyOutput {}
        }
    }
}
impl CreateLbCookieStickinessPolicyOutput {
    /// Creates a new builder-style object to manufacture [`CreateLbCookieStickinessPolicyOutput`](crate::output::CreateLbCookieStickinessPolicyOutput)
    pub fn builder() -> crate::output::create_lb_cookie_stickiness_policy_output::Builder {
        crate::output::create_lb_cookie_stickiness_policy_output::Builder::default()
    }
}

/// <p>Contains the output for CreateAppCookieStickinessPolicy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateAppCookieStickinessPolicyOutput {}
impl std::fmt::Debug for CreateAppCookieStickinessPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAppCookieStickinessPolicyOutput");
        formatter.finish()
    }
}
/// See [`CreateAppCookieStickinessPolicyOutput`](crate::output::CreateAppCookieStickinessPolicyOutput)
pub mod create_app_cookie_stickiness_policy_output {
    /// A builder for [`CreateAppCookieStickinessPolicyOutput`](crate::output::CreateAppCookieStickinessPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateAppCookieStickinessPolicyOutput`](crate::output::CreateAppCookieStickinessPolicyOutput)
        pub fn build(self) -> crate::output::CreateAppCookieStickinessPolicyOutput {
            crate::output::CreateAppCookieStickinessPolicyOutput {}
        }
    }
}
impl CreateAppCookieStickinessPolicyOutput {
    /// Creates a new builder-style object to manufacture [`CreateAppCookieStickinessPolicyOutput`](crate::output::CreateAppCookieStickinessPolicyOutput)
    pub fn builder() -> crate::output::create_app_cookie_stickiness_policy_output::Builder {
        crate::output::create_app_cookie_stickiness_policy_output::Builder::default()
    }
}

/// <p>Contains the output of ConfigureHealthCheck.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConfigureHealthCheckOutput {
    /// <p>The updated health check.</p>
    pub health_check: std::option::Option<crate::model::HealthCheck>,
}
impl ConfigureHealthCheckOutput {
    /// <p>The updated health check.</p>
    pub fn health_check(&self) -> std::option::Option<&crate::model::HealthCheck> {
        self.health_check.as_ref()
    }
}
impl std::fmt::Debug for ConfigureHealthCheckOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConfigureHealthCheckOutput");
        formatter.field("health_check", &self.health_check);
        formatter.finish()
    }
}
/// See [`ConfigureHealthCheckOutput`](crate::output::ConfigureHealthCheckOutput)
pub mod configure_health_check_output {
    /// A builder for [`ConfigureHealthCheckOutput`](crate::output::ConfigureHealthCheckOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) health_check: std::option::Option<crate::model::HealthCheck>,
    }
    impl Builder {
        /// <p>The updated health check.</p>
        pub fn health_check(mut self, input: crate::model::HealthCheck) -> Self {
            self.health_check = Some(input);
            self
        }
        /// <p>The updated health check.</p>
        pub fn set_health_check(
            mut self,
            input: std::option::Option<crate::model::HealthCheck>,
        ) -> Self {
            self.health_check = input;
            self
        }
        /// Consumes the builder and constructs a [`ConfigureHealthCheckOutput`](crate::output::ConfigureHealthCheckOutput)
        pub fn build(self) -> crate::output::ConfigureHealthCheckOutput {
            crate::output::ConfigureHealthCheckOutput {
                health_check: self.health_check,
            }
        }
    }
}
impl ConfigureHealthCheckOutput {
    /// Creates a new builder-style object to manufacture [`ConfigureHealthCheckOutput`](crate::output::ConfigureHealthCheckOutput)
    pub fn builder() -> crate::output::configure_health_check_output::Builder {
        crate::output::configure_health_check_output::Builder::default()
    }
}

/// <p>Contains the output of AttachLoadBalancerToSubnets.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AttachLoadBalancerToSubnetsOutput {
    /// <p>The IDs of the subnets attached to the load balancer.</p>
    pub subnets: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AttachLoadBalancerToSubnetsOutput {
    /// <p>The IDs of the subnets attached to the load balancer.</p>
    pub fn subnets(&self) -> std::option::Option<&[std::string::String]> {
        self.subnets.as_deref()
    }
}
impl std::fmt::Debug for AttachLoadBalancerToSubnetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AttachLoadBalancerToSubnetsOutput");
        formatter.field("subnets", &self.subnets);
        formatter.finish()
    }
}
/// See [`AttachLoadBalancerToSubnetsOutput`](crate::output::AttachLoadBalancerToSubnetsOutput)
pub mod attach_load_balancer_to_subnets_output {
    /// A builder for [`AttachLoadBalancerToSubnetsOutput`](crate::output::AttachLoadBalancerToSubnetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subnets: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// Appends an item to `subnets`.
        ///
        /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
        ///
        /// <p>The IDs of the subnets attached to the load balancer.</p>
        pub fn subnets(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.subnets.unwrap_or_default();
            v.push(input.into());
            self.subnets = Some(v);
            self
        }
        /// <p>The IDs of the subnets attached to the load balancer.</p>
        pub fn set_subnets(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.subnets = input;
            self
        }
        /// Consumes the builder and constructs a [`AttachLoadBalancerToSubnetsOutput`](crate::output::AttachLoadBalancerToSubnetsOutput)
        pub fn build(self) -> crate::output::AttachLoadBalancerToSubnetsOutput {
            crate::output::AttachLoadBalancerToSubnetsOutput {
                subnets: self.subnets,
            }
        }
    }
}
impl AttachLoadBalancerToSubnetsOutput {
    /// Creates a new builder-style object to manufacture [`AttachLoadBalancerToSubnetsOutput`](crate::output::AttachLoadBalancerToSubnetsOutput)
    pub fn builder() -> crate::output::attach_load_balancer_to_subnets_output::Builder {
        crate::output::attach_load_balancer_to_subnets_output::Builder::default()
    }
}

/// <p>Contains the output of ApplySecurityGroupsToLoadBalancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ApplySecurityGroupsToLoadBalancerOutput {
    /// <p>The IDs of the security groups associated with the load balancer.</p>
    pub security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ApplySecurityGroupsToLoadBalancerOutput {
    /// <p>The IDs of the security groups associated with the load balancer.</p>
    pub fn security_groups(&self) -> std::option::Option<&[std::string::String]> {
        self.security_groups.as_deref()
    }
}
impl std::fmt::Debug for ApplySecurityGroupsToLoadBalancerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ApplySecurityGroupsToLoadBalancerOutput");
        formatter.field("security_groups", &self.security_groups);
        formatter.finish()
    }
}
/// See [`ApplySecurityGroupsToLoadBalancerOutput`](crate::output::ApplySecurityGroupsToLoadBalancerOutput)
pub mod apply_security_groups_to_load_balancer_output {
    /// A builder for [`ApplySecurityGroupsToLoadBalancerOutput`](crate::output::ApplySecurityGroupsToLoadBalancerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// Appends an item to `security_groups`.
        ///
        /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
        ///
        /// <p>The IDs of the security groups associated with the load balancer.</p>
        pub fn security_groups(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.security_groups.unwrap_or_default();
            v.push(input.into());
            self.security_groups = Some(v);
            self
        }
        /// <p>The IDs of the security groups associated with the load balancer.</p>
        pub fn set_security_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.security_groups = input;
            self
        }
        /// Consumes the builder and constructs a [`ApplySecurityGroupsToLoadBalancerOutput`](crate::output::ApplySecurityGroupsToLoadBalancerOutput)
        pub fn build(self) -> crate::output::ApplySecurityGroupsToLoadBalancerOutput {
            crate::output::ApplySecurityGroupsToLoadBalancerOutput {
                security_groups: self.security_groups,
            }
        }
    }
}
impl ApplySecurityGroupsToLoadBalancerOutput {
    /// Creates a new builder-style object to manufacture [`ApplySecurityGroupsToLoadBalancerOutput`](crate::output::ApplySecurityGroupsToLoadBalancerOutput)
    pub fn builder() -> crate::output::apply_security_groups_to_load_balancer_output::Builder {
        crate::output::apply_security_groups_to_load_balancer_output::Builder::default()
    }
}

/// <p>Contains the output of AddTags.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddTagsOutput {}
impl std::fmt::Debug for AddTagsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddTagsOutput");
        formatter.finish()
    }
}
/// See [`AddTagsOutput`](crate::output::AddTagsOutput)
pub mod add_tags_output {
    /// A builder for [`AddTagsOutput`](crate::output::AddTagsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AddTagsOutput`](crate::output::AddTagsOutput)
        pub fn build(self) -> crate::output::AddTagsOutput {
            crate::output::AddTagsOutput {}
        }
    }
}
impl AddTagsOutput {
    /// Creates a new builder-style object to manufacture [`AddTagsOutput`](crate::output::AddTagsOutput)
    pub fn builder() -> crate::output::add_tags_output::Builder {
        crate::output::add_tags_output::Builder::default()
    }
}
