// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeregisterInstancesFromLoadBalancer`](crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`instances(Vec<Instance>)`](crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer::instances) / [`set_instances(Option<Vec<Instance>>)`](crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer::set_instances): <p>The IDs of the instances.</p>
    /// - On success, responds with [`DeregisterInstancesFromLoadBalancerOutput`](crate::output::DeregisterInstancesFromLoadBalancerOutput) with field(s):
    ///   - [`instances(Option<Vec<Instance>>)`](crate::output::DeregisterInstancesFromLoadBalancerOutput::instances): <p>The remaining instances registered with the load balancer.</p>
    /// - On failure, responds with [`SdkError<DeregisterInstancesFromLoadBalancerError>`](crate::error::DeregisterInstancesFromLoadBalancerError)
    pub fn deregister_instances_from_load_balancer(
        &self,
    ) -> crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer {
        crate::client::fluent_builders::DeregisterInstancesFromLoadBalancer::new(
            self.handle.clone(),
        )
    }
}
