// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLBCookieStickinessPolicy`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`policy_name(impl Into<String>)`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy::policy_name) / [`set_policy_name(Option<String>)`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy::set_policy_name): <p>The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer.</p>
    ///   - [`cookie_expiration_period(i64)`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy::cookie_expiration_period) / [`set_cookie_expiration_period(Option<i64>)`](crate::client::fluent_builders::CreateLBCookieStickinessPolicy::set_cookie_expiration_period): <p>The time period, in seconds, after which the cookie should be considered stale. If you do not specify this parameter, the default value is 0, which indicates that the sticky session should last for the duration of the browser session.</p>
    /// - On success, responds with [`CreateLbCookieStickinessPolicyOutput`](crate::output::CreateLbCookieStickinessPolicyOutput)
    /// - On failure, responds with [`SdkError<CreateLBCookieStickinessPolicyError>`](crate::error::CreateLBCookieStickinessPolicyError)
    pub fn create_lb_cookie_stickiness_policy(
        &self,
    ) -> crate::client::fluent_builders::CreateLBCookieStickinessPolicy {
        crate::client::fluent_builders::CreateLBCookieStickinessPolicy::new(self.handle.clone())
    }
}
