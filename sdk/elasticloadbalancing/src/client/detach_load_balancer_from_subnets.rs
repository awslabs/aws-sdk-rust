// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DetachLoadBalancerFromSubnets`](crate::operation::detach_load_balancer_from_subnets::builders::DetachLoadBalancerFromSubnetsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::operation::detach_load_balancer_from_subnets::builders::DetachLoadBalancerFromSubnetsFluentBuilder::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::operation::detach_load_balancer_from_subnets::builders::DetachLoadBalancerFromSubnetsFluentBuilder::set_load_balancer_name):<br>required: **true**<br><p>The name of the load balancer.</p><br>
    ///   - [`subnets(impl Into<String>)`](crate::operation::detach_load_balancer_from_subnets::builders::DetachLoadBalancerFromSubnetsFluentBuilder::subnets) / [`set_subnets(Option<Vec::<String>>)`](crate::operation::detach_load_balancer_from_subnets::builders::DetachLoadBalancerFromSubnetsFluentBuilder::set_subnets):<br>required: **true**<br><p>The IDs of the subnets.</p><br>
    /// - On success, responds with [`DetachLoadBalancerFromSubnetsOutput`](crate::operation::detach_load_balancer_from_subnets::DetachLoadBalancerFromSubnetsOutput) with field(s):
    ///   - [`subnets(Option<Vec::<String>>)`](crate::operation::detach_load_balancer_from_subnets::DetachLoadBalancerFromSubnetsOutput::subnets): <p>The IDs of the remaining subnets for the load balancer.</p>
    /// - On failure, responds with [`SdkError<DetachLoadBalancerFromSubnetsError>`](crate::operation::detach_load_balancer_from_subnets::DetachLoadBalancerFromSubnetsError)
    pub fn detach_load_balancer_from_subnets(
        &self,
    ) -> crate::operation::detach_load_balancer_from_subnets::builders::DetachLoadBalancerFromSubnetsFluentBuilder {
        crate::operation::detach_load_balancer_from_subnets::builders::DetachLoadBalancerFromSubnetsFluentBuilder::new(self.handle.clone())
    }
}
