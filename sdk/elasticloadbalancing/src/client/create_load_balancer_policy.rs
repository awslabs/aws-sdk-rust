// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLoadBalancerPolicy`](crate::client::fluent_builders::CreateLoadBalancerPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`policy_name(impl Into<String>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::policy_name) / [`set_policy_name(Option<String>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::set_policy_name): <p>The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer.</p>
    ///   - [`policy_type_name(impl Into<String>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::policy_type_name) / [`set_policy_type_name(Option<String>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::set_policy_type_name): <p>The name of the base policy type. To get the list of policy types, use <code>DescribeLoadBalancerPolicyTypes</code>.</p>
    ///   - [`policy_attributes(Vec<PolicyAttribute>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::policy_attributes) / [`set_policy_attributes(Option<Vec<PolicyAttribute>>)`](crate::client::fluent_builders::CreateLoadBalancerPolicy::set_policy_attributes): <p>The policy attributes.</p>
    /// - On success, responds with [`CreateLoadBalancerPolicyOutput`](crate::output::CreateLoadBalancerPolicyOutput)
    /// - On failure, responds with [`SdkError<CreateLoadBalancerPolicyError>`](crate::error::CreateLoadBalancerPolicyError)
    pub fn create_load_balancer_policy(
        &self,
    ) -> crate::client::fluent_builders::CreateLoadBalancerPolicy {
        crate::client::fluent_builders::CreateLoadBalancerPolicy::new(self.handle.clone())
    }
}
