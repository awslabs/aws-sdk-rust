// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SetLoadBalancerPoliciesOfListener`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`load_balancer_port(i32)`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::load_balancer_port) / [`set_load_balancer_port(i32)`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::set_load_balancer_port): <p>The external port of the load balancer.</p>
    ///   - [`policy_names(Vec<String>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::policy_names) / [`set_policy_names(Option<Vec<String>>)`](crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::set_policy_names): <p>The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled.</p>
    /// - On success, responds with [`SetLoadBalancerPoliciesOfListenerOutput`](crate::output::SetLoadBalancerPoliciesOfListenerOutput)
    /// - On failure, responds with [`SdkError<SetLoadBalancerPoliciesOfListenerError>`](crate::error::SetLoadBalancerPoliciesOfListenerError)
    pub fn set_load_balancer_policies_of_listener(
        &self,
    ) -> crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener {
        crate::client::fluent_builders::SetLoadBalancerPoliciesOfListener::new(self.handle.clone())
    }
}
