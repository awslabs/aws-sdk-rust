// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeAccountLimits`](crate::operation::describe_account_limits::builders::DescribeAccountLimitsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`marker(impl Into<String>)`](crate::operation::describe_account_limits::builders::DescribeAccountLimitsFluentBuilder::marker) / [`set_marker(Option<String>)`](crate::operation::describe_account_limits::builders::DescribeAccountLimitsFluentBuilder::set_marker):<br>required: **false**<br><p>The marker for the next set of results. (You received this marker from a previous call.)</p><br>
    ///   - [`page_size(i32)`](crate::operation::describe_account_limits::builders::DescribeAccountLimitsFluentBuilder::page_size) / [`set_page_size(Option<i32>)`](crate::operation::describe_account_limits::builders::DescribeAccountLimitsFluentBuilder::set_page_size):<br>required: **false**<br><p>The maximum number of results to return with this call.</p><br>
    /// - On success, responds with [`DescribeAccountLimitsOutput`](crate::operation::describe_account_limits::DescribeAccountLimitsOutput) with field(s):
    ///   - [`limits(Option<Vec::<Limit>>)`](crate::operation::describe_account_limits::DescribeAccountLimitsOutput::limits): <p>Information about the limits.</p>
    ///   - [`next_marker(Option<String>)`](crate::operation::describe_account_limits::DescribeAccountLimitsOutput::next_marker): <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
    /// - On failure, responds with [`SdkError<DescribeAccountLimitsError>`](crate::operation::describe_account_limits::DescribeAccountLimitsError)
    pub fn describe_account_limits(&self) -> crate::operation::describe_account_limits::builders::DescribeAccountLimitsFluentBuilder {
        crate::operation::describe_account_limits::builders::DescribeAccountLimitsFluentBuilder::new(self.handle.clone())
    }
}
