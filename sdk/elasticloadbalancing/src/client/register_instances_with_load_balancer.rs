// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RegisterInstancesWithLoadBalancer`](crate::operation::register_instances_with_load_balancer::builders::RegisterInstancesWithLoadBalancerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::operation::register_instances_with_load_balancer::builders::RegisterInstancesWithLoadBalancerFluentBuilder::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::operation::register_instances_with_load_balancer::builders::RegisterInstancesWithLoadBalancerFluentBuilder::set_load_balancer_name): <p>The name of the load balancer.</p>
    ///   - [`instances(Vec<Instance>)`](crate::operation::register_instances_with_load_balancer::builders::RegisterInstancesWithLoadBalancerFluentBuilder::instances) / [`set_instances(Option<Vec<Instance>>)`](crate::operation::register_instances_with_load_balancer::builders::RegisterInstancesWithLoadBalancerFluentBuilder::set_instances): <p>The IDs of the instances.</p>
    /// - On success, responds with [`RegisterInstancesWithLoadBalancerOutput`](crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerOutput) with field(s):
    ///   - [`instances(Option<Vec<Instance>>)`](crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerOutput::instances): <p>The updated list of instances for the load balancer.</p>
    /// - On failure, responds with [`SdkError<RegisterInstancesWithLoadBalancerError>`](crate::operation::register_instances_with_load_balancer::RegisterInstancesWithLoadBalancerError)
    pub fn register_instances_with_load_balancer(&self) -> crate::operation::register_instances_with_load_balancer::builders::RegisterInstancesWithLoadBalancerFluentBuilder{
        crate::operation::register_instances_with_load_balancer::builders::RegisterInstancesWithLoadBalancerFluentBuilder::new(self.handle.clone())
    }
}
