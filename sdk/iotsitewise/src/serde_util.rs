// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflicting_operation_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictingOperationExceptionBuilder,
) -> crate::types::error::builders::ConflictingOperationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_failure_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalFailureExceptionBuilder,
) -> crate::types::error::builders::InternalFailureExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_request_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidRequestExceptionBuilder,
) -> crate::types::error::builders::InvalidRequestExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::LimitExceededExceptionBuilder,
) -> crate::types::error::builders::LimitExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_already_exists_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceAlreadyExistsExceptionBuilder,
) -> crate::types::error::builders::ResourceAlreadyExistsExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_unavailable_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceUnavailableExceptionBuilder,
) -> crate::types::error::builders::ServiceUnavailableExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_asset_property_aggregates_output_correct_errors(
    mut builder: crate::operation::batch_get_asset_property_aggregates::builders::BatchGetAssetPropertyAggregatesOutputBuilder,
) -> crate::operation::batch_get_asset_property_aggregates::builders::BatchGetAssetPropertyAggregatesOutputBuilder {
    if builder.error_entries.is_none() {
        builder.error_entries = Some(Default::default())
    }
    if builder.success_entries.is_none() {
        builder.success_entries = Some(Default::default())
    }
    if builder.skipped_entries.is_none() {
        builder.skipped_entries = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_asset_property_value_output_correct_errors(
    mut builder: crate::operation::batch_get_asset_property_value::builders::BatchGetAssetPropertyValueOutputBuilder,
) -> crate::operation::batch_get_asset_property_value::builders::BatchGetAssetPropertyValueOutputBuilder {
    if builder.error_entries.is_none() {
        builder.error_entries = Some(Default::default())
    }
    if builder.success_entries.is_none() {
        builder.success_entries = Some(Default::default())
    }
    if builder.skipped_entries.is_none() {
        builder.skipped_entries = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_asset_property_value_history_output_correct_errors(
    mut builder: crate::operation::batch_get_asset_property_value_history::builders::BatchGetAssetPropertyValueHistoryOutputBuilder,
) -> crate::operation::batch_get_asset_property_value_history::builders::BatchGetAssetPropertyValueHistoryOutputBuilder {
    if builder.error_entries.is_none() {
        builder.error_entries = Some(Default::default())
    }
    if builder.success_entries.is_none() {
        builder.success_entries = Some(Default::default())
    }
    if builder.skipped_entries.is_none() {
        builder.skipped_entries = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_put_asset_property_value_output_correct_errors(
    mut builder: crate::operation::batch_put_asset_property_value::builders::BatchPutAssetPropertyValueOutputBuilder,
) -> crate::operation::batch_put_asset_property_value::builders::BatchPutAssetPropertyValueOutputBuilder {
    if builder.error_entries.is_none() {
        builder.error_entries = Some(Default::default())
    }
    builder
}

pub(crate) fn create_access_policy_output_correct_errors(
    mut builder: crate::operation::create_access_policy::builders::CreateAccessPolicyOutputBuilder,
) -> crate::operation::create_access_policy::builders::CreateAccessPolicyOutputBuilder {
    if builder.access_policy_id.is_none() {
        builder.access_policy_id = Some(Default::default())
    }
    if builder.access_policy_arn.is_none() {
        builder.access_policy_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_asset_output_correct_errors(
    mut builder: crate::operation::create_asset::builders::CreateAssetOutputBuilder,
) -> crate::operation::create_asset::builders::CreateAssetOutputBuilder {
    if builder.asset_id.is_none() {
        builder.asset_id = Some(Default::default())
    }
    if builder.asset_arn.is_none() {
        builder.asset_arn = Some(Default::default())
    }
    if builder.asset_status.is_none() {
        builder.asset_status = {
            let builder = crate::types::builders::AssetStatusBuilder::default();
            crate::serde_util::asset_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_asset_model_output_correct_errors(
    mut builder: crate::operation::create_asset_model::builders::CreateAssetModelOutputBuilder,
) -> crate::operation::create_asset_model::builders::CreateAssetModelOutputBuilder {
    if builder.asset_model_id.is_none() {
        builder.asset_model_id = Some(Default::default())
    }
    if builder.asset_model_arn.is_none() {
        builder.asset_model_arn = Some(Default::default())
    }
    if builder.asset_model_status.is_none() {
        builder.asset_model_status = {
            let builder = crate::types::builders::AssetModelStatusBuilder::default();
            crate::serde_util::asset_model_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_bulk_import_job_output_correct_errors(
    mut builder: crate::operation::create_bulk_import_job::builders::CreateBulkImportJobOutputBuilder,
) -> crate::operation::create_bulk_import_job::builders::CreateBulkImportJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    builder
}

pub(crate) fn create_dashboard_output_correct_errors(
    mut builder: crate::operation::create_dashboard::builders::CreateDashboardOutputBuilder,
) -> crate::operation::create_dashboard::builders::CreateDashboardOutputBuilder {
    if builder.dashboard_id.is_none() {
        builder.dashboard_id = Some(Default::default())
    }
    if builder.dashboard_arn.is_none() {
        builder.dashboard_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_gateway_output_correct_errors(
    mut builder: crate::operation::create_gateway::builders::CreateGatewayOutputBuilder,
) -> crate::operation::create_gateway::builders::CreateGatewayOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_portal_output_correct_errors(
    mut builder: crate::operation::create_portal::builders::CreatePortalOutputBuilder,
) -> crate::operation::create_portal::builders::CreatePortalOutputBuilder {
    if builder.portal_id.is_none() {
        builder.portal_id = Some(Default::default())
    }
    if builder.portal_arn.is_none() {
        builder.portal_arn = Some(Default::default())
    }
    if builder.portal_start_url.is_none() {
        builder.portal_start_url = Some(Default::default())
    }
    if builder.portal_status.is_none() {
        builder.portal_status = {
            let builder = crate::types::builders::PortalStatusBuilder::default();
            crate::serde_util::portal_status_correct_errors(builder).build().ok()
        }
    }
    if builder.sso_application_id.is_none() {
        builder.sso_application_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_project_output_correct_errors(
    mut builder: crate::operation::create_project::builders::CreateProjectOutputBuilder,
) -> crate::operation::create_project::builders::CreateProjectOutputBuilder {
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.project_arn.is_none() {
        builder.project_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_asset_output_correct_errors(
    mut builder: crate::operation::delete_asset::builders::DeleteAssetOutputBuilder,
) -> crate::operation::delete_asset::builders::DeleteAssetOutputBuilder {
    if builder.asset_status.is_none() {
        builder.asset_status = {
            let builder = crate::types::builders::AssetStatusBuilder::default();
            crate::serde_util::asset_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_asset_model_output_correct_errors(
    mut builder: crate::operation::delete_asset_model::builders::DeleteAssetModelOutputBuilder,
) -> crate::operation::delete_asset_model::builders::DeleteAssetModelOutputBuilder {
    if builder.asset_model_status.is_none() {
        builder.asset_model_status = {
            let builder = crate::types::builders::AssetModelStatusBuilder::default();
            crate::serde_util::asset_model_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_portal_output_correct_errors(
    mut builder: crate::operation::delete_portal::builders::DeletePortalOutputBuilder,
) -> crate::operation::delete_portal::builders::DeletePortalOutputBuilder {
    if builder.portal_status.is_none() {
        builder.portal_status = {
            let builder = crate::types::builders::PortalStatusBuilder::default();
            crate::serde_util::portal_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_access_policy_output_correct_errors(
    mut builder: crate::operation::describe_access_policy::builders::DescribeAccessPolicyOutputBuilder,
) -> crate::operation::describe_access_policy::builders::DescribeAccessPolicyOutputBuilder {
    if builder.access_policy_id.is_none() {
        builder.access_policy_id = Some(Default::default())
    }
    if builder.access_policy_arn.is_none() {
        builder.access_policy_arn = Some(Default::default())
    }
    if builder.access_policy_identity.is_none() {
        builder.access_policy_identity = {
            let builder = crate::types::builders::IdentityBuilder::default();
            Some(builder.build())
        }
    }
    if builder.access_policy_resource.is_none() {
        builder.access_policy_resource = {
            let builder = crate::types::builders::ResourceBuilder::default();
            Some(builder.build())
        }
    }
    if builder.access_policy_permission.is_none() {
        builder.access_policy_permission = "no value was set".parse::<crate::types::Permission>().ok()
    }
    if builder.access_policy_creation_date.is_none() {
        builder.access_policy_creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.access_policy_last_update_date.is_none() {
        builder.access_policy_last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_asset_output_correct_errors(
    mut builder: crate::operation::describe_asset::builders::DescribeAssetOutputBuilder,
) -> crate::operation::describe_asset::builders::DescribeAssetOutputBuilder {
    if builder.asset_id.is_none() {
        builder.asset_id = Some(Default::default())
    }
    if builder.asset_arn.is_none() {
        builder.asset_arn = Some(Default::default())
    }
    if builder.asset_name.is_none() {
        builder.asset_name = Some(Default::default())
    }
    if builder.asset_model_id.is_none() {
        builder.asset_model_id = Some(Default::default())
    }
    if builder.asset_properties.is_none() {
        builder.asset_properties = Some(Default::default())
    }
    if builder.asset_hierarchies.is_none() {
        builder.asset_hierarchies = Some(Default::default())
    }
    if builder.asset_creation_date.is_none() {
        builder.asset_creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.asset_last_update_date.is_none() {
        builder.asset_last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.asset_status.is_none() {
        builder.asset_status = {
            let builder = crate::types::builders::AssetStatusBuilder::default();
            crate::serde_util::asset_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_asset_model_output_correct_errors(
    mut builder: crate::operation::describe_asset_model::builders::DescribeAssetModelOutputBuilder,
) -> crate::operation::describe_asset_model::builders::DescribeAssetModelOutputBuilder {
    if builder.asset_model_id.is_none() {
        builder.asset_model_id = Some(Default::default())
    }
    if builder.asset_model_arn.is_none() {
        builder.asset_model_arn = Some(Default::default())
    }
    if builder.asset_model_name.is_none() {
        builder.asset_model_name = Some(Default::default())
    }
    if builder.asset_model_description.is_none() {
        builder.asset_model_description = Some(Default::default())
    }
    if builder.asset_model_properties.is_none() {
        builder.asset_model_properties = Some(Default::default())
    }
    if builder.asset_model_hierarchies.is_none() {
        builder.asset_model_hierarchies = Some(Default::default())
    }
    if builder.asset_model_creation_date.is_none() {
        builder.asset_model_creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.asset_model_last_update_date.is_none() {
        builder.asset_model_last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.asset_model_status.is_none() {
        builder.asset_model_status = {
            let builder = crate::types::builders::AssetModelStatusBuilder::default();
            crate::serde_util::asset_model_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_asset_property_output_correct_errors(
    mut builder: crate::operation::describe_asset_property::builders::DescribeAssetPropertyOutputBuilder,
) -> crate::operation::describe_asset_property::builders::DescribeAssetPropertyOutputBuilder {
    if builder.asset_id.is_none() {
        builder.asset_id = Some(Default::default())
    }
    if builder.asset_name.is_none() {
        builder.asset_name = Some(Default::default())
    }
    if builder.asset_model_id.is_none() {
        builder.asset_model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_bulk_import_job_output_correct_errors(
    mut builder: crate::operation::describe_bulk_import_job::builders::DescribeBulkImportJobOutputBuilder,
) -> crate::operation::describe_bulk_import_job::builders::DescribeBulkImportJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.job_role_arn.is_none() {
        builder.job_role_arn = Some(Default::default())
    }
    if builder.files.is_none() {
        builder.files = Some(Default::default())
    }
    if builder.error_report_location.is_none() {
        builder.error_report_location = {
            let builder = crate::types::builders::ErrorReportLocationBuilder::default();
            crate::serde_util::error_report_location_correct_errors(builder).build().ok()
        }
    }
    if builder.job_configuration.is_none() {
        builder.job_configuration = {
            let builder = crate::types::builders::JobConfigurationBuilder::default();
            Some(crate::serde_util::job_configuration_correct_errors(builder).build())
        }
    }
    if builder.job_creation_date.is_none() {
        builder.job_creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.job_last_update_date.is_none() {
        builder.job_last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_dashboard_output_correct_errors(
    mut builder: crate::operation::describe_dashboard::builders::DescribeDashboardOutputBuilder,
) -> crate::operation::describe_dashboard::builders::DescribeDashboardOutputBuilder {
    if builder.dashboard_id.is_none() {
        builder.dashboard_id = Some(Default::default())
    }
    if builder.dashboard_arn.is_none() {
        builder.dashboard_arn = Some(Default::default())
    }
    if builder.dashboard_name.is_none() {
        builder.dashboard_name = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.dashboard_definition.is_none() {
        builder.dashboard_definition = Some(Default::default())
    }
    if builder.dashboard_creation_date.is_none() {
        builder.dashboard_creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.dashboard_last_update_date.is_none() {
        builder.dashboard_last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_default_encryption_configuration_output_correct_errors(
    mut builder: crate::operation::describe_default_encryption_configuration::builders::DescribeDefaultEncryptionConfigurationOutputBuilder,
) -> crate::operation::describe_default_encryption_configuration::builders::DescribeDefaultEncryptionConfigurationOutputBuilder {
    if builder.encryption_type.is_none() {
        builder.encryption_type = "no value was set".parse::<crate::types::EncryptionType>().ok()
    }
    if builder.configuration_status.is_none() {
        builder.configuration_status = {
            let builder = crate::types::builders::ConfigurationStatusBuilder::default();
            crate::serde_util::configuration_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_gateway_output_correct_errors(
    mut builder: crate::operation::describe_gateway::builders::DescribeGatewayOutputBuilder,
) -> crate::operation::describe_gateway::builders::DescribeGatewayOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.gateway_name.is_none() {
        builder.gateway_name = Some(Default::default())
    }
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.gateway_capability_summaries.is_none() {
        builder.gateway_capability_summaries = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_date.is_none() {
        builder.last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_gateway_capability_configuration_output_correct_errors(
    mut builder: crate::operation::describe_gateway_capability_configuration::builders::DescribeGatewayCapabilityConfigurationOutputBuilder,
) -> crate::operation::describe_gateway_capability_configuration::builders::DescribeGatewayCapabilityConfigurationOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.capability_namespace.is_none() {
        builder.capability_namespace = Some(Default::default())
    }
    if builder.capability_configuration.is_none() {
        builder.capability_configuration = Some(Default::default())
    }
    if builder.capability_sync_status.is_none() {
        builder.capability_sync_status = "no value was set".parse::<crate::types::CapabilitySyncStatus>().ok()
    }
    builder
}

pub(crate) fn describe_logging_options_output_correct_errors(
    mut builder: crate::operation::describe_logging_options::builders::DescribeLoggingOptionsOutputBuilder,
) -> crate::operation::describe_logging_options::builders::DescribeLoggingOptionsOutputBuilder {
    if builder.logging_options.is_none() {
        builder.logging_options = {
            let builder = crate::types::builders::LoggingOptionsBuilder::default();
            crate::serde_util::logging_options_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_portal_output_correct_errors(
    mut builder: crate::operation::describe_portal::builders::DescribePortalOutputBuilder,
) -> crate::operation::describe_portal::builders::DescribePortalOutputBuilder {
    if builder.portal_id.is_none() {
        builder.portal_id = Some(Default::default())
    }
    if builder.portal_arn.is_none() {
        builder.portal_arn = Some(Default::default())
    }
    if builder.portal_name.is_none() {
        builder.portal_name = Some(Default::default())
    }
    if builder.portal_client_id.is_none() {
        builder.portal_client_id = Some(Default::default())
    }
    if builder.portal_start_url.is_none() {
        builder.portal_start_url = Some(Default::default())
    }
    if builder.portal_contact_email.is_none() {
        builder.portal_contact_email = Some(Default::default())
    }
    if builder.portal_status.is_none() {
        builder.portal_status = {
            let builder = crate::types::builders::PortalStatusBuilder::default();
            crate::serde_util::portal_status_correct_errors(builder).build().ok()
        }
    }
    if builder.portal_creation_date.is_none() {
        builder.portal_creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.portal_last_update_date.is_none() {
        builder.portal_last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_project_output_correct_errors(
    mut builder: crate::operation::describe_project::builders::DescribeProjectOutputBuilder,
) -> crate::operation::describe_project::builders::DescribeProjectOutputBuilder {
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.project_arn.is_none() {
        builder.project_arn = Some(Default::default())
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.portal_id.is_none() {
        builder.portal_id = Some(Default::default())
    }
    if builder.project_creation_date.is_none() {
        builder.project_creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.project_last_update_date.is_none() {
        builder.project_last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_storage_configuration_output_correct_errors(
    mut builder: crate::operation::describe_storage_configuration::builders::DescribeStorageConfigurationOutputBuilder,
) -> crate::operation::describe_storage_configuration::builders::DescribeStorageConfigurationOutputBuilder {
    if builder.storage_type.is_none() {
        builder.storage_type = "no value was set".parse::<crate::types::StorageType>().ok()
    }
    if builder.configuration_status.is_none() {
        builder.configuration_status = {
            let builder = crate::types::builders::ConfigurationStatusBuilder::default();
            crate::serde_util::configuration_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_time_series_output_correct_errors(
    mut builder: crate::operation::describe_time_series::builders::DescribeTimeSeriesOutputBuilder,
) -> crate::operation::describe_time_series::builders::DescribeTimeSeriesOutputBuilder {
    if builder.time_series_id.is_none() {
        builder.time_series_id = Some(Default::default())
    }
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::PropertyDataType>().ok()
    }
    if builder.time_series_creation_date.is_none() {
        builder.time_series_creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.time_series_last_update_date.is_none() {
        builder.time_series_last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.time_series_arn.is_none() {
        builder.time_series_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_asset_property_aggregates_output_correct_errors(
    mut builder: crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesOutputBuilder,
) -> crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesOutputBuilder {
    if builder.aggregated_values.is_none() {
        builder.aggregated_values = Some(Default::default())
    }
    builder
}

pub(crate) fn get_asset_property_value_history_output_correct_errors(
    mut builder: crate::operation::get_asset_property_value_history::builders::GetAssetPropertyValueHistoryOutputBuilder,
) -> crate::operation::get_asset_property_value_history::builders::GetAssetPropertyValueHistoryOutputBuilder {
    if builder.asset_property_value_history.is_none() {
        builder.asset_property_value_history = Some(Default::default())
    }
    builder
}

pub(crate) fn get_interpolated_asset_property_values_output_correct_errors(
    mut builder: crate::operation::get_interpolated_asset_property_values::builders::GetInterpolatedAssetPropertyValuesOutputBuilder,
) -> crate::operation::get_interpolated_asset_property_values::builders::GetInterpolatedAssetPropertyValuesOutputBuilder {
    if builder.interpolated_asset_property_values.is_none() {
        builder.interpolated_asset_property_values = Some(Default::default())
    }
    builder
}

pub(crate) fn list_access_policies_output_correct_errors(
    mut builder: crate::operation::list_access_policies::builders::ListAccessPoliciesOutputBuilder,
) -> crate::operation::list_access_policies::builders::ListAccessPoliciesOutputBuilder {
    if builder.access_policy_summaries.is_none() {
        builder.access_policy_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_asset_model_properties_output_correct_errors(
    mut builder: crate::operation::list_asset_model_properties::builders::ListAssetModelPropertiesOutputBuilder,
) -> crate::operation::list_asset_model_properties::builders::ListAssetModelPropertiesOutputBuilder {
    if builder.asset_model_property_summaries.is_none() {
        builder.asset_model_property_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_asset_models_output_correct_errors(
    mut builder: crate::operation::list_asset_models::builders::ListAssetModelsOutputBuilder,
) -> crate::operation::list_asset_models::builders::ListAssetModelsOutputBuilder {
    if builder.asset_model_summaries.is_none() {
        builder.asset_model_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_asset_properties_output_correct_errors(
    mut builder: crate::operation::list_asset_properties::builders::ListAssetPropertiesOutputBuilder,
) -> crate::operation::list_asset_properties::builders::ListAssetPropertiesOutputBuilder {
    if builder.asset_property_summaries.is_none() {
        builder.asset_property_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_asset_relationships_output_correct_errors(
    mut builder: crate::operation::list_asset_relationships::builders::ListAssetRelationshipsOutputBuilder,
) -> crate::operation::list_asset_relationships::builders::ListAssetRelationshipsOutputBuilder {
    if builder.asset_relationship_summaries.is_none() {
        builder.asset_relationship_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_assets_output_correct_errors(
    mut builder: crate::operation::list_assets::builders::ListAssetsOutputBuilder,
) -> crate::operation::list_assets::builders::ListAssetsOutputBuilder {
    if builder.asset_summaries.is_none() {
        builder.asset_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_associated_assets_output_correct_errors(
    mut builder: crate::operation::list_associated_assets::builders::ListAssociatedAssetsOutputBuilder,
) -> crate::operation::list_associated_assets::builders::ListAssociatedAssetsOutputBuilder {
    if builder.asset_summaries.is_none() {
        builder.asset_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_bulk_import_jobs_output_correct_errors(
    mut builder: crate::operation::list_bulk_import_jobs::builders::ListBulkImportJobsOutputBuilder,
) -> crate::operation::list_bulk_import_jobs::builders::ListBulkImportJobsOutputBuilder {
    if builder.job_summaries.is_none() {
        builder.job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_dashboards_output_correct_errors(
    mut builder: crate::operation::list_dashboards::builders::ListDashboardsOutputBuilder,
) -> crate::operation::list_dashboards::builders::ListDashboardsOutputBuilder {
    if builder.dashboard_summaries.is_none() {
        builder.dashboard_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_gateways_output_correct_errors(
    mut builder: crate::operation::list_gateways::builders::ListGatewaysOutputBuilder,
) -> crate::operation::list_gateways::builders::ListGatewaysOutputBuilder {
    if builder.gateway_summaries.is_none() {
        builder.gateway_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_project_assets_output_correct_errors(
    mut builder: crate::operation::list_project_assets::builders::ListProjectAssetsOutputBuilder,
) -> crate::operation::list_project_assets::builders::ListProjectAssetsOutputBuilder {
    if builder.asset_ids.is_none() {
        builder.asset_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn list_projects_output_correct_errors(
    mut builder: crate::operation::list_projects::builders::ListProjectsOutputBuilder,
) -> crate::operation::list_projects::builders::ListProjectsOutputBuilder {
    if builder.project_summaries.is_none() {
        builder.project_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn unauthorized_exception_correct_errors(
    mut builder: crate::types::error::builders::UnauthorizedExceptionBuilder,
) -> crate::types::error::builders::UnauthorizedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn list_time_series_output_correct_errors(
    mut builder: crate::operation::list_time_series::builders::ListTimeSeriesOutputBuilder,
) -> crate::operation::list_time_series::builders::ListTimeSeriesOutputBuilder {
    if builder.time_series_summaries.is_none() {
        builder.time_series_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn put_default_encryption_configuration_output_correct_errors(
    mut builder: crate::operation::put_default_encryption_configuration::builders::PutDefaultEncryptionConfigurationOutputBuilder,
) -> crate::operation::put_default_encryption_configuration::builders::PutDefaultEncryptionConfigurationOutputBuilder {
    if builder.encryption_type.is_none() {
        builder.encryption_type = "no value was set".parse::<crate::types::EncryptionType>().ok()
    }
    if builder.configuration_status.is_none() {
        builder.configuration_status = {
            let builder = crate::types::builders::ConfigurationStatusBuilder::default();
            crate::serde_util::configuration_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn put_storage_configuration_output_correct_errors(
    mut builder: crate::operation::put_storage_configuration::builders::PutStorageConfigurationOutputBuilder,
) -> crate::operation::put_storage_configuration::builders::PutStorageConfigurationOutputBuilder {
    if builder.storage_type.is_none() {
        builder.storage_type = "no value was set".parse::<crate::types::StorageType>().ok()
    }
    if builder.configuration_status.is_none() {
        builder.configuration_status = {
            let builder = crate::types::builders::ConfigurationStatusBuilder::default();
            crate::serde_util::configuration_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_asset_output_correct_errors(
    mut builder: crate::operation::update_asset::builders::UpdateAssetOutputBuilder,
) -> crate::operation::update_asset::builders::UpdateAssetOutputBuilder {
    if builder.asset_status.is_none() {
        builder.asset_status = {
            let builder = crate::types::builders::AssetStatusBuilder::default();
            crate::serde_util::asset_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_asset_model_output_correct_errors(
    mut builder: crate::operation::update_asset_model::builders::UpdateAssetModelOutputBuilder,
) -> crate::operation::update_asset_model::builders::UpdateAssetModelOutputBuilder {
    if builder.asset_model_status.is_none() {
        builder.asset_model_status = {
            let builder = crate::types::builders::AssetModelStatusBuilder::default();
            crate::serde_util::asset_model_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_gateway_capability_configuration_output_correct_errors(
    mut builder: crate::operation::update_gateway_capability_configuration::builders::UpdateGatewayCapabilityConfigurationOutputBuilder,
) -> crate::operation::update_gateway_capability_configuration::builders::UpdateGatewayCapabilityConfigurationOutputBuilder {
    if builder.capability_namespace.is_none() {
        builder.capability_namespace = Some(Default::default())
    }
    if builder.capability_sync_status.is_none() {
        builder.capability_sync_status = "no value was set".parse::<crate::types::CapabilitySyncStatus>().ok()
    }
    builder
}

pub(crate) fn update_portal_output_correct_errors(
    mut builder: crate::operation::update_portal::builders::UpdatePortalOutputBuilder,
) -> crate::operation::update_portal::builders::UpdatePortalOutputBuilder {
    if builder.portal_status.is_none() {
        builder.portal_status = {
            let builder = crate::types::builders::PortalStatusBuilder::default();
            crate::serde_util::portal_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn asset_status_correct_errors(mut builder: crate::types::builders::AssetStatusBuilder) -> crate::types::builders::AssetStatusBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::AssetState>().ok()
    }
    builder
}

pub(crate) fn asset_model_status_correct_errors(
    mut builder: crate::types::builders::AssetModelStatusBuilder,
) -> crate::types::builders::AssetModelStatusBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::AssetModelState>().ok()
    }
    builder
}

pub(crate) fn portal_status_correct_errors(mut builder: crate::types::builders::PortalStatusBuilder) -> crate::types::builders::PortalStatusBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::PortalState>().ok()
    }
    builder
}

pub(crate) fn error_report_location_correct_errors(
    mut builder: crate::types::builders::ErrorReportLocationBuilder,
) -> crate::types::builders::ErrorReportLocationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.prefix.is_none() {
        builder.prefix = Some(Default::default())
    }
    builder
}

pub(crate) fn job_configuration_correct_errors(
    mut builder: crate::types::builders::JobConfigurationBuilder,
) -> crate::types::builders::JobConfigurationBuilder {
    if builder.file_format.is_none() {
        builder.file_format = {
            let builder = crate::types::builders::FileFormatBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn configuration_status_correct_errors(
    mut builder: crate::types::builders::ConfigurationStatusBuilder,
) -> crate::types::builders::ConfigurationStatusBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ConfigurationState>().ok()
    }
    builder
}

pub(crate) fn logging_options_correct_errors(
    mut builder: crate::types::builders::LoggingOptionsBuilder,
) -> crate::types::builders::LoggingOptionsBuilder {
    if builder.level.is_none() {
        builder.level = "no value was set".parse::<crate::types::LoggingLevel>().ok()
    }
    builder
}

pub(crate) fn alarms_correct_errors(mut builder: crate::types::builders::AlarmsBuilder) -> crate::types::builders::AlarmsBuilder {
    if builder.alarm_role_arn.is_none() {
        builder.alarm_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_property_value_correct_errors(
    mut builder: crate::types::builders::AssetPropertyValueBuilder,
) -> crate::types::builders::AssetPropertyValueBuilder {
    if builder.value.is_none() {
        builder.value = {
            let builder = crate::types::builders::VariantBuilder::default();
            Some(builder.build())
        }
    }
    if builder.timestamp.is_none() {
        builder.timestamp = {
            let builder = crate::types::builders::TimeInNanosBuilder::default();
            crate::serde_util::time_in_nanos_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn composite_model_property_correct_errors(
    mut builder: crate::types::builders::CompositeModelPropertyBuilder,
) -> crate::types::builders::CompositeModelPropertyBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.asset_property.is_none() {
        builder.asset_property = {
            let builder = crate::types::builders::PropertyBuilder::default();
            crate::serde_util::property_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn image_location_correct_errors(
    mut builder: crate::types::builders::ImageLocationBuilder,
) -> crate::types::builders::ImageLocationBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn multi_layer_storage_correct_errors(
    mut builder: crate::types::builders::MultiLayerStorageBuilder,
) -> crate::types::builders::MultiLayerStorageBuilder {
    if builder.customer_managed_s3_storage.is_none() {
        builder.customer_managed_s3_storage = {
            let builder = crate::types::builders::CustomerManagedS3StorageBuilder::default();
            crate::serde_util::customer_managed_s3_storage_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn property_correct_errors(mut builder: crate::types::builders::PropertyBuilder) -> crate::types::builders::PropertyBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::PropertyDataType>().ok()
    }
    builder
}

pub(crate) fn access_policy_summary_correct_errors(
    mut builder: crate::types::builders::AccessPolicySummaryBuilder,
) -> crate::types::builders::AccessPolicySummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.identity.is_none() {
        builder.identity = {
            let builder = crate::types::builders::IdentityBuilder::default();
            Some(builder.build())
        }
    }
    if builder.resource.is_none() {
        builder.resource = {
            let builder = crate::types::builders::ResourceBuilder::default();
            Some(builder.build())
        }
    }
    if builder.permission.is_none() {
        builder.permission = "no value was set".parse::<crate::types::Permission>().ok()
    }
    builder
}

pub(crate) fn aggregated_value_correct_errors(
    mut builder: crate::types::builders::AggregatedValueBuilder,
) -> crate::types::builders::AggregatedValueBuilder {
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.value.is_none() {
        builder.value = {
            let builder = crate::types::builders::AggregatesBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn asset_composite_model_correct_errors(
    mut builder: crate::types::builders::AssetCompositeModelBuilder,
) -> crate::types::builders::AssetCompositeModelBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.properties.is_none() {
        builder.properties = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_error_details_correct_errors(
    mut builder: crate::types::builders::AssetErrorDetailsBuilder,
) -> crate::types::builders::AssetErrorDetailsBuilder {
    if builder.asset_id.is_none() {
        builder.asset_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::AssetErrorCode>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_hierarchy_correct_errors(
    mut builder: crate::types::builders::AssetHierarchyBuilder,
) -> crate::types::builders::AssetHierarchyBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_model_composite_model_correct_errors(
    mut builder: crate::types::builders::AssetModelCompositeModelBuilder,
) -> crate::types::builders::AssetModelCompositeModelBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_model_hierarchy_correct_errors(
    mut builder: crate::types::builders::AssetModelHierarchyBuilder,
) -> crate::types::builders::AssetModelHierarchyBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.child_asset_model_id.is_none() {
        builder.child_asset_model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_model_property_correct_errors(
    mut builder: crate::types::builders::AssetModelPropertyBuilder,
) -> crate::types::builders::AssetModelPropertyBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::PropertyDataType>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = {
            let builder = crate::types::builders::PropertyTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn asset_model_property_summary_correct_errors(
    mut builder: crate::types::builders::AssetModelPropertySummaryBuilder,
) -> crate::types::builders::AssetModelPropertySummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::PropertyDataType>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = {
            let builder = crate::types::builders::PropertyTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn asset_model_summary_correct_errors(
    mut builder: crate::types::builders::AssetModelSummaryBuilder,
) -> crate::types::builders::AssetModelSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_date.is_none() {
        builder.last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AssetModelStatusBuilder::default();
            crate::serde_util::asset_model_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn asset_property_correct_errors(
    mut builder: crate::types::builders::AssetPropertyBuilder,
) -> crate::types::builders::AssetPropertyBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::PropertyDataType>().ok()
    }
    builder
}

pub(crate) fn asset_relationship_summary_correct_errors(
    mut builder: crate::types::builders::AssetRelationshipSummaryBuilder,
) -> crate::types::builders::AssetRelationshipSummaryBuilder {
    if builder.relationship_type.is_none() {
        builder.relationship_type = "no value was set".parse::<crate::types::AssetRelationshipType>().ok()
    }
    builder
}

pub(crate) fn asset_summary_correct_errors(mut builder: crate::types::builders::AssetSummaryBuilder) -> crate::types::builders::AssetSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.asset_model_id.is_none() {
        builder.asset_model_id = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_date.is_none() {
        builder.last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AssetStatusBuilder::default();
            crate::serde_util::asset_status_correct_errors(builder).build().ok()
        }
    }
    if builder.hierarchies.is_none() {
        builder.hierarchies = Some(Default::default())
    }
    builder
}

pub(crate) fn associated_assets_summary_correct_errors(
    mut builder: crate::types::builders::AssociatedAssetsSummaryBuilder,
) -> crate::types::builders::AssociatedAssetsSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.asset_model_id.is_none() {
        builder.asset_model_id = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_date.is_none() {
        builder.last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::AssetStatusBuilder::default();
            crate::serde_util::asset_status_correct_errors(builder).build().ok()
        }
    }
    if builder.hierarchies.is_none() {
        builder.hierarchies = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_asset_property_aggregates_error_entry_correct_errors(
    mut builder: crate::types::builders::BatchGetAssetPropertyAggregatesErrorEntryBuilder,
) -> crate::types::builders::BatchGetAssetPropertyAggregatesErrorEntryBuilder {
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::BatchGetAssetPropertyAggregatesErrorCode>().ok()
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    if builder.entry_id.is_none() {
        builder.entry_id = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_asset_property_aggregates_skipped_entry_correct_errors(
    mut builder: crate::types::builders::BatchGetAssetPropertyAggregatesSkippedEntryBuilder,
) -> crate::types::builders::BatchGetAssetPropertyAggregatesSkippedEntryBuilder {
    if builder.entry_id.is_none() {
        builder.entry_id = Some(Default::default())
    }
    if builder.completion_status.is_none() {
        builder.completion_status = "no value was set".parse::<crate::types::BatchEntryCompletionStatus>().ok()
    }
    builder
}

pub(crate) fn batch_get_asset_property_aggregates_success_entry_correct_errors(
    mut builder: crate::types::builders::BatchGetAssetPropertyAggregatesSuccessEntryBuilder,
) -> crate::types::builders::BatchGetAssetPropertyAggregatesSuccessEntryBuilder {
    if builder.entry_id.is_none() {
        builder.entry_id = Some(Default::default())
    }
    if builder.aggregated_values.is_none() {
        builder.aggregated_values = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_asset_property_value_error_entry_correct_errors(
    mut builder: crate::types::builders::BatchGetAssetPropertyValueErrorEntryBuilder,
) -> crate::types::builders::BatchGetAssetPropertyValueErrorEntryBuilder {
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::BatchGetAssetPropertyValueErrorCode>().ok()
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    if builder.entry_id.is_none() {
        builder.entry_id = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_asset_property_value_history_error_entry_correct_errors(
    mut builder: crate::types::builders::BatchGetAssetPropertyValueHistoryErrorEntryBuilder,
) -> crate::types::builders::BatchGetAssetPropertyValueHistoryErrorEntryBuilder {
    if builder.error_code.is_none() {
        builder.error_code = "no value was set"
            .parse::<crate::types::BatchGetAssetPropertyValueHistoryErrorCode>()
            .ok()
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    if builder.entry_id.is_none() {
        builder.entry_id = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_asset_property_value_history_skipped_entry_correct_errors(
    mut builder: crate::types::builders::BatchGetAssetPropertyValueHistorySkippedEntryBuilder,
) -> crate::types::builders::BatchGetAssetPropertyValueHistorySkippedEntryBuilder {
    if builder.entry_id.is_none() {
        builder.entry_id = Some(Default::default())
    }
    if builder.completion_status.is_none() {
        builder.completion_status = "no value was set".parse::<crate::types::BatchEntryCompletionStatus>().ok()
    }
    builder
}

pub(crate) fn batch_get_asset_property_value_history_success_entry_correct_errors(
    mut builder: crate::types::builders::BatchGetAssetPropertyValueHistorySuccessEntryBuilder,
) -> crate::types::builders::BatchGetAssetPropertyValueHistorySuccessEntryBuilder {
    if builder.entry_id.is_none() {
        builder.entry_id = Some(Default::default())
    }
    if builder.asset_property_value_history.is_none() {
        builder.asset_property_value_history = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_asset_property_value_skipped_entry_correct_errors(
    mut builder: crate::types::builders::BatchGetAssetPropertyValueSkippedEntryBuilder,
) -> crate::types::builders::BatchGetAssetPropertyValueSkippedEntryBuilder {
    if builder.entry_id.is_none() {
        builder.entry_id = Some(Default::default())
    }
    if builder.completion_status.is_none() {
        builder.completion_status = "no value was set".parse::<crate::types::BatchEntryCompletionStatus>().ok()
    }
    builder
}

pub(crate) fn batch_get_asset_property_value_success_entry_correct_errors(
    mut builder: crate::types::builders::BatchGetAssetPropertyValueSuccessEntryBuilder,
) -> crate::types::builders::BatchGetAssetPropertyValueSuccessEntryBuilder {
    if builder.entry_id.is_none() {
        builder.entry_id = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_put_asset_property_error_entry_correct_errors(
    mut builder: crate::types::builders::BatchPutAssetPropertyErrorEntryBuilder,
) -> crate::types::builders::BatchPutAssetPropertyErrorEntryBuilder {
    if builder.entry_id.is_none() {
        builder.entry_id = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn configuration_error_details_correct_errors(
    mut builder: crate::types::builders::ConfigurationErrorDetailsBuilder,
) -> crate::types::builders::ConfigurationErrorDetailsBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::ErrorCode>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn customer_managed_s3_storage_correct_errors(
    mut builder: crate::types::builders::CustomerManagedS3StorageBuilder,
) -> crate::types::builders::CustomerManagedS3StorageBuilder {
    if builder.s3_resource_arn.is_none() {
        builder.s3_resource_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn dashboard_summary_correct_errors(
    mut builder: crate::types::builders::DashboardSummaryBuilder,
) -> crate::types::builders::DashboardSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn error_details_correct_errors(mut builder: crate::types::builders::ErrorDetailsBuilder) -> crate::types::builders::ErrorDetailsBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::ErrorCode>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn file_correct_errors(mut builder: crate::types::builders::FileBuilder) -> crate::types::builders::FileBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn gateway_capability_summary_correct_errors(
    mut builder: crate::types::builders::GatewayCapabilitySummaryBuilder,
) -> crate::types::builders::GatewayCapabilitySummaryBuilder {
    if builder.capability_namespace.is_none() {
        builder.capability_namespace = Some(Default::default())
    }
    if builder.capability_sync_status.is_none() {
        builder.capability_sync_status = "no value was set".parse::<crate::types::CapabilitySyncStatus>().ok()
    }
    builder
}

pub(crate) fn gateway_summary_correct_errors(
    mut builder: crate::types::builders::GatewaySummaryBuilder,
) -> crate::types::builders::GatewaySummaryBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.gateway_name.is_none() {
        builder.gateway_name = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_date.is_none() {
        builder.last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn greengrass_correct_errors(mut builder: crate::types::builders::GreengrassBuilder) -> crate::types::builders::GreengrassBuilder {
    if builder.group_arn.is_none() {
        builder.group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn greengrass_v2_correct_errors(mut builder: crate::types::builders::GreengrassV2Builder) -> crate::types::builders::GreengrassV2Builder {
    if builder.core_device_thing_name.is_none() {
        builder.core_device_thing_name = Some(Default::default())
    }
    builder
}

pub(crate) fn group_identity_correct_errors(
    mut builder: crate::types::builders::GroupIdentityBuilder,
) -> crate::types::builders::GroupIdentityBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn iam_role_identity_correct_errors(
    mut builder: crate::types::builders::IamRoleIdentityBuilder,
) -> crate::types::builders::IamRoleIdentityBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn iam_user_identity_correct_errors(
    mut builder: crate::types::builders::IamUserIdentityBuilder,
) -> crate::types::builders::IamUserIdentityBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn interpolated_asset_property_value_correct_errors(
    mut builder: crate::types::builders::InterpolatedAssetPropertyValueBuilder,
) -> crate::types::builders::InterpolatedAssetPropertyValueBuilder {
    if builder.timestamp.is_none() {
        builder.timestamp = {
            let builder = crate::types::builders::TimeInNanosBuilder::default();
            crate::serde_util::time_in_nanos_correct_errors(builder).build().ok()
        }
    }
    if builder.value.is_none() {
        builder.value = {
            let builder = crate::types::builders::VariantBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn job_summary_correct_errors(mut builder: crate::types::builders::JobSummaryBuilder) -> crate::types::builders::JobSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    builder
}

pub(crate) fn portal_resource_correct_errors(
    mut builder: crate::types::builders::PortalResourceBuilder,
) -> crate::types::builders::PortalResourceBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn portal_summary_correct_errors(
    mut builder: crate::types::builders::PortalSummaryBuilder,
) -> crate::types::builders::PortalSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.start_url.is_none() {
        builder.start_url = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::PortalStatusBuilder::default();
            crate::serde_util::portal_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn project_resource_correct_errors(
    mut builder: crate::types::builders::ProjectResourceBuilder,
) -> crate::types::builders::ProjectResourceBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn project_summary_correct_errors(
    mut builder: crate::types::builders::ProjectSummaryBuilder,
) -> crate::types::builders::ProjectSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn property_notification_correct_errors(
    mut builder: crate::types::builders::PropertyNotificationBuilder,
) -> crate::types::builders::PropertyNotificationBuilder {
    if builder.topic.is_none() {
        builder.topic = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::PropertyNotificationState>().ok()
    }
    builder
}

pub(crate) fn time_in_nanos_correct_errors(mut builder: crate::types::builders::TimeInNanosBuilder) -> crate::types::builders::TimeInNanosBuilder {
    if builder.time_in_seconds.is_none() {
        builder.time_in_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn time_series_summary_correct_errors(
    mut builder: crate::types::builders::TimeSeriesSummaryBuilder,
) -> crate::types::builders::TimeSeriesSummaryBuilder {
    if builder.time_series_id.is_none() {
        builder.time_series_id = Some(Default::default())
    }
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::PropertyDataType>().ok()
    }
    if builder.time_series_creation_date.is_none() {
        builder.time_series_creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.time_series_last_update_date.is_none() {
        builder.time_series_last_update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.time_series_arn.is_none() {
        builder.time_series_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn user_identity_correct_errors(mut builder: crate::types::builders::UserIdentityBuilder) -> crate::types::builders::UserIdentityBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_asset_property_aggregates_error_info_correct_errors(
    mut builder: crate::types::builders::BatchGetAssetPropertyAggregatesErrorInfoBuilder,
) -> crate::types::builders::BatchGetAssetPropertyAggregatesErrorInfoBuilder {
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::BatchGetAssetPropertyAggregatesErrorCode>().ok()
    }
    if builder.error_timestamp.is_none() {
        builder.error_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn batch_get_asset_property_value_error_info_correct_errors(
    mut builder: crate::types::builders::BatchGetAssetPropertyValueErrorInfoBuilder,
) -> crate::types::builders::BatchGetAssetPropertyValueErrorInfoBuilder {
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::BatchGetAssetPropertyValueErrorCode>().ok()
    }
    if builder.error_timestamp.is_none() {
        builder.error_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn batch_get_asset_property_value_history_error_info_correct_errors(
    mut builder: crate::types::builders::BatchGetAssetPropertyValueHistoryErrorInfoBuilder,
) -> crate::types::builders::BatchGetAssetPropertyValueHistoryErrorInfoBuilder {
    if builder.error_code.is_none() {
        builder.error_code = "no value was set"
            .parse::<crate::types::BatchGetAssetPropertyValueHistoryErrorCode>()
            .ok()
    }
    if builder.error_timestamp.is_none() {
        builder.error_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn metric_correct_errors(mut builder: crate::types::builders::MetricBuilder) -> crate::types::builders::MetricBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    if builder.variables.is_none() {
        builder.variables = Some(Default::default())
    }
    if builder.window.is_none() {
        builder.window = {
            let builder = crate::types::builders::MetricWindowBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn transform_correct_errors(mut builder: crate::types::builders::TransformBuilder) -> crate::types::builders::TransformBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    if builder.variables.is_none() {
        builder.variables = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_put_asset_property_error_correct_errors(
    mut builder: crate::types::builders::BatchPutAssetPropertyErrorBuilder,
) -> crate::types::builders::BatchPutAssetPropertyErrorBuilder {
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::BatchPutAssetPropertyValueErrorCode>().ok()
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    if builder.timestamps.is_none() {
        builder.timestamps = Some(Default::default())
    }
    builder
}

pub(crate) fn detailed_error_correct_errors(
    mut builder: crate::types::builders::DetailedErrorBuilder,
) -> crate::types::builders::DetailedErrorBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::DetailedErrorCode>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn measurement_processing_config_correct_errors(
    mut builder: crate::types::builders::MeasurementProcessingConfigBuilder,
) -> crate::types::builders::MeasurementProcessingConfigBuilder {
    if builder.forwarding_config.is_none() {
        builder.forwarding_config = {
            let builder = crate::types::builders::ForwardingConfigBuilder::default();
            crate::serde_util::forwarding_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn metric_processing_config_correct_errors(
    mut builder: crate::types::builders::MetricProcessingConfigBuilder,
) -> crate::types::builders::MetricProcessingConfigBuilder {
    if builder.compute_location.is_none() {
        builder.compute_location = "no value was set".parse::<crate::types::ComputeLocation>().ok()
    }
    builder
}

pub(crate) fn transform_processing_config_correct_errors(
    mut builder: crate::types::builders::TransformProcessingConfigBuilder,
) -> crate::types::builders::TransformProcessingConfigBuilder {
    if builder.compute_location.is_none() {
        builder.compute_location = "no value was set".parse::<crate::types::ComputeLocation>().ok()
    }
    builder
}

pub(crate) fn expression_variable_correct_errors(
    mut builder: crate::types::builders::ExpressionVariableBuilder,
) -> crate::types::builders::ExpressionVariableBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = {
            let builder = crate::types::builders::VariableValueBuilder::default();
            crate::serde_util::variable_value_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn forwarding_config_correct_errors(
    mut builder: crate::types::builders::ForwardingConfigBuilder,
) -> crate::types::builders::ForwardingConfigBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ForwardingConfigState>().ok()
    }
    builder
}

pub(crate) fn tumbling_window_correct_errors(
    mut builder: crate::types::builders::TumblingWindowBuilder,
) -> crate::types::builders::TumblingWindowBuilder {
    if builder.interval.is_none() {
        builder.interval = Some(Default::default())
    }
    builder
}

pub(crate) fn variable_value_correct_errors(
    mut builder: crate::types::builders::VariableValueBuilder,
) -> crate::types::builders::VariableValueBuilder {
    if builder.property_id.is_none() {
        builder.property_id = Some(Default::default())
    }
    builder
}
