// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_batch_get_asset_property_aggregates_output_next_token(
    input: &crate::output::BatchGetAssetPropertyAggregatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_batch_get_asset_property_value_output_next_token(
    input: &crate::output::BatchGetAssetPropertyValueOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_batch_get_asset_property_value_history_output_next_token(
    input: &crate::output::BatchGetAssetPropertyValueHistoryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_asset_property_aggregates_output_next_token(
    input: &crate::output::GetAssetPropertyAggregatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_asset_property_value_history_output_next_token(
    input: &crate::output::GetAssetPropertyValueHistoryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_interpolated_asset_property_values_output_next_token(
    input: &crate::output::GetInterpolatedAssetPropertyValuesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_access_policies_output_next_token(
    input: &crate::output::ListAccessPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_asset_model_properties_output_next_token(
    input: &crate::output::ListAssetModelPropertiesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_asset_models_output_next_token(
    input: &crate::output::ListAssetModelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_asset_properties_output_next_token(
    input: &crate::output::ListAssetPropertiesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_asset_relationships_output_next_token(
    input: &crate::output::ListAssetRelationshipsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_assets_output_next_token(
    input: &crate::output::ListAssetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_associated_assets_output_next_token(
    input: &crate::output::ListAssociatedAssetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_bulk_import_jobs_output_next_token(
    input: &crate::output::ListBulkImportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dashboards_output_next_token(
    input: &crate::output::ListDashboardsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_gateways_output_next_token(
    input: &crate::output::ListGatewaysOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_portals_output_next_token(
    input: &crate::output::ListPortalsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_project_assets_output_next_token(
    input: &crate::output::ListProjectAssetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_projects_output_next_token(
    input: &crate::output::ListProjectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_time_series_output_next_token(
    input: &crate::output::ListTimeSeriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_asset_property_aggregates_output_aggregated_values(
    input: crate::output::GetAssetPropertyAggregatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AggregatedValue>> {
    let input = match input.aggregated_values {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_asset_property_value_history_output_asset_property_value_history(
    input: crate::output::GetAssetPropertyValueHistoryOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AssetPropertyValue>> {
    let input = match input.asset_property_value_history {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_interpolated_asset_property_values_output_interpolated_asset_property_values(
    input: crate::output::GetInterpolatedAssetPropertyValuesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::InterpolatedAssetPropertyValue>> {
    let input = match input.interpolated_asset_property_values {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_access_policies_output_access_policy_summaries(
    input: crate::output::ListAccessPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AccessPolicySummary>> {
    let input = match input.access_policy_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_asset_model_properties_output_asset_model_property_summaries(
    input: crate::output::ListAssetModelPropertiesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AssetModelPropertySummary>> {
    let input = match input.asset_model_property_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_asset_models_output_asset_model_summaries(
    input: crate::output::ListAssetModelsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AssetModelSummary>> {
    let input = match input.asset_model_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_asset_properties_output_asset_property_summaries(
    input: crate::output::ListAssetPropertiesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AssetPropertySummary>> {
    let input = match input.asset_property_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_asset_relationships_output_asset_relationship_summaries(
    input: crate::output::ListAssetRelationshipsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AssetRelationshipSummary>> {
    let input = match input.asset_relationship_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_assets_output_asset_summaries(
    input: crate::output::ListAssetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AssetSummary>> {
    let input = match input.asset_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_associated_assets_output_asset_summaries(
    input: crate::output::ListAssociatedAssetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AssociatedAssetsSummary>> {
    let input = match input.asset_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_bulk_import_jobs_output_job_summaries(
    input: crate::output::ListBulkImportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::JobSummary>> {
    let input = match input.job_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dashboards_output_dashboard_summaries(
    input: crate::output::ListDashboardsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DashboardSummary>> {
    let input = match input.dashboard_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_gateways_output_gateway_summaries(
    input: crate::output::ListGatewaysOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GatewaySummary>> {
    let input = match input.gateway_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_portals_output_portal_summaries(
    input: crate::output::ListPortalsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PortalSummary>> {
    let input = match input.portal_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_project_assets_output_asset_ids(
    input: crate::output::ListProjectAssetsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.asset_ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_projects_output_project_summaries(
    input: crate::output::ListProjectsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ProjectSummary>> {
    let input = match input.project_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_time_series_output_time_series_summaries(
    input: crate::output::ListTimeSeriesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TimeSeriesSummary>> {
    let input = match input.time_series_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
