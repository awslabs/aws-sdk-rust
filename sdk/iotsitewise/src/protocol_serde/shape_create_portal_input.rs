// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_portal_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_portal::CreatePortalInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.alarms {
        #[allow(unused_mut)]
        let mut object_2 = object.key("alarms").start_object();
        crate::protocol_serde::shape_alarms::ser_alarms(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_token {
        object.key("clientToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.notification_sender_email {
        object.key("notificationSenderEmail").string(var_4.as_str());
    }
    if let Some(var_5) = &input.portal_auth_mode {
        object.key("portalAuthMode").string(var_5.as_str());
    }
    if let Some(var_6) = &input.portal_contact_email {
        object.key("portalContactEmail").string(var_6.as_str());
    }
    if let Some(var_7) = &input.portal_description {
        object.key("portalDescription").string(var_7.as_str());
    }
    if let Some(var_8) = &input.portal_logo_image_file {
        #[allow(unused_mut)]
        let mut object_9 = object.key("portalLogoImageFile").start_object();
        crate::protocol_serde::shape_image_file::ser_image_file(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.portal_name {
        object.key("portalName").string(var_10.as_str());
    }
    if let Some(var_11) = &input.role_arn {
        object.key("roleArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    Ok(())
}
