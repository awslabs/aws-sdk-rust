// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_portal_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_portal::UpdatePortalInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.alarms {
        #[allow(unused_mut)]
        let mut object_2 = object.key("alarms").start_object();
        crate::protocol_serde::shape_alarms::ser_alarms(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_token {
        object.key("clientToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.notification_sender_email {
        object.key("notificationSenderEmail").string(var_4.as_str());
    }
    if let Some(var_5) = &input.portal_contact_email {
        object.key("portalContactEmail").string(var_5.as_str());
    }
    if let Some(var_6) = &input.portal_description {
        object.key("portalDescription").string(var_6.as_str());
    }
    if let Some(var_7) = &input.portal_logo_image {
        #[allow(unused_mut)]
        let mut object_8 = object.key("portalLogoImage").start_object();
        crate::protocol_serde::shape_image::ser_image(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.portal_name {
        object.key("portalName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.role_arn {
        object.key("roleArn").string(var_10.as_str());
    }
    Ok(())
}
