// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAssetPropertiesInput {
    /// <p>The ID of the asset.</p>
    pub asset_id: ::std::option::Option<::std::string::String>,
    /// <p>The token to be used for the next set of paginated results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return for each paginated request. If not specified, the default value is 50.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p> Filters the requested list of asset properties. You can choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL</code> – The list includes all asset properties for a given asset model ID. </p> </li>
    /// <li> <p> <code>BASE</code> – The list includes only base asset properties for a given asset model ID. </p> </li>
    /// </ul>
    /// <p>Default: <code>BASE</code> </p>
    pub filter: ::std::option::Option<crate::types::ListAssetPropertiesFilter>,
}
impl ListAssetPropertiesInput {
    /// <p>The ID of the asset.</p>
    pub fn asset_id(&self) -> ::std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return for each paginated request. If not specified, the default value is 50.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p> Filters the requested list of asset properties. You can choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL</code> – The list includes all asset properties for a given asset model ID. </p> </li>
    /// <li> <p> <code>BASE</code> – The list includes only base asset properties for a given asset model ID. </p> </li>
    /// </ul>
    /// <p>Default: <code>BASE</code> </p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::ListAssetPropertiesFilter> {
        self.filter.as_ref()
    }
}
impl ListAssetPropertiesInput {
    /// Creates a new builder-style object to manufacture [`ListAssetPropertiesInput`](crate::operation::list_asset_properties::ListAssetPropertiesInput).
    pub fn builder() -> crate::operation::list_asset_properties::builders::ListAssetPropertiesInputBuilder {
        crate::operation::list_asset_properties::builders::ListAssetPropertiesInputBuilder::default()
    }
}

/// A builder for [`ListAssetPropertiesInput`](crate::operation::list_asset_properties::ListAssetPropertiesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListAssetPropertiesInputBuilder {
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) filter: ::std::option::Option<crate::types::ListAssetPropertiesFilter>,
}
impl ListAssetPropertiesInputBuilder {
    /// <p>The ID of the asset.</p>
    /// This field is required.
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the asset.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return for each paginated request. If not specified, the default value is 50.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return for each paginated request. If not specified, the default value is 50.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return for each paginated request. If not specified, the default value is 50.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p> Filters the requested list of asset properties. You can choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL</code> – The list includes all asset properties for a given asset model ID. </p> </li>
    /// <li> <p> <code>BASE</code> – The list includes only base asset properties for a given asset model ID. </p> </li>
    /// </ul>
    /// <p>Default: <code>BASE</code> </p>
    pub fn filter(mut self, input: crate::types::ListAssetPropertiesFilter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p> Filters the requested list of asset properties. You can choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL</code> – The list includes all asset properties for a given asset model ID. </p> </li>
    /// <li> <p> <code>BASE</code> – The list includes only base asset properties for a given asset model ID. </p> </li>
    /// </ul>
    /// <p>Default: <code>BASE</code> </p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::ListAssetPropertiesFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p> Filters the requested list of asset properties. You can choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL</code> – The list includes all asset properties for a given asset model ID. </p> </li>
    /// <li> <p> <code>BASE</code> – The list includes only base asset properties for a given asset model ID. </p> </li>
    /// </ul>
    /// <p>Default: <code>BASE</code> </p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::ListAssetPropertiesFilter> {
        &self.filter
    }
    /// Consumes the builder and constructs a [`ListAssetPropertiesInput`](crate::operation::list_asset_properties::ListAssetPropertiesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_asset_properties::ListAssetPropertiesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_asset_properties::ListAssetPropertiesInput {
            asset_id: self.asset_id,
            next_token: self.next_token,
            max_results: self.max_results,
            filter: self.filter,
        })
    }
}
