// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disassociate_assets::_disassociate_assets_output::DisassociateAssetsOutputBuilder;

pub use crate::operation::disassociate_assets::_disassociate_assets_input::DisassociateAssetsInputBuilder;

/// Fluent builder constructing a request to `DisassociateAssets`.
///
/// <p>Disassociates a child asset from the given parent asset through a hierarchy defined in the parent asset's model.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateAssetsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::disassociate_assets::builders::DisassociateAssetsInputBuilder,
}
impl DisassociateAssetsFluentBuilder {
    /// Creates a new `DisassociateAssets`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::disassociate_assets::DisassociateAssets,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_assets::DisassociateAssetsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::disassociate_assets::DisassociateAssetsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_assets::DisassociateAssetsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the parent asset from which to disassociate the child asset.</p>
    pub fn asset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.asset_id(input.into());
        self
    }
    /// <p>The ID of the parent asset from which to disassociate the child asset.</p>
    pub fn set_asset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_asset_id(input);
        self
    }
    /// <p>The ID of a hierarchy in the parent asset's model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. You can use the hierarchy ID to identify the correct asset to disassociate. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn hierarchy_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hierarchy_id(input.into());
        self
    }
    /// <p>The ID of a hierarchy in the parent asset's model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. You can use the hierarchy ID to identify the correct asset to disassociate. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_hierarchy_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hierarchy_id(input);
        self
    }
    /// <p>The ID of the child asset to disassociate.</p>
    pub fn child_asset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.child_asset_id(input.into());
        self
    }
    /// <p>The ID of the child asset to disassociate.</p>
    pub fn set_child_asset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_child_asset_id(input);
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}
