// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAssetPropertyInput {
    /// <p>The ID of the asset to be updated.</p>
    pub asset_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the asset property to be updated.</p>
    pub property_id: ::std::option::Option<::std::string::String>,
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>If you omit this parameter, the alias is removed from the property.</p>
    pub property_alias: ::std::option::Option<::std::string::String>,
    /// <p>The MQTT notification state (enabled or disabled) for this asset property. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>If you omit this parameter, the notification state is set to <code>DISABLED</code>.</p>
    pub property_notification_state: ::std::option::Option<crate::types::PropertyNotificationState>,
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the <code>assetModelProperty</code> in the asset model.</p>
    pub property_unit: ::std::option::Option<::std::string::String>,
}
impl UpdateAssetPropertyInput {
    /// <p>The ID of the asset to be updated.</p>
    pub fn asset_id(&self) -> ::std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p>The ID of the asset property to be updated.</p>
    pub fn property_id(&self) -> ::std::option::Option<&str> {
        self.property_id.as_deref()
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>If you omit this parameter, the alias is removed from the property.</p>
    pub fn property_alias(&self) -> ::std::option::Option<&str> {
        self.property_alias.as_deref()
    }
    /// <p>The MQTT notification state (enabled or disabled) for this asset property. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>If you omit this parameter, the notification state is set to <code>DISABLED</code>.</p>
    pub fn property_notification_state(&self) -> ::std::option::Option<&crate::types::PropertyNotificationState> {
        self.property_notification_state.as_ref()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the <code>assetModelProperty</code> in the asset model.</p>
    pub fn property_unit(&self) -> ::std::option::Option<&str> {
        self.property_unit.as_deref()
    }
}
impl UpdateAssetPropertyInput {
    /// Creates a new builder-style object to manufacture [`UpdateAssetPropertyInput`](crate::operation::update_asset_property::UpdateAssetPropertyInput).
    pub fn builder() -> crate::operation::update_asset_property::builders::UpdateAssetPropertyInputBuilder {
        crate::operation::update_asset_property::builders::UpdateAssetPropertyInputBuilder::default()
    }
}

/// A builder for [`UpdateAssetPropertyInput`](crate::operation::update_asset_property::UpdateAssetPropertyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateAssetPropertyInputBuilder {
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) property_id: ::std::option::Option<::std::string::String>,
    pub(crate) property_alias: ::std::option::Option<::std::string::String>,
    pub(crate) property_notification_state: ::std::option::Option<crate::types::PropertyNotificationState>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) property_unit: ::std::option::Option<::std::string::String>,
}
impl UpdateAssetPropertyInputBuilder {
    /// <p>The ID of the asset to be updated.</p>
    /// This field is required.
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset to be updated.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the asset to be updated.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// <p>The ID of the asset property to be updated.</p>
    /// This field is required.
    pub fn property_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset property to be updated.</p>
    pub fn set_property_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property_id = input;
        self
    }
    /// <p>The ID of the asset property to be updated.</p>
    pub fn get_property_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.property_id
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>If you omit this parameter, the alias is removed from the property.</p>
    pub fn property_alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property_alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>If you omit this parameter, the alias is removed from the property.</p>
    pub fn set_property_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property_alias = input;
        self
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>If you omit this parameter, the alias is removed from the property.</p>
    pub fn get_property_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.property_alias
    }
    /// <p>The MQTT notification state (enabled or disabled) for this asset property. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>If you omit this parameter, the notification state is set to <code>DISABLED</code>.</p>
    pub fn property_notification_state(mut self, input: crate::types::PropertyNotificationState) -> Self {
        self.property_notification_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The MQTT notification state (enabled or disabled) for this asset property. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>If you omit this parameter, the notification state is set to <code>DISABLED</code>.</p>
    pub fn set_property_notification_state(mut self, input: ::std::option::Option<crate::types::PropertyNotificationState>) -> Self {
        self.property_notification_state = input;
        self
    }
    /// <p>The MQTT notification state (enabled or disabled) for this asset property. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>If you omit this parameter, the notification state is set to <code>DISABLED</code>.</p>
    pub fn get_property_notification_state(&self) -> &::std::option::Option<crate::types::PropertyNotificationState> {
        &self.property_notification_state
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the <code>assetModelProperty</code> in the asset model.</p>
    pub fn property_unit(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property_unit = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the <code>assetModelProperty</code> in the asset model.</p>
    pub fn set_property_unit(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property_unit = input;
        self
    }
    /// <p>The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the <code>assetModelProperty</code> in the asset model.</p>
    pub fn get_property_unit(&self) -> &::std::option::Option<::std::string::String> {
        &self.property_unit
    }
    /// Consumes the builder and constructs a [`UpdateAssetPropertyInput`](crate::operation::update_asset_property::UpdateAssetPropertyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_asset_property::UpdateAssetPropertyInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_asset_property::UpdateAssetPropertyInput {
            asset_id: self.asset_id,
            property_id: self.property_id,
            property_alias: self.property_alias,
            property_notification_state: self.property_notification_state,
            client_token: self.client_token,
            property_unit: self.property_unit,
        })
    }
}
