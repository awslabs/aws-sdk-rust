// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_asset_model_composite_model::_create_asset_model_composite_model_output::CreateAssetModelCompositeModelOutputBuilder;

pub use crate::operation::create_asset_model_composite_model::_create_asset_model_composite_model_input::CreateAssetModelCompositeModelInputBuilder;

impl crate::operation::create_asset_model_composite_model::builders::CreateAssetModelCompositeModelInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_asset_model_composite_model::CreateAssetModelCompositeModelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_asset_model_composite_model::CreateAssetModelCompositeModelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_asset_model_composite_model();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateAssetModelCompositeModel`.
///
/// <p>Creates a custom composite model from specified property and hierarchy definitions. There are two types of custom composite models, <code>inline</code> and <code>component-model-based</code>.</p>
/// <p>Use component-model-based custom composite models to define standard, reusable components. A component-model-based custom composite model consists of a name, a description, and the ID of the component model it references. A component-model-based custom composite model has no properties of its own; its referenced component model provides its associated properties to any created assets. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/custom-composite-models.html">Custom composite models (Components)</a> in the <i>IoT SiteWise User Guide</i>.</p>
/// <p>Use inline custom composite models to organize the properties of an asset model. The properties of inline custom composite models are local to the asset model where they are included and can't be used to create multiple assets.</p>
/// <p>To create a component-model-based model, specify the <code>composedAssetModelId</code> of an existing asset model with <code>assetModelType</code> of <code>COMPONENT_MODEL</code>.</p>
/// <p>To create an inline model, specify the <code>assetModelCompositeModelProperties</code> and don't include an <code>composedAssetModelId</code>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateAssetModelCompositeModelFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_asset_model_composite_model::builders::CreateAssetModelCompositeModelInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_asset_model_composite_model::CreateAssetModelCompositeModelOutput,
        crate::operation::create_asset_model_composite_model::CreateAssetModelCompositeModelError,
    > for CreateAssetModelCompositeModelFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_asset_model_composite_model::CreateAssetModelCompositeModelOutput,
            crate::operation::create_asset_model_composite_model::CreateAssetModelCompositeModelError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateAssetModelCompositeModelFluentBuilder {
    /// Creates a new `CreateAssetModelCompositeModel`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateAssetModelCompositeModel as a reference.
    pub fn as_input(&self) -> &crate::operation::create_asset_model_composite_model::builders::CreateAssetModelCompositeModelInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_asset_model_composite_model::CreateAssetModelCompositeModelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_asset_model_composite_model::CreateAssetModelCompositeModelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_asset_model_composite_model::CreateAssetModelCompositeModel::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_asset_model_composite_model::CreateAssetModelCompositeModel::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_asset_model_composite_model::CreateAssetModelCompositeModelOutput,
        crate::operation::create_asset_model_composite_model::CreateAssetModelCompositeModelError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the asset model this composite model is a part of.</p>
    pub fn asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.asset_model_id(input.into());
        self
    }
    /// <p>The ID of the asset model this composite model is a part of.</p>
    pub fn set_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_id(input);
        self
    }
    /// <p>The ID of the asset model this composite model is a part of.</p>
    pub fn get_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_asset_model_id()
    }
    /// <p>The ID of the parent composite model in this asset model relationship.</p>
    pub fn parent_asset_model_composite_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.parent_asset_model_composite_model_id(input.into());
        self
    }
    /// <p>The ID of the parent composite model in this asset model relationship.</p>
    pub fn set_parent_asset_model_composite_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_parent_asset_model_composite_model_id(input);
        self
    }
    /// <p>The ID of the parent composite model in this asset model relationship.</p>
    pub fn get_parent_asset_model_composite_model_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_parent_asset_model_composite_model_id()
    }
    /// <p>An external ID to assign to the composite model.</p>
    /// <p>If the composite model is a derived composite model, or one nested inside a component model, you can only set the external ID using <code>UpdateAssetModelCompositeModel</code> and specifying the derived ID of the model or property from the created model it's a part of.</p>
    pub fn asset_model_composite_model_external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.asset_model_composite_model_external_id(input.into());
        self
    }
    /// <p>An external ID to assign to the composite model.</p>
    /// <p>If the composite model is a derived composite model, or one nested inside a component model, you can only set the external ID using <code>UpdateAssetModelCompositeModel</code> and specifying the derived ID of the model or property from the created model it's a part of.</p>
    pub fn set_asset_model_composite_model_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_composite_model_external_id(input);
        self
    }
    /// <p>An external ID to assign to the composite model.</p>
    /// <p>If the composite model is a derived composite model, or one nested inside a component model, you can only set the external ID using <code>UpdateAssetModelCompositeModel</code> and specifying the derived ID of the model or property from the created model it's a part of.</p>
    pub fn get_asset_model_composite_model_external_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_asset_model_composite_model_external_id()
    }
    /// <p>The ID of the composite model. IoT SiteWise automatically generates a unique ID for you, so this parameter is never required. However, if you prefer to supply your own ID instead, you can specify it here in UUID format. If you specify your own ID, it must be globally unique.</p>
    pub fn asset_model_composite_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.asset_model_composite_model_id(input.into());
        self
    }
    /// <p>The ID of the composite model. IoT SiteWise automatically generates a unique ID for you, so this parameter is never required. However, if you prefer to supply your own ID instead, you can specify it here in UUID format. If you specify your own ID, it must be globally unique.</p>
    pub fn set_asset_model_composite_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_composite_model_id(input);
        self
    }
    /// <p>The ID of the composite model. IoT SiteWise automatically generates a unique ID for you, so this parameter is never required. However, if you prefer to supply your own ID instead, you can specify it here in UUID format. If you specify your own ID, it must be globally unique.</p>
    pub fn get_asset_model_composite_model_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_asset_model_composite_model_id()
    }
    /// <p>A description for the composite model.</p>
    pub fn asset_model_composite_model_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.asset_model_composite_model_description(input.into());
        self
    }
    /// <p>A description for the composite model.</p>
    pub fn set_asset_model_composite_model_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_composite_model_description(input);
        self
    }
    /// <p>A description for the composite model.</p>
    pub fn get_asset_model_composite_model_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_asset_model_composite_model_description()
    }
    /// <p>A unique, friendly name for the composite model.</p>
    pub fn asset_model_composite_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.asset_model_composite_model_name(input.into());
        self
    }
    /// <p>A unique, friendly name for the composite model.</p>
    pub fn set_asset_model_composite_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_composite_model_name(input);
        self
    }
    /// <p>A unique, friendly name for the composite model.</p>
    pub fn get_asset_model_composite_model_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_asset_model_composite_model_name()
    }
    /// <p>The composite model type. Valid values are <code>AWS/ALARM</code>, <code>CUSTOM</code>, or <code> AWS/L4E_ANOMALY</code>.</p>
    pub fn asset_model_composite_model_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.asset_model_composite_model_type(input.into());
        self
    }
    /// <p>The composite model type. Valid values are <code>AWS/ALARM</code>, <code>CUSTOM</code>, or <code> AWS/L4E_ANOMALY</code>.</p>
    pub fn set_asset_model_composite_model_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_composite_model_type(input);
        self
    }
    /// <p>The composite model type. Valid values are <code>AWS/ALARM</code>, <code>CUSTOM</code>, or <code> AWS/L4E_ANOMALY</code>.</p>
    pub fn get_asset_model_composite_model_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_asset_model_composite_model_type()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The ID of a composite model on this asset.</p>
    pub fn composed_asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.composed_asset_model_id(input.into());
        self
    }
    /// <p>The ID of a composite model on this asset.</p>
    pub fn set_composed_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_composed_asset_model_id(input);
        self
    }
    /// <p>The ID of a composite model on this asset.</p>
    pub fn get_composed_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_composed_asset_model_id()
    }
    ///
    /// Appends an item to `assetModelCompositeModelProperties`.
    ///
    /// To override the contents of this collection use [`set_asset_model_composite_model_properties`](Self::set_asset_model_composite_model_properties).
    ///
    /// <p>The property definitions of the composite model. For more information, see
    /// <link>.</p>
    /// <p>You can specify up to 200 properties per composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn asset_model_composite_model_properties(mut self, input: crate::types::AssetModelPropertyDefinition) -> Self {
        self.inner = self.inner.asset_model_composite_model_properties(input);
        self
    }
    /// <p>The property definitions of the composite model. For more information, see
    /// <link>.</p>
    /// <p>You can specify up to 200 properties per composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_asset_model_composite_model_properties(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AssetModelPropertyDefinition>>,
    ) -> Self {
        self.inner = self.inner.set_asset_model_composite_model_properties(input);
        self
    }
    /// <p>The property definitions of the composite model. For more information, see
    /// <link>.</p>
    /// <p>You can specify up to 200 properties per composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn get_asset_model_composite_model_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssetModelPropertyDefinition>> {
        self.inner.get_asset_model_composite_model_properties()
    }
}
