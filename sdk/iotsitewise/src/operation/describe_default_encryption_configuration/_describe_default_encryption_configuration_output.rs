// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDefaultEncryptionConfigurationOutput {
    /// <p>The type of encryption used for the encryption configuration.</p>
    #[doc(hidden)]
    pub encryption_type: std::option::Option<crate::types::EncryptionType>,
    /// <p>The key ARN of the customer managed key used for KMS encryption if you use <code>KMS_BASED_ENCRYPTION</code>.</p>
    #[doc(hidden)]
    pub kms_key_arn: std::option::Option<std::string::String>,
    /// <p>The status of the account configuration. This contains the <code>ConfigurationState</code>. If there's an error, it also contains the <code>ErrorDetails</code>.</p>
    #[doc(hidden)]
    pub configuration_status: std::option::Option<crate::types::ConfigurationStatus>,
    _request_id: Option<String>,
}
impl DescribeDefaultEncryptionConfigurationOutput {
    /// <p>The type of encryption used for the encryption configuration.</p>
    pub fn encryption_type(&self) -> std::option::Option<&crate::types::EncryptionType> {
        self.encryption_type.as_ref()
    }
    /// <p>The key ARN of the customer managed key used for KMS encryption if you use <code>KMS_BASED_ENCRYPTION</code>.</p>
    pub fn kms_key_arn(&self) -> std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The status of the account configuration. This contains the <code>ConfigurationState</code>. If there's an error, it also contains the <code>ErrorDetails</code>.</p>
    pub fn configuration_status(&self) -> std::option::Option<&crate::types::ConfigurationStatus> {
        self.configuration_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeDefaultEncryptionConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDefaultEncryptionConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDefaultEncryptionConfigurationOutput`](crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationOutput).
    pub fn builder() -> crate::operation::describe_default_encryption_configuration::builders::DescribeDefaultEncryptionConfigurationOutputBuilder{
        crate::operation::describe_default_encryption_configuration::builders::DescribeDefaultEncryptionConfigurationOutputBuilder::default()
    }
}

/// A builder for [`DescribeDefaultEncryptionConfigurationOutput`](crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDefaultEncryptionConfigurationOutputBuilder {
    pub(crate) encryption_type: std::option::Option<crate::types::EncryptionType>,
    pub(crate) kms_key_arn: std::option::Option<std::string::String>,
    pub(crate) configuration_status: std::option::Option<crate::types::ConfigurationStatus>,
    _request_id: Option<String>,
}
impl DescribeDefaultEncryptionConfigurationOutputBuilder {
    /// <p>The type of encryption used for the encryption configuration.</p>
    pub fn encryption_type(mut self, input: crate::types::EncryptionType) -> Self {
        self.encryption_type = Some(input);
        self
    }
    /// <p>The type of encryption used for the encryption configuration.</p>
    pub fn set_encryption_type(
        mut self,
        input: std::option::Option<crate::types::EncryptionType>,
    ) -> Self {
        self.encryption_type = input;
        self
    }
    /// <p>The key ARN of the customer managed key used for KMS encryption if you use <code>KMS_BASED_ENCRYPTION</code>.</p>
    pub fn kms_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_arn = Some(input.into());
        self
    }
    /// <p>The key ARN of the customer managed key used for KMS encryption if you use <code>KMS_BASED_ENCRYPTION</code>.</p>
    pub fn set_kms_key_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The status of the account configuration. This contains the <code>ConfigurationState</code>. If there's an error, it also contains the <code>ErrorDetails</code>.</p>
    pub fn configuration_status(mut self, input: crate::types::ConfigurationStatus) -> Self {
        self.configuration_status = Some(input);
        self
    }
    /// <p>The status of the account configuration. This contains the <code>ConfigurationState</code>. If there's an error, it also contains the <code>ErrorDetails</code>.</p>
    pub fn set_configuration_status(
        mut self,
        input: std::option::Option<crate::types::ConfigurationStatus>,
    ) -> Self {
        self.configuration_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDefaultEncryptionConfigurationOutput`](crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationOutput).
    pub fn build(self) -> crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationOutput{
        crate::operation::describe_default_encryption_configuration::DescribeDefaultEncryptionConfigurationOutput {
            encryption_type: self.encryption_type
            ,
            kms_key_arn: self.kms_key_arn
            ,
            configuration_status: self.configuration_status
            ,
            _request_id: self._request_id,
        }
    }
}
