// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disassociate_time_series_from_asset_property::_disassociate_time_series_from_asset_property_output::DisassociateTimeSeriesFromAssetPropertyOutputBuilder;

pub use crate::operation::disassociate_time_series_from_asset_property::_disassociate_time_series_from_asset_property_input::DisassociateTimeSeriesFromAssetPropertyInputBuilder;

/// Fluent builder constructing a request to `DisassociateTimeSeriesFromAssetProperty`.
///
/// <p>Disassociates a time series (data stream) from an asset property.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateTimeSeriesFromAssetPropertyFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::disassociate_time_series_from_asset_property::builders::DisassociateTimeSeriesFromAssetPropertyInputBuilder
            }
impl DisassociateTimeSeriesFromAssetPropertyFluentBuilder {
    /// Creates a new `DisassociateTimeSeriesFromAssetProperty`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetProperty, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyOutput, aws_smithy_http::result::SdkError<crate::operation::disassociate_time_series_from_asset_property::DisassociateTimeSeriesFromAssetPropertyError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The alias that identifies the time series.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alias(input.into());
        self
    }
    /// <p>The alias that identifies the time series.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alias(input);
        self
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn asset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.asset_id(input.into());
        self
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn set_asset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_asset_id(input);
        self
    }
    /// <p>The ID of the asset property.</p>
    pub fn property_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.property_id(input.into());
        self
    }
    /// <p>The ID of the asset property.</p>
    pub fn set_property_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_property_id(input);
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}
