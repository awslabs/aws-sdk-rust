// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTimeSeriesOutput {
    /// <p>The ID of the asset in which the asset property was created.</p>
    #[doc(hidden)]
    pub asset_id: std::option::Option<std::string::String>,
    /// <p>The ID of the asset property.</p>
    #[doc(hidden)]
    pub property_id: std::option::Option<std::string::String>,
    /// <p>The alias that identifies the time series.</p>
    #[doc(hidden)]
    pub alias: std::option::Option<std::string::String>,
    /// <p>The ID of the time series.</p>
    #[doc(hidden)]
    pub time_series_id: std::option::Option<std::string::String>,
    /// <p>The data type of the time series.</p>
    /// <p>If you specify <code>STRUCT</code>, you must also specify <code>dataTypeSpec</code> to identify the type of the structure for this time series.</p>
    #[doc(hidden)]
    pub data_type: std::option::Option<crate::types::PropertyDataType>,
    /// <p>The data type of the structure for this time series. This parameter is required for time series that have the <code>STRUCT</code> data type.</p>
    /// <p>The options for this parameter depend on the type of the composite model in which you created the asset property that is associated with your time series. Use <code>AWS/ALARM_STATE</code> for alarm state in alarm composite models.</p>
    #[doc(hidden)]
    pub data_type_spec: std::option::Option<std::string::String>,
    /// <p>The date that the time series was created, in Unix epoch time.</p>
    #[doc(hidden)]
    pub time_series_creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date that the time series was last updated, in Unix epoch time.</p>
    #[doc(hidden)]
    pub time_series_last_update_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeTimeSeriesOutput {
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn asset_id(&self) -> std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p>The ID of the asset property.</p>
    pub fn property_id(&self) -> std::option::Option<&str> {
        self.property_id.as_deref()
    }
    /// <p>The alias that identifies the time series.</p>
    pub fn alias(&self) -> std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>The ID of the time series.</p>
    pub fn time_series_id(&self) -> std::option::Option<&str> {
        self.time_series_id.as_deref()
    }
    /// <p>The data type of the time series.</p>
    /// <p>If you specify <code>STRUCT</code>, you must also specify <code>dataTypeSpec</code> to identify the type of the structure for this time series.</p>
    pub fn data_type(&self) -> std::option::Option<&crate::types::PropertyDataType> {
        self.data_type.as_ref()
    }
    /// <p>The data type of the structure for this time series. This parameter is required for time series that have the <code>STRUCT</code> data type.</p>
    /// <p>The options for this parameter depend on the type of the composite model in which you created the asset property that is associated with your time series. Use <code>AWS/ALARM_STATE</code> for alarm state in alarm composite models.</p>
    pub fn data_type_spec(&self) -> std::option::Option<&str> {
        self.data_type_spec.as_deref()
    }
    /// <p>The date that the time series was created, in Unix epoch time.</p>
    pub fn time_series_creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.time_series_creation_date.as_ref()
    }
    /// <p>The date that the time series was last updated, in Unix epoch time.</p>
    pub fn time_series_last_update_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.time_series_last_update_date.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeTimeSeriesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeTimeSeriesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTimeSeriesOutput`](crate::operation::describe_time_series::DescribeTimeSeriesOutput).
    pub fn builder(
    ) -> crate::operation::describe_time_series::builders::DescribeTimeSeriesOutputBuilder {
        crate::operation::describe_time_series::builders::DescribeTimeSeriesOutputBuilder::default()
    }
}

/// A builder for [`DescribeTimeSeriesOutput`](crate::operation::describe_time_series::DescribeTimeSeriesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeTimeSeriesOutputBuilder {
    pub(crate) asset_id: std::option::Option<std::string::String>,
    pub(crate) property_id: std::option::Option<std::string::String>,
    pub(crate) alias: std::option::Option<std::string::String>,
    pub(crate) time_series_id: std::option::Option<std::string::String>,
    pub(crate) data_type: std::option::Option<crate::types::PropertyDataType>,
    pub(crate) data_type_spec: std::option::Option<std::string::String>,
    pub(crate) time_series_creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) time_series_last_update_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeTimeSeriesOutputBuilder {
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn asset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_id = Some(input.into());
        self
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn set_asset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the asset property.</p>
    pub fn property_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.property_id = Some(input.into());
        self
    }
    /// <p>The ID of the asset property.</p>
    pub fn set_property_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.property_id = input;
        self
    }
    /// <p>The alias that identifies the time series.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.alias = Some(input.into());
        self
    }
    /// <p>The alias that identifies the time series.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>The ID of the time series.</p>
    pub fn time_series_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.time_series_id = Some(input.into());
        self
    }
    /// <p>The ID of the time series.</p>
    pub fn set_time_series_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.time_series_id = input;
        self
    }
    /// <p>The data type of the time series.</p>
    /// <p>If you specify <code>STRUCT</code>, you must also specify <code>dataTypeSpec</code> to identify the type of the structure for this time series.</p>
    pub fn data_type(mut self, input: crate::types::PropertyDataType) -> Self {
        self.data_type = Some(input);
        self
    }
    /// <p>The data type of the time series.</p>
    /// <p>If you specify <code>STRUCT</code>, you must also specify <code>dataTypeSpec</code> to identify the type of the structure for this time series.</p>
    pub fn set_data_type(
        mut self,
        input: std::option::Option<crate::types::PropertyDataType>,
    ) -> Self {
        self.data_type = input;
        self
    }
    /// <p>The data type of the structure for this time series. This parameter is required for time series that have the <code>STRUCT</code> data type.</p>
    /// <p>The options for this parameter depend on the type of the composite model in which you created the asset property that is associated with your time series. Use <code>AWS/ALARM_STATE</code> for alarm state in alarm composite models.</p>
    pub fn data_type_spec(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_type_spec = Some(input.into());
        self
    }
    /// <p>The data type of the structure for this time series. This parameter is required for time series that have the <code>STRUCT</code> data type.</p>
    /// <p>The options for this parameter depend on the type of the composite model in which you created the asset property that is associated with your time series. Use <code>AWS/ALARM_STATE</code> for alarm state in alarm composite models.</p>
    pub fn set_data_type_spec(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_type_spec = input;
        self
    }
    /// <p>The date that the time series was created, in Unix epoch time.</p>
    pub fn time_series_creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.time_series_creation_date = Some(input);
        self
    }
    /// <p>The date that the time series was created, in Unix epoch time.</p>
    pub fn set_time_series_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.time_series_creation_date = input;
        self
    }
    /// <p>The date that the time series was last updated, in Unix epoch time.</p>
    pub fn time_series_last_update_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.time_series_last_update_date = Some(input);
        self
    }
    /// <p>The date that the time series was last updated, in Unix epoch time.</p>
    pub fn set_time_series_last_update_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.time_series_last_update_date = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeTimeSeriesOutput`](crate::operation::describe_time_series::DescribeTimeSeriesOutput).
    pub fn build(self) -> crate::operation::describe_time_series::DescribeTimeSeriesOutput {
        crate::operation::describe_time_series::DescribeTimeSeriesOutput {
            asset_id: self.asset_id,
            property_id: self.property_id,
            alias: self.alias,
            time_series_id: self.time_series_id,
            data_type: self.data_type,
            data_type_spec: self.data_type_spec,
            time_series_creation_date: self.time_series_creation_date,
            time_series_last_update_date: self.time_series_last_update_date,
            _request_id: self._request_id,
        }
    }
}
