// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAssetInput {
    /// <p>A friendly name for the asset.</p>
    #[doc(hidden)]
    pub asset_name: std::option::Option<std::string::String>,
    /// <p>The ID of the asset model from which to create the asset.</p>
    #[doc(hidden)]
    pub asset_model_id: std::option::Option<std::string::String>,
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>A list of key-value pairs that contain metadata for the asset. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A description for the asset.</p>
    #[doc(hidden)]
    pub asset_description: std::option::Option<std::string::String>,
}
impl CreateAssetInput {
    /// <p>A friendly name for the asset.</p>
    pub fn asset_name(&self) -> std::option::Option<&str> {
        self.asset_name.as_deref()
    }
    /// <p>The ID of the asset model from which to create the asset.</p>
    pub fn asset_model_id(&self) -> std::option::Option<&str> {
        self.asset_model_id.as_deref()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A list of key-value pairs that contain metadata for the asset. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>A description for the asset.</p>
    pub fn asset_description(&self) -> std::option::Option<&str> {
        self.asset_description.as_deref()
    }
}
impl CreateAssetInput {
    /// Creates a new builder-style object to manufacture [`CreateAssetInput`](crate::operation::create_asset::CreateAssetInput).
    pub fn builder() -> crate::operation::create_asset::builders::CreateAssetInputBuilder {
        crate::operation::create_asset::builders::CreateAssetInputBuilder::default()
    }
}

/// A builder for [`CreateAssetInput`](crate::operation::create_asset::CreateAssetInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAssetInputBuilder {
    pub(crate) asset_name: std::option::Option<std::string::String>,
    pub(crate) asset_model_id: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) asset_description: std::option::Option<std::string::String>,
}
impl CreateAssetInputBuilder {
    /// <p>A friendly name for the asset.</p>
    pub fn asset_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_name = Some(input.into());
        self
    }
    /// <p>A friendly name for the asset.</p>
    pub fn set_asset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asset_name = input;
        self
    }
    /// <p>The ID of the asset model from which to create the asset.</p>
    pub fn asset_model_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_model_id = Some(input.into());
        self
    }
    /// <p>The ID of the asset model from which to create the asset.</p>
    pub fn set_asset_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asset_model_id = input;
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of key-value pairs that contain metadata for the asset. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A list of key-value pairs that contain metadata for the asset. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>A description for the asset.</p>
    pub fn asset_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_description = Some(input.into());
        self
    }
    /// <p>A description for the asset.</p>
    pub fn set_asset_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.asset_description = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateAssetInput`](crate::operation::create_asset::CreateAssetInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_asset::CreateAssetInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_asset::CreateAssetInput {
            asset_name: self.asset_name,
            asset_model_id: self.asset_model_id,
            client_token: self.client_token,
            tags: self.tags,
            asset_description: self.asset_description,
        })
    }
}
