// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTimeSeriesInput {
    /// <p>The token to be used for the next set of paginated results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return for each paginated request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub asset_id: ::std::option::Option<::std::string::String>,
    /// <p>The alias prefix of the time series.</p>
    pub alias_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The type of the time series. The time series type can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ASSOCIATED</code> – The time series is associated with an asset property.</p> </li>
    /// <li> <p> <code>DISASSOCIATED</code> – The time series isn't associated with any asset property.</p> </li>
    /// </ul>
    pub time_series_type: ::std::option::Option<crate::types::ListTimeSeriesType>,
}
impl ListTimeSeriesInput {
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return for each paginated request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn asset_id(&self) -> ::std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p>The alias prefix of the time series.</p>
    pub fn alias_prefix(&self) -> ::std::option::Option<&str> {
        self.alias_prefix.as_deref()
    }
    /// <p>The type of the time series. The time series type can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ASSOCIATED</code> – The time series is associated with an asset property.</p> </li>
    /// <li> <p> <code>DISASSOCIATED</code> – The time series isn't associated with any asset property.</p> </li>
    /// </ul>
    pub fn time_series_type(&self) -> ::std::option::Option<&crate::types::ListTimeSeriesType> {
        self.time_series_type.as_ref()
    }
}
impl ListTimeSeriesInput {
    /// Creates a new builder-style object to manufacture [`ListTimeSeriesInput`](crate::operation::list_time_series::ListTimeSeriesInput).
    pub fn builder() -> crate::operation::list_time_series::builders::ListTimeSeriesInputBuilder {
        crate::operation::list_time_series::builders::ListTimeSeriesInputBuilder::default()
    }
}

/// A builder for [`ListTimeSeriesInput`](crate::operation::list_time_series::ListTimeSeriesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListTimeSeriesInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) alias_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) time_series_type: ::std::option::Option<crate::types::ListTimeSeriesType>,
}
impl ListTimeSeriesInputBuilder {
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return for each paginated request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return for each paginated request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return for each paginated request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// <p>The alias prefix of the time series.</p>
    pub fn alias_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alias prefix of the time series.</p>
    pub fn set_alias_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias_prefix = input;
        self
    }
    /// <p>The alias prefix of the time series.</p>
    pub fn get_alias_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias_prefix
    }
    /// <p>The type of the time series. The time series type can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ASSOCIATED</code> – The time series is associated with an asset property.</p> </li>
    /// <li> <p> <code>DISASSOCIATED</code> – The time series isn't associated with any asset property.</p> </li>
    /// </ul>
    pub fn time_series_type(mut self, input: crate::types::ListTimeSeriesType) -> Self {
        self.time_series_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the time series. The time series type can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ASSOCIATED</code> – The time series is associated with an asset property.</p> </li>
    /// <li> <p> <code>DISASSOCIATED</code> – The time series isn't associated with any asset property.</p> </li>
    /// </ul>
    pub fn set_time_series_type(mut self, input: ::std::option::Option<crate::types::ListTimeSeriesType>) -> Self {
        self.time_series_type = input;
        self
    }
    /// <p>The type of the time series. The time series type can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ASSOCIATED</code> – The time series is associated with an asset property.</p> </li>
    /// <li> <p> <code>DISASSOCIATED</code> – The time series isn't associated with any asset property.</p> </li>
    /// </ul>
    pub fn get_time_series_type(&self) -> &::std::option::Option<crate::types::ListTimeSeriesType> {
        &self.time_series_type
    }
    /// Consumes the builder and constructs a [`ListTimeSeriesInput`](crate::operation::list_time_series::ListTimeSeriesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_time_series::ListTimeSeriesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_time_series::ListTimeSeriesInput {
            next_token: self.next_token,
            max_results: self.max_results,
            asset_id: self.asset_id,
            alias_prefix: self.alias_prefix,
            time_series_type: self.time_series_type,
        })
    }
}
