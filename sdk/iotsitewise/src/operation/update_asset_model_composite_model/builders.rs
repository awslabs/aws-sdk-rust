// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_asset_model_composite_model::_update_asset_model_composite_model_output::UpdateAssetModelCompositeModelOutputBuilder;

pub use crate::operation::update_asset_model_composite_model::_update_asset_model_composite_model_input::UpdateAssetModelCompositeModelInputBuilder;

impl crate::operation::update_asset_model_composite_model::builders::UpdateAssetModelCompositeModelInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_asset_model_composite_model();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateAssetModelCompositeModel`.
///
/// <p>Updates a composite model and all of the assets that were created from the model. Each asset created from the model inherits the updated asset model's property and hierarchy definitions. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-assets-and-models.html">Updating assets and models</a> in the <i>IoT SiteWise User Guide</i>.</p><important>
/// <p>If you remove a property from a composite asset model, IoT SiteWise deletes all previous data for that property. You canâ€™t change the type or data type of an existing property.</p>
/// <p>To replace an existing composite asset model property with a new one with the same <code>name</code>, do the following:</p>
/// <ol>
/// <li>
/// <p>Submit an <code>UpdateAssetModelCompositeModel</code> request with the entire existing property removed.</p></li>
/// <li>
/// <p>Submit a second <code>UpdateAssetModelCompositeModel</code> request that includes the new property. The new asset property will have the same <code>name</code> as the previous one and IoT SiteWise will generate a new unique <code>id</code>.</p></li>
/// </ol>
/// </important>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateAssetModelCompositeModelFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_asset_model_composite_model::builders::UpdateAssetModelCompositeModelInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelOutput,
        crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelError,
    > for UpdateAssetModelCompositeModelFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelOutput,
            crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateAssetModelCompositeModelFluentBuilder {
    /// Creates a new `UpdateAssetModelCompositeModel`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateAssetModelCompositeModel as a reference.
    pub fn as_input(&self) -> &crate::operation::update_asset_model_composite_model::builders::UpdateAssetModelCompositeModelInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModel::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModel::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelOutput,
        crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the asset model, in UUID format.</p>
    pub fn asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.asset_model_id(input.into());
        self
    }
    /// <p>The ID of the asset model, in UUID format.</p>
    pub fn set_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_id(input);
        self
    }
    /// <p>The ID of the asset model, in UUID format.</p>
    pub fn get_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_asset_model_id()
    }
    /// <p>The ID of a composite model on this asset model.</p>
    pub fn asset_model_composite_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.asset_model_composite_model_id(input.into());
        self
    }
    /// <p>The ID of a composite model on this asset model.</p>
    pub fn set_asset_model_composite_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_composite_model_id(input);
        self
    }
    /// <p>The ID of a composite model on this asset model.</p>
    pub fn get_asset_model_composite_model_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_asset_model_composite_model_id()
    }
    /// <p>An external ID to assign to the asset model. You can only set the external ID of the asset model if it wasn't set when it was created, or you're setting it to the exact same thing as when it was created.</p>
    pub fn asset_model_composite_model_external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.asset_model_composite_model_external_id(input.into());
        self
    }
    /// <p>An external ID to assign to the asset model. You can only set the external ID of the asset model if it wasn't set when it was created, or you're setting it to the exact same thing as when it was created.</p>
    pub fn set_asset_model_composite_model_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_composite_model_external_id(input);
        self
    }
    /// <p>An external ID to assign to the asset model. You can only set the external ID of the asset model if it wasn't set when it was created, or you're setting it to the exact same thing as when it was created.</p>
    pub fn get_asset_model_composite_model_external_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_asset_model_composite_model_external_id()
    }
    /// <p>A description for the composite model.</p>
    pub fn asset_model_composite_model_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.asset_model_composite_model_description(input.into());
        self
    }
    /// <p>A description for the composite model.</p>
    pub fn set_asset_model_composite_model_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_composite_model_description(input);
        self
    }
    /// <p>A description for the composite model.</p>
    pub fn get_asset_model_composite_model_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_asset_model_composite_model_description()
    }
    /// <p>A unique, friendly name for the composite model.</p>
    pub fn asset_model_composite_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.asset_model_composite_model_name(input.into());
        self
    }
    /// <p>A unique, friendly name for the composite model.</p>
    pub fn set_asset_model_composite_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_composite_model_name(input);
        self
    }
    /// <p>A unique, friendly name for the composite model.</p>
    pub fn get_asset_model_composite_model_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_asset_model_composite_model_name()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    ///
    /// Appends an item to `assetModelCompositeModelProperties`.
    ///
    /// To override the contents of this collection use [`set_asset_model_composite_model_properties`](Self::set_asset_model_composite_model_properties).
    ///
    /// <p>The property definitions of the composite model. For more information, see
    /// <link>.</p>
    /// <p>You can specify up to 200 properties per composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn asset_model_composite_model_properties(mut self, input: crate::types::AssetModelProperty) -> Self {
        self.inner = self.inner.asset_model_composite_model_properties(input);
        self
    }
    /// <p>The property definitions of the composite model. For more information, see
    /// <link>.</p>
    /// <p>You can specify up to 200 properties per composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_asset_model_composite_model_properties(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AssetModelProperty>>,
    ) -> Self {
        self.inner = self.inner.set_asset_model_composite_model_properties(input);
        self
    }
    /// <p>The property definitions of the composite model. For more information, see
    /// <link>.</p>
    /// <p>You can specify up to 200 properties per composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn get_asset_model_composite_model_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssetModelProperty>> {
        self.inner.get_asset_model_composite_model_properties()
    }
}
