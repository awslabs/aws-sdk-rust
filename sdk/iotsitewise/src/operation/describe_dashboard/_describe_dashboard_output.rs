// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDashboardOutput {
    /// <p>The ID of the dashboard.</p>
    #[doc(hidden)]
    pub dashboard_id: std::option::Option<std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the dashboard, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:dashboard/${DashboardId}</code> </p>
    #[doc(hidden)]
    pub dashboard_arn: std::option::Option<std::string::String>,
    /// <p>The name of the dashboard.</p>
    #[doc(hidden)]
    pub dashboard_name: std::option::Option<std::string::String>,
    /// <p>The ID of the project that the dashboard is in.</p>
    #[doc(hidden)]
    pub project_id: std::option::Option<std::string::String>,
    /// <p>The dashboard's description.</p>
    #[doc(hidden)]
    pub dashboard_description: std::option::Option<std::string::String>,
    /// <p>The dashboard's definition JSON literal. For detailed information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html">Creating dashboards (CLI)</a> in the <i>IoT SiteWise User Guide</i>.</p>
    #[doc(hidden)]
    pub dashboard_definition: std::option::Option<std::string::String>,
    /// <p>The date the dashboard was created, in Unix epoch time.</p>
    #[doc(hidden)]
    pub dashboard_creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date the dashboard was last updated, in Unix epoch time.</p>
    #[doc(hidden)]
    pub dashboard_last_update_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeDashboardOutput {
    /// <p>The ID of the dashboard.</p>
    pub fn dashboard_id(&self) -> std::option::Option<&str> {
        self.dashboard_id.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the dashboard, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:dashboard/${DashboardId}</code> </p>
    pub fn dashboard_arn(&self) -> std::option::Option<&str> {
        self.dashboard_arn.as_deref()
    }
    /// <p>The name of the dashboard.</p>
    pub fn dashboard_name(&self) -> std::option::Option<&str> {
        self.dashboard_name.as_deref()
    }
    /// <p>The ID of the project that the dashboard is in.</p>
    pub fn project_id(&self) -> std::option::Option<&str> {
        self.project_id.as_deref()
    }
    /// <p>The dashboard's description.</p>
    pub fn dashboard_description(&self) -> std::option::Option<&str> {
        self.dashboard_description.as_deref()
    }
    /// <p>The dashboard's definition JSON literal. For detailed information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html">Creating dashboards (CLI)</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn dashboard_definition(&self) -> std::option::Option<&str> {
        self.dashboard_definition.as_deref()
    }
    /// <p>The date the dashboard was created, in Unix epoch time.</p>
    pub fn dashboard_creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.dashboard_creation_date.as_ref()
    }
    /// <p>The date the dashboard was last updated, in Unix epoch time.</p>
    pub fn dashboard_last_update_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.dashboard_last_update_date.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeDashboardOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDashboardOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDashboardOutput`](crate::operation::describe_dashboard::DescribeDashboardOutput).
    pub fn builder(
    ) -> crate::operation::describe_dashboard::builders::DescribeDashboardOutputBuilder {
        crate::operation::describe_dashboard::builders::DescribeDashboardOutputBuilder::default()
    }
}

/// A builder for [`DescribeDashboardOutput`](crate::operation::describe_dashboard::DescribeDashboardOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDashboardOutputBuilder {
    pub(crate) dashboard_id: std::option::Option<std::string::String>,
    pub(crate) dashboard_arn: std::option::Option<std::string::String>,
    pub(crate) dashboard_name: std::option::Option<std::string::String>,
    pub(crate) project_id: std::option::Option<std::string::String>,
    pub(crate) dashboard_description: std::option::Option<std::string::String>,
    pub(crate) dashboard_definition: std::option::Option<std::string::String>,
    pub(crate) dashboard_creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) dashboard_last_update_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeDashboardOutputBuilder {
    /// <p>The ID of the dashboard.</p>
    pub fn dashboard_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_id = Some(input.into());
        self
    }
    /// <p>The ID of the dashboard.</p>
    pub fn set_dashboard_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dashboard_id = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the dashboard, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:dashboard/${DashboardId}</code> </p>
    pub fn dashboard_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_arn = Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the dashboard, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:dashboard/${DashboardId}</code> </p>
    pub fn set_dashboard_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dashboard_arn = input;
        self
    }
    /// <p>The name of the dashboard.</p>
    pub fn dashboard_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_name = Some(input.into());
        self
    }
    /// <p>The name of the dashboard.</p>
    pub fn set_dashboard_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dashboard_name = input;
        self
    }
    /// <p>The ID of the project that the dashboard is in.</p>
    pub fn project_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_id = Some(input.into());
        self
    }
    /// <p>The ID of the project that the dashboard is in.</p>
    pub fn set_project_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project_id = input;
        self
    }
    /// <p>The dashboard's description.</p>
    pub fn dashboard_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_description = Some(input.into());
        self
    }
    /// <p>The dashboard's description.</p>
    pub fn set_dashboard_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dashboard_description = input;
        self
    }
    /// <p>The dashboard's definition JSON literal. For detailed information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html">Creating dashboards (CLI)</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn dashboard_definition(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_definition = Some(input.into());
        self
    }
    /// <p>The dashboard's definition JSON literal. For detailed information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html">Creating dashboards (CLI)</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_dashboard_definition(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dashboard_definition = input;
        self
    }
    /// <p>The date the dashboard was created, in Unix epoch time.</p>
    pub fn dashboard_creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.dashboard_creation_date = Some(input);
        self
    }
    /// <p>The date the dashboard was created, in Unix epoch time.</p>
    pub fn set_dashboard_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.dashboard_creation_date = input;
        self
    }
    /// <p>The date the dashboard was last updated, in Unix epoch time.</p>
    pub fn dashboard_last_update_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.dashboard_last_update_date = Some(input);
        self
    }
    /// <p>The date the dashboard was last updated, in Unix epoch time.</p>
    pub fn set_dashboard_last_update_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.dashboard_last_update_date = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDashboardOutput`](crate::operation::describe_dashboard::DescribeDashboardOutput).
    pub fn build(self) -> crate::operation::describe_dashboard::DescribeDashboardOutput {
        crate::operation::describe_dashboard::DescribeDashboardOutput {
            dashboard_id: self.dashboard_id,
            dashboard_arn: self.dashboard_arn,
            dashboard_name: self.dashboard_name,
            project_id: self.project_id,
            dashboard_description: self.dashboard_description,
            dashboard_definition: self.dashboard_definition,
            dashboard_creation_date: self.dashboard_creation_date,
            dashboard_last_update_date: self.dashboard_last_update_date,
            _request_id: self._request_id,
        }
    }
}
