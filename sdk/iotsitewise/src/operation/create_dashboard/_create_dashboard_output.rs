// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDashboardOutput {
    /// <p>The ID of the dashboard.</p>
    #[doc(hidden)]
    pub dashboard_id: std::option::Option<std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the dashboard, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:dashboard/${DashboardId}</code> </p>
    #[doc(hidden)]
    pub dashboard_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateDashboardOutput {
    /// <p>The ID of the dashboard.</p>
    pub fn dashboard_id(&self) -> std::option::Option<&str> {
        self.dashboard_id.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the dashboard, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:dashboard/${DashboardId}</code> </p>
    pub fn dashboard_arn(&self) -> std::option::Option<&str> {
        self.dashboard_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateDashboardOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateDashboardOutput {
    /// Creates a new builder-style object to manufacture [`CreateDashboardOutput`](crate::operation::create_dashboard::CreateDashboardOutput).
    pub fn builder() -> crate::operation::create_dashboard::builders::CreateDashboardOutputBuilder {
        crate::operation::create_dashboard::builders::CreateDashboardOutputBuilder::default()
    }
}

/// A builder for [`CreateDashboardOutput`](crate::operation::create_dashboard::CreateDashboardOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDashboardOutputBuilder {
    pub(crate) dashboard_id: std::option::Option<std::string::String>,
    pub(crate) dashboard_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateDashboardOutputBuilder {
    /// <p>The ID of the dashboard.</p>
    pub fn dashboard_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_id = Some(input.into());
        self
    }
    /// <p>The ID of the dashboard.</p>
    pub fn set_dashboard_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dashboard_id = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the dashboard, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:dashboard/${DashboardId}</code> </p>
    pub fn dashboard_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_arn = Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the dashboard, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:dashboard/${DashboardId}</code> </p>
    pub fn set_dashboard_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dashboard_arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateDashboardOutput`](crate::operation::create_dashboard::CreateDashboardOutput).
    pub fn build(self) -> crate::operation::create_dashboard::CreateDashboardOutput {
        crate::operation::create_dashboard::CreateDashboardOutput {
            dashboard_id: self.dashboard_id,
            dashboard_arn: self.dashboard_arn,
            _request_id: self._request_id,
        }
    }
}
