// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_portal::_update_portal_output::UpdatePortalOutputBuilder;

pub use crate::operation::update_portal::_update_portal_input::UpdatePortalInputBuilder;

/// Fluent builder constructing a request to `UpdatePortal`.
///
/// <p>Updates an IoT SiteWise Monitor portal.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePortalFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_portal::builders::UpdatePortalInputBuilder,
}
impl UpdatePortalFluentBuilder {
    /// Creates a new `UpdatePortal`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_portal::UpdatePortal,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_portal::UpdatePortalError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_portal::UpdatePortalOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_portal::UpdatePortalError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the portal to update.</p>
    pub fn portal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.portal_id(input.into());
        self
    }
    /// <p>The ID of the portal to update.</p>
    pub fn set_portal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_portal_id(input);
        self
    }
    /// <p>A new friendly name for the portal.</p>
    pub fn portal_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.portal_name(input.into());
        self
    }
    /// <p>A new friendly name for the portal.</p>
    pub fn set_portal_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_portal_name(input);
        self
    }
    /// <p>A new description for the portal.</p>
    pub fn portal_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.portal_description(input.into());
        self
    }
    /// <p>A new description for the portal.</p>
    pub fn set_portal_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_portal_description(input);
        self
    }
    /// <p>The Amazon Web Services administrator's contact email address.</p>
    pub fn portal_contact_email(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.portal_contact_email(input.into());
        self
    }
    /// <p>The Amazon Web Services administrator's contact email address.</p>
    pub fn set_portal_contact_email(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_portal_contact_email(input);
        self
    }
    /// <p>Contains an image that is one of the following:</p>
    /// <ul>
    /// <li> <p>An image file. Choose this option to upload a new image.</p> </li>
    /// <li> <p>The ID of an existing image. Choose this option to keep an existing image.</p> </li>
    /// </ul>
    pub fn portal_logo_image(mut self, input: crate::types::Image) -> Self {
        self.inner = self.inner.portal_logo_image(input);
        self
    }
    /// <p>Contains an image that is one of the following:</p>
    /// <ul>
    /// <li> <p>An image file. Choose this option to upload a new image.</p> </li>
    /// <li> <p>The ID of an existing image. Choose this option to keep an existing image.</p> </li>
    /// </ul>
    pub fn set_portal_logo_image(
        mut self,
        input: std::option::Option<crate::types::Image>,
    ) -> Self {
        self.inner = self.inner.set_portal_logo_image(input);
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of a service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of a service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The email address that sends alarm notifications.</p>
    pub fn notification_sender_email(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notification_sender_email(input.into());
        self
    }
    /// <p>The email address that sends alarm notifications.</p>
    pub fn set_notification_sender_email(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_notification_sender_email(input);
        self
    }
    /// <p>Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html">Monitoring with alarms</a> in the <i>IoT SiteWise Application Guide</i>.</p>
    pub fn alarms(mut self, input: crate::types::Alarms) -> Self {
        self.inner = self.inner.alarms(input);
        self
    }
    /// <p>Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html">Monitoring with alarms</a> in the <i>IoT SiteWise Application Guide</i>.</p>
    pub fn set_alarms(mut self, input: std::option::Option<crate::types::Alarms>) -> Self {
        self.inner = self.inner.set_alarms(input);
        self
    }
}
