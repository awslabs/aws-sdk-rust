// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_portal::_update_portal_output::UpdatePortalOutputBuilder;

pub use crate::operation::update_portal::_update_portal_input::UpdatePortalInputBuilder;

impl UpdatePortalInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_portal::UpdatePortalOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_portal::UpdatePortalError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_portal();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdatePortal`.
///
/// <p>Updates an IoT SiteWise Monitor portal.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdatePortalFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_portal::builders::UpdatePortalInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_portal::UpdatePortalOutput,
        crate::operation::update_portal::UpdatePortalError,
    > for UpdatePortalFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_portal::UpdatePortalOutput,
            crate::operation::update_portal::UpdatePortalError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdatePortalFluentBuilder {
    /// Creates a new `UpdatePortal`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdatePortal as a reference.
    pub fn as_input(&self) -> &crate::operation::update_portal::builders::UpdatePortalInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_portal::UpdatePortalOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_portal::UpdatePortalError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_portal::UpdatePortal::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_portal::UpdatePortal::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_portal::UpdatePortalOutput,
        crate::operation::update_portal::UpdatePortalError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the portal to update.</p>
    pub fn portal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.portal_id(input.into());
        self
    }
    /// <p>The ID of the portal to update.</p>
    pub fn set_portal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_portal_id(input);
        self
    }
    /// <p>The ID of the portal to update.</p>
    pub fn get_portal_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_portal_id()
    }
    /// <p>A new friendly name for the portal.</p>
    pub fn portal_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.portal_name(input.into());
        self
    }
    /// <p>A new friendly name for the portal.</p>
    pub fn set_portal_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_portal_name(input);
        self
    }
    /// <p>A new friendly name for the portal.</p>
    pub fn get_portal_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_portal_name()
    }
    /// <p>A new description for the portal.</p>
    pub fn portal_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.portal_description(input.into());
        self
    }
    /// <p>A new description for the portal.</p>
    pub fn set_portal_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_portal_description(input);
        self
    }
    /// <p>A new description for the portal.</p>
    pub fn get_portal_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_portal_description()
    }
    /// <p>The Amazon Web Services administrator's contact email address.</p>
    pub fn portal_contact_email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.portal_contact_email(input.into());
        self
    }
    /// <p>The Amazon Web Services administrator's contact email address.</p>
    pub fn set_portal_contact_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_portal_contact_email(input);
        self
    }
    /// <p>The Amazon Web Services administrator's contact email address.</p>
    pub fn get_portal_contact_email(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_portal_contact_email()
    }
    /// <p>Contains an image that is one of the following:</p>
    /// <ul>
    /// <li> <p>An image file. Choose this option to upload a new image.</p> </li>
    /// <li> <p>The ID of an existing image. Choose this option to keep an existing image.</p> </li>
    /// </ul>
    pub fn portal_logo_image(mut self, input: crate::types::Image) -> Self {
        self.inner = self.inner.portal_logo_image(input);
        self
    }
    /// <p>Contains an image that is one of the following:</p>
    /// <ul>
    /// <li> <p>An image file. Choose this option to upload a new image.</p> </li>
    /// <li> <p>The ID of an existing image. Choose this option to keep an existing image.</p> </li>
    /// </ul>
    pub fn set_portal_logo_image(mut self, input: ::std::option::Option<crate::types::Image>) -> Self {
        self.inner = self.inner.set_portal_logo_image(input);
        self
    }
    /// <p>Contains an image that is one of the following:</p>
    /// <ul>
    /// <li> <p>An image file. Choose this option to upload a new image.</p> </li>
    /// <li> <p>The ID of an existing image. Choose this option to keep an existing image.</p> </li>
    /// </ul>
    pub fn get_portal_logo_image(&self) -> &::std::option::Option<crate::types::Image> {
        self.inner.get_portal_logo_image()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of a service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of a service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of a service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_role_arn()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The email address that sends alarm notifications.</p>
    pub fn notification_sender_email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.notification_sender_email(input.into());
        self
    }
    /// <p>The email address that sends alarm notifications.</p>
    pub fn set_notification_sender_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_notification_sender_email(input);
        self
    }
    /// <p>The email address that sends alarm notifications.</p>
    pub fn get_notification_sender_email(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_notification_sender_email()
    }
    /// <p>Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html">Monitoring with alarms</a> in the <i>IoT SiteWise Application Guide</i>.</p>
    pub fn alarms(mut self, input: crate::types::Alarms) -> Self {
        self.inner = self.inner.alarms(input);
        self
    }
    /// <p>Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html">Monitoring with alarms</a> in the <i>IoT SiteWise Application Guide</i>.</p>
    pub fn set_alarms(mut self, input: ::std::option::Option<crate::types::Alarms>) -> Self {
        self.inner = self.inner.set_alarms(input);
        self
    }
    /// <p>Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html">Monitoring with alarms</a> in the <i>IoT SiteWise Application Guide</i>.</p>
    pub fn get_alarms(&self) -> &::std::option::Option<crate::types::Alarms> {
        self.inner.get_alarms()
    }
}
