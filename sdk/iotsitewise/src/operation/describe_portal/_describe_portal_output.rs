// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribePortalOutput {
    /// <p>The ID of the portal.</p>
    pub portal_id: ::std::string::String,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the portal, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:portal/${PortalId}</code> </p>
    pub portal_arn: ::std::string::String,
    /// <p>The name of the portal.</p>
    pub portal_name: ::std::string::String,
    /// <p>The portal's description.</p>
    pub portal_description: ::std::option::Option<::std::string::String>,
    /// <p>The IAM Identity Center application generated client ID (used with IAM Identity Center APIs). IoT SiteWise includes <code>portalClientId</code> for only portals that use IAM Identity Center to authenticate users.</p>
    pub portal_client_id: ::std::string::String,
    /// <p>The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use IAM Identity Center for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.</p>
    pub portal_start_url: ::std::string::String,
    /// <p>The Amazon Web Services administrator's contact email address.</p>
    pub portal_contact_email: ::std::string::String,
    /// <p>The current status of the portal, which contains a state and any error message.</p>
    pub portal_status: ::std::option::Option<crate::types::PortalStatus>,
    /// <p>The date the portal was created, in Unix epoch time.</p>
    pub portal_creation_date: ::aws_smithy_types::DateTime,
    /// <p>The date the portal was last updated, in Unix epoch time.</p>
    pub portal_last_update_date: ::aws_smithy_types::DateTime,
    /// <p>The portal's logo image, which is available at a URL.</p>
    pub portal_logo_image_location: ::std::option::Option<crate::types::ImageLocation>,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The service to use to authenticate users to the portal.</p>
    pub portal_auth_mode: ::std::option::Option<crate::types::AuthMode>,
    /// <p>The email address that sends alarm notifications.</p>
    pub notification_sender_email: ::std::option::Option<::std::string::String>,
    /// <p>Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal.</p>
    pub alarms: ::std::option::Option<crate::types::Alarms>,
    _request_id: Option<String>,
}
impl DescribePortalOutput {
    /// <p>The ID of the portal.</p>
    pub fn portal_id(&self) -> &str {
        use std::ops::Deref;
        self.portal_id.deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the portal, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:portal/${PortalId}</code> </p>
    pub fn portal_arn(&self) -> &str {
        use std::ops::Deref;
        self.portal_arn.deref()
    }
    /// <p>The name of the portal.</p>
    pub fn portal_name(&self) -> &str {
        use std::ops::Deref;
        self.portal_name.deref()
    }
    /// <p>The portal's description.</p>
    pub fn portal_description(&self) -> ::std::option::Option<&str> {
        self.portal_description.as_deref()
    }
    /// <p>The IAM Identity Center application generated client ID (used with IAM Identity Center APIs). IoT SiteWise includes <code>portalClientId</code> for only portals that use IAM Identity Center to authenticate users.</p>
    pub fn portal_client_id(&self) -> &str {
        use std::ops::Deref;
        self.portal_client_id.deref()
    }
    /// <p>The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use IAM Identity Center for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.</p>
    pub fn portal_start_url(&self) -> &str {
        use std::ops::Deref;
        self.portal_start_url.deref()
    }
    /// <p>The Amazon Web Services administrator's contact email address.</p>
    pub fn portal_contact_email(&self) -> &str {
        use std::ops::Deref;
        self.portal_contact_email.deref()
    }
    /// <p>The current status of the portal, which contains a state and any error message.</p>
    pub fn portal_status(&self) -> ::std::option::Option<&crate::types::PortalStatus> {
        self.portal_status.as_ref()
    }
    /// <p>The date the portal was created, in Unix epoch time.</p>
    pub fn portal_creation_date(&self) -> &::aws_smithy_types::DateTime {
        &self.portal_creation_date
    }
    /// <p>The date the portal was last updated, in Unix epoch time.</p>
    pub fn portal_last_update_date(&self) -> &::aws_smithy_types::DateTime {
        &self.portal_last_update_date
    }
    /// <p>The portal's logo image, which is available at a URL.</p>
    pub fn portal_logo_image_location(&self) -> ::std::option::Option<&crate::types::ImageLocation> {
        self.portal_logo_image_location.as_ref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The service to use to authenticate users to the portal.</p>
    pub fn portal_auth_mode(&self) -> ::std::option::Option<&crate::types::AuthMode> {
        self.portal_auth_mode.as_ref()
    }
    /// <p>The email address that sends alarm notifications.</p>
    pub fn notification_sender_email(&self) -> ::std::option::Option<&str> {
        self.notification_sender_email.as_deref()
    }
    /// <p>Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal.</p>
    pub fn alarms(&self) -> ::std::option::Option<&crate::types::Alarms> {
        self.alarms.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribePortalOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribePortalOutput {
    /// Creates a new builder-style object to manufacture [`DescribePortalOutput`](crate::operation::describe_portal::DescribePortalOutput).
    pub fn builder() -> crate::operation::describe_portal::builders::DescribePortalOutputBuilder {
        crate::operation::describe_portal::builders::DescribePortalOutputBuilder::default()
    }
}

/// A builder for [`DescribePortalOutput`](crate::operation::describe_portal::DescribePortalOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribePortalOutputBuilder {
    pub(crate) portal_id: ::std::option::Option<::std::string::String>,
    pub(crate) portal_arn: ::std::option::Option<::std::string::String>,
    pub(crate) portal_name: ::std::option::Option<::std::string::String>,
    pub(crate) portal_description: ::std::option::Option<::std::string::String>,
    pub(crate) portal_client_id: ::std::option::Option<::std::string::String>,
    pub(crate) portal_start_url: ::std::option::Option<::std::string::String>,
    pub(crate) portal_contact_email: ::std::option::Option<::std::string::String>,
    pub(crate) portal_status: ::std::option::Option<crate::types::PortalStatus>,
    pub(crate) portal_creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) portal_last_update_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) portal_logo_image_location: ::std::option::Option<crate::types::ImageLocation>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) portal_auth_mode: ::std::option::Option<crate::types::AuthMode>,
    pub(crate) notification_sender_email: ::std::option::Option<::std::string::String>,
    pub(crate) alarms: ::std::option::Option<crate::types::Alarms>,
    _request_id: Option<String>,
}
impl DescribePortalOutputBuilder {
    /// <p>The ID of the portal.</p>
    /// This field is required.
    pub fn portal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the portal.</p>
    pub fn set_portal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_id = input;
        self
    }
    /// <p>The ID of the portal.</p>
    pub fn get_portal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_id
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the portal, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:portal/${PortalId}</code> </p>
    /// This field is required.
    pub fn portal_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the portal, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:portal/${PortalId}</code> </p>
    pub fn set_portal_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_arn = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the portal, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:portal/${PortalId}</code> </p>
    pub fn get_portal_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_arn
    }
    /// <p>The name of the portal.</p>
    /// This field is required.
    pub fn portal_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the portal.</p>
    pub fn set_portal_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_name = input;
        self
    }
    /// <p>The name of the portal.</p>
    pub fn get_portal_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_name
    }
    /// <p>The portal's description.</p>
    pub fn portal_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The portal's description.</p>
    pub fn set_portal_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_description = input;
        self
    }
    /// <p>The portal's description.</p>
    pub fn get_portal_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_description
    }
    /// <p>The IAM Identity Center application generated client ID (used with IAM Identity Center APIs). IoT SiteWise includes <code>portalClientId</code> for only portals that use IAM Identity Center to authenticate users.</p>
    /// This field is required.
    pub fn portal_client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM Identity Center application generated client ID (used with IAM Identity Center APIs). IoT SiteWise includes <code>portalClientId</code> for only portals that use IAM Identity Center to authenticate users.</p>
    pub fn set_portal_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_client_id = input;
        self
    }
    /// <p>The IAM Identity Center application generated client ID (used with IAM Identity Center APIs). IoT SiteWise includes <code>portalClientId</code> for only portals that use IAM Identity Center to authenticate users.</p>
    pub fn get_portal_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_client_id
    }
    /// <p>The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use IAM Identity Center for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.</p>
    /// This field is required.
    pub fn portal_start_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_start_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use IAM Identity Center for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.</p>
    pub fn set_portal_start_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_start_url = input;
        self
    }
    /// <p>The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use IAM Identity Center for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.</p>
    pub fn get_portal_start_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_start_url
    }
    /// <p>The Amazon Web Services administrator's contact email address.</p>
    /// This field is required.
    pub fn portal_contact_email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_contact_email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services administrator's contact email address.</p>
    pub fn set_portal_contact_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_contact_email = input;
        self
    }
    /// <p>The Amazon Web Services administrator's contact email address.</p>
    pub fn get_portal_contact_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_contact_email
    }
    /// <p>The current status of the portal, which contains a state and any error message.</p>
    /// This field is required.
    pub fn portal_status(mut self, input: crate::types::PortalStatus) -> Self {
        self.portal_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the portal, which contains a state and any error message.</p>
    pub fn set_portal_status(mut self, input: ::std::option::Option<crate::types::PortalStatus>) -> Self {
        self.portal_status = input;
        self
    }
    /// <p>The current status of the portal, which contains a state and any error message.</p>
    pub fn get_portal_status(&self) -> &::std::option::Option<crate::types::PortalStatus> {
        &self.portal_status
    }
    /// <p>The date the portal was created, in Unix epoch time.</p>
    /// This field is required.
    pub fn portal_creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.portal_creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the portal was created, in Unix epoch time.</p>
    pub fn set_portal_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.portal_creation_date = input;
        self
    }
    /// <p>The date the portal was created, in Unix epoch time.</p>
    pub fn get_portal_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.portal_creation_date
    }
    /// <p>The date the portal was last updated, in Unix epoch time.</p>
    /// This field is required.
    pub fn portal_last_update_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.portal_last_update_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the portal was last updated, in Unix epoch time.</p>
    pub fn set_portal_last_update_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.portal_last_update_date = input;
        self
    }
    /// <p>The date the portal was last updated, in Unix epoch time.</p>
    pub fn get_portal_last_update_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.portal_last_update_date
    }
    /// <p>The portal's logo image, which is available at a URL.</p>
    pub fn portal_logo_image_location(mut self, input: crate::types::ImageLocation) -> Self {
        self.portal_logo_image_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The portal's logo image, which is available at a URL.</p>
    pub fn set_portal_logo_image_location(mut self, input: ::std::option::Option<crate::types::ImageLocation>) -> Self {
        self.portal_logo_image_location = input;
        self
    }
    /// <p>The portal's logo image, which is available at a URL.</p>
    pub fn get_portal_logo_image_location(&self) -> &::std::option::Option<crate::types::ImageLocation> {
        &self.portal_logo_image_location
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The service to use to authenticate users to the portal.</p>
    pub fn portal_auth_mode(mut self, input: crate::types::AuthMode) -> Self {
        self.portal_auth_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The service to use to authenticate users to the portal.</p>
    pub fn set_portal_auth_mode(mut self, input: ::std::option::Option<crate::types::AuthMode>) -> Self {
        self.portal_auth_mode = input;
        self
    }
    /// <p>The service to use to authenticate users to the portal.</p>
    pub fn get_portal_auth_mode(&self) -> &::std::option::Option<crate::types::AuthMode> {
        &self.portal_auth_mode
    }
    /// <p>The email address that sends alarm notifications.</p>
    pub fn notification_sender_email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notification_sender_email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address that sends alarm notifications.</p>
    pub fn set_notification_sender_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notification_sender_email = input;
        self
    }
    /// <p>The email address that sends alarm notifications.</p>
    pub fn get_notification_sender_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.notification_sender_email
    }
    /// <p>Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal.</p>
    pub fn alarms(mut self, input: crate::types::Alarms) -> Self {
        self.alarms = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal.</p>
    pub fn set_alarms(mut self, input: ::std::option::Option<crate::types::Alarms>) -> Self {
        self.alarms = input;
        self
    }
    /// <p>Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal.</p>
    pub fn get_alarms(&self) -> &::std::option::Option<crate::types::Alarms> {
        &self.alarms
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribePortalOutput`](crate::operation::describe_portal::DescribePortalOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`portal_id`](crate::operation::describe_portal::builders::DescribePortalOutputBuilder::portal_id)
    /// - [`portal_arn`](crate::operation::describe_portal::builders::DescribePortalOutputBuilder::portal_arn)
    /// - [`portal_name`](crate::operation::describe_portal::builders::DescribePortalOutputBuilder::portal_name)
    /// - [`portal_client_id`](crate::operation::describe_portal::builders::DescribePortalOutputBuilder::portal_client_id)
    /// - [`portal_start_url`](crate::operation::describe_portal::builders::DescribePortalOutputBuilder::portal_start_url)
    /// - [`portal_contact_email`](crate::operation::describe_portal::builders::DescribePortalOutputBuilder::portal_contact_email)
    /// - [`portal_creation_date`](crate::operation::describe_portal::builders::DescribePortalOutputBuilder::portal_creation_date)
    /// - [`portal_last_update_date`](crate::operation::describe_portal::builders::DescribePortalOutputBuilder::portal_last_update_date)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_portal::DescribePortalOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_portal::DescribePortalOutput {
            portal_id: self.portal_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "portal_id",
                    "portal_id was not specified but it is required when building DescribePortalOutput",
                )
            })?,
            portal_arn: self.portal_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "portal_arn",
                    "portal_arn was not specified but it is required when building DescribePortalOutput",
                )
            })?,
            portal_name: self.portal_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "portal_name",
                    "portal_name was not specified but it is required when building DescribePortalOutput",
                )
            })?,
            portal_description: self.portal_description,
            portal_client_id: self.portal_client_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "portal_client_id",
                    "portal_client_id was not specified but it is required when building DescribePortalOutput",
                )
            })?,
            portal_start_url: self.portal_start_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "portal_start_url",
                    "portal_start_url was not specified but it is required when building DescribePortalOutput",
                )
            })?,
            portal_contact_email: self.portal_contact_email.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "portal_contact_email",
                    "portal_contact_email was not specified but it is required when building DescribePortalOutput",
                )
            })?,
            portal_status: self.portal_status,
            portal_creation_date: self.portal_creation_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "portal_creation_date",
                    "portal_creation_date was not specified but it is required when building DescribePortalOutput",
                )
            })?,
            portal_last_update_date: self.portal_last_update_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "portal_last_update_date",
                    "portal_last_update_date was not specified but it is required when building DescribePortalOutput",
                )
            })?,
            portal_logo_image_location: self.portal_logo_image_location,
            role_arn: self.role_arn,
            portal_auth_mode: self.portal_auth_mode,
            notification_sender_email: self.notification_sender_email,
            alarms: self.alarms,
            _request_id: self._request_id,
        })
    }
}
