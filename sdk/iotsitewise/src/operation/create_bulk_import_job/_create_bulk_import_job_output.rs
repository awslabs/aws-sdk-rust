// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBulkImportJobOutput {
    /// <p>The ID of the job.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The unique name that helps identify the job request.</p>
    #[doc(hidden)]
    pub job_name: std::option::Option<std::string::String>,
    /// <p>The status of the bulk import job can be one of following values.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – IoT SiteWise is waiting for the current bulk import job to finish.</p> </li>
    /// <li> <p> <code>CANCELLED</code> – The bulk import job has been canceled.</p> </li>
    /// <li> <p> <code>RUNNING</code> – IoT SiteWise is processing your request to import your data from Amazon S3.</p> </li>
    /// <li> <p> <code>COMPLETED</code> – IoT SiteWise successfully completed your request to import data from Amazon S3.</p> </li>
    /// <li> <p> <code>FAILED</code> – IoT SiteWise couldn't process your request to import data from Amazon S3. You can use logs saved in the specified error report location in Amazon S3 to troubleshoot issues.</p> </li>
    /// <li> <p> <code>COMPLETED_WITH_FAILURES</code> – IoT SiteWise completed your request to import data from Amazon S3 with errors. You can use logs saved in the specified error report location in Amazon S3 to troubleshoot issues.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub job_status: std::option::Option<crate::types::JobStatus>,
    _request_id: Option<String>,
}
impl CreateBulkImportJobOutput {
    /// <p>The ID of the job.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The unique name that helps identify the job request.</p>
    pub fn job_name(&self) -> std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The status of the bulk import job can be one of following values.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – IoT SiteWise is waiting for the current bulk import job to finish.</p> </li>
    /// <li> <p> <code>CANCELLED</code> – The bulk import job has been canceled.</p> </li>
    /// <li> <p> <code>RUNNING</code> – IoT SiteWise is processing your request to import your data from Amazon S3.</p> </li>
    /// <li> <p> <code>COMPLETED</code> – IoT SiteWise successfully completed your request to import data from Amazon S3.</p> </li>
    /// <li> <p> <code>FAILED</code> – IoT SiteWise couldn't process your request to import data from Amazon S3. You can use logs saved in the specified error report location in Amazon S3 to troubleshoot issues.</p> </li>
    /// <li> <p> <code>COMPLETED_WITH_FAILURES</code> – IoT SiteWise completed your request to import data from Amazon S3 with errors. You can use logs saved in the specified error report location in Amazon S3 to troubleshoot issues.</p> </li>
    /// </ul>
    pub fn job_status(&self) -> std::option::Option<&crate::types::JobStatus> {
        self.job_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateBulkImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateBulkImportJobOutput {
    /// Creates a new builder-style object to manufacture [`CreateBulkImportJobOutput`](crate::operation::create_bulk_import_job::CreateBulkImportJobOutput).
    pub fn builder(
    ) -> crate::operation::create_bulk_import_job::builders::CreateBulkImportJobOutputBuilder {
        crate::operation::create_bulk_import_job::builders::CreateBulkImportJobOutputBuilder::default()
    }
}

/// A builder for [`CreateBulkImportJobOutput`](crate::operation::create_bulk_import_job::CreateBulkImportJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateBulkImportJobOutputBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) job_name: std::option::Option<std::string::String>,
    pub(crate) job_status: std::option::Option<crate::types::JobStatus>,
    _request_id: Option<String>,
}
impl CreateBulkImportJobOutputBuilder {
    /// <p>The ID of the job.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The ID of the job.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The unique name that helps identify the job request.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_name = Some(input.into());
        self
    }
    /// <p>The unique name that helps identify the job request.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The status of the bulk import job can be one of following values.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – IoT SiteWise is waiting for the current bulk import job to finish.</p> </li>
    /// <li> <p> <code>CANCELLED</code> – The bulk import job has been canceled.</p> </li>
    /// <li> <p> <code>RUNNING</code> – IoT SiteWise is processing your request to import your data from Amazon S3.</p> </li>
    /// <li> <p> <code>COMPLETED</code> – IoT SiteWise successfully completed your request to import data from Amazon S3.</p> </li>
    /// <li> <p> <code>FAILED</code> – IoT SiteWise couldn't process your request to import data from Amazon S3. You can use logs saved in the specified error report location in Amazon S3 to troubleshoot issues.</p> </li>
    /// <li> <p> <code>COMPLETED_WITH_FAILURES</code> – IoT SiteWise completed your request to import data from Amazon S3 with errors. You can use logs saved in the specified error report location in Amazon S3 to troubleshoot issues.</p> </li>
    /// </ul>
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = Some(input);
        self
    }
    /// <p>The status of the bulk import job can be one of following values.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – IoT SiteWise is waiting for the current bulk import job to finish.</p> </li>
    /// <li> <p> <code>CANCELLED</code> – The bulk import job has been canceled.</p> </li>
    /// <li> <p> <code>RUNNING</code> – IoT SiteWise is processing your request to import your data from Amazon S3.</p> </li>
    /// <li> <p> <code>COMPLETED</code> – IoT SiteWise successfully completed your request to import data from Amazon S3.</p> </li>
    /// <li> <p> <code>FAILED</code> – IoT SiteWise couldn't process your request to import data from Amazon S3. You can use logs saved in the specified error report location in Amazon S3 to troubleshoot issues.</p> </li>
    /// <li> <p> <code>COMPLETED_WITH_FAILURES</code> – IoT SiteWise completed your request to import data from Amazon S3 with errors. You can use logs saved in the specified error report location in Amazon S3 to troubleshoot issues.</p> </li>
    /// </ul>
    pub fn set_job_status(mut self, input: std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateBulkImportJobOutput`](crate::operation::create_bulk_import_job::CreateBulkImportJobOutput).
    pub fn build(self) -> crate::operation::create_bulk_import_job::CreateBulkImportJobOutput {
        crate::operation::create_bulk_import_job::CreateBulkImportJobOutput {
            job_id: self.job_id,
            job_name: self.job_name,
            job_status: self.job_status,
            _request_id: self._request_id,
        }
    }
}
