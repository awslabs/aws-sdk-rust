// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAssetOutput {
    /// <p>The ID of the asset.</p>
    #[doc(hidden)]
    pub asset_id: std::option::Option<std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the asset, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:asset/${AssetId}</code> </p>
    #[doc(hidden)]
    pub asset_arn: std::option::Option<std::string::String>,
    /// <p>The name of the asset.</p>
    #[doc(hidden)]
    pub asset_name: std::option::Option<std::string::String>,
    /// <p>The ID of the asset model that was used to create the asset.</p>
    #[doc(hidden)]
    pub asset_model_id: std::option::Option<std::string::String>,
    /// <p>The list of asset properties for the asset.</p>
    /// <p>This object doesn't include properties that you define in composite models. You can find composite model properties in the <code>assetCompositeModels</code> object.</p>
    #[doc(hidden)]
    pub asset_properties: std::option::Option<std::vec::Vec<crate::types::AssetProperty>>,
    /// <p>A list of asset hierarchies that each contain a <code>hierarchyId</code>. A hierarchy specifies allowed parent/child asset relationships.</p>
    #[doc(hidden)]
    pub asset_hierarchies: std::option::Option<std::vec::Vec<crate::types::AssetHierarchy>>,
    /// <p>The composite models for the asset.</p>
    #[doc(hidden)]
    pub asset_composite_models:
        std::option::Option<std::vec::Vec<crate::types::AssetCompositeModel>>,
    /// <p>The date the asset was created, in Unix epoch time.</p>
    #[doc(hidden)]
    pub asset_creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date the asset was last updated, in Unix epoch time.</p>
    #[doc(hidden)]
    pub asset_last_update_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current status of the asset, which contains a state and any error message.</p>
    #[doc(hidden)]
    pub asset_status: std::option::Option<crate::types::AssetStatus>,
    /// <p>A description for the asset.</p>
    #[doc(hidden)]
    pub asset_description: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAssetOutput {
    /// <p>The ID of the asset.</p>
    pub fn asset_id(&self) -> std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the asset, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:asset/${AssetId}</code> </p>
    pub fn asset_arn(&self) -> std::option::Option<&str> {
        self.asset_arn.as_deref()
    }
    /// <p>The name of the asset.</p>
    pub fn asset_name(&self) -> std::option::Option<&str> {
        self.asset_name.as_deref()
    }
    /// <p>The ID of the asset model that was used to create the asset.</p>
    pub fn asset_model_id(&self) -> std::option::Option<&str> {
        self.asset_model_id.as_deref()
    }
    /// <p>The list of asset properties for the asset.</p>
    /// <p>This object doesn't include properties that you define in composite models. You can find composite model properties in the <code>assetCompositeModels</code> object.</p>
    pub fn asset_properties(&self) -> std::option::Option<&[crate::types::AssetProperty]> {
        self.asset_properties.as_deref()
    }
    /// <p>A list of asset hierarchies that each contain a <code>hierarchyId</code>. A hierarchy specifies allowed parent/child asset relationships.</p>
    pub fn asset_hierarchies(&self) -> std::option::Option<&[crate::types::AssetHierarchy]> {
        self.asset_hierarchies.as_deref()
    }
    /// <p>The composite models for the asset.</p>
    pub fn asset_composite_models(
        &self,
    ) -> std::option::Option<&[crate::types::AssetCompositeModel]> {
        self.asset_composite_models.as_deref()
    }
    /// <p>The date the asset was created, in Unix epoch time.</p>
    pub fn asset_creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.asset_creation_date.as_ref()
    }
    /// <p>The date the asset was last updated, in Unix epoch time.</p>
    pub fn asset_last_update_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.asset_last_update_date.as_ref()
    }
    /// <p>The current status of the asset, which contains a state and any error message.</p>
    pub fn asset_status(&self) -> std::option::Option<&crate::types::AssetStatus> {
        self.asset_status.as_ref()
    }
    /// <p>A description for the asset.</p>
    pub fn asset_description(&self) -> std::option::Option<&str> {
        self.asset_description.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAssetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAssetOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAssetOutput`](crate::operation::describe_asset::DescribeAssetOutput).
    pub fn builder() -> crate::operation::describe_asset::builders::DescribeAssetOutputBuilder {
        crate::operation::describe_asset::builders::DescribeAssetOutputBuilder::default()
    }
}

/// A builder for [`DescribeAssetOutput`](crate::operation::describe_asset::DescribeAssetOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAssetOutputBuilder {
    pub(crate) asset_id: std::option::Option<std::string::String>,
    pub(crate) asset_arn: std::option::Option<std::string::String>,
    pub(crate) asset_name: std::option::Option<std::string::String>,
    pub(crate) asset_model_id: std::option::Option<std::string::String>,
    pub(crate) asset_properties: std::option::Option<std::vec::Vec<crate::types::AssetProperty>>,
    pub(crate) asset_hierarchies: std::option::Option<std::vec::Vec<crate::types::AssetHierarchy>>,
    pub(crate) asset_composite_models:
        std::option::Option<std::vec::Vec<crate::types::AssetCompositeModel>>,
    pub(crate) asset_creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) asset_last_update_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) asset_status: std::option::Option<crate::types::AssetStatus>,
    pub(crate) asset_description: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAssetOutputBuilder {
    /// <p>The ID of the asset.</p>
    pub fn asset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_id = Some(input.into());
        self
    }
    /// <p>The ID of the asset.</p>
    pub fn set_asset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the asset, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:asset/${AssetId}</code> </p>
    pub fn asset_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_arn = Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the asset, which has the following format.</p>
    /// <p> <code>arn:${Partition}:iotsitewise:${Region}:${Account}:asset/${AssetId}</code> </p>
    pub fn set_asset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asset_arn = input;
        self
    }
    /// <p>The name of the asset.</p>
    pub fn asset_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_name = Some(input.into());
        self
    }
    /// <p>The name of the asset.</p>
    pub fn set_asset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asset_name = input;
        self
    }
    /// <p>The ID of the asset model that was used to create the asset.</p>
    pub fn asset_model_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_model_id = Some(input.into());
        self
    }
    /// <p>The ID of the asset model that was used to create the asset.</p>
    pub fn set_asset_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asset_model_id = input;
        self
    }
    /// Appends an item to `asset_properties`.
    ///
    /// To override the contents of this collection use [`set_asset_properties`](Self::set_asset_properties).
    ///
    /// <p>The list of asset properties for the asset.</p>
    /// <p>This object doesn't include properties that you define in composite models. You can find composite model properties in the <code>assetCompositeModels</code> object.</p>
    pub fn asset_properties(mut self, input: crate::types::AssetProperty) -> Self {
        let mut v = self.asset_properties.unwrap_or_default();
        v.push(input);
        self.asset_properties = Some(v);
        self
    }
    /// <p>The list of asset properties for the asset.</p>
    /// <p>This object doesn't include properties that you define in composite models. You can find composite model properties in the <code>assetCompositeModels</code> object.</p>
    pub fn set_asset_properties(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssetProperty>>,
    ) -> Self {
        self.asset_properties = input;
        self
    }
    /// Appends an item to `asset_hierarchies`.
    ///
    /// To override the contents of this collection use [`set_asset_hierarchies`](Self::set_asset_hierarchies).
    ///
    /// <p>A list of asset hierarchies that each contain a <code>hierarchyId</code>. A hierarchy specifies allowed parent/child asset relationships.</p>
    pub fn asset_hierarchies(mut self, input: crate::types::AssetHierarchy) -> Self {
        let mut v = self.asset_hierarchies.unwrap_or_default();
        v.push(input);
        self.asset_hierarchies = Some(v);
        self
    }
    /// <p>A list of asset hierarchies that each contain a <code>hierarchyId</code>. A hierarchy specifies allowed parent/child asset relationships.</p>
    pub fn set_asset_hierarchies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssetHierarchy>>,
    ) -> Self {
        self.asset_hierarchies = input;
        self
    }
    /// Appends an item to `asset_composite_models`.
    ///
    /// To override the contents of this collection use [`set_asset_composite_models`](Self::set_asset_composite_models).
    ///
    /// <p>The composite models for the asset.</p>
    pub fn asset_composite_models(mut self, input: crate::types::AssetCompositeModel) -> Self {
        let mut v = self.asset_composite_models.unwrap_or_default();
        v.push(input);
        self.asset_composite_models = Some(v);
        self
    }
    /// <p>The composite models for the asset.</p>
    pub fn set_asset_composite_models(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssetCompositeModel>>,
    ) -> Self {
        self.asset_composite_models = input;
        self
    }
    /// <p>The date the asset was created, in Unix epoch time.</p>
    pub fn asset_creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.asset_creation_date = Some(input);
        self
    }
    /// <p>The date the asset was created, in Unix epoch time.</p>
    pub fn set_asset_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.asset_creation_date = input;
        self
    }
    /// <p>The date the asset was last updated, in Unix epoch time.</p>
    pub fn asset_last_update_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.asset_last_update_date = Some(input);
        self
    }
    /// <p>The date the asset was last updated, in Unix epoch time.</p>
    pub fn set_asset_last_update_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.asset_last_update_date = input;
        self
    }
    /// <p>The current status of the asset, which contains a state and any error message.</p>
    pub fn asset_status(mut self, input: crate::types::AssetStatus) -> Self {
        self.asset_status = Some(input);
        self
    }
    /// <p>The current status of the asset, which contains a state and any error message.</p>
    pub fn set_asset_status(
        mut self,
        input: std::option::Option<crate::types::AssetStatus>,
    ) -> Self {
        self.asset_status = input;
        self
    }
    /// <p>A description for the asset.</p>
    pub fn asset_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_description = Some(input.into());
        self
    }
    /// <p>A description for the asset.</p>
    pub fn set_asset_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.asset_description = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAssetOutput`](crate::operation::describe_asset::DescribeAssetOutput).
    pub fn build(self) -> crate::operation::describe_asset::DescribeAssetOutput {
        crate::operation::describe_asset::DescribeAssetOutput {
            asset_id: self.asset_id,
            asset_arn: self.asset_arn,
            asset_name: self.asset_name,
            asset_model_id: self.asset_model_id,
            asset_properties: self.asset_properties,
            asset_hierarchies: self.asset_hierarchies,
            asset_composite_models: self.asset_composite_models,
            asset_creation_date: self.asset_creation_date,
            asset_last_update_date: self.asset_last_update_date,
            asset_status: self.asset_status,
            asset_description: self.asset_description,
            _request_id: self._request_id,
        }
    }
}
