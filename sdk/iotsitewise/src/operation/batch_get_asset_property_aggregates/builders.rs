// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_get_asset_property_aggregates::_batch_get_asset_property_aggregates_output::BatchGetAssetPropertyAggregatesOutputBuilder;

pub use crate::operation::batch_get_asset_property_aggregates::_batch_get_asset_property_aggregates_input::BatchGetAssetPropertyAggregatesInputBuilder;

/// Fluent builder constructing a request to `BatchGetAssetPropertyAggregates`.
///
/// <p>Gets aggregated values (for example, average, minimum, and maximum) for one or more asset properties. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#aggregates">Querying aggregates</a> in the <i>IoT SiteWise User Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchGetAssetPropertyAggregatesFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::batch_get_asset_property_aggregates::builders::BatchGetAssetPropertyAggregatesInputBuilder
            }
impl BatchGetAssetPropertyAggregatesFluentBuilder {
    /// Creates a new `BatchGetAssetPropertyAggregates`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregates, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesOutput, aws_smithy_http::result::SdkError<crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::batch_get_asset_property_aggregates::paginator::BatchGetAssetPropertyAggregatesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::batch_get_asset_property_aggregates::paginator::BatchGetAssetPropertyAggregatesPaginator{
        crate::operation::batch_get_asset_property_aggregates::paginator::BatchGetAssetPropertyAggregatesPaginator::new(self.handle, self.inner)
    }
    /// Appends an item to `entries`.
    ///
    /// To override the contents of this collection use [`set_entries`](Self::set_entries).
    ///
    /// <p>The list of asset property aggregate entries for the batch get request. You can specify up to 16 entries per request.</p>
    pub fn entries(mut self, input: crate::types::BatchGetAssetPropertyAggregatesEntry) -> Self {
        self.inner = self.inner.entries(input);
        self
    }
    /// <p>The list of asset property aggregate entries for the batch get request. You can specify up to 16 entries per request.</p>
    pub fn set_entries(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::BatchGetAssetPropertyAggregatesEntry>,
        >,
    ) -> Self {
        self.inner = self.inner.set_entries(input);
        self
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for each paginated request. A result set is returned in the two cases, whichever occurs first.</p>
    /// <ul>
    /// <li> <p>The size of the result set is less than 1 MB.</p> </li>
    /// <li> <p>The number of data points in the result set is less than the value of <code>maxResults</code>. The maximum value of <code>maxResults</code> is 4000.</p> </li>
    /// </ul>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for each paginated request. A result set is returned in the two cases, whichever occurs first.</p>
    /// <ul>
    /// <li> <p>The size of the result set is less than 1 MB.</p> </li>
    /// <li> <p>The number of data points in the result set is less than the value of <code>maxResults</code>. The maximum value of <code>maxResults</code> is 4000.</p> </li>
    /// </ul>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}
