// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAssetPropertyOutput {
    /// <p>The ID of the asset.</p>
    pub asset_id: ::std::string::String,
    /// <p>The name of the asset.</p>
    pub asset_name: ::std::string::String,
    /// <p>The ID of the asset model.</p>
    pub asset_model_id: ::std::string::String,
    /// <p>The asset property's definition, alias, and notification state.</p>
    /// <p>This response includes this object for normal asset properties. If you describe an asset property in a composite model, this response includes the asset property information in <code>compositeModel</code>.</p>
    pub asset_property: ::std::option::Option<crate::types::Property>,
    /// <p>The composite asset model that declares this asset property, if this asset property exists in a composite model.</p>
    pub composite_model: ::std::option::Option<crate::types::CompositeModelProperty>,
    _request_id: Option<String>,
}
impl DescribeAssetPropertyOutput {
    /// <p>The ID of the asset.</p>
    pub fn asset_id(&self) -> &str {
        use std::ops::Deref;
        self.asset_id.deref()
    }
    /// <p>The name of the asset.</p>
    pub fn asset_name(&self) -> &str {
        use std::ops::Deref;
        self.asset_name.deref()
    }
    /// <p>The ID of the asset model.</p>
    pub fn asset_model_id(&self) -> &str {
        use std::ops::Deref;
        self.asset_model_id.deref()
    }
    /// <p>The asset property's definition, alias, and notification state.</p>
    /// <p>This response includes this object for normal asset properties. If you describe an asset property in a composite model, this response includes the asset property information in <code>compositeModel</code>.</p>
    pub fn asset_property(&self) -> ::std::option::Option<&crate::types::Property> {
        self.asset_property.as_ref()
    }
    /// <p>The composite asset model that declares this asset property, if this asset property exists in a composite model.</p>
    pub fn composite_model(&self) -> ::std::option::Option<&crate::types::CompositeModelProperty> {
        self.composite_model.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeAssetPropertyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAssetPropertyOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAssetPropertyOutput`](crate::operation::describe_asset_property::DescribeAssetPropertyOutput).
    pub fn builder() -> crate::operation::describe_asset_property::builders::DescribeAssetPropertyOutputBuilder {
        crate::operation::describe_asset_property::builders::DescribeAssetPropertyOutputBuilder::default()
    }
}

/// A builder for [`DescribeAssetPropertyOutput`](crate::operation::describe_asset_property::DescribeAssetPropertyOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeAssetPropertyOutputBuilder {
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) asset_name: ::std::option::Option<::std::string::String>,
    pub(crate) asset_model_id: ::std::option::Option<::std::string::String>,
    pub(crate) asset_property: ::std::option::Option<crate::types::Property>,
    pub(crate) composite_model: ::std::option::Option<crate::types::CompositeModelProperty>,
    _request_id: Option<String>,
}
impl DescribeAssetPropertyOutputBuilder {
    /// <p>The ID of the asset.</p>
    /// This field is required.
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the asset.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// <p>The name of the asset.</p>
    /// This field is required.
    pub fn asset_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the asset.</p>
    pub fn set_asset_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_name = input;
        self
    }
    /// <p>The name of the asset.</p>
    pub fn get_asset_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_name
    }
    /// <p>The ID of the asset model.</p>
    /// This field is required.
    pub fn asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset model.</p>
    pub fn set_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_model_id = input;
        self
    }
    /// <p>The ID of the asset model.</p>
    pub fn get_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_model_id
    }
    /// <p>The asset property's definition, alias, and notification state.</p>
    /// <p>This response includes this object for normal asset properties. If you describe an asset property in a composite model, this response includes the asset property information in <code>compositeModel</code>.</p>
    pub fn asset_property(mut self, input: crate::types::Property) -> Self {
        self.asset_property = ::std::option::Option::Some(input);
        self
    }
    /// <p>The asset property's definition, alias, and notification state.</p>
    /// <p>This response includes this object for normal asset properties. If you describe an asset property in a composite model, this response includes the asset property information in <code>compositeModel</code>.</p>
    pub fn set_asset_property(mut self, input: ::std::option::Option<crate::types::Property>) -> Self {
        self.asset_property = input;
        self
    }
    /// <p>The asset property's definition, alias, and notification state.</p>
    /// <p>This response includes this object for normal asset properties. If you describe an asset property in a composite model, this response includes the asset property information in <code>compositeModel</code>.</p>
    pub fn get_asset_property(&self) -> &::std::option::Option<crate::types::Property> {
        &self.asset_property
    }
    /// <p>The composite asset model that declares this asset property, if this asset property exists in a composite model.</p>
    pub fn composite_model(mut self, input: crate::types::CompositeModelProperty) -> Self {
        self.composite_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>The composite asset model that declares this asset property, if this asset property exists in a composite model.</p>
    pub fn set_composite_model(mut self, input: ::std::option::Option<crate::types::CompositeModelProperty>) -> Self {
        self.composite_model = input;
        self
    }
    /// <p>The composite asset model that declares this asset property, if this asset property exists in a composite model.</p>
    pub fn get_composite_model(&self) -> &::std::option::Option<crate::types::CompositeModelProperty> {
        &self.composite_model
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAssetPropertyOutput`](crate::operation::describe_asset_property::DescribeAssetPropertyOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`asset_id`](crate::operation::describe_asset_property::builders::DescribeAssetPropertyOutputBuilder::asset_id)
    /// - [`asset_name`](crate::operation::describe_asset_property::builders::DescribeAssetPropertyOutputBuilder::asset_name)
    /// - [`asset_model_id`](crate::operation::describe_asset_property::builders::DescribeAssetPropertyOutputBuilder::asset_model_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_asset_property::DescribeAssetPropertyOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_asset_property::DescribeAssetPropertyOutput {
            asset_id: self.asset_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "asset_id",
                    "asset_id was not specified but it is required when building DescribeAssetPropertyOutput",
                )
            })?,
            asset_name: self.asset_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "asset_name",
                    "asset_name was not specified but it is required when building DescribeAssetPropertyOutput",
                )
            })?,
            asset_model_id: self.asset_model_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "asset_model_id",
                    "asset_model_id was not specified but it is required when building DescribeAssetPropertyOutput",
                )
            })?,
            asset_property: self.asset_property,
            composite_model: self.composite_model,
            _request_id: self._request_id,
        })
    }
}
