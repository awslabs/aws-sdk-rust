// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_asset_model::_update_asset_model_output::UpdateAssetModelOutputBuilder;

pub use crate::operation::update_asset_model::_update_asset_model_input::UpdateAssetModelInputBuilder;

/// Fluent builder constructing a request to `UpdateAssetModel`.
///
/// <p>Updates an asset model and all of the assets that were created from the model. Each asset created from the model inherits the updated asset model's property and hierarchy definitions. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-assets-and-models.html">Updating assets and models</a> in the <i>IoT SiteWise User Guide</i>.</p> <important>
/// <p>This operation overwrites the existing model with the provided model. To avoid deleting your asset model's properties or hierarchies, you must include their IDs and definitions in the updated asset model payload. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAssetModel.html">DescribeAssetModel</a>.</p>
/// <p>If you remove a property from an asset model, IoT SiteWise deletes all previous data for that property. If you remove a hierarchy definition from an asset model, IoT SiteWise disassociates every asset associated with that hierarchy. You can't change the type or data type of an existing property.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAssetModelFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_asset_model::builders::UpdateAssetModelInputBuilder,
}
impl UpdateAssetModelFluentBuilder {
    /// Creates a new `UpdateAssetModel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_asset_model::UpdateAssetModel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_asset_model::UpdateAssetModelError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_asset_model::UpdateAssetModelOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_asset_model::UpdateAssetModelError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the asset model to update.</p>
    pub fn asset_model_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.asset_model_id(input.into());
        self
    }
    /// <p>The ID of the asset model to update.</p>
    pub fn set_asset_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_id(input);
        self
    }
    /// <p>A unique, friendly name for the asset model.</p>
    pub fn asset_model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.asset_model_name(input.into());
        self
    }
    /// <p>A unique, friendly name for the asset model.</p>
    pub fn set_asset_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_name(input);
        self
    }
    /// <p>A description for the asset model.</p>
    pub fn asset_model_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.asset_model_description(input.into());
        self
    }
    /// <p>A description for the asset model.</p>
    pub fn set_asset_model_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_asset_model_description(input);
        self
    }
    /// Appends an item to `assetModelProperties`.
    ///
    /// To override the contents of this collection use [`set_asset_model_properties`](Self::set_asset_model_properties).
    ///
    /// <p>The updated property definitions of the asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html">Asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>You can specify up to 200 properties per asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn asset_model_properties(mut self, input: crate::types::AssetModelProperty) -> Self {
        self.inner = self.inner.asset_model_properties(input);
        self
    }
    /// <p>The updated property definitions of the asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html">Asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>You can specify up to 200 properties per asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_asset_model_properties(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssetModelProperty>>,
    ) -> Self {
        self.inner = self.inner.set_asset_model_properties(input);
        self
    }
    /// Appends an item to `assetModelHierarchies`.
    ///
    /// To override the contents of this collection use [`set_asset_model_hierarchies`](Self::set_asset_model_hierarchies).
    ///
    /// <p>The updated hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>You can specify up to 10 hierarchies per asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn asset_model_hierarchies(mut self, input: crate::types::AssetModelHierarchy) -> Self {
        self.inner = self.inner.asset_model_hierarchies(input);
        self
    }
    /// <p>The updated hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>You can specify up to 10 hierarchies per asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_asset_model_hierarchies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssetModelHierarchy>>,
    ) -> Self {
        self.inner = self.inner.set_asset_model_hierarchies(input);
        self
    }
    /// Appends an item to `assetModelCompositeModels`.
    ///
    /// To override the contents of this collection use [`set_asset_model_composite_models`](Self::set_asset_model_composite_models).
    ///
    /// <p>The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties. Each composite model has a type that defines the properties that the composite model supports. Use composite asset models to define alarms on this asset model.</p>
    pub fn asset_model_composite_models(
        mut self,
        input: crate::types::AssetModelCompositeModel,
    ) -> Self {
        self.inner = self.inner.asset_model_composite_models(input);
        self
    }
    /// <p>The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties. Each composite model has a type that defines the properties that the composite model supports. Use composite asset models to define alarms on this asset model.</p>
    pub fn set_asset_model_composite_models(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssetModelCompositeModel>>,
    ) -> Self {
        self.inner = self.inner.set_asset_model_composite_models(input);
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}
