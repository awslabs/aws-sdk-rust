// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDisassociateProjectAssetsInput {
    /// <p>The ID of the project from which to disassociate the assets.</p>
    pub project_id: ::std::option::Option<::std::string::String>,
    /// <p>The IDs of the assets to be disassociated from the project.</p>
    pub asset_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl BatchDisassociateProjectAssetsInput {
    /// <p>The ID of the project from which to disassociate the assets.</p>
    pub fn project_id(&self) -> ::std::option::Option<&str> {
        self.project_id.as_deref()
    }
    /// <p>The IDs of the assets to be disassociated from the project.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.asset_ids.is_none()`.
    pub fn asset_ids(&self) -> &[::std::string::String] {
        self.asset_ids.as_deref().unwrap_or_default()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl BatchDisassociateProjectAssetsInput {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateProjectAssetsInput`](crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsInput).
    pub fn builder() -> crate::operation::batch_disassociate_project_assets::builders::BatchDisassociateProjectAssetsInputBuilder {
        crate::operation::batch_disassociate_project_assets::builders::BatchDisassociateProjectAssetsInputBuilder::default()
    }
}

/// A builder for [`BatchDisassociateProjectAssetsInput`](crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDisassociateProjectAssetsInputBuilder {
    pub(crate) project_id: ::std::option::Option<::std::string::String>,
    pub(crate) asset_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl BatchDisassociateProjectAssetsInputBuilder {
    /// <p>The ID of the project from which to disassociate the assets.</p>
    /// This field is required.
    pub fn project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the project from which to disassociate the assets.</p>
    pub fn set_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_id = input;
        self
    }
    /// <p>The ID of the project from which to disassociate the assets.</p>
    pub fn get_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_id
    }
    /// Appends an item to `asset_ids`.
    ///
    /// To override the contents of this collection use [`set_asset_ids`](Self::set_asset_ids).
    ///
    /// <p>The IDs of the assets to be disassociated from the project.</p>
    pub fn asset_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.asset_ids.unwrap_or_default();
        v.push(input.into());
        self.asset_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the assets to be disassociated from the project.</p>
    pub fn set_asset_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.asset_ids = input;
        self
    }
    /// <p>The IDs of the assets to be disassociated from the project.</p>
    pub fn get_asset_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.asset_ids
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`BatchDisassociateProjectAssetsInput`](crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_disassociate_project_assets::BatchDisassociateProjectAssetsInput {
            project_id: self.project_id,
            asset_ids: self.asset_ids,
            client_token: self.client_token,
        })
    }
}
