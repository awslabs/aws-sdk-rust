// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetAssetPropertyAggregates`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`asset_id(impl Into<String>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::asset_id) / [`set_asset_id(Option<String>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::set_asset_id):<br>required: **false**<br><p>The ID of the asset.</p><br>
    ///   - [`property_id(impl Into<String>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::property_id) / [`set_property_id(Option<String>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::set_property_id):<br>required: **false**<br><p>The ID of the asset property.</p><br>
    ///   - [`property_alias(impl Into<String>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::property_alias) / [`set_property_alias(Option<String>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::set_property_alias):<br>required: **false**<br><p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p><br>
    ///   - [`aggregate_types(AggregateType)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::aggregate_types) / [`set_aggregate_types(Option<Vec::<AggregateType>>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::set_aggregate_types):<br>required: **true**<br><p>The data aggregating function.</p><br>
    ///   - [`resolution(impl Into<String>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::resolution) / [`set_resolution(Option<String>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::set_resolution):<br>required: **true**<br><p>The time interval over which to aggregate data.</p><br>
    ///   - [`qualities(Quality)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::qualities) / [`set_qualities(Option<Vec::<Quality>>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::set_qualities):<br>required: **false**<br><p>The quality by which to filter asset data.</p><br>
    ///   - [`start_date(DateTime)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::start_date) / [`set_start_date(Option<DateTime>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::set_start_date):<br>required: **true**<br><p>The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.</p><br>
    ///   - [`end_date(DateTime)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::end_date) / [`set_end_date(Option<DateTime>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::set_end_date):<br>required: **true**<br><p>The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.</p><br>
    ///   - [`time_ordering(TimeOrdering)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::time_ordering) / [`set_time_ordering(Option<TimeOrdering>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::set_time_ordering):<br>required: **false**<br><p>The chronological sorting order of the requested information.</p>  <p>Default: <code>ASCENDING</code> </p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::set_next_token):<br>required: **false**<br><p>The token to be used for the next set of paginated results.</p><br>
    ///   - [`max_results(i32)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return for each paginated request. A result set is returned in the two cases, whichever occurs first.</p>  <ul>   <li> <p>The size of the result set is equal to 1 MB.</p> </li>   <li> <p>The number of data points in the result set is equal to the value of <code>maxResults</code>. The maximum value of <code>maxResults</code> is 250.</p> </li>  </ul><br>
    /// - On success, responds with [`GetAssetPropertyAggregatesOutput`](crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesOutput) with field(s):
    ///   - [`aggregated_values(Vec::<AggregatedValue>)`](crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesOutput::aggregated_values): <p>The requested aggregated values.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesOutput::next_token): <p>The token for the next set of results, or null if there are no additional results.</p>
    /// - On failure, responds with [`SdkError<GetAssetPropertyAggregatesError>`](crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesError)
    pub fn get_asset_property_aggregates(
        &self,
    ) -> crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder {
        crate::operation::get_asset_property_aggregates::builders::GetAssetPropertyAggregatesFluentBuilder::new(self.handle.clone())
    }
}
