// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a time interval window used for data aggregate computations (for example, average, sum, count, and so on).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricWindow {
    /// <p>The tumbling time interval window.</p>
    #[doc(hidden)]
    pub tumbling: std::option::Option<crate::types::TumblingWindow>,
}
impl MetricWindow {
    /// <p>The tumbling time interval window.</p>
    pub fn tumbling(&self) -> std::option::Option<&crate::types::TumblingWindow> {
        self.tumbling.as_ref()
    }
}
impl MetricWindow {
    /// Creates a new builder-style object to manufacture [`MetricWindow`](crate::types::MetricWindow).
    pub fn builder() -> crate::types::builders::MetricWindowBuilder {
        crate::types::builders::MetricWindowBuilder::default()
    }
}

/// A builder for [`MetricWindow`](crate::types::MetricWindow).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricWindowBuilder {
    pub(crate) tumbling: std::option::Option<crate::types::TumblingWindow>,
}
impl MetricWindowBuilder {
    /// <p>The tumbling time interval window.</p>
    pub fn tumbling(mut self, input: crate::types::TumblingWindow) -> Self {
        self.tumbling = Some(input);
        self
    }
    /// <p>The tumbling time interval window.</p>
    pub fn set_tumbling(
        mut self,
        input: std::option::Option<crate::types::TumblingWindow>,
    ) -> Self {
        self.tumbling = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricWindow`](crate::types::MetricWindow).
    pub fn build(self) -> crate::types::MetricWindow {
        crate::types::MetricWindow {
            tumbling: self.tumbling,
        }
    }
}
