// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an asset transform property. A transform is a one-to-one mapping of a property's data points from one form to another. For example, you can use a transform to convert a Celsius data stream to Fahrenheit by applying the transformation expression to each data point of the Celsius stream. A transform can only have a data type of <code>DOUBLE</code> and consume properties with data types of <code>INTEGER</code> or <code>DOUBLE</code>.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html#transforms">Transforms</a> in the <i>IoT SiteWise User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Transform {
    /// <p>The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub expression: ::std::string::String,
    /// <p>The list of variables used in the expression.</p>
    pub variables: ::std::vec::Vec<crate::types::ExpressionVariable>,
    /// <p>The processing configuration for the given transform property. You can configure transforms to be kept at the edge or forwarded to the Amazon Web Services Cloud. You can also configure transforms to be computed at the edge or in the cloud.</p>
    pub processing_config: ::std::option::Option<crate::types::TransformProcessingConfig>,
}
impl Transform {
    /// <p>The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn expression(&self) -> &str {
        use std::ops::Deref;
        self.expression.deref()
    }
    /// <p>The list of variables used in the expression.</p>
    pub fn variables(&self) -> &[crate::types::ExpressionVariable] {
        use std::ops::Deref;
        self.variables.deref()
    }
    /// <p>The processing configuration for the given transform property. You can configure transforms to be kept at the edge or forwarded to the Amazon Web Services Cloud. You can also configure transforms to be computed at the edge or in the cloud.</p>
    pub fn processing_config(&self) -> ::std::option::Option<&crate::types::TransformProcessingConfig> {
        self.processing_config.as_ref()
    }
}
impl Transform {
    /// Creates a new builder-style object to manufacture [`Transform`](crate::types::Transform).
    pub fn builder() -> crate::types::builders::TransformBuilder {
        crate::types::builders::TransformBuilder::default()
    }
}

/// A builder for [`Transform`](crate::types::Transform).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TransformBuilder {
    pub(crate) expression: ::std::option::Option<::std::string::String>,
    pub(crate) variables: ::std::option::Option<::std::vec::Vec<crate::types::ExpressionVariable>>,
    pub(crate) processing_config: ::std::option::Option<crate::types::TransformProcessingConfig>,
}
impl TransformBuilder {
    /// <p>The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// This field is required.
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// Appends an item to `variables`.
    ///
    /// To override the contents of this collection use [`set_variables`](Self::set_variables).
    ///
    /// <p>The list of variables used in the expression.</p>
    pub fn variables(mut self, input: crate::types::ExpressionVariable) -> Self {
        let mut v = self.variables.unwrap_or_default();
        v.push(input);
        self.variables = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of variables used in the expression.</p>
    pub fn set_variables(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExpressionVariable>>) -> Self {
        self.variables = input;
        self
    }
    /// <p>The list of variables used in the expression.</p>
    pub fn get_variables(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExpressionVariable>> {
        &self.variables
    }
    /// <p>The processing configuration for the given transform property. You can configure transforms to be kept at the edge or forwarded to the Amazon Web Services Cloud. You can also configure transforms to be computed at the edge or in the cloud.</p>
    pub fn processing_config(mut self, input: crate::types::TransformProcessingConfig) -> Self {
        self.processing_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The processing configuration for the given transform property. You can configure transforms to be kept at the edge or forwarded to the Amazon Web Services Cloud. You can also configure transforms to be computed at the edge or in the cloud.</p>
    pub fn set_processing_config(mut self, input: ::std::option::Option<crate::types::TransformProcessingConfig>) -> Self {
        self.processing_config = input;
        self
    }
    /// <p>The processing configuration for the given transform property. You can configure transforms to be kept at the edge or forwarded to the Amazon Web Services Cloud. You can also configure transforms to be computed at the edge or in the cloud.</p>
    pub fn get_processing_config(&self) -> &::std::option::Option<crate::types::TransformProcessingConfig> {
        &self.processing_config
    }
    /// Consumes the builder and constructs a [`Transform`](crate::types::Transform).
    /// This method will fail if any of the following fields are not set:
    /// - [`expression`](crate::types::builders::TransformBuilder::expression)
    /// - [`variables`](crate::types::builders::TransformBuilder::variables)
    pub fn build(self) -> ::std::result::Result<crate::types::Transform, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Transform {
            expression: self.expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expression",
                    "expression was not specified but it is required when building Transform",
                )
            })?,
            variables: self.variables.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "variables",
                    "variables was not specified but it is required when building Transform",
                )
            })?,
            processing_config: self.processing_config,
        })
    }
}
