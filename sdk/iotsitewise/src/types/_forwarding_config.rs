// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The forwarding configuration for a given property.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ForwardingConfig {
    /// <p>The forwarding state for the given property. </p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ForwardingConfigState>,
}
impl ForwardingConfig {
    /// <p>The forwarding state for the given property. </p>
    pub fn state(&self) -> std::option::Option<&crate::types::ForwardingConfigState> {
        self.state.as_ref()
    }
}
impl ForwardingConfig {
    /// Creates a new builder-style object to manufacture [`ForwardingConfig`](crate::types::ForwardingConfig).
    pub fn builder() -> crate::types::builders::ForwardingConfigBuilder {
        crate::types::builders::ForwardingConfigBuilder::default()
    }
}

/// A builder for [`ForwardingConfig`](crate::types::ForwardingConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ForwardingConfigBuilder {
    pub(crate) state: std::option::Option<crate::types::ForwardingConfigState>,
}
impl ForwardingConfigBuilder {
    /// <p>The forwarding state for the given property. </p>
    pub fn state(mut self, input: crate::types::ForwardingConfigState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The forwarding state for the given property. </p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::ForwardingConfigState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`ForwardingConfig`](crate::types::ForwardingConfig).
    pub fn build(self) -> crate::types::ForwardingConfig {
        crate::types::ForwardingConfig { state: self.state }
    }
}
