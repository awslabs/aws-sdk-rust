// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration information of a job, such as the file format used to save data in Amazon S3.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobConfiguration {
    /// <p>The file format of the data in Amazon S3.</p>
    pub file_format: ::std::option::Option<crate::types::FileFormat>,
}
impl JobConfiguration {
    /// <p>The file format of the data in Amazon S3.</p>
    pub fn file_format(&self) -> ::std::option::Option<&crate::types::FileFormat> {
        self.file_format.as_ref()
    }
}
impl JobConfiguration {
    /// Creates a new builder-style object to manufacture [`JobConfiguration`](crate::types::JobConfiguration).
    pub fn builder() -> crate::types::builders::JobConfigurationBuilder {
        crate::types::builders::JobConfigurationBuilder::default()
    }
}

/// A builder for [`JobConfiguration`](crate::types::JobConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobConfigurationBuilder {
    pub(crate) file_format: ::std::option::Option<crate::types::FileFormat>,
}
impl JobConfigurationBuilder {
    /// <p>The file format of the data in Amazon S3.</p>
    /// This field is required.
    pub fn file_format(mut self, input: crate::types::FileFormat) -> Self {
        self.file_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file format of the data in Amazon S3.</p>
    pub fn set_file_format(mut self, input: ::std::option::Option<crate::types::FileFormat>) -> Self {
        self.file_format = input;
        self
    }
    /// <p>The file format of the data in Amazon S3.</p>
    pub fn get_file_format(&self) -> &::std::option::Option<crate::types::FileFormat> {
        &self.file_format
    }
    /// Consumes the builder and constructs a [`JobConfiguration`](crate::types::JobConfiguration).
    pub fn build(self) -> crate::types::JobConfiguration {
        crate::types::JobConfiguration {
            file_format: self.file_format,
        }
    }
}
