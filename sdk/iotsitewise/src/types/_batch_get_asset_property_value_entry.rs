// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information for an asset property value entry that is associated with the <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_BatchGetAssetPropertyValue.html">BatchGetAssetPropertyValue</a> API.</p>
/// <p>To identify an asset property, you must specify one of the following:</p>
/// <ul>
/// <li> <p>The <code>assetId</code> and <code>propertyId</code> of an asset property.</p> </li>
/// <li> <p>A <code>propertyAlias</code>, which is a data stream alias (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). To define an asset property's alias, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html">UpdateAssetProperty</a>.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetAssetPropertyValueEntry {
    /// <p>The ID of the entry.</p>
    #[doc(hidden)]
    pub entry_id: std::option::Option<std::string::String>,
    /// <p>The ID of the asset in which the asset property was created.</p>
    #[doc(hidden)]
    pub asset_id: std::option::Option<std::string::String>,
    /// <p>The ID of the asset property.</p>
    #[doc(hidden)]
    pub property_id: std::option::Option<std::string::String>,
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    #[doc(hidden)]
    pub property_alias: std::option::Option<std::string::String>,
}
impl BatchGetAssetPropertyValueEntry {
    /// <p>The ID of the entry.</p>
    pub fn entry_id(&self) -> std::option::Option<&str> {
        self.entry_id.as_deref()
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn asset_id(&self) -> std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p>The ID of the asset property.</p>
    pub fn property_id(&self) -> std::option::Option<&str> {
        self.property_id.as_deref()
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn property_alias(&self) -> std::option::Option<&str> {
        self.property_alias.as_deref()
    }
}
impl BatchGetAssetPropertyValueEntry {
    /// Creates a new builder-style object to manufacture [`BatchGetAssetPropertyValueEntry`](crate::types::BatchGetAssetPropertyValueEntry).
    pub fn builder() -> crate::types::builders::BatchGetAssetPropertyValueEntryBuilder {
        crate::types::builders::BatchGetAssetPropertyValueEntryBuilder::default()
    }
}

/// A builder for [`BatchGetAssetPropertyValueEntry`](crate::types::BatchGetAssetPropertyValueEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchGetAssetPropertyValueEntryBuilder {
    pub(crate) entry_id: std::option::Option<std::string::String>,
    pub(crate) asset_id: std::option::Option<std::string::String>,
    pub(crate) property_id: std::option::Option<std::string::String>,
    pub(crate) property_alias: std::option::Option<std::string::String>,
}
impl BatchGetAssetPropertyValueEntryBuilder {
    /// <p>The ID of the entry.</p>
    pub fn entry_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.entry_id = Some(input.into());
        self
    }
    /// <p>The ID of the entry.</p>
    pub fn set_entry_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entry_id = input;
        self
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn asset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_id = Some(input.into());
        self
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn set_asset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the asset property.</p>
    pub fn property_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.property_id = Some(input.into());
        self
    }
    /// <p>The ID of the asset property.</p>
    pub fn set_property_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.property_id = input;
        self
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn property_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.property_alias = Some(input.into());
        self
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_property_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.property_alias = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetAssetPropertyValueEntry`](crate::types::BatchGetAssetPropertyValueEntry).
    pub fn build(self) -> crate::types::BatchGetAssetPropertyValueEntry {
        crate::types::BatchGetAssetPropertyValueEntry {
            entry_id: self.entry_id,
            asset_id: self.asset_id,
            property_id: self.property_id,
            property_alias: self.property_alias,
        }
    }
}
