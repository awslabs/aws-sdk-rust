// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The file format of the data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FileFormat {
    /// <p>The .csv file format.</p>
    #[doc(hidden)]
    pub csv: std::option::Option<crate::types::Csv>,
}
impl FileFormat {
    /// <p>The .csv file format.</p>
    pub fn csv(&self) -> std::option::Option<&crate::types::Csv> {
        self.csv.as_ref()
    }
}
impl FileFormat {
    /// Creates a new builder-style object to manufacture [`FileFormat`](crate::types::FileFormat).
    pub fn builder() -> crate::types::builders::FileFormatBuilder {
        crate::types::builders::FileFormatBuilder::default()
    }
}

/// A builder for [`FileFormat`](crate::types::FileFormat).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FileFormatBuilder {
    pub(crate) csv: std::option::Option<crate::types::Csv>,
}
impl FileFormatBuilder {
    /// <p>The .csv file format.</p>
    pub fn csv(mut self, input: crate::types::Csv) -> Self {
        self.csv = Some(input);
        self
    }
    /// <p>The .csv file format.</p>
    pub fn set_csv(mut self, input: std::option::Option<crate::types::Csv>) -> Self {
        self.csv = input;
        self
    }
    /// Consumes the builder and constructs a [`FileFormat`](crate::types::FileFormat).
    pub fn build(self) -> crate::types::FileFormat {
        crate::types::FileFormat { csv: self.csv }
    }
}
