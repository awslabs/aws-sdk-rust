// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains aggregated asset property values (for example, average, minimum, and maximum).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AggregatedValue {
    /// <p>The date the aggregating computations occurred, in Unix epoch time.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>The quality of the aggregated data.</p>
    pub quality: ::std::option::Option<crate::types::Quality>,
    /// <p>The value of the aggregates.</p>
    pub value: ::std::option::Option<crate::types::Aggregates>,
}
impl AggregatedValue {
    /// <p>The date the aggregating computations occurred, in Unix epoch time.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>The quality of the aggregated data.</p>
    pub fn quality(&self) -> ::std::option::Option<&crate::types::Quality> {
        self.quality.as_ref()
    }
    /// <p>The value of the aggregates.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::Aggregates> {
        self.value.as_ref()
    }
}
impl AggregatedValue {
    /// Creates a new builder-style object to manufacture [`AggregatedValue`](crate::types::AggregatedValue).
    pub fn builder() -> crate::types::builders::AggregatedValueBuilder {
        crate::types::builders::AggregatedValueBuilder::default()
    }
}

/// A builder for [`AggregatedValue`](crate::types::AggregatedValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AggregatedValueBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) quality: ::std::option::Option<crate::types::Quality>,
    pub(crate) value: ::std::option::Option<crate::types::Aggregates>,
}
impl AggregatedValueBuilder {
    /// <p>The date the aggregating computations occurred, in Unix epoch time.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the aggregating computations occurred, in Unix epoch time.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The date the aggregating computations occurred, in Unix epoch time.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The quality of the aggregated data.</p>
    pub fn quality(mut self, input: crate::types::Quality) -> Self {
        self.quality = ::std::option::Option::Some(input);
        self
    }
    /// <p>The quality of the aggregated data.</p>
    pub fn set_quality(mut self, input: ::std::option::Option<crate::types::Quality>) -> Self {
        self.quality = input;
        self
    }
    /// <p>The quality of the aggregated data.</p>
    pub fn get_quality(&self) -> &::std::option::Option<crate::types::Quality> {
        &self.quality
    }
    /// <p>The value of the aggregates.</p>
    /// This field is required.
    pub fn value(mut self, input: crate::types::Aggregates) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the aggregates.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::Aggregates>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the aggregates.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::Aggregates> {
        &self.value
    }
    /// Consumes the builder and constructs a [`AggregatedValue`](crate::types::AggregatedValue).
    /// This method will fail if any of the following fields are not set:
    /// - [`timestamp`](crate::types::builders::AggregatedValueBuilder::timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::AggregatedValue, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AggregatedValue {
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building AggregatedValue",
                )
            })?,
            quality: self.quality,
            value: self.value,
        })
    }
}
