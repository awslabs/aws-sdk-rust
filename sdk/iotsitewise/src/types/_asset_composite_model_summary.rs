// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a summary of the composite model for a specific asset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetCompositeModelSummary {
    /// <p>The ID of the composite model that this summary describes.</p>
    pub id: ::std::string::String,
    /// <p>An external ID to assign to the asset model.</p>
    /// <p>If the composite model is a derived composite model, or one nested inside a component model, you can only set the external ID using <code>UpdateAssetModelCompositeModel</code> and specifying the derived ID of the model or property from the created model it's a part of.</p>
    pub external_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the composite model that this summary describes.</p>
    pub name: ::std::string::String,
    /// <p>The type of asset model.</p>
    /// <ul>
    /// <li>
    /// <p><b>ASSET_MODEL</b> – (default) An asset model that you can use to create assets. Can't be included as a component in another asset model.</p></li>
    /// <li>
    /// <p><b>COMPONENT_MODEL</b> – A reusable component that you can include in the composite models of other asset models. You can't create assets directly from this type of asset model.</p></li>
    /// </ul>
    pub r#type: ::std::string::String,
    /// <p>A description of the composite model that this summary describes.</p>
    pub description: ::std::string::String,
    /// <p>The path that includes all the components of the asset model for the asset.</p>
    pub path: ::std::vec::Vec<crate::types::AssetCompositeModelPathSegment>,
}
impl AssetCompositeModelSummary {
    /// <p>The ID of the composite model that this summary describes.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>An external ID to assign to the asset model.</p>
    /// <p>If the composite model is a derived composite model, or one nested inside a component model, you can only set the external ID using <code>UpdateAssetModelCompositeModel</code> and specifying the derived ID of the model or property from the created model it's a part of.</p>
    pub fn external_id(&self) -> ::std::option::Option<&str> {
        self.external_id.as_deref()
    }
    /// <p>The name of the composite model that this summary describes.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type of asset model.</p>
    /// <ul>
    /// <li>
    /// <p><b>ASSET_MODEL</b> – (default) An asset model that you can use to create assets. Can't be included as a component in another asset model.</p></li>
    /// <li>
    /// <p><b>COMPONENT_MODEL</b> – A reusable component that you can include in the composite models of other asset models. You can't create assets directly from this type of asset model.</p></li>
    /// </ul>
    pub fn r#type(&self) -> &str {
        use std::ops::Deref;
        self.r#type.deref()
    }
    /// <p>A description of the composite model that this summary describes.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The path that includes all the components of the asset model for the asset.</p>
    pub fn path(&self) -> &[crate::types::AssetCompositeModelPathSegment] {
        use std::ops::Deref;
        self.path.deref()
    }
}
impl AssetCompositeModelSummary {
    /// Creates a new builder-style object to manufacture [`AssetCompositeModelSummary`](crate::types::AssetCompositeModelSummary).
    pub fn builder() -> crate::types::builders::AssetCompositeModelSummaryBuilder {
        crate::types::builders::AssetCompositeModelSummaryBuilder::default()
    }
}

/// A builder for [`AssetCompositeModelSummary`](crate::types::AssetCompositeModelSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssetCompositeModelSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) external_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) path: ::std::option::Option<::std::vec::Vec<crate::types::AssetCompositeModelPathSegment>>,
}
impl AssetCompositeModelSummaryBuilder {
    /// <p>The ID of the composite model that this summary describes.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the composite model that this summary describes.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the composite model that this summary describes.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>An external ID to assign to the asset model.</p>
    /// <p>If the composite model is a derived composite model, or one nested inside a component model, you can only set the external ID using <code>UpdateAssetModelCompositeModel</code> and specifying the derived ID of the model or property from the created model it's a part of.</p>
    pub fn external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An external ID to assign to the asset model.</p>
    /// <p>If the composite model is a derived composite model, or one nested inside a component model, you can only set the external ID using <code>UpdateAssetModelCompositeModel</code> and specifying the derived ID of the model or property from the created model it's a part of.</p>
    pub fn set_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_id = input;
        self
    }
    /// <p>An external ID to assign to the asset model.</p>
    /// <p>If the composite model is a derived composite model, or one nested inside a component model, you can only set the external ID using <code>UpdateAssetModelCompositeModel</code> and specifying the derived ID of the model or property from the created model it's a part of.</p>
    pub fn get_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_id
    }
    /// <p>The name of the composite model that this summary describes.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the composite model that this summary describes.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the composite model that this summary describes.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of asset model.</p>
    /// <ul>
    /// <li>
    /// <p><b>ASSET_MODEL</b> – (default) An asset model that you can use to create assets. Can't be included as a component in another asset model.</p></li>
    /// <li>
    /// <p><b>COMPONENT_MODEL</b> – A reusable component that you can include in the composite models of other asset models. You can't create assets directly from this type of asset model.</p></li>
    /// </ul>
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of asset model.</p>
    /// <ul>
    /// <li>
    /// <p><b>ASSET_MODEL</b> – (default) An asset model that you can use to create assets. Can't be included as a component in another asset model.</p></li>
    /// <li>
    /// <p><b>COMPONENT_MODEL</b> – A reusable component that you can include in the composite models of other asset models. You can't create assets directly from this type of asset model.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of asset model.</p>
    /// <ul>
    /// <li>
    /// <p><b>ASSET_MODEL</b> – (default) An asset model that you can use to create assets. Can't be included as a component in another asset model.</p></li>
    /// <li>
    /// <p><b>COMPONENT_MODEL</b> – A reusable component that you can include in the composite models of other asset models. You can't create assets directly from this type of asset model.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>A description of the composite model that this summary describes.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the composite model that this summary describes.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the composite model that this summary describes.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `path`.
    ///
    /// To override the contents of this collection use [`set_path`](Self::set_path).
    ///
    /// <p>The path that includes all the components of the asset model for the asset.</p>
    pub fn path(mut self, input: crate::types::AssetCompositeModelPathSegment) -> Self {
        let mut v = self.path.unwrap_or_default();
        v.push(input);
        self.path = ::std::option::Option::Some(v);
        self
    }
    /// <p>The path that includes all the components of the asset model for the asset.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssetCompositeModelPathSegment>>) -> Self {
        self.path = input;
        self
    }
    /// <p>The path that includes all the components of the asset model for the asset.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssetCompositeModelPathSegment>> {
        &self.path
    }
    /// Consumes the builder and constructs a [`AssetCompositeModelSummary`](crate::types::AssetCompositeModelSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::AssetCompositeModelSummaryBuilder::id)
    /// - [`name`](crate::types::builders::AssetCompositeModelSummaryBuilder::name)
    /// - [`r#type`](crate::types::builders::AssetCompositeModelSummaryBuilder::type)
    /// - [`description`](crate::types::builders::AssetCompositeModelSummaryBuilder::description)
    /// - [`path`](crate::types::builders::AssetCompositeModelSummaryBuilder::path)
    pub fn build(self) -> ::std::result::Result<crate::types::AssetCompositeModelSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssetCompositeModelSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building AssetCompositeModelSummary",
                )
            })?,
            external_id: self.external_id,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AssetCompositeModelSummary",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building AssetCompositeModelSummary",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building AssetCompositeModelSummary",
                )
            })?,
            path: self.path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "path",
                    "path was not specified but it is required when building AssetCompositeModelSummary",
                )
            })?,
        })
    }
}
