// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a composite model property on an asset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CompositeModelProperty {
    /// <p>The name of the property.</p>
    pub name: ::std::string::String,
    /// <p>The type of the composite model that defines this property.</p>
    pub r#type: ::std::string::String,
    /// <p>Contains asset property information.</p>
    pub asset_property: ::std::option::Option<crate::types::Property>,
    /// <p> The ID of the composite model that contains the property. </p>
    pub id: ::std::option::Option<::std::string::String>,
}
impl CompositeModelProperty {
    /// <p>The name of the property.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type of the composite model that defines this property.</p>
    pub fn r#type(&self) -> &str {
        use std::ops::Deref;
        self.r#type.deref()
    }
    /// <p>Contains asset property information.</p>
    pub fn asset_property(&self) -> ::std::option::Option<&crate::types::Property> {
        self.asset_property.as_ref()
    }
    /// <p> The ID of the composite model that contains the property. </p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl CompositeModelProperty {
    /// Creates a new builder-style object to manufacture [`CompositeModelProperty`](crate::types::CompositeModelProperty).
    pub fn builder() -> crate::types::builders::CompositeModelPropertyBuilder {
        crate::types::builders::CompositeModelPropertyBuilder::default()
    }
}

/// A builder for [`CompositeModelProperty`](crate::types::CompositeModelProperty).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CompositeModelPropertyBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) asset_property: ::std::option::Option<crate::types::Property>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
}
impl CompositeModelPropertyBuilder {
    /// <p>The name of the property.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the property.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the property.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of the composite model that defines this property.</p>
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the composite model that defines this property.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the composite model that defines this property.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>Contains asset property information.</p>
    /// This field is required.
    pub fn asset_property(mut self, input: crate::types::Property) -> Self {
        self.asset_property = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains asset property information.</p>
    pub fn set_asset_property(mut self, input: ::std::option::Option<crate::types::Property>) -> Self {
        self.asset_property = input;
        self
    }
    /// <p>Contains asset property information.</p>
    pub fn get_asset_property(&self) -> &::std::option::Option<crate::types::Property> {
        &self.asset_property
    }
    /// <p> The ID of the composite model that contains the property. </p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of the composite model that contains the property. </p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p> The ID of the composite model that contains the property. </p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Consumes the builder and constructs a [`CompositeModelProperty`](crate::types::CompositeModelProperty).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::CompositeModelPropertyBuilder::name)
    /// - [`r#type`](crate::types::builders::CompositeModelPropertyBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::CompositeModelProperty, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CompositeModelProperty {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CompositeModelProperty",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building CompositeModelProperty",
                )
            })?,
            asset_property: self.asset_property,
            id: self.id,
        })
    }
}
