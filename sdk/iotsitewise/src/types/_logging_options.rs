// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains logging options.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoggingOptions {
    /// <p>The IoT SiteWise logging verbosity level.</p>
    pub level: crate::types::LoggingLevel,
}
impl LoggingOptions {
    /// <p>The IoT SiteWise logging verbosity level.</p>
    pub fn level(&self) -> &crate::types::LoggingLevel {
        &self.level
    }
}
impl LoggingOptions {
    /// Creates a new builder-style object to manufacture [`LoggingOptions`](crate::types::LoggingOptions).
    pub fn builder() -> crate::types::builders::LoggingOptionsBuilder {
        crate::types::builders::LoggingOptionsBuilder::default()
    }
}

/// A builder for [`LoggingOptions`](crate::types::LoggingOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LoggingOptionsBuilder {
    pub(crate) level: ::std::option::Option<crate::types::LoggingLevel>,
}
impl LoggingOptionsBuilder {
    /// <p>The IoT SiteWise logging verbosity level.</p>
    /// This field is required.
    pub fn level(mut self, input: crate::types::LoggingLevel) -> Self {
        self.level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IoT SiteWise logging verbosity level.</p>
    pub fn set_level(mut self, input: ::std::option::Option<crate::types::LoggingLevel>) -> Self {
        self.level = input;
        self
    }
    /// <p>The IoT SiteWise logging verbosity level.</p>
    pub fn get_level(&self) -> &::std::option::Option<crate::types::LoggingLevel> {
        &self.level
    }
    /// Consumes the builder and constructs a [`LoggingOptions`](crate::types::LoggingOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`level`](crate::types::builders::LoggingOptionsBuilder::level)
    pub fn build(self) -> ::std::result::Result<crate::types::LoggingOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LoggingOptions {
            level: self.level.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "level",
                    "level was not specified but it is required when building LoggingOptions",
                )
            })?,
        })
    }
}
