// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information for an asset property aggregate entry that is associated with the <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_BatchGetAssetPropertyAggregates.html">BatchGetAssetPropertyAggregates</a> API.</p>
/// <p>To identify an asset property, you must specify one of the following:</p>
/// <ul>
/// <li> <p>The <code>assetId</code> and <code>propertyId</code> of an asset property.</p> </li>
/// <li> <p>A <code>propertyAlias</code>, which is a data stream alias (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). To define an asset property's alias, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html">UpdateAssetProperty</a>.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetAssetPropertyAggregatesEntry {
    /// <p>The ID of the entry.</p>
    pub entry_id: ::std::string::String,
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub asset_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the asset property.</p>
    pub property_id: ::std::option::Option<::std::string::String>,
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub property_alias: ::std::option::Option<::std::string::String>,
    /// <p>The data aggregating function.</p>
    pub aggregate_types: ::std::vec::Vec<crate::types::AggregateType>,
    /// <p>The time interval over which to aggregate data.</p>
    pub resolution: ::std::string::String,
    /// <p>The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.</p>
    pub start_date: ::aws_smithy_types::DateTime,
    /// <p>The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.</p>
    pub end_date: ::aws_smithy_types::DateTime,
    /// <p>The quality by which to filter asset data.</p>
    pub qualities: ::std::option::Option<::std::vec::Vec<crate::types::Quality>>,
    /// <p>The chronological sorting order of the requested information.</p>
    /// <p>Default: <code>ASCENDING</code> </p>
    pub time_ordering: ::std::option::Option<crate::types::TimeOrdering>,
}
impl BatchGetAssetPropertyAggregatesEntry {
    /// <p>The ID of the entry.</p>
    pub fn entry_id(&self) -> &str {
        use std::ops::Deref;
        self.entry_id.deref()
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn asset_id(&self) -> ::std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p>The ID of the asset property.</p>
    pub fn property_id(&self) -> ::std::option::Option<&str> {
        self.property_id.as_deref()
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn property_alias(&self) -> ::std::option::Option<&str> {
        self.property_alias.as_deref()
    }
    /// <p>The data aggregating function.</p>
    pub fn aggregate_types(&self) -> &[crate::types::AggregateType] {
        use std::ops::Deref;
        self.aggregate_types.deref()
    }
    /// <p>The time interval over which to aggregate data.</p>
    pub fn resolution(&self) -> &str {
        use std::ops::Deref;
        self.resolution.deref()
    }
    /// <p>The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.</p>
    pub fn start_date(&self) -> &::aws_smithy_types::DateTime {
        &self.start_date
    }
    /// <p>The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.</p>
    pub fn end_date(&self) -> &::aws_smithy_types::DateTime {
        &self.end_date
    }
    /// <p>The quality by which to filter asset data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.qualities.is_none()`.
    pub fn qualities(&self) -> &[crate::types::Quality] {
        self.qualities.as_deref().unwrap_or_default()
    }
    /// <p>The chronological sorting order of the requested information.</p>
    /// <p>Default: <code>ASCENDING</code> </p>
    pub fn time_ordering(&self) -> ::std::option::Option<&crate::types::TimeOrdering> {
        self.time_ordering.as_ref()
    }
}
impl BatchGetAssetPropertyAggregatesEntry {
    /// Creates a new builder-style object to manufacture [`BatchGetAssetPropertyAggregatesEntry`](crate::types::BatchGetAssetPropertyAggregatesEntry).
    pub fn builder() -> crate::types::builders::BatchGetAssetPropertyAggregatesEntryBuilder {
        crate::types::builders::BatchGetAssetPropertyAggregatesEntryBuilder::default()
    }
}

/// A builder for [`BatchGetAssetPropertyAggregatesEntry`](crate::types::BatchGetAssetPropertyAggregatesEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetAssetPropertyAggregatesEntryBuilder {
    pub(crate) entry_id: ::std::option::Option<::std::string::String>,
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) property_id: ::std::option::Option<::std::string::String>,
    pub(crate) property_alias: ::std::option::Option<::std::string::String>,
    pub(crate) aggregate_types: ::std::option::Option<::std::vec::Vec<crate::types::AggregateType>>,
    pub(crate) resolution: ::std::option::Option<::std::string::String>,
    pub(crate) start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) qualities: ::std::option::Option<::std::vec::Vec<crate::types::Quality>>,
    pub(crate) time_ordering: ::std::option::Option<crate::types::TimeOrdering>,
}
impl BatchGetAssetPropertyAggregatesEntryBuilder {
    /// <p>The ID of the entry.</p>
    /// This field is required.
    pub fn entry_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entry_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the entry.</p>
    pub fn set_entry_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entry_id = input;
        self
    }
    /// <p>The ID of the entry.</p>
    pub fn get_entry_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entry_id
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the asset in which the asset property was created.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// <p>The ID of the asset property.</p>
    pub fn property_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset property.</p>
    pub fn set_property_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property_id = input;
        self
    }
    /// <p>The ID of the asset property.</p>
    pub fn get_property_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.property_id
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn property_alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property_alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_property_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property_alias = input;
        self
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn get_property_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.property_alias
    }
    /// Appends an item to `aggregate_types`.
    ///
    /// To override the contents of this collection use [`set_aggregate_types`](Self::set_aggregate_types).
    ///
    /// <p>The data aggregating function.</p>
    pub fn aggregate_types(mut self, input: crate::types::AggregateType) -> Self {
        let mut v = self.aggregate_types.unwrap_or_default();
        v.push(input);
        self.aggregate_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The data aggregating function.</p>
    pub fn set_aggregate_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AggregateType>>) -> Self {
        self.aggregate_types = input;
        self
    }
    /// <p>The data aggregating function.</p>
    pub fn get_aggregate_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AggregateType>> {
        &self.aggregate_types
    }
    /// <p>The time interval over which to aggregate data.</p>
    /// This field is required.
    pub fn resolution(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resolution = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time interval over which to aggregate data.</p>
    pub fn set_resolution(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resolution = input;
        self
    }
    /// <p>The time interval over which to aggregate data.</p>
    pub fn get_resolution(&self) -> &::std::option::Option<::std::string::String> {
        &self.resolution
    }
    /// <p>The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.</p>
    /// This field is required.
    pub fn start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.</p>
    pub fn set_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_date = input;
        self
    }
    /// <p>The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.</p>
    pub fn get_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_date
    }
    /// <p>The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.</p>
    /// This field is required.
    pub fn end_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.</p>
    pub fn set_end_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_date = input;
        self
    }
    /// <p>The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.</p>
    pub fn get_end_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_date
    }
    /// Appends an item to `qualities`.
    ///
    /// To override the contents of this collection use [`set_qualities`](Self::set_qualities).
    ///
    /// <p>The quality by which to filter asset data.</p>
    pub fn qualities(mut self, input: crate::types::Quality) -> Self {
        let mut v = self.qualities.unwrap_or_default();
        v.push(input);
        self.qualities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The quality by which to filter asset data.</p>
    pub fn set_qualities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Quality>>) -> Self {
        self.qualities = input;
        self
    }
    /// <p>The quality by which to filter asset data.</p>
    pub fn get_qualities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Quality>> {
        &self.qualities
    }
    /// <p>The chronological sorting order of the requested information.</p>
    /// <p>Default: <code>ASCENDING</code> </p>
    pub fn time_ordering(mut self, input: crate::types::TimeOrdering) -> Self {
        self.time_ordering = ::std::option::Option::Some(input);
        self
    }
    /// <p>The chronological sorting order of the requested information.</p>
    /// <p>Default: <code>ASCENDING</code> </p>
    pub fn set_time_ordering(mut self, input: ::std::option::Option<crate::types::TimeOrdering>) -> Self {
        self.time_ordering = input;
        self
    }
    /// <p>The chronological sorting order of the requested information.</p>
    /// <p>Default: <code>ASCENDING</code> </p>
    pub fn get_time_ordering(&self) -> &::std::option::Option<crate::types::TimeOrdering> {
        &self.time_ordering
    }
    /// Consumes the builder and constructs a [`BatchGetAssetPropertyAggregatesEntry`](crate::types::BatchGetAssetPropertyAggregatesEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`entry_id`](crate::types::builders::BatchGetAssetPropertyAggregatesEntryBuilder::entry_id)
    /// - [`aggregate_types`](crate::types::builders::BatchGetAssetPropertyAggregatesEntryBuilder::aggregate_types)
    /// - [`resolution`](crate::types::builders::BatchGetAssetPropertyAggregatesEntryBuilder::resolution)
    /// - [`start_date`](crate::types::builders::BatchGetAssetPropertyAggregatesEntryBuilder::start_date)
    /// - [`end_date`](crate::types::builders::BatchGetAssetPropertyAggregatesEntryBuilder::end_date)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::BatchGetAssetPropertyAggregatesEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchGetAssetPropertyAggregatesEntry {
            entry_id: self.entry_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entry_id",
                    "entry_id was not specified but it is required when building BatchGetAssetPropertyAggregatesEntry",
                )
            })?,
            asset_id: self.asset_id,
            property_id: self.property_id,
            property_alias: self.property_alias,
            aggregate_types: self.aggregate_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aggregate_types",
                    "aggregate_types was not specified but it is required when building BatchGetAssetPropertyAggregatesEntry",
                )
            })?,
            resolution: self.resolution.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resolution",
                    "resolution was not specified but it is required when building BatchGetAssetPropertyAggregatesEntry",
                )
            })?,
            start_date: self.start_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_date",
                    "start_date was not specified but it is required when building BatchGetAssetPropertyAggregatesEntry",
                )
            })?,
            end_date: self.end_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_date",
                    "end_date was not specified but it is required when building BatchGetAssetPropertyAggregatesEntry",
                )
            })?,
            qualities: self.qualities,
            time_ordering: self.time_ordering,
        })
    }
}
