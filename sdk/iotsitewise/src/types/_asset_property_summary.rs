// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a summary of a property associated with an asset.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssetPropertySummary {
    /// <p>The ID of the property.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    #[doc(hidden)]
    pub alias: std::option::Option<std::string::String>,
    /// <p> The unit of measure (such as Newtons or RPM) of the asset property. </p>
    #[doc(hidden)]
    pub unit: std::option::Option<std::string::String>,
    /// <p>Contains asset property value notification information. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p>
    #[doc(hidden)]
    pub notification: std::option::Option<crate::types::PropertyNotification>,
    /// <p> The ID of the composite model that contains the asset property. </p>
    #[doc(hidden)]
    pub asset_composite_model_id: std::option::Option<std::string::String>,
}
impl AssetPropertySummary {
    /// <p>The ID of the property.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn alias(&self) -> std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p> The unit of measure (such as Newtons or RPM) of the asset property. </p>
    pub fn unit(&self) -> std::option::Option<&str> {
        self.unit.as_deref()
    }
    /// <p>Contains asset property value notification information. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn notification(&self) -> std::option::Option<&crate::types::PropertyNotification> {
        self.notification.as_ref()
    }
    /// <p> The ID of the composite model that contains the asset property. </p>
    pub fn asset_composite_model_id(&self) -> std::option::Option<&str> {
        self.asset_composite_model_id.as_deref()
    }
}
impl AssetPropertySummary {
    /// Creates a new builder-style object to manufacture [`AssetPropertySummary`](crate::types::AssetPropertySummary).
    pub fn builder() -> crate::types::builders::AssetPropertySummaryBuilder {
        crate::types::builders::AssetPropertySummaryBuilder::default()
    }
}

/// A builder for [`AssetPropertySummary`](crate::types::AssetPropertySummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssetPropertySummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) alias: std::option::Option<std::string::String>,
    pub(crate) unit: std::option::Option<std::string::String>,
    pub(crate) notification: std::option::Option<crate::types::PropertyNotification>,
    pub(crate) asset_composite_model_id: std::option::Option<std::string::String>,
}
impl AssetPropertySummaryBuilder {
    /// <p>The ID of the property.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the property.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.alias = Some(input.into());
        self
    }
    /// <p>The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p> The unit of measure (such as Newtons or RPM) of the asset property. </p>
    pub fn unit(mut self, input: impl Into<std::string::String>) -> Self {
        self.unit = Some(input.into());
        self
    }
    /// <p> The unit of measure (such as Newtons or RPM) of the asset property. </p>
    pub fn set_unit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// <p>Contains asset property value notification information. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn notification(mut self, input: crate::types::PropertyNotification) -> Self {
        self.notification = Some(input);
        self
    }
    /// <p>Contains asset property value notification information. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_notification(
        mut self,
        input: std::option::Option<crate::types::PropertyNotification>,
    ) -> Self {
        self.notification = input;
        self
    }
    /// <p> The ID of the composite model that contains the asset property. </p>
    pub fn asset_composite_model_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_composite_model_id = Some(input.into());
        self
    }
    /// <p> The ID of the composite model that contains the asset property. </p>
    pub fn set_asset_composite_model_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.asset_composite_model_id = input;
        self
    }
    /// Consumes the builder and constructs a [`AssetPropertySummary`](crate::types::AssetPropertySummary).
    pub fn build(self) -> crate::types::AssetPropertySummary {
        crate::types::AssetPropertySummary {
            id: self.id,
            alias: self.alias,
            unit: self.unit,
            notification: self.notification,
            asset_composite_model_id: self.asset_composite_model_id,
        }
    }
}
