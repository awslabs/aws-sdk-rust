// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The processing configuration for the given transform property. You can configure transforms to be kept at the edge or forwarded to the Amazon Web Services Cloud. You can also configure transforms to be computed at the edge or in the cloud.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TransformProcessingConfig {
    /// <p>The compute location for the given transform property. </p>
    #[doc(hidden)]
    pub compute_location: std::option::Option<crate::types::ComputeLocation>,
    /// <p>The forwarding configuration for a given property.</p>
    #[doc(hidden)]
    pub forwarding_config: std::option::Option<crate::types::ForwardingConfig>,
}
impl TransformProcessingConfig {
    /// <p>The compute location for the given transform property. </p>
    pub fn compute_location(&self) -> std::option::Option<&crate::types::ComputeLocation> {
        self.compute_location.as_ref()
    }
    /// <p>The forwarding configuration for a given property.</p>
    pub fn forwarding_config(&self) -> std::option::Option<&crate::types::ForwardingConfig> {
        self.forwarding_config.as_ref()
    }
}
impl TransformProcessingConfig {
    /// Creates a new builder-style object to manufacture [`TransformProcessingConfig`](crate::types::TransformProcessingConfig).
    pub fn builder() -> crate::types::builders::TransformProcessingConfigBuilder {
        crate::types::builders::TransformProcessingConfigBuilder::default()
    }
}

/// A builder for [`TransformProcessingConfig`](crate::types::TransformProcessingConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TransformProcessingConfigBuilder {
    pub(crate) compute_location: std::option::Option<crate::types::ComputeLocation>,
    pub(crate) forwarding_config: std::option::Option<crate::types::ForwardingConfig>,
}
impl TransformProcessingConfigBuilder {
    /// <p>The compute location for the given transform property. </p>
    pub fn compute_location(mut self, input: crate::types::ComputeLocation) -> Self {
        self.compute_location = Some(input);
        self
    }
    /// <p>The compute location for the given transform property. </p>
    pub fn set_compute_location(
        mut self,
        input: std::option::Option<crate::types::ComputeLocation>,
    ) -> Self {
        self.compute_location = input;
        self
    }
    /// <p>The forwarding configuration for a given property.</p>
    pub fn forwarding_config(mut self, input: crate::types::ForwardingConfig) -> Self {
        self.forwarding_config = Some(input);
        self
    }
    /// <p>The forwarding configuration for a given property.</p>
    pub fn set_forwarding_config(
        mut self,
        input: std::option::Option<crate::types::ForwardingConfig>,
    ) -> Self {
        self.forwarding_config = input;
        self
    }
    /// Consumes the builder and constructs a [`TransformProcessingConfig`](crate::types::TransformProcessingConfig).
    pub fn build(self) -> crate::types::TransformProcessingConfig {
        crate::types::TransformProcessingConfig {
            compute_location: self.compute_location,
            forwarding_config: self.forwarding_config,
        }
    }
}
