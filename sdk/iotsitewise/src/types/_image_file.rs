// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an image file.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageFile {
    /// <p>The image file contents, represented as a base64-encoded string. The file size must be less than 1 MB.</p>
    pub data: ::aws_smithy_types::Blob,
    /// <p>The file type of the image.</p>
    pub r#type: crate::types::ImageFileType,
}
impl ImageFile {
    /// <p>The image file contents, represented as a base64-encoded string. The file size must be less than 1 MB.</p>
    pub fn data(&self) -> &::aws_smithy_types::Blob {
        &self.data
    }
    /// <p>The file type of the image.</p>
    pub fn r#type(&self) -> &crate::types::ImageFileType {
        &self.r#type
    }
}
impl ImageFile {
    /// Creates a new builder-style object to manufacture [`ImageFile`](crate::types::ImageFile).
    pub fn builder() -> crate::types::builders::ImageFileBuilder {
        crate::types::builders::ImageFileBuilder::default()
    }
}

/// A builder for [`ImageFile`](crate::types::ImageFile).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImageFileBuilder {
    pub(crate) data: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) r#type: ::std::option::Option<crate::types::ImageFileType>,
}
impl ImageFileBuilder {
    /// <p>The image file contents, represented as a base64-encoded string. The file size must be less than 1 MB.</p>
    /// This field is required.
    pub fn data(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The image file contents, represented as a base64-encoded string. The file size must be less than 1 MB.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.data = input;
        self
    }
    /// <p>The image file contents, represented as a base64-encoded string. The file size must be less than 1 MB.</p>
    pub fn get_data(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.data
    }
    /// <p>The file type of the image.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ImageFileType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file type of the image.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ImageFileType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The file type of the image.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ImageFileType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`ImageFile`](crate::types::ImageFile).
    /// This method will fail if any of the following fields are not set:
    /// - [`data`](crate::types::builders::ImageFileBuilder::data)
    /// - [`r#type`](crate::types::builders::ImageFileBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::ImageFile, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImageFile {
            data: self.data.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data",
                    "data was not specified but it is required when building ImageFile",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building ImageFile",
                )
            })?,
        })
    }
}
