// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a timestamp with optional nanosecond granularity.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimeInNanos {
    /// <p>The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by <code>offsetInNanos</code>.</p>
    #[doc(hidden)]
    pub time_in_seconds: std::option::Option<i64>,
    /// <p>The nanosecond offset from <code>timeInSeconds</code>.</p>
    #[doc(hidden)]
    pub offset_in_nanos: std::option::Option<i32>,
}
impl TimeInNanos {
    /// <p>The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by <code>offsetInNanos</code>.</p>
    pub fn time_in_seconds(&self) -> std::option::Option<i64> {
        self.time_in_seconds
    }
    /// <p>The nanosecond offset from <code>timeInSeconds</code>.</p>
    pub fn offset_in_nanos(&self) -> std::option::Option<i32> {
        self.offset_in_nanos
    }
}
impl TimeInNanos {
    /// Creates a new builder-style object to manufacture [`TimeInNanos`](crate::types::TimeInNanos).
    pub fn builder() -> crate::types::builders::TimeInNanosBuilder {
        crate::types::builders::TimeInNanosBuilder::default()
    }
}

/// A builder for [`TimeInNanos`](crate::types::TimeInNanos).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimeInNanosBuilder {
    pub(crate) time_in_seconds: std::option::Option<i64>,
    pub(crate) offset_in_nanos: std::option::Option<i32>,
}
impl TimeInNanosBuilder {
    /// <p>The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by <code>offsetInNanos</code>.</p>
    pub fn time_in_seconds(mut self, input: i64) -> Self {
        self.time_in_seconds = Some(input);
        self
    }
    /// <p>The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by <code>offsetInNanos</code>.</p>
    pub fn set_time_in_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.time_in_seconds = input;
        self
    }
    /// <p>The nanosecond offset from <code>timeInSeconds</code>.</p>
    pub fn offset_in_nanos(mut self, input: i32) -> Self {
        self.offset_in_nanos = Some(input);
        self
    }
    /// <p>The nanosecond offset from <code>timeInSeconds</code>.</p>
    pub fn set_offset_in_nanos(mut self, input: std::option::Option<i32>) -> Self {
        self.offset_in_nanos = input;
        self
    }
    /// Consumes the builder and constructs a [`TimeInNanos`](crate::types::TimeInNanos).
    pub fn build(self) -> crate::types::TimeInNanos {
        crate::types::TimeInNanos {
            time_in_seconds: self.time_in_seconds,
            offset_in_nanos: self.offset_in_nanos,
        }
    }
}
