// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a timestamp with optional nanosecond granularity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimeInNanos {
    /// <p>The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by <code>offsetInNanos</code>.</p>
    pub time_in_seconds: i64,
    /// <p>The nanosecond offset from <code>timeInSeconds</code>.</p>
    pub offset_in_nanos: ::std::option::Option<i32>,
}
impl TimeInNanos {
    /// <p>The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by <code>offsetInNanos</code>.</p>
    pub fn time_in_seconds(&self) -> i64 {
        self.time_in_seconds
    }
    /// <p>The nanosecond offset from <code>timeInSeconds</code>.</p>
    pub fn offset_in_nanos(&self) -> ::std::option::Option<i32> {
        self.offset_in_nanos
    }
}
impl TimeInNanos {
    /// Creates a new builder-style object to manufacture [`TimeInNanos`](crate::types::TimeInNanos).
    pub fn builder() -> crate::types::builders::TimeInNanosBuilder {
        crate::types::builders::TimeInNanosBuilder::default()
    }
}

/// A builder for [`TimeInNanos`](crate::types::TimeInNanos).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TimeInNanosBuilder {
    pub(crate) time_in_seconds: ::std::option::Option<i64>,
    pub(crate) offset_in_nanos: ::std::option::Option<i32>,
}
impl TimeInNanosBuilder {
    /// <p>The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by <code>offsetInNanos</code>.</p>
    /// This field is required.
    pub fn time_in_seconds(mut self, input: i64) -> Self {
        self.time_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by <code>offsetInNanos</code>.</p>
    pub fn set_time_in_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.time_in_seconds = input;
        self
    }
    /// <p>The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by <code>offsetInNanos</code>.</p>
    pub fn get_time_in_seconds(&self) -> &::std::option::Option<i64> {
        &self.time_in_seconds
    }
    /// <p>The nanosecond offset from <code>timeInSeconds</code>.</p>
    pub fn offset_in_nanos(mut self, input: i32) -> Self {
        self.offset_in_nanos = ::std::option::Option::Some(input);
        self
    }
    /// <p>The nanosecond offset from <code>timeInSeconds</code>.</p>
    pub fn set_offset_in_nanos(mut self, input: ::std::option::Option<i32>) -> Self {
        self.offset_in_nanos = input;
        self
    }
    /// <p>The nanosecond offset from <code>timeInSeconds</code>.</p>
    pub fn get_offset_in_nanos(&self) -> &::std::option::Option<i32> {
        &self.offset_in_nanos
    }
    /// Consumes the builder and constructs a [`TimeInNanos`](crate::types::TimeInNanos).
    /// This method will fail if any of the following fields are not set:
    /// - [`time_in_seconds`](crate::types::builders::TimeInNanosBuilder::time_in_seconds)
    pub fn build(self) -> ::std::result::Result<crate::types::TimeInNanos, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TimeInNanos {
            time_in_seconds: self.time_in_seconds.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "time_in_seconds",
                    "time_in_seconds was not specified but it is required when building TimeInNanos",
                )
            })?,
            offset_in_nanos: self.offset_in_nanos,
        })
    }
}
