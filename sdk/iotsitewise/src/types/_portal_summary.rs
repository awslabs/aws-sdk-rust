// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a portal summary.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PortalSummary {
    /// <p>The ID of the portal.</p>
    pub id: ::std::string::String,
    /// <p>The name of the portal.</p>
    pub name: ::std::string::String,
    /// <p>The portal's description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use IAM Identity Center for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.</p>
    pub start_url: ::std::string::String,
    /// <p>The date the portal was created, in Unix epoch time.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date the portal was last updated, in Unix epoch time.</p>
    pub last_update_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Contains information about the current status of a portal.</p>
    pub status: ::std::option::Option<crate::types::PortalStatus>,
}
impl PortalSummary {
    /// <p>The ID of the portal.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the portal.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The portal's description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use IAM Identity Center for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.</p>
    pub fn start_url(&self) -> &str {
        use std::ops::Deref;
        self.start_url.deref()
    }
    /// <p>The date the portal was created, in Unix epoch time.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date the portal was last updated, in Unix epoch time.</p>
    pub fn last_update_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_date.as_ref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Contains information about the current status of a portal.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PortalStatus> {
        self.status.as_ref()
    }
}
impl PortalSummary {
    /// Creates a new builder-style object to manufacture [`PortalSummary`](crate::types::PortalSummary).
    pub fn builder() -> crate::types::builders::PortalSummaryBuilder {
        crate::types::builders::PortalSummaryBuilder::default()
    }
}

/// A builder for [`PortalSummary`](crate::types::PortalSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PortalSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) start_url: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::PortalStatus>,
}
impl PortalSummaryBuilder {
    /// <p>The ID of the portal.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the portal.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the portal.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the portal.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the portal.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the portal.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The portal's description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The portal's description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The portal's description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use IAM Identity Center for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.</p>
    /// This field is required.
    pub fn start_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use IAM Identity Center for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.</p>
    pub fn set_start_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_url = input;
        self
    }
    /// <p>The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use IAM Identity Center for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.</p>
    pub fn get_start_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_url
    }
    /// <p>The date the portal was created, in Unix epoch time.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the portal was created, in Unix epoch time.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date the portal was created, in Unix epoch time.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The date the portal was last updated, in Unix epoch time.</p>
    pub fn last_update_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the portal was last updated, in Unix epoch time.</p>
    pub fn set_last_update_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_date = input;
        self
    }
    /// <p>The date the portal was last updated, in Unix epoch time.</p>
    pub fn get_last_update_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_date
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Contains information about the current status of a portal.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::PortalStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the current status of a portal.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PortalStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Contains information about the current status of a portal.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PortalStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`PortalSummary`](crate::types::PortalSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::PortalSummaryBuilder::id)
    /// - [`name`](crate::types::builders::PortalSummaryBuilder::name)
    /// - [`start_url`](crate::types::builders::PortalSummaryBuilder::start_url)
    pub fn build(self) -> ::std::result::Result<crate::types::PortalSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PortalSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building PortalSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building PortalSummary",
                )
            })?,
            description: self.description,
            start_url: self.start_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_url",
                    "start_url was not specified but it is required when building PortalSummary",
                )
            })?,
            creation_date: self.creation_date,
            last_update_date: self.last_update_date,
            role_arn: self.role_arn,
            status: self.status,
        })
    }
}
