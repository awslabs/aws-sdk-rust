// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an identity that can access an IoT SiteWise Monitor resource.</p> <note>
/// <p>Currently, you can't use Amazon Web Services APIs to retrieve IAM Identity Center identity IDs. You can find the IAM Identity Center identity IDs in the URL of user and group pages in the <a href="https://console.aws.amazon.com/singlesignon">IAM Identity Center console</a>.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Identity {
    /// <p>An IAM Identity Center user identity.</p>
    #[doc(hidden)]
    pub user: std::option::Option<crate::types::UserIdentity>,
    /// <p>An IAM Identity Center group identity.</p>
    #[doc(hidden)]
    pub group: std::option::Option<crate::types::GroupIdentity>,
    /// <p>An IAM user identity.</p>
    #[doc(hidden)]
    pub iam_user: std::option::Option<crate::types::IamUserIdentity>,
    /// <p>An IAM role identity.</p>
    #[doc(hidden)]
    pub iam_role: std::option::Option<crate::types::IamRoleIdentity>,
}
impl Identity {
    /// <p>An IAM Identity Center user identity.</p>
    pub fn user(&self) -> std::option::Option<&crate::types::UserIdentity> {
        self.user.as_ref()
    }
    /// <p>An IAM Identity Center group identity.</p>
    pub fn group(&self) -> std::option::Option<&crate::types::GroupIdentity> {
        self.group.as_ref()
    }
    /// <p>An IAM user identity.</p>
    pub fn iam_user(&self) -> std::option::Option<&crate::types::IamUserIdentity> {
        self.iam_user.as_ref()
    }
    /// <p>An IAM role identity.</p>
    pub fn iam_role(&self) -> std::option::Option<&crate::types::IamRoleIdentity> {
        self.iam_role.as_ref()
    }
}
impl Identity {
    /// Creates a new builder-style object to manufacture [`Identity`](crate::types::Identity).
    pub fn builder() -> crate::types::builders::IdentityBuilder {
        crate::types::builders::IdentityBuilder::default()
    }
}

/// A builder for [`Identity`](crate::types::Identity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IdentityBuilder {
    pub(crate) user: std::option::Option<crate::types::UserIdentity>,
    pub(crate) group: std::option::Option<crate::types::GroupIdentity>,
    pub(crate) iam_user: std::option::Option<crate::types::IamUserIdentity>,
    pub(crate) iam_role: std::option::Option<crate::types::IamRoleIdentity>,
}
impl IdentityBuilder {
    /// <p>An IAM Identity Center user identity.</p>
    pub fn user(mut self, input: crate::types::UserIdentity) -> Self {
        self.user = Some(input);
        self
    }
    /// <p>An IAM Identity Center user identity.</p>
    pub fn set_user(mut self, input: std::option::Option<crate::types::UserIdentity>) -> Self {
        self.user = input;
        self
    }
    /// <p>An IAM Identity Center group identity.</p>
    pub fn group(mut self, input: crate::types::GroupIdentity) -> Self {
        self.group = Some(input);
        self
    }
    /// <p>An IAM Identity Center group identity.</p>
    pub fn set_group(mut self, input: std::option::Option<crate::types::GroupIdentity>) -> Self {
        self.group = input;
        self
    }
    /// <p>An IAM user identity.</p>
    pub fn iam_user(mut self, input: crate::types::IamUserIdentity) -> Self {
        self.iam_user = Some(input);
        self
    }
    /// <p>An IAM user identity.</p>
    pub fn set_iam_user(
        mut self,
        input: std::option::Option<crate::types::IamUserIdentity>,
    ) -> Self {
        self.iam_user = input;
        self
    }
    /// <p>An IAM role identity.</p>
    pub fn iam_role(mut self, input: crate::types::IamRoleIdentity) -> Self {
        self.iam_role = Some(input);
        self
    }
    /// <p>An IAM role identity.</p>
    pub fn set_iam_role(
        mut self,
        input: std::option::Option<crate::types::IamRoleIdentity>,
    ) -> Self {
        self.iam_role = input;
        self
    }
    /// Consumes the builder and constructs a [`Identity`](crate::types::Identity).
    pub fn build(self) -> crate::types::Identity {
        crate::types::Identity {
            user: self.user,
            group: self.group,
            iam_user: self.iam_user,
            iam_role: self.iam_role,
        }
    }
}
