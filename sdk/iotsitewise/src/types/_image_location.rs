// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an image that is uploaded to IoT SiteWise and available at a URL.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImageLocation {
    /// <p>The ID of the image.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The URL where the image is available. The URL is valid for 15 minutes so that you can view and download the image</p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
}
impl ImageLocation {
    /// <p>The ID of the image.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The URL where the image is available. The URL is valid for 15 minutes so that you can view and download the image</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl ImageLocation {
    /// Creates a new builder-style object to manufacture [`ImageLocation`](crate::types::ImageLocation).
    pub fn builder() -> crate::types::builders::ImageLocationBuilder {
        crate::types::builders::ImageLocationBuilder::default()
    }
}

/// A builder for [`ImageLocation`](crate::types::ImageLocation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageLocationBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) url: std::option::Option<std::string::String>,
}
impl ImageLocationBuilder {
    /// <p>The ID of the image.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the image.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The URL where the image is available. The URL is valid for 15 minutes so that you can view and download the image</p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p>The URL where the image is available. The URL is valid for 15 minutes so that you can view and download the image</p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageLocation`](crate::types::ImageLocation).
    pub fn build(self) -> crate::types::ImageLocation {
        crate::types::ImageLocation {
            id: self.id,
            url: self.url,
        }
    }
}
