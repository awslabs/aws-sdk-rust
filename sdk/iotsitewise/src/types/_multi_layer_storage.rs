// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the storage destination.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MultiLayerStorage {
    /// <p>Contains information about a customer managed Amazon S3 bucket.</p>
    pub customer_managed_s3_storage: ::std::option::Option<crate::types::CustomerManagedS3Storage>,
}
impl MultiLayerStorage {
    /// <p>Contains information about a customer managed Amazon S3 bucket.</p>
    pub fn customer_managed_s3_storage(&self) -> ::std::option::Option<&crate::types::CustomerManagedS3Storage> {
        self.customer_managed_s3_storage.as_ref()
    }
}
impl MultiLayerStorage {
    /// Creates a new builder-style object to manufacture [`MultiLayerStorage`](crate::types::MultiLayerStorage).
    pub fn builder() -> crate::types::builders::MultiLayerStorageBuilder {
        crate::types::builders::MultiLayerStorageBuilder::default()
    }
}

/// A builder for [`MultiLayerStorage`](crate::types::MultiLayerStorage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MultiLayerStorageBuilder {
    pub(crate) customer_managed_s3_storage: ::std::option::Option<crate::types::CustomerManagedS3Storage>,
}
impl MultiLayerStorageBuilder {
    /// <p>Contains information about a customer managed Amazon S3 bucket.</p>
    /// This field is required.
    pub fn customer_managed_s3_storage(mut self, input: crate::types::CustomerManagedS3Storage) -> Self {
        self.customer_managed_s3_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about a customer managed Amazon S3 bucket.</p>
    pub fn set_customer_managed_s3_storage(mut self, input: ::std::option::Option<crate::types::CustomerManagedS3Storage>) -> Self {
        self.customer_managed_s3_storage = input;
        self
    }
    /// <p>Contains information about a customer managed Amazon S3 bucket.</p>
    pub fn get_customer_managed_s3_storage(&self) -> &::std::option::Option<crate::types::CustomerManagedS3Storage> {
        &self.customer_managed_s3_storage
    }
    /// Consumes the builder and constructs a [`MultiLayerStorage`](crate::types::MultiLayerStorage).
    pub fn build(self) -> crate::types::MultiLayerStorage {
        crate::types::MultiLayerStorage {
            customer_managed_s3_storage: self.customer_managed_s3_storage,
        }
    }
}
