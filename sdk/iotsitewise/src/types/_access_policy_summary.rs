// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an access policy that defines an identity's access to an IoT SiteWise Monitor resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessPolicySummary {
    /// <p>The ID of the access policy.</p>
    pub id: ::std::string::String,
    /// <p>The identity (an IAM Identity Center user, an IAM Identity Center group, or an IAM user).</p>
    pub identity: ::std::option::Option<crate::types::Identity>,
    /// <p>The IoT SiteWise Monitor resource (a portal or project).</p>
    pub resource: ::std::option::Option<crate::types::Resource>,
    /// <p>The permissions for the access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner.</p>
    pub permission: crate::types::Permission,
    /// <p>The date the access policy was created, in Unix epoch time.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date the access policy was last updated, in Unix epoch time.</p>
    pub last_update_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AccessPolicySummary {
    /// <p>The ID of the access policy.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The identity (an IAM Identity Center user, an IAM Identity Center group, or an IAM user).</p>
    pub fn identity(&self) -> ::std::option::Option<&crate::types::Identity> {
        self.identity.as_ref()
    }
    /// <p>The IoT SiteWise Monitor resource (a portal or project).</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::Resource> {
        self.resource.as_ref()
    }
    /// <p>The permissions for the access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner.</p>
    pub fn permission(&self) -> &crate::types::Permission {
        &self.permission
    }
    /// <p>The date the access policy was created, in Unix epoch time.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date the access policy was last updated, in Unix epoch time.</p>
    pub fn last_update_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_date.as_ref()
    }
}
impl AccessPolicySummary {
    /// Creates a new builder-style object to manufacture [`AccessPolicySummary`](crate::types::AccessPolicySummary).
    pub fn builder() -> crate::types::builders::AccessPolicySummaryBuilder {
        crate::types::builders::AccessPolicySummaryBuilder::default()
    }
}

/// A builder for [`AccessPolicySummary`](crate::types::AccessPolicySummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccessPolicySummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) identity: ::std::option::Option<crate::types::Identity>,
    pub(crate) resource: ::std::option::Option<crate::types::Resource>,
    pub(crate) permission: ::std::option::Option<crate::types::Permission>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AccessPolicySummaryBuilder {
    /// <p>The ID of the access policy.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the access policy.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the access policy.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The identity (an IAM Identity Center user, an IAM Identity Center group, or an IAM user).</p>
    /// This field is required.
    pub fn identity(mut self, input: crate::types::Identity) -> Self {
        self.identity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The identity (an IAM Identity Center user, an IAM Identity Center group, or an IAM user).</p>
    pub fn set_identity(mut self, input: ::std::option::Option<crate::types::Identity>) -> Self {
        self.identity = input;
        self
    }
    /// <p>The identity (an IAM Identity Center user, an IAM Identity Center group, or an IAM user).</p>
    pub fn get_identity(&self) -> &::std::option::Option<crate::types::Identity> {
        &self.identity
    }
    /// <p>The IoT SiteWise Monitor resource (a portal or project).</p>
    /// This field is required.
    pub fn resource(mut self, input: crate::types::Resource) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IoT SiteWise Monitor resource (a portal or project).</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::Resource>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The IoT SiteWise Monitor resource (a portal or project).</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::Resource> {
        &self.resource
    }
    /// <p>The permissions for the access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner.</p>
    /// This field is required.
    pub fn permission(mut self, input: crate::types::Permission) -> Self {
        self.permission = ::std::option::Option::Some(input);
        self
    }
    /// <p>The permissions for the access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner.</p>
    pub fn set_permission(mut self, input: ::std::option::Option<crate::types::Permission>) -> Self {
        self.permission = input;
        self
    }
    /// <p>The permissions for the access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner.</p>
    pub fn get_permission(&self) -> &::std::option::Option<crate::types::Permission> {
        &self.permission
    }
    /// <p>The date the access policy was created, in Unix epoch time.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the access policy was created, in Unix epoch time.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date the access policy was created, in Unix epoch time.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The date the access policy was last updated, in Unix epoch time.</p>
    pub fn last_update_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the access policy was last updated, in Unix epoch time.</p>
    pub fn set_last_update_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_date = input;
        self
    }
    /// <p>The date the access policy was last updated, in Unix epoch time.</p>
    pub fn get_last_update_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_date
    }
    /// Consumes the builder and constructs a [`AccessPolicySummary`](crate::types::AccessPolicySummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::AccessPolicySummaryBuilder::id)
    /// - [`permission`](crate::types::builders::AccessPolicySummaryBuilder::permission)
    pub fn build(self) -> ::std::result::Result<crate::types::AccessPolicySummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AccessPolicySummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building AccessPolicySummary",
                )
            })?,
            identity: self.identity,
            resource: self.resource,
            permission: self.permission.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "permission",
                    "permission was not specified but it is required when building AccessPolicySummary",
                )
            })?,
            creation_date: self.creation_date,
            last_update_date: self.last_update_date,
        })
    }
}
