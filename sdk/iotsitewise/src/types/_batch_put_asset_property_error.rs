// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains error information from updating a batch of asset property values.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchPutAssetPropertyError {
    /// <p>The error code.</p>
    pub error_code: crate::types::BatchPutAssetPropertyValueErrorCode,
    /// <p>The associated error message.</p>
    pub error_message: ::std::string::String,
    /// <p>A list of timestamps for each error, if any.</p>
    pub timestamps: ::std::vec::Vec<crate::types::TimeInNanos>,
}
impl BatchPutAssetPropertyError {
    /// <p>The error code.</p>
    pub fn error_code(&self) -> &crate::types::BatchPutAssetPropertyValueErrorCode {
        &self.error_code
    }
    /// <p>The associated error message.</p>
    pub fn error_message(&self) -> &str {
        use std::ops::Deref;
        self.error_message.deref()
    }
    /// <p>A list of timestamps for each error, if any.</p>
    pub fn timestamps(&self) -> &[crate::types::TimeInNanos] {
        use std::ops::Deref;
        self.timestamps.deref()
    }
}
impl BatchPutAssetPropertyError {
    /// Creates a new builder-style object to manufacture [`BatchPutAssetPropertyError`](crate::types::BatchPutAssetPropertyError).
    pub fn builder() -> crate::types::builders::BatchPutAssetPropertyErrorBuilder {
        crate::types::builders::BatchPutAssetPropertyErrorBuilder::default()
    }
}

/// A builder for [`BatchPutAssetPropertyError`](crate::types::BatchPutAssetPropertyError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchPutAssetPropertyErrorBuilder {
    pub(crate) error_code: ::std::option::Option<crate::types::BatchPutAssetPropertyValueErrorCode>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) timestamps: ::std::option::Option<::std::vec::Vec<crate::types::TimeInNanos>>,
}
impl BatchPutAssetPropertyErrorBuilder {
    /// <p>The error code.</p>
    /// This field is required.
    pub fn error_code(mut self, input: crate::types::BatchPutAssetPropertyValueErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::BatchPutAssetPropertyValueErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::BatchPutAssetPropertyValueErrorCode> {
        &self.error_code
    }
    /// <p>The associated error message.</p>
    /// This field is required.
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The associated error message.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The associated error message.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Appends an item to `timestamps`.
    ///
    /// To override the contents of this collection use [`set_timestamps`](Self::set_timestamps).
    ///
    /// <p>A list of timestamps for each error, if any.</p>
    pub fn timestamps(mut self, input: crate::types::TimeInNanos) -> Self {
        let mut v = self.timestamps.unwrap_or_default();
        v.push(input);
        self.timestamps = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of timestamps for each error, if any.</p>
    pub fn set_timestamps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TimeInNanos>>) -> Self {
        self.timestamps = input;
        self
    }
    /// <p>A list of timestamps for each error, if any.</p>
    pub fn get_timestamps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TimeInNanos>> {
        &self.timestamps
    }
    /// Consumes the builder and constructs a [`BatchPutAssetPropertyError`](crate::types::BatchPutAssetPropertyError).
    /// This method will fail if any of the following fields are not set:
    /// - [`error_code`](crate::types::builders::BatchPutAssetPropertyErrorBuilder::error_code)
    /// - [`error_message`](crate::types::builders::BatchPutAssetPropertyErrorBuilder::error_message)
    /// - [`timestamps`](crate::types::builders::BatchPutAssetPropertyErrorBuilder::timestamps)
    pub fn build(self) -> ::std::result::Result<crate::types::BatchPutAssetPropertyError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchPutAssetPropertyError {
            error_code: self.error_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_code",
                    "error_code was not specified but it is required when building BatchPutAssetPropertyError",
                )
            })?,
            error_message: self.error_message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_message",
                    "error_message was not specified but it is required when building BatchPutAssetPropertyError",
                )
            })?,
            timestamps: self.timestamps.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamps",
                    "timestamps was not specified but it is required when building BatchPutAssetPropertyError",
                )
            })?,
        })
    }
}
