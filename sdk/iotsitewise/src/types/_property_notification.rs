// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains asset property value notification information. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html">Interacting with other services</a> in the <i>IoT SiteWise User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PropertyNotification {
    /// <p>The MQTT topic to which IoT SiteWise publishes property value update notifications.</p>
    pub topic: ::std::string::String,
    /// <p>The current notification state.</p>
    pub state: crate::types::PropertyNotificationState,
}
impl PropertyNotification {
    /// <p>The MQTT topic to which IoT SiteWise publishes property value update notifications.</p>
    pub fn topic(&self) -> &str {
        use std::ops::Deref;
        self.topic.deref()
    }
    /// <p>The current notification state.</p>
    pub fn state(&self) -> &crate::types::PropertyNotificationState {
        &self.state
    }
}
impl PropertyNotification {
    /// Creates a new builder-style object to manufacture [`PropertyNotification`](crate::types::PropertyNotification).
    pub fn builder() -> crate::types::builders::PropertyNotificationBuilder {
        crate::types::builders::PropertyNotificationBuilder::default()
    }
}

/// A builder for [`PropertyNotification`](crate::types::PropertyNotification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PropertyNotificationBuilder {
    pub(crate) topic: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::PropertyNotificationState>,
}
impl PropertyNotificationBuilder {
    /// <p>The MQTT topic to which IoT SiteWise publishes property value update notifications.</p>
    /// This field is required.
    pub fn topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MQTT topic to which IoT SiteWise publishes property value update notifications.</p>
    pub fn set_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.topic = input;
        self
    }
    /// <p>The MQTT topic to which IoT SiteWise publishes property value update notifications.</p>
    pub fn get_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.topic
    }
    /// <p>The current notification state.</p>
    /// This field is required.
    pub fn state(mut self, input: crate::types::PropertyNotificationState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current notification state.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::PropertyNotificationState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current notification state.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::PropertyNotificationState> {
        &self.state
    }
    /// Consumes the builder and constructs a [`PropertyNotification`](crate::types::PropertyNotification).
    /// This method will fail if any of the following fields are not set:
    /// - [`topic`](crate::types::builders::PropertyNotificationBuilder::topic)
    /// - [`state`](crate::types::builders::PropertyNotificationBuilder::state)
    pub fn build(self) -> ::std::result::Result<crate::types::PropertyNotification, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PropertyNotification {
            topic: self.topic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "topic",
                    "topic was not specified but it is required when building PropertyNotification",
                )
            })?,
            state: self.state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state",
                    "state was not specified but it is required when building PropertyNotification",
                )
            })?,
        })
    }
}
