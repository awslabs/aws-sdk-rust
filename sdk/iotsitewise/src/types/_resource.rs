// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an IoT SiteWise Monitor resource ID for a portal or project.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Resource {
    /// <p>A portal resource.</p>
    #[doc(hidden)]
    pub portal: std::option::Option<crate::types::PortalResource>,
    /// <p>A project resource.</p>
    #[doc(hidden)]
    pub project: std::option::Option<crate::types::ProjectResource>,
}
impl Resource {
    /// <p>A portal resource.</p>
    pub fn portal(&self) -> std::option::Option<&crate::types::PortalResource> {
        self.portal.as_ref()
    }
    /// <p>A project resource.</p>
    pub fn project(&self) -> std::option::Option<&crate::types::ProjectResource> {
        self.project.as_ref()
    }
}
impl Resource {
    /// Creates a new builder-style object to manufacture [`Resource`](crate::types::Resource).
    pub fn builder() -> crate::types::builders::ResourceBuilder {
        crate::types::builders::ResourceBuilder::default()
    }
}

/// A builder for [`Resource`](crate::types::Resource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceBuilder {
    pub(crate) portal: std::option::Option<crate::types::PortalResource>,
    pub(crate) project: std::option::Option<crate::types::ProjectResource>,
}
impl ResourceBuilder {
    /// <p>A portal resource.</p>
    pub fn portal(mut self, input: crate::types::PortalResource) -> Self {
        self.portal = Some(input);
        self
    }
    /// <p>A portal resource.</p>
    pub fn set_portal(mut self, input: std::option::Option<crate::types::PortalResource>) -> Self {
        self.portal = input;
        self
    }
    /// <p>A project resource.</p>
    pub fn project(mut self, input: crate::types::ProjectResource) -> Self {
        self.project = Some(input);
        self
    }
    /// <p>A project resource.</p>
    pub fn set_project(
        mut self,
        input: std::option::Option<crate::types::ProjectResource>,
    ) -> Self {
        self.project = input;
        self
    }
    /// Consumes the builder and constructs a [`Resource`](crate::types::Resource).
    pub fn build(self) -> crate::types::Resource {
        crate::types::Resource {
            portal: self.portal,
            project: self.project,
        }
    }
}
