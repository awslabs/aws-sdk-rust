// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AssociateAssets`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_assets`](crate::client::fluent_builders::AssociateAssets).
///
/// `ParseStrictResponse` impl for `AssociateAssets`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AssociateAssets {
    _private: (),
}
impl AssociateAssets {
    /// Creates a new builder-style object to manufacture [`AssociateAssetsInput`](crate::input::AssociateAssetsInput).
    pub fn builder() -> crate::input::associate_assets_input::Builder {
        crate::input::associate_assets_input::Builder::default()
    }
    /// Creates a new `AssociateAssets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociateAssets {
    type Output = std::result::Result<
        crate::output::AssociateAssetsOutput,
        crate::error::AssociateAssetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_associate_assets::de_associate_assets_http_error(response)
        } else {
            crate::protocol_serde::shape_associate_assets::de_associate_assets_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `AssociateTimeSeriesToAssetProperty`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_time_series_to_asset_property`](crate::client::fluent_builders::AssociateTimeSeriesToAssetProperty).
///
/// `ParseStrictResponse` impl for `AssociateTimeSeriesToAssetProperty`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AssociateTimeSeriesToAssetProperty {
    _private: (),
}
impl AssociateTimeSeriesToAssetProperty {
    /// Creates a new builder-style object to manufacture [`AssociateTimeSeriesToAssetPropertyInput`](crate::input::AssociateTimeSeriesToAssetPropertyInput).
    pub fn builder() -> crate::input::associate_time_series_to_asset_property_input::Builder {
        crate::input::associate_time_series_to_asset_property_input::Builder::default()
    }
    /// Creates a new `AssociateTimeSeriesToAssetProperty` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociateTimeSeriesToAssetProperty {
    type Output = std::result::Result<
        crate::output::AssociateTimeSeriesToAssetPropertyOutput,
        crate::error::AssociateTimeSeriesToAssetPropertyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_associate_time_series_to_asset_property::de_associate_time_series_to_asset_property_http_error(response)
        } else {
            crate::protocol_serde::shape_associate_time_series_to_asset_property::de_associate_time_series_to_asset_property_http_response(response)
        }
    }
}

/// Operation shape for `BatchAssociateProjectAssets`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_associate_project_assets`](crate::client::fluent_builders::BatchAssociateProjectAssets).
///
/// `ParseStrictResponse` impl for `BatchAssociateProjectAssets`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchAssociateProjectAssets {
    _private: (),
}
impl BatchAssociateProjectAssets {
    /// Creates a new builder-style object to manufacture [`BatchAssociateProjectAssetsInput`](crate::input::BatchAssociateProjectAssetsInput).
    pub fn builder() -> crate::input::batch_associate_project_assets_input::Builder {
        crate::input::batch_associate_project_assets_input::Builder::default()
    }
    /// Creates a new `BatchAssociateProjectAssets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchAssociateProjectAssets {
    type Output = std::result::Result<
        crate::output::BatchAssociateProjectAssetsOutput,
        crate::error::BatchAssociateProjectAssetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_associate_project_assets::de_batch_associate_project_assets_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_associate_project_assets::de_batch_associate_project_assets_http_response(response)
        }
    }
}

/// Operation shape for `BatchDisassociateProjectAssets`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_disassociate_project_assets`](crate::client::fluent_builders::BatchDisassociateProjectAssets).
///
/// `ParseStrictResponse` impl for `BatchDisassociateProjectAssets`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchDisassociateProjectAssets {
    _private: (),
}
impl BatchDisassociateProjectAssets {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateProjectAssetsInput`](crate::input::BatchDisassociateProjectAssetsInput).
    pub fn builder() -> crate::input::batch_disassociate_project_assets_input::Builder {
        crate::input::batch_disassociate_project_assets_input::Builder::default()
    }
    /// Creates a new `BatchDisassociateProjectAssets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchDisassociateProjectAssets {
    type Output = std::result::Result<
        crate::output::BatchDisassociateProjectAssetsOutput,
        crate::error::BatchDisassociateProjectAssetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_disassociate_project_assets::de_batch_disassociate_project_assets_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_disassociate_project_assets::de_batch_disassociate_project_assets_http_response(response)
        }
    }
}

/// Operation shape for `BatchGetAssetPropertyAggregates`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_get_asset_property_aggregates`](crate::client::fluent_builders::BatchGetAssetPropertyAggregates).
///
/// `ParseStrictResponse` impl for `BatchGetAssetPropertyAggregates`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchGetAssetPropertyAggregates {
    _private: (),
}
impl BatchGetAssetPropertyAggregates {
    /// Creates a new builder-style object to manufacture [`BatchGetAssetPropertyAggregatesInput`](crate::input::BatchGetAssetPropertyAggregatesInput).
    pub fn builder() -> crate::input::batch_get_asset_property_aggregates_input::Builder {
        crate::input::batch_get_asset_property_aggregates_input::Builder::default()
    }
    /// Creates a new `BatchGetAssetPropertyAggregates` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchGetAssetPropertyAggregates {
    type Output = std::result::Result<
        crate::output::BatchGetAssetPropertyAggregatesOutput,
        crate::error::BatchGetAssetPropertyAggregatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_get_asset_property_aggregates::de_batch_get_asset_property_aggregates_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_get_asset_property_aggregates::de_batch_get_asset_property_aggregates_http_response(response)
        }
    }
}

/// Operation shape for `BatchGetAssetPropertyValue`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_get_asset_property_value`](crate::client::fluent_builders::BatchGetAssetPropertyValue).
///
/// `ParseStrictResponse` impl for `BatchGetAssetPropertyValue`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchGetAssetPropertyValue {
    _private: (),
}
impl BatchGetAssetPropertyValue {
    /// Creates a new builder-style object to manufacture [`BatchGetAssetPropertyValueInput`](crate::input::BatchGetAssetPropertyValueInput).
    pub fn builder() -> crate::input::batch_get_asset_property_value_input::Builder {
        crate::input::batch_get_asset_property_value_input::Builder::default()
    }
    /// Creates a new `BatchGetAssetPropertyValue` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchGetAssetPropertyValue {
    type Output = std::result::Result<
        crate::output::BatchGetAssetPropertyValueOutput,
        crate::error::BatchGetAssetPropertyValueError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_get_asset_property_value::de_batch_get_asset_property_value_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_get_asset_property_value::de_batch_get_asset_property_value_http_response(response)
        }
    }
}

/// Operation shape for `BatchGetAssetPropertyValueHistory`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_get_asset_property_value_history`](crate::client::fluent_builders::BatchGetAssetPropertyValueHistory).
///
/// `ParseStrictResponse` impl for `BatchGetAssetPropertyValueHistory`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchGetAssetPropertyValueHistory {
    _private: (),
}
impl BatchGetAssetPropertyValueHistory {
    /// Creates a new builder-style object to manufacture [`BatchGetAssetPropertyValueHistoryInput`](crate::input::BatchGetAssetPropertyValueHistoryInput).
    pub fn builder() -> crate::input::batch_get_asset_property_value_history_input::Builder {
        crate::input::batch_get_asset_property_value_history_input::Builder::default()
    }
    /// Creates a new `BatchGetAssetPropertyValueHistory` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchGetAssetPropertyValueHistory {
    type Output = std::result::Result<
        crate::output::BatchGetAssetPropertyValueHistoryOutput,
        crate::error::BatchGetAssetPropertyValueHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_get_asset_property_value_history::de_batch_get_asset_property_value_history_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_get_asset_property_value_history::de_batch_get_asset_property_value_history_http_response(response)
        }
    }
}

/// Operation shape for `BatchPutAssetPropertyValue`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_put_asset_property_value`](crate::client::fluent_builders::BatchPutAssetPropertyValue).
///
/// `ParseStrictResponse` impl for `BatchPutAssetPropertyValue`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchPutAssetPropertyValue {
    _private: (),
}
impl BatchPutAssetPropertyValue {
    /// Creates a new builder-style object to manufacture [`BatchPutAssetPropertyValueInput`](crate::input::BatchPutAssetPropertyValueInput).
    pub fn builder() -> crate::input::batch_put_asset_property_value_input::Builder {
        crate::input::batch_put_asset_property_value_input::Builder::default()
    }
    /// Creates a new `BatchPutAssetPropertyValue` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchPutAssetPropertyValue {
    type Output = std::result::Result<
        crate::output::BatchPutAssetPropertyValueOutput,
        crate::error::BatchPutAssetPropertyValueError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_put_asset_property_value::de_batch_put_asset_property_value_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_put_asset_property_value::de_batch_put_asset_property_value_http_response(response)
        }
    }
}

/// Operation shape for `CreateAccessPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_access_policy`](crate::client::fluent_builders::CreateAccessPolicy).
///
/// `ParseStrictResponse` impl for `CreateAccessPolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateAccessPolicy {
    _private: (),
}
impl CreateAccessPolicy {
    /// Creates a new builder-style object to manufacture [`CreateAccessPolicyInput`](crate::input::CreateAccessPolicyInput).
    pub fn builder() -> crate::input::create_access_policy_input::Builder {
        crate::input::create_access_policy_input::Builder::default()
    }
    /// Creates a new `CreateAccessPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateAccessPolicy {
    type Output = std::result::Result<
        crate::output::CreateAccessPolicyOutput,
        crate::error::CreateAccessPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_access_policy::de_create_access_policy_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_access_policy::de_create_access_policy_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateAsset`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_asset`](crate::client::fluent_builders::CreateAsset).
///
/// `ParseStrictResponse` impl for `CreateAsset`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateAsset {
    _private: (),
}
impl CreateAsset {
    /// Creates a new builder-style object to manufacture [`CreateAssetInput`](crate::input::CreateAssetInput).
    pub fn builder() -> crate::input::create_asset_input::Builder {
        crate::input::create_asset_input::Builder::default()
    }
    /// Creates a new `CreateAsset` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateAsset {
    type Output =
        std::result::Result<crate::output::CreateAssetOutput, crate::error::CreateAssetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_create_asset::de_create_asset_http_error(response)
        } else {
            crate::protocol_serde::shape_create_asset::de_create_asset_http_response(response)
        }
    }
}

/// Operation shape for `CreateAssetModel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_asset_model`](crate::client::fluent_builders::CreateAssetModel).
///
/// `ParseStrictResponse` impl for `CreateAssetModel`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateAssetModel {
    _private: (),
}
impl CreateAssetModel {
    /// Creates a new builder-style object to manufacture [`CreateAssetModelInput`](crate::input::CreateAssetModelInput).
    pub fn builder() -> crate::input::create_asset_model_input::Builder {
        crate::input::create_asset_model_input::Builder::default()
    }
    /// Creates a new `CreateAssetModel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateAssetModel {
    type Output = std::result::Result<
        crate::output::CreateAssetModelOutput,
        crate::error::CreateAssetModelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_create_asset_model::de_create_asset_model_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_asset_model::de_create_asset_model_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateBulkImportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_bulk_import_job`](crate::client::fluent_builders::CreateBulkImportJob).
///
/// `ParseStrictResponse` impl for `CreateBulkImportJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateBulkImportJob {
    _private: (),
}
impl CreateBulkImportJob {
    /// Creates a new builder-style object to manufacture [`CreateBulkImportJobInput`](crate::input::CreateBulkImportJobInput).
    pub fn builder() -> crate::input::create_bulk_import_job_input::Builder {
        crate::input::create_bulk_import_job_input::Builder::default()
    }
    /// Creates a new `CreateBulkImportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateBulkImportJob {
    type Output = std::result::Result<
        crate::output::CreateBulkImportJobOutput,
        crate::error::CreateBulkImportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_create_bulk_import_job::de_create_bulk_import_job_http_error(response)
        } else {
            crate::protocol_serde::shape_create_bulk_import_job::de_create_bulk_import_job_http_response(response)
        }
    }
}

/// Operation shape for `CreateDashboard`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_dashboard`](crate::client::fluent_builders::CreateDashboard).
///
/// `ParseStrictResponse` impl for `CreateDashboard`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateDashboard {
    _private: (),
}
impl CreateDashboard {
    /// Creates a new builder-style object to manufacture [`CreateDashboardInput`](crate::input::CreateDashboardInput).
    pub fn builder() -> crate::input::create_dashboard_input::Builder {
        crate::input::create_dashboard_input::Builder::default()
    }
    /// Creates a new `CreateDashboard` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateDashboard {
    type Output = std::result::Result<
        crate::output::CreateDashboardOutput,
        crate::error::CreateDashboardError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_dashboard::de_create_dashboard_http_error(response)
        } else {
            crate::protocol_serde::shape_create_dashboard::de_create_dashboard_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateGateway`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_gateway`](crate::client::fluent_builders::CreateGateway).
///
/// `ParseStrictResponse` impl for `CreateGateway`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateGateway {
    _private: (),
}
impl CreateGateway {
    /// Creates a new builder-style object to manufacture [`CreateGatewayInput`](crate::input::CreateGatewayInput).
    pub fn builder() -> crate::input::create_gateway_input::Builder {
        crate::input::create_gateway_input::Builder::default()
    }
    /// Creates a new `CreateGateway` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGateway {
    type Output =
        std::result::Result<crate::output::CreateGatewayOutput, crate::error::CreateGatewayError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_gateway::de_create_gateway_http_error(response)
        } else {
            crate::protocol_serde::shape_create_gateway::de_create_gateway_http_response(response)
        }
    }
}

/// Operation shape for `CreatePortal`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_portal`](crate::client::fluent_builders::CreatePortal).
///
/// `ParseStrictResponse` impl for `CreatePortal`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreatePortal {
    _private: (),
}
impl CreatePortal {
    /// Creates a new builder-style object to manufacture [`CreatePortalInput`](crate::input::CreatePortalInput).
    pub fn builder() -> crate::input::create_portal_input::Builder {
        crate::input::create_portal_input::Builder::default()
    }
    /// Creates a new `CreatePortal` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreatePortal {
    type Output =
        std::result::Result<crate::output::CreatePortalOutput, crate::error::CreatePortalError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_create_portal::de_create_portal_http_error(response)
        } else {
            crate::protocol_serde::shape_create_portal::de_create_portal_http_response(response)
        }
    }
}

/// Operation shape for `CreateProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_project`](crate::client::fluent_builders::CreateProject).
///
/// `ParseStrictResponse` impl for `CreateProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateProject {
    _private: (),
}
impl CreateProject {
    /// Creates a new builder-style object to manufacture [`CreateProjectInput`](crate::input::CreateProjectInput).
    pub fn builder() -> crate::input::create_project_input::Builder {
        crate::input::create_project_input::Builder::default()
    }
    /// Creates a new `CreateProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateProject {
    type Output =
        std::result::Result<crate::output::CreateProjectOutput, crate::error::CreateProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_project::de_create_project_http_error(response)
        } else {
            crate::protocol_serde::shape_create_project::de_create_project_http_response(response)
        }
    }
}

/// Operation shape for `DeleteAccessPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_access_policy`](crate::client::fluent_builders::DeleteAccessPolicy).
///
/// `ParseStrictResponse` impl for `DeleteAccessPolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteAccessPolicy {
    _private: (),
}
impl DeleteAccessPolicy {
    /// Creates a new builder-style object to manufacture [`DeleteAccessPolicyInput`](crate::input::DeleteAccessPolicyInput).
    pub fn builder() -> crate::input::delete_access_policy_input::Builder {
        crate::input::delete_access_policy_input::Builder::default()
    }
    /// Creates a new `DeleteAccessPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteAccessPolicy {
    type Output = std::result::Result<
        crate::output::DeleteAccessPolicyOutput,
        crate::error::DeleteAccessPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_access_policy::de_delete_access_policy_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_access_policy::de_delete_access_policy_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteAsset`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_asset`](crate::client::fluent_builders::DeleteAsset).
///
/// `ParseStrictResponse` impl for `DeleteAsset`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteAsset {
    _private: (),
}
impl DeleteAsset {
    /// Creates a new builder-style object to manufacture [`DeleteAssetInput`](crate::input::DeleteAssetInput).
    pub fn builder() -> crate::input::delete_asset_input::Builder {
        crate::input::delete_asset_input::Builder::default()
    }
    /// Creates a new `DeleteAsset` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteAsset {
    type Output =
        std::result::Result<crate::output::DeleteAssetOutput, crate::error::DeleteAssetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_delete_asset::de_delete_asset_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_asset::de_delete_asset_http_response(response)
        }
    }
}

/// Operation shape for `DeleteAssetModel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_asset_model`](crate::client::fluent_builders::DeleteAssetModel).
///
/// `ParseStrictResponse` impl for `DeleteAssetModel`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteAssetModel {
    _private: (),
}
impl DeleteAssetModel {
    /// Creates a new builder-style object to manufacture [`DeleteAssetModelInput`](crate::input::DeleteAssetModelInput).
    pub fn builder() -> crate::input::delete_asset_model_input::Builder {
        crate::input::delete_asset_model_input::Builder::default()
    }
    /// Creates a new `DeleteAssetModel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteAssetModel {
    type Output = std::result::Result<
        crate::output::DeleteAssetModelOutput,
        crate::error::DeleteAssetModelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_delete_asset_model::de_delete_asset_model_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_asset_model::de_delete_asset_model_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteDashboard`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_dashboard`](crate::client::fluent_builders::DeleteDashboard).
///
/// `ParseStrictResponse` impl for `DeleteDashboard`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteDashboard {
    _private: (),
}
impl DeleteDashboard {
    /// Creates a new builder-style object to manufacture [`DeleteDashboardInput`](crate::input::DeleteDashboardInput).
    pub fn builder() -> crate::input::delete_dashboard_input::Builder {
        crate::input::delete_dashboard_input::Builder::default()
    }
    /// Creates a new `DeleteDashboard` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteDashboard {
    type Output = std::result::Result<
        crate::output::DeleteDashboardOutput,
        crate::error::DeleteDashboardError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_dashboard::de_delete_dashboard_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_dashboard::de_delete_dashboard_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteGateway`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_gateway`](crate::client::fluent_builders::DeleteGateway).
///
/// `ParseStrictResponse` impl for `DeleteGateway`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteGateway {
    _private: (),
}
impl DeleteGateway {
    /// Creates a new builder-style object to manufacture [`DeleteGatewayInput`](crate::input::DeleteGatewayInput).
    pub fn builder() -> crate::input::delete_gateway_input::Builder {
        crate::input::delete_gateway_input::Builder::default()
    }
    /// Creates a new `DeleteGateway` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteGateway {
    type Output =
        std::result::Result<crate::output::DeleteGatewayOutput, crate::error::DeleteGatewayError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_gateway::de_delete_gateway_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_gateway::de_delete_gateway_http_response(response)
        }
    }
}

/// Operation shape for `DeletePortal`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_portal`](crate::client::fluent_builders::DeletePortal).
///
/// `ParseStrictResponse` impl for `DeletePortal`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeletePortal {
    _private: (),
}
impl DeletePortal {
    /// Creates a new builder-style object to manufacture [`DeletePortalInput`](crate::input::DeletePortalInput).
    pub fn builder() -> crate::input::delete_portal_input::Builder {
        crate::input::delete_portal_input::Builder::default()
    }
    /// Creates a new `DeletePortal` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeletePortal {
    type Output =
        std::result::Result<crate::output::DeletePortalOutput, crate::error::DeletePortalError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_delete_portal::de_delete_portal_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_portal::de_delete_portal_http_response(response)
        }
    }
}

/// Operation shape for `DeleteProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_project`](crate::client::fluent_builders::DeleteProject).
///
/// `ParseStrictResponse` impl for `DeleteProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteProject {
    _private: (),
}
impl DeleteProject {
    /// Creates a new builder-style object to manufacture [`DeleteProjectInput`](crate::input::DeleteProjectInput).
    pub fn builder() -> crate::input::delete_project_input::Builder {
        crate::input::delete_project_input::Builder::default()
    }
    /// Creates a new `DeleteProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteProject {
    type Output =
        std::result::Result<crate::output::DeleteProjectOutput, crate::error::DeleteProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_project::de_delete_project_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_project::de_delete_project_http_response(response)
        }
    }
}

/// Operation shape for `DeleteTimeSeries`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_time_series`](crate::client::fluent_builders::DeleteTimeSeries).
///
/// `ParseStrictResponse` impl for `DeleteTimeSeries`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteTimeSeries {
    _private: (),
}
impl DeleteTimeSeries {
    /// Creates a new builder-style object to manufacture [`DeleteTimeSeriesInput`](crate::input::DeleteTimeSeriesInput).
    pub fn builder() -> crate::input::delete_time_series_input::Builder {
        crate::input::delete_time_series_input::Builder::default()
    }
    /// Creates a new `DeleteTimeSeries` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteTimeSeries {
    type Output = std::result::Result<
        crate::output::DeleteTimeSeriesOutput,
        crate::error::DeleteTimeSeriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_time_series::de_delete_time_series_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_time_series::de_delete_time_series_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeAccessPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_access_policy`](crate::client::fluent_builders::DescribeAccessPolicy).
///
/// `ParseStrictResponse` impl for `DescribeAccessPolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeAccessPolicy {
    _private: (),
}
impl DescribeAccessPolicy {
    /// Creates a new builder-style object to manufacture [`DescribeAccessPolicyInput`](crate::input::DescribeAccessPolicyInput).
    pub fn builder() -> crate::input::describe_access_policy_input::Builder {
        crate::input::describe_access_policy_input::Builder::default()
    }
    /// Creates a new `DescribeAccessPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeAccessPolicy {
    type Output = std::result::Result<
        crate::output::DescribeAccessPolicyOutput,
        crate::error::DescribeAccessPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_access_policy::de_describe_access_policy_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_access_policy::de_describe_access_policy_http_response(response)
        }
    }
}

/// Operation shape for `DescribeAsset`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_asset`](crate::client::fluent_builders::DescribeAsset).
///
/// `ParseStrictResponse` impl for `DescribeAsset`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeAsset {
    _private: (),
}
impl DescribeAsset {
    /// Creates a new builder-style object to manufacture [`DescribeAssetInput`](crate::input::DescribeAssetInput).
    pub fn builder() -> crate::input::describe_asset_input::Builder {
        crate::input::describe_asset_input::Builder::default()
    }
    /// Creates a new `DescribeAsset` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeAsset {
    type Output =
        std::result::Result<crate::output::DescribeAssetOutput, crate::error::DescribeAssetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_asset::de_describe_asset_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_asset::de_describe_asset_http_response(response)
        }
    }
}

/// Operation shape for `DescribeAssetModel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_asset_model`](crate::client::fluent_builders::DescribeAssetModel).
///
/// `ParseStrictResponse` impl for `DescribeAssetModel`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeAssetModel {
    _private: (),
}
impl DescribeAssetModel {
    /// Creates a new builder-style object to manufacture [`DescribeAssetModelInput`](crate::input::DescribeAssetModelInput).
    pub fn builder() -> crate::input::describe_asset_model_input::Builder {
        crate::input::describe_asset_model_input::Builder::default()
    }
    /// Creates a new `DescribeAssetModel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeAssetModel {
    type Output = std::result::Result<
        crate::output::DescribeAssetModelOutput,
        crate::error::DescribeAssetModelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_asset_model::de_describe_asset_model_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_asset_model::de_describe_asset_model_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeAssetProperty`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_asset_property`](crate::client::fluent_builders::DescribeAssetProperty).
///
/// `ParseStrictResponse` impl for `DescribeAssetProperty`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeAssetProperty {
    _private: (),
}
impl DescribeAssetProperty {
    /// Creates a new builder-style object to manufacture [`DescribeAssetPropertyInput`](crate::input::DescribeAssetPropertyInput).
    pub fn builder() -> crate::input::describe_asset_property_input::Builder {
        crate::input::describe_asset_property_input::Builder::default()
    }
    /// Creates a new `DescribeAssetProperty` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeAssetProperty {
    type Output = std::result::Result<
        crate::output::DescribeAssetPropertyOutput,
        crate::error::DescribeAssetPropertyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_asset_property::de_describe_asset_property_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_asset_property::de_describe_asset_property_http_response(response)
        }
    }
}

/// Operation shape for `DescribeBulkImportJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_bulk_import_job`](crate::client::fluent_builders::DescribeBulkImportJob).
///
/// `ParseStrictResponse` impl for `DescribeBulkImportJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeBulkImportJob {
    _private: (),
}
impl DescribeBulkImportJob {
    /// Creates a new builder-style object to manufacture [`DescribeBulkImportJobInput`](crate::input::DescribeBulkImportJobInput).
    pub fn builder() -> crate::input::describe_bulk_import_job_input::Builder {
        crate::input::describe_bulk_import_job_input::Builder::default()
    }
    /// Creates a new `DescribeBulkImportJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeBulkImportJob {
    type Output = std::result::Result<
        crate::output::DescribeBulkImportJobOutput,
        crate::error::DescribeBulkImportJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_bulk_import_job::de_describe_bulk_import_job_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_bulk_import_job::de_describe_bulk_import_job_http_response(response)
        }
    }
}

/// Operation shape for `DescribeDashboard`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_dashboard`](crate::client::fluent_builders::DescribeDashboard).
///
/// `ParseStrictResponse` impl for `DescribeDashboard`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeDashboard {
    _private: (),
}
impl DescribeDashboard {
    /// Creates a new builder-style object to manufacture [`DescribeDashboardInput`](crate::input::DescribeDashboardInput).
    pub fn builder() -> crate::input::describe_dashboard_input::Builder {
        crate::input::describe_dashboard_input::Builder::default()
    }
    /// Creates a new `DescribeDashboard` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeDashboard {
    type Output = std::result::Result<
        crate::output::DescribeDashboardOutput,
        crate::error::DescribeDashboardError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_dashboard::de_describe_dashboard_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_dashboard::de_describe_dashboard_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeDefaultEncryptionConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_default_encryption_configuration`](crate::client::fluent_builders::DescribeDefaultEncryptionConfiguration).
///
/// `ParseStrictResponse` impl for `DescribeDefaultEncryptionConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeDefaultEncryptionConfiguration {
    _private: (),
}
impl DescribeDefaultEncryptionConfiguration {
    /// Creates a new builder-style object to manufacture [`DescribeDefaultEncryptionConfigurationInput`](crate::input::DescribeDefaultEncryptionConfigurationInput).
    pub fn builder() -> crate::input::describe_default_encryption_configuration_input::Builder {
        crate::input::describe_default_encryption_configuration_input::Builder::default()
    }
    /// Creates a new `DescribeDefaultEncryptionConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeDefaultEncryptionConfiguration {
    type Output = std::result::Result<
        crate::output::DescribeDefaultEncryptionConfigurationOutput,
        crate::error::DescribeDefaultEncryptionConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_default_encryption_configuration::de_describe_default_encryption_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_default_encryption_configuration::de_describe_default_encryption_configuration_http_response(response)
        }
    }
}

/// Operation shape for `DescribeGateway`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_gateway`](crate::client::fluent_builders::DescribeGateway).
///
/// `ParseStrictResponse` impl for `DescribeGateway`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeGateway {
    _private: (),
}
impl DescribeGateway {
    /// Creates a new builder-style object to manufacture [`DescribeGatewayInput`](crate::input::DescribeGatewayInput).
    pub fn builder() -> crate::input::describe_gateway_input::Builder {
        crate::input::describe_gateway_input::Builder::default()
    }
    /// Creates a new `DescribeGateway` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeGateway {
    type Output = std::result::Result<
        crate::output::DescribeGatewayOutput,
        crate::error::DescribeGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_gateway::de_describe_gateway_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_gateway::de_describe_gateway_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeGatewayCapabilityConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_gateway_capability_configuration`](crate::client::fluent_builders::DescribeGatewayCapabilityConfiguration).
///
/// `ParseStrictResponse` impl for `DescribeGatewayCapabilityConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeGatewayCapabilityConfiguration {
    _private: (),
}
impl DescribeGatewayCapabilityConfiguration {
    /// Creates a new builder-style object to manufacture [`DescribeGatewayCapabilityConfigurationInput`](crate::input::DescribeGatewayCapabilityConfigurationInput).
    pub fn builder() -> crate::input::describe_gateway_capability_configuration_input::Builder {
        crate::input::describe_gateway_capability_configuration_input::Builder::default()
    }
    /// Creates a new `DescribeGatewayCapabilityConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeGatewayCapabilityConfiguration {
    type Output = std::result::Result<
        crate::output::DescribeGatewayCapabilityConfigurationOutput,
        crate::error::DescribeGatewayCapabilityConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_gateway_capability_configuration::de_describe_gateway_capability_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_gateway_capability_configuration::de_describe_gateway_capability_configuration_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLoggingOptions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_logging_options`](crate::client::fluent_builders::DescribeLoggingOptions).
///
/// `ParseStrictResponse` impl for `DescribeLoggingOptions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLoggingOptions {
    _private: (),
}
impl DescribeLoggingOptions {
    /// Creates a new builder-style object to manufacture [`DescribeLoggingOptionsInput`](crate::input::DescribeLoggingOptionsInput).
    pub fn builder() -> crate::input::describe_logging_options_input::Builder {
        crate::input::describe_logging_options_input::Builder::default()
    }
    /// Creates a new `DescribeLoggingOptions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLoggingOptions {
    type Output = std::result::Result<
        crate::output::DescribeLoggingOptionsOutput,
        crate::error::DescribeLoggingOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_logging_options::de_describe_logging_options_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_logging_options::de_describe_logging_options_http_response(response)
        }
    }
}

/// Operation shape for `DescribePortal`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_portal`](crate::client::fluent_builders::DescribePortal).
///
/// `ParseStrictResponse` impl for `DescribePortal`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribePortal {
    _private: (),
}
impl DescribePortal {
    /// Creates a new builder-style object to manufacture [`DescribePortalInput`](crate::input::DescribePortalInput).
    pub fn builder() -> crate::input::describe_portal_input::Builder {
        crate::input::describe_portal_input::Builder::default()
    }
    /// Creates a new `DescribePortal` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribePortal {
    type Output =
        std::result::Result<crate::output::DescribePortalOutput, crate::error::DescribePortalError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_portal::de_describe_portal_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_portal::de_describe_portal_http_response(response)
        }
    }
}

/// Operation shape for `DescribeProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_project`](crate::client::fluent_builders::DescribeProject).
///
/// `ParseStrictResponse` impl for `DescribeProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeProject {
    _private: (),
}
impl DescribeProject {
    /// Creates a new builder-style object to manufacture [`DescribeProjectInput`](crate::input::DescribeProjectInput).
    pub fn builder() -> crate::input::describe_project_input::Builder {
        crate::input::describe_project_input::Builder::default()
    }
    /// Creates a new `DescribeProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeProject {
    type Output = std::result::Result<
        crate::output::DescribeProjectOutput,
        crate::error::DescribeProjectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_project::de_describe_project_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_project::de_describe_project_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeStorageConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_storage_configuration`](crate::client::fluent_builders::DescribeStorageConfiguration).
///
/// `ParseStrictResponse` impl for `DescribeStorageConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeStorageConfiguration {
    _private: (),
}
impl DescribeStorageConfiguration {
    /// Creates a new builder-style object to manufacture [`DescribeStorageConfigurationInput`](crate::input::DescribeStorageConfigurationInput).
    pub fn builder() -> crate::input::describe_storage_configuration_input::Builder {
        crate::input::describe_storage_configuration_input::Builder::default()
    }
    /// Creates a new `DescribeStorageConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeStorageConfiguration {
    type Output = std::result::Result<
        crate::output::DescribeStorageConfigurationOutput,
        crate::error::DescribeStorageConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_storage_configuration::de_describe_storage_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_storage_configuration::de_describe_storage_configuration_http_response(response)
        }
    }
}

/// Operation shape for `DescribeTimeSeries`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_time_series`](crate::client::fluent_builders::DescribeTimeSeries).
///
/// `ParseStrictResponse` impl for `DescribeTimeSeries`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeTimeSeries {
    _private: (),
}
impl DescribeTimeSeries {
    /// Creates a new builder-style object to manufacture [`DescribeTimeSeriesInput`](crate::input::DescribeTimeSeriesInput).
    pub fn builder() -> crate::input::describe_time_series_input::Builder {
        crate::input::describe_time_series_input::Builder::default()
    }
    /// Creates a new `DescribeTimeSeries` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeTimeSeries {
    type Output = std::result::Result<
        crate::output::DescribeTimeSeriesOutput,
        crate::error::DescribeTimeSeriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_time_series::de_describe_time_series_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_time_series::de_describe_time_series_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DisassociateAssets`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_assets`](crate::client::fluent_builders::DisassociateAssets).
///
/// `ParseStrictResponse` impl for `DisassociateAssets`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociateAssets {
    _private: (),
}
impl DisassociateAssets {
    /// Creates a new builder-style object to manufacture [`DisassociateAssetsInput`](crate::input::DisassociateAssetsInput).
    pub fn builder() -> crate::input::disassociate_assets_input::Builder {
        crate::input::disassociate_assets_input::Builder::default()
    }
    /// Creates a new `DisassociateAssets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateAssets {
    type Output = std::result::Result<
        crate::output::DisassociateAssetsOutput,
        crate::error::DisassociateAssetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disassociate_assets::de_disassociate_assets_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_disassociate_assets::de_disassociate_assets_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DisassociateTimeSeriesFromAssetProperty`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_time_series_from_asset_property`](crate::client::fluent_builders::DisassociateTimeSeriesFromAssetProperty).
///
/// `ParseStrictResponse` impl for `DisassociateTimeSeriesFromAssetProperty`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociateTimeSeriesFromAssetProperty {
    _private: (),
}
impl DisassociateTimeSeriesFromAssetProperty {
    /// Creates a new builder-style object to manufacture [`DisassociateTimeSeriesFromAssetPropertyInput`](crate::input::DisassociateTimeSeriesFromAssetPropertyInput).
    pub fn builder() -> crate::input::disassociate_time_series_from_asset_property_input::Builder {
        crate::input::disassociate_time_series_from_asset_property_input::Builder::default()
    }
    /// Creates a new `DisassociateTimeSeriesFromAssetProperty` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateTimeSeriesFromAssetProperty {
    type Output = std::result::Result<
        crate::output::DisassociateTimeSeriesFromAssetPropertyOutput,
        crate::error::DisassociateTimeSeriesFromAssetPropertyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disassociate_time_series_from_asset_property::de_disassociate_time_series_from_asset_property_http_error(response)
        } else {
            crate::protocol_serde::shape_disassociate_time_series_from_asset_property::de_disassociate_time_series_from_asset_property_http_response(response)
        }
    }
}

/// Operation shape for `GetAssetPropertyAggregates`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_asset_property_aggregates`](crate::client::fluent_builders::GetAssetPropertyAggregates).
///
/// `ParseStrictResponse` impl for `GetAssetPropertyAggregates`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetAssetPropertyAggregates {
    _private: (),
}
impl GetAssetPropertyAggregates {
    /// Creates a new builder-style object to manufacture [`GetAssetPropertyAggregatesInput`](crate::input::GetAssetPropertyAggregatesInput).
    pub fn builder() -> crate::input::get_asset_property_aggregates_input::Builder {
        crate::input::get_asset_property_aggregates_input::Builder::default()
    }
    /// Creates a new `GetAssetPropertyAggregates` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetAssetPropertyAggregates {
    type Output = std::result::Result<
        crate::output::GetAssetPropertyAggregatesOutput,
        crate::error::GetAssetPropertyAggregatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_asset_property_aggregates::de_get_asset_property_aggregates_http_error(response)
        } else {
            crate::protocol_serde::shape_get_asset_property_aggregates::de_get_asset_property_aggregates_http_response(response)
        }
    }
}

/// Operation shape for `GetAssetPropertyValue`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_asset_property_value`](crate::client::fluent_builders::GetAssetPropertyValue).
///
/// `ParseStrictResponse` impl for `GetAssetPropertyValue`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetAssetPropertyValue {
    _private: (),
}
impl GetAssetPropertyValue {
    /// Creates a new builder-style object to manufacture [`GetAssetPropertyValueInput`](crate::input::GetAssetPropertyValueInput).
    pub fn builder() -> crate::input::get_asset_property_value_input::Builder {
        crate::input::get_asset_property_value_input::Builder::default()
    }
    /// Creates a new `GetAssetPropertyValue` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetAssetPropertyValue {
    type Output = std::result::Result<
        crate::output::GetAssetPropertyValueOutput,
        crate::error::GetAssetPropertyValueError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_asset_property_value::de_get_asset_property_value_http_error(response)
        } else {
            crate::protocol_serde::shape_get_asset_property_value::de_get_asset_property_value_http_response(response)
        }
    }
}

/// Operation shape for `GetAssetPropertyValueHistory`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_asset_property_value_history`](crate::client::fluent_builders::GetAssetPropertyValueHistory).
///
/// `ParseStrictResponse` impl for `GetAssetPropertyValueHistory`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetAssetPropertyValueHistory {
    _private: (),
}
impl GetAssetPropertyValueHistory {
    /// Creates a new builder-style object to manufacture [`GetAssetPropertyValueHistoryInput`](crate::input::GetAssetPropertyValueHistoryInput).
    pub fn builder() -> crate::input::get_asset_property_value_history_input::Builder {
        crate::input::get_asset_property_value_history_input::Builder::default()
    }
    /// Creates a new `GetAssetPropertyValueHistory` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetAssetPropertyValueHistory {
    type Output = std::result::Result<
        crate::output::GetAssetPropertyValueHistoryOutput,
        crate::error::GetAssetPropertyValueHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_asset_property_value_history::de_get_asset_property_value_history_http_error(response)
        } else {
            crate::protocol_serde::shape_get_asset_property_value_history::de_get_asset_property_value_history_http_response(response)
        }
    }
}

/// Operation shape for `GetInterpolatedAssetPropertyValues`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_interpolated_asset_property_values`](crate::client::fluent_builders::GetInterpolatedAssetPropertyValues).
///
/// `ParseStrictResponse` impl for `GetInterpolatedAssetPropertyValues`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetInterpolatedAssetPropertyValues {
    _private: (),
}
impl GetInterpolatedAssetPropertyValues {
    /// Creates a new builder-style object to manufacture [`GetInterpolatedAssetPropertyValuesInput`](crate::input::GetInterpolatedAssetPropertyValuesInput).
    pub fn builder() -> crate::input::get_interpolated_asset_property_values_input::Builder {
        crate::input::get_interpolated_asset_property_values_input::Builder::default()
    }
    /// Creates a new `GetInterpolatedAssetPropertyValues` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetInterpolatedAssetPropertyValues {
    type Output = std::result::Result<
        crate::output::GetInterpolatedAssetPropertyValuesOutput,
        crate::error::GetInterpolatedAssetPropertyValuesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_interpolated_asset_property_values::de_get_interpolated_asset_property_values_http_error(response)
        } else {
            crate::protocol_serde::shape_get_interpolated_asset_property_values::de_get_interpolated_asset_property_values_http_response(response)
        }
    }
}

/// Operation shape for `ListAccessPolicies`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_access_policies`](crate::client::fluent_builders::ListAccessPolicies).
///
/// `ParseStrictResponse` impl for `ListAccessPolicies`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAccessPolicies {
    _private: (),
}
impl ListAccessPolicies {
    /// Creates a new builder-style object to manufacture [`ListAccessPoliciesInput`](crate::input::ListAccessPoliciesInput).
    pub fn builder() -> crate::input::list_access_policies_input::Builder {
        crate::input::list_access_policies_input::Builder::default()
    }
    /// Creates a new `ListAccessPolicies` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAccessPolicies {
    type Output = std::result::Result<
        crate::output::ListAccessPoliciesOutput,
        crate::error::ListAccessPoliciesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_access_policies::de_list_access_policies_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_access_policies::de_list_access_policies_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListAssetModelProperties`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_asset_model_properties`](crate::client::fluent_builders::ListAssetModelProperties).
///
/// `ParseStrictResponse` impl for `ListAssetModelProperties`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAssetModelProperties {
    _private: (),
}
impl ListAssetModelProperties {
    /// Creates a new builder-style object to manufacture [`ListAssetModelPropertiesInput`](crate::input::ListAssetModelPropertiesInput).
    pub fn builder() -> crate::input::list_asset_model_properties_input::Builder {
        crate::input::list_asset_model_properties_input::Builder::default()
    }
    /// Creates a new `ListAssetModelProperties` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAssetModelProperties {
    type Output = std::result::Result<
        crate::output::ListAssetModelPropertiesOutput,
        crate::error::ListAssetModelPropertiesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_asset_model_properties::de_list_asset_model_properties_http_error(response)
        } else {
            crate::protocol_serde::shape_list_asset_model_properties::de_list_asset_model_properties_http_response(response)
        }
    }
}

/// Operation shape for `ListAssetModels`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_asset_models`](crate::client::fluent_builders::ListAssetModels).
///
/// `ParseStrictResponse` impl for `ListAssetModels`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAssetModels {
    _private: (),
}
impl ListAssetModels {
    /// Creates a new builder-style object to manufacture [`ListAssetModelsInput`](crate::input::ListAssetModelsInput).
    pub fn builder() -> crate::input::list_asset_models_input::Builder {
        crate::input::list_asset_models_input::Builder::default()
    }
    /// Creates a new `ListAssetModels` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAssetModels {
    type Output = std::result::Result<
        crate::output::ListAssetModelsOutput,
        crate::error::ListAssetModelsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_asset_models::de_list_asset_models_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_asset_models::de_list_asset_models_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListAssetProperties`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_asset_properties`](crate::client::fluent_builders::ListAssetProperties).
///
/// `ParseStrictResponse` impl for `ListAssetProperties`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAssetProperties {
    _private: (),
}
impl ListAssetProperties {
    /// Creates a new builder-style object to manufacture [`ListAssetPropertiesInput`](crate::input::ListAssetPropertiesInput).
    pub fn builder() -> crate::input::list_asset_properties_input::Builder {
        crate::input::list_asset_properties_input::Builder::default()
    }
    /// Creates a new `ListAssetProperties` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAssetProperties {
    type Output = std::result::Result<
        crate::output::ListAssetPropertiesOutput,
        crate::error::ListAssetPropertiesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_asset_properties::de_list_asset_properties_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_asset_properties::de_list_asset_properties_http_response(response)
        }
    }
}

/// Operation shape for `ListAssetRelationships`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_asset_relationships`](crate::client::fluent_builders::ListAssetRelationships).
///
/// `ParseStrictResponse` impl for `ListAssetRelationships`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAssetRelationships {
    _private: (),
}
impl ListAssetRelationships {
    /// Creates a new builder-style object to manufacture [`ListAssetRelationshipsInput`](crate::input::ListAssetRelationshipsInput).
    pub fn builder() -> crate::input::list_asset_relationships_input::Builder {
        crate::input::list_asset_relationships_input::Builder::default()
    }
    /// Creates a new `ListAssetRelationships` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAssetRelationships {
    type Output = std::result::Result<
        crate::output::ListAssetRelationshipsOutput,
        crate::error::ListAssetRelationshipsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_asset_relationships::de_list_asset_relationships_http_error(response)
        } else {
            crate::protocol_serde::shape_list_asset_relationships::de_list_asset_relationships_http_response(response)
        }
    }
}

/// Operation shape for `ListAssets`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_assets`](crate::client::fluent_builders::ListAssets).
///
/// `ParseStrictResponse` impl for `ListAssets`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAssets {
    _private: (),
}
impl ListAssets {
    /// Creates a new builder-style object to manufacture [`ListAssetsInput`](crate::input::ListAssetsInput).
    pub fn builder() -> crate::input::list_assets_input::Builder {
        crate::input::list_assets_input::Builder::default()
    }
    /// Creates a new `ListAssets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAssets {
    type Output =
        std::result::Result<crate::output::ListAssetsOutput, crate::error::ListAssetsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_assets::de_list_assets_http_error(response)
        } else {
            crate::protocol_serde::shape_list_assets::de_list_assets_http_response(response)
        }
    }
}

/// Operation shape for `ListAssociatedAssets`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_associated_assets`](crate::client::fluent_builders::ListAssociatedAssets).
///
/// `ParseStrictResponse` impl for `ListAssociatedAssets`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAssociatedAssets {
    _private: (),
}
impl ListAssociatedAssets {
    /// Creates a new builder-style object to manufacture [`ListAssociatedAssetsInput`](crate::input::ListAssociatedAssetsInput).
    pub fn builder() -> crate::input::list_associated_assets_input::Builder {
        crate::input::list_associated_assets_input::Builder::default()
    }
    /// Creates a new `ListAssociatedAssets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAssociatedAssets {
    type Output = std::result::Result<
        crate::output::ListAssociatedAssetsOutput,
        crate::error::ListAssociatedAssetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_associated_assets::de_list_associated_assets_http_error(response)
        } else {
            crate::protocol_serde::shape_list_associated_assets::de_list_associated_assets_http_response(response)
        }
    }
}

/// Operation shape for `ListBulkImportJobs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_bulk_import_jobs`](crate::client::fluent_builders::ListBulkImportJobs).
///
/// `ParseStrictResponse` impl for `ListBulkImportJobs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListBulkImportJobs {
    _private: (),
}
impl ListBulkImportJobs {
    /// Creates a new builder-style object to manufacture [`ListBulkImportJobsInput`](crate::input::ListBulkImportJobsInput).
    pub fn builder() -> crate::input::list_bulk_import_jobs_input::Builder {
        crate::input::list_bulk_import_jobs_input::Builder::default()
    }
    /// Creates a new `ListBulkImportJobs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListBulkImportJobs {
    type Output = std::result::Result<
        crate::output::ListBulkImportJobsOutput,
        crate::error::ListBulkImportJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_bulk_import_jobs::de_list_bulk_import_jobs_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_bulk_import_jobs::de_list_bulk_import_jobs_http_response(response)
        }
    }
}

/// Operation shape for `ListDashboards`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_dashboards`](crate::client::fluent_builders::ListDashboards).
///
/// `ParseStrictResponse` impl for `ListDashboards`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListDashboards {
    _private: (),
}
impl ListDashboards {
    /// Creates a new builder-style object to manufacture [`ListDashboardsInput`](crate::input::ListDashboardsInput).
    pub fn builder() -> crate::input::list_dashboards_input::Builder {
        crate::input::list_dashboards_input::Builder::default()
    }
    /// Creates a new `ListDashboards` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListDashboards {
    type Output =
        std::result::Result<crate::output::ListDashboardsOutput, crate::error::ListDashboardsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_dashboards::de_list_dashboards_http_error(response)
        } else {
            crate::protocol_serde::shape_list_dashboards::de_list_dashboards_http_response(response)
        }
    }
}

/// Operation shape for `ListGateways`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_gateways`](crate::client::fluent_builders::ListGateways).
///
/// `ParseStrictResponse` impl for `ListGateways`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListGateways {
    _private: (),
}
impl ListGateways {
    /// Creates a new builder-style object to manufacture [`ListGatewaysInput`](crate::input::ListGatewaysInput).
    pub fn builder() -> crate::input::list_gateways_input::Builder {
        crate::input::list_gateways_input::Builder::default()
    }
    /// Creates a new `ListGateways` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListGateways {
    type Output =
        std::result::Result<crate::output::ListGatewaysOutput, crate::error::ListGatewaysError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_gateways::de_list_gateways_http_error(response)
        } else {
            crate::protocol_serde::shape_list_gateways::de_list_gateways_http_response(response)
        }
    }
}

/// Operation shape for `ListPortals`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_portals`](crate::client::fluent_builders::ListPortals).
///
/// `ParseStrictResponse` impl for `ListPortals`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListPortals {
    _private: (),
}
impl ListPortals {
    /// Creates a new builder-style object to manufacture [`ListPortalsInput`](crate::input::ListPortalsInput).
    pub fn builder() -> crate::input::list_portals_input::Builder {
        crate::input::list_portals_input::Builder::default()
    }
    /// Creates a new `ListPortals` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListPortals {
    type Output =
        std::result::Result<crate::output::ListPortalsOutput, crate::error::ListPortalsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_portals::de_list_portals_http_error(response)
        } else {
            crate::protocol_serde::shape_list_portals::de_list_portals_http_response(response)
        }
    }
}

/// Operation shape for `ListProjectAssets`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_project_assets`](crate::client::fluent_builders::ListProjectAssets).
///
/// `ParseStrictResponse` impl for `ListProjectAssets`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListProjectAssets {
    _private: (),
}
impl ListProjectAssets {
    /// Creates a new builder-style object to manufacture [`ListProjectAssetsInput`](crate::input::ListProjectAssetsInput).
    pub fn builder() -> crate::input::list_project_assets_input::Builder {
        crate::input::list_project_assets_input::Builder::default()
    }
    /// Creates a new `ListProjectAssets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListProjectAssets {
    type Output = std::result::Result<
        crate::output::ListProjectAssetsOutput,
        crate::error::ListProjectAssetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_project_assets::de_list_project_assets_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_project_assets::de_list_project_assets_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListProjects`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_projects`](crate::client::fluent_builders::ListProjects).
///
/// `ParseStrictResponse` impl for `ListProjects`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListProjects {
    _private: (),
}
impl ListProjects {
    /// Creates a new builder-style object to manufacture [`ListProjectsInput`](crate::input::ListProjectsInput).
    pub fn builder() -> crate::input::list_projects_input::Builder {
        crate::input::list_projects_input::Builder::default()
    }
    /// Creates a new `ListProjects` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListProjects {
    type Output =
        std::result::Result<crate::output::ListProjectsOutput, crate::error::ListProjectsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_projects::de_list_projects_http_error(response)
        } else {
            crate::protocol_serde::shape_list_projects::de_list_projects_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `ListTimeSeries`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_time_series`](crate::client::fluent_builders::ListTimeSeries).
///
/// `ParseStrictResponse` impl for `ListTimeSeries`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTimeSeries {
    _private: (),
}
impl ListTimeSeries {
    /// Creates a new builder-style object to manufacture [`ListTimeSeriesInput`](crate::input::ListTimeSeriesInput).
    pub fn builder() -> crate::input::list_time_series_input::Builder {
        crate::input::list_time_series_input::Builder::default()
    }
    /// Creates a new `ListTimeSeries` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTimeSeries {
    type Output =
        std::result::Result<crate::output::ListTimeSeriesOutput, crate::error::ListTimeSeriesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_time_series::de_list_time_series_http_error(response)
        } else {
            crate::protocol_serde::shape_list_time_series::de_list_time_series_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutDefaultEncryptionConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_default_encryption_configuration`](crate::client::fluent_builders::PutDefaultEncryptionConfiguration).
///
/// `ParseStrictResponse` impl for `PutDefaultEncryptionConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutDefaultEncryptionConfiguration {
    _private: (),
}
impl PutDefaultEncryptionConfiguration {
    /// Creates a new builder-style object to manufacture [`PutDefaultEncryptionConfigurationInput`](crate::input::PutDefaultEncryptionConfigurationInput).
    pub fn builder() -> crate::input::put_default_encryption_configuration_input::Builder {
        crate::input::put_default_encryption_configuration_input::Builder::default()
    }
    /// Creates a new `PutDefaultEncryptionConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutDefaultEncryptionConfiguration {
    type Output = std::result::Result<
        crate::output::PutDefaultEncryptionConfigurationOutput,
        crate::error::PutDefaultEncryptionConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_default_encryption_configuration::de_put_default_encryption_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_put_default_encryption_configuration::de_put_default_encryption_configuration_http_response(response)
        }
    }
}

/// Operation shape for `PutLoggingOptions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_logging_options`](crate::client::fluent_builders::PutLoggingOptions).
///
/// `ParseStrictResponse` impl for `PutLoggingOptions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutLoggingOptions {
    _private: (),
}
impl PutLoggingOptions {
    /// Creates a new builder-style object to manufacture [`PutLoggingOptionsInput`](crate::input::PutLoggingOptionsInput).
    pub fn builder() -> crate::input::put_logging_options_input::Builder {
        crate::input::put_logging_options_input::Builder::default()
    }
    /// Creates a new `PutLoggingOptions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutLoggingOptions {
    type Output = std::result::Result<
        crate::output::PutLoggingOptionsOutput,
        crate::error::PutLoggingOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_logging_options::de_put_logging_options_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_put_logging_options::de_put_logging_options_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutStorageConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_storage_configuration`](crate::client::fluent_builders::PutStorageConfiguration).
///
/// `ParseStrictResponse` impl for `PutStorageConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutStorageConfiguration {
    _private: (),
}
impl PutStorageConfiguration {
    /// Creates a new builder-style object to manufacture [`PutStorageConfigurationInput`](crate::input::PutStorageConfigurationInput).
    pub fn builder() -> crate::input::put_storage_configuration_input::Builder {
        crate::input::put_storage_configuration_input::Builder::default()
    }
    /// Creates a new `PutStorageConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutStorageConfiguration {
    type Output = std::result::Result<
        crate::output::PutStorageConfigurationOutput,
        crate::error::PutStorageConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_storage_configuration::de_put_storage_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_put_storage_configuration::de_put_storage_configuration_http_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateAccessPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_access_policy`](crate::client::fluent_builders::UpdateAccessPolicy).
///
/// `ParseStrictResponse` impl for `UpdateAccessPolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateAccessPolicy {
    _private: (),
}
impl UpdateAccessPolicy {
    /// Creates a new builder-style object to manufacture [`UpdateAccessPolicyInput`](crate::input::UpdateAccessPolicyInput).
    pub fn builder() -> crate::input::update_access_policy_input::Builder {
        crate::input::update_access_policy_input::Builder::default()
    }
    /// Creates a new `UpdateAccessPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateAccessPolicy {
    type Output = std::result::Result<
        crate::output::UpdateAccessPolicyOutput,
        crate::error::UpdateAccessPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_access_policy::de_update_access_policy_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_access_policy::de_update_access_policy_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateAsset`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_asset`](crate::client::fluent_builders::UpdateAsset).
///
/// `ParseStrictResponse` impl for `UpdateAsset`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateAsset {
    _private: (),
}
impl UpdateAsset {
    /// Creates a new builder-style object to manufacture [`UpdateAssetInput`](crate::input::UpdateAssetInput).
    pub fn builder() -> crate::input::update_asset_input::Builder {
        crate::input::update_asset_input::Builder::default()
    }
    /// Creates a new `UpdateAsset` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateAsset {
    type Output =
        std::result::Result<crate::output::UpdateAssetOutput, crate::error::UpdateAssetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_update_asset::de_update_asset_http_error(response)
        } else {
            crate::protocol_serde::shape_update_asset::de_update_asset_http_response(response)
        }
    }
}

/// Operation shape for `UpdateAssetModel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_asset_model`](crate::client::fluent_builders::UpdateAssetModel).
///
/// `ParseStrictResponse` impl for `UpdateAssetModel`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateAssetModel {
    _private: (),
}
impl UpdateAssetModel {
    /// Creates a new builder-style object to manufacture [`UpdateAssetModelInput`](crate::input::UpdateAssetModelInput).
    pub fn builder() -> crate::input::update_asset_model_input::Builder {
        crate::input::update_asset_model_input::Builder::default()
    }
    /// Creates a new `UpdateAssetModel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateAssetModel {
    type Output = std::result::Result<
        crate::output::UpdateAssetModelOutput,
        crate::error::UpdateAssetModelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_update_asset_model::de_update_asset_model_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_asset_model::de_update_asset_model_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateAssetProperty`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_asset_property`](crate::client::fluent_builders::UpdateAssetProperty).
///
/// `ParseStrictResponse` impl for `UpdateAssetProperty`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateAssetProperty {
    _private: (),
}
impl UpdateAssetProperty {
    /// Creates a new builder-style object to manufacture [`UpdateAssetPropertyInput`](crate::input::UpdateAssetPropertyInput).
    pub fn builder() -> crate::input::update_asset_property_input::Builder {
        crate::input::update_asset_property_input::Builder::default()
    }
    /// Creates a new `UpdateAssetProperty` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateAssetProperty {
    type Output = std::result::Result<
        crate::output::UpdateAssetPropertyOutput,
        crate::error::UpdateAssetPropertyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_asset_property::de_update_asset_property_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_asset_property::de_update_asset_property_http_response(response)
        }
    }
}

/// Operation shape for `UpdateDashboard`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_dashboard`](crate::client::fluent_builders::UpdateDashboard).
///
/// `ParseStrictResponse` impl for `UpdateDashboard`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateDashboard {
    _private: (),
}
impl UpdateDashboard {
    /// Creates a new builder-style object to manufacture [`UpdateDashboardInput`](crate::input::UpdateDashboardInput).
    pub fn builder() -> crate::input::update_dashboard_input::Builder {
        crate::input::update_dashboard_input::Builder::default()
    }
    /// Creates a new `UpdateDashboard` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateDashboard {
    type Output = std::result::Result<
        crate::output::UpdateDashboardOutput,
        crate::error::UpdateDashboardError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_dashboard::de_update_dashboard_http_error(response)
        } else {
            crate::protocol_serde::shape_update_dashboard::de_update_dashboard_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateGateway`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_gateway`](crate::client::fluent_builders::UpdateGateway).
///
/// `ParseStrictResponse` impl for `UpdateGateway`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateGateway {
    _private: (),
}
impl UpdateGateway {
    /// Creates a new builder-style object to manufacture [`UpdateGatewayInput`](crate::input::UpdateGatewayInput).
    pub fn builder() -> crate::input::update_gateway_input::Builder {
        crate::input::update_gateway_input::Builder::default()
    }
    /// Creates a new `UpdateGateway` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateGateway {
    type Output =
        std::result::Result<crate::output::UpdateGatewayOutput, crate::error::UpdateGatewayError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_gateway::de_update_gateway_http_error(response)
        } else {
            crate::protocol_serde::shape_update_gateway::de_update_gateway_http_response(response)
        }
    }
}

/// Operation shape for `UpdateGatewayCapabilityConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_gateway_capability_configuration`](crate::client::fluent_builders::UpdateGatewayCapabilityConfiguration).
///
/// `ParseStrictResponse` impl for `UpdateGatewayCapabilityConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateGatewayCapabilityConfiguration {
    _private: (),
}
impl UpdateGatewayCapabilityConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateGatewayCapabilityConfigurationInput`](crate::input::UpdateGatewayCapabilityConfigurationInput).
    pub fn builder() -> crate::input::update_gateway_capability_configuration_input::Builder {
        crate::input::update_gateway_capability_configuration_input::Builder::default()
    }
    /// Creates a new `UpdateGatewayCapabilityConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateGatewayCapabilityConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateGatewayCapabilityConfigurationOutput,
        crate::error::UpdateGatewayCapabilityConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_update_gateway_capability_configuration::de_update_gateway_capability_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_update_gateway_capability_configuration::de_update_gateway_capability_configuration_http_response(response)
        }
    }
}

/// Operation shape for `UpdatePortal`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_portal`](crate::client::fluent_builders::UpdatePortal).
///
/// `ParseStrictResponse` impl for `UpdatePortal`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdatePortal {
    _private: (),
}
impl UpdatePortal {
    /// Creates a new builder-style object to manufacture [`UpdatePortalInput`](crate::input::UpdatePortalInput).
    pub fn builder() -> crate::input::update_portal_input::Builder {
        crate::input::update_portal_input::Builder::default()
    }
    /// Creates a new `UpdatePortal` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdatePortal {
    type Output =
        std::result::Result<crate::output::UpdatePortalOutput, crate::error::UpdatePortalError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_update_portal::de_update_portal_http_error(response)
        } else {
            crate::protocol_serde::shape_update_portal::de_update_portal_http_response(response)
        }
    }
}

/// Operation shape for `UpdateProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_project`](crate::client::fluent_builders::UpdateProject).
///
/// `ParseStrictResponse` impl for `UpdateProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateProject {
    _private: (),
}
impl UpdateProject {
    /// Creates a new builder-style object to manufacture [`UpdateProjectInput`](crate::input::UpdateProjectInput).
    pub fn builder() -> crate::input::update_project_input::Builder {
        crate::input::update_project_input::Builder::default()
    }
    /// Creates a new `UpdateProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateProject {
    type Output =
        std::result::Result<crate::output::UpdateProjectOutput, crate::error::UpdateProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_project::de_update_project_http_error(response)
        } else {
            crate::protocol_serde::shape_update_project::de_update_project_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
