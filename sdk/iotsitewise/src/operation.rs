// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Associates a child asset with the given parent asset through a hierarchy defined in the
/// parent asset's model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/add-associated-assets.html">Associating assets</a> in the
/// <i>IoT SiteWise User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateAssets {
    _private: (),
}
impl AssociateAssets {
    /// Creates a new builder-style object to manufacture [`AssociateAssetsInput`](crate::input::AssociateAssetsInput)
    pub fn builder() -> crate::input::associate_assets_input::Builder {
        crate::input::associate_assets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateAssets {
    type Output = std::result::Result<
        crate::output::AssociateAssetsOutput,
        crate::error::AssociateAssetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_assets_error(response)
        } else {
            crate::operation_deser::parse_associate_assets_response(response)
        }
    }
}

/// <p>Associates a group (batch) of assets with an IoT SiteWise Monitor project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchAssociateProjectAssets {
    _private: (),
}
impl BatchAssociateProjectAssets {
    /// Creates a new builder-style object to manufacture [`BatchAssociateProjectAssetsInput`](crate::input::BatchAssociateProjectAssetsInput)
    pub fn builder() -> crate::input::batch_associate_project_assets_input::Builder {
        crate::input::batch_associate_project_assets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchAssociateProjectAssets {
    type Output = std::result::Result<
        crate::output::BatchAssociateProjectAssetsOutput,
        crate::error::BatchAssociateProjectAssetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_associate_project_assets_error(response)
        } else {
            crate::operation_deser::parse_batch_associate_project_assets_response(response)
        }
    }
}

/// <p>Disassociates a group (batch) of assets from an IoT SiteWise Monitor project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchDisassociateProjectAssets {
    _private: (),
}
impl BatchDisassociateProjectAssets {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateProjectAssetsInput`](crate::input::BatchDisassociateProjectAssetsInput)
    pub fn builder() -> crate::input::batch_disassociate_project_assets_input::Builder {
        crate::input::batch_disassociate_project_assets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchDisassociateProjectAssets {
    type Output = std::result::Result<
        crate::output::BatchDisassociateProjectAssetsOutput,
        crate::error::BatchDisassociateProjectAssetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_disassociate_project_assets_error(response)
        } else {
            crate::operation_deser::parse_batch_disassociate_project_assets_response(response)
        }
    }
}

/// <p>Sends a list of asset property values to IoT SiteWise. Each value is a timestamp-quality-value
/// (TQV) data point. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/ingest-api.html">Ingesting data using the API</a> in the
/// <i>IoT SiteWise User Guide</i>.</p>
/// <p>To identify an asset property, you must specify one of the following:</p>
/// <ul>
/// <li>
/// <p>The <code>assetId</code> and <code>propertyId</code> of an asset property.</p>
/// </li>
/// <li>
/// <p>A <code>propertyAlias</code>, which is a data stream alias (for example,
/// <code>/company/windfarm/3/turbine/7/temperature</code>). To define an asset property's alias, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html">UpdateAssetProperty</a>.</p>
/// </li>
/// </ul>
/// <important>
/// <p>With respect to Unix epoch time, IoT SiteWise accepts only TQVs that have a timestamp of no more
/// than 7 days in the past and no more than 10 minutes in the future. IoT SiteWise rejects timestamps
/// outside of the inclusive range of [-7 days, +10 minutes] and returns a
/// <code>TimestampOutOfRangeException</code> error.</p>
/// <p>For each asset property, IoT SiteWise overwrites TQVs with duplicate timestamps unless the newer
/// TQV has a different quality. For example, if you store a TQV <code>{T1, GOOD, V1}</code>,
/// then storing <code>{T1, GOOD, V2}</code> replaces the existing TQV.</p>
/// </important>
/// <p>IoT SiteWise authorizes access to each <code>BatchPutAssetPropertyValue</code> entry individually.
/// For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-batchputassetpropertyvalue-action">BatchPutAssetPropertyValue authorization</a> in the
/// <i>IoT SiteWise User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchPutAssetPropertyValue {
    _private: (),
}
impl BatchPutAssetPropertyValue {
    /// Creates a new builder-style object to manufacture [`BatchPutAssetPropertyValueInput`](crate::input::BatchPutAssetPropertyValueInput)
    pub fn builder() -> crate::input::batch_put_asset_property_value_input::Builder {
        crate::input::batch_put_asset_property_value_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchPutAssetPropertyValue {
    type Output = std::result::Result<
        crate::output::BatchPutAssetPropertyValueOutput,
        crate::error::BatchPutAssetPropertyValueError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_put_asset_property_value_error(response)
        } else {
            crate::operation_deser::parse_batch_put_asset_property_value_response(response)
        }
    }
}

/// <p>Creates an access policy that grants the specified identity (Amazon Web Services SSO user, Amazon Web Services SSO group, or
/// IAM user) access to the specified IoT SiteWise Monitor portal or project resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAccessPolicy {
    _private: (),
}
impl CreateAccessPolicy {
    /// Creates a new builder-style object to manufacture [`CreateAccessPolicyInput`](crate::input::CreateAccessPolicyInput)
    pub fn builder() -> crate::input::create_access_policy_input::Builder {
        crate::input::create_access_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAccessPolicy {
    type Output = std::result::Result<
        crate::output::CreateAccessPolicyOutput,
        crate::error::CreateAccessPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_access_policy_error(response)
        } else {
            crate::operation_deser::parse_create_access_policy_response(response)
        }
    }
}

/// <p>Creates an asset from an existing asset model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-assets.html">Creating assets</a> in the
/// <i>IoT SiteWise User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAsset {
    _private: (),
}
impl CreateAsset {
    /// Creates a new builder-style object to manufacture [`CreateAssetInput`](crate::input::CreateAssetInput)
    pub fn builder() -> crate::input::create_asset_input::Builder {
        crate::input::create_asset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAsset {
    type Output =
        std::result::Result<crate::output::CreateAssetOutput, crate::error::CreateAssetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_create_asset_error(response)
        } else {
            crate::operation_deser::parse_create_asset_response(response)
        }
    }
}

/// <p>Creates an asset model from specified property and hierarchy definitions. You create
/// assets from asset models. With asset models, you can easily create assets of the same type
/// that have standardized definitions. Each asset created from a model inherits the asset model's
/// property and hierarchy definitions. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/define-models.html">Defining asset models</a> in the
/// <i>IoT SiteWise User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAssetModel {
    _private: (),
}
impl CreateAssetModel {
    /// Creates a new builder-style object to manufacture [`CreateAssetModelInput`](crate::input::CreateAssetModelInput)
    pub fn builder() -> crate::input::create_asset_model_input::Builder {
        crate::input::create_asset_model_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAssetModel {
    type Output = std::result::Result<
        crate::output::CreateAssetModelOutput,
        crate::error::CreateAssetModelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_create_asset_model_error(response)
        } else {
            crate::operation_deser::parse_create_asset_model_response(response)
        }
    }
}

/// <p>Creates a dashboard in an IoT SiteWise Monitor project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDashboard {
    _private: (),
}
impl CreateDashboard {
    /// Creates a new builder-style object to manufacture [`CreateDashboardInput`](crate::input::CreateDashboardInput)
    pub fn builder() -> crate::input::create_dashboard_input::Builder {
        crate::input::create_dashboard_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDashboard {
    type Output = std::result::Result<
        crate::output::CreateDashboardOutput,
        crate::error::CreateDashboardError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_dashboard_error(response)
        } else {
            crate::operation_deser::parse_create_dashboard_response(response)
        }
    }
}

/// <p>Creates a gateway, which is a virtual or edge device that delivers industrial data streams
/// from local servers to IoT SiteWise. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/gateway-connector.html">Ingesting data using a gateway</a> in the
/// <i>IoT SiteWise User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGateway {
    _private: (),
}
impl CreateGateway {
    /// Creates a new builder-style object to manufacture [`CreateGatewayInput`](crate::input::CreateGatewayInput)
    pub fn builder() -> crate::input::create_gateway_input::Builder {
        crate::input::create_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateGateway {
    type Output =
        std::result::Result<crate::output::CreateGatewayOutput, crate::error::CreateGatewayError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_gateway_error(response)
        } else {
            crate::operation_deser::parse_create_gateway_response(response)
        }
    }
}

/// <p>Creates a portal, which can contain projects and dashboards. IoT SiteWise Monitor uses Amazon Web Services SSO or IAM
/// to authenticate portal users and manage user permissions.</p>
/// <note>
/// <p>Before you can sign in to a new portal, you must add at least one identity to that
/// portal. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/administer-portals.html#portal-change-admins">Adding or removing portal
/// administrators</a> in the <i>IoT SiteWise User Guide</i>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePortal {
    _private: (),
}
impl CreatePortal {
    /// Creates a new builder-style object to manufacture [`CreatePortalInput`](crate::input::CreatePortalInput)
    pub fn builder() -> crate::input::create_portal_input::Builder {
        crate::input::create_portal_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePortal {
    type Output =
        std::result::Result<crate::output::CreatePortalOutput, crate::error::CreatePortalError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_create_portal_error(response)
        } else {
            crate::operation_deser::parse_create_portal_response(response)
        }
    }
}

/// <p>Creates a project in the specified portal.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateProject {
    _private: (),
}
impl CreateProject {
    /// Creates a new builder-style object to manufacture [`CreateProjectInput`](crate::input::CreateProjectInput)
    pub fn builder() -> crate::input::create_project_input::Builder {
        crate::input::create_project_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateProject {
    type Output =
        std::result::Result<crate::output::CreateProjectOutput, crate::error::CreateProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_project_error(response)
        } else {
            crate::operation_deser::parse_create_project_response(response)
        }
    }
}

/// <p>Deletes an access policy that grants the specified identity access to the specified
/// IoT SiteWise Monitor resource. You can use this operation to revoke access to an IoT SiteWise Monitor
/// resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAccessPolicy {
    _private: (),
}
impl DeleteAccessPolicy {
    /// Creates a new builder-style object to manufacture [`DeleteAccessPolicyInput`](crate::input::DeleteAccessPolicyInput)
    pub fn builder() -> crate::input::delete_access_policy_input::Builder {
        crate::input::delete_access_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAccessPolicy {
    type Output = std::result::Result<
        crate::output::DeleteAccessPolicyOutput,
        crate::error::DeleteAccessPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_access_policy_error(response)
        } else {
            crate::operation_deser::parse_delete_access_policy_response(response)
        }
    }
}

/// <p>Deletes an asset. This action can't be undone. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/delete-assets-and-models.html">Deleting assets and
/// models</a> in the <i>IoT SiteWise User Guide</i>. </p>
/// <note>
/// <p>You can't delete an asset that's associated to another asset. For more information, see
/// <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DisassociateAssets.html">DisassociateAssets</a>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAsset {
    _private: (),
}
impl DeleteAsset {
    /// Creates a new builder-style object to manufacture [`DeleteAssetInput`](crate::input::DeleteAssetInput)
    pub fn builder() -> crate::input::delete_asset_input::Builder {
        crate::input::delete_asset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAsset {
    type Output =
        std::result::Result<crate::output::DeleteAssetOutput, crate::error::DeleteAssetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_delete_asset_error(response)
        } else {
            crate::operation_deser::parse_delete_asset_response(response)
        }
    }
}

/// <p>Deletes an asset model. This action can't be undone. You must delete all assets created
/// from an asset model before you can delete the model. Also, you can't delete an asset model if
/// a parent asset model exists that contains a property formula expression that depends on the
/// asset model that you want to delete. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/delete-assets-and-models.html">Deleting assets and models</a> in the
/// <i>IoT SiteWise User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAssetModel {
    _private: (),
}
impl DeleteAssetModel {
    /// Creates a new builder-style object to manufacture [`DeleteAssetModelInput`](crate::input::DeleteAssetModelInput)
    pub fn builder() -> crate::input::delete_asset_model_input::Builder {
        crate::input::delete_asset_model_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAssetModel {
    type Output = std::result::Result<
        crate::output::DeleteAssetModelOutput,
        crate::error::DeleteAssetModelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_delete_asset_model_error(response)
        } else {
            crate::operation_deser::parse_delete_asset_model_response(response)
        }
    }
}

/// <p>Deletes a dashboard from IoT SiteWise Monitor.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDashboard {
    _private: (),
}
impl DeleteDashboard {
    /// Creates a new builder-style object to manufacture [`DeleteDashboardInput`](crate::input::DeleteDashboardInput)
    pub fn builder() -> crate::input::delete_dashboard_input::Builder {
        crate::input::delete_dashboard_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDashboard {
    type Output = std::result::Result<
        crate::output::DeleteDashboardOutput,
        crate::error::DeleteDashboardError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_dashboard_error(response)
        } else {
            crate::operation_deser::parse_delete_dashboard_response(response)
        }
    }
}

/// <p>Deletes a gateway from IoT SiteWise. When you delete a gateway, some of the gateway's files remain
/// in your gateway's file system.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteGateway {
    _private: (),
}
impl DeleteGateway {
    /// Creates a new builder-style object to manufacture [`DeleteGatewayInput`](crate::input::DeleteGatewayInput)
    pub fn builder() -> crate::input::delete_gateway_input::Builder {
        crate::input::delete_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteGateway {
    type Output =
        std::result::Result<crate::output::DeleteGatewayOutput, crate::error::DeleteGatewayError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_gateway_error(response)
        } else {
            crate::operation_deser::parse_delete_gateway_response(response)
        }
    }
}

/// <p>Deletes a portal from IoT SiteWise Monitor.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePortal {
    _private: (),
}
impl DeletePortal {
    /// Creates a new builder-style object to manufacture [`DeletePortalInput`](crate::input::DeletePortalInput)
    pub fn builder() -> crate::input::delete_portal_input::Builder {
        crate::input::delete_portal_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeletePortal {
    type Output =
        std::result::Result<crate::output::DeletePortalOutput, crate::error::DeletePortalError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_delete_portal_error(response)
        } else {
            crate::operation_deser::parse_delete_portal_response(response)
        }
    }
}

/// <p>Deletes a project from IoT SiteWise Monitor.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProject {
    _private: (),
}
impl DeleteProject {
    /// Creates a new builder-style object to manufacture [`DeleteProjectInput`](crate::input::DeleteProjectInput)
    pub fn builder() -> crate::input::delete_project_input::Builder {
        crate::input::delete_project_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteProject {
    type Output =
        std::result::Result<crate::output::DeleteProjectOutput, crate::error::DeleteProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_project_error(response)
        } else {
            crate::operation_deser::parse_delete_project_response(response)
        }
    }
}

/// <p>Describes an access policy, which specifies an identity's access to an IoT SiteWise Monitor portal or
/// project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAccessPolicy {
    _private: (),
}
impl DescribeAccessPolicy {
    /// Creates a new builder-style object to manufacture [`DescribeAccessPolicyInput`](crate::input::DescribeAccessPolicyInput)
    pub fn builder() -> crate::input::describe_access_policy_input::Builder {
        crate::input::describe_access_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAccessPolicy {
    type Output = std::result::Result<
        crate::output::DescribeAccessPolicyOutput,
        crate::error::DescribeAccessPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_access_policy_error(response)
        } else {
            crate::operation_deser::parse_describe_access_policy_response(response)
        }
    }
}

/// <p>Retrieves information about an asset.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAsset {
    _private: (),
}
impl DescribeAsset {
    /// Creates a new builder-style object to manufacture [`DescribeAssetInput`](crate::input::DescribeAssetInput)
    pub fn builder() -> crate::input::describe_asset_input::Builder {
        crate::input::describe_asset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAsset {
    type Output =
        std::result::Result<crate::output::DescribeAssetOutput, crate::error::DescribeAssetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_asset_error(response)
        } else {
            crate::operation_deser::parse_describe_asset_response(response)
        }
    }
}

/// <p>Retrieves information about an asset model.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAssetModel {
    _private: (),
}
impl DescribeAssetModel {
    /// Creates a new builder-style object to manufacture [`DescribeAssetModelInput`](crate::input::DescribeAssetModelInput)
    pub fn builder() -> crate::input::describe_asset_model_input::Builder {
        crate::input::describe_asset_model_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAssetModel {
    type Output = std::result::Result<
        crate::output::DescribeAssetModelOutput,
        crate::error::DescribeAssetModelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_asset_model_error(response)
        } else {
            crate::operation_deser::parse_describe_asset_model_response(response)
        }
    }
}

/// <p>Retrieves information about an asset property.</p>
/// <note>
/// <p>When you call this operation for an attribute property, this response includes the
/// default attribute value that you define in the asset model. If you update the default value
/// in the model, this operation's response includes the new default value.</p>
/// </note>
/// <p>This operation doesn't return the value of the asset property. To get the value of an
/// asset property, use <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_GetAssetPropertyValue.html">GetAssetPropertyValue</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAssetProperty {
    _private: (),
}
impl DescribeAssetProperty {
    /// Creates a new builder-style object to manufacture [`DescribeAssetPropertyInput`](crate::input::DescribeAssetPropertyInput)
    pub fn builder() -> crate::input::describe_asset_property_input::Builder {
        crate::input::describe_asset_property_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAssetProperty {
    type Output = std::result::Result<
        crate::output::DescribeAssetPropertyOutput,
        crate::error::DescribeAssetPropertyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_asset_property_error(response)
        } else {
            crate::operation_deser::parse_describe_asset_property_response(response)
        }
    }
}

/// <p>Retrieves information about a dashboard.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDashboard {
    _private: (),
}
impl DescribeDashboard {
    /// Creates a new builder-style object to manufacture [`DescribeDashboardInput`](crate::input::DescribeDashboardInput)
    pub fn builder() -> crate::input::describe_dashboard_input::Builder {
        crate::input::describe_dashboard_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDashboard {
    type Output = std::result::Result<
        crate::output::DescribeDashboardOutput,
        crate::error::DescribeDashboardError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_dashboard_error(response)
        } else {
            crate::operation_deser::parse_describe_dashboard_response(response)
        }
    }
}

/// <p>Retrieves information about the default encryption configuration for the Amazon Web Services account in
/// the default or specified Region. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/key-management.html">Key management</a> in the
/// <i>IoT SiteWise User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDefaultEncryptionConfiguration {
    _private: (),
}
impl DescribeDefaultEncryptionConfiguration {
    /// Creates a new builder-style object to manufacture [`DescribeDefaultEncryptionConfigurationInput`](crate::input::DescribeDefaultEncryptionConfigurationInput)
    pub fn builder() -> crate::input::describe_default_encryption_configuration_input::Builder {
        crate::input::describe_default_encryption_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDefaultEncryptionConfiguration {
    type Output = std::result::Result<
        crate::output::DescribeDefaultEncryptionConfigurationOutput,
        crate::error::DescribeDefaultEncryptionConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_default_encryption_configuration_error(response)
        } else {
            crate::operation_deser::parse_describe_default_encryption_configuration_response(
                response,
            )
        }
    }
}

/// <p>Retrieves information about a gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeGateway {
    _private: (),
}
impl DescribeGateway {
    /// Creates a new builder-style object to manufacture [`DescribeGatewayInput`](crate::input::DescribeGatewayInput)
    pub fn builder() -> crate::input::describe_gateway_input::Builder {
        crate::input::describe_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeGateway {
    type Output = std::result::Result<
        crate::output::DescribeGatewayOutput,
        crate::error::DescribeGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_gateway_error(response)
        } else {
            crate::operation_deser::parse_describe_gateway_response(response)
        }
    }
}

/// <p>Retrieves information about a gateway capability configuration.
/// Each gateway capability defines data sources for a gateway. A capability configuration
/// can contain multiple data source configurations. If you define OPC-UA sources for a gateway in
/// the IoT SiteWise console, all of your OPC-UA sources are stored in one capability configuration. To
/// list all capability configurations for a gateway, use <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGateway.html">DescribeGateway</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeGatewayCapabilityConfiguration {
    _private: (),
}
impl DescribeGatewayCapabilityConfiguration {
    /// Creates a new builder-style object to manufacture [`DescribeGatewayCapabilityConfigurationInput`](crate::input::DescribeGatewayCapabilityConfigurationInput)
    pub fn builder() -> crate::input::describe_gateway_capability_configuration_input::Builder {
        crate::input::describe_gateway_capability_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeGatewayCapabilityConfiguration {
    type Output = std::result::Result<
        crate::output::DescribeGatewayCapabilityConfigurationOutput,
        crate::error::DescribeGatewayCapabilityConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_gateway_capability_configuration_error(response)
        } else {
            crate::operation_deser::parse_describe_gateway_capability_configuration_response(
                response,
            )
        }
    }
}

/// <p>Retrieves the current IoT SiteWise logging options.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLoggingOptions {
    _private: (),
}
impl DescribeLoggingOptions {
    /// Creates a new builder-style object to manufacture [`DescribeLoggingOptionsInput`](crate::input::DescribeLoggingOptionsInput)
    pub fn builder() -> crate::input::describe_logging_options_input::Builder {
        crate::input::describe_logging_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLoggingOptions {
    type Output = std::result::Result<
        crate::output::DescribeLoggingOptionsOutput,
        crate::error::DescribeLoggingOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_logging_options_error(response)
        } else {
            crate::operation_deser::parse_describe_logging_options_response(response)
        }
    }
}

/// <p>Retrieves information about a portal.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePortal {
    _private: (),
}
impl DescribePortal {
    /// Creates a new builder-style object to manufacture [`DescribePortalInput`](crate::input::DescribePortalInput)
    pub fn builder() -> crate::input::describe_portal_input::Builder {
        crate::input::describe_portal_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePortal {
    type Output =
        std::result::Result<crate::output::DescribePortalOutput, crate::error::DescribePortalError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_portal_error(response)
        } else {
            crate::operation_deser::parse_describe_portal_response(response)
        }
    }
}

/// <p>Retrieves information about a project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProject {
    _private: (),
}
impl DescribeProject {
    /// Creates a new builder-style object to manufacture [`DescribeProjectInput`](crate::input::DescribeProjectInput)
    pub fn builder() -> crate::input::describe_project_input::Builder {
        crate::input::describe_project_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProject {
    type Output = std::result::Result<
        crate::output::DescribeProjectOutput,
        crate::error::DescribeProjectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_project_error(response)
        } else {
            crate::operation_deser::parse_describe_project_response(response)
        }
    }
}

/// <p>Retrieves information about the storage configuration for IoT SiteWise.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStorageConfiguration {
    _private: (),
}
impl DescribeStorageConfiguration {
    /// Creates a new builder-style object to manufacture [`DescribeStorageConfigurationInput`](crate::input::DescribeStorageConfigurationInput)
    pub fn builder() -> crate::input::describe_storage_configuration_input::Builder {
        crate::input::describe_storage_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeStorageConfiguration {
    type Output = std::result::Result<
        crate::output::DescribeStorageConfigurationOutput,
        crate::error::DescribeStorageConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_storage_configuration_error(response)
        } else {
            crate::operation_deser::parse_describe_storage_configuration_response(response)
        }
    }
}

/// <p>Disassociates a child asset from the given parent asset through a hierarchy defined in the
/// parent asset's model.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateAssets {
    _private: (),
}
impl DisassociateAssets {
    /// Creates a new builder-style object to manufacture [`DisassociateAssetsInput`](crate::input::DisassociateAssetsInput)
    pub fn builder() -> crate::input::disassociate_assets_input::Builder {
        crate::input::disassociate_assets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateAssets {
    type Output = std::result::Result<
        crate::output::DisassociateAssetsOutput,
        crate::error::DisassociateAssetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_assets_error(response)
        } else {
            crate::operation_deser::parse_disassociate_assets_response(response)
        }
    }
}

/// <p>Gets aggregated values for an asset property. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#aggregates">Querying
/// aggregates</a> in the <i>IoT SiteWise User Guide</i>.</p>
/// <p>To identify an asset property, you must specify one of the following:</p>
/// <ul>
/// <li>
/// <p>The <code>assetId</code> and <code>propertyId</code> of an asset property.</p>
/// </li>
/// <li>
/// <p>A <code>propertyAlias</code>, which is a data stream alias (for example,
/// <code>/company/windfarm/3/turbine/7/temperature</code>). To define an asset property's alias, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html">UpdateAssetProperty</a>.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAssetPropertyAggregates {
    _private: (),
}
impl GetAssetPropertyAggregates {
    /// Creates a new builder-style object to manufacture [`GetAssetPropertyAggregatesInput`](crate::input::GetAssetPropertyAggregatesInput)
    pub fn builder() -> crate::input::get_asset_property_aggregates_input::Builder {
        crate::input::get_asset_property_aggregates_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAssetPropertyAggregates {
    type Output = std::result::Result<
        crate::output::GetAssetPropertyAggregatesOutput,
        crate::error::GetAssetPropertyAggregatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_asset_property_aggregates_error(response)
        } else {
            crate::operation_deser::parse_get_asset_property_aggregates_response(response)
        }
    }
}

/// <p>Gets an asset property's current value. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#current-values">Querying
/// current values</a> in the <i>IoT SiteWise User Guide</i>.</p>
/// <p>To identify an asset property, you must specify one of the following:</p>
/// <ul>
/// <li>
/// <p>The <code>assetId</code> and <code>propertyId</code> of an asset property.</p>
/// </li>
/// <li>
/// <p>A <code>propertyAlias</code>, which is a data stream alias (for example,
/// <code>/company/windfarm/3/turbine/7/temperature</code>). To define an asset property's alias, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html">UpdateAssetProperty</a>.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAssetPropertyValue {
    _private: (),
}
impl GetAssetPropertyValue {
    /// Creates a new builder-style object to manufacture [`GetAssetPropertyValueInput`](crate::input::GetAssetPropertyValueInput)
    pub fn builder() -> crate::input::get_asset_property_value_input::Builder {
        crate::input::get_asset_property_value_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAssetPropertyValue {
    type Output = std::result::Result<
        crate::output::GetAssetPropertyValueOutput,
        crate::error::GetAssetPropertyValueError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_asset_property_value_error(response)
        } else {
            crate::operation_deser::parse_get_asset_property_value_response(response)
        }
    }
}

/// <p>Gets the history of an asset property's values. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#historical-values">Querying
/// historical values</a> in the <i>IoT SiteWise User Guide</i>.</p>
/// <p>To identify an asset property, you must specify one of the following:</p>
/// <ul>
/// <li>
/// <p>The <code>assetId</code> and <code>propertyId</code> of an asset property.</p>
/// </li>
/// <li>
/// <p>A <code>propertyAlias</code>, which is a data stream alias (for example,
/// <code>/company/windfarm/3/turbine/7/temperature</code>). To define an asset property's alias, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html">UpdateAssetProperty</a>.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAssetPropertyValueHistory {
    _private: (),
}
impl GetAssetPropertyValueHistory {
    /// Creates a new builder-style object to manufacture [`GetAssetPropertyValueHistoryInput`](crate::input::GetAssetPropertyValueHistoryInput)
    pub fn builder() -> crate::input::get_asset_property_value_history_input::Builder {
        crate::input::get_asset_property_value_history_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAssetPropertyValueHistory {
    type Output = std::result::Result<
        crate::output::GetAssetPropertyValueHistoryOutput,
        crate::error::GetAssetPropertyValueHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_asset_property_value_history_error(response)
        } else {
            crate::operation_deser::parse_get_asset_property_value_history_response(response)
        }
    }
}

/// <p>Get interpolated values for an asset property for a specified time interval, during a
/// period of time. If your time series is missing data points during the specified time interval,
/// you can use interpolation to estimate the missing data.</p>
/// <p>For example, you can use this operation to return the interpolated
/// temperature values for a wind turbine every 24 hours over a duration of 7 days.</p>
/// <p>To identify an asset property, you must specify one of the following:</p>
/// <ul>
/// <li>
/// <p>The <code>assetId</code> and <code>propertyId</code> of an asset property.</p>
/// </li>
/// <li>
/// <p>A <code>propertyAlias</code>, which is a data stream alias (for example,
/// <code>/company/windfarm/3/turbine/7/temperature</code>). To define an asset property's alias, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html">UpdateAssetProperty</a>.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetInterpolatedAssetPropertyValues {
    _private: (),
}
impl GetInterpolatedAssetPropertyValues {
    /// Creates a new builder-style object to manufacture [`GetInterpolatedAssetPropertyValuesInput`](crate::input::GetInterpolatedAssetPropertyValuesInput)
    pub fn builder() -> crate::input::get_interpolated_asset_property_values_input::Builder {
        crate::input::get_interpolated_asset_property_values_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetInterpolatedAssetPropertyValues {
    type Output = std::result::Result<
        crate::output::GetInterpolatedAssetPropertyValuesOutput,
        crate::error::GetInterpolatedAssetPropertyValuesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_interpolated_asset_property_values_error(response)
        } else {
            crate::operation_deser::parse_get_interpolated_asset_property_values_response(response)
        }
    }
}

/// <p>Retrieves a paginated list of access policies for an identity (an Amazon Web Services SSO user, an Amazon Web Services SSO
/// group, or an IAM user) or an IoT SiteWise Monitor resource (a portal or project).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAccessPolicies {
    _private: (),
}
impl ListAccessPolicies {
    /// Creates a new builder-style object to manufacture [`ListAccessPoliciesInput`](crate::input::ListAccessPoliciesInput)
    pub fn builder() -> crate::input::list_access_policies_input::Builder {
        crate::input::list_access_policies_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAccessPolicies {
    type Output = std::result::Result<
        crate::output::ListAccessPoliciesOutput,
        crate::error::ListAccessPoliciesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_access_policies_error(response)
        } else {
            crate::operation_deser::parse_list_access_policies_response(response)
        }
    }
}

/// <p>Retrieves a paginated list of summaries of all asset models.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAssetModels {
    _private: (),
}
impl ListAssetModels {
    /// Creates a new builder-style object to manufacture [`ListAssetModelsInput`](crate::input::ListAssetModelsInput)
    pub fn builder() -> crate::input::list_asset_models_input::Builder {
        crate::input::list_asset_models_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAssetModels {
    type Output = std::result::Result<
        crate::output::ListAssetModelsOutput,
        crate::error::ListAssetModelsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_asset_models_error(response)
        } else {
            crate::operation_deser::parse_list_asset_models_response(response)
        }
    }
}

/// <p>Retrieves a paginated list of asset relationships for an asset. You can use this operation
/// to identify an asset's root asset and all associated assets between that asset and its
/// root.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAssetRelationships {
    _private: (),
}
impl ListAssetRelationships {
    /// Creates a new builder-style object to manufacture [`ListAssetRelationshipsInput`](crate::input::ListAssetRelationshipsInput)
    pub fn builder() -> crate::input::list_asset_relationships_input::Builder {
        crate::input::list_asset_relationships_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAssetRelationships {
    type Output = std::result::Result<
        crate::output::ListAssetRelationshipsOutput,
        crate::error::ListAssetRelationshipsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_asset_relationships_error(response)
        } else {
            crate::operation_deser::parse_list_asset_relationships_response(response)
        }
    }
}

/// <p>Retrieves a paginated list of asset summaries.</p>
/// <p>You can use this operation to do the following:</p>
/// <ul>
/// <li>
/// <p>List assets based on a specific asset model.</p>
/// </li>
/// <li>
/// <p>List top-level assets.</p>
/// </li>
/// </ul>
/// <p>You can't use this operation to list all assets. To retrieve summaries for all of your
/// assets, use <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_ListAssetModels.html">ListAssetModels</a> to get all of your asset model IDs. Then, use ListAssets to get all
/// assets for each asset model.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAssets {
    _private: (),
}
impl ListAssets {
    /// Creates a new builder-style object to manufacture [`ListAssetsInput`](crate::input::ListAssetsInput)
    pub fn builder() -> crate::input::list_assets_input::Builder {
        crate::input::list_assets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAssets {
    type Output =
        std::result::Result<crate::output::ListAssetsOutput, crate::error::ListAssetsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_assets_error(response)
        } else {
            crate::operation_deser::parse_list_assets_response(response)
        }
    }
}

/// <p>Retrieves a paginated list of associated assets.</p>
/// <p>You can use this operation to do the following:</p>
/// <ul>
/// <li>
/// <p>List child assets associated to a parent asset by a hierarchy that you specify.</p>
/// </li>
/// <li>
/// <p>List an asset's parent asset.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAssociatedAssets {
    _private: (),
}
impl ListAssociatedAssets {
    /// Creates a new builder-style object to manufacture [`ListAssociatedAssetsInput`](crate::input::ListAssociatedAssetsInput)
    pub fn builder() -> crate::input::list_associated_assets_input::Builder {
        crate::input::list_associated_assets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAssociatedAssets {
    type Output = std::result::Result<
        crate::output::ListAssociatedAssetsOutput,
        crate::error::ListAssociatedAssetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_associated_assets_error(response)
        } else {
            crate::operation_deser::parse_list_associated_assets_response(response)
        }
    }
}

/// <p>Retrieves a paginated list of dashboards for an IoT SiteWise Monitor project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDashboards {
    _private: (),
}
impl ListDashboards {
    /// Creates a new builder-style object to manufacture [`ListDashboardsInput`](crate::input::ListDashboardsInput)
    pub fn builder() -> crate::input::list_dashboards_input::Builder {
        crate::input::list_dashboards_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDashboards {
    type Output =
        std::result::Result<crate::output::ListDashboardsOutput, crate::error::ListDashboardsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_dashboards_error(response)
        } else {
            crate::operation_deser::parse_list_dashboards_response(response)
        }
    }
}

/// <p>Retrieves a paginated list of gateways.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListGateways {
    _private: (),
}
impl ListGateways {
    /// Creates a new builder-style object to manufacture [`ListGatewaysInput`](crate::input::ListGatewaysInput)
    pub fn builder() -> crate::input::list_gateways_input::Builder {
        crate::input::list_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListGateways {
    type Output =
        std::result::Result<crate::output::ListGatewaysOutput, crate::error::ListGatewaysError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_gateways_error(response)
        } else {
            crate::operation_deser::parse_list_gateways_response(response)
        }
    }
}

/// <p>Retrieves a paginated list of IoT SiteWise Monitor portals.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPortals {
    _private: (),
}
impl ListPortals {
    /// Creates a new builder-style object to manufacture [`ListPortalsInput`](crate::input::ListPortalsInput)
    pub fn builder() -> crate::input::list_portals_input::Builder {
        crate::input::list_portals_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPortals {
    type Output =
        std::result::Result<crate::output::ListPortalsOutput, crate::error::ListPortalsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_portals_error(response)
        } else {
            crate::operation_deser::parse_list_portals_response(response)
        }
    }
}

/// <p>Retrieves a paginated list of assets associated with an IoT SiteWise Monitor project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProjectAssets {
    _private: (),
}
impl ListProjectAssets {
    /// Creates a new builder-style object to manufacture [`ListProjectAssetsInput`](crate::input::ListProjectAssetsInput)
    pub fn builder() -> crate::input::list_project_assets_input::Builder {
        crate::input::list_project_assets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProjectAssets {
    type Output = std::result::Result<
        crate::output::ListProjectAssetsOutput,
        crate::error::ListProjectAssetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_project_assets_error(response)
        } else {
            crate::operation_deser::parse_list_project_assets_response(response)
        }
    }
}

/// <p>Retrieves a paginated list of projects for an IoT SiteWise Monitor portal.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProjects {
    _private: (),
}
impl ListProjects {
    /// Creates a new builder-style object to manufacture [`ListProjectsInput`](crate::input::ListProjectsInput)
    pub fn builder() -> crate::input::list_projects_input::Builder {
        crate::input::list_projects_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProjects {
    type Output =
        std::result::Result<crate::output::ListProjectsOutput, crate::error::ListProjectsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_projects_error(response)
        } else {
            crate::operation_deser::parse_list_projects_response(response)
        }
    }
}

/// <p>Retrieves the list of tags for an IoT SiteWise resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Sets the default encryption configuration for the Amazon Web Services account. For more information, see
/// <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/key-management.html">Key management</a> in
/// the <i>IoT SiteWise User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutDefaultEncryptionConfiguration {
    _private: (),
}
impl PutDefaultEncryptionConfiguration {
    /// Creates a new builder-style object to manufacture [`PutDefaultEncryptionConfigurationInput`](crate::input::PutDefaultEncryptionConfigurationInput)
    pub fn builder() -> crate::input::put_default_encryption_configuration_input::Builder {
        crate::input::put_default_encryption_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutDefaultEncryptionConfiguration {
    type Output = std::result::Result<
        crate::output::PutDefaultEncryptionConfigurationOutput,
        crate::error::PutDefaultEncryptionConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_default_encryption_configuration_error(response)
        } else {
            crate::operation_deser::parse_put_default_encryption_configuration_response(response)
        }
    }
}

/// <p>Sets logging options for IoT SiteWise.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutLoggingOptions {
    _private: (),
}
impl PutLoggingOptions {
    /// Creates a new builder-style object to manufacture [`PutLoggingOptionsInput`](crate::input::PutLoggingOptionsInput)
    pub fn builder() -> crate::input::put_logging_options_input::Builder {
        crate::input::put_logging_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutLoggingOptions {
    type Output = std::result::Result<
        crate::output::PutLoggingOptionsOutput,
        crate::error::PutLoggingOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_logging_options_error(response)
        } else {
            crate::operation_deser::parse_put_logging_options_response(response)
        }
    }
}

/// <p>Configures storage settings for IoT SiteWise.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutStorageConfiguration {
    _private: (),
}
impl PutStorageConfiguration {
    /// Creates a new builder-style object to manufacture [`PutStorageConfigurationInput`](crate::input::PutStorageConfigurationInput)
    pub fn builder() -> crate::input::put_storage_configuration_input::Builder {
        crate::input::put_storage_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutStorageConfiguration {
    type Output = std::result::Result<
        crate::output::PutStorageConfigurationOutput,
        crate::error::PutStorageConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_storage_configuration_error(response)
        } else {
            crate::operation_deser::parse_put_storage_configuration_response(response)
        }
    }
}

/// <p>Adds tags to an IoT SiteWise resource. If a tag already exists for the resource, this operation
/// updates the tag's value.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes a tag from an IoT SiteWise resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates an existing access policy that specifies an identity's access to an IoT SiteWise Monitor
/// portal or project resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAccessPolicy {
    _private: (),
}
impl UpdateAccessPolicy {
    /// Creates a new builder-style object to manufacture [`UpdateAccessPolicyInput`](crate::input::UpdateAccessPolicyInput)
    pub fn builder() -> crate::input::update_access_policy_input::Builder {
        crate::input::update_access_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAccessPolicy {
    type Output = std::result::Result<
        crate::output::UpdateAccessPolicyOutput,
        crate::error::UpdateAccessPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_access_policy_error(response)
        } else {
            crate::operation_deser::parse_update_access_policy_response(response)
        }
    }
}

/// <p>Updates an asset's name. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-assets-and-models.html">Updating assets and models</a> in the
/// <i>IoT SiteWise User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAsset {
    _private: (),
}
impl UpdateAsset {
    /// Creates a new builder-style object to manufacture [`UpdateAssetInput`](crate::input::UpdateAssetInput)
    pub fn builder() -> crate::input::update_asset_input::Builder {
        crate::input::update_asset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAsset {
    type Output =
        std::result::Result<crate::output::UpdateAssetOutput, crate::error::UpdateAssetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_update_asset_error(response)
        } else {
            crate::operation_deser::parse_update_asset_response(response)
        }
    }
}

/// <p>Updates an asset model and all of the assets that were created from the model. Each asset
/// created from the model inherits the updated asset model's property and hierarchy definitions.
/// For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-assets-and-models.html">Updating assets and models</a> in the
/// <i>IoT SiteWise User Guide</i>.</p>
/// <important>
/// <p>This operation overwrites the existing model with the provided model. To avoid deleting
/// your asset model's properties or hierarchies, you must include their IDs and definitions in
/// the updated asset model payload. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAssetModel.html">DescribeAssetModel</a>.</p>
/// <p>If you remove a property from an asset model, IoT SiteWise deletes all previous data for that
/// property. If you remove a hierarchy definition from an asset model, IoT SiteWise disassociates every
/// asset associated with that hierarchy. You can't change the type or data type of an existing
/// property.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAssetModel {
    _private: (),
}
impl UpdateAssetModel {
    /// Creates a new builder-style object to manufacture [`UpdateAssetModelInput`](crate::input::UpdateAssetModelInput)
    pub fn builder() -> crate::input::update_asset_model_input::Builder {
        crate::input::update_asset_model_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAssetModel {
    type Output = std::result::Result<
        crate::output::UpdateAssetModelOutput,
        crate::error::UpdateAssetModelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_update_asset_model_error(response)
        } else {
            crate::operation_deser::parse_update_asset_model_response(response)
        }
    }
}

/// <p>Updates an asset property's alias and notification state.</p>
/// <important>
/// <p>This operation overwrites the property's existing alias and notification state. To keep
/// your existing property's alias or notification state, you must include the existing values
/// in the UpdateAssetProperty request. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAssetProperty.html">DescribeAssetProperty</a>.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAssetProperty {
    _private: (),
}
impl UpdateAssetProperty {
    /// Creates a new builder-style object to manufacture [`UpdateAssetPropertyInput`](crate::input::UpdateAssetPropertyInput)
    pub fn builder() -> crate::input::update_asset_property_input::Builder {
        crate::input::update_asset_property_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAssetProperty {
    type Output = std::result::Result<
        crate::output::UpdateAssetPropertyOutput,
        crate::error::UpdateAssetPropertyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_asset_property_error(response)
        } else {
            crate::operation_deser::parse_update_asset_property_response(response)
        }
    }
}

/// <p>Updates an IoT SiteWise Monitor dashboard.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDashboard {
    _private: (),
}
impl UpdateDashboard {
    /// Creates a new builder-style object to manufacture [`UpdateDashboardInput`](crate::input::UpdateDashboardInput)
    pub fn builder() -> crate::input::update_dashboard_input::Builder {
        crate::input::update_dashboard_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDashboard {
    type Output = std::result::Result<
        crate::output::UpdateDashboardOutput,
        crate::error::UpdateDashboardError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_dashboard_error(response)
        } else {
            crate::operation_deser::parse_update_dashboard_response(response)
        }
    }
}

/// <p>Updates a gateway's name.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGateway {
    _private: (),
}
impl UpdateGateway {
    /// Creates a new builder-style object to manufacture [`UpdateGatewayInput`](crate::input::UpdateGatewayInput)
    pub fn builder() -> crate::input::update_gateway_input::Builder {
        crate::input::update_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateGateway {
    type Output =
        std::result::Result<crate::output::UpdateGatewayOutput, crate::error::UpdateGatewayError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_gateway_error(response)
        } else {
            crate::operation_deser::parse_update_gateway_response(response)
        }
    }
}

/// <p>Updates a gateway capability configuration or defines a new capability configuration.
/// Each gateway capability defines data sources for a gateway. A capability configuration
/// can contain multiple data source configurations. If you define OPC-UA sources for a gateway in
/// the IoT SiteWise console, all of your OPC-UA sources are stored in one capability configuration. To
/// list all capability configurations for a gateway, use <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGateway.html">DescribeGateway</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGatewayCapabilityConfiguration {
    _private: (),
}
impl UpdateGatewayCapabilityConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateGatewayCapabilityConfigurationInput`](crate::input::UpdateGatewayCapabilityConfigurationInput)
    pub fn builder() -> crate::input::update_gateway_capability_configuration_input::Builder {
        crate::input::update_gateway_capability_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateGatewayCapabilityConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateGatewayCapabilityConfigurationOutput,
        crate::error::UpdateGatewayCapabilityConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_update_gateway_capability_configuration_error(response)
        } else {
            crate::operation_deser::parse_update_gateway_capability_configuration_response(response)
        }
    }
}

/// <p>Updates an IoT SiteWise Monitor portal.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePortal {
    _private: (),
}
impl UpdatePortal {
    /// Creates a new builder-style object to manufacture [`UpdatePortalInput`](crate::input::UpdatePortalInput)
    pub fn builder() -> crate::input::update_portal_input::Builder {
        crate::input::update_portal_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePortal {
    type Output =
        std::result::Result<crate::output::UpdatePortalOutput, crate::error::UpdatePortalError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_update_portal_error(response)
        } else {
            crate::operation_deser::parse_update_portal_response(response)
        }
    }
}

/// <p>Updates an IoT SiteWise Monitor project.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateProject {
    _private: (),
}
impl UpdateProject {
    /// Creates a new builder-style object to manufacture [`UpdateProjectInput`](crate::input::UpdateProjectInput)
    pub fn builder() -> crate::input::update_project_input::Builder {
        crate::input::update_project_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateProject {
    type Output =
        std::result::Result<crate::output::UpdateProjectOutput, crate::error::UpdateProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_project_error(response)
        } else {
            crate::operation_deser::parse_update_project_response(response)
        }
    }
}
